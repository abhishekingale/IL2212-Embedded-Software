
single-rtos.elf:     file format elf32-littlenios2
single-rtos.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x010001a0

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x01000000 align 2**12
         filesz 0x000001a0 memsz 0x000001a0 flags r-x
    LOAD off    0x000021a0 vaddr 0x010001a0 paddr 0x010001a0 align 2**12
         filesz 0x00010158 memsz 0x00010158 flags r-x
    LOAD off    0x000122f8 vaddr 0x010102f8 paddr 0x01011eb8 align 2**12
         filesz 0x00001bc0 memsz 0x00001bc0 flags rw-
    LOAD off    0x00014a78 vaddr 0x01013a78 paddr 0x01013a78 align 2**12
         filesz 0x00000000 memsz 0x00007568 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001a0  00080020  01000000  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000fe3c  010001a0  010001a0  000021a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000031c  0100ffdc  0100ffdc  00011fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bc0  010102f8  01011eb8  000122f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00007568  01013a78  01013a78  00014a78  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00013eb8  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000bf8  00000000  00000000  00013ee0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001cd9  00000000  00000000  00014ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002951c  00000000  00000000  000167b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00007b4e  00000000  00000000  0003fccd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000166af  00000000  00000000  0004781b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001ff4  00000000  00000000  0005decc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001cca  00000000  00000000  0005fec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000062bc  00000000  00000000  00061b8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00067e48  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000508  00000000  00000000  00067e58  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  0006c5dd  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0006c5e3  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006c5e8  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006c5e9  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0006c5ea  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0006c5ee  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0006c5f2  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0006c5f6  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0006c601  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0006c60c  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  0006c617  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000040  00000000  00000000  0006c622  2**0
                  CONTENTS, READONLY
 29 .jdi          000175b7  00000000  00000000  0006c662  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00157894  00000000  00000000  00083c19  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
010001a0 l    d  .text	00000000 .text
0100ffdc l    d  .rodata	00000000 .rodata
010102f8 l    d  .rwdata	00000000 .rwdata
01013a78 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
010001d8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
010102f8 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
01001c30 l     F .text	00000058 std
01001d3c l     F .text	00000008 __fp_lock
01001d44 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
01002d74 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
01002dd4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
01002ed8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
01002ffc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
010030dc l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0100323c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
01003488 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
01011e24 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
01003740 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
01011e28 l     O .rwdata	00000004 lockid
01013a98 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
01011e2c l     O .rwdata	00000004 lockid
01013aa0 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
01005178 l     F .text	00000044 OS_InitMisc
010051bc l     F .text	0000006c OS_InitRdyList
01005320 l     F .text	000000e0 OS_InitTCBList
0100509c l     F .text	000000dc OS_InitEventList
01005228 l     F .text	0000007c OS_InitTaskIdle
010052a4 l     F .text	0000007c OS_InitTaskStat
01005594 l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
010074b4 l     F .text	00000110 OS_FlagTaskRdy
0100720c l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
01010ca8 l     O .rwdata	0000106c jtag_uart_0
01011d14 l     O .rwdata	00000014 mutex_0
01011d28 l     O .rwdata	00000014 mutex_1
01011d3c l     O .rwdata	00000014 mutex_2
01011d50 l     O .rwdata	00000014 mutex_3
01011d64 l     O .rwdata	00000014 mutex_4
01011d78 l     O .rwdata	0000002c Buttons
01011da4 l     O .rwdata	0000002c HEX3_HEX0
01011dd0 l     O .rwdata	0000002c HEX7_HEX4
0100c048 l     F .text	00000038 alt_dev_reg
0100bf34 l     F .text	000000b4 alt_avalon_mutex_reg
0100bfe8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0100c2f8 l     F .text	000002c8 altera_avalon_jtag_uart_irq
0100c5c0 l     F .text	00000114 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
0100cdd8 l     F .text	0000007c alt_mutex_trylock
0100ceac l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0100d148 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0100d468 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0100d640 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0100d950 l     F .text	000000f8 alt_file_locked
0100dbd4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0100e6fc l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
0100e954 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0100f768 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_exit.c
0100ff6c l     F .text	00000040 alt_sim_halt
01011e7a g     O .rwdata	00000002 OSTaskNameSize
01002adc g     F .text	00000070 _isatty_r
0100329c g     F .text	000000c8 alt_main
010002f8 g     F .text	000000a0 _puts_r
0101ad50 g     O .bss	00000100 alt_irq
01002b4c g     F .text	00000078 _lseek_r
01007da8 g     F .text	000000d4 OS_MemInit
01011eb8 g       *ABS*	00000000 __flash_rwdata_start
0100bdd0 g     F .text	00000064 OSTimeSet
01003cf4 g     F .text	000006b4 OSEventPendMulti
0101afe0 g       *ABS*	00000000 __alt_heap_start
0100e1dc g     F .text	00000020 OSTaskCreateHook
01013b2c g     O .bss	00002000 task1_stk
01011e52 g     O .rwdata	00000002 OSMboxEn
010043fc g     F .text	0000007c OSIntEnter
00080000 g       *ABS*	00000000 __alt_mem_sram
01002718 g     F .text	00000068 __sseek
01001c98 g     F .text	000000a4 __sinit
01011e62 g     O .rwdata	00000002 OSQEn
01001d98 g     F .text	0000009c __sfmoreglue
010039b0 g     F .text	000000d0 __malloc_unlock
0100e238 g     F .text	0000001c OSTaskStatHook
01013aa8 g     O .bss	00000001 OSLockNesting
01011ea0 g     O .rwdata	00000002 OSDataSize
01013aa9 g     O .bss	00000001 OSRunning
01001180 g     F .text	000000e0 memmove
0100e270 g     F .text	0000001c OSInitHookBegin
01011e98 g     O .rwdata	00000002 OSTmrSize
01001d88 g     F .text	00000010 _cleanup
0100cf8c g     F .text	00000078 altera_avalon_mutex_trylock
01013aac g     O .bss	00000004 OSIdleCtr
0100dea8 g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
010058c8 g     F .text	000002e0 OS_TCBInit
00080000 g     F .entry	0000000c __reset
01011e9e g     O .rwdata	00000002 OSTmrWheelTblSize
0100d074 g     F .text	0000007c altera_avalon_mutex_is_mine
01000000 g       *ABS*	00000000 __flash_exceptions_start
01011e3e g     O .rwdata	00000002 OSEventSize
01013ab0 g     O .bss	00000001 OSPrioHighRdy
01002a68 g     F .text	00000074 _fstat_r
0100e1fc g     F .text	00000020 OSTaskDelHook
01013a84 g     O .bss	00000004 errno
0100de88 g       .text	00000000 OSStartHighRdy
0100a4c0 g     F .text	00000200 OSTaskCreateExt
01006d28 g     F .text	00000068 OSFlagPendGetFlagsRdy
01011e7e g     O .rwdata	00000002 OSTaskStatStkSize
01005d34 g     F .text	00000334 OSFlagAccept
010084e4 g     F .text	000000c8 OSQFlush
01007e7c g     F .text	00000154 OSQAccept
01013a90 g     O .bss	00000004 alt_argv
01019dfc g       *ABS*	00000000 _gp
0100a2ec g     F .text	000001d4 OSTaskCreate
01009d78 g     F .text	00000574 OSTaskChangePrio
01013aa4 g     O .bss	00000004 alt_heapsem
01005ba8 g     F .text	0000018c OSDebugInit
0100a6c0 g     F .text	0000040c OSTaskDel
01010b28 g     O .rwdata	00000180 alt_fd_list
01017b2c g     O .bss	00000370 OSFlagTbl
01004e78 g     F .text	000000b8 OS_EventTaskRemove
0100d590 g     F .text	00000094 alt_find_dev
010010e0 g     F .text	000000a0 memcpy
01011e68 g     O .rwdata	00000002 OSRdyTblSize
01001d7c g     F .text	0000000c _cleanup_r
0100d718 g     F .text	00000078 alt_io_redirect
0100ffdc g       *ABS*	00000000 __DTOR_END__
01000398 g     F .text	00000014 puts
01003a80 g     F .text	00000130 OSEventNameGet
01011e4c g     O .rwdata	00000002 OSFlagMax
01004478 g     F .text	00000100 OSIntExit
01011e86 g     O .rwdata	00000002 OSTCBSize
01013ab1 g     O .bss	00000001 OSPrioCur
0100c83c g     F .text	000002c0 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
0100f8a4 g     F .text	00000008 __udivsi3
01002f38 g     F .text	000000c4 isatty
01011e6c g     O .rwdata	00000002 OSStkWidth
01011e60 g     O .rwdata	00000002 OSPtrSize
01011e40 g     O .rwdata	00000002 OSEventTblSize
0100e8b0 g     F .text	000000a4 __fixunsdfsi
0100ddfc g       .text	00000000 OSCtxSw
01013a78 g     O .bss	00000004 __malloc_top_pad
01013ab4 g     O .bss	00000004 OSTCBList
01013a88 g     O .bss	00000004 alt_fd_list_lock
01000420 g     F .text	0000049c __sfvwrite_r
01017e9c g     O .bss	00000c30 OSMemTbl
01013ab8 g     O .bss	00000001 OSTickStepState
01001854 g     F .text	00000070 _sbrk_r
01011e64 g     O .rwdata	00000002 OSQMax
01018acc g     O .bss	00000800 OSTaskStatStk
01007990 g     F .text	0000010c OSMemNameGet
01011e44 g     O .rwdata	00000002 OSFlagEn
01002bc4 g     F .text	00000078 _read_r
01011e8a g     O .rwdata	00000002 OSTimeTickHookEn
01008a48 g     F .text	00000180 OSQPost
010075c4 g     F .text	000000ac OS_FlagUnlink
01011e1c g     O .rwdata	00000004 alt_max_fd
01005454 g     F .text	0000006c OS_MemCopy
0100fd6c g     F .text	00000138 __unpack_d
010054c0 g     F .text	000000d4 OS_Sched
01002944 g     F .text	00000110 _fclose_r
0100788c g     F .text	00000104 OSMemGet
0100adf4 g     F .text	000001c4 OSTaskNameSet
01001bfc g     F .text	00000034 fflush
01013a7c g     O .bss	00000004 __malloc_max_sbrked_mem
01013abc g     O .bss	00000004 OSCtxSwCtr
0100e254 g     F .text	0000001c OSTimeTickHook
0100d790 g     F .text	000001c0 alt_irq_register
01011e4e g     O .rwdata	00000002 OSFlagNameSize
01004f30 g     F .text	00000104 OS_EventTaskRemoveMulti
0100ede4 g     F .text	00000074 __adddf3
01004d24 g     F .text	00000154 OS_EventTaskWaitMulti
01011e66 g     O .rwdata	00000002 OSQSize
01003148 g     F .text	000000f4 lseek
0100d0f0 g     F .text	00000058 altera_avalon_mutex_first_lock
01009624 g     F .text	0000027c OSSemPend
01011e00 g     O .rwdata	00000004 _global_impure_ptr
01001260 g     F .text	000005f4 _realloc_r
01011e50 g     O .rwdata	00000002 OSLowestPrio
0101afe0 g       *ABS*	00000000 __bss_end
0100e2c4 g     F .text	00000020 OSTCBInitHook
01011e96 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0100dccc g     F .text	00000110 alt_tick
01011e38 g     O .rwdata	00000002 OSEventEn
01011e92 g     O .rwdata	00000002 OSTmrCfgNameSize
0100f5d4 g     F .text	00000194 __floatunsidf
01001d64 g     F .text	00000018 __fp_lock_all
010073d0 g     F .text	000000e4 OS_FlagInit
0100dc34 g     F .text	00000098 alt_alarm_stop
01011e74 g     O .rwdata	00000002 OSTaskIdleStkSize
01013af8 g     O .bss	00000004 alt_irq_active
010091b0 g     F .text	000000c0 OSSemAccept
01007bbc g     F .text	000000f0 OSMemPut
01007670 g     F .text	0000021c OSMemCreate
01013ac0 g     O .bss	00000004 OSIdleCtrMax
000800ec g     F .exceptions	000000d4 alt_irq_handler
01010b00 g     O .rwdata	00000028 alt_dev_null
01011e88 g     O .rwdata	00000002 OSTicksPerSec
0100ce54 g     F .text	00000058 altera_avalon_mutex_open
0100ddfc g       .text	00000000 OSIntCtxSw
0100d398 g     F .text	0000001c alt_dcache_flush_all
0100f4fc g     F .text	000000d8 __fixdfsi
01013ac4 g     O .bss	00000004 OSTCBFreeList
01011eb8 g       *ABS*	00000000 __ram_rwdata_end
010098a0 g     F .text	0000017c OSSemPendAbort
01011e14 g     O .rwdata	00000008 alt_dev_list
0100361c g     F .text	00000124 write
01011e8c g     O .rwdata	00000002 OSVersionNbr
01011ea4 g     O .rwdata	00000008 alt_mutex_list
010102f8 g       *ABS*	00000000 __ram_rodata_end
01002e00 g     F .text	000000d8 fstat
01011e34 g     O .rwdata	00000004 OSEndiannessTest
0100f8ac g     F .text	00000008 __umodsi3
01011e46 g     O .rwdata	00000002 OSFlagGrpSize
0101afe0 g       *ABS*	00000000 end
0100c1c8 g     F .text	00000130 altera_avalon_jtag_uart_init
01005738 g     F .text	000000c8 OS_TaskStat
0100ffd8 g       *ABS*	00000000 __CTOR_LIST__
01800000 g       *ABS*	00000000 __alt_stack_pointer
0100d1bc g     F .text	00000088 alt_avalon_timer_sc_init
0100f9d8 g     F .text	00000080 __clzsi2
0100cafc g     F .text	000002dc altera_avalon_jtag_uart_write
01001c88 g     F .text	00000004 __sfp_lock_acquire
01000ffc g     F .text	000000e4 memchr
01005400 g     F .text	00000054 OS_MemClr
0100decc g     F .text	00000310 OSTaskStkInit
010001dc g     F .text	00000038 task1
01002050 g     F .text	00000314 _free_r
01004a80 g     F .text	00000194 OS_EventTaskRdy
0100e700 g     F .text	000001b0 __call_exitprocs
01013ac8 g     O .bss	00000001 OSCPUUsage
01011e08 g     O .rwdata	00000004 __malloc_sbrk_base
010001a0 g     F .text	0000003c _start
01000214 g     F .text	00000038 task2
01013afc g     O .bss	00000004 _alt_tick_rate
010085ac g     F .text	00000320 OSQPend
0100b7b8 g     F .text	0000014c OSTimeDly
01013b00 g     O .bss	00000004 _alt_nticks
01003364 g     F .text	00000124 read
0100be68 g     F .text	000000cc alt_sys_init
0100e5c8 g     F .text	00000134 __register_exitproc
01013ac9 g     O .bss	00000001 OSTaskCtr
0100d004 g     F .text	00000070 altera_avalon_mutex_unlock
0100b904 g     F .text	00000258 OSTimeDlyHMSM
0100c6d4 g     F .text	00000074 altera_avalon_jtag_uart_close
01002c3c g     F .text	00000038 __mulsi3
010102f8 g       *ABS*	00000000 __ram_rwdata_start
0100ffdc g       *ABS*	00000000 __ram_rodata_start
01013b04 g     O .bss	00000028 __malloc_current_mallinfo
01011e3a g     O .rwdata	00000002 OSEventMax
01009a1c g     F .text	00000128 OSSemPost
01004604 g     F .text	000000e4 OSSchedUnlock
0100c080 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0100e404 g     F .text	00000104 alt_get_fd
01013acc g     O .bss	00000004 OSMemFreeList
01004758 g     F .text	000000ac OSStatInit
01007138 g     F .text	000000d4 OSFlagQuery
0100fea4 g     F .text	000000c8 __fpcmp_parts_d
01011e70 g     O .rwdata	00000002 OSTaskCreateExtEn
010028d4 g     F .text	00000070 _close_r
0100e554 g     F .text	00000074 memcmp
01004a64 g     F .text	0000001c OS_Dummy
0100c130 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0101afe0 g       *ABS*	00000000 __alt_stack_base
0100c178 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
010018c4 g     F .text	0000013c __swsetup_r
010192cc g     O .bss	000001e0 OSQTbl
0100f21c g     F .text	00000258 __divdf3
01001e34 g     F .text	000000f0 __sfp
010106f8 g     O .rwdata	00000408 __malloc_av_
01001c94 g     F .text	00000004 __sinit_lock_release
0100ee58 g     F .text	000003c4 __muldf3
01013ad0 g     O .bss	00000004 OSTCBHighRdy
010027fc g     F .text	00000060 __sread
01013ad4 g     O .bss	00000004 OSQFreeList
0100e2e4 g     F .text	00000120 alt_find_file
0100d3b4 g     F .text	000000b4 alt_dev_llist_insert
010038a8 g     F .text	00000108 __malloc_lock
01003560 g     F .text	000000bc sbrk
01003bb0 g     F .text	00000144 OSEventNameSet
01001a00 g     F .text	000001fc _fflush_r
01013ad8 g     O .bss	00000001 OSRdyGrp
01013a78 g       *ABS*	00000000 __bss_start
01002678 g     F .text	00000098 memset
0100024c g     F .text	000000ac main
01013a94 g     O .bss	00000004 alt_envp
01013a80 g     O .bss	00000004 __malloc_max_total_mem
0100c0d8 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0101002c g     O .rodata	00000100 OSUnMapTbl
01011e6a g     O .rwdata	00000002 OSSemEn
01006d90 g     F .text	000003a8 OSFlagPost
01002710 g     F .text	00000008 __sclose
01800000 g       *ABS*	00000000 __alt_heap_limit
01002a54 g     F .text	00000014 fclose
01004c14 g     F .text	00000110 OS_EventTaskWait
01015b2c g     O .bss	00002000 task2_stk
01005800 g     F .text	000000c8 OS_TaskStatStkChk
0101ae50 g     O .bss	00000190 _atexit0
0100cf2c g     F .text	00000060 altera_avalon_mutex_lock
0100aacc g     F .text	00000170 OSTaskDelReq
010008bc g     F .text	00000740 _malloc_r
01011e20 g     O .rwdata	00000004 alt_errno
010046e8 g     F .text	00000070 OSStart
0100384c g     F .text	0000005c __env_unlock
0100242c g     F .text	000000b8 _fwalk
0100afb8 g     F .text	00000218 OSTaskResume
01007cac g     F .text	000000fc OSMemQuery
01011e7c g     O .rwdata	00000002 OSTaskStatEn
01011e56 g     O .rwdata	00000002 OSMemMax
01008bc8 g     F .text	00000188 OSQPostFront
0100f7e4 g     F .text	00000060 __divsi3
01013ad9 g     O .bss	00000003 OSRdyTbl
01011e30 g     O .rwdata	00000002 OSDebugEn
010101e4 g     O .rodata	00000014 __thenan_df
01001f24 g     F .text	0000012c _malloc_trim_r
0100ffdc g       *ABS*	00000000 __CTOR_END__
01011e48 g     O .rwdata	00000002 OSFlagNodeSize
01011e90 g     O .rwdata	00000002 OSTmrCfgMax
01007fd0 g     F .text	00000214 OSQCreate
0100ac3c g     F .text	000001b8 OSTaskNameGet
0100ffdc g       *ABS*	00000000 __flash_rodata_start
01008d50 g     F .text	00000234 OSQPostOpt
01004804 g     F .text	00000240 OSTimeTick
01011e78 g     O .rwdata	00000002 OSTaskMax
0100ffdc g       *ABS*	00000000 __DTOR_LIST__
01009270 g     F .text	00000114 OSSemCreate
01011e9c g     O .rwdata	00000002 OSTmrWheelSize
01011e72 g     O .rwdata	00000002 OSTaskDelEn
01009b44 g     F .text	00000130 OSSemQuery
010081e4 g     F .text	00000300 OSQDel
010088cc g     F .text	0000017c OSQPendAbort
0100be34 g     F .text	00000034 alt_irq_init
010034e8 g     F .text	00000078 alt_release_fd
00102000 g       *ABS*	00000000 __alt_mem_shared_onchip
010101f8 g     O .rodata	00000100 __clz_tab
0100e508 g     F .text	00000014 atexit
0100285c g     F .text	00000078 _write_r
01004578 g     F .text	0000008c OSSchedLock
01006068 g     F .text	0000013c OSFlagCreate
01011dfc g     O .rwdata	00000004 _impure_ptr
01013a8c g     O .bss	00000004 alt_argc
0100d52c g     F .text	00000064 _do_dtors
01011e42 g     O .rwdata	00000002 OSEventMultiEn
010061a4 g     F .text	000002a8 OSFlagDel
01013adc g     O .bss	00000004 OSEventFreeList
00080020 g       .exceptions	00000000 alt_irq_entry
010066e4 g     F .text	00000644 OSFlagPend
01011e8e g     O .rwdata	00000002 OSTmrEn
01001d4c g     F .text	00000018 __fp_unlock_all
01011e0c g     O .rwdata	00000008 alt_fs_list
01005604 g     F .text	00000080 OS_StrCopy
01011e58 g     O .rwdata	00000002 OSMemNameSize
0100e28c g     F .text	0000001c OSInitHookEnd
00080020 g       *ABS*	00000000 __ram_exceptions_start
01011e84 g     O .rwdata	00000002 OSTCBPrioTblMax
01011e80 g     O .rwdata	00000002 OSTaskStatStkChkEn
01011e54 g     O .rwdata	00000002 OSMemEn
01011e5e g     O .rwdata	00000002 OSMutexEn
01011eb8 g       *ABS*	00000000 _edata
0101afe0 g       *ABS*	00000000 _end
01013ae0 g     O .bss	00000001 OSIntNesting
000801c0 g       *ABS*	00000000 __ram_exceptions_end
0100c748 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0100bb5c g     F .text	00000210 OSTimeDlyResume
01006590 g     F .text	00000154 OSFlagNameSet
0100b1d0 g     F .text	000001fc OSTaskStkChk
01011e5a g     O .rwdata	00000002 OSMemSize
01002780 g     F .text	0000007c __swrite
01011e04 g     O .rwdata	00000004 __malloc_trim_threshold
0100dddc g     F .text	00000020 altera_nios2_qsys_irq_init
01013ae4 g     O .bss	00000004 OSTCBCur
0100e51c g     F .text	00000038 exit
01011e5c g     O .rwdata	00000002 OSMemTblSize
01002364 g     F .text	000000c8 _fwalk_reent
0100f844 g     F .text	00000060 __modsi3
01800000 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
01001c8c g     F .text	00000004 __sfp_lock_release
010043a8 g     F .text	00000054 OSInit
01000000 g       *ABS*	00000000 __alt_mem_sdram
0100b5f8 g     F .text	00000144 OSTaskQuery
01009104 g     F .text	000000ac OS_QInit
01005684 g     F .text	00000058 OS_StrLen
01007a9c g     F .text	00000120 OSMemNameSet
01011e76 g     O .rwdata	00000002 OSTaskProfileEn
01013ae8 g     O .bss	00000004 OSTime
010194ac g     O .bss	00000800 OSTaskIdleStk
0100ffac g     F .text	0000002c _exit
0100d244 g     F .text	00000154 alt_alarm_start
0100644c g     F .text	00000144 OSFlagNameGet
0100bd6c g     F .text	00000064 OSTimeGet
0100f8b4 g     F .text	00000124 __muldi3
010024e4 g     F .text	00000194 __smakebuf_r
010003ac g     F .text	00000074 strlen
0100e21c g     F .text	0000001c OSTaskSwHook
0100da48 g     F .text	0000018c open
01019cac g     O .bss	00000b40 OSEventTbl
0100f474 g     F .text	00000088 __gedf2
0101a7ec g     O .bss	00000510 OSTCBTbl
01009c74 g     F .text	00000104 OSSemSet
0100d624 g     F .text	0000001c alt_icache_flush_all
01011eac g     O .rwdata	00000004 alt_priority_mask
01009384 g     F .text	000002a0 OSSemDel
01013aec g     O .bss	00000004 OSFlagFreeList
01011e3c g     O .rwdata	00000002 OSEventNameSize
01013af0 g     O .bss	00000001 OSStatRdy
0100cf0c g     F .text	00000020 altera_avalon_mutex_close
0101acfc g     O .bss	00000054 OSTCBPrioTbl
010037a0 g     F .text	000000ac __env_lock
01011e82 g     O .rwdata	00000002 OSTaskSwHookEn
0100ed64 g     F .text	00000080 __subdf3
01011eb0 g     O .rwdata	00000008 alt_alarm_list
01011e4a g     O .rwdata	00000002 OSFlagWidth
0100d4c8 g     F .text	00000064 _do_ctors
01002c74 g     F .text	00000100 close
01013a9c g     O .bss	00000004 alt_envsem
01013af4 g     O .bss	00000004 OSIdleCtrRun
01004a44 g     F .text	00000020 OSVersion
01011e94 g     O .rwdata	00000002 OSTmrCfgWheelSize
0100305c g     F .text	00000080 alt_load
0100b73c g     F .text	0000007c OS_TaskStkClr
0100fa58 g     F .text	00000314 __pack_d
01011e6e g     O .rwdata	00000002 OSTaskCreateEn
01005034 g     F .text	00000068 OS_EventWaitListInit
0100e2a8 g     F .text	0000001c OSTaskIdleHook
00000000  w      *UND*	00000000 free
01001c90 g     F .text	00000004 __sinit_lock_acquire
0100b3cc g     F .text	0000022c OSTaskSuspend
010056dc g     F .text	0000005c OS_TaskIdle
01011e9a g     O .rwdata	00000002 OSTmrTblSize
01008f84 g     F .text	00000180 OSQQuery



Disassembly of section .entry:

00080000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80000:	00404034 	movhi	at,256
    ori r1, r1, %lo(_start)
   80004:	08406814 	ori	at,at,416
    jmp r1
   80008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00080020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   80044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800ec0 	call	800ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000306 	br	80098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   8008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   80094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   80098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   8009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   800c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   800e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800e8:	ef80083a 	eret

000800ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800ec:	defff904 	addi	sp,sp,-28
   800f0:	dfc00615 	stw	ra,24(sp)
   800f4:	df000515 	stw	fp,20(sp)
   800f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   800fc:	10043fc0 	call	10043fc <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80100:	0005313a 	rdctl	r2,ipending
   80104:	e0bffc15 	stw	r2,-16(fp)

  return active;
   80108:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   8010c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   80110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   80114:	00800044 	movi	r2,1
   80118:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   8011c:	e0ffff17 	ldw	r3,-4(fp)
   80120:	e0bffe17 	ldw	r2,-8(fp)
   80124:	1884703a 	and	r2,r3,r2
   80128:	1005003a 	cmpeq	r2,r2,zero
   8012c:	1000171e 	bne	r2,zero,8018c <alt_irq_handler+0xa0>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   80130:	e0bffd17 	ldw	r2,-12(fp)
   80134:	00c040b4 	movhi	r3,258
   80138:	18eb5404 	addi	r3,r3,-21168
   8013c:	100490fa 	slli	r2,r2,3
   80140:	10c5883a 	add	r2,r2,r3
   80144:	11800017 	ldw	r6,0(r2)
   80148:	e0bffd17 	ldw	r2,-12(fp)
   8014c:	00c040b4 	movhi	r3,258
   80150:	18eb5404 	addi	r3,r3,-21168
   80154:	100490fa 	slli	r2,r2,3
   80158:	10c5883a 	add	r2,r2,r3
   8015c:	10800104 	addi	r2,r2,4
   80160:	11000017 	ldw	r4,0(r2)
   80164:	e17ffd17 	ldw	r5,-12(fp)
   80168:	303ee83a 	callr	r6
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   8016c:	0005313a 	rdctl	r2,ipending
   80170:	e0bffb15 	stw	r2,-20(fp)

  return active;
   80174:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   80178:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   8017c:	e0bfff17 	ldw	r2,-4(fp)
   80180:	1004c03a 	cmpne	r2,r2,zero
   80184:	103fe21e 	bne	r2,zero,80110 <alt_irq_handler+0x24>
   80188:	00000706 	br	801a8 <alt_irq_handler+0xbc>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   8018c:	e0bffe17 	ldw	r2,-8(fp)
   80190:	1085883a 	add	r2,r2,r2
   80194:	e0bffe15 	stw	r2,-8(fp)
      i++;
   80198:	e0bffd17 	ldw	r2,-12(fp)
   8019c:	10800044 	addi	r2,r2,1
   801a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   801a4:	003fdd06 	br	8011c <alt_irq_handler+0x30>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   801a8:	10044780 	call	1004478 <OSIntExit>
}
   801ac:	e037883a 	mov	sp,fp
   801b0:	dfc00117 	ldw	ra,4(sp)
   801b4:	df000017 	ldw	fp,0(sp)
   801b8:	dec00204 	addi	sp,sp,8
   801bc:	f800283a 	ret

Disassembly of section .text:

010001a0 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 10001a0:	06c06034 	movhi	sp,384
    ori sp, sp, %lo(__alt_stack_pointer)
 10001a4:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 10001a8:	06804074 	movhi	gp,257
    ori gp, gp, %lo(_gp)
 10001ac:	d6a77f14 	ori	gp,gp,40444
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 10001b0:	00804074 	movhi	r2,257
    ori r2, r2, %lo(__bss_start)
 10001b4:	108e9e14 	ori	r2,r2,14968

    movhi r3, %hi(__bss_end)
 10001b8:	00c04074 	movhi	r3,257
    ori r3, r3, %lo(__bss_end)
 10001bc:	18ebf814 	ori	r3,r3,45024

    beq r2, r3, 1f
 10001c0:	10c00326 	beq	r2,r3,10001d0 <_start+0x30>

0:
    stw zero, (r2)
 10001c4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 10001c8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 10001cc:	10fffd36 	bltu	r2,r3,10001c4 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 10001d0:	100305c0 	call	100305c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 10001d4:	100329c0 	call	100329c <alt_main>

010001d8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 10001d8:	003fff06 	br	10001d8 <alt_after_alt_main>

010001dc <task1>:
#define TASK1_PRIORITY      1
#define TASK2_PRIORITY      2

/* Prints "Hello World" and sleeps for three seconds */
void task1(void* pdata)
{
 10001dc:	defffd04 	addi	sp,sp,-12
 10001e0:	dfc00215 	stw	ra,8(sp)
 10001e4:	df000115 	stw	fp,4(sp)
 10001e8:	df000104 	addi	fp,sp,4
 10001ec:	e13fff15 	stw	r4,-4(fp)
  while (1)
  { 
    printf("Hello from task1\n");
 10001f0:	01004074 	movhi	r4,257
 10001f4:	213ff704 	addi	r4,r4,-36
 10001f8:	10003980 	call	1000398 <puts>
    OSTimeDlyHMSM(0, 0, 3, 0);
 10001fc:	0009883a 	mov	r4,zero
 1000200:	000b883a 	mov	r5,zero
 1000204:	018000c4 	movi	r6,3
 1000208:	000f883a 	mov	r7,zero
 100020c:	100b9040 	call	100b904 <OSTimeDlyHMSM>
  }
 1000210:	003ff706 	br	10001f0 <task1+0x14>

01000214 <task2>:
}
/* Prints "Hello World" and sleeps for three seconds */
void task2(void* pdata)
{
 1000214:	defffd04 	addi	sp,sp,-12
 1000218:	dfc00215 	stw	ra,8(sp)
 100021c:	df000115 	stw	fp,4(sp)
 1000220:	df000104 	addi	fp,sp,4
 1000224:	e13fff15 	stw	r4,-4(fp)
  while (1)
  { 
    printf("Hello from task2\n");
 1000228:	01004074 	movhi	r4,257
 100022c:	213ffc04 	addi	r4,r4,-16
 1000230:	10003980 	call	1000398 <puts>
    OSTimeDlyHMSM(0, 0, 3, 0);
 1000234:	0009883a 	mov	r4,zero
 1000238:	000b883a 	mov	r5,zero
 100023c:	018000c4 	movi	r6,3
 1000240:	000f883a 	mov	r7,zero
 1000244:	100b9040 	call	100b904 <OSTimeDlyHMSM>
  }
 1000248:	003ff706 	br	1000228 <task2+0x14>

0100024c <main>:
}
/* The main function creates two task and starts multi-tasking */
int main(void)
{
 100024c:	defff904 	addi	sp,sp,-28
 1000250:	dfc00615 	stw	ra,24(sp)
 1000254:	df000515 	stw	fp,20(sp)
 1000258:	df000504 	addi	fp,sp,20
  
  OSTaskCreateExt(task1,
 100025c:	01804074 	movhi	r6,257
 1000260:	3196ca04 	addi	r6,r6,23336
 1000264:	00800044 	movi	r2,1
 1000268:	d8800015 	stw	r2,0(sp)
 100026c:	00804074 	movhi	r2,257
 1000270:	108ecb04 	addi	r2,r2,15148
 1000274:	d8800115 	stw	r2,4(sp)
 1000278:	00820004 	movi	r2,2048
 100027c:	d8800215 	stw	r2,8(sp)
 1000280:	d8000315 	stw	zero,12(sp)
 1000284:	d8000415 	stw	zero,16(sp)
 1000288:	01004034 	movhi	r4,256
 100028c:	21007704 	addi	r4,r4,476
 1000290:	000b883a 	mov	r5,zero
 1000294:	01c00044 	movi	r7,1
 1000298:	100a4c00 	call	100a4c0 <OSTaskCreateExt>
                  TASK_STACKSIZE,
                  NULL,
                  0);
              
               
  OSTaskCreateExt(task2,
 100029c:	01804074 	movhi	r6,257
 10002a0:	319eca04 	addi	r6,r6,31528
 10002a4:	00800084 	movi	r2,2
 10002a8:	d8800015 	stw	r2,0(sp)
 10002ac:	00804074 	movhi	r2,257
 10002b0:	1096cb04 	addi	r2,r2,23340
 10002b4:	d8800115 	stw	r2,4(sp)
 10002b8:	00820004 	movi	r2,2048
 10002bc:	d8800215 	stw	r2,8(sp)
 10002c0:	d8000315 	stw	zero,12(sp)
 10002c4:	d8000415 	stw	zero,16(sp)
 10002c8:	01004034 	movhi	r4,256
 10002cc:	21008504 	addi	r4,r4,532
 10002d0:	000b883a 	mov	r5,zero
 10002d4:	01c00084 	movi	r7,2
 10002d8:	100a4c00 	call	100a4c0 <OSTaskCreateExt>
                  TASK2_PRIORITY,
                  task2_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);
  OSStart();
 10002dc:	10046e80 	call	10046e8 <OSStart>
  return 0;
 10002e0:	0005883a 	mov	r2,zero
}
 10002e4:	e037883a 	mov	sp,fp
 10002e8:	dfc00117 	ldw	ra,4(sp)
 10002ec:	df000017 	ldw	fp,0(sp)
 10002f0:	dec00204 	addi	sp,sp,8
 10002f4:	f800283a 	ret

010002f8 <_puts_r>:
 10002f8:	defff604 	addi	sp,sp,-40
 10002fc:	dc400715 	stw	r17,28(sp)
 1000300:	2023883a 	mov	r17,r4
 1000304:	2809883a 	mov	r4,r5
 1000308:	dfc00915 	stw	ra,36(sp)
 100030c:	dcc00815 	stw	r19,32(sp)
 1000310:	2827883a 	mov	r19,r5
 1000314:	10003ac0 	call	10003ac <strlen>
 1000318:	89400217 	ldw	r5,8(r17)
 100031c:	00c04074 	movhi	r3,257
 1000320:	18c00104 	addi	r3,r3,4
 1000324:	01c00044 	movi	r7,1
 1000328:	12000044 	addi	r8,r2,1
 100032c:	d8c00515 	stw	r3,20(sp)
 1000330:	d9c00615 	stw	r7,24(sp)
 1000334:	d8c00304 	addi	r3,sp,12
 1000338:	01c00084 	movi	r7,2
 100033c:	8809883a 	mov	r4,r17
 1000340:	d80d883a 	mov	r6,sp
 1000344:	d8c00015 	stw	r3,0(sp)
 1000348:	dcc00315 	stw	r19,12(sp)
 100034c:	da000215 	stw	r8,8(sp)
 1000350:	d9c00115 	stw	r7,4(sp)
 1000354:	d8800415 	stw	r2,16(sp)
 1000358:	10004200 	call	1000420 <__sfvwrite_r>
 100035c:	00ffffc4 	movi	r3,-1
 1000360:	10000626 	beq	r2,zero,100037c <_puts_r+0x84>
 1000364:	1805883a 	mov	r2,r3
 1000368:	dfc00917 	ldw	ra,36(sp)
 100036c:	dcc00817 	ldw	r19,32(sp)
 1000370:	dc400717 	ldw	r17,28(sp)
 1000374:	dec00a04 	addi	sp,sp,40
 1000378:	f800283a 	ret
 100037c:	00c00284 	movi	r3,10
 1000380:	1805883a 	mov	r2,r3
 1000384:	dfc00917 	ldw	ra,36(sp)
 1000388:	dcc00817 	ldw	r19,32(sp)
 100038c:	dc400717 	ldw	r17,28(sp)
 1000390:	dec00a04 	addi	sp,sp,40
 1000394:	f800283a 	ret

01000398 <puts>:
 1000398:	00804074 	movhi	r2,257
 100039c:	10877f04 	addi	r2,r2,7676
 10003a0:	200b883a 	mov	r5,r4
 10003a4:	11000017 	ldw	r4,0(r2)
 10003a8:	10002f81 	jmpi	10002f8 <_puts_r>

010003ac <strlen>:
 10003ac:	208000cc 	andi	r2,r4,3
 10003b0:	2011883a 	mov	r8,r4
 10003b4:	1000161e 	bne	r2,zero,1000410 <strlen+0x64>
 10003b8:	20c00017 	ldw	r3,0(r4)
 10003bc:	017fbff4 	movhi	r5,65279
 10003c0:	297fbfc4 	addi	r5,r5,-257
 10003c4:	01e02074 	movhi	r7,32897
 10003c8:	39e02004 	addi	r7,r7,-32640
 10003cc:	1945883a 	add	r2,r3,r5
 10003d0:	11c4703a 	and	r2,r2,r7
 10003d4:	00c6303a 	nor	r3,zero,r3
 10003d8:	1886703a 	and	r3,r3,r2
 10003dc:	18000c1e 	bne	r3,zero,1000410 <strlen+0x64>
 10003e0:	280d883a 	mov	r6,r5
 10003e4:	380b883a 	mov	r5,r7
 10003e8:	21000104 	addi	r4,r4,4
 10003ec:	20800017 	ldw	r2,0(r4)
 10003f0:	1187883a 	add	r3,r2,r6
 10003f4:	1946703a 	and	r3,r3,r5
 10003f8:	0084303a 	nor	r2,zero,r2
 10003fc:	10c4703a 	and	r2,r2,r3
 1000400:	103ff926 	beq	r2,zero,10003e8 <strlen+0x3c>
 1000404:	20800007 	ldb	r2,0(r4)
 1000408:	10000326 	beq	r2,zero,1000418 <strlen+0x6c>
 100040c:	21000044 	addi	r4,r4,1
 1000410:	20800007 	ldb	r2,0(r4)
 1000414:	103ffd1e 	bne	r2,zero,100040c <strlen+0x60>
 1000418:	2205c83a 	sub	r2,r4,r8
 100041c:	f800283a 	ret

01000420 <__sfvwrite_r>:
 1000420:	30800217 	ldw	r2,8(r6)
 1000424:	defff504 	addi	sp,sp,-44
 1000428:	df000915 	stw	fp,36(sp)
 100042c:	dd800715 	stw	r22,28(sp)
 1000430:	dc800315 	stw	r18,12(sp)
 1000434:	dfc00a15 	stw	ra,40(sp)
 1000438:	ddc00815 	stw	r23,32(sp)
 100043c:	dd400615 	stw	r21,24(sp)
 1000440:	dd000515 	stw	r20,20(sp)
 1000444:	dcc00415 	stw	r19,16(sp)
 1000448:	dc400215 	stw	r17,8(sp)
 100044c:	dc000115 	stw	r16,4(sp)
 1000450:	302d883a 	mov	r22,r6
 1000454:	2039883a 	mov	fp,r4
 1000458:	2825883a 	mov	r18,r5
 100045c:	10001c26 	beq	r2,zero,10004d0 <__sfvwrite_r+0xb0>
 1000460:	29c0030b 	ldhu	r7,12(r5)
 1000464:	3880020c 	andi	r2,r7,8
 1000468:	10002726 	beq	r2,zero,1000508 <__sfvwrite_r+0xe8>
 100046c:	28800417 	ldw	r2,16(r5)
 1000470:	10002526 	beq	r2,zero,1000508 <__sfvwrite_r+0xe8>
 1000474:	3880008c 	andi	r2,r7,2
 1000478:	b5400017 	ldw	r21,0(r22)
 100047c:	10002826 	beq	r2,zero,1000520 <__sfvwrite_r+0x100>
 1000480:	0021883a 	mov	r16,zero
 1000484:	0023883a 	mov	r17,zero
 1000488:	880d883a 	mov	r6,r17
 100048c:	e009883a 	mov	r4,fp
 1000490:	00810004 	movi	r2,1024
 1000494:	80006e26 	beq	r16,zero,1000650 <__sfvwrite_r+0x230>
 1000498:	800f883a 	mov	r7,r16
 100049c:	91400717 	ldw	r5,28(r18)
 10004a0:	1400012e 	bgeu	r2,r16,10004a8 <__sfvwrite_r+0x88>
 10004a4:	100f883a 	mov	r7,r2
 10004a8:	90c00917 	ldw	r3,36(r18)
 10004ac:	183ee83a 	callr	r3
 10004b0:	1007883a 	mov	r3,r2
 10004b4:	80a1c83a 	sub	r16,r16,r2
 10004b8:	88a3883a 	add	r17,r17,r2
 10004bc:	00806d0e 	bge	zero,r2,1000674 <__sfvwrite_r+0x254>
 10004c0:	b0800217 	ldw	r2,8(r22)
 10004c4:	10c5c83a 	sub	r2,r2,r3
 10004c8:	b0800215 	stw	r2,8(r22)
 10004cc:	103fee1e 	bne	r2,zero,1000488 <__sfvwrite_r+0x68>
 10004d0:	0009883a 	mov	r4,zero
 10004d4:	2005883a 	mov	r2,r4
 10004d8:	dfc00a17 	ldw	ra,40(sp)
 10004dc:	df000917 	ldw	fp,36(sp)
 10004e0:	ddc00817 	ldw	r23,32(sp)
 10004e4:	dd800717 	ldw	r22,28(sp)
 10004e8:	dd400617 	ldw	r21,24(sp)
 10004ec:	dd000517 	ldw	r20,20(sp)
 10004f0:	dcc00417 	ldw	r19,16(sp)
 10004f4:	dc800317 	ldw	r18,12(sp)
 10004f8:	dc400217 	ldw	r17,8(sp)
 10004fc:	dc000117 	ldw	r16,4(sp)
 1000500:	dec00b04 	addi	sp,sp,44
 1000504:	f800283a 	ret
 1000508:	10018c40 	call	10018c4 <__swsetup_r>
 100050c:	1000e41e 	bne	r2,zero,10008a0 <__sfvwrite_r+0x480>
 1000510:	91c0030b 	ldhu	r7,12(r18)
 1000514:	b5400017 	ldw	r21,0(r22)
 1000518:	3880008c 	andi	r2,r7,2
 100051c:	103fd81e 	bne	r2,zero,1000480 <__sfvwrite_r+0x60>
 1000520:	3880004c 	andi	r2,r7,1
 1000524:	1005003a 	cmpeq	r2,r2,zero
 1000528:	10005726 	beq	r2,zero,1000688 <__sfvwrite_r+0x268>
 100052c:	0029883a 	mov	r20,zero
 1000530:	002f883a 	mov	r23,zero
 1000534:	a0004226 	beq	r20,zero,1000640 <__sfvwrite_r+0x220>
 1000538:	3880800c 	andi	r2,r7,512
 100053c:	94000217 	ldw	r16,8(r18)
 1000540:	10008b26 	beq	r2,zero,1000770 <__sfvwrite_r+0x350>
 1000544:	800d883a 	mov	r6,r16
 1000548:	a400a536 	bltu	r20,r16,10007e0 <__sfvwrite_r+0x3c0>
 100054c:	3881200c 	andi	r2,r7,1152
 1000550:	10002726 	beq	r2,zero,10005f0 <__sfvwrite_r+0x1d0>
 1000554:	90800517 	ldw	r2,20(r18)
 1000558:	92000417 	ldw	r8,16(r18)
 100055c:	91400017 	ldw	r5,0(r18)
 1000560:	1087883a 	add	r3,r2,r2
 1000564:	1887883a 	add	r3,r3,r2
 1000568:	1808d7fa 	srli	r4,r3,31
 100056c:	2a21c83a 	sub	r16,r5,r8
 1000570:	80800044 	addi	r2,r16,1
 1000574:	20c9883a 	add	r4,r4,r3
 1000578:	2027d07a 	srai	r19,r4,1
 100057c:	a085883a 	add	r2,r20,r2
 1000580:	980d883a 	mov	r6,r19
 1000584:	9880022e 	bgeu	r19,r2,1000590 <__sfvwrite_r+0x170>
 1000588:	1027883a 	mov	r19,r2
 100058c:	100d883a 	mov	r6,r2
 1000590:	3881000c 	andi	r2,r7,1024
 1000594:	1000b826 	beq	r2,zero,1000878 <__sfvwrite_r+0x458>
 1000598:	300b883a 	mov	r5,r6
 100059c:	e009883a 	mov	r4,fp
 10005a0:	10008bc0 	call	10008bc <_malloc_r>
 10005a4:	10003126 	beq	r2,zero,100066c <__sfvwrite_r+0x24c>
 10005a8:	91400417 	ldw	r5,16(r18)
 10005ac:	1009883a 	mov	r4,r2
 10005b0:	800d883a 	mov	r6,r16
 10005b4:	1023883a 	mov	r17,r2
 10005b8:	10010e00 	call	10010e0 <memcpy>
 10005bc:	90c0030b 	ldhu	r3,12(r18)
 10005c0:	00beffc4 	movi	r2,-1025
 10005c4:	1886703a 	and	r3,r3,r2
 10005c8:	18c02014 	ori	r3,r3,128
 10005cc:	90c0030d 	sth	r3,12(r18)
 10005d0:	9c07c83a 	sub	r3,r19,r16
 10005d4:	8c05883a 	add	r2,r17,r16
 10005d8:	a00d883a 	mov	r6,r20
 10005dc:	a021883a 	mov	r16,r20
 10005e0:	90800015 	stw	r2,0(r18)
 10005e4:	90c00215 	stw	r3,8(r18)
 10005e8:	94400415 	stw	r17,16(r18)
 10005ec:	94c00515 	stw	r19,20(r18)
 10005f0:	91000017 	ldw	r4,0(r18)
 10005f4:	b80b883a 	mov	r5,r23
 10005f8:	a023883a 	mov	r17,r20
 10005fc:	10011800 	call	1001180 <memmove>
 1000600:	90c00217 	ldw	r3,8(r18)
 1000604:	90800017 	ldw	r2,0(r18)
 1000608:	a027883a 	mov	r19,r20
 100060c:	1c07c83a 	sub	r3,r3,r16
 1000610:	1405883a 	add	r2,r2,r16
 1000614:	90c00215 	stw	r3,8(r18)
 1000618:	a021883a 	mov	r16,r20
 100061c:	90800015 	stw	r2,0(r18)
 1000620:	b0800217 	ldw	r2,8(r22)
 1000624:	1405c83a 	sub	r2,r2,r16
 1000628:	b0800215 	stw	r2,8(r22)
 100062c:	103fa826 	beq	r2,zero,10004d0 <__sfvwrite_r+0xb0>
 1000630:	a469c83a 	sub	r20,r20,r17
 1000634:	91c0030b 	ldhu	r7,12(r18)
 1000638:	bcef883a 	add	r23,r23,r19
 100063c:	a03fbe1e 	bne	r20,zero,1000538 <__sfvwrite_r+0x118>
 1000640:	adc00017 	ldw	r23,0(r21)
 1000644:	ad000117 	ldw	r20,4(r21)
 1000648:	ad400204 	addi	r21,r21,8
 100064c:	003fb906 	br	1000534 <__sfvwrite_r+0x114>
 1000650:	ac400017 	ldw	r17,0(r21)
 1000654:	ac000117 	ldw	r16,4(r21)
 1000658:	ad400204 	addi	r21,r21,8
 100065c:	003f8a06 	br	1000488 <__sfvwrite_r+0x68>
 1000660:	91400417 	ldw	r5,16(r18)
 1000664:	e009883a 	mov	r4,fp
 1000668:	10020500 	call	1002050 <_free_r>
 100066c:	00800304 	movi	r2,12
 1000670:	e0800015 	stw	r2,0(fp)
 1000674:	9080030b 	ldhu	r2,12(r18)
 1000678:	013fffc4 	movi	r4,-1
 100067c:	10801014 	ori	r2,r2,64
 1000680:	9080030d 	sth	r2,12(r18)
 1000684:	003f9306 	br	10004d4 <__sfvwrite_r+0xb4>
 1000688:	0027883a 	mov	r19,zero
 100068c:	002f883a 	mov	r23,zero
 1000690:	d8000015 	stw	zero,0(sp)
 1000694:	0029883a 	mov	r20,zero
 1000698:	98001e26 	beq	r19,zero,1000714 <__sfvwrite_r+0x2f4>
 100069c:	d8c00017 	ldw	r3,0(sp)
 10006a0:	1804c03a 	cmpne	r2,r3,zero
 10006a4:	10005e26 	beq	r2,zero,1000820 <__sfvwrite_r+0x400>
 10006a8:	9821883a 	mov	r16,r19
 10006ac:	a4c0012e 	bgeu	r20,r19,10006b4 <__sfvwrite_r+0x294>
 10006b0:	a021883a 	mov	r16,r20
 10006b4:	91000017 	ldw	r4,0(r18)
 10006b8:	90800417 	ldw	r2,16(r18)
 10006bc:	91800217 	ldw	r6,8(r18)
 10006c0:	91c00517 	ldw	r7,20(r18)
 10006c4:	1100022e 	bgeu	r2,r4,10006d0 <__sfvwrite_r+0x2b0>
 10006c8:	31e3883a 	add	r17,r6,r7
 10006cc:	8c001616 	blt	r17,r16,1000728 <__sfvwrite_r+0x308>
 10006d0:	81c03816 	blt	r16,r7,10007b4 <__sfvwrite_r+0x394>
 10006d4:	90c00917 	ldw	r3,36(r18)
 10006d8:	91400717 	ldw	r5,28(r18)
 10006dc:	e009883a 	mov	r4,fp
 10006e0:	b80d883a 	mov	r6,r23
 10006e4:	183ee83a 	callr	r3
 10006e8:	1023883a 	mov	r17,r2
 10006ec:	00bfe10e 	bge	zero,r2,1000674 <__sfvwrite_r+0x254>
 10006f0:	a469c83a 	sub	r20,r20,r17
 10006f4:	a0001826 	beq	r20,zero,1000758 <__sfvwrite_r+0x338>
 10006f8:	b0800217 	ldw	r2,8(r22)
 10006fc:	1445c83a 	sub	r2,r2,r17
 1000700:	b0800215 	stw	r2,8(r22)
 1000704:	103f7226 	beq	r2,zero,10004d0 <__sfvwrite_r+0xb0>
 1000708:	9c67c83a 	sub	r19,r19,r17
 100070c:	bc6f883a 	add	r23,r23,r17
 1000710:	983fe21e 	bne	r19,zero,100069c <__sfvwrite_r+0x27c>
 1000714:	adc00017 	ldw	r23,0(r21)
 1000718:	acc00117 	ldw	r19,4(r21)
 100071c:	ad400204 	addi	r21,r21,8
 1000720:	d8000015 	stw	zero,0(sp)
 1000724:	003fdc06 	br	1000698 <__sfvwrite_r+0x278>
 1000728:	b80b883a 	mov	r5,r23
 100072c:	880d883a 	mov	r6,r17
 1000730:	10011800 	call	1001180 <memmove>
 1000734:	90c00017 	ldw	r3,0(r18)
 1000738:	e009883a 	mov	r4,fp
 100073c:	900b883a 	mov	r5,r18
 1000740:	1c47883a 	add	r3,r3,r17
 1000744:	90c00015 	stw	r3,0(r18)
 1000748:	1001a000 	call	1001a00 <_fflush_r>
 100074c:	103fc91e 	bne	r2,zero,1000674 <__sfvwrite_r+0x254>
 1000750:	a469c83a 	sub	r20,r20,r17
 1000754:	a03fe81e 	bne	r20,zero,10006f8 <__sfvwrite_r+0x2d8>
 1000758:	e009883a 	mov	r4,fp
 100075c:	900b883a 	mov	r5,r18
 1000760:	1001a000 	call	1001a00 <_fflush_r>
 1000764:	103fc31e 	bne	r2,zero,1000674 <__sfvwrite_r+0x254>
 1000768:	d8000015 	stw	zero,0(sp)
 100076c:	003fe206 	br	10006f8 <__sfvwrite_r+0x2d8>
 1000770:	91000017 	ldw	r4,0(r18)
 1000774:	90800417 	ldw	r2,16(r18)
 1000778:	1100022e 	bgeu	r2,r4,1000784 <__sfvwrite_r+0x364>
 100077c:	8023883a 	mov	r17,r16
 1000780:	85003136 	bltu	r16,r20,1000848 <__sfvwrite_r+0x428>
 1000784:	91c00517 	ldw	r7,20(r18)
 1000788:	a1c01836 	bltu	r20,r7,10007ec <__sfvwrite_r+0x3cc>
 100078c:	90c00917 	ldw	r3,36(r18)
 1000790:	91400717 	ldw	r5,28(r18)
 1000794:	e009883a 	mov	r4,fp
 1000798:	b80d883a 	mov	r6,r23
 100079c:	183ee83a 	callr	r3
 10007a0:	1021883a 	mov	r16,r2
 10007a4:	00bfb30e 	bge	zero,r2,1000674 <__sfvwrite_r+0x254>
 10007a8:	1023883a 	mov	r17,r2
 10007ac:	1027883a 	mov	r19,r2
 10007b0:	003f9b06 	br	1000620 <__sfvwrite_r+0x200>
 10007b4:	b80b883a 	mov	r5,r23
 10007b8:	800d883a 	mov	r6,r16
 10007bc:	10011800 	call	1001180 <memmove>
 10007c0:	90c00217 	ldw	r3,8(r18)
 10007c4:	90800017 	ldw	r2,0(r18)
 10007c8:	8023883a 	mov	r17,r16
 10007cc:	1c07c83a 	sub	r3,r3,r16
 10007d0:	1405883a 	add	r2,r2,r16
 10007d4:	90c00215 	stw	r3,8(r18)
 10007d8:	90800015 	stw	r2,0(r18)
 10007dc:	003fc406 	br	10006f0 <__sfvwrite_r+0x2d0>
 10007e0:	a00d883a 	mov	r6,r20
 10007e4:	a021883a 	mov	r16,r20
 10007e8:	003f8106 	br	10005f0 <__sfvwrite_r+0x1d0>
 10007ec:	b80b883a 	mov	r5,r23
 10007f0:	a00d883a 	mov	r6,r20
 10007f4:	10011800 	call	1001180 <memmove>
 10007f8:	90c00217 	ldw	r3,8(r18)
 10007fc:	90800017 	ldw	r2,0(r18)
 1000800:	a021883a 	mov	r16,r20
 1000804:	1d07c83a 	sub	r3,r3,r20
 1000808:	1505883a 	add	r2,r2,r20
 100080c:	a023883a 	mov	r17,r20
 1000810:	a027883a 	mov	r19,r20
 1000814:	90c00215 	stw	r3,8(r18)
 1000818:	90800015 	stw	r2,0(r18)
 100081c:	003f8006 	br	1000620 <__sfvwrite_r+0x200>
 1000820:	b809883a 	mov	r4,r23
 1000824:	01400284 	movi	r5,10
 1000828:	980d883a 	mov	r6,r19
 100082c:	1000ffc0 	call	1000ffc <memchr>
 1000830:	10001726 	beq	r2,zero,1000890 <__sfvwrite_r+0x470>
 1000834:	15c5c83a 	sub	r2,r2,r23
 1000838:	15000044 	addi	r20,r2,1
 100083c:	00800044 	movi	r2,1
 1000840:	d8800015 	stw	r2,0(sp)
 1000844:	003f9806 	br	10006a8 <__sfvwrite_r+0x288>
 1000848:	b80b883a 	mov	r5,r23
 100084c:	800d883a 	mov	r6,r16
 1000850:	10011800 	call	1001180 <memmove>
 1000854:	90c00017 	ldw	r3,0(r18)
 1000858:	e009883a 	mov	r4,fp
 100085c:	900b883a 	mov	r5,r18
 1000860:	1c07883a 	add	r3,r3,r16
 1000864:	90c00015 	stw	r3,0(r18)
 1000868:	8027883a 	mov	r19,r16
 100086c:	1001a000 	call	1001a00 <_fflush_r>
 1000870:	103f6b26 	beq	r2,zero,1000620 <__sfvwrite_r+0x200>
 1000874:	003f7f06 	br	1000674 <__sfvwrite_r+0x254>
 1000878:	400b883a 	mov	r5,r8
 100087c:	e009883a 	mov	r4,fp
 1000880:	10012600 	call	1001260 <_realloc_r>
 1000884:	103f7626 	beq	r2,zero,1000660 <__sfvwrite_r+0x240>
 1000888:	1023883a 	mov	r17,r2
 100088c:	003f5006 	br	10005d0 <__sfvwrite_r+0x1b0>
 1000890:	00c00044 	movi	r3,1
 1000894:	9d000044 	addi	r20,r19,1
 1000898:	d8c00015 	stw	r3,0(sp)
 100089c:	003f8206 	br	10006a8 <__sfvwrite_r+0x288>
 10008a0:	9080030b 	ldhu	r2,12(r18)
 10008a4:	00c00244 	movi	r3,9
 10008a8:	013fffc4 	movi	r4,-1
 10008ac:	10801014 	ori	r2,r2,64
 10008b0:	9080030d 	sth	r2,12(r18)
 10008b4:	e0c00015 	stw	r3,0(fp)
 10008b8:	003f0606 	br	10004d4 <__sfvwrite_r+0xb4>

010008bc <_malloc_r>:
 10008bc:	defff604 	addi	sp,sp,-40
 10008c0:	28c002c4 	addi	r3,r5,11
 10008c4:	00800584 	movi	r2,22
 10008c8:	dc800215 	stw	r18,8(sp)
 10008cc:	dfc00915 	stw	ra,36(sp)
 10008d0:	df000815 	stw	fp,32(sp)
 10008d4:	ddc00715 	stw	r23,28(sp)
 10008d8:	dd800615 	stw	r22,24(sp)
 10008dc:	dd400515 	stw	r21,20(sp)
 10008e0:	dd000415 	stw	r20,16(sp)
 10008e4:	dcc00315 	stw	r19,12(sp)
 10008e8:	dc400115 	stw	r17,4(sp)
 10008ec:	dc000015 	stw	r16,0(sp)
 10008f0:	2025883a 	mov	r18,r4
 10008f4:	10c01236 	bltu	r2,r3,1000940 <_malloc_r+0x84>
 10008f8:	04400404 	movi	r17,16
 10008fc:	8940142e 	bgeu	r17,r5,1000950 <_malloc_r+0x94>
 1000900:	00800304 	movi	r2,12
 1000904:	0007883a 	mov	r3,zero
 1000908:	90800015 	stw	r2,0(r18)
 100090c:	1805883a 	mov	r2,r3
 1000910:	dfc00917 	ldw	ra,36(sp)
 1000914:	df000817 	ldw	fp,32(sp)
 1000918:	ddc00717 	ldw	r23,28(sp)
 100091c:	dd800617 	ldw	r22,24(sp)
 1000920:	dd400517 	ldw	r21,20(sp)
 1000924:	dd000417 	ldw	r20,16(sp)
 1000928:	dcc00317 	ldw	r19,12(sp)
 100092c:	dc800217 	ldw	r18,8(sp)
 1000930:	dc400117 	ldw	r17,4(sp)
 1000934:	dc000017 	ldw	r16,0(sp)
 1000938:	dec00a04 	addi	sp,sp,40
 100093c:	f800283a 	ret
 1000940:	00bffe04 	movi	r2,-8
 1000944:	18a2703a 	and	r17,r3,r2
 1000948:	883fed16 	blt	r17,zero,1000900 <_malloc_r+0x44>
 100094c:	897fec36 	bltu	r17,r5,1000900 <_malloc_r+0x44>
 1000950:	9009883a 	mov	r4,r18
 1000954:	10038a80 	call	10038a8 <__malloc_lock>
 1000958:	00807dc4 	movi	r2,503
 100095c:	14402b2e 	bgeu	r2,r17,1000a0c <_malloc_r+0x150>
 1000960:	8806d27a 	srli	r3,r17,9
 1000964:	18003f1e 	bne	r3,zero,1000a64 <_malloc_r+0x1a8>
 1000968:	880cd0fa 	srli	r6,r17,3
 100096c:	300490fa 	slli	r2,r6,3
 1000970:	02c04074 	movhi	r11,257
 1000974:	5ac1be04 	addi	r11,r11,1784
 1000978:	12cb883a 	add	r5,r2,r11
 100097c:	2c000317 	ldw	r16,12(r5)
 1000980:	580f883a 	mov	r7,r11
 1000984:	2c00041e 	bne	r5,r16,1000998 <_malloc_r+0xdc>
 1000988:	00000a06 	br	10009b4 <_malloc_r+0xf8>
 100098c:	1800860e 	bge	r3,zero,1000ba8 <_malloc_r+0x2ec>
 1000990:	84000317 	ldw	r16,12(r16)
 1000994:	2c000726 	beq	r5,r16,10009b4 <_malloc_r+0xf8>
 1000998:	80800117 	ldw	r2,4(r16)
 100099c:	00ffff04 	movi	r3,-4
 10009a0:	10c8703a 	and	r4,r2,r3
 10009a4:	2447c83a 	sub	r3,r4,r17
 10009a8:	008003c4 	movi	r2,15
 10009ac:	10fff70e 	bge	r2,r3,100098c <_malloc_r+0xd0>
 10009b0:	31bfffc4 	addi	r6,r6,-1
 10009b4:	32400044 	addi	r9,r6,1
 10009b8:	02804074 	movhi	r10,257
 10009bc:	5281c004 	addi	r10,r10,1792
 10009c0:	54000217 	ldw	r16,8(r10)
 10009c4:	8280a026 	beq	r16,r10,1000c48 <_malloc_r+0x38c>
 10009c8:	80800117 	ldw	r2,4(r16)
 10009cc:	00ffff04 	movi	r3,-4
 10009d0:	10ca703a 	and	r5,r2,r3
 10009d4:	2c4dc83a 	sub	r6,r5,r17
 10009d8:	008003c4 	movi	r2,15
 10009dc:	11808316 	blt	r2,r6,1000bec <_malloc_r+0x330>
 10009e0:	52800315 	stw	r10,12(r10)
 10009e4:	52800215 	stw	r10,8(r10)
 10009e8:	30002916 	blt	r6,zero,1000a90 <_malloc_r+0x1d4>
 10009ec:	8147883a 	add	r3,r16,r5
 10009f0:	18800117 	ldw	r2,4(r3)
 10009f4:	9009883a 	mov	r4,r18
 10009f8:	10800054 	ori	r2,r2,1
 10009fc:	18800115 	stw	r2,4(r3)
 1000a00:	10039b00 	call	10039b0 <__malloc_unlock>
 1000a04:	80c00204 	addi	r3,r16,8
 1000a08:	003fc006 	br	100090c <_malloc_r+0x50>
 1000a0c:	02c04074 	movhi	r11,257
 1000a10:	5ac1be04 	addi	r11,r11,1784
 1000a14:	8ac5883a 	add	r2,r17,r11
 1000a18:	14000317 	ldw	r16,12(r2)
 1000a1c:	580f883a 	mov	r7,r11
 1000a20:	8806d0fa 	srli	r3,r17,3
 1000a24:	14006c26 	beq	r2,r16,1000bd8 <_malloc_r+0x31c>
 1000a28:	80c00117 	ldw	r3,4(r16)
 1000a2c:	00bfff04 	movi	r2,-4
 1000a30:	81800317 	ldw	r6,12(r16)
 1000a34:	1886703a 	and	r3,r3,r2
 1000a38:	80c7883a 	add	r3,r16,r3
 1000a3c:	18800117 	ldw	r2,4(r3)
 1000a40:	81400217 	ldw	r5,8(r16)
 1000a44:	9009883a 	mov	r4,r18
 1000a48:	10800054 	ori	r2,r2,1
 1000a4c:	18800115 	stw	r2,4(r3)
 1000a50:	31400215 	stw	r5,8(r6)
 1000a54:	29800315 	stw	r6,12(r5)
 1000a58:	10039b00 	call	10039b0 <__malloc_unlock>
 1000a5c:	80c00204 	addi	r3,r16,8
 1000a60:	003faa06 	br	100090c <_malloc_r+0x50>
 1000a64:	00800104 	movi	r2,4
 1000a68:	10c0052e 	bgeu	r2,r3,1000a80 <_malloc_r+0x1c4>
 1000a6c:	00800504 	movi	r2,20
 1000a70:	10c07836 	bltu	r2,r3,1000c54 <_malloc_r+0x398>
 1000a74:	198016c4 	addi	r6,r3,91
 1000a78:	300490fa 	slli	r2,r6,3
 1000a7c:	003fbc06 	br	1000970 <_malloc_r+0xb4>
 1000a80:	8804d1ba 	srli	r2,r17,6
 1000a84:	11800e04 	addi	r6,r2,56
 1000a88:	300490fa 	slli	r2,r6,3
 1000a8c:	003fb806 	br	1000970 <_malloc_r+0xb4>
 1000a90:	00807fc4 	movi	r2,511
 1000a94:	1140bb36 	bltu	r2,r5,1000d84 <_malloc_r+0x4c8>
 1000a98:	2806d0fa 	srli	r3,r5,3
 1000a9c:	573ffe04 	addi	fp,r10,-8
 1000aa0:	00800044 	movi	r2,1
 1000aa4:	180890fa 	slli	r4,r3,3
 1000aa8:	1807d0ba 	srai	r3,r3,2
 1000aac:	e1c00117 	ldw	r7,4(fp)
 1000ab0:	5909883a 	add	r4,r11,r4
 1000ab4:	21400217 	ldw	r5,8(r4)
 1000ab8:	10c4983a 	sll	r2,r2,r3
 1000abc:	81000315 	stw	r4,12(r16)
 1000ac0:	81400215 	stw	r5,8(r16)
 1000ac4:	388eb03a 	or	r7,r7,r2
 1000ac8:	2c000315 	stw	r16,12(r5)
 1000acc:	24000215 	stw	r16,8(r4)
 1000ad0:	e1c00115 	stw	r7,4(fp)
 1000ad4:	4807883a 	mov	r3,r9
 1000ad8:	4800cd16 	blt	r9,zero,1000e10 <_malloc_r+0x554>
 1000adc:	1807d0ba 	srai	r3,r3,2
 1000ae0:	00800044 	movi	r2,1
 1000ae4:	10c8983a 	sll	r4,r2,r3
 1000ae8:	39004436 	bltu	r7,r4,1000bfc <_malloc_r+0x340>
 1000aec:	21c4703a 	and	r2,r4,r7
 1000af0:	10000a1e 	bne	r2,zero,1000b1c <_malloc_r+0x260>
 1000af4:	2109883a 	add	r4,r4,r4
 1000af8:	00bfff04 	movi	r2,-4
 1000afc:	4884703a 	and	r2,r9,r2
 1000b00:	3906703a 	and	r3,r7,r4
 1000b04:	12400104 	addi	r9,r2,4
 1000b08:	1800041e 	bne	r3,zero,1000b1c <_malloc_r+0x260>
 1000b0c:	2109883a 	add	r4,r4,r4
 1000b10:	3904703a 	and	r2,r7,r4
 1000b14:	4a400104 	addi	r9,r9,4
 1000b18:	103ffc26 	beq	r2,zero,1000b0c <_malloc_r+0x250>
 1000b1c:	480490fa 	slli	r2,r9,3
 1000b20:	4819883a 	mov	r12,r9
 1000b24:	023fff04 	movi	r8,-4
 1000b28:	589b883a 	add	r13,r11,r2
 1000b2c:	6807883a 	mov	r3,r13
 1000b30:	014003c4 	movi	r5,15
 1000b34:	1c000317 	ldw	r16,12(r3)
 1000b38:	1c00041e 	bne	r3,r16,1000b4c <_malloc_r+0x290>
 1000b3c:	0000a706 	br	1000ddc <_malloc_r+0x520>
 1000b40:	3000ab0e 	bge	r6,zero,1000df0 <_malloc_r+0x534>
 1000b44:	84000317 	ldw	r16,12(r16)
 1000b48:	1c00a426 	beq	r3,r16,1000ddc <_malloc_r+0x520>
 1000b4c:	80800117 	ldw	r2,4(r16)
 1000b50:	1204703a 	and	r2,r2,r8
 1000b54:	144dc83a 	sub	r6,r2,r17
 1000b58:	29bff90e 	bge	r5,r6,1000b40 <_malloc_r+0x284>
 1000b5c:	81000317 	ldw	r4,12(r16)
 1000b60:	80c00217 	ldw	r3,8(r16)
 1000b64:	89400054 	ori	r5,r17,1
 1000b68:	8445883a 	add	r2,r16,r17
 1000b6c:	20c00215 	stw	r3,8(r4)
 1000b70:	19000315 	stw	r4,12(r3)
 1000b74:	81400115 	stw	r5,4(r16)
 1000b78:	1187883a 	add	r3,r2,r6
 1000b7c:	31000054 	ori	r4,r6,1
 1000b80:	50800315 	stw	r2,12(r10)
 1000b84:	50800215 	stw	r2,8(r10)
 1000b88:	19800015 	stw	r6,0(r3)
 1000b8c:	11000115 	stw	r4,4(r2)
 1000b90:	12800215 	stw	r10,8(r2)
 1000b94:	12800315 	stw	r10,12(r2)
 1000b98:	9009883a 	mov	r4,r18
 1000b9c:	10039b00 	call	10039b0 <__malloc_unlock>
 1000ba0:	80c00204 	addi	r3,r16,8
 1000ba4:	003f5906 	br	100090c <_malloc_r+0x50>
 1000ba8:	8109883a 	add	r4,r16,r4
 1000bac:	20800117 	ldw	r2,4(r4)
 1000bb0:	80c00217 	ldw	r3,8(r16)
 1000bb4:	81400317 	ldw	r5,12(r16)
 1000bb8:	10800054 	ori	r2,r2,1
 1000bbc:	20800115 	stw	r2,4(r4)
 1000bc0:	28c00215 	stw	r3,8(r5)
 1000bc4:	19400315 	stw	r5,12(r3)
 1000bc8:	9009883a 	mov	r4,r18
 1000bcc:	10039b00 	call	10039b0 <__malloc_unlock>
 1000bd0:	80c00204 	addi	r3,r16,8
 1000bd4:	003f4d06 	br	100090c <_malloc_r+0x50>
 1000bd8:	80800204 	addi	r2,r16,8
 1000bdc:	14000317 	ldw	r16,12(r2)
 1000be0:	143f911e 	bne	r2,r16,1000a28 <_malloc_r+0x16c>
 1000be4:	1a400084 	addi	r9,r3,2
 1000be8:	003f7306 	br	10009b8 <_malloc_r+0xfc>
 1000bec:	88c00054 	ori	r3,r17,1
 1000bf0:	8445883a 	add	r2,r16,r17
 1000bf4:	80c00115 	stw	r3,4(r16)
 1000bf8:	003fdf06 	br	1000b78 <_malloc_r+0x2bc>
 1000bfc:	e4000217 	ldw	r16,8(fp)
 1000c00:	00bfff04 	movi	r2,-4
 1000c04:	80c00117 	ldw	r3,4(r16)
 1000c08:	802d883a 	mov	r22,r16
 1000c0c:	18aa703a 	and	r21,r3,r2
 1000c10:	ac401636 	bltu	r21,r17,1000c6c <_malloc_r+0x3b0>
 1000c14:	ac49c83a 	sub	r4,r21,r17
 1000c18:	008003c4 	movi	r2,15
 1000c1c:	1100130e 	bge	r2,r4,1000c6c <_malloc_r+0x3b0>
 1000c20:	88800054 	ori	r2,r17,1
 1000c24:	8447883a 	add	r3,r16,r17
 1000c28:	80800115 	stw	r2,4(r16)
 1000c2c:	20800054 	ori	r2,r4,1
 1000c30:	18800115 	stw	r2,4(r3)
 1000c34:	e0c00215 	stw	r3,8(fp)
 1000c38:	9009883a 	mov	r4,r18
 1000c3c:	10039b00 	call	10039b0 <__malloc_unlock>
 1000c40:	80c00204 	addi	r3,r16,8
 1000c44:	003f3106 	br	100090c <_malloc_r+0x50>
 1000c48:	39c00117 	ldw	r7,4(r7)
 1000c4c:	573ffe04 	addi	fp,r10,-8
 1000c50:	003fa006 	br	1000ad4 <_malloc_r+0x218>
 1000c54:	00801504 	movi	r2,84
 1000c58:	10c06736 	bltu	r2,r3,1000df8 <_malloc_r+0x53c>
 1000c5c:	8804d33a 	srli	r2,r17,12
 1000c60:	11801b84 	addi	r6,r2,110
 1000c64:	300490fa 	slli	r2,r6,3
 1000c68:	003f4106 	br	1000970 <_malloc_r+0xb4>
 1000c6c:	d0a71f17 	ldw	r2,-25476(gp)
 1000c70:	d0e00317 	ldw	r3,-32756(gp)
 1000c74:	053fffc4 	movi	r20,-1
 1000c78:	10800404 	addi	r2,r2,16
 1000c7c:	88a7883a 	add	r19,r17,r2
 1000c80:	1d000326 	beq	r3,r20,1000c90 <_malloc_r+0x3d4>
 1000c84:	98c3ffc4 	addi	r3,r19,4095
 1000c88:	00bc0004 	movi	r2,-4096
 1000c8c:	18a6703a 	and	r19,r3,r2
 1000c90:	9009883a 	mov	r4,r18
 1000c94:	980b883a 	mov	r5,r19
 1000c98:	10018540 	call	1001854 <_sbrk_r>
 1000c9c:	1009883a 	mov	r4,r2
 1000ca0:	15000426 	beq	r2,r20,1000cb4 <_malloc_r+0x3f8>
 1000ca4:	854b883a 	add	r5,r16,r21
 1000ca8:	1029883a 	mov	r20,r2
 1000cac:	11405a2e 	bgeu	r2,r5,1000e18 <_malloc_r+0x55c>
 1000cb0:	87000c26 	beq	r16,fp,1000ce4 <_malloc_r+0x428>
 1000cb4:	e4000217 	ldw	r16,8(fp)
 1000cb8:	80c00117 	ldw	r3,4(r16)
 1000cbc:	00bfff04 	movi	r2,-4
 1000cc0:	1884703a 	and	r2,r3,r2
 1000cc4:	14400336 	bltu	r2,r17,1000cd4 <_malloc_r+0x418>
 1000cc8:	1449c83a 	sub	r4,r2,r17
 1000ccc:	008003c4 	movi	r2,15
 1000cd0:	113fd316 	blt	r2,r4,1000c20 <_malloc_r+0x364>
 1000cd4:	9009883a 	mov	r4,r18
 1000cd8:	10039b00 	call	10039b0 <__malloc_unlock>
 1000cdc:	0007883a 	mov	r3,zero
 1000ce0:	003f0a06 	br	100090c <_malloc_r+0x50>
 1000ce4:	05c04074 	movhi	r23,257
 1000ce8:	bdcec104 	addi	r23,r23,15108
 1000cec:	b8800017 	ldw	r2,0(r23)
 1000cf0:	988d883a 	add	r6,r19,r2
 1000cf4:	b9800015 	stw	r6,0(r23)
 1000cf8:	d0e00317 	ldw	r3,-32756(gp)
 1000cfc:	00bfffc4 	movi	r2,-1
 1000d00:	18808e26 	beq	r3,r2,1000f3c <_malloc_r+0x680>
 1000d04:	2145c83a 	sub	r2,r4,r5
 1000d08:	3085883a 	add	r2,r6,r2
 1000d0c:	b8800015 	stw	r2,0(r23)
 1000d10:	20c001cc 	andi	r3,r4,7
 1000d14:	18005f1e 	bne	r3,zero,1000e94 <_malloc_r+0x5d8>
 1000d18:	000b883a 	mov	r5,zero
 1000d1c:	a4c5883a 	add	r2,r20,r19
 1000d20:	1083ffcc 	andi	r2,r2,4095
 1000d24:	00c40004 	movi	r3,4096
 1000d28:	1887c83a 	sub	r3,r3,r2
 1000d2c:	28e7883a 	add	r19,r5,r3
 1000d30:	9009883a 	mov	r4,r18
 1000d34:	980b883a 	mov	r5,r19
 1000d38:	10018540 	call	1001854 <_sbrk_r>
 1000d3c:	1007883a 	mov	r3,r2
 1000d40:	00bfffc4 	movi	r2,-1
 1000d44:	18807a26 	beq	r3,r2,1000f30 <_malloc_r+0x674>
 1000d48:	1d05c83a 	sub	r2,r3,r20
 1000d4c:	9885883a 	add	r2,r19,r2
 1000d50:	10c00054 	ori	r3,r2,1
 1000d54:	b8800017 	ldw	r2,0(r23)
 1000d58:	a021883a 	mov	r16,r20
 1000d5c:	a0c00115 	stw	r3,4(r20)
 1000d60:	9885883a 	add	r2,r19,r2
 1000d64:	b8800015 	stw	r2,0(r23)
 1000d68:	e5000215 	stw	r20,8(fp)
 1000d6c:	b7003626 	beq	r22,fp,1000e48 <_malloc_r+0x58c>
 1000d70:	018003c4 	movi	r6,15
 1000d74:	35404b36 	bltu	r6,r21,1000ea4 <_malloc_r+0x5e8>
 1000d78:	00800044 	movi	r2,1
 1000d7c:	a0800115 	stw	r2,4(r20)
 1000d80:	003fcd06 	br	1000cb8 <_malloc_r+0x3fc>
 1000d84:	2808d27a 	srli	r4,r5,9
 1000d88:	2000371e 	bne	r4,zero,1000e68 <_malloc_r+0x5ac>
 1000d8c:	2808d0fa 	srli	r4,r5,3
 1000d90:	200690fa 	slli	r3,r4,3
 1000d94:	1ad1883a 	add	r8,r3,r11
 1000d98:	41800217 	ldw	r6,8(r8)
 1000d9c:	41805b26 	beq	r8,r6,1000f0c <_malloc_r+0x650>
 1000da0:	30800117 	ldw	r2,4(r6)
 1000da4:	00ffff04 	movi	r3,-4
 1000da8:	10c4703a 	and	r2,r2,r3
 1000dac:	2880022e 	bgeu	r5,r2,1000db8 <_malloc_r+0x4fc>
 1000db0:	31800217 	ldw	r6,8(r6)
 1000db4:	41bffa1e 	bne	r8,r6,1000da0 <_malloc_r+0x4e4>
 1000db8:	32000317 	ldw	r8,12(r6)
 1000dbc:	39c00117 	ldw	r7,4(r7)
 1000dc0:	82000315 	stw	r8,12(r16)
 1000dc4:	81800215 	stw	r6,8(r16)
 1000dc8:	07004074 	movhi	fp,257
 1000dcc:	e701be04 	addi	fp,fp,1784
 1000dd0:	34000315 	stw	r16,12(r6)
 1000dd4:	44000215 	stw	r16,8(r8)
 1000dd8:	003f3e06 	br	1000ad4 <_malloc_r+0x218>
 1000ddc:	63000044 	addi	r12,r12,1
 1000de0:	608000cc 	andi	r2,r12,3
 1000de4:	10005d26 	beq	r2,zero,1000f5c <_malloc_r+0x6a0>
 1000de8:	18c00204 	addi	r3,r3,8
 1000dec:	003f5106 	br	1000b34 <_malloc_r+0x278>
 1000df0:	8089883a 	add	r4,r16,r2
 1000df4:	003f6d06 	br	1000bac <_malloc_r+0x2f0>
 1000df8:	00805504 	movi	r2,340
 1000dfc:	10c02036 	bltu	r2,r3,1000e80 <_malloc_r+0x5c4>
 1000e00:	8804d3fa 	srli	r2,r17,15
 1000e04:	11801dc4 	addi	r6,r2,119
 1000e08:	300490fa 	slli	r2,r6,3
 1000e0c:	003ed806 	br	1000970 <_malloc_r+0xb4>
 1000e10:	48c000c4 	addi	r3,r9,3
 1000e14:	003f3106 	br	1000adc <_malloc_r+0x220>
 1000e18:	05c04074 	movhi	r23,257
 1000e1c:	bdcec104 	addi	r23,r23,15108
 1000e20:	b8800017 	ldw	r2,0(r23)
 1000e24:	988d883a 	add	r6,r19,r2
 1000e28:	b9800015 	stw	r6,0(r23)
 1000e2c:	293fb21e 	bne	r5,r4,1000cf8 <_malloc_r+0x43c>
 1000e30:	2083ffcc 	andi	r2,r4,4095
 1000e34:	103fb01e 	bne	r2,zero,1000cf8 <_malloc_r+0x43c>
 1000e38:	e4000217 	ldw	r16,8(fp)
 1000e3c:	9d45883a 	add	r2,r19,r21
 1000e40:	10800054 	ori	r2,r2,1
 1000e44:	80800115 	stw	r2,4(r16)
 1000e48:	b8c00017 	ldw	r3,0(r23)
 1000e4c:	d0a72017 	ldw	r2,-25472(gp)
 1000e50:	10c0012e 	bgeu	r2,r3,1000e58 <_malloc_r+0x59c>
 1000e54:	d0e72015 	stw	r3,-25472(gp)
 1000e58:	d0a72117 	ldw	r2,-25468(gp)
 1000e5c:	10ff962e 	bgeu	r2,r3,1000cb8 <_malloc_r+0x3fc>
 1000e60:	d0e72115 	stw	r3,-25468(gp)
 1000e64:	003f9406 	br	1000cb8 <_malloc_r+0x3fc>
 1000e68:	00800104 	movi	r2,4
 1000e6c:	11001e36 	bltu	r2,r4,1000ee8 <_malloc_r+0x62c>
 1000e70:	2804d1ba 	srli	r2,r5,6
 1000e74:	11000e04 	addi	r4,r2,56
 1000e78:	200690fa 	slli	r3,r4,3
 1000e7c:	003fc506 	br	1000d94 <_malloc_r+0x4d8>
 1000e80:	00815504 	movi	r2,1364
 1000e84:	10c01d2e 	bgeu	r2,r3,1000efc <_malloc_r+0x640>
 1000e88:	01801f84 	movi	r6,126
 1000e8c:	0080fc04 	movi	r2,1008
 1000e90:	003eb706 	br	1000970 <_malloc_r+0xb4>
 1000e94:	00800204 	movi	r2,8
 1000e98:	10cbc83a 	sub	r5,r2,r3
 1000e9c:	2169883a 	add	r20,r4,r5
 1000ea0:	003f9e06 	br	1000d1c <_malloc_r+0x460>
 1000ea4:	00bffe04 	movi	r2,-8
 1000ea8:	a93ffd04 	addi	r4,r21,-12
 1000eac:	2088703a 	and	r4,r4,r2
 1000eb0:	b10b883a 	add	r5,r22,r4
 1000eb4:	00c00144 	movi	r3,5
 1000eb8:	28c00215 	stw	r3,8(r5)
 1000ebc:	28c00115 	stw	r3,4(r5)
 1000ec0:	b0800117 	ldw	r2,4(r22)
 1000ec4:	1080004c 	andi	r2,r2,1
 1000ec8:	2084b03a 	or	r2,r4,r2
 1000ecc:	b0800115 	stw	r2,4(r22)
 1000ed0:	313fdd2e 	bgeu	r6,r4,1000e48 <_malloc_r+0x58c>
 1000ed4:	b1400204 	addi	r5,r22,8
 1000ed8:	9009883a 	mov	r4,r18
 1000edc:	10020500 	call	1002050 <_free_r>
 1000ee0:	e4000217 	ldw	r16,8(fp)
 1000ee4:	003fd806 	br	1000e48 <_malloc_r+0x58c>
 1000ee8:	00800504 	movi	r2,20
 1000eec:	11001536 	bltu	r2,r4,1000f44 <_malloc_r+0x688>
 1000ef0:	210016c4 	addi	r4,r4,91
 1000ef4:	200690fa 	slli	r3,r4,3
 1000ef8:	003fa606 	br	1000d94 <_malloc_r+0x4d8>
 1000efc:	8804d4ba 	srli	r2,r17,18
 1000f00:	11801f04 	addi	r6,r2,124
 1000f04:	300490fa 	slli	r2,r6,3
 1000f08:	003e9906 	br	1000970 <_malloc_r+0xb4>
 1000f0c:	2009d0ba 	srai	r4,r4,2
 1000f10:	01404074 	movhi	r5,257
 1000f14:	2941be04 	addi	r5,r5,1784
 1000f18:	00c00044 	movi	r3,1
 1000f1c:	28800117 	ldw	r2,4(r5)
 1000f20:	1906983a 	sll	r3,r3,r4
 1000f24:	10c4b03a 	or	r2,r2,r3
 1000f28:	28800115 	stw	r2,4(r5)
 1000f2c:	003fa306 	br	1000dbc <_malloc_r+0x500>
 1000f30:	0027883a 	mov	r19,zero
 1000f34:	00c00044 	movi	r3,1
 1000f38:	003f8606 	br	1000d54 <_malloc_r+0x498>
 1000f3c:	d1200315 	stw	r4,-32756(gp)
 1000f40:	003f7306 	br	1000d10 <_malloc_r+0x454>
 1000f44:	00801504 	movi	r2,84
 1000f48:	11001936 	bltu	r2,r4,1000fb0 <_malloc_r+0x6f4>
 1000f4c:	2804d33a 	srli	r2,r5,12
 1000f50:	11001b84 	addi	r4,r2,110
 1000f54:	200690fa 	slli	r3,r4,3
 1000f58:	003f8e06 	br	1000d94 <_malloc_r+0x4d8>
 1000f5c:	480b883a 	mov	r5,r9
 1000f60:	6807883a 	mov	r3,r13
 1000f64:	288000cc 	andi	r2,r5,3
 1000f68:	18fffe04 	addi	r3,r3,-8
 1000f6c:	297fffc4 	addi	r5,r5,-1
 1000f70:	10001526 	beq	r2,zero,1000fc8 <_malloc_r+0x70c>
 1000f74:	18800217 	ldw	r2,8(r3)
 1000f78:	10fffa26 	beq	r2,r3,1000f64 <_malloc_r+0x6a8>
 1000f7c:	2109883a 	add	r4,r4,r4
 1000f80:	393f1e36 	bltu	r7,r4,1000bfc <_malloc_r+0x340>
 1000f84:	203f1d26 	beq	r4,zero,1000bfc <_malloc_r+0x340>
 1000f88:	21c4703a 	and	r2,r4,r7
 1000f8c:	10000226 	beq	r2,zero,1000f98 <_malloc_r+0x6dc>
 1000f90:	6013883a 	mov	r9,r12
 1000f94:	003ee106 	br	1000b1c <_malloc_r+0x260>
 1000f98:	2109883a 	add	r4,r4,r4
 1000f9c:	3904703a 	and	r2,r7,r4
 1000fa0:	63000104 	addi	r12,r12,4
 1000fa4:	103ffc26 	beq	r2,zero,1000f98 <_malloc_r+0x6dc>
 1000fa8:	6013883a 	mov	r9,r12
 1000fac:	003edb06 	br	1000b1c <_malloc_r+0x260>
 1000fb0:	00805504 	movi	r2,340
 1000fb4:	11000836 	bltu	r2,r4,1000fd8 <_malloc_r+0x71c>
 1000fb8:	2804d3fa 	srli	r2,r5,15
 1000fbc:	11001dc4 	addi	r4,r2,119
 1000fc0:	200690fa 	slli	r3,r4,3
 1000fc4:	003f7306 	br	1000d94 <_malloc_r+0x4d8>
 1000fc8:	0104303a 	nor	r2,zero,r4
 1000fcc:	388e703a 	and	r7,r7,r2
 1000fd0:	e1c00115 	stw	r7,4(fp)
 1000fd4:	003fe906 	br	1000f7c <_malloc_r+0x6c0>
 1000fd8:	00815504 	movi	r2,1364
 1000fdc:	1100032e 	bgeu	r2,r4,1000fec <_malloc_r+0x730>
 1000fe0:	01001f84 	movi	r4,126
 1000fe4:	00c0fc04 	movi	r3,1008
 1000fe8:	003f6a06 	br	1000d94 <_malloc_r+0x4d8>
 1000fec:	2804d4ba 	srli	r2,r5,18
 1000ff0:	11001f04 	addi	r4,r2,124
 1000ff4:	200690fa 	slli	r3,r4,3
 1000ff8:	003f6606 	br	1000d94 <_malloc_r+0x4d8>

01000ffc <memchr>:
 1000ffc:	008000c4 	movi	r2,3
 1001000:	29403fcc 	andi	r5,r5,255
 1001004:	2007883a 	mov	r3,r4
 1001008:	1180022e 	bgeu	r2,r6,1001014 <memchr+0x18>
 100100c:	2084703a 	and	r2,r4,r2
 1001010:	10000b26 	beq	r2,zero,1001040 <memchr+0x44>
 1001014:	313fffc4 	addi	r4,r6,-1
 1001018:	3000051e 	bne	r6,zero,1001030 <memchr+0x34>
 100101c:	00002c06 	br	10010d0 <memchr+0xd4>
 1001020:	213fffc4 	addi	r4,r4,-1
 1001024:	00bfffc4 	movi	r2,-1
 1001028:	18c00044 	addi	r3,r3,1
 100102c:	20802826 	beq	r4,r2,10010d0 <memchr+0xd4>
 1001030:	18800003 	ldbu	r2,0(r3)
 1001034:	28bffa1e 	bne	r5,r2,1001020 <memchr+0x24>
 1001038:	1805883a 	mov	r2,r3
 100103c:	f800283a 	ret
 1001040:	0011883a 	mov	r8,zero
 1001044:	0007883a 	mov	r3,zero
 1001048:	01c00104 	movi	r7,4
 100104c:	4004923a 	slli	r2,r8,8
 1001050:	18c00044 	addi	r3,r3,1
 1001054:	1151883a 	add	r8,r2,r5
 1001058:	19fffc1e 	bne	r3,r7,100104c <memchr+0x50>
 100105c:	02bfbff4 	movhi	r10,65279
 1001060:	52bfbfc4 	addi	r10,r10,-257
 1001064:	02602074 	movhi	r9,32897
 1001068:	4a602004 	addi	r9,r9,-32640
 100106c:	02c000c4 	movi	r11,3
 1001070:	20800017 	ldw	r2,0(r4)
 1001074:	31bfff04 	addi	r6,r6,-4
 1001078:	200f883a 	mov	r7,r4
 100107c:	1204f03a 	xor	r2,r2,r8
 1001080:	1287883a 	add	r3,r2,r10
 1001084:	1a46703a 	and	r3,r3,r9
 1001088:	0084303a 	nor	r2,zero,r2
 100108c:	10c4703a 	and	r2,r2,r3
 1001090:	10000b26 	beq	r2,zero,10010c0 <memchr+0xc4>
 1001094:	20800003 	ldbu	r2,0(r4)
 1001098:	28800f26 	beq	r5,r2,10010d8 <memchr+0xdc>
 100109c:	20800043 	ldbu	r2,1(r4)
 10010a0:	21c00044 	addi	r7,r4,1
 10010a4:	28800c26 	beq	r5,r2,10010d8 <memchr+0xdc>
 10010a8:	20800083 	ldbu	r2,2(r4)
 10010ac:	21c00084 	addi	r7,r4,2
 10010b0:	28800926 	beq	r5,r2,10010d8 <memchr+0xdc>
 10010b4:	208000c3 	ldbu	r2,3(r4)
 10010b8:	21c000c4 	addi	r7,r4,3
 10010bc:	28800626 	beq	r5,r2,10010d8 <memchr+0xdc>
 10010c0:	21000104 	addi	r4,r4,4
 10010c4:	59bfea36 	bltu	r11,r6,1001070 <memchr+0x74>
 10010c8:	2007883a 	mov	r3,r4
 10010cc:	003fd106 	br	1001014 <memchr+0x18>
 10010d0:	0005883a 	mov	r2,zero
 10010d4:	f800283a 	ret
 10010d8:	3805883a 	mov	r2,r7
 10010dc:	f800283a 	ret

010010e0 <memcpy>:
 10010e0:	01c003c4 	movi	r7,15
 10010e4:	2007883a 	mov	r3,r4
 10010e8:	3980032e 	bgeu	r7,r6,10010f8 <memcpy+0x18>
 10010ec:	2904b03a 	or	r2,r5,r4
 10010f0:	108000cc 	andi	r2,r2,3
 10010f4:	10000926 	beq	r2,zero,100111c <memcpy+0x3c>
 10010f8:	30000626 	beq	r6,zero,1001114 <memcpy+0x34>
 10010fc:	30cd883a 	add	r6,r6,r3
 1001100:	28800003 	ldbu	r2,0(r5)
 1001104:	29400044 	addi	r5,r5,1
 1001108:	18800005 	stb	r2,0(r3)
 100110c:	18c00044 	addi	r3,r3,1
 1001110:	30fffb1e 	bne	r6,r3,1001100 <memcpy+0x20>
 1001114:	2005883a 	mov	r2,r4
 1001118:	f800283a 	ret
 100111c:	3811883a 	mov	r8,r7
 1001120:	200f883a 	mov	r7,r4
 1001124:	28c00017 	ldw	r3,0(r5)
 1001128:	31bffc04 	addi	r6,r6,-16
 100112c:	38c00015 	stw	r3,0(r7)
 1001130:	28800117 	ldw	r2,4(r5)
 1001134:	38800115 	stw	r2,4(r7)
 1001138:	28c00217 	ldw	r3,8(r5)
 100113c:	38c00215 	stw	r3,8(r7)
 1001140:	28800317 	ldw	r2,12(r5)
 1001144:	29400404 	addi	r5,r5,16
 1001148:	38800315 	stw	r2,12(r7)
 100114c:	39c00404 	addi	r7,r7,16
 1001150:	41bff436 	bltu	r8,r6,1001124 <memcpy+0x44>
 1001154:	008000c4 	movi	r2,3
 1001158:	1180072e 	bgeu	r2,r6,1001178 <memcpy+0x98>
 100115c:	1007883a 	mov	r3,r2
 1001160:	28800017 	ldw	r2,0(r5)
 1001164:	31bfff04 	addi	r6,r6,-4
 1001168:	29400104 	addi	r5,r5,4
 100116c:	38800015 	stw	r2,0(r7)
 1001170:	39c00104 	addi	r7,r7,4
 1001174:	19bffa36 	bltu	r3,r6,1001160 <memcpy+0x80>
 1001178:	3807883a 	mov	r3,r7
 100117c:	003fde06 	br	10010f8 <memcpy+0x18>

01001180 <memmove>:
 1001180:	2807883a 	mov	r3,r5
 1001184:	2011883a 	mov	r8,r4
 1001188:	29000c2e 	bgeu	r5,r4,10011bc <memmove+0x3c>
 100118c:	298f883a 	add	r7,r5,r6
 1001190:	21c00a2e 	bgeu	r4,r7,10011bc <memmove+0x3c>
 1001194:	30000726 	beq	r6,zero,10011b4 <memmove+0x34>
 1001198:	2187883a 	add	r3,r4,r6
 100119c:	198dc83a 	sub	r6,r3,r6
 10011a0:	39ffffc4 	addi	r7,r7,-1
 10011a4:	38800003 	ldbu	r2,0(r7)
 10011a8:	18ffffc4 	addi	r3,r3,-1
 10011ac:	18800005 	stb	r2,0(r3)
 10011b0:	19bffb1e 	bne	r3,r6,10011a0 <memmove+0x20>
 10011b4:	2005883a 	mov	r2,r4
 10011b8:	f800283a 	ret
 10011bc:	01c003c4 	movi	r7,15
 10011c0:	39800a36 	bltu	r7,r6,10011ec <memmove+0x6c>
 10011c4:	303ffb26 	beq	r6,zero,10011b4 <memmove+0x34>
 10011c8:	400f883a 	mov	r7,r8
 10011cc:	320d883a 	add	r6,r6,r8
 10011d0:	28800003 	ldbu	r2,0(r5)
 10011d4:	29400044 	addi	r5,r5,1
 10011d8:	38800005 	stb	r2,0(r7)
 10011dc:	39c00044 	addi	r7,r7,1
 10011e0:	39bffb1e 	bne	r7,r6,10011d0 <memmove+0x50>
 10011e4:	2005883a 	mov	r2,r4
 10011e8:	f800283a 	ret
 10011ec:	1904b03a 	or	r2,r3,r4
 10011f0:	108000cc 	andi	r2,r2,3
 10011f4:	103ff31e 	bne	r2,zero,10011c4 <memmove+0x44>
 10011f8:	3811883a 	mov	r8,r7
 10011fc:	180b883a 	mov	r5,r3
 1001200:	200f883a 	mov	r7,r4
 1001204:	28c00017 	ldw	r3,0(r5)
 1001208:	31bffc04 	addi	r6,r6,-16
 100120c:	38c00015 	stw	r3,0(r7)
 1001210:	28800117 	ldw	r2,4(r5)
 1001214:	38800115 	stw	r2,4(r7)
 1001218:	28c00217 	ldw	r3,8(r5)
 100121c:	38c00215 	stw	r3,8(r7)
 1001220:	28800317 	ldw	r2,12(r5)
 1001224:	29400404 	addi	r5,r5,16
 1001228:	38800315 	stw	r2,12(r7)
 100122c:	39c00404 	addi	r7,r7,16
 1001230:	41bff436 	bltu	r8,r6,1001204 <memmove+0x84>
 1001234:	008000c4 	movi	r2,3
 1001238:	1180072e 	bgeu	r2,r6,1001258 <memmove+0xd8>
 100123c:	1007883a 	mov	r3,r2
 1001240:	28800017 	ldw	r2,0(r5)
 1001244:	31bfff04 	addi	r6,r6,-4
 1001248:	29400104 	addi	r5,r5,4
 100124c:	38800015 	stw	r2,0(r7)
 1001250:	39c00104 	addi	r7,r7,4
 1001254:	19bffa36 	bltu	r3,r6,1001240 <memmove+0xc0>
 1001258:	3811883a 	mov	r8,r7
 100125c:	003fd906 	br	10011c4 <memmove+0x44>

01001260 <_realloc_r>:
 1001260:	defff404 	addi	sp,sp,-48
 1001264:	dd800815 	stw	r22,32(sp)
 1001268:	dc800415 	stw	r18,16(sp)
 100126c:	dc400315 	stw	r17,12(sp)
 1001270:	dfc00b15 	stw	ra,44(sp)
 1001274:	df000a15 	stw	fp,40(sp)
 1001278:	ddc00915 	stw	r23,36(sp)
 100127c:	dd400715 	stw	r21,28(sp)
 1001280:	dd000615 	stw	r20,24(sp)
 1001284:	dcc00515 	stw	r19,20(sp)
 1001288:	dc000215 	stw	r16,8(sp)
 100128c:	2825883a 	mov	r18,r5
 1001290:	3023883a 	mov	r17,r6
 1001294:	202d883a 	mov	r22,r4
 1001298:	2800c926 	beq	r5,zero,10015c0 <_realloc_r+0x360>
 100129c:	10038a80 	call	10038a8 <__malloc_lock>
 10012a0:	943ffe04 	addi	r16,r18,-8
 10012a4:	88c002c4 	addi	r3,r17,11
 10012a8:	00800584 	movi	r2,22
 10012ac:	82000117 	ldw	r8,4(r16)
 10012b0:	10c01b2e 	bgeu	r2,r3,1001320 <_realloc_r+0xc0>
 10012b4:	00bffe04 	movi	r2,-8
 10012b8:	188e703a 	and	r7,r3,r2
 10012bc:	3839883a 	mov	fp,r7
 10012c0:	38001a16 	blt	r7,zero,100132c <_realloc_r+0xcc>
 10012c4:	e4401936 	bltu	fp,r17,100132c <_realloc_r+0xcc>
 10012c8:	013fff04 	movi	r4,-4
 10012cc:	4126703a 	and	r19,r8,r4
 10012d0:	99c02616 	blt	r19,r7,100136c <_realloc_r+0x10c>
 10012d4:	802b883a 	mov	r21,r16
 10012d8:	9829883a 	mov	r20,r19
 10012dc:	84000204 	addi	r16,r16,8
 10012e0:	a80f883a 	mov	r7,r21
 10012e4:	a70dc83a 	sub	r6,r20,fp
 10012e8:	008003c4 	movi	r2,15
 10012ec:	1180c136 	bltu	r2,r6,10015f4 <_realloc_r+0x394>
 10012f0:	38800117 	ldw	r2,4(r7)
 10012f4:	a549883a 	add	r4,r20,r21
 10012f8:	1080004c 	andi	r2,r2,1
 10012fc:	a084b03a 	or	r2,r20,r2
 1001300:	38800115 	stw	r2,4(r7)
 1001304:	20c00117 	ldw	r3,4(r4)
 1001308:	18c00054 	ori	r3,r3,1
 100130c:	20c00115 	stw	r3,4(r4)
 1001310:	b009883a 	mov	r4,r22
 1001314:	10039b00 	call	10039b0 <__malloc_unlock>
 1001318:	8023883a 	mov	r17,r16
 100131c:	00000606 	br	1001338 <_realloc_r+0xd8>
 1001320:	01c00404 	movi	r7,16
 1001324:	3839883a 	mov	fp,r7
 1001328:	e47fe72e 	bgeu	fp,r17,10012c8 <_realloc_r+0x68>
 100132c:	00800304 	movi	r2,12
 1001330:	0023883a 	mov	r17,zero
 1001334:	b0800015 	stw	r2,0(r22)
 1001338:	8805883a 	mov	r2,r17
 100133c:	dfc00b17 	ldw	ra,44(sp)
 1001340:	df000a17 	ldw	fp,40(sp)
 1001344:	ddc00917 	ldw	r23,36(sp)
 1001348:	dd800817 	ldw	r22,32(sp)
 100134c:	dd400717 	ldw	r21,28(sp)
 1001350:	dd000617 	ldw	r20,24(sp)
 1001354:	dcc00517 	ldw	r19,20(sp)
 1001358:	dc800417 	ldw	r18,16(sp)
 100135c:	dc400317 	ldw	r17,12(sp)
 1001360:	dc000217 	ldw	r16,8(sp)
 1001364:	dec00c04 	addi	sp,sp,48
 1001368:	f800283a 	ret
 100136c:	00804074 	movhi	r2,257
 1001370:	1081be04 	addi	r2,r2,1784
 1001374:	12400217 	ldw	r9,8(r2)
 1001378:	84cd883a 	add	r6,r16,r19
 100137c:	802b883a 	mov	r21,r16
 1001380:	3240b926 	beq	r6,r9,1001668 <_realloc_r+0x408>
 1001384:	31400117 	ldw	r5,4(r6)
 1001388:	00bfff84 	movi	r2,-2
 100138c:	2884703a 	and	r2,r5,r2
 1001390:	1185883a 	add	r2,r2,r6
 1001394:	10c00117 	ldw	r3,4(r2)
 1001398:	18c0004c 	andi	r3,r3,1
 100139c:	1807003a 	cmpeq	r3,r3,zero
 10013a0:	1800a326 	beq	r3,zero,1001630 <_realloc_r+0x3d0>
 10013a4:	2908703a 	and	r4,r5,r4
 10013a8:	9929883a 	add	r20,r19,r4
 10013ac:	a1c0a30e 	bge	r20,r7,100163c <_realloc_r+0x3dc>
 10013b0:	4080004c 	andi	r2,r8,1
 10013b4:	1000551e 	bne	r2,zero,100150c <_realloc_r+0x2ac>
 10013b8:	80800017 	ldw	r2,0(r16)
 10013bc:	80afc83a 	sub	r23,r16,r2
 10013c0:	b8c00117 	ldw	r3,4(r23)
 10013c4:	00bfff04 	movi	r2,-4
 10013c8:	1884703a 	and	r2,r3,r2
 10013cc:	30002e26 	beq	r6,zero,1001488 <_realloc_r+0x228>
 10013d0:	3240b926 	beq	r6,r9,10016b8 <_realloc_r+0x458>
 10013d4:	98a9883a 	add	r20,r19,r2
 10013d8:	2509883a 	add	r4,r4,r20
 10013dc:	d9000015 	stw	r4,0(sp)
 10013e0:	21c02a16 	blt	r4,r7,100148c <_realloc_r+0x22c>
 10013e4:	30800317 	ldw	r2,12(r6)
 10013e8:	30c00217 	ldw	r3,8(r6)
 10013ec:	01400904 	movi	r5,36
 10013f0:	99bfff04 	addi	r6,r19,-4
 10013f4:	18800315 	stw	r2,12(r3)
 10013f8:	10c00215 	stw	r3,8(r2)
 10013fc:	b9000317 	ldw	r4,12(r23)
 1001400:	b8800217 	ldw	r2,8(r23)
 1001404:	b82b883a 	mov	r21,r23
 1001408:	bc000204 	addi	r16,r23,8
 100140c:	20800215 	stw	r2,8(r4)
 1001410:	11000315 	stw	r4,12(r2)
 1001414:	2980e436 	bltu	r5,r6,10017a8 <_realloc_r+0x548>
 1001418:	008004c4 	movi	r2,19
 100141c:	9009883a 	mov	r4,r18
 1001420:	8011883a 	mov	r8,r16
 1001424:	11800f2e 	bgeu	r2,r6,1001464 <_realloc_r+0x204>
 1001428:	90800017 	ldw	r2,0(r18)
 100142c:	ba000404 	addi	r8,r23,16
 1001430:	91000204 	addi	r4,r18,8
 1001434:	b8800215 	stw	r2,8(r23)
 1001438:	90c00117 	ldw	r3,4(r18)
 100143c:	008006c4 	movi	r2,27
 1001440:	b8c00315 	stw	r3,12(r23)
 1001444:	1180072e 	bgeu	r2,r6,1001464 <_realloc_r+0x204>
 1001448:	90c00217 	ldw	r3,8(r18)
 100144c:	ba000604 	addi	r8,r23,24
 1001450:	91000404 	addi	r4,r18,16
 1001454:	b8c00415 	stw	r3,16(r23)
 1001458:	90800317 	ldw	r2,12(r18)
 100145c:	b8800515 	stw	r2,20(r23)
 1001460:	3140e726 	beq	r6,r5,1001800 <_realloc_r+0x5a0>
 1001464:	20800017 	ldw	r2,0(r4)
 1001468:	dd000017 	ldw	r20,0(sp)
 100146c:	b80f883a 	mov	r7,r23
 1001470:	40800015 	stw	r2,0(r8)
 1001474:	20c00117 	ldw	r3,4(r4)
 1001478:	40c00115 	stw	r3,4(r8)
 100147c:	20800217 	ldw	r2,8(r4)
 1001480:	40800215 	stw	r2,8(r8)
 1001484:	003f9706 	br	10012e4 <_realloc_r+0x84>
 1001488:	98a9883a 	add	r20,r19,r2
 100148c:	a1c01f16 	blt	r20,r7,100150c <_realloc_r+0x2ac>
 1001490:	b8c00317 	ldw	r3,12(r23)
 1001494:	b8800217 	ldw	r2,8(r23)
 1001498:	99bfff04 	addi	r6,r19,-4
 100149c:	01400904 	movi	r5,36
 10014a0:	b82b883a 	mov	r21,r23
 10014a4:	18800215 	stw	r2,8(r3)
 10014a8:	10c00315 	stw	r3,12(r2)
 10014ac:	bc000204 	addi	r16,r23,8
 10014b0:	2980c336 	bltu	r5,r6,10017c0 <_realloc_r+0x560>
 10014b4:	008004c4 	movi	r2,19
 10014b8:	9009883a 	mov	r4,r18
 10014bc:	8011883a 	mov	r8,r16
 10014c0:	11800f2e 	bgeu	r2,r6,1001500 <_realloc_r+0x2a0>
 10014c4:	90800017 	ldw	r2,0(r18)
 10014c8:	ba000404 	addi	r8,r23,16
 10014cc:	91000204 	addi	r4,r18,8
 10014d0:	b8800215 	stw	r2,8(r23)
 10014d4:	90c00117 	ldw	r3,4(r18)
 10014d8:	008006c4 	movi	r2,27
 10014dc:	b8c00315 	stw	r3,12(r23)
 10014e0:	1180072e 	bgeu	r2,r6,1001500 <_realloc_r+0x2a0>
 10014e4:	90c00217 	ldw	r3,8(r18)
 10014e8:	ba000604 	addi	r8,r23,24
 10014ec:	91000404 	addi	r4,r18,16
 10014f0:	b8c00415 	stw	r3,16(r23)
 10014f4:	90800317 	ldw	r2,12(r18)
 10014f8:	b8800515 	stw	r2,20(r23)
 10014fc:	3140c726 	beq	r6,r5,100181c <_realloc_r+0x5bc>
 1001500:	20800017 	ldw	r2,0(r4)
 1001504:	b80f883a 	mov	r7,r23
 1001508:	003fd906 	br	1001470 <_realloc_r+0x210>
 100150c:	880b883a 	mov	r5,r17
 1001510:	b009883a 	mov	r4,r22
 1001514:	10008bc0 	call	10008bc <_malloc_r>
 1001518:	1023883a 	mov	r17,r2
 100151c:	10002526 	beq	r2,zero,10015b4 <_realloc_r+0x354>
 1001520:	80800117 	ldw	r2,4(r16)
 1001524:	00ffff84 	movi	r3,-2
 1001528:	893ffe04 	addi	r4,r17,-8
 100152c:	10c4703a 	and	r2,r2,r3
 1001530:	8085883a 	add	r2,r16,r2
 1001534:	20809526 	beq	r4,r2,100178c <_realloc_r+0x52c>
 1001538:	99bfff04 	addi	r6,r19,-4
 100153c:	01c00904 	movi	r7,36
 1001540:	39804536 	bltu	r7,r6,1001658 <_realloc_r+0x3f8>
 1001544:	008004c4 	movi	r2,19
 1001548:	9009883a 	mov	r4,r18
 100154c:	880b883a 	mov	r5,r17
 1001550:	11800f2e 	bgeu	r2,r6,1001590 <_realloc_r+0x330>
 1001554:	90800017 	ldw	r2,0(r18)
 1001558:	89400204 	addi	r5,r17,8
 100155c:	91000204 	addi	r4,r18,8
 1001560:	88800015 	stw	r2,0(r17)
 1001564:	90c00117 	ldw	r3,4(r18)
 1001568:	008006c4 	movi	r2,27
 100156c:	88c00115 	stw	r3,4(r17)
 1001570:	1180072e 	bgeu	r2,r6,1001590 <_realloc_r+0x330>
 1001574:	90c00217 	ldw	r3,8(r18)
 1001578:	89400404 	addi	r5,r17,16
 100157c:	91000404 	addi	r4,r18,16
 1001580:	88c00215 	stw	r3,8(r17)
 1001584:	90800317 	ldw	r2,12(r18)
 1001588:	88800315 	stw	r2,12(r17)
 100158c:	31c09126 	beq	r6,r7,10017d4 <_realloc_r+0x574>
 1001590:	20800017 	ldw	r2,0(r4)
 1001594:	28800015 	stw	r2,0(r5)
 1001598:	20c00117 	ldw	r3,4(r4)
 100159c:	28c00115 	stw	r3,4(r5)
 10015a0:	20800217 	ldw	r2,8(r4)
 10015a4:	28800215 	stw	r2,8(r5)
 10015a8:	900b883a 	mov	r5,r18
 10015ac:	b009883a 	mov	r4,r22
 10015b0:	10020500 	call	1002050 <_free_r>
 10015b4:	b009883a 	mov	r4,r22
 10015b8:	10039b00 	call	10039b0 <__malloc_unlock>
 10015bc:	003f5e06 	br	1001338 <_realloc_r+0xd8>
 10015c0:	300b883a 	mov	r5,r6
 10015c4:	dfc00b17 	ldw	ra,44(sp)
 10015c8:	df000a17 	ldw	fp,40(sp)
 10015cc:	ddc00917 	ldw	r23,36(sp)
 10015d0:	dd800817 	ldw	r22,32(sp)
 10015d4:	dd400717 	ldw	r21,28(sp)
 10015d8:	dd000617 	ldw	r20,24(sp)
 10015dc:	dcc00517 	ldw	r19,20(sp)
 10015e0:	dc800417 	ldw	r18,16(sp)
 10015e4:	dc400317 	ldw	r17,12(sp)
 10015e8:	dc000217 	ldw	r16,8(sp)
 10015ec:	dec00c04 	addi	sp,sp,48
 10015f0:	10008bc1 	jmpi	10008bc <_malloc_r>
 10015f4:	38800117 	ldw	r2,4(r7)
 10015f8:	e54b883a 	add	r5,fp,r21
 10015fc:	31000054 	ori	r4,r6,1
 1001600:	1080004c 	andi	r2,r2,1
 1001604:	1704b03a 	or	r2,r2,fp
 1001608:	38800115 	stw	r2,4(r7)
 100160c:	29000115 	stw	r4,4(r5)
 1001610:	2987883a 	add	r3,r5,r6
 1001614:	18800117 	ldw	r2,4(r3)
 1001618:	29400204 	addi	r5,r5,8
 100161c:	b009883a 	mov	r4,r22
 1001620:	10800054 	ori	r2,r2,1
 1001624:	18800115 	stw	r2,4(r3)
 1001628:	10020500 	call	1002050 <_free_r>
 100162c:	003f3806 	br	1001310 <_realloc_r+0xb0>
 1001630:	000d883a 	mov	r6,zero
 1001634:	0009883a 	mov	r4,zero
 1001638:	003f5d06 	br	10013b0 <_realloc_r+0x150>
 100163c:	30c00217 	ldw	r3,8(r6)
 1001640:	30800317 	ldw	r2,12(r6)
 1001644:	800f883a 	mov	r7,r16
 1001648:	84000204 	addi	r16,r16,8
 100164c:	10c00215 	stw	r3,8(r2)
 1001650:	18800315 	stw	r2,12(r3)
 1001654:	003f2306 	br	10012e4 <_realloc_r+0x84>
 1001658:	8809883a 	mov	r4,r17
 100165c:	900b883a 	mov	r5,r18
 1001660:	10011800 	call	1001180 <memmove>
 1001664:	003fd006 	br	10015a8 <_realloc_r+0x348>
 1001668:	30800117 	ldw	r2,4(r6)
 100166c:	e0c00404 	addi	r3,fp,16
 1001670:	1108703a 	and	r4,r2,r4
 1001674:	9905883a 	add	r2,r19,r4
 1001678:	10ff4d16 	blt	r2,r3,10013b0 <_realloc_r+0x150>
 100167c:	1705c83a 	sub	r2,r2,fp
 1001680:	870b883a 	add	r5,r16,fp
 1001684:	10800054 	ori	r2,r2,1
 1001688:	28800115 	stw	r2,4(r5)
 100168c:	80c00117 	ldw	r3,4(r16)
 1001690:	00804074 	movhi	r2,257
 1001694:	1081be04 	addi	r2,r2,1784
 1001698:	b009883a 	mov	r4,r22
 100169c:	18c0004c 	andi	r3,r3,1
 10016a0:	e0c6b03a 	or	r3,fp,r3
 10016a4:	11400215 	stw	r5,8(r2)
 10016a8:	80c00115 	stw	r3,4(r16)
 10016ac:	10039b00 	call	10039b0 <__malloc_unlock>
 10016b0:	84400204 	addi	r17,r16,8
 10016b4:	003f2006 	br	1001338 <_realloc_r+0xd8>
 10016b8:	98a9883a 	add	r20,r19,r2
 10016bc:	2509883a 	add	r4,r4,r20
 10016c0:	e0800404 	addi	r2,fp,16
 10016c4:	d9000115 	stw	r4,4(sp)
 10016c8:	20bf7016 	blt	r4,r2,100148c <_realloc_r+0x22c>
 10016cc:	b8c00317 	ldw	r3,12(r23)
 10016d0:	b8800217 	ldw	r2,8(r23)
 10016d4:	99bfff04 	addi	r6,r19,-4
 10016d8:	01400904 	movi	r5,36
 10016dc:	18800215 	stw	r2,8(r3)
 10016e0:	10c00315 	stw	r3,12(r2)
 10016e4:	bc400204 	addi	r17,r23,8
 10016e8:	29804136 	bltu	r5,r6,10017f0 <_realloc_r+0x590>
 10016ec:	008004c4 	movi	r2,19
 10016f0:	9009883a 	mov	r4,r18
 10016f4:	880f883a 	mov	r7,r17
 10016f8:	11800f2e 	bgeu	r2,r6,1001738 <_realloc_r+0x4d8>
 10016fc:	90800017 	ldw	r2,0(r18)
 1001700:	b9c00404 	addi	r7,r23,16
 1001704:	91000204 	addi	r4,r18,8
 1001708:	b8800215 	stw	r2,8(r23)
 100170c:	90c00117 	ldw	r3,4(r18)
 1001710:	008006c4 	movi	r2,27
 1001714:	b8c00315 	stw	r3,12(r23)
 1001718:	1180072e 	bgeu	r2,r6,1001738 <_realloc_r+0x4d8>
 100171c:	90c00217 	ldw	r3,8(r18)
 1001720:	b9c00604 	addi	r7,r23,24
 1001724:	91000404 	addi	r4,r18,16
 1001728:	b8c00415 	stw	r3,16(r23)
 100172c:	90800317 	ldw	r2,12(r18)
 1001730:	b8800515 	stw	r2,20(r23)
 1001734:	31404026 	beq	r6,r5,1001838 <_realloc_r+0x5d8>
 1001738:	20800017 	ldw	r2,0(r4)
 100173c:	38800015 	stw	r2,0(r7)
 1001740:	20c00117 	ldw	r3,4(r4)
 1001744:	38c00115 	stw	r3,4(r7)
 1001748:	20800217 	ldw	r2,8(r4)
 100174c:	38800215 	stw	r2,8(r7)
 1001750:	d8c00117 	ldw	r3,4(sp)
 1001754:	bf0b883a 	add	r5,r23,fp
 1001758:	b009883a 	mov	r4,r22
 100175c:	1f05c83a 	sub	r2,r3,fp
 1001760:	10800054 	ori	r2,r2,1
 1001764:	28800115 	stw	r2,4(r5)
 1001768:	b8c00117 	ldw	r3,4(r23)
 100176c:	00804074 	movhi	r2,257
 1001770:	1081be04 	addi	r2,r2,1784
 1001774:	11400215 	stw	r5,8(r2)
 1001778:	18c0004c 	andi	r3,r3,1
 100177c:	e0c6b03a 	or	r3,fp,r3
 1001780:	b8c00115 	stw	r3,4(r23)
 1001784:	10039b00 	call	10039b0 <__malloc_unlock>
 1001788:	003eeb06 	br	1001338 <_realloc_r+0xd8>
 100178c:	20800117 	ldw	r2,4(r4)
 1001790:	00ffff04 	movi	r3,-4
 1001794:	800f883a 	mov	r7,r16
 1001798:	10c4703a 	and	r2,r2,r3
 100179c:	98a9883a 	add	r20,r19,r2
 10017a0:	84000204 	addi	r16,r16,8
 10017a4:	003ecf06 	br	10012e4 <_realloc_r+0x84>
 10017a8:	900b883a 	mov	r5,r18
 10017ac:	8009883a 	mov	r4,r16
 10017b0:	10011800 	call	1001180 <memmove>
 10017b4:	dd000017 	ldw	r20,0(sp)
 10017b8:	b80f883a 	mov	r7,r23
 10017bc:	003ec906 	br	10012e4 <_realloc_r+0x84>
 10017c0:	900b883a 	mov	r5,r18
 10017c4:	8009883a 	mov	r4,r16
 10017c8:	10011800 	call	1001180 <memmove>
 10017cc:	b80f883a 	mov	r7,r23
 10017d0:	003ec406 	br	10012e4 <_realloc_r+0x84>
 10017d4:	90c00417 	ldw	r3,16(r18)
 10017d8:	89400604 	addi	r5,r17,24
 10017dc:	91000604 	addi	r4,r18,24
 10017e0:	88c00415 	stw	r3,16(r17)
 10017e4:	90800517 	ldw	r2,20(r18)
 10017e8:	88800515 	stw	r2,20(r17)
 10017ec:	003f6806 	br	1001590 <_realloc_r+0x330>
 10017f0:	900b883a 	mov	r5,r18
 10017f4:	8809883a 	mov	r4,r17
 10017f8:	10011800 	call	1001180 <memmove>
 10017fc:	003fd406 	br	1001750 <_realloc_r+0x4f0>
 1001800:	90c00417 	ldw	r3,16(r18)
 1001804:	91000604 	addi	r4,r18,24
 1001808:	ba000804 	addi	r8,r23,32
 100180c:	b8c00615 	stw	r3,24(r23)
 1001810:	90800517 	ldw	r2,20(r18)
 1001814:	b8800715 	stw	r2,28(r23)
 1001818:	003f1206 	br	1001464 <_realloc_r+0x204>
 100181c:	90c00417 	ldw	r3,16(r18)
 1001820:	91000604 	addi	r4,r18,24
 1001824:	ba000804 	addi	r8,r23,32
 1001828:	b8c00615 	stw	r3,24(r23)
 100182c:	90800517 	ldw	r2,20(r18)
 1001830:	b8800715 	stw	r2,28(r23)
 1001834:	003f3206 	br	1001500 <_realloc_r+0x2a0>
 1001838:	90c00417 	ldw	r3,16(r18)
 100183c:	91000604 	addi	r4,r18,24
 1001840:	b9c00804 	addi	r7,r23,32
 1001844:	b8c00615 	stw	r3,24(r23)
 1001848:	90800517 	ldw	r2,20(r18)
 100184c:	b8800715 	stw	r2,28(r23)
 1001850:	003fb906 	br	1001738 <_realloc_r+0x4d8>

01001854 <_sbrk_r>:
 1001854:	defffd04 	addi	sp,sp,-12
 1001858:	dc000015 	stw	r16,0(sp)
 100185c:	04004074 	movhi	r16,257
 1001860:	840ea104 	addi	r16,r16,14980
 1001864:	dc400115 	stw	r17,4(sp)
 1001868:	80000015 	stw	zero,0(r16)
 100186c:	2023883a 	mov	r17,r4
 1001870:	2809883a 	mov	r4,r5
 1001874:	dfc00215 	stw	ra,8(sp)
 1001878:	10035600 	call	1003560 <sbrk>
 100187c:	1007883a 	mov	r3,r2
 1001880:	00bfffc4 	movi	r2,-1
 1001884:	18800626 	beq	r3,r2,10018a0 <_sbrk_r+0x4c>
 1001888:	1805883a 	mov	r2,r3
 100188c:	dfc00217 	ldw	ra,8(sp)
 1001890:	dc400117 	ldw	r17,4(sp)
 1001894:	dc000017 	ldw	r16,0(sp)
 1001898:	dec00304 	addi	sp,sp,12
 100189c:	f800283a 	ret
 10018a0:	80800017 	ldw	r2,0(r16)
 10018a4:	103ff826 	beq	r2,zero,1001888 <_sbrk_r+0x34>
 10018a8:	88800015 	stw	r2,0(r17)
 10018ac:	1805883a 	mov	r2,r3
 10018b0:	dfc00217 	ldw	ra,8(sp)
 10018b4:	dc400117 	ldw	r17,4(sp)
 10018b8:	dc000017 	ldw	r16,0(sp)
 10018bc:	dec00304 	addi	sp,sp,12
 10018c0:	f800283a 	ret

010018c4 <__swsetup_r>:
 10018c4:	00804074 	movhi	r2,257
 10018c8:	10877f04 	addi	r2,r2,7676
 10018cc:	10c00017 	ldw	r3,0(r2)
 10018d0:	defffd04 	addi	sp,sp,-12
 10018d4:	dc400115 	stw	r17,4(sp)
 10018d8:	dc000015 	stw	r16,0(sp)
 10018dc:	dfc00215 	stw	ra,8(sp)
 10018e0:	2023883a 	mov	r17,r4
 10018e4:	2821883a 	mov	r16,r5
 10018e8:	18000226 	beq	r3,zero,10018f4 <__swsetup_r+0x30>
 10018ec:	18800e17 	ldw	r2,56(r3)
 10018f0:	10001f26 	beq	r2,zero,1001970 <__swsetup_r+0xac>
 10018f4:	8100030b 	ldhu	r4,12(r16)
 10018f8:	2080020c 	andi	r2,r4,8
 10018fc:	10002826 	beq	r2,zero,10019a0 <__swsetup_r+0xdc>
 1001900:	81400417 	ldw	r5,16(r16)
 1001904:	28001d26 	beq	r5,zero,100197c <__swsetup_r+0xb8>
 1001908:	2080004c 	andi	r2,r4,1
 100190c:	1005003a 	cmpeq	r2,r2,zero
 1001910:	10000b26 	beq	r2,zero,1001940 <__swsetup_r+0x7c>
 1001914:	2080008c 	andi	r2,r4,2
 1001918:	10001226 	beq	r2,zero,1001964 <__swsetup_r+0xa0>
 100191c:	0005883a 	mov	r2,zero
 1001920:	80800215 	stw	r2,8(r16)
 1001924:	28000b26 	beq	r5,zero,1001954 <__swsetup_r+0x90>
 1001928:	0005883a 	mov	r2,zero
 100192c:	dfc00217 	ldw	ra,8(sp)
 1001930:	dc400117 	ldw	r17,4(sp)
 1001934:	dc000017 	ldw	r16,0(sp)
 1001938:	dec00304 	addi	sp,sp,12
 100193c:	f800283a 	ret
 1001940:	80800517 	ldw	r2,20(r16)
 1001944:	80000215 	stw	zero,8(r16)
 1001948:	0085c83a 	sub	r2,zero,r2
 100194c:	80800615 	stw	r2,24(r16)
 1001950:	283ff51e 	bne	r5,zero,1001928 <__swsetup_r+0x64>
 1001954:	2080200c 	andi	r2,r4,128
 1001958:	103ff326 	beq	r2,zero,1001928 <__swsetup_r+0x64>
 100195c:	00bfffc4 	movi	r2,-1
 1001960:	003ff206 	br	100192c <__swsetup_r+0x68>
 1001964:	80800517 	ldw	r2,20(r16)
 1001968:	80800215 	stw	r2,8(r16)
 100196c:	003fed06 	br	1001924 <__swsetup_r+0x60>
 1001970:	1809883a 	mov	r4,r3
 1001974:	1001c980 	call	1001c98 <__sinit>
 1001978:	003fde06 	br	10018f4 <__swsetup_r+0x30>
 100197c:	20c0a00c 	andi	r3,r4,640
 1001980:	00808004 	movi	r2,512
 1001984:	18bfe026 	beq	r3,r2,1001908 <__swsetup_r+0x44>
 1001988:	8809883a 	mov	r4,r17
 100198c:	800b883a 	mov	r5,r16
 1001990:	10024e40 	call	10024e4 <__smakebuf_r>
 1001994:	8100030b 	ldhu	r4,12(r16)
 1001998:	81400417 	ldw	r5,16(r16)
 100199c:	003fda06 	br	1001908 <__swsetup_r+0x44>
 10019a0:	2080040c 	andi	r2,r4,16
 10019a4:	103fed26 	beq	r2,zero,100195c <__swsetup_r+0x98>
 10019a8:	2080010c 	andi	r2,r4,4
 10019ac:	10001226 	beq	r2,zero,10019f8 <__swsetup_r+0x134>
 10019b0:	81400c17 	ldw	r5,48(r16)
 10019b4:	28000526 	beq	r5,zero,10019cc <__swsetup_r+0x108>
 10019b8:	80801004 	addi	r2,r16,64
 10019bc:	28800226 	beq	r5,r2,10019c8 <__swsetup_r+0x104>
 10019c0:	8809883a 	mov	r4,r17
 10019c4:	10020500 	call	1002050 <_free_r>
 10019c8:	80000c15 	stw	zero,48(r16)
 10019cc:	8080030b 	ldhu	r2,12(r16)
 10019d0:	81400417 	ldw	r5,16(r16)
 10019d4:	80000115 	stw	zero,4(r16)
 10019d8:	10bff6cc 	andi	r2,r2,65499
 10019dc:	8080030d 	sth	r2,12(r16)
 10019e0:	81400015 	stw	r5,0(r16)
 10019e4:	8080030b 	ldhu	r2,12(r16)
 10019e8:	10800214 	ori	r2,r2,8
 10019ec:	113fffcc 	andi	r4,r2,65535
 10019f0:	8080030d 	sth	r2,12(r16)
 10019f4:	003fc306 	br	1001904 <__swsetup_r+0x40>
 10019f8:	81400417 	ldw	r5,16(r16)
 10019fc:	003ff906 	br	10019e4 <__swsetup_r+0x120>

01001a00 <_fflush_r>:
 1001a00:	defffb04 	addi	sp,sp,-20
 1001a04:	dcc00315 	stw	r19,12(sp)
 1001a08:	dc800215 	stw	r18,8(sp)
 1001a0c:	dfc00415 	stw	ra,16(sp)
 1001a10:	dc400115 	stw	r17,4(sp)
 1001a14:	dc000015 	stw	r16,0(sp)
 1001a18:	2027883a 	mov	r19,r4
 1001a1c:	2825883a 	mov	r18,r5
 1001a20:	20000226 	beq	r4,zero,1001a2c <_fflush_r+0x2c>
 1001a24:	20800e17 	ldw	r2,56(r4)
 1001a28:	10005626 	beq	r2,zero,1001b84 <_fflush_r+0x184>
 1001a2c:	9100030b 	ldhu	r4,12(r18)
 1001a30:	20ffffcc 	andi	r3,r4,65535
 1001a34:	18e0001c 	xori	r3,r3,32768
 1001a38:	18e00004 	addi	r3,r3,-32768
 1001a3c:	1880020c 	andi	r2,r3,8
 1001a40:	1000261e 	bne	r2,zero,1001adc <_fflush_r+0xdc>
 1001a44:	90c00117 	ldw	r3,4(r18)
 1001a48:	20820014 	ori	r2,r4,2048
 1001a4c:	9080030d 	sth	r2,12(r18)
 1001a50:	1009883a 	mov	r4,r2
 1001a54:	00c0400e 	bge	zero,r3,1001b58 <_fflush_r+0x158>
 1001a58:	92000a17 	ldw	r8,40(r18)
 1001a5c:	40004026 	beq	r8,zero,1001b60 <_fflush_r+0x160>
 1001a60:	2084000c 	andi	r2,r4,4096
 1001a64:	10005326 	beq	r2,zero,1001bb4 <_fflush_r+0x1b4>
 1001a68:	94001417 	ldw	r16,80(r18)
 1001a6c:	9080030b 	ldhu	r2,12(r18)
 1001a70:	1080010c 	andi	r2,r2,4
 1001a74:	1000481e 	bne	r2,zero,1001b98 <_fflush_r+0x198>
 1001a78:	91400717 	ldw	r5,28(r18)
 1001a7c:	9809883a 	mov	r4,r19
 1001a80:	800d883a 	mov	r6,r16
 1001a84:	000f883a 	mov	r7,zero
 1001a88:	403ee83a 	callr	r8
 1001a8c:	8080261e 	bne	r16,r2,1001b28 <_fflush_r+0x128>
 1001a90:	9080030b 	ldhu	r2,12(r18)
 1001a94:	91000417 	ldw	r4,16(r18)
 1001a98:	90000115 	stw	zero,4(r18)
 1001a9c:	10bdffcc 	andi	r2,r2,63487
 1001aa0:	10ffffcc 	andi	r3,r2,65535
 1001aa4:	18c4000c 	andi	r3,r3,4096
 1001aa8:	9080030d 	sth	r2,12(r18)
 1001aac:	91000015 	stw	r4,0(r18)
 1001ab0:	18002b26 	beq	r3,zero,1001b60 <_fflush_r+0x160>
 1001ab4:	0007883a 	mov	r3,zero
 1001ab8:	1805883a 	mov	r2,r3
 1001abc:	94001415 	stw	r16,80(r18)
 1001ac0:	dfc00417 	ldw	ra,16(sp)
 1001ac4:	dcc00317 	ldw	r19,12(sp)
 1001ac8:	dc800217 	ldw	r18,8(sp)
 1001acc:	dc400117 	ldw	r17,4(sp)
 1001ad0:	dc000017 	ldw	r16,0(sp)
 1001ad4:	dec00504 	addi	sp,sp,20
 1001ad8:	f800283a 	ret
 1001adc:	94400417 	ldw	r17,16(r18)
 1001ae0:	88001f26 	beq	r17,zero,1001b60 <_fflush_r+0x160>
 1001ae4:	90800017 	ldw	r2,0(r18)
 1001ae8:	18c000cc 	andi	r3,r3,3
 1001aec:	94400015 	stw	r17,0(r18)
 1001af0:	1461c83a 	sub	r16,r2,r17
 1001af4:	18002526 	beq	r3,zero,1001b8c <_fflush_r+0x18c>
 1001af8:	0005883a 	mov	r2,zero
 1001afc:	90800215 	stw	r2,8(r18)
 1001b00:	0400170e 	bge	zero,r16,1001b60 <_fflush_r+0x160>
 1001b04:	90c00917 	ldw	r3,36(r18)
 1001b08:	91400717 	ldw	r5,28(r18)
 1001b0c:	880d883a 	mov	r6,r17
 1001b10:	800f883a 	mov	r7,r16
 1001b14:	9809883a 	mov	r4,r19
 1001b18:	183ee83a 	callr	r3
 1001b1c:	88a3883a 	add	r17,r17,r2
 1001b20:	80a1c83a 	sub	r16,r16,r2
 1001b24:	00bff616 	blt	zero,r2,1001b00 <_fflush_r+0x100>
 1001b28:	9080030b 	ldhu	r2,12(r18)
 1001b2c:	00ffffc4 	movi	r3,-1
 1001b30:	10801014 	ori	r2,r2,64
 1001b34:	9080030d 	sth	r2,12(r18)
 1001b38:	1805883a 	mov	r2,r3
 1001b3c:	dfc00417 	ldw	ra,16(sp)
 1001b40:	dcc00317 	ldw	r19,12(sp)
 1001b44:	dc800217 	ldw	r18,8(sp)
 1001b48:	dc400117 	ldw	r17,4(sp)
 1001b4c:	dc000017 	ldw	r16,0(sp)
 1001b50:	dec00504 	addi	sp,sp,20
 1001b54:	f800283a 	ret
 1001b58:	90800f17 	ldw	r2,60(r18)
 1001b5c:	00bfbe16 	blt	zero,r2,1001a58 <_fflush_r+0x58>
 1001b60:	0007883a 	mov	r3,zero
 1001b64:	1805883a 	mov	r2,r3
 1001b68:	dfc00417 	ldw	ra,16(sp)
 1001b6c:	dcc00317 	ldw	r19,12(sp)
 1001b70:	dc800217 	ldw	r18,8(sp)
 1001b74:	dc400117 	ldw	r17,4(sp)
 1001b78:	dc000017 	ldw	r16,0(sp)
 1001b7c:	dec00504 	addi	sp,sp,20
 1001b80:	f800283a 	ret
 1001b84:	1001c980 	call	1001c98 <__sinit>
 1001b88:	003fa806 	br	1001a2c <_fflush_r+0x2c>
 1001b8c:	90800517 	ldw	r2,20(r18)
 1001b90:	90800215 	stw	r2,8(r18)
 1001b94:	003fda06 	br	1001b00 <_fflush_r+0x100>
 1001b98:	90800117 	ldw	r2,4(r18)
 1001b9c:	90c00c17 	ldw	r3,48(r18)
 1001ba0:	80a1c83a 	sub	r16,r16,r2
 1001ba4:	183fb426 	beq	r3,zero,1001a78 <_fflush_r+0x78>
 1001ba8:	90800f17 	ldw	r2,60(r18)
 1001bac:	80a1c83a 	sub	r16,r16,r2
 1001bb0:	003fb106 	br	1001a78 <_fflush_r+0x78>
 1001bb4:	91400717 	ldw	r5,28(r18)
 1001bb8:	9809883a 	mov	r4,r19
 1001bbc:	000d883a 	mov	r6,zero
 1001bc0:	01c00044 	movi	r7,1
 1001bc4:	403ee83a 	callr	r8
 1001bc8:	1021883a 	mov	r16,r2
 1001bcc:	00bfffc4 	movi	r2,-1
 1001bd0:	80800226 	beq	r16,r2,1001bdc <_fflush_r+0x1dc>
 1001bd4:	92000a17 	ldw	r8,40(r18)
 1001bd8:	003fa406 	br	1001a6c <_fflush_r+0x6c>
 1001bdc:	98c00017 	ldw	r3,0(r19)
 1001be0:	00800744 	movi	r2,29
 1001be4:	18bfde26 	beq	r3,r2,1001b60 <_fflush_r+0x160>
 1001be8:	9080030b 	ldhu	r2,12(r18)
 1001bec:	8007883a 	mov	r3,r16
 1001bf0:	10801014 	ori	r2,r2,64
 1001bf4:	9080030d 	sth	r2,12(r18)
 1001bf8:	003fcf06 	br	1001b38 <_fflush_r+0x138>

01001bfc <fflush>:
 1001bfc:	01404034 	movhi	r5,256
 1001c00:	29468004 	addi	r5,r5,6656
 1001c04:	2007883a 	mov	r3,r4
 1001c08:	20000526 	beq	r4,zero,1001c20 <fflush+0x24>
 1001c0c:	00804074 	movhi	r2,257
 1001c10:	10877f04 	addi	r2,r2,7676
 1001c14:	11000017 	ldw	r4,0(r2)
 1001c18:	180b883a 	mov	r5,r3
 1001c1c:	1001a001 	jmpi	1001a00 <_fflush_r>
 1001c20:	00804074 	movhi	r2,257
 1001c24:	10878004 	addi	r2,r2,7680
 1001c28:	11000017 	ldw	r4,0(r2)
 1001c2c:	10023641 	jmpi	1002364 <_fwalk_reent>

01001c30 <std>:
 1001c30:	00804034 	movhi	r2,256
 1001c34:	1089c404 	addi	r2,r2,10000
 1001c38:	20800b15 	stw	r2,44(r4)
 1001c3c:	00804034 	movhi	r2,256
 1001c40:	1089ff04 	addi	r2,r2,10236
 1001c44:	20800815 	stw	r2,32(r4)
 1001c48:	00c04034 	movhi	r3,256
 1001c4c:	18c9e004 	addi	r3,r3,10112
 1001c50:	00804034 	movhi	r2,256
 1001c54:	1089c604 	addi	r2,r2,10008
 1001c58:	2140030d 	sth	r5,12(r4)
 1001c5c:	2180038d 	sth	r6,14(r4)
 1001c60:	20c00915 	stw	r3,36(r4)
 1001c64:	20800a15 	stw	r2,40(r4)
 1001c68:	20000015 	stw	zero,0(r4)
 1001c6c:	20000115 	stw	zero,4(r4)
 1001c70:	20000215 	stw	zero,8(r4)
 1001c74:	20000415 	stw	zero,16(r4)
 1001c78:	20000515 	stw	zero,20(r4)
 1001c7c:	20000615 	stw	zero,24(r4)
 1001c80:	21000715 	stw	r4,28(r4)
 1001c84:	f800283a 	ret

01001c88 <__sfp_lock_acquire>:
 1001c88:	f800283a 	ret

01001c8c <__sfp_lock_release>:
 1001c8c:	f800283a 	ret

01001c90 <__sinit_lock_acquire>:
 1001c90:	f800283a 	ret

01001c94 <__sinit_lock_release>:
 1001c94:	f800283a 	ret

01001c98 <__sinit>:
 1001c98:	20800e17 	ldw	r2,56(r4)
 1001c9c:	defffd04 	addi	sp,sp,-12
 1001ca0:	dc400115 	stw	r17,4(sp)
 1001ca4:	dc000015 	stw	r16,0(sp)
 1001ca8:	dfc00215 	stw	ra,8(sp)
 1001cac:	04400044 	movi	r17,1
 1001cb0:	01400104 	movi	r5,4
 1001cb4:	000d883a 	mov	r6,zero
 1001cb8:	2021883a 	mov	r16,r4
 1001cbc:	2200bb04 	addi	r8,r4,748
 1001cc0:	200f883a 	mov	r7,r4
 1001cc4:	10000526 	beq	r2,zero,1001cdc <__sinit+0x44>
 1001cc8:	dfc00217 	ldw	ra,8(sp)
 1001ccc:	dc400117 	ldw	r17,4(sp)
 1001cd0:	dc000017 	ldw	r16,0(sp)
 1001cd4:	dec00304 	addi	sp,sp,12
 1001cd8:	f800283a 	ret
 1001cdc:	21000117 	ldw	r4,4(r4)
 1001ce0:	00804034 	movhi	r2,256
 1001ce4:	10875f04 	addi	r2,r2,7548
 1001ce8:	00c000c4 	movi	r3,3
 1001cec:	80800f15 	stw	r2,60(r16)
 1001cf0:	80c0b915 	stw	r3,740(r16)
 1001cf4:	8200ba15 	stw	r8,744(r16)
 1001cf8:	84400e15 	stw	r17,56(r16)
 1001cfc:	8000b815 	stw	zero,736(r16)
 1001d00:	1001c300 	call	1001c30 <std>
 1001d04:	81000217 	ldw	r4,8(r16)
 1001d08:	880d883a 	mov	r6,r17
 1001d0c:	800f883a 	mov	r7,r16
 1001d10:	01400284 	movi	r5,10
 1001d14:	1001c300 	call	1001c30 <std>
 1001d18:	81000317 	ldw	r4,12(r16)
 1001d1c:	800f883a 	mov	r7,r16
 1001d20:	01400484 	movi	r5,18
 1001d24:	01800084 	movi	r6,2
 1001d28:	dfc00217 	ldw	ra,8(sp)
 1001d2c:	dc400117 	ldw	r17,4(sp)
 1001d30:	dc000017 	ldw	r16,0(sp)
 1001d34:	dec00304 	addi	sp,sp,12
 1001d38:	1001c301 	jmpi	1001c30 <std>

01001d3c <__fp_lock>:
 1001d3c:	0005883a 	mov	r2,zero
 1001d40:	f800283a 	ret

01001d44 <__fp_unlock>:
 1001d44:	0005883a 	mov	r2,zero
 1001d48:	f800283a 	ret

01001d4c <__fp_unlock_all>:
 1001d4c:	00804074 	movhi	r2,257
 1001d50:	10877f04 	addi	r2,r2,7676
 1001d54:	11000017 	ldw	r4,0(r2)
 1001d58:	01404034 	movhi	r5,256
 1001d5c:	29475104 	addi	r5,r5,7492
 1001d60:	100242c1 	jmpi	100242c <_fwalk>

01001d64 <__fp_lock_all>:
 1001d64:	00804074 	movhi	r2,257
 1001d68:	10877f04 	addi	r2,r2,7676
 1001d6c:	11000017 	ldw	r4,0(r2)
 1001d70:	01404034 	movhi	r5,256
 1001d74:	29474f04 	addi	r5,r5,7484
 1001d78:	100242c1 	jmpi	100242c <_fwalk>

01001d7c <_cleanup_r>:
 1001d7c:	01404034 	movhi	r5,256
 1001d80:	294a9504 	addi	r5,r5,10836
 1001d84:	100242c1 	jmpi	100242c <_fwalk>

01001d88 <_cleanup>:
 1001d88:	00804074 	movhi	r2,257
 1001d8c:	10878004 	addi	r2,r2,7680
 1001d90:	11000017 	ldw	r4,0(r2)
 1001d94:	1001d7c1 	jmpi	1001d7c <_cleanup_r>

01001d98 <__sfmoreglue>:
 1001d98:	defffc04 	addi	sp,sp,-16
 1001d9c:	dc000015 	stw	r16,0(sp)
 1001da0:	2821883a 	mov	r16,r5
 1001da4:	dc400115 	stw	r17,4(sp)
 1001da8:	01401704 	movi	r5,92
 1001dac:	2023883a 	mov	r17,r4
 1001db0:	8009883a 	mov	r4,r16
 1001db4:	dfc00315 	stw	ra,12(sp)
 1001db8:	dcc00215 	stw	r19,8(sp)
 1001dbc:	1002c3c0 	call	1002c3c <__mulsi3>
 1001dc0:	11400304 	addi	r5,r2,12
 1001dc4:	8809883a 	mov	r4,r17
 1001dc8:	1027883a 	mov	r19,r2
 1001dcc:	10008bc0 	call	10008bc <_malloc_r>
 1001dd0:	10c00304 	addi	r3,r2,12
 1001dd4:	1023883a 	mov	r17,r2
 1001dd8:	1809883a 	mov	r4,r3
 1001ddc:	980d883a 	mov	r6,r19
 1001de0:	000b883a 	mov	r5,zero
 1001de4:	10000b26 	beq	r2,zero,1001e14 <__sfmoreglue+0x7c>
 1001de8:	14000115 	stw	r16,4(r2)
 1001dec:	10c00215 	stw	r3,8(r2)
 1001df0:	10000015 	stw	zero,0(r2)
 1001df4:	10026780 	call	1002678 <memset>
 1001df8:	8805883a 	mov	r2,r17
 1001dfc:	dfc00317 	ldw	ra,12(sp)
 1001e00:	dcc00217 	ldw	r19,8(sp)
 1001e04:	dc400117 	ldw	r17,4(sp)
 1001e08:	dc000017 	ldw	r16,0(sp)
 1001e0c:	dec00404 	addi	sp,sp,16
 1001e10:	f800283a 	ret
 1001e14:	0023883a 	mov	r17,zero
 1001e18:	8805883a 	mov	r2,r17
 1001e1c:	dfc00317 	ldw	ra,12(sp)
 1001e20:	dcc00217 	ldw	r19,8(sp)
 1001e24:	dc400117 	ldw	r17,4(sp)
 1001e28:	dc000017 	ldw	r16,0(sp)
 1001e2c:	dec00404 	addi	sp,sp,16
 1001e30:	f800283a 	ret

01001e34 <__sfp>:
 1001e34:	defffd04 	addi	sp,sp,-12
 1001e38:	00804074 	movhi	r2,257
 1001e3c:	10878004 	addi	r2,r2,7680
 1001e40:	dc000015 	stw	r16,0(sp)
 1001e44:	14000017 	ldw	r16,0(r2)
 1001e48:	dc400115 	stw	r17,4(sp)
 1001e4c:	dfc00215 	stw	ra,8(sp)
 1001e50:	80800e17 	ldw	r2,56(r16)
 1001e54:	2023883a 	mov	r17,r4
 1001e58:	10002626 	beq	r2,zero,1001ef4 <__sfp+0xc0>
 1001e5c:	8400b804 	addi	r16,r16,736
 1001e60:	80800117 	ldw	r2,4(r16)
 1001e64:	81000217 	ldw	r4,8(r16)
 1001e68:	10ffffc4 	addi	r3,r2,-1
 1001e6c:	18000916 	blt	r3,zero,1001e94 <__sfp+0x60>
 1001e70:	2080030f 	ldh	r2,12(r4)
 1001e74:	10000b26 	beq	r2,zero,1001ea4 <__sfp+0x70>
 1001e78:	017fffc4 	movi	r5,-1
 1001e7c:	00000206 	br	1001e88 <__sfp+0x54>
 1001e80:	2080030f 	ldh	r2,12(r4)
 1001e84:	10000726 	beq	r2,zero,1001ea4 <__sfp+0x70>
 1001e88:	18ffffc4 	addi	r3,r3,-1
 1001e8c:	21001704 	addi	r4,r4,92
 1001e90:	197ffb1e 	bne	r3,r5,1001e80 <__sfp+0x4c>
 1001e94:	80800017 	ldw	r2,0(r16)
 1001e98:	10001926 	beq	r2,zero,1001f00 <__sfp+0xcc>
 1001e9c:	1021883a 	mov	r16,r2
 1001ea0:	003fef06 	br	1001e60 <__sfp+0x2c>
 1001ea4:	00bfffc4 	movi	r2,-1
 1001ea8:	00c00044 	movi	r3,1
 1001eac:	2080038d 	sth	r2,14(r4)
 1001eb0:	20c0030d 	sth	r3,12(r4)
 1001eb4:	20000015 	stw	zero,0(r4)
 1001eb8:	20000215 	stw	zero,8(r4)
 1001ebc:	20000115 	stw	zero,4(r4)
 1001ec0:	20000415 	stw	zero,16(r4)
 1001ec4:	20000515 	stw	zero,20(r4)
 1001ec8:	20000615 	stw	zero,24(r4)
 1001ecc:	20000c15 	stw	zero,48(r4)
 1001ed0:	20000d15 	stw	zero,52(r4)
 1001ed4:	20001115 	stw	zero,68(r4)
 1001ed8:	20001215 	stw	zero,72(r4)
 1001edc:	2005883a 	mov	r2,r4
 1001ee0:	dfc00217 	ldw	ra,8(sp)
 1001ee4:	dc400117 	ldw	r17,4(sp)
 1001ee8:	dc000017 	ldw	r16,0(sp)
 1001eec:	dec00304 	addi	sp,sp,12
 1001ef0:	f800283a 	ret
 1001ef4:	8009883a 	mov	r4,r16
 1001ef8:	1001c980 	call	1001c98 <__sinit>
 1001efc:	003fd706 	br	1001e5c <__sfp+0x28>
 1001f00:	8809883a 	mov	r4,r17
 1001f04:	01400104 	movi	r5,4
 1001f08:	1001d980 	call	1001d98 <__sfmoreglue>
 1001f0c:	80800015 	stw	r2,0(r16)
 1001f10:	103fe21e 	bne	r2,zero,1001e9c <__sfp+0x68>
 1001f14:	00800304 	movi	r2,12
 1001f18:	0009883a 	mov	r4,zero
 1001f1c:	88800015 	stw	r2,0(r17)
 1001f20:	003fee06 	br	1001edc <__sfp+0xa8>

01001f24 <_malloc_trim_r>:
 1001f24:	defffb04 	addi	sp,sp,-20
 1001f28:	dcc00315 	stw	r19,12(sp)
 1001f2c:	04c04074 	movhi	r19,257
 1001f30:	9cc1be04 	addi	r19,r19,1784
 1001f34:	dc800215 	stw	r18,8(sp)
 1001f38:	dc400115 	stw	r17,4(sp)
 1001f3c:	dc000015 	stw	r16,0(sp)
 1001f40:	2823883a 	mov	r17,r5
 1001f44:	2025883a 	mov	r18,r4
 1001f48:	dfc00415 	stw	ra,16(sp)
 1001f4c:	10038a80 	call	10038a8 <__malloc_lock>
 1001f50:	98800217 	ldw	r2,8(r19)
 1001f54:	9009883a 	mov	r4,r18
 1001f58:	000b883a 	mov	r5,zero
 1001f5c:	10c00117 	ldw	r3,4(r2)
 1001f60:	00bfff04 	movi	r2,-4
 1001f64:	18a0703a 	and	r16,r3,r2
 1001f68:	8463c83a 	sub	r17,r16,r17
 1001f6c:	8c43fbc4 	addi	r17,r17,4079
 1001f70:	8822d33a 	srli	r17,r17,12
 1001f74:	0083ffc4 	movi	r2,4095
 1001f78:	8c7fffc4 	addi	r17,r17,-1
 1001f7c:	8822933a 	slli	r17,r17,12
 1001f80:	1440060e 	bge	r2,r17,1001f9c <_malloc_trim_r+0x78>
 1001f84:	10018540 	call	1001854 <_sbrk_r>
 1001f88:	98c00217 	ldw	r3,8(r19)
 1001f8c:	9009883a 	mov	r4,r18
 1001f90:	044bc83a 	sub	r5,zero,r17
 1001f94:	80c7883a 	add	r3,r16,r3
 1001f98:	10c00926 	beq	r2,r3,1001fc0 <_malloc_trim_r+0x9c>
 1001f9c:	10039b00 	call	10039b0 <__malloc_unlock>
 1001fa0:	0005883a 	mov	r2,zero
 1001fa4:	dfc00417 	ldw	ra,16(sp)
 1001fa8:	dcc00317 	ldw	r19,12(sp)
 1001fac:	dc800217 	ldw	r18,8(sp)
 1001fb0:	dc400117 	ldw	r17,4(sp)
 1001fb4:	dc000017 	ldw	r16,0(sp)
 1001fb8:	dec00504 	addi	sp,sp,20
 1001fbc:	f800283a 	ret
 1001fc0:	9009883a 	mov	r4,r18
 1001fc4:	10018540 	call	1001854 <_sbrk_r>
 1001fc8:	844dc83a 	sub	r6,r16,r17
 1001fcc:	00ffffc4 	movi	r3,-1
 1001fd0:	9009883a 	mov	r4,r18
 1001fd4:	000b883a 	mov	r5,zero
 1001fd8:	01c04074 	movhi	r7,257
 1001fdc:	39cec104 	addi	r7,r7,15108
 1001fe0:	31800054 	ori	r6,r6,1
 1001fe4:	10c00926 	beq	r2,r3,100200c <_malloc_trim_r+0xe8>
 1001fe8:	38800017 	ldw	r2,0(r7)
 1001fec:	98c00217 	ldw	r3,8(r19)
 1001ff0:	9009883a 	mov	r4,r18
 1001ff4:	1445c83a 	sub	r2,r2,r17
 1001ff8:	38800015 	stw	r2,0(r7)
 1001ffc:	19800115 	stw	r6,4(r3)
 1002000:	10039b00 	call	10039b0 <__malloc_unlock>
 1002004:	00800044 	movi	r2,1
 1002008:	003fe606 	br	1001fa4 <_malloc_trim_r+0x80>
 100200c:	10018540 	call	1001854 <_sbrk_r>
 1002010:	99800217 	ldw	r6,8(r19)
 1002014:	100f883a 	mov	r7,r2
 1002018:	9009883a 	mov	r4,r18
 100201c:	1187c83a 	sub	r3,r2,r6
 1002020:	008003c4 	movi	r2,15
 1002024:	19400054 	ori	r5,r3,1
 1002028:	10ffdc0e 	bge	r2,r3,1001f9c <_malloc_trim_r+0x78>
 100202c:	00804074 	movhi	r2,257
 1002030:	10878204 	addi	r2,r2,7688
 1002034:	10c00017 	ldw	r3,0(r2)
 1002038:	00804074 	movhi	r2,257
 100203c:	108ec104 	addi	r2,r2,15108
 1002040:	31400115 	stw	r5,4(r6)
 1002044:	38c7c83a 	sub	r3,r7,r3
 1002048:	10c00015 	stw	r3,0(r2)
 100204c:	003fd306 	br	1001f9c <_malloc_trim_r+0x78>

01002050 <_free_r>:
 1002050:	defffd04 	addi	sp,sp,-12
 1002054:	dc400115 	stw	r17,4(sp)
 1002058:	dc000015 	stw	r16,0(sp)
 100205c:	dfc00215 	stw	ra,8(sp)
 1002060:	2821883a 	mov	r16,r5
 1002064:	2023883a 	mov	r17,r4
 1002068:	28005a26 	beq	r5,zero,10021d4 <_free_r+0x184>
 100206c:	10038a80 	call	10038a8 <__malloc_lock>
 1002070:	823ffe04 	addi	r8,r16,-8
 1002074:	41400117 	ldw	r5,4(r8)
 1002078:	00bfff84 	movi	r2,-2
 100207c:	02804074 	movhi	r10,257
 1002080:	5281be04 	addi	r10,r10,1784
 1002084:	288e703a 	and	r7,r5,r2
 1002088:	41cd883a 	add	r6,r8,r7
 100208c:	30c00117 	ldw	r3,4(r6)
 1002090:	51000217 	ldw	r4,8(r10)
 1002094:	00bfff04 	movi	r2,-4
 1002098:	1892703a 	and	r9,r3,r2
 100209c:	5017883a 	mov	r11,r10
 10020a0:	31006726 	beq	r6,r4,1002240 <_free_r+0x1f0>
 10020a4:	2880004c 	andi	r2,r5,1
 10020a8:	1005003a 	cmpeq	r2,r2,zero
 10020ac:	32400115 	stw	r9,4(r6)
 10020b0:	10001a1e 	bne	r2,zero,100211c <_free_r+0xcc>
 10020b4:	000b883a 	mov	r5,zero
 10020b8:	3247883a 	add	r3,r6,r9
 10020bc:	18800117 	ldw	r2,4(r3)
 10020c0:	1080004c 	andi	r2,r2,1
 10020c4:	1000231e 	bne	r2,zero,1002154 <_free_r+0x104>
 10020c8:	280ac03a 	cmpne	r5,r5,zero
 10020cc:	3a4f883a 	add	r7,r7,r9
 10020d0:	2800451e 	bne	r5,zero,10021e8 <_free_r+0x198>
 10020d4:	31000217 	ldw	r4,8(r6)
 10020d8:	00804074 	movhi	r2,257
 10020dc:	1081c004 	addi	r2,r2,1792
 10020e0:	20807b26 	beq	r4,r2,10022d0 <_free_r+0x280>
 10020e4:	30800317 	ldw	r2,12(r6)
 10020e8:	3a07883a 	add	r3,r7,r8
 10020ec:	19c00015 	stw	r7,0(r3)
 10020f0:	11000215 	stw	r4,8(r2)
 10020f4:	20800315 	stw	r2,12(r4)
 10020f8:	38800054 	ori	r2,r7,1
 10020fc:	40800115 	stw	r2,4(r8)
 1002100:	28001a26 	beq	r5,zero,100216c <_free_r+0x11c>
 1002104:	8809883a 	mov	r4,r17
 1002108:	dfc00217 	ldw	ra,8(sp)
 100210c:	dc400117 	ldw	r17,4(sp)
 1002110:	dc000017 	ldw	r16,0(sp)
 1002114:	dec00304 	addi	sp,sp,12
 1002118:	10039b01 	jmpi	10039b0 <__malloc_unlock>
 100211c:	80bffe17 	ldw	r2,-8(r16)
 1002120:	50c00204 	addi	r3,r10,8
 1002124:	4091c83a 	sub	r8,r8,r2
 1002128:	41000217 	ldw	r4,8(r8)
 100212c:	388f883a 	add	r7,r7,r2
 1002130:	20c06126 	beq	r4,r3,10022b8 <_free_r+0x268>
 1002134:	40800317 	ldw	r2,12(r8)
 1002138:	3247883a 	add	r3,r6,r9
 100213c:	000b883a 	mov	r5,zero
 1002140:	11000215 	stw	r4,8(r2)
 1002144:	20800315 	stw	r2,12(r4)
 1002148:	18800117 	ldw	r2,4(r3)
 100214c:	1080004c 	andi	r2,r2,1
 1002150:	103fdd26 	beq	r2,zero,10020c8 <_free_r+0x78>
 1002154:	38800054 	ori	r2,r7,1
 1002158:	3a07883a 	add	r3,r7,r8
 100215c:	280ac03a 	cmpne	r5,r5,zero
 1002160:	40800115 	stw	r2,4(r8)
 1002164:	19c00015 	stw	r7,0(r3)
 1002168:	283fe61e 	bne	r5,zero,1002104 <_free_r+0xb4>
 100216c:	00807fc4 	movi	r2,511
 1002170:	11c01f2e 	bgeu	r2,r7,10021f0 <_free_r+0x1a0>
 1002174:	3806d27a 	srli	r3,r7,9
 1002178:	1800481e 	bne	r3,zero,100229c <_free_r+0x24c>
 100217c:	3804d0fa 	srli	r2,r7,3
 1002180:	100690fa 	slli	r3,r2,3
 1002184:	1acd883a 	add	r6,r3,r11
 1002188:	31400217 	ldw	r5,8(r6)
 100218c:	31405926 	beq	r6,r5,10022f4 <_free_r+0x2a4>
 1002190:	28800117 	ldw	r2,4(r5)
 1002194:	00ffff04 	movi	r3,-4
 1002198:	10c4703a 	and	r2,r2,r3
 100219c:	3880022e 	bgeu	r7,r2,10021a8 <_free_r+0x158>
 10021a0:	29400217 	ldw	r5,8(r5)
 10021a4:	317ffa1e 	bne	r6,r5,1002190 <_free_r+0x140>
 10021a8:	29800317 	ldw	r6,12(r5)
 10021ac:	41800315 	stw	r6,12(r8)
 10021b0:	41400215 	stw	r5,8(r8)
 10021b4:	8809883a 	mov	r4,r17
 10021b8:	2a000315 	stw	r8,12(r5)
 10021bc:	32000215 	stw	r8,8(r6)
 10021c0:	dfc00217 	ldw	ra,8(sp)
 10021c4:	dc400117 	ldw	r17,4(sp)
 10021c8:	dc000017 	ldw	r16,0(sp)
 10021cc:	dec00304 	addi	sp,sp,12
 10021d0:	10039b01 	jmpi	10039b0 <__malloc_unlock>
 10021d4:	dfc00217 	ldw	ra,8(sp)
 10021d8:	dc400117 	ldw	r17,4(sp)
 10021dc:	dc000017 	ldw	r16,0(sp)
 10021e0:	dec00304 	addi	sp,sp,12
 10021e4:	f800283a 	ret
 10021e8:	31000217 	ldw	r4,8(r6)
 10021ec:	003fbd06 	br	10020e4 <_free_r+0x94>
 10021f0:	3806d0fa 	srli	r3,r7,3
 10021f4:	00800044 	movi	r2,1
 10021f8:	51400117 	ldw	r5,4(r10)
 10021fc:	180890fa 	slli	r4,r3,3
 1002200:	1807d0ba 	srai	r3,r3,2
 1002204:	22c9883a 	add	r4,r4,r11
 1002208:	21800217 	ldw	r6,8(r4)
 100220c:	10c4983a 	sll	r2,r2,r3
 1002210:	41000315 	stw	r4,12(r8)
 1002214:	41800215 	stw	r6,8(r8)
 1002218:	288ab03a 	or	r5,r5,r2
 100221c:	22000215 	stw	r8,8(r4)
 1002220:	8809883a 	mov	r4,r17
 1002224:	51400115 	stw	r5,4(r10)
 1002228:	32000315 	stw	r8,12(r6)
 100222c:	dfc00217 	ldw	ra,8(sp)
 1002230:	dc400117 	ldw	r17,4(sp)
 1002234:	dc000017 	ldw	r16,0(sp)
 1002238:	dec00304 	addi	sp,sp,12
 100223c:	10039b01 	jmpi	10039b0 <__malloc_unlock>
 1002240:	2880004c 	andi	r2,r5,1
 1002244:	3a4d883a 	add	r6,r7,r9
 1002248:	1000071e 	bne	r2,zero,1002268 <_free_r+0x218>
 100224c:	80bffe17 	ldw	r2,-8(r16)
 1002250:	4091c83a 	sub	r8,r8,r2
 1002254:	41000317 	ldw	r4,12(r8)
 1002258:	40c00217 	ldw	r3,8(r8)
 100225c:	308d883a 	add	r6,r6,r2
 1002260:	20c00215 	stw	r3,8(r4)
 1002264:	19000315 	stw	r4,12(r3)
 1002268:	00804074 	movhi	r2,257
 100226c:	10878104 	addi	r2,r2,7684
 1002270:	11000017 	ldw	r4,0(r2)
 1002274:	30c00054 	ori	r3,r6,1
 1002278:	52000215 	stw	r8,8(r10)
 100227c:	40c00115 	stw	r3,4(r8)
 1002280:	313fa036 	bltu	r6,r4,1002104 <_free_r+0xb4>
 1002284:	00804074 	movhi	r2,257
 1002288:	108e9e04 	addi	r2,r2,14968
 100228c:	11400017 	ldw	r5,0(r2)
 1002290:	8809883a 	mov	r4,r17
 1002294:	1001f240 	call	1001f24 <_malloc_trim_r>
 1002298:	003f9a06 	br	1002104 <_free_r+0xb4>
 100229c:	00800104 	movi	r2,4
 10022a0:	10c0072e 	bgeu	r2,r3,10022c0 <_free_r+0x270>
 10022a4:	00800504 	movi	r2,20
 10022a8:	10c01936 	bltu	r2,r3,1002310 <_free_r+0x2c0>
 10022ac:	188016c4 	addi	r2,r3,91
 10022b0:	100690fa 	slli	r3,r2,3
 10022b4:	003fb306 	br	1002184 <_free_r+0x134>
 10022b8:	01400044 	movi	r5,1
 10022bc:	003f7e06 	br	10020b8 <_free_r+0x68>
 10022c0:	3804d1ba 	srli	r2,r7,6
 10022c4:	10800e04 	addi	r2,r2,56
 10022c8:	100690fa 	slli	r3,r2,3
 10022cc:	003fad06 	br	1002184 <_free_r+0x134>
 10022d0:	22000315 	stw	r8,12(r4)
 10022d4:	22000215 	stw	r8,8(r4)
 10022d8:	3a05883a 	add	r2,r7,r8
 10022dc:	38c00054 	ori	r3,r7,1
 10022e0:	11c00015 	stw	r7,0(r2)
 10022e4:	41000215 	stw	r4,8(r8)
 10022e8:	40c00115 	stw	r3,4(r8)
 10022ec:	41000315 	stw	r4,12(r8)
 10022f0:	003f8406 	br	1002104 <_free_r+0xb4>
 10022f4:	1005d0ba 	srai	r2,r2,2
 10022f8:	00c00044 	movi	r3,1
 10022fc:	51000117 	ldw	r4,4(r10)
 1002300:	1886983a 	sll	r3,r3,r2
 1002304:	20c8b03a 	or	r4,r4,r3
 1002308:	51000115 	stw	r4,4(r10)
 100230c:	003fa706 	br	10021ac <_free_r+0x15c>
 1002310:	00801504 	movi	r2,84
 1002314:	10c00436 	bltu	r2,r3,1002328 <_free_r+0x2d8>
 1002318:	3804d33a 	srli	r2,r7,12
 100231c:	10801b84 	addi	r2,r2,110
 1002320:	100690fa 	slli	r3,r2,3
 1002324:	003f9706 	br	1002184 <_free_r+0x134>
 1002328:	00805504 	movi	r2,340
 100232c:	10c00436 	bltu	r2,r3,1002340 <_free_r+0x2f0>
 1002330:	3804d3fa 	srli	r2,r7,15
 1002334:	10801dc4 	addi	r2,r2,119
 1002338:	100690fa 	slli	r3,r2,3
 100233c:	003f9106 	br	1002184 <_free_r+0x134>
 1002340:	00815504 	movi	r2,1364
 1002344:	10c0032e 	bgeu	r2,r3,1002354 <_free_r+0x304>
 1002348:	00801f84 	movi	r2,126
 100234c:	00c0fc04 	movi	r3,1008
 1002350:	003f8c06 	br	1002184 <_free_r+0x134>
 1002354:	3804d4ba 	srli	r2,r7,18
 1002358:	10801f04 	addi	r2,r2,124
 100235c:	100690fa 	slli	r3,r2,3
 1002360:	003f8806 	br	1002184 <_free_r+0x134>

01002364 <_fwalk_reent>:
 1002364:	defff704 	addi	sp,sp,-36
 1002368:	dcc00315 	stw	r19,12(sp)
 100236c:	24c0b804 	addi	r19,r4,736
 1002370:	dd800615 	stw	r22,24(sp)
 1002374:	dd400515 	stw	r21,20(sp)
 1002378:	dfc00815 	stw	ra,32(sp)
 100237c:	ddc00715 	stw	r23,28(sp)
 1002380:	dd000415 	stw	r20,16(sp)
 1002384:	dc800215 	stw	r18,8(sp)
 1002388:	dc400115 	stw	r17,4(sp)
 100238c:	dc000015 	stw	r16,0(sp)
 1002390:	202b883a 	mov	r21,r4
 1002394:	282d883a 	mov	r22,r5
 1002398:	1001c880 	call	1001c88 <__sfp_lock_acquire>
 100239c:	98002126 	beq	r19,zero,1002424 <_fwalk_reent+0xc0>
 10023a0:	002f883a 	mov	r23,zero
 10023a4:	9c800117 	ldw	r18,4(r19)
 10023a8:	9c000217 	ldw	r16,8(r19)
 10023ac:	90bfffc4 	addi	r2,r18,-1
 10023b0:	10000d16 	blt	r2,zero,10023e8 <_fwalk_reent+0x84>
 10023b4:	0023883a 	mov	r17,zero
 10023b8:	053fffc4 	movi	r20,-1
 10023bc:	8080030f 	ldh	r2,12(r16)
 10023c0:	8c400044 	addi	r17,r17,1
 10023c4:	10000626 	beq	r2,zero,10023e0 <_fwalk_reent+0x7c>
 10023c8:	8080038f 	ldh	r2,14(r16)
 10023cc:	800b883a 	mov	r5,r16
 10023d0:	a809883a 	mov	r4,r21
 10023d4:	15000226 	beq	r2,r20,10023e0 <_fwalk_reent+0x7c>
 10023d8:	b03ee83a 	callr	r22
 10023dc:	b8aeb03a 	or	r23,r23,r2
 10023e0:	84001704 	addi	r16,r16,92
 10023e4:	947ff51e 	bne	r18,r17,10023bc <_fwalk_reent+0x58>
 10023e8:	9cc00017 	ldw	r19,0(r19)
 10023ec:	983fed1e 	bne	r19,zero,10023a4 <_fwalk_reent+0x40>
 10023f0:	1001c8c0 	call	1001c8c <__sfp_lock_release>
 10023f4:	b805883a 	mov	r2,r23
 10023f8:	dfc00817 	ldw	ra,32(sp)
 10023fc:	ddc00717 	ldw	r23,28(sp)
 1002400:	dd800617 	ldw	r22,24(sp)
 1002404:	dd400517 	ldw	r21,20(sp)
 1002408:	dd000417 	ldw	r20,16(sp)
 100240c:	dcc00317 	ldw	r19,12(sp)
 1002410:	dc800217 	ldw	r18,8(sp)
 1002414:	dc400117 	ldw	r17,4(sp)
 1002418:	dc000017 	ldw	r16,0(sp)
 100241c:	dec00904 	addi	sp,sp,36
 1002420:	f800283a 	ret
 1002424:	002f883a 	mov	r23,zero
 1002428:	003ff106 	br	10023f0 <_fwalk_reent+0x8c>

0100242c <_fwalk>:
 100242c:	defff804 	addi	sp,sp,-32
 1002430:	dcc00315 	stw	r19,12(sp)
 1002434:	24c0b804 	addi	r19,r4,736
 1002438:	dd400515 	stw	r21,20(sp)
 100243c:	dfc00715 	stw	ra,28(sp)
 1002440:	dd800615 	stw	r22,24(sp)
 1002444:	dd000415 	stw	r20,16(sp)
 1002448:	dc800215 	stw	r18,8(sp)
 100244c:	dc400115 	stw	r17,4(sp)
 1002450:	dc000015 	stw	r16,0(sp)
 1002454:	282b883a 	mov	r21,r5
 1002458:	1001c880 	call	1001c88 <__sfp_lock_acquire>
 100245c:	98001f26 	beq	r19,zero,10024dc <_fwalk+0xb0>
 1002460:	002d883a 	mov	r22,zero
 1002464:	9c800117 	ldw	r18,4(r19)
 1002468:	9c000217 	ldw	r16,8(r19)
 100246c:	90bfffc4 	addi	r2,r18,-1
 1002470:	10000c16 	blt	r2,zero,10024a4 <_fwalk+0x78>
 1002474:	0023883a 	mov	r17,zero
 1002478:	053fffc4 	movi	r20,-1
 100247c:	8080030f 	ldh	r2,12(r16)
 1002480:	8c400044 	addi	r17,r17,1
 1002484:	10000526 	beq	r2,zero,100249c <_fwalk+0x70>
 1002488:	8080038f 	ldh	r2,14(r16)
 100248c:	8009883a 	mov	r4,r16
 1002490:	15000226 	beq	r2,r20,100249c <_fwalk+0x70>
 1002494:	a83ee83a 	callr	r21
 1002498:	b0acb03a 	or	r22,r22,r2
 100249c:	84001704 	addi	r16,r16,92
 10024a0:	947ff61e 	bne	r18,r17,100247c <_fwalk+0x50>
 10024a4:	9cc00017 	ldw	r19,0(r19)
 10024a8:	983fee1e 	bne	r19,zero,1002464 <_fwalk+0x38>
 10024ac:	1001c8c0 	call	1001c8c <__sfp_lock_release>
 10024b0:	b005883a 	mov	r2,r22
 10024b4:	dfc00717 	ldw	ra,28(sp)
 10024b8:	dd800617 	ldw	r22,24(sp)
 10024bc:	dd400517 	ldw	r21,20(sp)
 10024c0:	dd000417 	ldw	r20,16(sp)
 10024c4:	dcc00317 	ldw	r19,12(sp)
 10024c8:	dc800217 	ldw	r18,8(sp)
 10024cc:	dc400117 	ldw	r17,4(sp)
 10024d0:	dc000017 	ldw	r16,0(sp)
 10024d4:	dec00804 	addi	sp,sp,32
 10024d8:	f800283a 	ret
 10024dc:	002d883a 	mov	r22,zero
 10024e0:	003ff206 	br	10024ac <_fwalk+0x80>

010024e4 <__smakebuf_r>:
 10024e4:	2880030b 	ldhu	r2,12(r5)
 10024e8:	deffed04 	addi	sp,sp,-76
 10024ec:	dc401015 	stw	r17,64(sp)
 10024f0:	1080008c 	andi	r2,r2,2
 10024f4:	dc000f15 	stw	r16,60(sp)
 10024f8:	dfc01215 	stw	ra,72(sp)
 10024fc:	dc801115 	stw	r18,68(sp)
 1002500:	2821883a 	mov	r16,r5
 1002504:	2023883a 	mov	r17,r4
 1002508:	10000b26 	beq	r2,zero,1002538 <__smakebuf_r+0x54>
 100250c:	28c010c4 	addi	r3,r5,67
 1002510:	00800044 	movi	r2,1
 1002514:	28800515 	stw	r2,20(r5)
 1002518:	28c00415 	stw	r3,16(r5)
 100251c:	28c00015 	stw	r3,0(r5)
 1002520:	dfc01217 	ldw	ra,72(sp)
 1002524:	dc801117 	ldw	r18,68(sp)
 1002528:	dc401017 	ldw	r17,64(sp)
 100252c:	dc000f17 	ldw	r16,60(sp)
 1002530:	dec01304 	addi	sp,sp,76
 1002534:	f800283a 	ret
 1002538:	2940038f 	ldh	r5,14(r5)
 100253c:	28002116 	blt	r5,zero,10025c4 <__smakebuf_r+0xe0>
 1002540:	d80d883a 	mov	r6,sp
 1002544:	1002a680 	call	1002a68 <_fstat_r>
 1002548:	10001e16 	blt	r2,zero,10025c4 <__smakebuf_r+0xe0>
 100254c:	d8800117 	ldw	r2,4(sp)
 1002550:	00e00014 	movui	r3,32768
 1002554:	113c000c 	andi	r4,r2,61440
 1002558:	20c03126 	beq	r4,r3,1002620 <__smakebuf_r+0x13c>
 100255c:	8080030b 	ldhu	r2,12(r16)
 1002560:	00c80004 	movi	r3,8192
 1002564:	10820014 	ori	r2,r2,2048
 1002568:	8080030d 	sth	r2,12(r16)
 100256c:	20c01e26 	beq	r4,r3,10025e8 <__smakebuf_r+0x104>
 1002570:	04810004 	movi	r18,1024
 1002574:	8809883a 	mov	r4,r17
 1002578:	900b883a 	mov	r5,r18
 100257c:	10008bc0 	call	10008bc <_malloc_r>
 1002580:	1009883a 	mov	r4,r2
 1002584:	10003126 	beq	r2,zero,100264c <__smakebuf_r+0x168>
 1002588:	80c0030b 	ldhu	r3,12(r16)
 100258c:	00804034 	movhi	r2,256
 1002590:	10875f04 	addi	r2,r2,7548
 1002594:	88800f15 	stw	r2,60(r17)
 1002598:	18c02014 	ori	r3,r3,128
 100259c:	84800515 	stw	r18,20(r16)
 10025a0:	80c0030d 	sth	r3,12(r16)
 10025a4:	81000415 	stw	r4,16(r16)
 10025a8:	81000015 	stw	r4,0(r16)
 10025ac:	dfc01217 	ldw	ra,72(sp)
 10025b0:	dc801117 	ldw	r18,68(sp)
 10025b4:	dc401017 	ldw	r17,64(sp)
 10025b8:	dc000f17 	ldw	r16,60(sp)
 10025bc:	dec01304 	addi	sp,sp,76
 10025c0:	f800283a 	ret
 10025c4:	80c0030b 	ldhu	r3,12(r16)
 10025c8:	1880200c 	andi	r2,r3,128
 10025cc:	10000426 	beq	r2,zero,10025e0 <__smakebuf_r+0xfc>
 10025d0:	04801004 	movi	r18,64
 10025d4:	18820014 	ori	r2,r3,2048
 10025d8:	8080030d 	sth	r2,12(r16)
 10025dc:	003fe506 	br	1002574 <__smakebuf_r+0x90>
 10025e0:	04810004 	movi	r18,1024
 10025e4:	003ffb06 	br	10025d4 <__smakebuf_r+0xf0>
 10025e8:	8140038f 	ldh	r5,14(r16)
 10025ec:	8809883a 	mov	r4,r17
 10025f0:	1002adc0 	call	1002adc <_isatty_r>
 10025f4:	103fde26 	beq	r2,zero,1002570 <__smakebuf_r+0x8c>
 10025f8:	8080030b 	ldhu	r2,12(r16)
 10025fc:	80c010c4 	addi	r3,r16,67
 1002600:	04810004 	movi	r18,1024
 1002604:	10800054 	ori	r2,r2,1
 1002608:	8080030d 	sth	r2,12(r16)
 100260c:	00800044 	movi	r2,1
 1002610:	80c00415 	stw	r3,16(r16)
 1002614:	80800515 	stw	r2,20(r16)
 1002618:	80c00015 	stw	r3,0(r16)
 100261c:	003fd506 	br	1002574 <__smakebuf_r+0x90>
 1002620:	80c00a17 	ldw	r3,40(r16)
 1002624:	00804034 	movhi	r2,256
 1002628:	1089c604 	addi	r2,r2,10008
 100262c:	18bfcb1e 	bne	r3,r2,100255c <__smakebuf_r+0x78>
 1002630:	8080030b 	ldhu	r2,12(r16)
 1002634:	00c10004 	movi	r3,1024
 1002638:	1825883a 	mov	r18,r3
 100263c:	10c4b03a 	or	r2,r2,r3
 1002640:	8080030d 	sth	r2,12(r16)
 1002644:	80c01315 	stw	r3,76(r16)
 1002648:	003fca06 	br	1002574 <__smakebuf_r+0x90>
 100264c:	8100030b 	ldhu	r4,12(r16)
 1002650:	2080800c 	andi	r2,r4,512
 1002654:	103fb21e 	bne	r2,zero,1002520 <__smakebuf_r+0x3c>
 1002658:	80c010c4 	addi	r3,r16,67
 100265c:	21000094 	ori	r4,r4,2
 1002660:	00800044 	movi	r2,1
 1002664:	80800515 	stw	r2,20(r16)
 1002668:	8100030d 	sth	r4,12(r16)
 100266c:	80c00415 	stw	r3,16(r16)
 1002670:	80c00015 	stw	r3,0(r16)
 1002674:	003faa06 	br	1002520 <__smakebuf_r+0x3c>

01002678 <memset>:
 1002678:	008000c4 	movi	r2,3
 100267c:	29403fcc 	andi	r5,r5,255
 1002680:	2007883a 	mov	r3,r4
 1002684:	1180022e 	bgeu	r2,r6,1002690 <memset+0x18>
 1002688:	2084703a 	and	r2,r4,r2
 100268c:	10000826 	beq	r2,zero,10026b0 <memset+0x38>
 1002690:	30000526 	beq	r6,zero,10026a8 <memset+0x30>
 1002694:	2805883a 	mov	r2,r5
 1002698:	30cd883a 	add	r6,r6,r3
 100269c:	18800005 	stb	r2,0(r3)
 10026a0:	18c00044 	addi	r3,r3,1
 10026a4:	19bffd1e 	bne	r3,r6,100269c <memset+0x24>
 10026a8:	2005883a 	mov	r2,r4
 10026ac:	f800283a 	ret
 10026b0:	2804923a 	slli	r2,r5,8
 10026b4:	020003c4 	movi	r8,15
 10026b8:	200f883a 	mov	r7,r4
 10026bc:	2884b03a 	or	r2,r5,r2
 10026c0:	1006943a 	slli	r3,r2,16
 10026c4:	10c6b03a 	or	r3,r2,r3
 10026c8:	41800a2e 	bgeu	r8,r6,10026f4 <memset+0x7c>
 10026cc:	4005883a 	mov	r2,r8
 10026d0:	31bffc04 	addi	r6,r6,-16
 10026d4:	38c00015 	stw	r3,0(r7)
 10026d8:	38c00115 	stw	r3,4(r7)
 10026dc:	38c00215 	stw	r3,8(r7)
 10026e0:	38c00315 	stw	r3,12(r7)
 10026e4:	39c00404 	addi	r7,r7,16
 10026e8:	11bff936 	bltu	r2,r6,10026d0 <memset+0x58>
 10026ec:	008000c4 	movi	r2,3
 10026f0:	1180052e 	bgeu	r2,r6,1002708 <memset+0x90>
 10026f4:	31bfff04 	addi	r6,r6,-4
 10026f8:	008000c4 	movi	r2,3
 10026fc:	38c00015 	stw	r3,0(r7)
 1002700:	39c00104 	addi	r7,r7,4
 1002704:	11bffb36 	bltu	r2,r6,10026f4 <memset+0x7c>
 1002708:	3807883a 	mov	r3,r7
 100270c:	003fe006 	br	1002690 <memset+0x18>

01002710 <__sclose>:
 1002710:	2940038f 	ldh	r5,14(r5)
 1002714:	10028d41 	jmpi	10028d4 <_close_r>

01002718 <__sseek>:
 1002718:	defffe04 	addi	sp,sp,-8
 100271c:	dc000015 	stw	r16,0(sp)
 1002720:	2821883a 	mov	r16,r5
 1002724:	2940038f 	ldh	r5,14(r5)
 1002728:	dfc00115 	stw	ra,4(sp)
 100272c:	1002b4c0 	call	1002b4c <_lseek_r>
 1002730:	1007883a 	mov	r3,r2
 1002734:	00bfffc4 	movi	r2,-1
 1002738:	18800926 	beq	r3,r2,1002760 <__sseek+0x48>
 100273c:	8080030b 	ldhu	r2,12(r16)
 1002740:	80c01415 	stw	r3,80(r16)
 1002744:	10840014 	ori	r2,r2,4096
 1002748:	8080030d 	sth	r2,12(r16)
 100274c:	1805883a 	mov	r2,r3
 1002750:	dfc00117 	ldw	ra,4(sp)
 1002754:	dc000017 	ldw	r16,0(sp)
 1002758:	dec00204 	addi	sp,sp,8
 100275c:	f800283a 	ret
 1002760:	8080030b 	ldhu	r2,12(r16)
 1002764:	10bbffcc 	andi	r2,r2,61439
 1002768:	8080030d 	sth	r2,12(r16)
 100276c:	1805883a 	mov	r2,r3
 1002770:	dfc00117 	ldw	ra,4(sp)
 1002774:	dc000017 	ldw	r16,0(sp)
 1002778:	dec00204 	addi	sp,sp,8
 100277c:	f800283a 	ret

01002780 <__swrite>:
 1002780:	2880030b 	ldhu	r2,12(r5)
 1002784:	defffb04 	addi	sp,sp,-20
 1002788:	dcc00315 	stw	r19,12(sp)
 100278c:	1080400c 	andi	r2,r2,256
 1002790:	dc800215 	stw	r18,8(sp)
 1002794:	dc400115 	stw	r17,4(sp)
 1002798:	dc000015 	stw	r16,0(sp)
 100279c:	3027883a 	mov	r19,r6
 10027a0:	3825883a 	mov	r18,r7
 10027a4:	dfc00415 	stw	ra,16(sp)
 10027a8:	2821883a 	mov	r16,r5
 10027ac:	000d883a 	mov	r6,zero
 10027b0:	01c00084 	movi	r7,2
 10027b4:	2023883a 	mov	r17,r4
 10027b8:	10000226 	beq	r2,zero,10027c4 <__swrite+0x44>
 10027bc:	2940038f 	ldh	r5,14(r5)
 10027c0:	1002b4c0 	call	1002b4c <_lseek_r>
 10027c4:	8080030b 	ldhu	r2,12(r16)
 10027c8:	8140038f 	ldh	r5,14(r16)
 10027cc:	8809883a 	mov	r4,r17
 10027d0:	10bbffcc 	andi	r2,r2,61439
 10027d4:	980d883a 	mov	r6,r19
 10027d8:	900f883a 	mov	r7,r18
 10027dc:	8080030d 	sth	r2,12(r16)
 10027e0:	dfc00417 	ldw	ra,16(sp)
 10027e4:	dcc00317 	ldw	r19,12(sp)
 10027e8:	dc800217 	ldw	r18,8(sp)
 10027ec:	dc400117 	ldw	r17,4(sp)
 10027f0:	dc000017 	ldw	r16,0(sp)
 10027f4:	dec00504 	addi	sp,sp,20
 10027f8:	100285c1 	jmpi	100285c <_write_r>

010027fc <__sread>:
 10027fc:	defffe04 	addi	sp,sp,-8
 1002800:	dc000015 	stw	r16,0(sp)
 1002804:	2821883a 	mov	r16,r5
 1002808:	2940038f 	ldh	r5,14(r5)
 100280c:	dfc00115 	stw	ra,4(sp)
 1002810:	1002bc40 	call	1002bc4 <_read_r>
 1002814:	1007883a 	mov	r3,r2
 1002818:	10000816 	blt	r2,zero,100283c <__sread+0x40>
 100281c:	80801417 	ldw	r2,80(r16)
 1002820:	10c5883a 	add	r2,r2,r3
 1002824:	80801415 	stw	r2,80(r16)
 1002828:	1805883a 	mov	r2,r3
 100282c:	dfc00117 	ldw	ra,4(sp)
 1002830:	dc000017 	ldw	r16,0(sp)
 1002834:	dec00204 	addi	sp,sp,8
 1002838:	f800283a 	ret
 100283c:	8080030b 	ldhu	r2,12(r16)
 1002840:	10bbffcc 	andi	r2,r2,61439
 1002844:	8080030d 	sth	r2,12(r16)
 1002848:	1805883a 	mov	r2,r3
 100284c:	dfc00117 	ldw	ra,4(sp)
 1002850:	dc000017 	ldw	r16,0(sp)
 1002854:	dec00204 	addi	sp,sp,8
 1002858:	f800283a 	ret

0100285c <_write_r>:
 100285c:	defffd04 	addi	sp,sp,-12
 1002860:	dc000015 	stw	r16,0(sp)
 1002864:	04004074 	movhi	r16,257
 1002868:	840ea104 	addi	r16,r16,14980
 100286c:	dc400115 	stw	r17,4(sp)
 1002870:	80000015 	stw	zero,0(r16)
 1002874:	2023883a 	mov	r17,r4
 1002878:	2809883a 	mov	r4,r5
 100287c:	300b883a 	mov	r5,r6
 1002880:	380d883a 	mov	r6,r7
 1002884:	dfc00215 	stw	ra,8(sp)
 1002888:	100361c0 	call	100361c <write>
 100288c:	1007883a 	mov	r3,r2
 1002890:	00bfffc4 	movi	r2,-1
 1002894:	18800626 	beq	r3,r2,10028b0 <_write_r+0x54>
 1002898:	1805883a 	mov	r2,r3
 100289c:	dfc00217 	ldw	ra,8(sp)
 10028a0:	dc400117 	ldw	r17,4(sp)
 10028a4:	dc000017 	ldw	r16,0(sp)
 10028a8:	dec00304 	addi	sp,sp,12
 10028ac:	f800283a 	ret
 10028b0:	80800017 	ldw	r2,0(r16)
 10028b4:	103ff826 	beq	r2,zero,1002898 <_write_r+0x3c>
 10028b8:	88800015 	stw	r2,0(r17)
 10028bc:	1805883a 	mov	r2,r3
 10028c0:	dfc00217 	ldw	ra,8(sp)
 10028c4:	dc400117 	ldw	r17,4(sp)
 10028c8:	dc000017 	ldw	r16,0(sp)
 10028cc:	dec00304 	addi	sp,sp,12
 10028d0:	f800283a 	ret

010028d4 <_close_r>:
 10028d4:	defffd04 	addi	sp,sp,-12
 10028d8:	dc000015 	stw	r16,0(sp)
 10028dc:	04004074 	movhi	r16,257
 10028e0:	840ea104 	addi	r16,r16,14980
 10028e4:	dc400115 	stw	r17,4(sp)
 10028e8:	80000015 	stw	zero,0(r16)
 10028ec:	2023883a 	mov	r17,r4
 10028f0:	2809883a 	mov	r4,r5
 10028f4:	dfc00215 	stw	ra,8(sp)
 10028f8:	1002c740 	call	1002c74 <close>
 10028fc:	1007883a 	mov	r3,r2
 1002900:	00bfffc4 	movi	r2,-1
 1002904:	18800626 	beq	r3,r2,1002920 <_close_r+0x4c>
 1002908:	1805883a 	mov	r2,r3
 100290c:	dfc00217 	ldw	ra,8(sp)
 1002910:	dc400117 	ldw	r17,4(sp)
 1002914:	dc000017 	ldw	r16,0(sp)
 1002918:	dec00304 	addi	sp,sp,12
 100291c:	f800283a 	ret
 1002920:	80800017 	ldw	r2,0(r16)
 1002924:	103ff826 	beq	r2,zero,1002908 <_close_r+0x34>
 1002928:	88800015 	stw	r2,0(r17)
 100292c:	1805883a 	mov	r2,r3
 1002930:	dfc00217 	ldw	ra,8(sp)
 1002934:	dc400117 	ldw	r17,4(sp)
 1002938:	dc000017 	ldw	r16,0(sp)
 100293c:	dec00304 	addi	sp,sp,12
 1002940:	f800283a 	ret

01002944 <_fclose_r>:
 1002944:	defffc04 	addi	sp,sp,-16
 1002948:	dc400115 	stw	r17,4(sp)
 100294c:	dc000015 	stw	r16,0(sp)
 1002950:	dfc00315 	stw	ra,12(sp)
 1002954:	dc800215 	stw	r18,8(sp)
 1002958:	2821883a 	mov	r16,r5
 100295c:	2023883a 	mov	r17,r4
 1002960:	28002926 	beq	r5,zero,1002a08 <_fclose_r+0xc4>
 1002964:	1001c880 	call	1001c88 <__sfp_lock_acquire>
 1002968:	88000226 	beq	r17,zero,1002974 <_fclose_r+0x30>
 100296c:	88800e17 	ldw	r2,56(r17)
 1002970:	10002d26 	beq	r2,zero,1002a28 <_fclose_r+0xe4>
 1002974:	8080030f 	ldh	r2,12(r16)
 1002978:	10002226 	beq	r2,zero,1002a04 <_fclose_r+0xc0>
 100297c:	8809883a 	mov	r4,r17
 1002980:	800b883a 	mov	r5,r16
 1002984:	1001a000 	call	1001a00 <_fflush_r>
 1002988:	1025883a 	mov	r18,r2
 100298c:	80800b17 	ldw	r2,44(r16)
 1002990:	10000426 	beq	r2,zero,10029a4 <_fclose_r+0x60>
 1002994:	81400717 	ldw	r5,28(r16)
 1002998:	8809883a 	mov	r4,r17
 100299c:	103ee83a 	callr	r2
 10029a0:	10002a16 	blt	r2,zero,1002a4c <_fclose_r+0x108>
 10029a4:	8080030b 	ldhu	r2,12(r16)
 10029a8:	1080200c 	andi	r2,r2,128
 10029ac:	1000231e 	bne	r2,zero,1002a3c <_fclose_r+0xf8>
 10029b0:	81400c17 	ldw	r5,48(r16)
 10029b4:	28000526 	beq	r5,zero,10029cc <_fclose_r+0x88>
 10029b8:	80801004 	addi	r2,r16,64
 10029bc:	28800226 	beq	r5,r2,10029c8 <_fclose_r+0x84>
 10029c0:	8809883a 	mov	r4,r17
 10029c4:	10020500 	call	1002050 <_free_r>
 10029c8:	80000c15 	stw	zero,48(r16)
 10029cc:	81401117 	ldw	r5,68(r16)
 10029d0:	28000326 	beq	r5,zero,10029e0 <_fclose_r+0x9c>
 10029d4:	8809883a 	mov	r4,r17
 10029d8:	10020500 	call	1002050 <_free_r>
 10029dc:	80001115 	stw	zero,68(r16)
 10029e0:	8000030d 	sth	zero,12(r16)
 10029e4:	1001c8c0 	call	1001c8c <__sfp_lock_release>
 10029e8:	9005883a 	mov	r2,r18
 10029ec:	dfc00317 	ldw	ra,12(sp)
 10029f0:	dc800217 	ldw	r18,8(sp)
 10029f4:	dc400117 	ldw	r17,4(sp)
 10029f8:	dc000017 	ldw	r16,0(sp)
 10029fc:	dec00404 	addi	sp,sp,16
 1002a00:	f800283a 	ret
 1002a04:	1001c8c0 	call	1001c8c <__sfp_lock_release>
 1002a08:	0025883a 	mov	r18,zero
 1002a0c:	9005883a 	mov	r2,r18
 1002a10:	dfc00317 	ldw	ra,12(sp)
 1002a14:	dc800217 	ldw	r18,8(sp)
 1002a18:	dc400117 	ldw	r17,4(sp)
 1002a1c:	dc000017 	ldw	r16,0(sp)
 1002a20:	dec00404 	addi	sp,sp,16
 1002a24:	f800283a 	ret
 1002a28:	8809883a 	mov	r4,r17
 1002a2c:	1001c980 	call	1001c98 <__sinit>
 1002a30:	8080030f 	ldh	r2,12(r16)
 1002a34:	103fd11e 	bne	r2,zero,100297c <_fclose_r+0x38>
 1002a38:	003ff206 	br	1002a04 <_fclose_r+0xc0>
 1002a3c:	81400417 	ldw	r5,16(r16)
 1002a40:	8809883a 	mov	r4,r17
 1002a44:	10020500 	call	1002050 <_free_r>
 1002a48:	003fd906 	br	10029b0 <_fclose_r+0x6c>
 1002a4c:	04bfffc4 	movi	r18,-1
 1002a50:	003fd406 	br	10029a4 <_fclose_r+0x60>

01002a54 <fclose>:
 1002a54:	00804074 	movhi	r2,257
 1002a58:	10877f04 	addi	r2,r2,7676
 1002a5c:	200b883a 	mov	r5,r4
 1002a60:	11000017 	ldw	r4,0(r2)
 1002a64:	10029441 	jmpi	1002944 <_fclose_r>

01002a68 <_fstat_r>:
 1002a68:	defffd04 	addi	sp,sp,-12
 1002a6c:	dc000015 	stw	r16,0(sp)
 1002a70:	04004074 	movhi	r16,257
 1002a74:	840ea104 	addi	r16,r16,14980
 1002a78:	dc400115 	stw	r17,4(sp)
 1002a7c:	80000015 	stw	zero,0(r16)
 1002a80:	2023883a 	mov	r17,r4
 1002a84:	2809883a 	mov	r4,r5
 1002a88:	300b883a 	mov	r5,r6
 1002a8c:	dfc00215 	stw	ra,8(sp)
 1002a90:	1002e000 	call	1002e00 <fstat>
 1002a94:	1007883a 	mov	r3,r2
 1002a98:	00bfffc4 	movi	r2,-1
 1002a9c:	18800626 	beq	r3,r2,1002ab8 <_fstat_r+0x50>
 1002aa0:	1805883a 	mov	r2,r3
 1002aa4:	dfc00217 	ldw	ra,8(sp)
 1002aa8:	dc400117 	ldw	r17,4(sp)
 1002aac:	dc000017 	ldw	r16,0(sp)
 1002ab0:	dec00304 	addi	sp,sp,12
 1002ab4:	f800283a 	ret
 1002ab8:	80800017 	ldw	r2,0(r16)
 1002abc:	103ff826 	beq	r2,zero,1002aa0 <_fstat_r+0x38>
 1002ac0:	88800015 	stw	r2,0(r17)
 1002ac4:	1805883a 	mov	r2,r3
 1002ac8:	dfc00217 	ldw	ra,8(sp)
 1002acc:	dc400117 	ldw	r17,4(sp)
 1002ad0:	dc000017 	ldw	r16,0(sp)
 1002ad4:	dec00304 	addi	sp,sp,12
 1002ad8:	f800283a 	ret

01002adc <_isatty_r>:
 1002adc:	defffd04 	addi	sp,sp,-12
 1002ae0:	dc000015 	stw	r16,0(sp)
 1002ae4:	04004074 	movhi	r16,257
 1002ae8:	840ea104 	addi	r16,r16,14980
 1002aec:	dc400115 	stw	r17,4(sp)
 1002af0:	80000015 	stw	zero,0(r16)
 1002af4:	2023883a 	mov	r17,r4
 1002af8:	2809883a 	mov	r4,r5
 1002afc:	dfc00215 	stw	ra,8(sp)
 1002b00:	1002f380 	call	1002f38 <isatty>
 1002b04:	1007883a 	mov	r3,r2
 1002b08:	00bfffc4 	movi	r2,-1
 1002b0c:	18800626 	beq	r3,r2,1002b28 <_isatty_r+0x4c>
 1002b10:	1805883a 	mov	r2,r3
 1002b14:	dfc00217 	ldw	ra,8(sp)
 1002b18:	dc400117 	ldw	r17,4(sp)
 1002b1c:	dc000017 	ldw	r16,0(sp)
 1002b20:	dec00304 	addi	sp,sp,12
 1002b24:	f800283a 	ret
 1002b28:	80800017 	ldw	r2,0(r16)
 1002b2c:	103ff826 	beq	r2,zero,1002b10 <_isatty_r+0x34>
 1002b30:	88800015 	stw	r2,0(r17)
 1002b34:	1805883a 	mov	r2,r3
 1002b38:	dfc00217 	ldw	ra,8(sp)
 1002b3c:	dc400117 	ldw	r17,4(sp)
 1002b40:	dc000017 	ldw	r16,0(sp)
 1002b44:	dec00304 	addi	sp,sp,12
 1002b48:	f800283a 	ret

01002b4c <_lseek_r>:
 1002b4c:	defffd04 	addi	sp,sp,-12
 1002b50:	dc000015 	stw	r16,0(sp)
 1002b54:	04004074 	movhi	r16,257
 1002b58:	840ea104 	addi	r16,r16,14980
 1002b5c:	dc400115 	stw	r17,4(sp)
 1002b60:	80000015 	stw	zero,0(r16)
 1002b64:	2023883a 	mov	r17,r4
 1002b68:	2809883a 	mov	r4,r5
 1002b6c:	300b883a 	mov	r5,r6
 1002b70:	380d883a 	mov	r6,r7
 1002b74:	dfc00215 	stw	ra,8(sp)
 1002b78:	10031480 	call	1003148 <lseek>
 1002b7c:	1007883a 	mov	r3,r2
 1002b80:	00bfffc4 	movi	r2,-1
 1002b84:	18800626 	beq	r3,r2,1002ba0 <_lseek_r+0x54>
 1002b88:	1805883a 	mov	r2,r3
 1002b8c:	dfc00217 	ldw	ra,8(sp)
 1002b90:	dc400117 	ldw	r17,4(sp)
 1002b94:	dc000017 	ldw	r16,0(sp)
 1002b98:	dec00304 	addi	sp,sp,12
 1002b9c:	f800283a 	ret
 1002ba0:	80800017 	ldw	r2,0(r16)
 1002ba4:	103ff826 	beq	r2,zero,1002b88 <_lseek_r+0x3c>
 1002ba8:	88800015 	stw	r2,0(r17)
 1002bac:	1805883a 	mov	r2,r3
 1002bb0:	dfc00217 	ldw	ra,8(sp)
 1002bb4:	dc400117 	ldw	r17,4(sp)
 1002bb8:	dc000017 	ldw	r16,0(sp)
 1002bbc:	dec00304 	addi	sp,sp,12
 1002bc0:	f800283a 	ret

01002bc4 <_read_r>:
 1002bc4:	defffd04 	addi	sp,sp,-12
 1002bc8:	dc000015 	stw	r16,0(sp)
 1002bcc:	04004074 	movhi	r16,257
 1002bd0:	840ea104 	addi	r16,r16,14980
 1002bd4:	dc400115 	stw	r17,4(sp)
 1002bd8:	80000015 	stw	zero,0(r16)
 1002bdc:	2023883a 	mov	r17,r4
 1002be0:	2809883a 	mov	r4,r5
 1002be4:	300b883a 	mov	r5,r6
 1002be8:	380d883a 	mov	r6,r7
 1002bec:	dfc00215 	stw	ra,8(sp)
 1002bf0:	10033640 	call	1003364 <read>
 1002bf4:	1007883a 	mov	r3,r2
 1002bf8:	00bfffc4 	movi	r2,-1
 1002bfc:	18800626 	beq	r3,r2,1002c18 <_read_r+0x54>
 1002c00:	1805883a 	mov	r2,r3
 1002c04:	dfc00217 	ldw	ra,8(sp)
 1002c08:	dc400117 	ldw	r17,4(sp)
 1002c0c:	dc000017 	ldw	r16,0(sp)
 1002c10:	dec00304 	addi	sp,sp,12
 1002c14:	f800283a 	ret
 1002c18:	80800017 	ldw	r2,0(r16)
 1002c1c:	103ff826 	beq	r2,zero,1002c00 <_read_r+0x3c>
 1002c20:	88800015 	stw	r2,0(r17)
 1002c24:	1805883a 	mov	r2,r3
 1002c28:	dfc00217 	ldw	ra,8(sp)
 1002c2c:	dc400117 	ldw	r17,4(sp)
 1002c30:	dc000017 	ldw	r16,0(sp)
 1002c34:	dec00304 	addi	sp,sp,12
 1002c38:	f800283a 	ret

01002c3c <__mulsi3>:
 1002c3c:	20000a26 	beq	r4,zero,1002c68 <__mulsi3+0x2c>
 1002c40:	0007883a 	mov	r3,zero
 1002c44:	2080004c 	andi	r2,r4,1
 1002c48:	1005003a 	cmpeq	r2,r2,zero
 1002c4c:	2008d07a 	srli	r4,r4,1
 1002c50:	1000011e 	bne	r2,zero,1002c58 <__mulsi3+0x1c>
 1002c54:	1947883a 	add	r3,r3,r5
 1002c58:	294b883a 	add	r5,r5,r5
 1002c5c:	203ff91e 	bne	r4,zero,1002c44 <__mulsi3+0x8>
 1002c60:	1805883a 	mov	r2,r3
 1002c64:	f800283a 	ret
 1002c68:	0007883a 	mov	r3,zero
 1002c6c:	1805883a 	mov	r2,r3
 1002c70:	f800283a 	ret

01002c74 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 1002c74:	defff804 	addi	sp,sp,-32
 1002c78:	dfc00715 	stw	ra,28(sp)
 1002c7c:	df000615 	stw	fp,24(sp)
 1002c80:	df000604 	addi	fp,sp,24
 1002c84:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 1002c88:	e0bffc17 	ldw	r2,-16(fp)
 1002c8c:	1004803a 	cmplt	r2,r2,zero
 1002c90:	1000091e 	bne	r2,zero,1002cb8 <close+0x44>
 1002c94:	e13ffc17 	ldw	r4,-16(fp)
 1002c98:	01400304 	movi	r5,12
 1002c9c:	1002c3c0 	call	1002c3c <__mulsi3>
 1002ca0:	1007883a 	mov	r3,r2
 1002ca4:	00804074 	movhi	r2,257
 1002ca8:	1082ca04 	addi	r2,r2,2856
 1002cac:	1887883a 	add	r3,r3,r2
 1002cb0:	e0ffff15 	stw	r3,-4(fp)
 1002cb4:	00000106 	br	1002cbc <close+0x48>
 1002cb8:	e03fff15 	stw	zero,-4(fp)
 1002cbc:	e0bfff17 	ldw	r2,-4(fp)
 1002cc0:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 1002cc4:	e0bffb17 	ldw	r2,-20(fp)
 1002cc8:	1005003a 	cmpeq	r2,r2,zero
 1002ccc:	10001d1e 	bne	r2,zero,1002d44 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 1002cd0:	e0bffb17 	ldw	r2,-20(fp)
 1002cd4:	10800017 	ldw	r2,0(r2)
 1002cd8:	10800417 	ldw	r2,16(r2)
 1002cdc:	1005003a 	cmpeq	r2,r2,zero
 1002ce0:	1000071e 	bne	r2,zero,1002d00 <close+0x8c>
 1002ce4:	e0bffb17 	ldw	r2,-20(fp)
 1002ce8:	10800017 	ldw	r2,0(r2)
 1002cec:	10800417 	ldw	r2,16(r2)
 1002cf0:	e13ffb17 	ldw	r4,-20(fp)
 1002cf4:	103ee83a 	callr	r2
 1002cf8:	e0bffe15 	stw	r2,-8(fp)
 1002cfc:	00000106 	br	1002d04 <close+0x90>
 1002d00:	e03ffe15 	stw	zero,-8(fp)
 1002d04:	e0bffe17 	ldw	r2,-8(fp)
 1002d08:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 1002d0c:	e13ffc17 	ldw	r4,-16(fp)
 1002d10:	10034e80 	call	10034e8 <alt_release_fd>
    if (rval < 0)
 1002d14:	e0bffa17 	ldw	r2,-24(fp)
 1002d18:	1004403a 	cmpge	r2,r2,zero
 1002d1c:	1000071e 	bne	r2,zero,1002d3c <close+0xc8>
    {
      ALT_ERRNO = -rval;
 1002d20:	1002d740 	call	1002d74 <alt_get_errno>
 1002d24:	e0fffa17 	ldw	r3,-24(fp)
 1002d28:	00c7c83a 	sub	r3,zero,r3
 1002d2c:	10c00015 	stw	r3,0(r2)
      return -1;
 1002d30:	00bfffc4 	movi	r2,-1
 1002d34:	e0bffd15 	stw	r2,-12(fp)
 1002d38:	00000806 	br	1002d5c <close+0xe8>
    }
    return 0;
 1002d3c:	e03ffd15 	stw	zero,-12(fp)
 1002d40:	00000606 	br	1002d5c <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1002d44:	1002d740 	call	1002d74 <alt_get_errno>
 1002d48:	1007883a 	mov	r3,r2
 1002d4c:	00801444 	movi	r2,81
 1002d50:	18800015 	stw	r2,0(r3)
    return -1;
 1002d54:	00bfffc4 	movi	r2,-1
 1002d58:	e0bffd15 	stw	r2,-12(fp)
 1002d5c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 1002d60:	e037883a 	mov	sp,fp
 1002d64:	dfc00117 	ldw	ra,4(sp)
 1002d68:	df000017 	ldw	fp,0(sp)
 1002d6c:	dec00204 	addi	sp,sp,8
 1002d70:	f800283a 	ret

01002d74 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1002d74:	defffd04 	addi	sp,sp,-12
 1002d78:	dfc00215 	stw	ra,8(sp)
 1002d7c:	df000115 	stw	fp,4(sp)
 1002d80:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1002d84:	00804074 	movhi	r2,257
 1002d88:	10878804 	addi	r2,r2,7712
 1002d8c:	10800017 	ldw	r2,0(r2)
 1002d90:	1005003a 	cmpeq	r2,r2,zero
 1002d94:	1000061e 	bne	r2,zero,1002db0 <alt_get_errno+0x3c>
 1002d98:	00804074 	movhi	r2,257
 1002d9c:	10878804 	addi	r2,r2,7712
 1002da0:	10800017 	ldw	r2,0(r2)
 1002da4:	103ee83a 	callr	r2
 1002da8:	e0bfff15 	stw	r2,-4(fp)
 1002dac:	00000306 	br	1002dbc <alt_get_errno+0x48>
 1002db0:	00804074 	movhi	r2,257
 1002db4:	108ea104 	addi	r2,r2,14980
 1002db8:	e0bfff15 	stw	r2,-4(fp)
 1002dbc:	e0bfff17 	ldw	r2,-4(fp)
}
 1002dc0:	e037883a 	mov	sp,fp
 1002dc4:	dfc00117 	ldw	ra,4(sp)
 1002dc8:	df000017 	ldw	fp,0(sp)
 1002dcc:	dec00204 	addi	sp,sp,8
 1002dd0:	f800283a 	ret

01002dd4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 1002dd4:	defffc04 	addi	sp,sp,-16
 1002dd8:	df000315 	stw	fp,12(sp)
 1002ddc:	df000304 	addi	fp,sp,12
 1002de0:	e13ffd15 	stw	r4,-12(fp)
 1002de4:	e17ffe15 	stw	r5,-8(fp)
 1002de8:	e1bfff15 	stw	r6,-4(fp)
  return len;
 1002dec:	e0bfff17 	ldw	r2,-4(fp)
}
 1002df0:	e037883a 	mov	sp,fp
 1002df4:	df000017 	ldw	fp,0(sp)
 1002df8:	dec00104 	addi	sp,sp,4
 1002dfc:	f800283a 	ret

01002e00 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 1002e00:	defff904 	addi	sp,sp,-28
 1002e04:	dfc00615 	stw	ra,24(sp)
 1002e08:	df000515 	stw	fp,20(sp)
 1002e0c:	df000504 	addi	fp,sp,20
 1002e10:	e13ffc15 	stw	r4,-16(fp)
 1002e14:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1002e18:	e0bffc17 	ldw	r2,-16(fp)
 1002e1c:	1004803a 	cmplt	r2,r2,zero
 1002e20:	1000091e 	bne	r2,zero,1002e48 <fstat+0x48>
 1002e24:	e13ffc17 	ldw	r4,-16(fp)
 1002e28:	01400304 	movi	r5,12
 1002e2c:	1002c3c0 	call	1002c3c <__mulsi3>
 1002e30:	1007883a 	mov	r3,r2
 1002e34:	00804074 	movhi	r2,257
 1002e38:	1082ca04 	addi	r2,r2,2856
 1002e3c:	1887883a 	add	r3,r3,r2
 1002e40:	e0ffff15 	stw	r3,-4(fp)
 1002e44:	00000106 	br	1002e4c <fstat+0x4c>
 1002e48:	e03fff15 	stw	zero,-4(fp)
 1002e4c:	e0bfff17 	ldw	r2,-4(fp)
 1002e50:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 1002e54:	e0bffb17 	ldw	r2,-20(fp)
 1002e58:	1005003a 	cmpeq	r2,r2,zero
 1002e5c:	1000121e 	bne	r2,zero,1002ea8 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 1002e60:	e0bffb17 	ldw	r2,-20(fp)
 1002e64:	10800017 	ldw	r2,0(r2)
 1002e68:	10800817 	ldw	r2,32(r2)
 1002e6c:	1005003a 	cmpeq	r2,r2,zero
 1002e70:	1000081e 	bne	r2,zero,1002e94 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
 1002e74:	e0bffb17 	ldw	r2,-20(fp)
 1002e78:	10800017 	ldw	r2,0(r2)
 1002e7c:	10800817 	ldw	r2,32(r2)
 1002e80:	e13ffb17 	ldw	r4,-20(fp)
 1002e84:	e17ffd17 	ldw	r5,-12(fp)
 1002e88:	103ee83a 	callr	r2
 1002e8c:	e0bffe15 	stw	r2,-8(fp)
 1002e90:	00000b06 	br	1002ec0 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 1002e94:	e0fffd17 	ldw	r3,-12(fp)
 1002e98:	00880004 	movi	r2,8192
 1002e9c:	18800115 	stw	r2,4(r3)
      return 0;
 1002ea0:	e03ffe15 	stw	zero,-8(fp)
 1002ea4:	00000606 	br	1002ec0 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1002ea8:	1002ed80 	call	1002ed8 <alt_get_errno>
 1002eac:	1007883a 	mov	r3,r2
 1002eb0:	00801444 	movi	r2,81
 1002eb4:	18800015 	stw	r2,0(r3)
    return -1;
 1002eb8:	00bfffc4 	movi	r2,-1
 1002ebc:	e0bffe15 	stw	r2,-8(fp)
 1002ec0:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 1002ec4:	e037883a 	mov	sp,fp
 1002ec8:	dfc00117 	ldw	ra,4(sp)
 1002ecc:	df000017 	ldw	fp,0(sp)
 1002ed0:	dec00204 	addi	sp,sp,8
 1002ed4:	f800283a 	ret

01002ed8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1002ed8:	defffd04 	addi	sp,sp,-12
 1002edc:	dfc00215 	stw	ra,8(sp)
 1002ee0:	df000115 	stw	fp,4(sp)
 1002ee4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1002ee8:	00804074 	movhi	r2,257
 1002eec:	10878804 	addi	r2,r2,7712
 1002ef0:	10800017 	ldw	r2,0(r2)
 1002ef4:	1005003a 	cmpeq	r2,r2,zero
 1002ef8:	1000061e 	bne	r2,zero,1002f14 <alt_get_errno+0x3c>
 1002efc:	00804074 	movhi	r2,257
 1002f00:	10878804 	addi	r2,r2,7712
 1002f04:	10800017 	ldw	r2,0(r2)
 1002f08:	103ee83a 	callr	r2
 1002f0c:	e0bfff15 	stw	r2,-4(fp)
 1002f10:	00000306 	br	1002f20 <alt_get_errno+0x48>
 1002f14:	00804074 	movhi	r2,257
 1002f18:	108ea104 	addi	r2,r2,14980
 1002f1c:	e0bfff15 	stw	r2,-4(fp)
 1002f20:	e0bfff17 	ldw	r2,-4(fp)
}
 1002f24:	e037883a 	mov	sp,fp
 1002f28:	dfc00117 	ldw	ra,4(sp)
 1002f2c:	df000017 	ldw	fp,0(sp)
 1002f30:	dec00204 	addi	sp,sp,8
 1002f34:	f800283a 	ret

01002f38 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 1002f38:	deffeb04 	addi	sp,sp,-84
 1002f3c:	dfc01415 	stw	ra,80(sp)
 1002f40:	df001315 	stw	fp,76(sp)
 1002f44:	df001304 	addi	fp,sp,76
 1002f48:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1002f4c:	e0bffd17 	ldw	r2,-12(fp)
 1002f50:	1004803a 	cmplt	r2,r2,zero
 1002f54:	1000091e 	bne	r2,zero,1002f7c <isatty+0x44>
 1002f58:	e13ffd17 	ldw	r4,-12(fp)
 1002f5c:	01400304 	movi	r5,12
 1002f60:	1002c3c0 	call	1002c3c <__mulsi3>
 1002f64:	1007883a 	mov	r3,r2
 1002f68:	00804074 	movhi	r2,257
 1002f6c:	1082ca04 	addi	r2,r2,2856
 1002f70:	1887883a 	add	r3,r3,r2
 1002f74:	e0ffff15 	stw	r3,-4(fp)
 1002f78:	00000106 	br	1002f80 <isatty+0x48>
 1002f7c:	e03fff15 	stw	zero,-4(fp)
 1002f80:	e0bfff17 	ldw	r2,-4(fp)
 1002f84:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 1002f88:	e0bfed17 	ldw	r2,-76(fp)
 1002f8c:	1005003a 	cmpeq	r2,r2,zero
 1002f90:	10000f1e 	bne	r2,zero,1002fd0 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 1002f94:	e0bfed17 	ldw	r2,-76(fp)
 1002f98:	10800017 	ldw	r2,0(r2)
 1002f9c:	10800817 	ldw	r2,32(r2)
 1002fa0:	1004c03a 	cmpne	r2,r2,zero
 1002fa4:	1000031e 	bne	r2,zero,1002fb4 <isatty+0x7c>
    {
      return 1;
 1002fa8:	00800044 	movi	r2,1
 1002fac:	e0bffe15 	stw	r2,-8(fp)
 1002fb0:	00000c06 	br	1002fe4 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 1002fb4:	e17fee04 	addi	r5,fp,-72
 1002fb8:	e13ffd17 	ldw	r4,-12(fp)
 1002fbc:	1002e000 	call	1002e00 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 1002fc0:	e0bfef17 	ldw	r2,-68(fp)
 1002fc4:	10880020 	cmpeqi	r2,r2,8192
 1002fc8:	e0bffe15 	stw	r2,-8(fp)
 1002fcc:	00000506 	br	1002fe4 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1002fd0:	1002ffc0 	call	1002ffc <alt_get_errno>
 1002fd4:	1007883a 	mov	r3,r2
 1002fd8:	00801444 	movi	r2,81
 1002fdc:	18800015 	stw	r2,0(r3)
    return 0;
 1002fe0:	e03ffe15 	stw	zero,-8(fp)
 1002fe4:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 1002fe8:	e037883a 	mov	sp,fp
 1002fec:	dfc00117 	ldw	ra,4(sp)
 1002ff0:	df000017 	ldw	fp,0(sp)
 1002ff4:	dec00204 	addi	sp,sp,8
 1002ff8:	f800283a 	ret

01002ffc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1002ffc:	defffd04 	addi	sp,sp,-12
 1003000:	dfc00215 	stw	ra,8(sp)
 1003004:	df000115 	stw	fp,4(sp)
 1003008:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100300c:	00804074 	movhi	r2,257
 1003010:	10878804 	addi	r2,r2,7712
 1003014:	10800017 	ldw	r2,0(r2)
 1003018:	1005003a 	cmpeq	r2,r2,zero
 100301c:	1000061e 	bne	r2,zero,1003038 <alt_get_errno+0x3c>
 1003020:	00804074 	movhi	r2,257
 1003024:	10878804 	addi	r2,r2,7712
 1003028:	10800017 	ldw	r2,0(r2)
 100302c:	103ee83a 	callr	r2
 1003030:	e0bfff15 	stw	r2,-4(fp)
 1003034:	00000306 	br	1003044 <alt_get_errno+0x48>
 1003038:	00804074 	movhi	r2,257
 100303c:	108ea104 	addi	r2,r2,14980
 1003040:	e0bfff15 	stw	r2,-4(fp)
 1003044:	e0bfff17 	ldw	r2,-4(fp)
}
 1003048:	e037883a 	mov	sp,fp
 100304c:	dfc00117 	ldw	ra,4(sp)
 1003050:	df000017 	ldw	fp,0(sp)
 1003054:	dec00204 	addi	sp,sp,8
 1003058:	f800283a 	ret

0100305c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 100305c:	defffe04 	addi	sp,sp,-8
 1003060:	dfc00115 	stw	ra,4(sp)
 1003064:	df000015 	stw	fp,0(sp)
 1003068:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 100306c:	01004074 	movhi	r4,257
 1003070:	2107ae04 	addi	r4,r4,7864
 1003074:	01404074 	movhi	r5,257
 1003078:	2940be04 	addi	r5,r5,760
 100307c:	01804074 	movhi	r6,257
 1003080:	3187ae04 	addi	r6,r6,7864
 1003084:	10030dc0 	call	10030dc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 1003088:	01004034 	movhi	r4,256
 100308c:	21000004 	addi	r4,r4,0
 1003090:	01400234 	movhi	r5,8
 1003094:	29400804 	addi	r5,r5,32
 1003098:	01800234 	movhi	r6,8
 100309c:	31807004 	addi	r6,r6,448
 10030a0:	10030dc0 	call	10030dc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 10030a4:	01004074 	movhi	r4,257
 10030a8:	213ff704 	addi	r4,r4,-36
 10030ac:	01404074 	movhi	r5,257
 10030b0:	297ff704 	addi	r5,r5,-36
 10030b4:	01804074 	movhi	r6,257
 10030b8:	3180be04 	addi	r6,r6,760
 10030bc:	10030dc0 	call	10030dc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 10030c0:	100d3980 	call	100d398 <alt_dcache_flush_all>
  alt_icache_flush_all();
 10030c4:	100d6240 	call	100d624 <alt_icache_flush_all>
}
 10030c8:	e037883a 	mov	sp,fp
 10030cc:	dfc00117 	ldw	ra,4(sp)
 10030d0:	df000017 	ldw	fp,0(sp)
 10030d4:	dec00204 	addi	sp,sp,8
 10030d8:	f800283a 	ret

010030dc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 10030dc:	defffc04 	addi	sp,sp,-16
 10030e0:	df000315 	stw	fp,12(sp)
 10030e4:	df000304 	addi	fp,sp,12
 10030e8:	e13ffd15 	stw	r4,-12(fp)
 10030ec:	e17ffe15 	stw	r5,-8(fp)
 10030f0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 10030f4:	e0fffe17 	ldw	r3,-8(fp)
 10030f8:	e0bffd17 	ldw	r2,-12(fp)
 10030fc:	18800e26 	beq	r3,r2,1003138 <alt_load_section+0x5c>
  {
    while( to != end )
 1003100:	00000a06 	br	100312c <alt_load_section+0x50>
    {
      *to++ = *from++;
 1003104:	e0bffd17 	ldw	r2,-12(fp)
 1003108:	10c00017 	ldw	r3,0(r2)
 100310c:	e0bffe17 	ldw	r2,-8(fp)
 1003110:	10c00015 	stw	r3,0(r2)
 1003114:	e0bffe17 	ldw	r2,-8(fp)
 1003118:	10800104 	addi	r2,r2,4
 100311c:	e0bffe15 	stw	r2,-8(fp)
 1003120:	e0bffd17 	ldw	r2,-12(fp)
 1003124:	10800104 	addi	r2,r2,4
 1003128:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 100312c:	e0fffe17 	ldw	r3,-8(fp)
 1003130:	e0bfff17 	ldw	r2,-4(fp)
 1003134:	18bff31e 	bne	r3,r2,1003104 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 1003138:	e037883a 	mov	sp,fp
 100313c:	df000017 	ldw	fp,0(sp)
 1003140:	dec00104 	addi	sp,sp,4
 1003144:	f800283a 	ret

01003148 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 1003148:	defff804 	addi	sp,sp,-32
 100314c:	dfc00715 	stw	ra,28(sp)
 1003150:	df000615 	stw	fp,24(sp)
 1003154:	df000604 	addi	fp,sp,24
 1003158:	e13ffc15 	stw	r4,-16(fp)
 100315c:	e17ffd15 	stw	r5,-12(fp)
 1003160:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 1003164:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1003168:	e0bffc17 	ldw	r2,-16(fp)
 100316c:	1004803a 	cmplt	r2,r2,zero
 1003170:	1000091e 	bne	r2,zero,1003198 <lseek+0x50>
 1003174:	e13ffc17 	ldw	r4,-16(fp)
 1003178:	01400304 	movi	r5,12
 100317c:	1002c3c0 	call	1002c3c <__mulsi3>
 1003180:	1007883a 	mov	r3,r2
 1003184:	00804074 	movhi	r2,257
 1003188:	1082ca04 	addi	r2,r2,2856
 100318c:	1887883a 	add	r3,r3,r2
 1003190:	e0ffff15 	stw	r3,-4(fp)
 1003194:	00000106 	br	100319c <lseek+0x54>
 1003198:	e03fff15 	stw	zero,-4(fp)
 100319c:	e0bfff17 	ldw	r2,-4(fp)
 10031a0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 10031a4:	e0bffb17 	ldw	r2,-20(fp)
 10031a8:	1005003a 	cmpeq	r2,r2,zero
 10031ac:	1000111e 	bne	r2,zero,10031f4 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 10031b0:	e0bffb17 	ldw	r2,-20(fp)
 10031b4:	10800017 	ldw	r2,0(r2)
 10031b8:	10800717 	ldw	r2,28(r2)
 10031bc:	1005003a 	cmpeq	r2,r2,zero
 10031c0:	1000091e 	bne	r2,zero,10031e8 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 10031c4:	e0bffb17 	ldw	r2,-20(fp)
 10031c8:	10800017 	ldw	r2,0(r2)
 10031cc:	10800717 	ldw	r2,28(r2)
 10031d0:	e13ffb17 	ldw	r4,-20(fp)
 10031d4:	e17ffd17 	ldw	r5,-12(fp)
 10031d8:	e1bffe17 	ldw	r6,-8(fp)
 10031dc:	103ee83a 	callr	r2
 10031e0:	e0bffa15 	stw	r2,-24(fp)
 10031e4:	00000506 	br	10031fc <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 10031e8:	00bfde84 	movi	r2,-134
 10031ec:	e0bffa15 	stw	r2,-24(fp)
 10031f0:	00000206 	br	10031fc <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
 10031f4:	00bfebc4 	movi	r2,-81
 10031f8:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 10031fc:	e0bffa17 	ldw	r2,-24(fp)
 1003200:	1004403a 	cmpge	r2,r2,zero
 1003204:	1000071e 	bne	r2,zero,1003224 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
 1003208:	100323c0 	call	100323c <alt_get_errno>
 100320c:	1007883a 	mov	r3,r2
 1003210:	e0bffa17 	ldw	r2,-24(fp)
 1003214:	0085c83a 	sub	r2,zero,r2
 1003218:	18800015 	stw	r2,0(r3)
    rc = -1;
 100321c:	00bfffc4 	movi	r2,-1
 1003220:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 1003224:	e0bffa17 	ldw	r2,-24(fp)
}
 1003228:	e037883a 	mov	sp,fp
 100322c:	dfc00117 	ldw	ra,4(sp)
 1003230:	df000017 	ldw	fp,0(sp)
 1003234:	dec00204 	addi	sp,sp,8
 1003238:	f800283a 	ret

0100323c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100323c:	defffd04 	addi	sp,sp,-12
 1003240:	dfc00215 	stw	ra,8(sp)
 1003244:	df000115 	stw	fp,4(sp)
 1003248:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100324c:	00804074 	movhi	r2,257
 1003250:	10878804 	addi	r2,r2,7712
 1003254:	10800017 	ldw	r2,0(r2)
 1003258:	1005003a 	cmpeq	r2,r2,zero
 100325c:	1000061e 	bne	r2,zero,1003278 <alt_get_errno+0x3c>
 1003260:	00804074 	movhi	r2,257
 1003264:	10878804 	addi	r2,r2,7712
 1003268:	10800017 	ldw	r2,0(r2)
 100326c:	103ee83a 	callr	r2
 1003270:	e0bfff15 	stw	r2,-4(fp)
 1003274:	00000306 	br	1003284 <alt_get_errno+0x48>
 1003278:	00804074 	movhi	r2,257
 100327c:	108ea104 	addi	r2,r2,14980
 1003280:	e0bfff15 	stw	r2,-4(fp)
 1003284:	e0bfff17 	ldw	r2,-4(fp)
}
 1003288:	e037883a 	mov	sp,fp
 100328c:	dfc00117 	ldw	ra,4(sp)
 1003290:	df000017 	ldw	fp,0(sp)
 1003294:	dec00204 	addi	sp,sp,8
 1003298:	f800283a 	ret

0100329c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 100329c:	defffb04 	addi	sp,sp,-20
 10032a0:	dfc00415 	stw	ra,16(sp)
 10032a4:	df000315 	stw	fp,12(sp)
 10032a8:	df000304 	addi	fp,sp,12
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 10032ac:	0009883a 	mov	r4,zero
 10032b0:	100be340 	call	100be34 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 10032b4:	10043a80 	call	10043a8 <OSInit>
 10032b8:	01000044 	movi	r4,1
 10032bc:	10092700 	call	1009270 <OSSemCreate>
 10032c0:	1007883a 	mov	r3,r2
 10032c4:	00804074 	movhi	r2,257
 10032c8:	108ea704 	addi	r2,r2,15004
 10032cc:	10c00015 	stw	r3,0(r2)
 10032d0:	01000044 	movi	r4,1
 10032d4:	10092700 	call	1009270 <OSSemCreate>
 10032d8:	1007883a 	mov	r3,r2
 10032dc:	00804074 	movhi	r2,257
 10032e0:	108ea904 	addi	r2,r2,15012
 10032e4:	10c00015 	stw	r3,0(r2)
 10032e8:	00804074 	movhi	r2,257
 10032ec:	108ea204 	addi	r2,r2,14984
 10032f0:	e0bffd15 	stw	r2,-12(fp)
 10032f4:	00800044 	movi	r2,1
 10032f8:	e0bffe0d 	sth	r2,-8(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
 10032fc:	e13ffe0b 	ldhu	r4,-8(fp)
 1003300:	10092700 	call	1009270 <OSSemCreate>
 1003304:	1007883a 	mov	r3,r2
 1003308:	e0bffd17 	ldw	r2,-12(fp)
 100330c:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 1003310:	100be680 	call	100be68 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 1003314:	01004074 	movhi	r4,257
 1003318:	21000604 	addi	r4,r4,24
 100331c:	01404074 	movhi	r5,257
 1003320:	29400604 	addi	r5,r5,24
 1003324:	01804074 	movhi	r6,257
 1003328:	31800604 	addi	r6,r6,24
 100332c:	100d7180 	call	100d718 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 1003330:	100d4c80 	call	100d4c8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 1003334:	01004074 	movhi	r4,257
 1003338:	21354b04 	addi	r4,r4,-10964
 100333c:	100e5080 	call	100e508 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 1003340:	d1272417 	ldw	r4,-25456(gp)
 1003344:	d1672517 	ldw	r5,-25452(gp)
 1003348:	d1a72617 	ldw	r6,-25448(gp)
 100334c:	100024c0 	call	100024c <main>
 1003350:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 1003354:	01000044 	movi	r4,1
 1003358:	1002c740 	call	1002c74 <close>
  exit (result);
 100335c:	e13fff17 	ldw	r4,-4(fp)
 1003360:	100e51c0 	call	100e51c <exit>

01003364 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 1003364:	defff704 	addi	sp,sp,-36
 1003368:	dfc00815 	stw	ra,32(sp)
 100336c:	df000715 	stw	fp,28(sp)
 1003370:	df000704 	addi	fp,sp,28
 1003374:	e13ffb15 	stw	r4,-20(fp)
 1003378:	e17ffc15 	stw	r5,-16(fp)
 100337c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1003380:	e0bffb17 	ldw	r2,-20(fp)
 1003384:	1004803a 	cmplt	r2,r2,zero
 1003388:	1000091e 	bne	r2,zero,10033b0 <read+0x4c>
 100338c:	e13ffb17 	ldw	r4,-20(fp)
 1003390:	01400304 	movi	r5,12
 1003394:	1002c3c0 	call	1002c3c <__mulsi3>
 1003398:	1007883a 	mov	r3,r2
 100339c:	00804074 	movhi	r2,257
 10033a0:	1082ca04 	addi	r2,r2,2856
 10033a4:	1887883a 	add	r3,r3,r2
 10033a8:	e0ffff15 	stw	r3,-4(fp)
 10033ac:	00000106 	br	10033b4 <read+0x50>
 10033b0:	e03fff15 	stw	zero,-4(fp)
 10033b4:	e0bfff17 	ldw	r2,-4(fp)
 10033b8:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 10033bc:	e0bffa17 	ldw	r2,-24(fp)
 10033c0:	1005003a 	cmpeq	r2,r2,zero
 10033c4:	1000241e 	bne	r2,zero,1003458 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 10033c8:	e0bffa17 	ldw	r2,-24(fp)
 10033cc:	10800217 	ldw	r2,8(r2)
 10033d0:	108000cc 	andi	r2,r2,3
 10033d4:	10800060 	cmpeqi	r2,r2,1
 10033d8:	10001a1e 	bne	r2,zero,1003444 <read+0xe0>
 10033dc:	e0bffa17 	ldw	r2,-24(fp)
 10033e0:	10800017 	ldw	r2,0(r2)
 10033e4:	10800517 	ldw	r2,20(r2)
 10033e8:	1005003a 	cmpeq	r2,r2,zero
 10033ec:	1000151e 	bne	r2,zero,1003444 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 10033f0:	e0bffa17 	ldw	r2,-24(fp)
 10033f4:	10800017 	ldw	r2,0(r2)
 10033f8:	10800517 	ldw	r2,20(r2)
 10033fc:	e17ffc17 	ldw	r5,-16(fp)
 1003400:	e1bffd17 	ldw	r6,-12(fp)
 1003404:	e13ffa17 	ldw	r4,-24(fp)
 1003408:	103ee83a 	callr	r2
 100340c:	e0bff915 	stw	r2,-28(fp)
 1003410:	e0bff917 	ldw	r2,-28(fp)
 1003414:	1004403a 	cmpge	r2,r2,zero
 1003418:	1000071e 	bne	r2,zero,1003438 <read+0xd4>
        {
          ALT_ERRNO = -rval;
 100341c:	10034880 	call	1003488 <alt_get_errno>
 1003420:	e0fff917 	ldw	r3,-28(fp)
 1003424:	00c7c83a 	sub	r3,zero,r3
 1003428:	10c00015 	stw	r3,0(r2)
          return -1;
 100342c:	00bfffc4 	movi	r2,-1
 1003430:	e0bffe15 	stw	r2,-8(fp)
 1003434:	00000e06 	br	1003470 <read+0x10c>
        }
        return rval;
 1003438:	e0bff917 	ldw	r2,-28(fp)
 100343c:	e0bffe15 	stw	r2,-8(fp)
 1003440:	00000b06 	br	1003470 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
 1003444:	10034880 	call	1003488 <alt_get_errno>
 1003448:	1007883a 	mov	r3,r2
 100344c:	00800344 	movi	r2,13
 1003450:	18800015 	stw	r2,0(r3)
 1003454:	00000406 	br	1003468 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 1003458:	10034880 	call	1003488 <alt_get_errno>
 100345c:	1007883a 	mov	r3,r2
 1003460:	00801444 	movi	r2,81
 1003464:	18800015 	stw	r2,0(r3)
  }
  return -1;
 1003468:	00bfffc4 	movi	r2,-1
 100346c:	e0bffe15 	stw	r2,-8(fp)
 1003470:	e0bffe17 	ldw	r2,-8(fp)
}
 1003474:	e037883a 	mov	sp,fp
 1003478:	dfc00117 	ldw	ra,4(sp)
 100347c:	df000017 	ldw	fp,0(sp)
 1003480:	dec00204 	addi	sp,sp,8
 1003484:	f800283a 	ret

01003488 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1003488:	defffd04 	addi	sp,sp,-12
 100348c:	dfc00215 	stw	ra,8(sp)
 1003490:	df000115 	stw	fp,4(sp)
 1003494:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1003498:	00804074 	movhi	r2,257
 100349c:	10878804 	addi	r2,r2,7712
 10034a0:	10800017 	ldw	r2,0(r2)
 10034a4:	1005003a 	cmpeq	r2,r2,zero
 10034a8:	1000061e 	bne	r2,zero,10034c4 <alt_get_errno+0x3c>
 10034ac:	00804074 	movhi	r2,257
 10034b0:	10878804 	addi	r2,r2,7712
 10034b4:	10800017 	ldw	r2,0(r2)
 10034b8:	103ee83a 	callr	r2
 10034bc:	e0bfff15 	stw	r2,-4(fp)
 10034c0:	00000306 	br	10034d0 <alt_get_errno+0x48>
 10034c4:	00804074 	movhi	r2,257
 10034c8:	108ea104 	addi	r2,r2,14980
 10034cc:	e0bfff15 	stw	r2,-4(fp)
 10034d0:	e0bfff17 	ldw	r2,-4(fp)
}
 10034d4:	e037883a 	mov	sp,fp
 10034d8:	dfc00117 	ldw	ra,4(sp)
 10034dc:	df000017 	ldw	fp,0(sp)
 10034e0:	dec00204 	addi	sp,sp,8
 10034e4:	f800283a 	ret

010034e8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 10034e8:	defffc04 	addi	sp,sp,-16
 10034ec:	dfc00315 	stw	ra,12(sp)
 10034f0:	df000215 	stw	fp,8(sp)
 10034f4:	dc000115 	stw	r16,4(sp)
 10034f8:	df000104 	addi	fp,sp,4
 10034fc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 1003500:	e0bfff17 	ldw	r2,-4(fp)
 1003504:	108000d0 	cmplti	r2,r2,3
 1003508:	10000f1e 	bne	r2,zero,1003548 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
 100350c:	e13fff17 	ldw	r4,-4(fp)
 1003510:	04004074 	movhi	r16,257
 1003514:	8402ca04 	addi	r16,r16,2856
 1003518:	01400304 	movi	r5,12
 100351c:	1002c3c0 	call	1002c3c <__mulsi3>
 1003520:	1405883a 	add	r2,r2,r16
 1003524:	10800204 	addi	r2,r2,8
 1003528:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 100352c:	e13fff17 	ldw	r4,-4(fp)
 1003530:	04004074 	movhi	r16,257
 1003534:	8402ca04 	addi	r16,r16,2856
 1003538:	01400304 	movi	r5,12
 100353c:	1002c3c0 	call	1002c3c <__mulsi3>
 1003540:	1405883a 	add	r2,r2,r16
 1003544:	10000015 	stw	zero,0(r2)
  }
}
 1003548:	e037883a 	mov	sp,fp
 100354c:	dfc00217 	ldw	ra,8(sp)
 1003550:	df000117 	ldw	fp,4(sp)
 1003554:	dc000017 	ldw	r16,0(sp)
 1003558:	dec00304 	addi	sp,sp,12
 100355c:	f800283a 	ret

01003560 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 1003560:	defff804 	addi	sp,sp,-32
 1003564:	df000715 	stw	fp,28(sp)
 1003568:	df000704 	addi	fp,sp,28
 100356c:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1003570:	0005303a 	rdctl	r2,status
 1003574:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1003578:	e0fffb17 	ldw	r3,-20(fp)
 100357c:	00bfff84 	movi	r2,-2
 1003580:	1884703a 	and	r2,r3,r2
 1003584:	1001703a 	wrctl	status,r2
  
  return context;
 1003588:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 100358c:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 1003590:	d0a00a17 	ldw	r2,-32728(gp)
 1003594:	10c000c4 	addi	r3,r2,3
 1003598:	00bfff04 	movi	r2,-4
 100359c:	1884703a 	and	r2,r3,r2
 10035a0:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 10035a4:	d0e00a17 	ldw	r3,-32728(gp)
 10035a8:	e0bffe17 	ldw	r2,-8(fp)
 10035ac:	1887883a 	add	r3,r3,r2
 10035b0:	00806034 	movhi	r2,384
 10035b4:	10800004 	addi	r2,r2,0
 10035b8:	10c0072e 	bgeu	r2,r3,10035d8 <sbrk+0x78>
 10035bc:	e0bffd17 	ldw	r2,-12(fp)
 10035c0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10035c4:	e0bffa17 	ldw	r2,-24(fp)
 10035c8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 10035cc:	00bfffc4 	movi	r2,-1
 10035d0:	e0bfff15 	stw	r2,-4(fp)
 10035d4:	00000c06 	br	1003608 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 10035d8:	d0a00a17 	ldw	r2,-32728(gp)
 10035dc:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 10035e0:	d0e00a17 	ldw	r3,-32728(gp)
 10035e4:	e0bffe17 	ldw	r2,-8(fp)
 10035e8:	1885883a 	add	r2,r3,r2
 10035ec:	d0a00a15 	stw	r2,-32728(gp)
 10035f0:	e0bffd17 	ldw	r2,-12(fp)
 10035f4:	e0bff915 	stw	r2,-28(fp)
 10035f8:	e0bff917 	ldw	r2,-28(fp)
 10035fc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 1003600:	e0bffc17 	ldw	r2,-16(fp)
 1003604:	e0bfff15 	stw	r2,-4(fp)
 1003608:	e0bfff17 	ldw	r2,-4(fp)
} 
 100360c:	e037883a 	mov	sp,fp
 1003610:	df000017 	ldw	fp,0(sp)
 1003614:	dec00104 	addi	sp,sp,4
 1003618:	f800283a 	ret

0100361c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 100361c:	defff704 	addi	sp,sp,-36
 1003620:	dfc00815 	stw	ra,32(sp)
 1003624:	df000715 	stw	fp,28(sp)
 1003628:	df000704 	addi	fp,sp,28
 100362c:	e13ffb15 	stw	r4,-20(fp)
 1003630:	e17ffc15 	stw	r5,-16(fp)
 1003634:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1003638:	e0bffb17 	ldw	r2,-20(fp)
 100363c:	1004803a 	cmplt	r2,r2,zero
 1003640:	1000091e 	bne	r2,zero,1003668 <write+0x4c>
 1003644:	e13ffb17 	ldw	r4,-20(fp)
 1003648:	01400304 	movi	r5,12
 100364c:	1002c3c0 	call	1002c3c <__mulsi3>
 1003650:	1007883a 	mov	r3,r2
 1003654:	00804074 	movhi	r2,257
 1003658:	1082ca04 	addi	r2,r2,2856
 100365c:	1887883a 	add	r3,r3,r2
 1003660:	e0ffff15 	stw	r3,-4(fp)
 1003664:	00000106 	br	100366c <write+0x50>
 1003668:	e03fff15 	stw	zero,-4(fp)
 100366c:	e0bfff17 	ldw	r2,-4(fp)
 1003670:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 1003674:	e0bffa17 	ldw	r2,-24(fp)
 1003678:	1005003a 	cmpeq	r2,r2,zero
 100367c:	1000241e 	bne	r2,zero,1003710 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 1003680:	e0bffa17 	ldw	r2,-24(fp)
 1003684:	10800217 	ldw	r2,8(r2)
 1003688:	108000cc 	andi	r2,r2,3
 100368c:	1005003a 	cmpeq	r2,r2,zero
 1003690:	10001a1e 	bne	r2,zero,10036fc <write+0xe0>
 1003694:	e0bffa17 	ldw	r2,-24(fp)
 1003698:	10800017 	ldw	r2,0(r2)
 100369c:	10800617 	ldw	r2,24(r2)
 10036a0:	1005003a 	cmpeq	r2,r2,zero
 10036a4:	1000151e 	bne	r2,zero,10036fc <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 10036a8:	e0bffa17 	ldw	r2,-24(fp)
 10036ac:	10800017 	ldw	r2,0(r2)
 10036b0:	10800617 	ldw	r2,24(r2)
 10036b4:	e17ffc17 	ldw	r5,-16(fp)
 10036b8:	e1bffd17 	ldw	r6,-12(fp)
 10036bc:	e13ffa17 	ldw	r4,-24(fp)
 10036c0:	103ee83a 	callr	r2
 10036c4:	e0bff915 	stw	r2,-28(fp)
 10036c8:	e0bff917 	ldw	r2,-28(fp)
 10036cc:	1004403a 	cmpge	r2,r2,zero
 10036d0:	1000071e 	bne	r2,zero,10036f0 <write+0xd4>
      {
        ALT_ERRNO = -rval;
 10036d4:	10037400 	call	1003740 <alt_get_errno>
 10036d8:	e0fff917 	ldw	r3,-28(fp)
 10036dc:	00c7c83a 	sub	r3,zero,r3
 10036e0:	10c00015 	stw	r3,0(r2)
        return -1;
 10036e4:	00bfffc4 	movi	r2,-1
 10036e8:	e0bffe15 	stw	r2,-8(fp)
 10036ec:	00000e06 	br	1003728 <write+0x10c>
      }
      return rval;
 10036f0:	e0bff917 	ldw	r2,-28(fp)
 10036f4:	e0bffe15 	stw	r2,-8(fp)
 10036f8:	00000b06 	br	1003728 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
 10036fc:	10037400 	call	1003740 <alt_get_errno>
 1003700:	1007883a 	mov	r3,r2
 1003704:	00800344 	movi	r2,13
 1003708:	18800015 	stw	r2,0(r3)
 100370c:	00000406 	br	1003720 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 1003710:	10037400 	call	1003740 <alt_get_errno>
 1003714:	1007883a 	mov	r3,r2
 1003718:	00801444 	movi	r2,81
 100371c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 1003720:	00bfffc4 	movi	r2,-1
 1003724:	e0bffe15 	stw	r2,-8(fp)
 1003728:	e0bffe17 	ldw	r2,-8(fp)
}
 100372c:	e037883a 	mov	sp,fp
 1003730:	dfc00117 	ldw	ra,4(sp)
 1003734:	df000017 	ldw	fp,0(sp)
 1003738:	dec00204 	addi	sp,sp,8
 100373c:	f800283a 	ret

01003740 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1003740:	defffd04 	addi	sp,sp,-12
 1003744:	dfc00215 	stw	ra,8(sp)
 1003748:	df000115 	stw	fp,4(sp)
 100374c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1003750:	00804074 	movhi	r2,257
 1003754:	10878804 	addi	r2,r2,7712
 1003758:	10800017 	ldw	r2,0(r2)
 100375c:	1005003a 	cmpeq	r2,r2,zero
 1003760:	1000061e 	bne	r2,zero,100377c <alt_get_errno+0x3c>
 1003764:	00804074 	movhi	r2,257
 1003768:	10878804 	addi	r2,r2,7712
 100376c:	10800017 	ldw	r2,0(r2)
 1003770:	103ee83a 	callr	r2
 1003774:	e0bfff15 	stw	r2,-4(fp)
 1003778:	00000306 	br	1003788 <alt_get_errno+0x48>
 100377c:	00804074 	movhi	r2,257
 1003780:	108ea104 	addi	r2,r2,14980
 1003784:	e0bfff15 	stw	r2,-4(fp)
 1003788:	e0bfff17 	ldw	r2,-4(fp)
}
 100378c:	e037883a 	mov	sp,fp
 1003790:	dfc00117 	ldw	ra,4(sp)
 1003794:	df000017 	ldw	fp,0(sp)
 1003798:	dec00204 	addi	sp,sp,8
 100379c:	f800283a 	ret

010037a0 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
 10037a0:	deffdf04 	addi	sp,sp,-132
 10037a4:	dfc02015 	stw	ra,128(sp)
 10037a8:	df001f15 	stw	fp,124(sp)
 10037ac:	df001f04 	addi	fp,sp,124
 10037b0:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 10037b4:	e17fe204 	addi	r5,fp,-120
 10037b8:	01003fc4 	movi	r4,255
 10037bc:	100b5f80 	call	100b5f8 <OSTaskQuery>
 10037c0:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 10037c4:	e0bffe83 	ldbu	r2,-6(fp)
 10037c8:	10803fcc 	andi	r2,r2,255
 10037cc:	1004c03a 	cmpne	r2,r2,zero
 10037d0:	1000191e 	bne	r2,zero,1003838 <__env_lock+0x98>
    return;

  id = tcb.OSTCBPrio;
 10037d4:	e0bfee83 	ldbu	r2,-70(fp)
 10037d8:	10803fcc 	andi	r2,r2,255
 10037dc:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
 10037e0:	d1272817 	ldw	r4,-25440(gp)
 10037e4:	e17ffd04 	addi	r5,fp,-12
 10037e8:	1009b440 	call	1009b44 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
 10037ec:	e0bffe43 	ldbu	r2,-7(fp)
 10037f0:	10803fcc 	andi	r2,r2,255
 10037f4:	1005003a 	cmpeq	r2,r2,zero
 10037f8:	1000071e 	bne	r2,zero,1003818 <__env_lock+0x78>
 10037fc:	d0e00b17 	ldw	r3,-32724(gp)
 1003800:	e0bfe117 	ldw	r2,-124(fp)
 1003804:	10c0041e 	bne	r2,r3,1003818 <__env_lock+0x78>
  {
    /* we do; just count the recursion */

    locks++;
 1003808:	d0a72717 	ldw	r2,-25444(gp)
 100380c:	10800044 	addi	r2,r2,1
 1003810:	d0a72715 	stw	r2,-25444(gp)
  id = tcb.OSTCBPrio;
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  if( semdata.OSEventGrp && id == lockid ) 
 1003814:	00000806 	br	1003838 <__env_lock+0x98>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
 1003818:	d1272817 	ldw	r4,-25440(gp)
 100381c:	e1bffe84 	addi	r6,fp,-6
 1003820:	000b883a 	mov	r5,zero
 1003824:	10096240 	call	1009624 <OSSemPend>
    locks  = 1;
 1003828:	00800044 	movi	r2,1
 100382c:	d0a72715 	stw	r2,-25444(gp)
    lockid = id;
 1003830:	e0bfe117 	ldw	r2,-124(fp)
 1003834:	d0a00b15 	stw	r2,-32724(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 1003838:	e037883a 	mov	sp,fp
 100383c:	dfc00117 	ldw	ra,4(sp)
 1003840:	df000017 	ldw	fp,0(sp)
 1003844:	dec00204 	addi	sp,sp,8
 1003848:	f800283a 	ret

0100384c <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
 100384c:	defffd04 	addi	sp,sp,-12
 1003850:	dfc00215 	stw	ra,8(sp)
 1003854:	df000115 	stw	fp,4(sp)
 1003858:	df000104 	addi	fp,sp,4
 100385c:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
 1003860:	d0a72717 	ldw	r2,-25444(gp)
 1003864:	1005003a 	cmpeq	r2,r2,zero
 1003868:	10000a1e 	bne	r2,zero,1003894 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
 100386c:	d0a72717 	ldw	r2,-25444(gp)
 1003870:	10bfffc4 	addi	r2,r2,-1
 1003874:	d0a72715 	stw	r2,-25444(gp)
 1003878:	d0a72717 	ldw	r2,-25444(gp)
 100387c:	1004c03a 	cmpne	r2,r2,zero
 1003880:	1000041e 	bne	r2,zero,1003894 <__env_unlock+0x48>
  {
    lockid = -1;
 1003884:	00bfffc4 	movi	r2,-1
 1003888:	d0a00b15 	stw	r2,-32724(gp)
    OSSemPost( alt_envsem );
 100388c:	d1272817 	ldw	r4,-25440(gp)
 1003890:	1009a1c0 	call	1009a1c <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 1003894:	e037883a 	mov	sp,fp
 1003898:	dfc00117 	ldw	ra,4(sp)
 100389c:	df000017 	ldw	fp,0(sp)
 10038a0:	dec00204 	addi	sp,sp,8
 10038a4:	f800283a 	ret

010038a8 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
 10038a8:	deffdb04 	addi	sp,sp,-148
 10038ac:	dfc02415 	stw	ra,144(sp)
 10038b0:	df002315 	stw	fp,140(sp)
 10038b4:	df002304 	addi	fp,sp,140
 10038b8:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 10038bc:	e03fe015 	stw	zero,-128(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
 10038c0:	00804074 	movhi	r2,257
 10038c4:	108eaa44 	addi	r2,r2,15017
 10038c8:	10800003 	ldbu	r2,0(r2)
 10038cc:	10803fcc 	andi	r2,r2,255
 10038d0:	10800058 	cmpnei	r2,r2,1
 10038d4:	1000311e 	bne	r2,zero,100399c <__malloc_lock+0xf4>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 10038d8:	e17fe204 	addi	r5,fp,-120
 10038dc:	01003fc4 	movi	r4,255
 10038e0:	100b5f80 	call	100b5f8 <OSTaskQuery>
 10038e4:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 10038e8:	e0bffe83 	ldbu	r2,-6(fp)
 10038ec:	10803fcc 	andi	r2,r2,255
 10038f0:	1004c03a 	cmpne	r2,r2,zero
 10038f4:	1000291e 	bne	r2,zero,100399c <__malloc_lock+0xf4>
    return;

  id = tcb.OSTCBPrio;
 10038f8:	e0bfee83 	ldbu	r2,-70(fp)
 10038fc:	10803fcc 	andi	r2,r2,255
 1003900:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
 1003904:	d1272a17 	ldw	r4,-25432(gp)
 1003908:	e17ffd04 	addi	r5,fp,-12
 100390c:	1009b440 	call	1009b44 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1003910:	0005303a 	rdctl	r2,status
 1003914:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1003918:	e0ffdf17 	ldw	r3,-132(fp)
 100391c:	00bfff84 	movi	r2,-2
 1003920:	1884703a 	and	r2,r3,r2
 1003924:	1001703a 	wrctl	status,r2
  
  return context;
 1003928:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
 100392c:	e0bfe015 	stw	r2,-128(fp)

  if( !semdata.OSCnt && id == lockid ) 
 1003930:	e0bffd0b 	ldhu	r2,-12(fp)
 1003934:	10bfffcc 	andi	r2,r2,65535
 1003938:	1004c03a 	cmpne	r2,r2,zero
 100393c:	10000b1e 	bne	r2,zero,100396c <__malloc_lock+0xc4>
 1003940:	d0e00c17 	ldw	r3,-32720(gp)
 1003944:	e0bfe117 	ldw	r2,-124(fp)
 1003948:	10c0081e 	bne	r2,r3,100396c <__malloc_lock+0xc4>
  {
    /* we do; just count the recursion */
    locks++;
 100394c:	d0a72917 	ldw	r2,-25436(gp)
 1003950:	10800044 	addi	r2,r2,1
 1003954:	d0a72915 	stw	r2,-25436(gp)
 1003958:	e0bfe017 	ldw	r2,-128(fp)
 100395c:	e0bfde15 	stw	r2,-136(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1003960:	e0bfde17 	ldw	r2,-136(fp)
 1003964:	1001703a 	wrctl	status,r2

  OSSemQuery( alt_heapsem, &semdata );
  
  OS_ENTER_CRITICAL();

  if( !semdata.OSCnt && id == lockid ) 
 1003968:	00000c06 	br	100399c <__malloc_lock+0xf4>
 100396c:	e0bfe017 	ldw	r2,-128(fp)
 1003970:	e0bfdd15 	stw	r2,-140(fp)
 1003974:	e0bfdd17 	ldw	r2,-140(fp)
 1003978:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
 100397c:	d1272a17 	ldw	r4,-25432(gp)
 1003980:	e1bffe84 	addi	r6,fp,-6
 1003984:	000b883a 	mov	r5,zero
 1003988:	10096240 	call	1009624 <OSSemPend>
    locks  = 1;
 100398c:	00800044 	movi	r2,1
 1003990:	d0a72915 	stw	r2,-25436(gp)
    lockid = id;
 1003994:	e0bfe117 	ldw	r2,-124(fp)
 1003998:	d0a00c15 	stw	r2,-32720(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 100399c:	e037883a 	mov	sp,fp
 10039a0:	dfc00117 	ldw	ra,4(sp)
 10039a4:	df000017 	ldw	fp,0(sp)
 10039a8:	dec00204 	addi	sp,sp,8
 10039ac:	f800283a 	ret

010039b0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 10039b0:	defff804 	addi	sp,sp,-32
 10039b4:	dfc00715 	stw	ra,28(sp)
 10039b8:	df000615 	stw	fp,24(sp)
 10039bc:	df000604 	addi	fp,sp,24
 10039c0:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 10039c4:	e03ffe15 	stw	zero,-8(fp)
#endif 

  if (OSRunning != OS_TRUE)
 10039c8:	00804074 	movhi	r2,257
 10039cc:	108eaa44 	addi	r2,r2,15017
 10039d0:	10800003 	ldbu	r2,0(r2)
 10039d4:	10803fcc 	andi	r2,r2,255
 10039d8:	10800058 	cmpnei	r2,r2,1
 10039dc:	1000231e 	bne	r2,zero,1003a6c <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10039e0:	0005303a 	rdctl	r2,status
 10039e4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10039e8:	e0fffd17 	ldw	r3,-12(fp)
 10039ec:	00bfff84 	movi	r2,-2
 10039f0:	1884703a 	and	r2,r3,r2
 10039f4:	1001703a 	wrctl	status,r2
  
  return context;
 10039f8:	e0bffd17 	ldw	r2,-12(fp)
      return;

  OS_ENTER_CRITICAL();
 10039fc:	e0bffe15 	stw	r2,-8(fp)
  if (locks == 0)
 1003a00:	d0a72917 	ldw	r2,-25436(gp)
 1003a04:	1004c03a 	cmpne	r2,r2,zero
 1003a08:	1000051e 	bne	r2,zero,1003a20 <__malloc_unlock+0x70>
 1003a0c:	e0bffe17 	ldw	r2,-8(fp)
 1003a10:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1003a14:	e0bffc17 	ldw	r2,-16(fp)
 1003a18:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
 1003a1c:	00001306 	br	1003a6c <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
 1003a20:	d0a72917 	ldw	r2,-25436(gp)
 1003a24:	10bfffc4 	addi	r2,r2,-1
 1003a28:	d0a72915 	stw	r2,-25436(gp)
 1003a2c:	d0a72917 	ldw	r2,-25436(gp)
 1003a30:	1004c03a 	cmpne	r2,r2,zero
 1003a34:	1000091e 	bne	r2,zero,1003a5c <__malloc_unlock+0xac>
  {
    lockid = -1;
 1003a38:	00bfffc4 	movi	r2,-1
 1003a3c:	d0a00c15 	stw	r2,-32720(gp)
 1003a40:	e0bffe17 	ldw	r2,-8(fp)
 1003a44:	e0bffb15 	stw	r2,-20(fp)
 1003a48:	e0bffb17 	ldw	r2,-20(fp)
 1003a4c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
 1003a50:	d1272a17 	ldw	r4,-25432(gp)
 1003a54:	1009a1c0 	call	1009a1c <OSSemPost>
 1003a58:	00000406 	br	1003a6c <__malloc_unlock+0xbc>
 1003a5c:	e0bffe17 	ldw	r2,-8(fp)
 1003a60:	e0bffa15 	stw	r2,-24(fp)
 1003a64:	e0bffa17 	ldw	r2,-24(fp)
 1003a68:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 1003a6c:	e037883a 	mov	sp,fp
 1003a70:	dfc00117 	ldw	ra,4(sp)
 1003a74:	df000017 	ldw	fp,0(sp)
 1003a78:	dec00204 	addi	sp,sp,8
 1003a7c:	f800283a 	ret

01003a80 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 1003a80:	defff604 	addi	sp,sp,-40
 1003a84:	dfc00915 	stw	ra,36(sp)
 1003a88:	df000815 	stw	fp,32(sp)
 1003a8c:	df000804 	addi	fp,sp,32
 1003a90:	e13ffc15 	stw	r4,-16(fp)
 1003a94:	e17ffd15 	stw	r5,-12(fp)
 1003a98:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1003a9c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 1003aa0:	e0bffe17 	ldw	r2,-8(fp)
 1003aa4:	1004c03a 	cmpne	r2,r2,zero
 1003aa8:	1000021e 	bne	r2,zero,1003ab4 <OSEventNameGet+0x34>
        return (0);
 1003aac:	e03fff15 	stw	zero,-4(fp)
 1003ab0:	00003906 	br	1003b98 <OSEventNameGet+0x118>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 1003ab4:	e0bffc17 	ldw	r2,-16(fp)
 1003ab8:	1004c03a 	cmpne	r2,r2,zero
 1003abc:	1000051e 	bne	r2,zero,1003ad4 <OSEventNameGet+0x54>
        *perr = OS_ERR_PEVENT_NULL;
 1003ac0:	e0fffe17 	ldw	r3,-8(fp)
 1003ac4:	00800104 	movi	r2,4
 1003ac8:	18800005 	stb	r2,0(r3)
        return (0);
 1003acc:	e03fff15 	stw	zero,-4(fp)
 1003ad0:	00003106 	br	1003b98 <OSEventNameGet+0x118>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 1003ad4:	e0bffd17 	ldw	r2,-12(fp)
 1003ad8:	1004c03a 	cmpne	r2,r2,zero
 1003adc:	1000051e 	bne	r2,zero,1003af4 <OSEventNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
 1003ae0:	e0fffe17 	ldw	r3,-8(fp)
 1003ae4:	00800304 	movi	r2,12
 1003ae8:	18800005 	stb	r2,0(r3)
        return (0);
 1003aec:	e03fff15 	stw	zero,-4(fp)
 1003af0:	00002906 	br	1003b98 <OSEventNameGet+0x118>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 1003af4:	d0a73903 	ldbu	r2,-25372(gp)
 1003af8:	10803fcc 	andi	r2,r2,255
 1003afc:	1005003a 	cmpeq	r2,r2,zero
 1003b00:	1000051e 	bne	r2,zero,1003b18 <OSEventNameGet+0x98>
        *perr  = OS_ERR_NAME_GET_ISR;
 1003b04:	e0fffe17 	ldw	r3,-8(fp)
 1003b08:	00800444 	movi	r2,17
 1003b0c:	18800005 	stb	r2,0(r3)
        return (0);
 1003b10:	e03fff15 	stw	zero,-4(fp)
 1003b14:	00002006 	br	1003b98 <OSEventNameGet+0x118>
    }
    switch (pevent->OSEventType) {
 1003b18:	e0bffc17 	ldw	r2,-16(fp)
 1003b1c:	10800003 	ldbu	r2,0(r2)
 1003b20:	10803fcc 	andi	r2,r2,255
 1003b24:	10bfffc4 	addi	r2,r2,-1
 1003b28:	10800128 	cmpgeui	r2,r2,4
 1003b2c:	1000161e 	bne	r2,zero,1003b88 <OSEventNameGet+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1003b30:	0005303a 	rdctl	r2,status
 1003b34:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1003b38:	e0fff917 	ldw	r3,-28(fp)
 1003b3c:	00bfff84 	movi	r2,-2
 1003b40:	1884703a 	and	r2,r3,r2
 1003b44:	1001703a 	wrctl	status,r2
  
  return context;
 1003b48:	e0bff917 	ldw	r2,-28(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
 1003b4c:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
 1003b50:	e0bffc17 	ldw	r2,-16(fp)
 1003b54:	11400384 	addi	r5,r2,14
 1003b58:	e13ffd17 	ldw	r4,-12(fp)
 1003b5c:	10056040 	call	1005604 <OS_StrCopy>
 1003b60:	e0bffb05 	stb	r2,-20(fp)
 1003b64:	e0bffa17 	ldw	r2,-24(fp)
 1003b68:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1003b6c:	e0bff817 	ldw	r2,-32(fp)
 1003b70:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 1003b74:	e0bffe17 	ldw	r2,-8(fp)
 1003b78:	10000005 	stb	zero,0(r2)
    return (len);
 1003b7c:	e0bffb03 	ldbu	r2,-20(fp)
 1003b80:	e0bfff15 	stw	r2,-4(fp)
 1003b84:	00000406 	br	1003b98 <OSEventNameGet+0x118>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 1003b88:	e0fffe17 	ldw	r3,-8(fp)
 1003b8c:	00800044 	movi	r2,1
 1003b90:	18800005 	stb	r2,0(r3)
             return (0);
 1003b94:	e03fff15 	stw	zero,-4(fp)
 1003b98:	e0bfff17 	ldw	r2,-4(fp)
    OS_ENTER_CRITICAL();
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
}
 1003b9c:	e037883a 	mov	sp,fp
 1003ba0:	dfc00117 	ldw	ra,4(sp)
 1003ba4:	df000017 	ldw	fp,0(sp)
 1003ba8:	dec00204 	addi	sp,sp,8
 1003bac:	f800283a 	ret

01003bb0 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 1003bb0:	defff604 	addi	sp,sp,-40
 1003bb4:	dfc00915 	stw	ra,36(sp)
 1003bb8:	df000815 	stw	fp,32(sp)
 1003bbc:	df000804 	addi	fp,sp,32
 1003bc0:	e13ffd15 	stw	r4,-12(fp)
 1003bc4:	e17ffe15 	stw	r5,-8(fp)
 1003bc8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1003bcc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 1003bd0:	e0bfff17 	ldw	r2,-4(fp)
 1003bd4:	1005003a 	cmpeq	r2,r2,zero
 1003bd8:	1000411e 	bne	r2,zero,1003ce0 <OSEventNameSet+0x130>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 1003bdc:	e0bffd17 	ldw	r2,-12(fp)
 1003be0:	1004c03a 	cmpne	r2,r2,zero
 1003be4:	1000041e 	bne	r2,zero,1003bf8 <OSEventNameSet+0x48>
        *perr = OS_ERR_PEVENT_NULL;
 1003be8:	e0ffff17 	ldw	r3,-4(fp)
 1003bec:	00800104 	movi	r2,4
 1003bf0:	18800005 	stb	r2,0(r3)
        return;
 1003bf4:	00003a06 	br	1003ce0 <OSEventNameSet+0x130>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 1003bf8:	e0bffe17 	ldw	r2,-8(fp)
 1003bfc:	1004c03a 	cmpne	r2,r2,zero
 1003c00:	1000041e 	bne	r2,zero,1003c14 <OSEventNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
 1003c04:	e0ffff17 	ldw	r3,-4(fp)
 1003c08:	00800304 	movi	r2,12
 1003c0c:	18800005 	stb	r2,0(r3)
        return;
 1003c10:	00003306 	br	1003ce0 <OSEventNameSet+0x130>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 1003c14:	d0a73903 	ldbu	r2,-25372(gp)
 1003c18:	10803fcc 	andi	r2,r2,255
 1003c1c:	1005003a 	cmpeq	r2,r2,zero
 1003c20:	1000041e 	bne	r2,zero,1003c34 <OSEventNameSet+0x84>
        *perr = OS_ERR_NAME_SET_ISR;
 1003c24:	e0ffff17 	ldw	r3,-4(fp)
 1003c28:	00800484 	movi	r2,18
 1003c2c:	18800005 	stb	r2,0(r3)
        return;
 1003c30:	00002b06 	br	1003ce0 <OSEventNameSet+0x130>
    }
    switch (pevent->OSEventType) {
 1003c34:	e0bffd17 	ldw	r2,-12(fp)
 1003c38:	10800003 	ldbu	r2,0(r2)
 1003c3c:	10803fcc 	andi	r2,r2,255
 1003c40:	10bfffc4 	addi	r2,r2,-1
 1003c44:	10800128 	cmpgeui	r2,r2,4
 1003c48:	10000f1e 	bne	r2,zero,1003c88 <OSEventNameSet+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1003c4c:	0005303a 	rdctl	r2,status
 1003c50:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1003c54:	e0fffa17 	ldw	r3,-24(fp)
 1003c58:	00bfff84 	movi	r2,-2
 1003c5c:	1884703a 	and	r2,r3,r2
 1003c60:	1001703a 	wrctl	status,r2
  
  return context;
 1003c64:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
 1003c68:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
 1003c6c:	e13ffe17 	ldw	r4,-8(fp)
 1003c70:	10056840 	call	1005684 <OS_StrLen>
 1003c74:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
 1003c78:	e0bffc03 	ldbu	r2,-16(fp)
 1003c7c:	10800828 	cmpgeui	r2,r2,32
 1003c80:	1000051e 	bne	r2,zero,1003c98 <OSEventNameSet+0xe8>
 1003c84:	00000c06 	br	1003cb8 <OSEventNameSet+0x108>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 1003c88:	e0ffff17 	ldw	r3,-4(fp)
 1003c8c:	00800044 	movi	r2,1
 1003c90:	18800005 	stb	r2,0(r3)
             return;
 1003c94:	00001206 	br	1003ce0 <OSEventNameSet+0x130>
 1003c98:	e0bffb17 	ldw	r2,-20(fp)
 1003c9c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1003ca0:	e0bff917 	ldw	r2,-28(fp)
 1003ca4:	1001703a 	wrctl	status,r2
    }
    OS_ENTER_CRITICAL();
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
 1003ca8:	e0ffff17 	ldw	r3,-4(fp)
 1003cac:	008002c4 	movi	r2,11
 1003cb0:	18800005 	stb	r2,0(r3)
        return;
 1003cb4:	00000a06 	br	1003ce0 <OSEventNameSet+0x130>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
 1003cb8:	e0bffd17 	ldw	r2,-12(fp)
 1003cbc:	11000384 	addi	r4,r2,14
 1003cc0:	e17ffe17 	ldw	r5,-8(fp)
 1003cc4:	10056040 	call	1005604 <OS_StrCopy>
 1003cc8:	e0bffb17 	ldw	r2,-20(fp)
 1003ccc:	e0bff815 	stw	r2,-32(fp)
 1003cd0:	e0bff817 	ldw	r2,-32(fp)
 1003cd4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 1003cd8:	e0bfff17 	ldw	r2,-4(fp)
 1003cdc:	10000005 	stb	zero,0(r2)
}
 1003ce0:	e037883a 	mov	sp,fp
 1003ce4:	dfc00117 	ldw	ra,4(sp)
 1003ce8:	df000017 	ldw	fp,0(sp)
 1003cec:	dec00204 	addi	sp,sp,8
 1003cf0:	f800283a 	ret

01003cf4 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
 1003cf4:	deffe704 	addi	sp,sp,-100
 1003cf8:	dfc01815 	stw	ra,96(sp)
 1003cfc:	df001715 	stw	fp,92(sp)
 1003d00:	df001704 	addi	fp,sp,92
 1003d04:	e13ff615 	stw	r4,-40(fp)
 1003d08:	e17ff715 	stw	r5,-36(fp)
 1003d0c:	e1bff815 	stw	r6,-32(fp)
 1003d10:	e1fff90d 	sth	r7,-28(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
 1003d14:	e03ff015 	stw	zero,-64(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
 1003d18:	e0800217 	ldw	r2,8(fp)
 1003d1c:	1004c03a 	cmpne	r2,r2,zero
 1003d20:	1000021e 	bne	r2,zero,1003d2c <OSEventPendMulti+0x38>
        return (0);
 1003d24:	e03fff15 	stw	zero,-4(fp)
 1003d28:	00019906 	br	1004390 <OSEventPendMulti+0x69c>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
 1003d2c:	e0bff617 	ldw	r2,-40(fp)
 1003d30:	1004c03a 	cmpne	r2,r2,zero
 1003d34:	1000051e 	bne	r2,zero,1003d4c <OSEventPendMulti+0x58>
       *perr =  OS_ERR_PEVENT_NULL;
 1003d38:	e0c00217 	ldw	r3,8(fp)
 1003d3c:	00800104 	movi	r2,4
 1003d40:	18800005 	stb	r2,0(r3)
        return (0);
 1003d44:	e03fff15 	stw	zero,-4(fp)
 1003d48:	00019106 	br	1004390 <OSEventPendMulti+0x69c>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
 1003d4c:	e0bff717 	ldw	r2,-36(fp)
 1003d50:	1004c03a 	cmpne	r2,r2,zero
 1003d54:	1000051e 	bne	r2,zero,1003d6c <OSEventPendMulti+0x78>
       *perr =  OS_ERR_PEVENT_NULL;
 1003d58:	e0c00217 	ldw	r3,8(fp)
 1003d5c:	00800104 	movi	r2,4
 1003d60:	18800005 	stb	r2,0(r3)
        return (0);
 1003d64:	e03fff15 	stw	zero,-4(fp)
 1003d68:	00018906 	br	1004390 <OSEventPendMulti+0x69c>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
 1003d6c:	e0bff817 	ldw	r2,-32(fp)
 1003d70:	1004c03a 	cmpne	r2,r2,zero
 1003d74:	1000051e 	bne	r2,zero,1003d8c <OSEventPendMulti+0x98>
       *perr =  OS_ERR_PEVENT_NULL;
 1003d78:	e0c00217 	ldw	r3,8(fp)
 1003d7c:	00800104 	movi	r2,4
 1003d80:	18800005 	stb	r2,0(r3)
        return (0);
 1003d84:	e03fff15 	stw	zero,-4(fp)
 1003d88:	00018106 	br	1004390 <OSEventPendMulti+0x69c>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
 1003d8c:	e0bff717 	ldw	r2,-36(fp)
 1003d90:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
 1003d94:	e0bff617 	ldw	r2,-40(fp)
 1003d98:	e0bff515 	stw	r2,-44(fp)
    pevent      = *pevents;
 1003d9c:	e0bff517 	ldw	r2,-44(fp)
 1003da0:	10800017 	ldw	r2,0(r2)
 1003da4:	e0bff415 	stw	r2,-48(fp)
    while  (pevent != (OS_EVENT *)0) {
 1003da8:	00001806 	br	1003e0c <OSEventPendMulti+0x118>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
 1003dac:	e0bff417 	ldw	r2,-48(fp)
 1003db0:	10800003 	ldbu	r2,0(r2)
 1003db4:	10803fcc 	andi	r2,r2,255
 1003db8:	e0bffe15 	stw	r2,-8(fp)
 1003dbc:	e0fffe17 	ldw	r3,-8(fp)
 1003dc0:	188000a0 	cmpeqi	r2,r3,2
 1003dc4:	10000b1e 	bne	r2,zero,1003df4 <OSEventPendMulti+0x100>
 1003dc8:	e0fffe17 	ldw	r3,-8(fp)
 1003dcc:	188000e0 	cmpeqi	r2,r3,3
 1003dd0:	1000081e 	bne	r2,zero,1003df4 <OSEventPendMulti+0x100>
 1003dd4:	e0fffe17 	ldw	r3,-8(fp)
 1003dd8:	18800060 	cmpeqi	r2,r3,1
 1003ddc:	1000051e 	bne	r2,zero,1003df4 <OSEventPendMulti+0x100>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
 1003de0:	e0c00217 	ldw	r3,8(fp)
 1003de4:	00800044 	movi	r2,1
 1003de8:	18800005 	stb	r2,0(r3)
                 return (0);
 1003dec:	e03fff15 	stw	zero,-4(fp)
 1003df0:	00016706 	br	1004390 <OSEventPendMulti+0x69c>
        }
        pevents++;
 1003df4:	e0bff517 	ldw	r2,-44(fp)
 1003df8:	10800104 	addi	r2,r2,4
 1003dfc:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
 1003e00:	e0bff517 	ldw	r2,-44(fp)
 1003e04:	10800017 	ldw	r2,0(r2)
 1003e08:	e0bff415 	stw	r2,-48(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
 1003e0c:	e0bff417 	ldw	r2,-48(fp)
 1003e10:	1004c03a 	cmpne	r2,r2,zero
 1003e14:	103fe51e 	bne	r2,zero,1003dac <OSEventPendMulti+0xb8>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
 1003e18:	d0a73903 	ldbu	r2,-25372(gp)
 1003e1c:	10803fcc 	andi	r2,r2,255
 1003e20:	1005003a 	cmpeq	r2,r2,zero
 1003e24:	1000051e 	bne	r2,zero,1003e3c <OSEventPendMulti+0x148>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
 1003e28:	e0c00217 	ldw	r3,8(fp)
 1003e2c:	00800084 	movi	r2,2
 1003e30:	18800005 	stb	r2,0(r3)
        return (0);
 1003e34:	e03fff15 	stw	zero,-4(fp)
 1003e38:	00015506 	br	1004390 <OSEventPendMulti+0x69c>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
 1003e3c:	d0a72b03 	ldbu	r2,-25428(gp)
 1003e40:	10803fcc 	andi	r2,r2,255
 1003e44:	1005003a 	cmpeq	r2,r2,zero
 1003e48:	1000051e 	bne	r2,zero,1003e60 <OSEventPendMulti+0x16c>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
 1003e4c:	e0c00217 	ldw	r3,8(fp)
 1003e50:	00800344 	movi	r2,13
 1003e54:	18800005 	stb	r2,0(r3)
        return (0);
 1003e58:	e03fff15 	stw	zero,-4(fp)
 1003e5c:	00014c06 	br	1004390 <OSEventPendMulti+0x69c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1003e60:	0005303a 	rdctl	r2,status
 1003e64:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1003e68:	e0ffef17 	ldw	r3,-68(fp)
 1003e6c:	00bfff84 	movi	r2,-2
 1003e70:	1884703a 	and	r2,r3,r2
 1003e74:	1001703a 	wrctl	status,r2
  
  return context;
 1003e78:	e0bfef17 	ldw	r2,-68(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
 1003e7c:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
 1003e80:	e03ff205 	stb	zero,-56(fp)
    events_rdy_nbr =  0;
 1003e84:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
 1003e88:	e03ff105 	stb	zero,-60(fp)
    pevents        =  pevents_pend;
 1003e8c:	e0bff617 	ldw	r2,-40(fp)
 1003e90:	e0bff515 	stw	r2,-44(fp)
    pevent         = *pevents;
 1003e94:	e0bff517 	ldw	r2,-44(fp)
 1003e98:	10800017 	ldw	r2,0(r2)
 1003e9c:	e0bff415 	stw	r2,-48(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 1003ea0:	00008f06 	br	10040e0 <OSEventPendMulti+0x3ec>
        switch (pevent->OSEventType) {
 1003ea4:	e0bff417 	ldw	r2,-48(fp)
 1003ea8:	10800003 	ldbu	r2,0(r2)
 1003eac:	10803fcc 	andi	r2,r2,255
 1003eb0:	e0bffd15 	stw	r2,-12(fp)
 1003eb4:	e0fffd17 	ldw	r3,-12(fp)
 1003eb8:	188000a0 	cmpeqi	r2,r3,2
 1003ebc:	1000441e 	bne	r2,zero,1003fd0 <OSEventPendMulti+0x2dc>
 1003ec0:	e0fffd17 	ldw	r3,-12(fp)
 1003ec4:	188000e0 	cmpeqi	r2,r3,3
 1003ec8:	1000041e 	bne	r2,zero,1003edc <OSEventPendMulti+0x1e8>
 1003ecc:	e0fffd17 	ldw	r3,-12(fp)
 1003ed0:	18800060 	cmpeqi	r2,r3,1
 1003ed4:	1000211e 	bne	r2,zero,1003f5c <OSEventPendMulti+0x268>
 1003ed8:	00006f06 	br	1004098 <OSEventPendMulti+0x3a4>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
 1003edc:	e0bff417 	ldw	r2,-48(fp)
 1003ee0:	1080020b 	ldhu	r2,8(r2)
 1003ee4:	10bfffcc 	andi	r2,r2,65535
 1003ee8:	1005003a 	cmpeq	r2,r2,zero
 1003eec:	1000171e 	bne	r2,zero,1003f4c <OSEventPendMulti+0x258>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
 1003ef0:	e0bff417 	ldw	r2,-48(fp)
 1003ef4:	1080020b 	ldhu	r2,8(r2)
 1003ef8:	10bfffc4 	addi	r2,r2,-1
 1003efc:	1007883a 	mov	r3,r2
 1003f00:	e0bff417 	ldw	r2,-48(fp)
 1003f04:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
 1003f08:	e0fff717 	ldw	r3,-36(fp)
 1003f0c:	e0bff417 	ldw	r2,-48(fp)
 1003f10:	18800015 	stw	r2,0(r3)
 1003f14:	e0bff717 	ldw	r2,-36(fp)
 1003f18:	10800104 	addi	r2,r2,4
 1003f1c:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   =  OS_TRUE;
 1003f20:	00800044 	movi	r2,1
 1003f24:	e0bff205 	stb	r2,-56(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
 1003f28:	e0bff817 	ldw	r2,-32(fp)
 1003f2c:	10000015 	stw	zero,0(r2)
 1003f30:	e0bff817 	ldw	r2,-32(fp)
 1003f34:	10800104 	addi	r2,r2,4
 1003f38:	e0bff815 	stw	r2,-32(fp)
                      events_rdy_nbr++;
 1003f3c:	e0bff18b 	ldhu	r2,-58(fp)
 1003f40:	10800044 	addi	r2,r2,1
 1003f44:	e0bff18d 	sth	r2,-58(fp)
 1003f48:	00005f06 	br	10040c8 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
 1003f4c:	e0bff103 	ldbu	r2,-60(fp)
 1003f50:	10800054 	ori	r2,r2,1
 1003f54:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
 1003f58:	00005b06 	br	10040c8 <OSEventPendMulti+0x3d4>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
 1003f5c:	e0bff417 	ldw	r2,-48(fp)
 1003f60:	10800117 	ldw	r2,4(r2)
 1003f64:	1005003a 	cmpeq	r2,r2,zero
 1003f68:	1000151e 	bne	r2,zero,1003fc0 <OSEventPendMulti+0x2cc>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
 1003f6c:	e0bff417 	ldw	r2,-48(fp)
 1003f70:	10c00117 	ldw	r3,4(r2)
 1003f74:	e0bff817 	ldw	r2,-32(fp)
 1003f78:	10c00015 	stw	r3,0(r2)
 1003f7c:	e0bff817 	ldw	r2,-32(fp)
 1003f80:	10800104 	addi	r2,r2,4
 1003f84:	e0bff815 	stw	r2,-32(fp)
                     pevent->OSEventPtr  = (void *)0;
 1003f88:	e0bff417 	ldw	r2,-48(fp)
 1003f8c:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
 1003f90:	e0fff717 	ldw	r3,-36(fp)
 1003f94:	e0bff417 	ldw	r2,-48(fp)
 1003f98:	18800015 	stw	r2,0(r3)
 1003f9c:	e0bff717 	ldw	r2,-36(fp)
 1003fa0:	10800104 	addi	r2,r2,4
 1003fa4:	e0bff715 	stw	r2,-36(fp)
                      events_rdy         =  OS_TRUE;
 1003fa8:	00800044 	movi	r2,1
 1003fac:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
 1003fb0:	e0bff18b 	ldhu	r2,-58(fp)
 1003fb4:	10800044 	addi	r2,r2,1
 1003fb8:	e0bff18d 	sth	r2,-58(fp)
 1003fbc:	00004206 	br	10040c8 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
 1003fc0:	e0bff103 	ldbu	r2,-60(fp)
 1003fc4:	10800094 	ori	r2,r2,2
 1003fc8:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
 1003fcc:	00003e06 	br	10040c8 <OSEventPendMulti+0x3d4>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
 1003fd0:	e0bff417 	ldw	r2,-48(fp)
 1003fd4:	10800117 	ldw	r2,4(r2)
 1003fd8:	e0bff315 	stw	r2,-52(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
 1003fdc:	e0bff317 	ldw	r2,-52(fp)
 1003fe0:	1080058b 	ldhu	r2,22(r2)
 1003fe4:	10bfffcc 	andi	r2,r2,65535
 1003fe8:	1005003a 	cmpeq	r2,r2,zero
 1003fec:	1000261e 	bne	r2,zero,1004088 <OSEventPendMulti+0x394>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
 1003ff0:	e0bff317 	ldw	r2,-52(fp)
 1003ff4:	11000417 	ldw	r4,16(r2)
 1003ff8:	20c00017 	ldw	r3,0(r4)
 1003ffc:	e0bff817 	ldw	r2,-32(fp)
 1004000:	10c00015 	stw	r3,0(r2)
 1004004:	e0bff817 	ldw	r2,-32(fp)
 1004008:	10800104 	addi	r2,r2,4
 100400c:	e0bff815 	stw	r2,-32(fp)
 1004010:	20c00104 	addi	r3,r4,4
 1004014:	e0bff317 	ldw	r2,-52(fp)
 1004018:	10c00415 	stw	r3,16(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
 100401c:	e0bff317 	ldw	r2,-52(fp)
 1004020:	10c00417 	ldw	r3,16(r2)
 1004024:	e0bff317 	ldw	r2,-52(fp)
 1004028:	10800217 	ldw	r2,8(r2)
 100402c:	1880041e 	bne	r3,r2,1004040 <OSEventPendMulti+0x34c>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
 1004030:	e0bff317 	ldw	r2,-52(fp)
 1004034:	10c00117 	ldw	r3,4(r2)
 1004038:	e0bff317 	ldw	r2,-52(fp)
 100403c:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
 1004040:	e0bff317 	ldw	r2,-52(fp)
 1004044:	1080058b 	ldhu	r2,22(r2)
 1004048:	10bfffc4 	addi	r2,r2,-1
 100404c:	1007883a 	mov	r3,r2
 1004050:	e0bff317 	ldw	r2,-52(fp)
 1004054:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
 1004058:	e0fff717 	ldw	r3,-36(fp)
 100405c:	e0bff417 	ldw	r2,-48(fp)
 1004060:	18800015 	stw	r2,0(r3)
 1004064:	e0bff717 	ldw	r2,-36(fp)
 1004068:	10800104 	addi	r2,r2,4
 100406c:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   = OS_TRUE;
 1004070:	00800044 	movi	r2,1
 1004074:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
 1004078:	e0bff18b 	ldhu	r2,-58(fp)
 100407c:	10800044 	addi	r2,r2,1
 1004080:	e0bff18d 	sth	r2,-58(fp)
 1004084:	00001006 	br	10040c8 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
 1004088:	e0bff103 	ldbu	r2,-60(fp)
 100408c:	10800114 	ori	r2,r2,4
 1004090:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
 1004094:	00000c06 	br	10040c8 <OSEventPendMulti+0x3d4>
 1004098:	e0bff017 	ldw	r2,-64(fp)
 100409c:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10040a0:	e0bfee17 	ldw	r2,-72(fp)
 10040a4:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
 10040a8:	e0bff717 	ldw	r2,-36(fp)
 10040ac:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
 10040b0:	e0c00217 	ldw	r3,8(fp)
 10040b4:	00800044 	movi	r2,1
 10040b8:	18800005 	stb	r2,0(r3)
                 return (events_rdy_nbr);
 10040bc:	e0bff18b 	ldhu	r2,-58(fp)
 10040c0:	e0bfff15 	stw	r2,-4(fp)
 10040c4:	0000b206 	br	1004390 <OSEventPendMulti+0x69c>
        }
        pevents++;
 10040c8:	e0bff517 	ldw	r2,-44(fp)
 10040cc:	10800104 	addi	r2,r2,4
 10040d0:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
 10040d4:	e0bff517 	ldw	r2,-44(fp)
 10040d8:	10800017 	ldw	r2,0(r2)
 10040dc:	e0bff415 	stw	r2,-48(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 10040e0:	e0bff417 	ldw	r2,-48(fp)
 10040e4:	1004c03a 	cmpne	r2,r2,zero
 10040e8:	103f6e1e 	bne	r2,zero,1003ea4 <OSEventPendMulti+0x1b0>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
 10040ec:	e0bff203 	ldbu	r2,-56(fp)
 10040f0:	10800058 	cmpnei	r2,r2,1
 10040f4:	10000b1e 	bne	r2,zero,1004124 <OSEventPendMulti+0x430>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
 10040f8:	e0bff717 	ldw	r2,-36(fp)
 10040fc:	10000015 	stw	zero,0(r2)
 1004100:	e0bff017 	ldw	r2,-64(fp)
 1004104:	e0bfed15 	stw	r2,-76(fp)
 1004108:	e0bfed17 	ldw	r2,-76(fp)
 100410c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
 1004110:	e0800217 	ldw	r2,8(fp)
 1004114:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
 1004118:	e0fff18b 	ldhu	r3,-58(fp)
 100411c:	e0ffff15 	stw	r3,-4(fp)
 1004120:	00009b06 	br	1004390 <OSEventPendMulti+0x69c>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
 1004124:	d1273a17 	ldw	r4,-25368(gp)
 1004128:	d0a73a17 	ldw	r2,-25368(gp)
 100412c:	10c00c03 	ldbu	r3,48(r2)
 1004130:	e0bff103 	ldbu	r2,-60(fp)
 1004134:	1884b03a 	or	r2,r3,r2
 1004138:	1007883a 	mov	r3,r2
 100413c:	00bfe004 	movi	r2,-128
 1004140:	1884b03a 	or	r2,r3,r2
 1004144:	20800c05 	stb	r2,48(r4)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 1004148:	d0a73a17 	ldw	r2,-25368(gp)
 100414c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
 1004150:	d0e73a17 	ldw	r3,-25368(gp)
 1004154:	e0bff90b 	ldhu	r2,-28(fp)
 1004158:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
 100415c:	e13ff617 	ldw	r4,-40(fp)
 1004160:	1004d240 	call	1004d24 <OS_EventTaskWaitMulti>
 1004164:	e0bff017 	ldw	r2,-64(fp)
 1004168:	e0bfec15 	stw	r2,-80(fp)
 100416c:	e0bfec17 	ldw	r2,-80(fp)
 1004170:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
 1004174:	10054c00 	call	10054c0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1004178:	0005303a 	rdctl	r2,status
 100417c:	e0bfeb15 	stw	r2,-84(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1004180:	e0ffeb17 	ldw	r3,-84(fp)
 1004184:	00bfff84 	movi	r2,-2
 1004188:	1884703a 	and	r2,r3,r2
 100418c:	1001703a 	wrctl	status,r2
  
  return context;
 1004190:	e0bfeb17 	ldw	r2,-84(fp)
    OS_ENTER_CRITICAL();
 1004194:	e0bff015 	stw	r2,-64(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
 1004198:	d0a73a17 	ldw	r2,-25368(gp)
 100419c:	10800c43 	ldbu	r2,49(r2)
 10041a0:	10803fcc 	andi	r2,r2,255
 10041a4:	e0bffc15 	stw	r2,-16(fp)
 10041a8:	e0fffc17 	ldw	r3,-16(fp)
 10041ac:	1805003a 	cmpeq	r2,r3,zero
 10041b0:	1000041e 	bne	r2,zero,10041c4 <OSEventPendMulti+0x4d0>
 10041b4:	e0fffc17 	ldw	r3,-16(fp)
 10041b8:	188000a0 	cmpeqi	r2,r3,2
 10041bc:	1000011e 	bne	r2,zero,10041c4 <OSEventPendMulti+0x4d0>
 10041c0:	00001906 	br	1004228 <OSEventPendMulti+0x534>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
 10041c4:	d0a73a17 	ldw	r2,-25368(gp)
 10041c8:	10800717 	ldw	r2,28(r2)
 10041cc:	e0bff415 	stw	r2,-48(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
 10041d0:	e0bff417 	ldw	r2,-48(fp)
 10041d4:	1005003a 	cmpeq	r2,r2,zero
 10041d8:	10000c1e 	bne	r2,zero,100420c <OSEventPendMulti+0x518>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
 10041dc:	e0fff717 	ldw	r3,-36(fp)
 10041e0:	e0bff417 	ldw	r2,-48(fp)
 10041e4:	18800015 	stw	r2,0(r3)
 10041e8:	e0bff717 	ldw	r2,-36(fp)
 10041ec:	10800104 	addi	r2,r2,4
 10041f0:	e0bff715 	stw	r2,-36(fp)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
 10041f4:	e0bff717 	ldw	r2,-36(fp)
 10041f8:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
 10041fc:	e0bff18b 	ldhu	r2,-58(fp)
 1004200:	10800044 	addi	r2,r2,1
 1004204:	e0bff18d 	sth	r2,-58(fp)
 1004208:	00000a06 	br	1004234 <OSEventPendMulti+0x540>

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
 100420c:	d0a73a17 	ldw	r2,-25368(gp)
 1004210:	00c00044 	movi	r3,1
 1004214:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 1004218:	d1273a17 	ldw	r4,-25368(gp)
 100421c:	e17ff617 	ldw	r5,-40(fp)
 1004220:	1004f300 	call	1004f30 <OS_EventTaskRemoveMulti>
             }
			 break;
 1004224:	00000306 	br	1004234 <OSEventPendMulti+0x540>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 1004228:	d1273a17 	ldw	r4,-25368(gp)
 100422c:	e17ff617 	ldw	r5,-40(fp)
 1004230:	1004f300 	call	1004f30 <OS_EventTaskRemoveMulti>
             break;
    }

    switch (OSTCBCur->OSTCBStatPend) {
 1004234:	d0a73a17 	ldw	r2,-25368(gp)
 1004238:	10800c43 	ldbu	r2,49(r2)
 100423c:	10803fcc 	andi	r2,r2,255
 1004240:	e0bffb15 	stw	r2,-20(fp)
 1004244:	e0fffb17 	ldw	r3,-20(fp)
 1004248:	1805003a 	cmpeq	r2,r3,zero
 100424c:	1000041e 	bne	r2,zero,1004260 <OSEventPendMulti+0x56c>
 1004250:	e0fffb17 	ldw	r3,-20(fp)
 1004254:	188000a0 	cmpeqi	r2,r3,2
 1004258:	10002c1e 	bne	r2,zero,100430c <OSEventPendMulti+0x618>
 100425c:	00003406 	br	1004330 <OSEventPendMulti+0x63c>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
 1004260:	e0bff417 	ldw	r2,-48(fp)
 1004264:	10800003 	ldbu	r2,0(r2)
 1004268:	10803fcc 	andi	r2,r2,255
 100426c:	e0bffa15 	stw	r2,-24(fp)
 1004270:	e0fffa17 	ldw	r3,-24(fp)
 1004274:	18800050 	cmplti	r2,r3,1
 1004278:	1000151e 	bne	r2,zero,10042d0 <OSEventPendMulti+0x5dc>
 100427c:	e0fffa17 	ldw	r3,-24(fp)
 1004280:	188000d0 	cmplti	r2,r3,3
 1004284:	10000a1e 	bne	r2,zero,10042b0 <OSEventPendMulti+0x5bc>
 1004288:	e0fffa17 	ldw	r3,-24(fp)
 100428c:	188000e0 	cmpeqi	r2,r3,3
 1004290:	1000011e 	bne	r2,zero,1004298 <OSEventPendMulti+0x5a4>
 1004294:	00000e06 	br	10042d0 <OSEventPendMulti+0x5dc>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
 1004298:	e0bff817 	ldw	r2,-32(fp)
 100429c:	10000015 	stw	zero,0(r2)
 10042a0:	e0bff817 	ldw	r2,-32(fp)
 10042a4:	10800104 	addi	r2,r2,4
 10042a8:	e0bff815 	stw	r2,-32(fp)
                      break;
 10042ac:	00001406 	br	1004300 <OSEventPendMulti+0x60c>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
 10042b0:	d0a73a17 	ldw	r2,-25368(gp)
 10042b4:	10c00917 	ldw	r3,36(r2)
 10042b8:	e0bff817 	ldw	r2,-32(fp)
 10042bc:	10c00015 	stw	r3,0(r2)
 10042c0:	e0bff817 	ldw	r2,-32(fp)
 10042c4:	10800104 	addi	r2,r2,4
 10042c8:	e0bff815 	stw	r2,-32(fp)
                      break;
 10042cc:	00000c06 	br	1004300 <OSEventPendMulti+0x60c>
 10042d0:	e0bff017 	ldw	r2,-64(fp)
 10042d4:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10042d8:	e0bfea17 	ldw	r2,-88(fp)
 10042dc:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
 10042e0:	e0bff717 	ldw	r2,-36(fp)
 10042e4:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
 10042e8:	e0c00217 	ldw	r3,8(fp)
 10042ec:	00800044 	movi	r2,1
 10042f0:	18800005 	stb	r2,0(r3)
                      return (events_rdy_nbr);
 10042f4:	e0bff18b 	ldhu	r2,-58(fp)
 10042f8:	e0bfff15 	stw	r2,-4(fp)
 10042fc:	00002406 	br	1004390 <OSEventPendMulti+0x69c>
             }
            *perr = OS_ERR_NONE;
 1004300:	e0800217 	ldw	r2,8(fp)
 1004304:	10000005 	stb	zero,0(r2)
             break;
 1004308:	00001106 	br	1004350 <OSEventPendMulti+0x65c>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
 100430c:	e0bff817 	ldw	r2,-32(fp)
 1004310:	10000015 	stw	zero,0(r2)
 1004314:	e0bff817 	ldw	r2,-32(fp)
 1004318:	10800104 	addi	r2,r2,4
 100431c:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
 1004320:	e0c00217 	ldw	r3,8(fp)
 1004324:	00800384 	movi	r2,14
 1004328:	18800005 	stb	r2,0(r3)
             break;
 100432c:	00000806 	br	1004350 <OSEventPendMulti+0x65c>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
 1004330:	e0bff817 	ldw	r2,-32(fp)
 1004334:	10000015 	stw	zero,0(r2)
 1004338:	e0bff817 	ldw	r2,-32(fp)
 100433c:	10800104 	addi	r2,r2,4
 1004340:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
 1004344:	e0c00217 	ldw	r3,8(fp)
 1004348:	00800284 	movi	r2,10
 100434c:	18800005 	stb	r2,0(r3)
             break;
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
 1004350:	d0a73a17 	ldw	r2,-25368(gp)
 1004354:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
 1004358:	d0a73a17 	ldw	r2,-25368(gp)
 100435c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
 1004360:	d0a73a17 	ldw	r2,-25368(gp)
 1004364:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 1004368:	d0a73a17 	ldw	r2,-25368(gp)
 100436c:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
 1004370:	d0a73a17 	ldw	r2,-25368(gp)
 1004374:	10000915 	stw	zero,36(r2)
 1004378:	e0bff017 	ldw	r2,-64(fp)
 100437c:	e0bfe915 	stw	r2,-92(fp)
 1004380:	e0bfe917 	ldw	r2,-92(fp)
 1004384:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
 1004388:	e0fff18b 	ldhu	r3,-58(fp)
 100438c:	e0ffff15 	stw	r3,-4(fp)
 1004390:	e0bfff17 	ldw	r2,-4(fp)
}
 1004394:	e037883a 	mov	sp,fp
 1004398:	dfc00117 	ldw	ra,4(sp)
 100439c:	df000017 	ldw	fp,0(sp)
 10043a0:	dec00204 	addi	sp,sp,8
 10043a4:	f800283a 	ret

010043a8 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
 10043a8:	defffe04 	addi	sp,sp,-8
 10043ac:	dfc00115 	stw	ra,4(sp)
 10043b0:	df000015 	stw	fp,0(sp)
 10043b4:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
 10043b8:	100e2700 	call	100e270 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
 10043bc:	10051780 	call	1005178 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
 10043c0:	10051bc0 	call	10051bc <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
 10043c4:	10053200 	call	1005320 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
 10043c8:	100509c0 	call	100509c <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
 10043cc:	10073d00 	call	10073d0 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
 10043d0:	1007da80 	call	1007da8 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
 10043d4:	10091040 	call	1009104 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
 10043d8:	10052280 	call	1005228 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
 10043dc:	10052a40 	call	10052a4 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
 10043e0:	100e28c0 	call	100e28c <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
 10043e4:	1005ba80 	call	1005ba8 <OSDebugInit>
#endif
}
 10043e8:	e037883a 	mov	sp,fp
 10043ec:	dfc00117 	ldw	ra,4(sp)
 10043f0:	df000017 	ldw	fp,0(sp)
 10043f4:	dec00204 	addi	sp,sp,8
 10043f8:	f800283a 	ret

010043fc <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
 10043fc:	defffc04 	addi	sp,sp,-16
 1004400:	df000315 	stw	fp,12(sp)
 1004404:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 1004408:	e03fff15 	stw	zero,-4(fp)
#endif

    if (OSRunning == OS_TRUE) {
 100440c:	d0a72b43 	ldbu	r2,-25427(gp)
 1004410:	10803fcc 	andi	r2,r2,255
 1004414:	10800058 	cmpnei	r2,r2,1
 1004418:	1000131e 	bne	r2,zero,1004468 <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100441c:	0005303a 	rdctl	r2,status
 1004420:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1004424:	e0fffe17 	ldw	r3,-8(fp)
 1004428:	00bfff84 	movi	r2,-2
 100442c:	1884703a 	and	r2,r3,r2
 1004430:	1001703a 	wrctl	status,r2
  
  return context;
 1004434:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 1004438:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting < 255u) {
 100443c:	d0a73903 	ldbu	r2,-25372(gp)
 1004440:	10803fcc 	andi	r2,r2,255
 1004444:	10803fe0 	cmpeqi	r2,r2,255
 1004448:	1000031e 	bne	r2,zero,1004458 <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
 100444c:	d0a73903 	ldbu	r2,-25372(gp)
 1004450:	10800044 	addi	r2,r2,1
 1004454:	d0a73905 	stb	r2,-25372(gp)
 1004458:	e0bfff17 	ldw	r2,-4(fp)
 100445c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1004460:	e0bffd17 	ldw	r2,-12(fp)
 1004464:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
 1004468:	e037883a 	mov	sp,fp
 100446c:	df000017 	ldw	fp,0(sp)
 1004470:	dec00104 	addi	sp,sp,4
 1004474:	f800283a 	ret

01004478 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
 1004478:	defffb04 	addi	sp,sp,-20
 100447c:	dfc00415 	stw	ra,16(sp)
 1004480:	df000315 	stw	fp,12(sp)
 1004484:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 1004488:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {
 100448c:	d0a72b43 	ldbu	r2,-25427(gp)
 1004490:	10803fcc 	andi	r2,r2,255
 1004494:	10800058 	cmpnei	r2,r2,1
 1004498:	1000321e 	bne	r2,zero,1004564 <OSIntExit+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100449c:	0005303a 	rdctl	r2,status
 10044a0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10044a4:	e0fffe17 	ldw	r3,-8(fp)
 10044a8:	00bfff84 	movi	r2,-2
 10044ac:	1884703a 	and	r2,r3,r2
 10044b0:	1001703a 	wrctl	status,r2
  
  return context;
 10044b4:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 10044b8:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
 10044bc:	d0a73903 	ldbu	r2,-25372(gp)
 10044c0:	10803fcc 	andi	r2,r2,255
 10044c4:	1005003a 	cmpeq	r2,r2,zero
 10044c8:	1000031e 	bne	r2,zero,10044d8 <OSIntExit+0x60>
            OSIntNesting--;
 10044cc:	d0a73903 	ldbu	r2,-25372(gp)
 10044d0:	10bfffc4 	addi	r2,r2,-1
 10044d4:	d0a73905 	stb	r2,-25372(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
 10044d8:	d0a73903 	ldbu	r2,-25372(gp)
 10044dc:	10803fcc 	andi	r2,r2,255
 10044e0:	1004c03a 	cmpne	r2,r2,zero
 10044e4:	10001b1e 	bne	r2,zero,1004554 <OSIntExit+0xdc>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
 10044e8:	d0a72b03 	ldbu	r2,-25428(gp)
 10044ec:	10803fcc 	andi	r2,r2,255
 10044f0:	1004c03a 	cmpne	r2,r2,zero
 10044f4:	1000171e 	bne	r2,zero,1004554 <OSIntExit+0xdc>
                OS_SchedNew();
 10044f8:	10055940 	call	1005594 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
 10044fc:	d0a72d03 	ldbu	r2,-25420(gp)
 1004500:	d0e72d43 	ldbu	r3,-25419(gp)
 1004504:	11003fcc 	andi	r4,r2,255
 1004508:	18803fcc 	andi	r2,r3,255
 100450c:	20801126 	beq	r4,r2,1004554 <OSIntExit+0xdc>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
 1004510:	d0a72d03 	ldbu	r2,-25420(gp)
 1004514:	10803fcc 	andi	r2,r2,255
 1004518:	00c040b4 	movhi	r3,258
 100451c:	18eb3f04 	addi	r3,r3,-21252
 1004520:	1085883a 	add	r2,r2,r2
 1004524:	1085883a 	add	r2,r2,r2
 1004528:	10c5883a 	add	r2,r2,r3
 100452c:	10800017 	ldw	r2,0(r2)
 1004530:	d0a73515 	stw	r2,-25388(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
 1004534:	d0e73517 	ldw	r3,-25388(gp)
 1004538:	18800e17 	ldw	r2,56(r3)
 100453c:	10800044 	addi	r2,r2,1
 1004540:	18800e15 	stw	r2,56(r3)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
 1004544:	d0a73017 	ldw	r2,-25408(gp)
 1004548:	10800044 	addi	r2,r2,1
 100454c:	d0a73015 	stw	r2,-25408(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
 1004550:	100ddfc0 	call	100ddfc <OSCtxSw>
 1004554:	e0bfff17 	ldw	r2,-4(fp)
 1004558:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100455c:	e0bffd17 	ldw	r2,-12(fp)
 1004560:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 1004564:	e037883a 	mov	sp,fp
 1004568:	dfc00117 	ldw	ra,4(sp)
 100456c:	df000017 	ldw	fp,0(sp)
 1004570:	dec00204 	addi	sp,sp,8
 1004574:	f800283a 	ret

01004578 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
 1004578:	defffc04 	addi	sp,sp,-16
 100457c:	df000315 	stw	fp,12(sp)
 1004580:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1004584:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
 1004588:	d0a72b43 	ldbu	r2,-25427(gp)
 100458c:	10803fcc 	andi	r2,r2,255
 1004590:	10800058 	cmpnei	r2,r2,1
 1004594:	1000171e 	bne	r2,zero,10045f4 <OSSchedLock+0x7c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1004598:	0005303a 	rdctl	r2,status
 100459c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10045a0:	e0fffe17 	ldw	r3,-8(fp)
 10045a4:	00bfff84 	movi	r2,-2
 10045a8:	1884703a 	and	r2,r3,r2
 10045ac:	1001703a 	wrctl	status,r2
  
  return context;
 10045b0:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 10045b4:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
 10045b8:	d0a73903 	ldbu	r2,-25372(gp)
 10045bc:	10803fcc 	andi	r2,r2,255
 10045c0:	1004c03a 	cmpne	r2,r2,zero
 10045c4:	1000071e 	bne	r2,zero,10045e4 <OSSchedLock+0x6c>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
 10045c8:	d0a72b03 	ldbu	r2,-25428(gp)
 10045cc:	10803fcc 	andi	r2,r2,255
 10045d0:	10803fe0 	cmpeqi	r2,r2,255
 10045d4:	1000031e 	bne	r2,zero,10045e4 <OSSchedLock+0x6c>
                OSLockNesting++;                 /* Increment lock nesting level                       */
 10045d8:	d0a72b03 	ldbu	r2,-25428(gp)
 10045dc:	10800044 	addi	r2,r2,1
 10045e0:	d0a72b05 	stb	r2,-25428(gp)
 10045e4:	e0bfff17 	ldw	r2,-4(fp)
 10045e8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10045ec:	e0bffd17 	ldw	r2,-12(fp)
 10045f0:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 10045f4:	e037883a 	mov	sp,fp
 10045f8:	df000017 	ldw	fp,0(sp)
 10045fc:	dec00104 	addi	sp,sp,4
 1004600:	f800283a 	ret

01004604 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
 1004604:	defff804 	addi	sp,sp,-32
 1004608:	dfc00715 	stw	ra,28(sp)
 100460c:	df000615 	stw	fp,24(sp)
 1004610:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 1004614:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
 1004618:	d0a72b43 	ldbu	r2,-25427(gp)
 100461c:	10803fcc 	andi	r2,r2,255
 1004620:	10800058 	cmpnei	r2,r2,1
 1004624:	10002b1e 	bne	r2,zero,10046d4 <OSSchedUnlock+0xd0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1004628:	0005303a 	rdctl	r2,status
 100462c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1004630:	e0fffe17 	ldw	r3,-8(fp)
 1004634:	00bfff84 	movi	r2,-2
 1004638:	1884703a 	and	r2,r3,r2
 100463c:	1001703a 	wrctl	status,r2
  
  return context;
 1004640:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 1004644:	e0bfff15 	stw	r2,-4(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
 1004648:	d0a72b03 	ldbu	r2,-25428(gp)
 100464c:	10803fcc 	andi	r2,r2,255
 1004650:	1005003a 	cmpeq	r2,r2,zero
 1004654:	10001b1e 	bne	r2,zero,10046c4 <OSSchedUnlock+0xc0>
            OSLockNesting--;                               /* Decrement lock nesting level             */
 1004658:	d0a72b03 	ldbu	r2,-25428(gp)
 100465c:	10bfffc4 	addi	r2,r2,-1
 1004660:	d0a72b05 	stb	r2,-25428(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
 1004664:	d0a72b03 	ldbu	r2,-25428(gp)
 1004668:	10803fcc 	andi	r2,r2,255
 100466c:	1004c03a 	cmpne	r2,r2,zero
 1004670:	10000f1e 	bne	r2,zero,10046b0 <OSSchedUnlock+0xac>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
 1004674:	d0a73903 	ldbu	r2,-25372(gp)
 1004678:	10803fcc 	andi	r2,r2,255
 100467c:	1004c03a 	cmpne	r2,r2,zero
 1004680:	1000061e 	bne	r2,zero,100469c <OSSchedUnlock+0x98>
 1004684:	e0bfff17 	ldw	r2,-4(fp)
 1004688:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100468c:	e0bffd17 	ldw	r2,-12(fp)
 1004690:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
 1004694:	10054c00 	call	10054c0 <OS_Sched>
 1004698:	00000e06 	br	10046d4 <OSSchedUnlock+0xd0>
 100469c:	e0bfff17 	ldw	r2,-4(fp)
 10046a0:	e0bffc15 	stw	r2,-16(fp)
 10046a4:	e0bffc17 	ldw	r2,-16(fp)
 10046a8:	1001703a 	wrctl	status,r2
 10046ac:	00000906 	br	10046d4 <OSSchedUnlock+0xd0>
 10046b0:	e0bfff17 	ldw	r2,-4(fp)
 10046b4:	e0bffb15 	stw	r2,-20(fp)
 10046b8:	e0bffb17 	ldw	r2,-20(fp)
 10046bc:	1001703a 	wrctl	status,r2
 10046c0:	00000406 	br	10046d4 <OSSchedUnlock+0xd0>
 10046c4:	e0bfff17 	ldw	r2,-4(fp)
 10046c8:	e0bffa15 	stw	r2,-24(fp)
 10046cc:	e0bffa17 	ldw	r2,-24(fp)
 10046d0:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
 10046d4:	e037883a 	mov	sp,fp
 10046d8:	dfc00117 	ldw	ra,4(sp)
 10046dc:	df000017 	ldw	fp,0(sp)
 10046e0:	dec00204 	addi	sp,sp,8
 10046e4:	f800283a 	ret

010046e8 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
 10046e8:	defffe04 	addi	sp,sp,-8
 10046ec:	dfc00115 	stw	ra,4(sp)
 10046f0:	df000015 	stw	fp,0(sp)
 10046f4:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
 10046f8:	d0a72b43 	ldbu	r2,-25427(gp)
 10046fc:	10803fcc 	andi	r2,r2,255
 1004700:	1004c03a 	cmpne	r2,r2,zero
 1004704:	10000f1e 	bne	r2,zero,1004744 <OSStart+0x5c>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
 1004708:	10055940 	call	1005594 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
 100470c:	d0a72d03 	ldbu	r2,-25420(gp)
 1004710:	d0a72d45 	stb	r2,-25419(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
 1004714:	d0a72d03 	ldbu	r2,-25420(gp)
 1004718:	10803fcc 	andi	r2,r2,255
 100471c:	00c040b4 	movhi	r3,258
 1004720:	18eb3f04 	addi	r3,r3,-21252
 1004724:	1085883a 	add	r2,r2,r2
 1004728:	1085883a 	add	r2,r2,r2
 100472c:	10c5883a 	add	r2,r2,r3
 1004730:	10800017 	ldw	r2,0(r2)
 1004734:	d0a73515 	stw	r2,-25388(gp)
        OSTCBCur      = OSTCBHighRdy;
 1004738:	d0a73517 	ldw	r2,-25388(gp)
 100473c:	d0a73a15 	stw	r2,-25368(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
 1004740:	100de880 	call	100de88 <OSStartHighRdy>
    }
}
 1004744:	e037883a 	mov	sp,fp
 1004748:	dfc00117 	ldw	ra,4(sp)
 100474c:	df000017 	ldw	fp,0(sp)
 1004750:	dec00204 	addi	sp,sp,8
 1004754:	f800283a 	ret

01004758 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
 1004758:	defff904 	addi	sp,sp,-28
 100475c:	dfc00615 	stw	ra,24(sp)
 1004760:	df000515 	stw	fp,20(sp)
 1004764:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1004768:	e03fff15 	stw	zero,-4(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
 100476c:	01000084 	movi	r4,2
 1004770:	100b7b80 	call	100b7b8 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1004774:	0005303a 	rdctl	r2,status
 1004778:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100477c:	e0fffe17 	ldw	r3,-8(fp)
 1004780:	00bfff84 	movi	r2,-2
 1004784:	1884703a 	and	r2,r3,r2
 1004788:	1001703a 	wrctl	status,r2
  
  return context;
 100478c:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
 1004790:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
 1004794:	d0272c15 	stw	zero,-25424(gp)
 1004798:	e0bfff17 	ldw	r2,-4(fp)
 100479c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10047a0:	e0bffd17 	ldw	r2,-12(fp)
 10047a4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
 10047a8:	01001904 	movi	r4,100
 10047ac:	100b7b80 	call	100b7b8 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10047b0:	0005303a 	rdctl	r2,status
 10047b4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10047b8:	e0fffc17 	ldw	r3,-16(fp)
 10047bc:	00bfff84 	movi	r2,-2
 10047c0:	1884703a 	and	r2,r3,r2
 10047c4:	1001703a 	wrctl	status,r2
  
  return context;
 10047c8:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
 10047cc:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
 10047d0:	d0a72c17 	ldw	r2,-25424(gp)
 10047d4:	d0a73115 	stw	r2,-25404(gp)
    OSStatRdy    = OS_TRUE;
 10047d8:	00800044 	movi	r2,1
 10047dc:	d0a73d05 	stb	r2,-25356(gp)
 10047e0:	e0bfff17 	ldw	r2,-4(fp)
 10047e4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10047e8:	e0bffb17 	ldw	r2,-20(fp)
 10047ec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 10047f0:	e037883a 	mov	sp,fp
 10047f4:	dfc00117 	ldw	ra,4(sp)
 10047f8:	df000017 	ldw	fp,0(sp)
 10047fc:	dec00204 	addi	sp,sp,8
 1004800:	f800283a 	ret

01004804 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
 1004804:	defff604 	addi	sp,sp,-40
 1004808:	dfc00915 	stw	ra,36(sp)
 100480c:	df000815 	stw	fp,32(sp)
 1004810:	df000804 	addi	fp,sp,32
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 1004814:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
 1004818:	100e2540 	call	100e254 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100481c:	0005303a 	rdctl	r2,status
 1004820:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1004824:	e0fffb17 	ldw	r3,-20(fp)
 1004828:	00bfff84 	movi	r2,-2
 100482c:	1884703a 	and	r2,r3,r2
 1004830:	1001703a 	wrctl	status,r2
  
  return context;
 1004834:	e0bffb17 	ldw	r2,-20(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
 1004838:	e0bffc15 	stw	r2,-16(fp)
    OSTime++;
 100483c:	d0a73b17 	ldw	r2,-25364(gp)
 1004840:	10800044 	addi	r2,r2,1
 1004844:	d0a73b15 	stw	r2,-25364(gp)
 1004848:	e0bffc17 	ldw	r2,-16(fp)
 100484c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1004850:	e0bffa17 	ldw	r2,-24(fp)
 1004854:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
 1004858:	d0a72b43 	ldbu	r2,-25427(gp)
 100485c:	10803fcc 	andi	r2,r2,255
 1004860:	10800058 	cmpnei	r2,r2,1
 1004864:	1000721e 	bne	r2,zero,1004a30 <OSTimeTick+0x22c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
 1004868:	d0a72f03 	ldbu	r2,-25412(gp)
 100486c:	10803fcc 	andi	r2,r2,255
 1004870:	e0bfff15 	stw	r2,-4(fp)
 1004874:	e0ffff17 	ldw	r3,-4(fp)
 1004878:	18800060 	cmpeqi	r2,r3,1
 100487c:	10000a1e 	bne	r2,zero,10048a8 <OSTimeTick+0xa4>
 1004880:	e0ffff17 	ldw	r3,-4(fp)
 1004884:	188000a0 	cmpeqi	r2,r3,2
 1004888:	1000091e 	bne	r2,zero,10048b0 <OSTimeTick+0xac>
 100488c:	e0ffff17 	ldw	r3,-4(fp)
 1004890:	1805003a 	cmpeq	r2,r3,zero
 1004894:	1000011e 	bne	r2,zero,100489c <OSTimeTick+0x98>
 1004898:	00000a06 	br	10048c4 <OSTimeTick+0xc0>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
 100489c:	00800044 	movi	r2,1
 10048a0:	e0bffd05 	stb	r2,-12(fp)
                 break;
 10048a4:	00000a06 	br	10048d0 <OSTimeTick+0xcc>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
 10048a8:	e03ffd05 	stb	zero,-12(fp)
                 break;
 10048ac:	00000806 	br	10048d0 <OSTimeTick+0xcc>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
 10048b0:	00800044 	movi	r2,1
 10048b4:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
 10048b8:	00800044 	movi	r2,1
 10048bc:	d0a72f05 	stb	r2,-25412(gp)
                 break;
 10048c0:	00000306 	br	10048d0 <OSTimeTick+0xcc>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
 10048c4:	00800044 	movi	r2,1
 10048c8:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
 10048cc:	d0272f05 	stb	zero,-25412(gp)
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
 10048d0:	e0bffd03 	ldbu	r2,-12(fp)
 10048d4:	1005003a 	cmpeq	r2,r2,zero
 10048d8:	1000551e 	bne	r2,zero,1004a30 <OSTimeTick+0x22c>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
 10048dc:	d0a72e17 	ldw	r2,-25416(gp)
 10048e0:	e0bffe15 	stw	r2,-8(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 10048e4:	00004d06 	br	1004a1c <OSTimeTick+0x218>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10048e8:	0005303a 	rdctl	r2,status
 10048ec:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10048f0:	e0fff917 	ldw	r3,-28(fp)
 10048f4:	00bfff84 	movi	r2,-2
 10048f8:	1884703a 	and	r2,r3,r2
 10048fc:	1001703a 	wrctl	status,r2
  
  return context;
 1004900:	e0bff917 	ldw	r2,-28(fp)
            OS_ENTER_CRITICAL();
 1004904:	e0bffc15 	stw	r2,-16(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
 1004908:	e0bffe17 	ldw	r2,-8(fp)
 100490c:	10800b8b 	ldhu	r2,46(r2)
 1004910:	10bfffcc 	andi	r2,r2,65535
 1004914:	1005003a 	cmpeq	r2,r2,zero
 1004918:	1000391e 	bne	r2,zero,1004a00 <OSTimeTick+0x1fc>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
 100491c:	e0bffe17 	ldw	r2,-8(fp)
 1004920:	10800b8b 	ldhu	r2,46(r2)
 1004924:	10bfffc4 	addi	r2,r2,-1
 1004928:	1007883a 	mov	r3,r2
 100492c:	e0bffe17 	ldw	r2,-8(fp)
 1004930:	10c00b8d 	sth	r3,46(r2)
 1004934:	e0bffe17 	ldw	r2,-8(fp)
 1004938:	10800b8b 	ldhu	r2,46(r2)
 100493c:	10bfffcc 	andi	r2,r2,65535
 1004940:	1004c03a 	cmpne	r2,r2,zero
 1004944:	10002e1e 	bne	r2,zero,1004a00 <OSTimeTick+0x1fc>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 1004948:	e0bffe17 	ldw	r2,-8(fp)
 100494c:	10800c03 	ldbu	r2,48(r2)
 1004950:	10803fcc 	andi	r2,r2,255
 1004954:	10800dcc 	andi	r2,r2,55
 1004958:	1005003a 	cmpeq	r2,r2,zero
 100495c:	10000b1e 	bne	r2,zero,100498c <OSTimeTick+0x188>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
 1004960:	e0bffe17 	ldw	r2,-8(fp)
 1004964:	10c00c03 	ldbu	r3,48(r2)
 1004968:	00bff204 	movi	r2,-56
 100496c:	1884703a 	and	r2,r3,r2
 1004970:	1007883a 	mov	r3,r2
 1004974:	e0bffe17 	ldw	r2,-8(fp)
 1004978:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
 100497c:	e0fffe17 	ldw	r3,-8(fp)
 1004980:	00800044 	movi	r2,1
 1004984:	18800c45 	stb	r2,49(r3)
 1004988:	00000206 	br	1004994 <OSTimeTick+0x190>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 100498c:	e0bffe17 	ldw	r2,-8(fp)
 1004990:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
 1004994:	e0bffe17 	ldw	r2,-8(fp)
 1004998:	10800c03 	ldbu	r2,48(r2)
 100499c:	10803fcc 	andi	r2,r2,255
 10049a0:	1080020c 	andi	r2,r2,8
 10049a4:	1004c03a 	cmpne	r2,r2,zero
 10049a8:	1000151e 	bne	r2,zero,1004a00 <OSTimeTick+0x1fc>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
 10049ac:	e0bffe17 	ldw	r2,-8(fp)
 10049b0:	10c00d83 	ldbu	r3,54(r2)
 10049b4:	d0a73703 	ldbu	r2,-25380(gp)
 10049b8:	1884b03a 	or	r2,r3,r2
 10049bc:	d0a73705 	stb	r2,-25380(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 10049c0:	e0bffe17 	ldw	r2,-8(fp)
 10049c4:	10800d03 	ldbu	r2,52(r2)
 10049c8:	11003fcc 	andi	r4,r2,255
 10049cc:	e0bffe17 	ldw	r2,-8(fp)
 10049d0:	10800d03 	ldbu	r2,52(r2)
 10049d4:	10c03fcc 	andi	r3,r2,255
 10049d8:	d0a73744 	addi	r2,gp,-25379
 10049dc:	1885883a 	add	r2,r3,r2
 10049e0:	10c00003 	ldbu	r3,0(r2)
 10049e4:	e0bffe17 	ldw	r2,-8(fp)
 10049e8:	10800d43 	ldbu	r2,53(r2)
 10049ec:	1884b03a 	or	r2,r3,r2
 10049f0:	1007883a 	mov	r3,r2
 10049f4:	d0a73744 	addi	r2,gp,-25379
 10049f8:	2085883a 	add	r2,r4,r2
 10049fc:	10c00005 	stb	r3,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
 1004a00:	e0bffe17 	ldw	r2,-8(fp)
 1004a04:	10800517 	ldw	r2,20(r2)
 1004a08:	e0bffe15 	stw	r2,-8(fp)
 1004a0c:	e0bffc17 	ldw	r2,-16(fp)
 1004a10:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1004a14:	e0bff817 	ldw	r2,-32(fp)
 1004a18:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 1004a1c:	e0bffe17 	ldw	r2,-8(fp)
 1004a20:	10800c83 	ldbu	r2,50(r2)
 1004a24:	10803fcc 	andi	r2,r2,255
 1004a28:	10800518 	cmpnei	r2,r2,20
 1004a2c:	103fae1e 	bne	r2,zero,10048e8 <OSTimeTick+0xe4>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
 1004a30:	e037883a 	mov	sp,fp
 1004a34:	dfc00117 	ldw	ra,4(sp)
 1004a38:	df000017 	ldw	fp,0(sp)
 1004a3c:	dec00204 	addi	sp,sp,8
 1004a40:	f800283a 	ret

01004a44 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
 1004a44:	deffff04 	addi	sp,sp,-4
 1004a48:	df000015 	stw	fp,0(sp)
 1004a4c:	d839883a 	mov	fp,sp
    return (OS_VERSION);
 1004a50:	00804784 	movi	r2,286
}
 1004a54:	e037883a 	mov	sp,fp
 1004a58:	df000017 	ldw	fp,0(sp)
 1004a5c:	dec00104 	addi	sp,sp,4
 1004a60:	f800283a 	ret

01004a64 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
 1004a64:	deffff04 	addi	sp,sp,-4
 1004a68:	df000015 	stw	fp,0(sp)
 1004a6c:	d839883a 	mov	fp,sp
}
 1004a70:	e037883a 	mov	sp,fp
 1004a74:	df000017 	ldw	fp,0(sp)
 1004a78:	dec00104 	addi	sp,sp,4
 1004a7c:	f800283a 	ret

01004a80 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
 1004a80:	defff804 	addi	sp,sp,-32
 1004a84:	dfc00715 	stw	ra,28(sp)
 1004a88:	df000615 	stw	fp,24(sp)
 1004a8c:	df000604 	addi	fp,sp,24
 1004a90:	e13ffc15 	stw	r4,-16(fp)
 1004a94:	e17ffd15 	stw	r5,-12(fp)
 1004a98:	e1bffe05 	stb	r6,-8(fp)
 1004a9c:	e1ffff05 	stb	r7,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
 1004aa0:	e0bffc17 	ldw	r2,-16(fp)
 1004aa4:	10800283 	ldbu	r2,10(r2)
 1004aa8:	10c03fcc 	andi	r3,r2,255
 1004aac:	00804074 	movhi	r2,257
 1004ab0:	10800b04 	addi	r2,r2,44
 1004ab4:	10c5883a 	add	r2,r2,r3
 1004ab8:	10800003 	ldbu	r2,0(r2)
 1004abc:	e0bffa85 	stb	r2,-22(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
 1004ac0:	e0fffa83 	ldbu	r3,-22(fp)
 1004ac4:	e0bffc17 	ldw	r2,-16(fp)
 1004ac8:	1885883a 	add	r2,r3,r2
 1004acc:	10800204 	addi	r2,r2,8
 1004ad0:	108000c3 	ldbu	r2,3(r2)
 1004ad4:	10c03fcc 	andi	r3,r2,255
 1004ad8:	00804074 	movhi	r2,257
 1004adc:	10800b04 	addi	r2,r2,44
 1004ae0:	10c5883a 	add	r2,r2,r3
 1004ae4:	10800003 	ldbu	r2,0(r2)
 1004ae8:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
 1004aec:	e0bffa83 	ldbu	r2,-22(fp)
 1004af0:	100490fa 	slli	r2,r2,3
 1004af4:	1007883a 	mov	r3,r2
 1004af8:	e0bffa43 	ldbu	r2,-23(fp)
 1004afc:	1885883a 	add	r2,r3,r2
 1004b00:	e0bffa05 	stb	r2,-24(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
 1004b04:	e0bffa03 	ldbu	r2,-24(fp)
 1004b08:	00c040b4 	movhi	r3,258
 1004b0c:	18eb3f04 	addi	r3,r3,-21252
 1004b10:	1085883a 	add	r2,r2,r2
 1004b14:	1085883a 	add	r2,r2,r2
 1004b18:	10c5883a 	add	r2,r2,r3
 1004b1c:	10800017 	ldw	r2,0(r2)
 1004b20:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
 1004b24:	e0bffb17 	ldw	r2,-20(fp)
 1004b28:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
 1004b2c:	e0fffb17 	ldw	r3,-20(fp)
 1004b30:	e0bffd17 	ldw	r2,-12(fp)
 1004b34:	18800915 	stw	r2,36(r3)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
 1004b38:	e0bffb17 	ldw	r2,-20(fp)
 1004b3c:	10800c03 	ldbu	r2,48(r2)
 1004b40:	1007883a 	mov	r3,r2
 1004b44:	e0bffe03 	ldbu	r2,-8(fp)
 1004b48:	0084303a 	nor	r2,zero,r2
 1004b4c:	1884703a 	and	r2,r3,r2
 1004b50:	1007883a 	mov	r3,r2
 1004b54:	e0bffb17 	ldw	r2,-20(fp)
 1004b58:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
 1004b5c:	e0fffb17 	ldw	r3,-20(fp)
 1004b60:	e0bfff03 	ldbu	r2,-4(fp)
 1004b64:	18800c45 	stb	r2,49(r3)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
 1004b68:	e0bffb17 	ldw	r2,-20(fp)
 1004b6c:	10800c03 	ldbu	r2,48(r2)
 1004b70:	10803fcc 	andi	r2,r2,255
 1004b74:	1080020c 	andi	r2,r2,8
 1004b78:	1004c03a 	cmpne	r2,r2,zero
 1004b7c:	1000111e 	bne	r2,zero,1004bc4 <OS_EventTaskRdy+0x144>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
 1004b80:	e0bffb17 	ldw	r2,-20(fp)
 1004b84:	10c00d83 	ldbu	r3,54(r2)
 1004b88:	d0a73703 	ldbu	r2,-25380(gp)
 1004b8c:	1884b03a 	or	r2,r3,r2
 1004b90:	d0a73705 	stb	r2,-25380(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
 1004b94:	e13ffa83 	ldbu	r4,-22(fp)
 1004b98:	e0fffa83 	ldbu	r3,-22(fp)
 1004b9c:	d0a73744 	addi	r2,gp,-25379
 1004ba0:	1885883a 	add	r2,r3,r2
 1004ba4:	10c00003 	ldbu	r3,0(r2)
 1004ba8:	e0bffb17 	ldw	r2,-20(fp)
 1004bac:	10800d43 	ldbu	r2,53(r2)
 1004bb0:	1884b03a 	or	r2,r3,r2
 1004bb4:	1007883a 	mov	r3,r2
 1004bb8:	d0a73744 	addi	r2,gp,-25379
 1004bbc:	2085883a 	add	r2,r4,r2
 1004bc0:	10c00005 	stb	r3,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
 1004bc4:	e13ffb17 	ldw	r4,-20(fp)
 1004bc8:	e17ffc17 	ldw	r5,-16(fp)
 1004bcc:	1004e780 	call	1004e78 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
 1004bd0:	e0bffb17 	ldw	r2,-20(fp)
 1004bd4:	10800817 	ldw	r2,32(r2)
 1004bd8:	1005003a 	cmpeq	r2,r2,zero
 1004bdc:	1000071e 	bne	r2,zero,1004bfc <OS_EventTaskRdy+0x17c>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 1004be0:	e0bffb17 	ldw	r2,-20(fp)
 1004be4:	11400817 	ldw	r5,32(r2)
 1004be8:	e13ffb17 	ldw	r4,-20(fp)
 1004bec:	1004f300 	call	1004f30 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
 1004bf0:	e0fffb17 	ldw	r3,-20(fp)
 1004bf4:	e0bffc17 	ldw	r2,-16(fp)
 1004bf8:	18800715 	stw	r2,28(r3)
    }
#endif

    return (prio);
 1004bfc:	e0bffa03 	ldbu	r2,-24(fp)
}
 1004c00:	e037883a 	mov	sp,fp
 1004c04:	dfc00117 	ldw	ra,4(sp)
 1004c08:	df000017 	ldw	fp,0(sp)
 1004c0c:	dec00204 	addi	sp,sp,8
 1004c10:	f800283a 	ret

01004c14 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
 1004c14:	defffd04 	addi	sp,sp,-12
 1004c18:	df000215 	stw	fp,8(sp)
 1004c1c:	df000204 	addi	fp,sp,8
 1004c20:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
 1004c24:	d0e73a17 	ldw	r3,-25368(gp)
 1004c28:	e0bfff17 	ldw	r2,-4(fp)
 1004c2c:	18800715 	stw	r2,28(r3)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
 1004c30:	d0a73a17 	ldw	r2,-25368(gp)
 1004c34:	10800d03 	ldbu	r2,52(r2)
 1004c38:	11003fcc 	andi	r4,r2,255
 1004c3c:	d0a73a17 	ldw	r2,-25368(gp)
 1004c40:	10800d03 	ldbu	r2,52(r2)
 1004c44:	10c03fcc 	andi	r3,r2,255
 1004c48:	e0bfff17 	ldw	r2,-4(fp)
 1004c4c:	1885883a 	add	r2,r3,r2
 1004c50:	10800204 	addi	r2,r2,8
 1004c54:	10c000c3 	ldbu	r3,3(r2)
 1004c58:	d0a73a17 	ldw	r2,-25368(gp)
 1004c5c:	10800d43 	ldbu	r2,53(r2)
 1004c60:	1884b03a 	or	r2,r3,r2
 1004c64:	1007883a 	mov	r3,r2
 1004c68:	e0bfff17 	ldw	r2,-4(fp)
 1004c6c:	2085883a 	add	r2,r4,r2
 1004c70:	10800204 	addi	r2,r2,8
 1004c74:	10c000c5 	stb	r3,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 1004c78:	e0bfff17 	ldw	r2,-4(fp)
 1004c7c:	10c00283 	ldbu	r3,10(r2)
 1004c80:	d0a73a17 	ldw	r2,-25368(gp)
 1004c84:	10800d83 	ldbu	r2,54(r2)
 1004c88:	1884b03a 	or	r2,r3,r2
 1004c8c:	1007883a 	mov	r3,r2
 1004c90:	e0bfff17 	ldw	r2,-4(fp)
 1004c94:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 1004c98:	d0a73a17 	ldw	r2,-25368(gp)
 1004c9c:	10800d03 	ldbu	r2,52(r2)
 1004ca0:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 1004ca4:	e13ffe03 	ldbu	r4,-8(fp)
 1004ca8:	e0fffe03 	ldbu	r3,-8(fp)
 1004cac:	d0a73744 	addi	r2,gp,-25379
 1004cb0:	1885883a 	add	r2,r3,r2
 1004cb4:	10800003 	ldbu	r2,0(r2)
 1004cb8:	1007883a 	mov	r3,r2
 1004cbc:	d0a73a17 	ldw	r2,-25368(gp)
 1004cc0:	10800d43 	ldbu	r2,53(r2)
 1004cc4:	0084303a 	nor	r2,zero,r2
 1004cc8:	1884703a 	and	r2,r3,r2
 1004ccc:	1007883a 	mov	r3,r2
 1004cd0:	d0a73744 	addi	r2,gp,-25379
 1004cd4:	2085883a 	add	r2,r4,r2
 1004cd8:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
 1004cdc:	e0fffe03 	ldbu	r3,-8(fp)
 1004ce0:	d0a73744 	addi	r2,gp,-25379
 1004ce4:	1885883a 	add	r2,r3,r2
 1004ce8:	10800003 	ldbu	r2,0(r2)
 1004cec:	10803fcc 	andi	r2,r2,255
 1004cf0:	1004c03a 	cmpne	r2,r2,zero
 1004cf4:	1000071e 	bne	r2,zero,1004d14 <OS_EventTaskWait+0x100>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 1004cf8:	d0a73a17 	ldw	r2,-25368(gp)
 1004cfc:	10800d83 	ldbu	r2,54(r2)
 1004d00:	0084303a 	nor	r2,zero,r2
 1004d04:	1007883a 	mov	r3,r2
 1004d08:	d0a73703 	ldbu	r2,-25380(gp)
 1004d0c:	1884703a 	and	r2,r3,r2
 1004d10:	d0a73705 	stb	r2,-25380(gp)
    }
}
 1004d14:	e037883a 	mov	sp,fp
 1004d18:	df000017 	ldw	fp,0(sp)
 1004d1c:	dec00104 	addi	sp,sp,4
 1004d20:	f800283a 	ret

01004d24 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
 1004d24:	defffb04 	addi	sp,sp,-20
 1004d28:	df000415 	stw	fp,16(sp)
 1004d2c:	df000404 	addi	fp,sp,16
 1004d30:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
 1004d34:	d0a73a17 	ldw	r2,-25368(gp)
 1004d38:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
 1004d3c:	d0e73a17 	ldw	r3,-25368(gp)
 1004d40:	e0bfff17 	ldw	r2,-4(fp)
 1004d44:	18800815 	stw	r2,32(r3)

    pevents =  pevents_wait;
 1004d48:	e0bfff17 	ldw	r2,-4(fp)
 1004d4c:	e0bffe15 	stw	r2,-8(fp)
    pevent  = *pevents;
 1004d50:	e0bffe17 	ldw	r2,-8(fp)
 1004d54:	10800017 	ldw	r2,0(r2)
 1004d58:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 1004d5c:	00002006 	br	1004de0 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
 1004d60:	d0a73a17 	ldw	r2,-25368(gp)
 1004d64:	10800d03 	ldbu	r2,52(r2)
 1004d68:	11003fcc 	andi	r4,r2,255
 1004d6c:	d0a73a17 	ldw	r2,-25368(gp)
 1004d70:	10800d03 	ldbu	r2,52(r2)
 1004d74:	10c03fcc 	andi	r3,r2,255
 1004d78:	e0bffd17 	ldw	r2,-12(fp)
 1004d7c:	1885883a 	add	r2,r3,r2
 1004d80:	10800204 	addi	r2,r2,8
 1004d84:	10c000c3 	ldbu	r3,3(r2)
 1004d88:	d0a73a17 	ldw	r2,-25368(gp)
 1004d8c:	10800d43 	ldbu	r2,53(r2)
 1004d90:	1884b03a 	or	r2,r3,r2
 1004d94:	1007883a 	mov	r3,r2
 1004d98:	e0bffd17 	ldw	r2,-12(fp)
 1004d9c:	2085883a 	add	r2,r4,r2
 1004da0:	10800204 	addi	r2,r2,8
 1004da4:	10c000c5 	stb	r3,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 1004da8:	e0bffd17 	ldw	r2,-12(fp)
 1004dac:	10c00283 	ldbu	r3,10(r2)
 1004db0:	d0a73a17 	ldw	r2,-25368(gp)
 1004db4:	10800d83 	ldbu	r2,54(r2)
 1004db8:	1884b03a 	or	r2,r3,r2
 1004dbc:	1007883a 	mov	r3,r2
 1004dc0:	e0bffd17 	ldw	r2,-12(fp)
 1004dc4:	10c00285 	stb	r3,10(r2)
        pevents++;
 1004dc8:	e0bffe17 	ldw	r2,-8(fp)
 1004dcc:	10800104 	addi	r2,r2,4
 1004dd0:	e0bffe15 	stw	r2,-8(fp)
        pevent = *pevents;
 1004dd4:	e0bffe17 	ldw	r2,-8(fp)
 1004dd8:	10800017 	ldw	r2,0(r2)
 1004ddc:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 1004de0:	e0bffd17 	ldw	r2,-12(fp)
 1004de4:	1004c03a 	cmpne	r2,r2,zero
 1004de8:	103fdd1e 	bne	r2,zero,1004d60 <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 1004dec:	d0a73a17 	ldw	r2,-25368(gp)
 1004df0:	10800d03 	ldbu	r2,52(r2)
 1004df4:	e0bffc05 	stb	r2,-16(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 1004df8:	e13ffc03 	ldbu	r4,-16(fp)
 1004dfc:	e0fffc03 	ldbu	r3,-16(fp)
 1004e00:	d0a73744 	addi	r2,gp,-25379
 1004e04:	1885883a 	add	r2,r3,r2
 1004e08:	10800003 	ldbu	r2,0(r2)
 1004e0c:	1007883a 	mov	r3,r2
 1004e10:	d0a73a17 	ldw	r2,-25368(gp)
 1004e14:	10800d43 	ldbu	r2,53(r2)
 1004e18:	0084303a 	nor	r2,zero,r2
 1004e1c:	1884703a 	and	r2,r3,r2
 1004e20:	1007883a 	mov	r3,r2
 1004e24:	d0a73744 	addi	r2,gp,-25379
 1004e28:	2085883a 	add	r2,r4,r2
 1004e2c:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
 1004e30:	e0fffc03 	ldbu	r3,-16(fp)
 1004e34:	d0a73744 	addi	r2,gp,-25379
 1004e38:	1885883a 	add	r2,r3,r2
 1004e3c:	10800003 	ldbu	r2,0(r2)
 1004e40:	10803fcc 	andi	r2,r2,255
 1004e44:	1004c03a 	cmpne	r2,r2,zero
 1004e48:	1000071e 	bne	r2,zero,1004e68 <OS_EventTaskWaitMulti+0x144>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 1004e4c:	d0a73a17 	ldw	r2,-25368(gp)
 1004e50:	10800d83 	ldbu	r2,54(r2)
 1004e54:	0084303a 	nor	r2,zero,r2
 1004e58:	1007883a 	mov	r3,r2
 1004e5c:	d0a73703 	ldbu	r2,-25380(gp)
 1004e60:	1884703a 	and	r2,r3,r2
 1004e64:	d0a73705 	stb	r2,-25380(gp)
    }
}
 1004e68:	e037883a 	mov	sp,fp
 1004e6c:	df000017 	ldw	fp,0(sp)
 1004e70:	dec00104 	addi	sp,sp,4
 1004e74:	f800283a 	ret

01004e78 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
 1004e78:	defffc04 	addi	sp,sp,-16
 1004e7c:	df000315 	stw	fp,12(sp)
 1004e80:	df000304 	addi	fp,sp,12
 1004e84:	e13ffe15 	stw	r4,-8(fp)
 1004e88:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
 1004e8c:	e0bffe17 	ldw	r2,-8(fp)
 1004e90:	10800d03 	ldbu	r2,52(r2)
 1004e94:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
 1004e98:	e13ffd03 	ldbu	r4,-12(fp)
 1004e9c:	e0fffd03 	ldbu	r3,-12(fp)
 1004ea0:	e0bfff17 	ldw	r2,-4(fp)
 1004ea4:	1885883a 	add	r2,r3,r2
 1004ea8:	10800204 	addi	r2,r2,8
 1004eac:	108000c3 	ldbu	r2,3(r2)
 1004eb0:	1007883a 	mov	r3,r2
 1004eb4:	e0bffe17 	ldw	r2,-8(fp)
 1004eb8:	10800d43 	ldbu	r2,53(r2)
 1004ebc:	0084303a 	nor	r2,zero,r2
 1004ec0:	1884703a 	and	r2,r3,r2
 1004ec4:	1007883a 	mov	r3,r2
 1004ec8:	e0bfff17 	ldw	r2,-4(fp)
 1004ecc:	2085883a 	add	r2,r4,r2
 1004ed0:	10800204 	addi	r2,r2,8
 1004ed4:	10c000c5 	stb	r3,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
 1004ed8:	e0fffd03 	ldbu	r3,-12(fp)
 1004edc:	e0bfff17 	ldw	r2,-4(fp)
 1004ee0:	1885883a 	add	r2,r3,r2
 1004ee4:	10800204 	addi	r2,r2,8
 1004ee8:	108000c3 	ldbu	r2,3(r2)
 1004eec:	10803fcc 	andi	r2,r2,255
 1004ef0:	1004c03a 	cmpne	r2,r2,zero
 1004ef4:	10000a1e 	bne	r2,zero,1004f20 <OS_EventTaskRemove+0xa8>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
 1004ef8:	e0bfff17 	ldw	r2,-4(fp)
 1004efc:	10800283 	ldbu	r2,10(r2)
 1004f00:	1007883a 	mov	r3,r2
 1004f04:	e0bffe17 	ldw	r2,-8(fp)
 1004f08:	10800d83 	ldbu	r2,54(r2)
 1004f0c:	0084303a 	nor	r2,zero,r2
 1004f10:	1884703a 	and	r2,r3,r2
 1004f14:	1007883a 	mov	r3,r2
 1004f18:	e0bfff17 	ldw	r2,-4(fp)
 1004f1c:	10c00285 	stb	r3,10(r2)
    }
}
 1004f20:	e037883a 	mov	sp,fp
 1004f24:	df000017 	ldw	fp,0(sp)
 1004f28:	dec00104 	addi	sp,sp,4
 1004f2c:	f800283a 	ret

01004f30 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
 1004f30:	defffa04 	addi	sp,sp,-24
 1004f34:	df000515 	stw	fp,20(sp)
 1004f38:	df000504 	addi	fp,sp,20
 1004f3c:	e13ffe15 	stw	r4,-8(fp)
 1004f40:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
 1004f44:	e0bffe17 	ldw	r2,-8(fp)
 1004f48:	10800d03 	ldbu	r2,52(r2)
 1004f4c:	e0bffb85 	stb	r2,-18(fp)
    bity    =  ptcb->OSTCBBitY;
 1004f50:	e0bffe17 	ldw	r2,-8(fp)
 1004f54:	10800d83 	ldbu	r2,54(r2)
 1004f58:	e0bffb45 	stb	r2,-19(fp)
    bitx    =  ptcb->OSTCBBitX;
 1004f5c:	e0bffe17 	ldw	r2,-8(fp)
 1004f60:	10800d43 	ldbu	r2,53(r2)
 1004f64:	e0bffb05 	stb	r2,-20(fp)
    pevents =  pevents_multi;
 1004f68:	e0bfff17 	ldw	r2,-4(fp)
 1004f6c:	e0bffd15 	stw	r2,-12(fp)
    pevent  = *pevents;
 1004f70:	e0bffd17 	ldw	r2,-12(fp)
 1004f74:	10800017 	ldw	r2,0(r2)
 1004f78:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 1004f7c:	00002606 	br	1005018 <OS_EventTaskRemoveMulti+0xe8>
        pevent->OSEventTbl[y]  &= ~bitx;
 1004f80:	e13ffb83 	ldbu	r4,-18(fp)
 1004f84:	e0fffb83 	ldbu	r3,-18(fp)
 1004f88:	e0bffc17 	ldw	r2,-16(fp)
 1004f8c:	1885883a 	add	r2,r3,r2
 1004f90:	10800204 	addi	r2,r2,8
 1004f94:	108000c3 	ldbu	r2,3(r2)
 1004f98:	1007883a 	mov	r3,r2
 1004f9c:	e0bffb03 	ldbu	r2,-20(fp)
 1004fa0:	0084303a 	nor	r2,zero,r2
 1004fa4:	1884703a 	and	r2,r3,r2
 1004fa8:	1007883a 	mov	r3,r2
 1004fac:	e0bffc17 	ldw	r2,-16(fp)
 1004fb0:	2085883a 	add	r2,r4,r2
 1004fb4:	10800204 	addi	r2,r2,8
 1004fb8:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
 1004fbc:	e0fffb83 	ldbu	r3,-18(fp)
 1004fc0:	e0bffc17 	ldw	r2,-16(fp)
 1004fc4:	1885883a 	add	r2,r3,r2
 1004fc8:	10800204 	addi	r2,r2,8
 1004fcc:	108000c3 	ldbu	r2,3(r2)
 1004fd0:	10803fcc 	andi	r2,r2,255
 1004fd4:	1004c03a 	cmpne	r2,r2,zero
 1004fd8:	1000091e 	bne	r2,zero,1005000 <OS_EventTaskRemoveMulti+0xd0>
            pevent->OSEventGrp &= ~bity;
 1004fdc:	e0bffc17 	ldw	r2,-16(fp)
 1004fe0:	10800283 	ldbu	r2,10(r2)
 1004fe4:	1007883a 	mov	r3,r2
 1004fe8:	e0bffb43 	ldbu	r2,-19(fp)
 1004fec:	0084303a 	nor	r2,zero,r2
 1004ff0:	1884703a 	and	r2,r3,r2
 1004ff4:	1007883a 	mov	r3,r2
 1004ff8:	e0bffc17 	ldw	r2,-16(fp)
 1004ffc:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
 1005000:	e0bffd17 	ldw	r2,-12(fp)
 1005004:	10800104 	addi	r2,r2,4
 1005008:	e0bffd15 	stw	r2,-12(fp)
        pevent = *pevents;
 100500c:	e0bffd17 	ldw	r2,-12(fp)
 1005010:	10800017 	ldw	r2,0(r2)
 1005014:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 1005018:	e0bffc17 	ldw	r2,-16(fp)
 100501c:	1004c03a 	cmpne	r2,r2,zero
 1005020:	103fd71e 	bne	r2,zero,1004f80 <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
 1005024:	e037883a 	mov	sp,fp
 1005028:	df000017 	ldw	fp,0(sp)
 100502c:	dec00104 	addi	sp,sp,4
 1005030:	f800283a 	ret

01005034 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
 1005034:	defffc04 	addi	sp,sp,-16
 1005038:	df000315 	stw	fp,12(sp)
 100503c:	df000304 	addi	fp,sp,12
 1005040:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
 1005044:	e0bfff17 	ldw	r2,-4(fp)
 1005048:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
 100504c:	e0bfff17 	ldw	r2,-4(fp)
 1005050:	108002c4 	addi	r2,r2,11
 1005054:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 1005058:	e03ffd05 	stb	zero,-12(fp)
 100505c:	00000806 	br	1005080 <OS_EventWaitListInit+0x4c>
        *ptbl++ = 0;
 1005060:	e0bffe17 	ldw	r2,-8(fp)
 1005064:	10000005 	stb	zero,0(r2)
 1005068:	e0bffe17 	ldw	r2,-8(fp)
 100506c:	10800044 	addi	r2,r2,1
 1005070:	e0bffe15 	stw	r2,-8(fp)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 1005074:	e0bffd03 	ldbu	r2,-12(fp)
 1005078:	10800044 	addi	r2,r2,1
 100507c:	e0bffd05 	stb	r2,-12(fp)
 1005080:	e0bffd03 	ldbu	r2,-12(fp)
 1005084:	108000f0 	cmpltui	r2,r2,3
 1005088:	103ff51e 	bne	r2,zero,1005060 <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
 100508c:	e037883a 	mov	sp,fp
 1005090:	df000017 	ldw	fp,0(sp)
 1005094:	dec00104 	addi	sp,sp,4
 1005098:	f800283a 	ret

0100509c <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
 100509c:	defffb04 	addi	sp,sp,-20
 10050a0:	dfc00415 	stw	ra,16(sp)
 10050a4:	df000315 	stw	fp,12(sp)
 10050a8:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
 10050ac:	010040b4 	movhi	r4,258
 10050b0:	21272b04 	addi	r4,r4,-25428
 10050b4:	0142d004 	movi	r5,2880
 10050b8:	10054000 	call	1005400 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
 10050bc:	008040b4 	movhi	r2,258
 10050c0:	10a72b04 	addi	r2,r2,-25428
 10050c4:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
 10050c8:	008040b4 	movhi	r2,258
 10050cc:	10a73704 	addi	r2,r2,-25380
 10050d0:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 10050d4:	e03fff0d 	sth	zero,-4(fp)
 10050d8:	00001306 	br	1005128 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
 10050dc:	e0bffe17 	ldw	r2,-8(fp)
 10050e0:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
 10050e4:	e0fffe17 	ldw	r3,-8(fp)
 10050e8:	e0bffd17 	ldw	r2,-12(fp)
 10050ec:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
 10050f0:	e0fffe17 	ldw	r3,-8(fp)
 10050f4:	00800fc4 	movi	r2,63
 10050f8:	18800385 	stb	r2,14(r3)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
 10050fc:	e0bffe17 	ldw	r2,-8(fp)
 1005100:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
 1005104:	e0bffe17 	ldw	r2,-8(fp)
 1005108:	10800c04 	addi	r2,r2,48
 100510c:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
 1005110:	e0bffd17 	ldw	r2,-12(fp)
 1005114:	10800c04 	addi	r2,r2,48
 1005118:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 100511c:	e0bfff0b 	ldhu	r2,-4(fp)
 1005120:	10800044 	addi	r2,r2,1
 1005124:	e0bfff0d 	sth	r2,-4(fp)
 1005128:	e0bfff0b 	ldhu	r2,-4(fp)
 100512c:	10800ef0 	cmpltui	r2,r2,59
 1005130:	103fea1e 	bne	r2,zero,10050dc <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
 1005134:	e0bffe17 	ldw	r2,-8(fp)
 1005138:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
 100513c:	e0bffe17 	ldw	r2,-8(fp)
 1005140:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
 1005144:	e0fffe17 	ldw	r3,-8(fp)
 1005148:	00800fc4 	movi	r2,63
 100514c:	18800385 	stb	r2,14(r3)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
 1005150:	e0bffe17 	ldw	r2,-8(fp)
 1005154:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
 1005158:	008040b4 	movhi	r2,258
 100515c:	10a72b04 	addi	r2,r2,-25428
 1005160:	d0a73815 	stw	r2,-25376(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
 1005164:	e037883a 	mov	sp,fp
 1005168:	dfc00117 	ldw	ra,4(sp)
 100516c:	df000017 	ldw	fp,0(sp)
 1005170:	dec00204 	addi	sp,sp,8
 1005174:	f800283a 	ret

01005178 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
 1005178:	deffff04 	addi	sp,sp,-4
 100517c:	df000015 	stw	fp,0(sp)
 1005180:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
 1005184:	d0273b15 	stw	zero,-25364(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
 1005188:	d0273905 	stb	zero,-25372(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
 100518c:	d0272b05 	stb	zero,-25428(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
 1005190:	d0273345 	stb	zero,-25395(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
 1005194:	d0272b45 	stb	zero,-25427(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
 1005198:	d0273015 	stw	zero,-25408(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
 100519c:	d0272c15 	stw	zero,-25424(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
 10051a0:	d0273e15 	stw	zero,-25352(gp)
    OSIdleCtrMax  = 0L;
 10051a4:	d0273115 	stw	zero,-25404(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
 10051a8:	d0273d05 	stb	zero,-25356(gp)
#endif
}
 10051ac:	e037883a 	mov	sp,fp
 10051b0:	df000017 	ldw	fp,0(sp)
 10051b4:	dec00104 	addi	sp,sp,4
 10051b8:	f800283a 	ret

010051bc <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
 10051bc:	defffd04 	addi	sp,sp,-12
 10051c0:	df000215 	stw	fp,8(sp)
 10051c4:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
 10051c8:	d0273705 	stb	zero,-25380(gp)
    prdytbl       = &OSRdyTbl[0];
 10051cc:	d0a73744 	addi	r2,gp,-25379
 10051d0:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 10051d4:	e03fff05 	stb	zero,-4(fp)
 10051d8:	00000806 	br	10051fc <OS_InitRdyList+0x40>
        *prdytbl++ = 0;
 10051dc:	e0bffe17 	ldw	r2,-8(fp)
 10051e0:	10000005 	stb	zero,0(r2)
 10051e4:	e0bffe17 	ldw	r2,-8(fp)
 10051e8:	10800044 	addi	r2,r2,1
 10051ec:	e0bffe15 	stw	r2,-8(fp)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 10051f0:	e0bfff03 	ldbu	r2,-4(fp)
 10051f4:	10800044 	addi	r2,r2,1
 10051f8:	e0bfff05 	stb	r2,-4(fp)
 10051fc:	e0bfff03 	ldbu	r2,-4(fp)
 1005200:	108000f0 	cmpltui	r2,r2,3
 1005204:	103ff51e 	bne	r2,zero,10051dc <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
 1005208:	d0272d45 	stb	zero,-25419(gp)
    OSPrioHighRdy = 0;
 100520c:	d0272d05 	stb	zero,-25420(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
 1005210:	d0273515 	stw	zero,-25388(gp)
    OSTCBCur      = (OS_TCB *)0;
 1005214:	d0273a15 	stw	zero,-25368(gp)
}
 1005218:	e037883a 	mov	sp,fp
 100521c:	df000017 	ldw	fp,0(sp)
 1005220:	dec00104 	addi	sp,sp,4
 1005224:	f800283a 	ret

01005228 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
 1005228:	defff804 	addi	sp,sp,-32
 100522c:	dfc00715 	stw	ra,28(sp)
 1005230:	df000615 	stw	fp,24(sp)
 1005234:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
 1005238:	018040b4 	movhi	r6,258
 100523c:	31a72a04 	addi	r6,r6,-25432
 1005240:	00bfffd4 	movui	r2,65535
 1005244:	d8800015 	stw	r2,0(sp)
 1005248:	008040b4 	movhi	r2,258
 100524c:	10a52b04 	addi	r2,r2,-27476
 1005250:	d8800115 	stw	r2,4(sp)
 1005254:	00808004 	movi	r2,512
 1005258:	d8800215 	stw	r2,8(sp)
 100525c:	d8000315 	stw	zero,12(sp)
 1005260:	008000c4 	movi	r2,3
 1005264:	d8800415 	stw	r2,16(sp)
 1005268:	01004034 	movhi	r4,256
 100526c:	2115b704 	addi	r4,r4,22236
 1005270:	000b883a 	mov	r5,zero
 1005274:	01c00504 	movi	r7,20
 1005278:	100a4c00 	call	100a4c0 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
 100527c:	01404074 	movhi	r5,257
 1005280:	29404b04 	addi	r5,r5,300
 1005284:	01000504 	movi	r4,20
 1005288:	e1bfff04 	addi	r6,fp,-4
 100528c:	100adf40 	call	100adf4 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
 1005290:	e037883a 	mov	sp,fp
 1005294:	dfc00117 	ldw	ra,4(sp)
 1005298:	df000017 	ldw	fp,0(sp)
 100529c:	dec00204 	addi	sp,sp,8
 10052a0:	f800283a 	ret

010052a4 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
 10052a4:	defff804 	addi	sp,sp,-32
 10052a8:	dfc00715 	stw	ra,28(sp)
 10052ac:	df000615 	stw	fp,24(sp)
 10052b0:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
 10052b4:	018040b4 	movhi	r6,258
 10052b8:	31a4b204 	addi	r6,r6,-27960
 10052bc:	00bfff94 	movui	r2,65534
 10052c0:	d8800015 	stw	r2,0(sp)
 10052c4:	008040b4 	movhi	r2,258
 10052c8:	10a2b304 	addi	r2,r2,-30004
 10052cc:	d8800115 	stw	r2,4(sp)
 10052d0:	00808004 	movi	r2,512
 10052d4:	d8800215 	stw	r2,8(sp)
 10052d8:	d8000315 	stw	zero,12(sp)
 10052dc:	008000c4 	movi	r2,3
 10052e0:	d8800415 	stw	r2,16(sp)
 10052e4:	01004034 	movhi	r4,256
 10052e8:	2115ce04 	addi	r4,r4,22328
 10052ec:	000b883a 	mov	r5,zero
 10052f0:	01c004c4 	movi	r7,19
 10052f4:	100a4c00 	call	100a4c0 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
 10052f8:	01404074 	movhi	r5,257
 10052fc:	29404f04 	addi	r5,r5,316
 1005300:	010004c4 	movi	r4,19
 1005304:	e1bfff04 	addi	r6,fp,-4
 1005308:	100adf40 	call	100adf4 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
 100530c:	e037883a 	mov	sp,fp
 1005310:	dfc00117 	ldw	ra,4(sp)
 1005314:	df000017 	ldw	fp,0(sp)
 1005318:	dec00204 	addi	sp,sp,8
 100531c:	f800283a 	ret

01005320 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
 1005320:	defffb04 	addi	sp,sp,-20
 1005324:	dfc00415 	stw	ra,16(sp)
 1005328:	df000315 	stw	fp,12(sp)
 100532c:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
 1005330:	010040b4 	movhi	r4,258
 1005334:	2129fb04 	addi	r4,r4,-22548
 1005338:	01414404 	movi	r5,1296
 100533c:	10054000 	call	1005400 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
 1005340:	010040b4 	movhi	r4,258
 1005344:	212b3f04 	addi	r4,r4,-21252
 1005348:	01401504 	movi	r5,84
 100534c:	10054000 	call	1005400 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
 1005350:	008040b4 	movhi	r2,258
 1005354:	10a9fb04 	addi	r2,r2,-22548
 1005358:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
 100535c:	008040b4 	movhi	r2,258
 1005360:	10aa1604 	addi	r2,r2,-22440
 1005364:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 1005368:	e03fff05 	stb	zero,-4(fp)
 100536c:	00001106 	br	10053b4 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
 1005370:	e0fffe17 	ldw	r3,-8(fp)
 1005374:	e0bffd17 	ldw	r2,-12(fp)
 1005378:	18800515 	stw	r2,20(r3)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
 100537c:	e0fffe17 	ldw	r3,-8(fp)
 1005380:	00800fc4 	movi	r2,63
 1005384:	18801305 	stb	r2,76(r3)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 1005388:	e0bffe17 	ldw	r2,-8(fp)
 100538c:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
 1005390:	e0bffe17 	ldw	r2,-8(fp)
 1005394:	10801b04 	addi	r2,r2,108
 1005398:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
 100539c:	e0bffd17 	ldw	r2,-12(fp)
 10053a0:	10801b04 	addi	r2,r2,108
 10053a4:	e0bffd15 	stw	r2,-12(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 10053a8:	e0bfff03 	ldbu	r2,-4(fp)
 10053ac:	10800044 	addi	r2,r2,1
 10053b0:	e0bfff05 	stb	r2,-4(fp)
 10053b4:	e0bfff03 	ldbu	r2,-4(fp)
 10053b8:	108002f0 	cmpltui	r2,r2,11
 10053bc:	103fec1e 	bne	r2,zero,1005370 <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
 10053c0:	e0bffe17 	ldw	r2,-8(fp)
 10053c4:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
 10053c8:	e0fffe17 	ldw	r3,-8(fp)
 10053cc:	00800fc4 	movi	r2,63
 10053d0:	18801305 	stb	r2,76(r3)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 10053d4:	e0bffe17 	ldw	r2,-8(fp)
 10053d8:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
 10053dc:	d0272e15 	stw	zero,-25416(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
 10053e0:	008040b4 	movhi	r2,258
 10053e4:	10a9fb04 	addi	r2,r2,-22548
 10053e8:	d0a73215 	stw	r2,-25400(gp)
}
 10053ec:	e037883a 	mov	sp,fp
 10053f0:	dfc00117 	ldw	ra,4(sp)
 10053f4:	df000017 	ldw	fp,0(sp)
 10053f8:	dec00204 	addi	sp,sp,8
 10053fc:	f800283a 	ret

01005400 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
 1005400:	defffd04 	addi	sp,sp,-12
 1005404:	df000215 	stw	fp,8(sp)
 1005408:	df000204 	addi	fp,sp,8
 100540c:	e13ffe15 	stw	r4,-8(fp)
 1005410:	e17fff0d 	sth	r5,-4(fp)
    while (size > 0) {
 1005414:	00000806 	br	1005438 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
 1005418:	e0bffe17 	ldw	r2,-8(fp)
 100541c:	10000005 	stb	zero,0(r2)
 1005420:	e0bffe17 	ldw	r2,-8(fp)
 1005424:	10800044 	addi	r2,r2,1
 1005428:	e0bffe15 	stw	r2,-8(fp)
        size--;
 100542c:	e0bfff0b 	ldhu	r2,-4(fp)
 1005430:	10bfffc4 	addi	r2,r2,-1
 1005434:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
 1005438:	e0bfff0b 	ldhu	r2,-4(fp)
 100543c:	1004c03a 	cmpne	r2,r2,zero
 1005440:	103ff51e 	bne	r2,zero,1005418 <OS_MemClr+0x18>
        *pdest++ = (INT8U)0;
        size--;
    }
}
 1005444:	e037883a 	mov	sp,fp
 1005448:	df000017 	ldw	fp,0(sp)
 100544c:	dec00104 	addi	sp,sp,4
 1005450:	f800283a 	ret

01005454 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
 1005454:	defffc04 	addi	sp,sp,-16
 1005458:	df000315 	stw	fp,12(sp)
 100545c:	df000304 	addi	fp,sp,12
 1005460:	e13ffd15 	stw	r4,-12(fp)
 1005464:	e17ffe15 	stw	r5,-8(fp)
 1005468:	e1bfff0d 	sth	r6,-4(fp)
    while (size > 0) {
 100546c:	00000d06 	br	10054a4 <OS_MemCopy+0x50>
        *pdest++ = *psrc++;
 1005470:	e0bffe17 	ldw	r2,-8(fp)
 1005474:	10c00003 	ldbu	r3,0(r2)
 1005478:	e0bffd17 	ldw	r2,-12(fp)
 100547c:	10c00005 	stb	r3,0(r2)
 1005480:	e0bffd17 	ldw	r2,-12(fp)
 1005484:	10800044 	addi	r2,r2,1
 1005488:	e0bffd15 	stw	r2,-12(fp)
 100548c:	e0bffe17 	ldw	r2,-8(fp)
 1005490:	10800044 	addi	r2,r2,1
 1005494:	e0bffe15 	stw	r2,-8(fp)
        size--;
 1005498:	e0bfff0b 	ldhu	r2,-4(fp)
 100549c:	10bfffc4 	addi	r2,r2,-1
 10054a0:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
 10054a4:	e0bfff0b 	ldhu	r2,-4(fp)
 10054a8:	1004c03a 	cmpne	r2,r2,zero
 10054ac:	103ff01e 	bne	r2,zero,1005470 <OS_MemCopy+0x1c>
        *pdest++ = *psrc++;
        size--;
    }
}
 10054b0:	e037883a 	mov	sp,fp
 10054b4:	df000017 	ldw	fp,0(sp)
 10054b8:	dec00104 	addi	sp,sp,4
 10054bc:	f800283a 	ret

010054c0 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
 10054c0:	defffb04 	addi	sp,sp,-20
 10054c4:	dfc00415 	stw	ra,16(sp)
 10054c8:	df000315 	stw	fp,12(sp)
 10054cc:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 10054d0:	e03fff15 	stw	zero,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10054d4:	0005303a 	rdctl	r2,status
 10054d8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10054dc:	e0fffe17 	ldw	r3,-8(fp)
 10054e0:	00bfff84 	movi	r2,-2
 10054e4:	1884703a 	and	r2,r3,r2
 10054e8:	1001703a 	wrctl	status,r2
  
  return context;
 10054ec:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
 10054f0:	e0bfff15 	stw	r2,-4(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
 10054f4:	d0a73903 	ldbu	r2,-25372(gp)
 10054f8:	10803fcc 	andi	r2,r2,255
 10054fc:	1004c03a 	cmpne	r2,r2,zero
 1005500:	10001b1e 	bne	r2,zero,1005570 <OS_Sched+0xb0>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
 1005504:	d0a72b03 	ldbu	r2,-25428(gp)
 1005508:	10803fcc 	andi	r2,r2,255
 100550c:	1004c03a 	cmpne	r2,r2,zero
 1005510:	1000171e 	bne	r2,zero,1005570 <OS_Sched+0xb0>
            OS_SchedNew();
 1005514:	10055940 	call	1005594 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
 1005518:	d0a72d03 	ldbu	r2,-25420(gp)
 100551c:	d0e72d43 	ldbu	r3,-25419(gp)
 1005520:	11003fcc 	andi	r4,r2,255
 1005524:	18803fcc 	andi	r2,r3,255
 1005528:	20801126 	beq	r4,r2,1005570 <OS_Sched+0xb0>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 100552c:	d0a72d03 	ldbu	r2,-25420(gp)
 1005530:	10803fcc 	andi	r2,r2,255
 1005534:	00c040b4 	movhi	r3,258
 1005538:	18eb3f04 	addi	r3,r3,-21252
 100553c:	1085883a 	add	r2,r2,r2
 1005540:	1085883a 	add	r2,r2,r2
 1005544:	10c5883a 	add	r2,r2,r3
 1005548:	10800017 	ldw	r2,0(r2)
 100554c:	d0a73515 	stw	r2,-25388(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
 1005550:	d0e73517 	ldw	r3,-25388(gp)
 1005554:	18800e17 	ldw	r2,56(r3)
 1005558:	10800044 	addi	r2,r2,1
 100555c:	18800e15 	stw	r2,56(r3)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
 1005560:	d0a73017 	ldw	r2,-25408(gp)
 1005564:	10800044 	addi	r2,r2,1
 1005568:	d0a73015 	stw	r2,-25408(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
 100556c:	100ddfc0 	call	100ddfc <OSCtxSw>
 1005570:	e0bfff17 	ldw	r2,-4(fp)
 1005574:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1005578:	e0bffd17 	ldw	r2,-12(fp)
 100557c:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
 1005580:	e037883a 	mov	sp,fp
 1005584:	dfc00117 	ldw	ra,4(sp)
 1005588:	df000017 	ldw	fp,0(sp)
 100558c:	dec00204 	addi	sp,sp,8
 1005590:	f800283a 	ret

01005594 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
 1005594:	defffe04 	addi	sp,sp,-8
 1005598:	df000115 	stw	fp,4(sp)
 100559c:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
 10055a0:	d0a73703 	ldbu	r2,-25380(gp)
 10055a4:	10c03fcc 	andi	r3,r2,255
 10055a8:	00804074 	movhi	r2,257
 10055ac:	10800b04 	addi	r2,r2,44
 10055b0:	10c5883a 	add	r2,r2,r3
 10055b4:	10800003 	ldbu	r2,0(r2)
 10055b8:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
 10055bc:	e0bfff03 	ldbu	r2,-4(fp)
 10055c0:	100490fa 	slli	r2,r2,3
 10055c4:	1009883a 	mov	r4,r2
 10055c8:	e0ffff03 	ldbu	r3,-4(fp)
 10055cc:	d0a73744 	addi	r2,gp,-25379
 10055d0:	1885883a 	add	r2,r3,r2
 10055d4:	10800003 	ldbu	r2,0(r2)
 10055d8:	10c03fcc 	andi	r3,r2,255
 10055dc:	00804074 	movhi	r2,257
 10055e0:	10800b04 	addi	r2,r2,44
 10055e4:	10c5883a 	add	r2,r2,r3
 10055e8:	10800003 	ldbu	r2,0(r2)
 10055ec:	2085883a 	add	r2,r4,r2
 10055f0:	d0a72d05 	stb	r2,-25420(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
 10055f4:	e037883a 	mov	sp,fp
 10055f8:	df000017 	ldw	fp,0(sp)
 10055fc:	dec00104 	addi	sp,sp,4
 1005600:	f800283a 	ret

01005604 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
 1005604:	defffc04 	addi	sp,sp,-16
 1005608:	df000315 	stw	fp,12(sp)
 100560c:	df000304 	addi	fp,sp,12
 1005610:	e13ffe15 	stw	r4,-8(fp)
 1005614:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
 1005618:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
 100561c:	00000d06 	br	1005654 <OS_StrCopy+0x50>
        *pdest++ = *psrc++;
 1005620:	e0bfff17 	ldw	r2,-4(fp)
 1005624:	10c00003 	ldbu	r3,0(r2)
 1005628:	e0bffe17 	ldw	r2,-8(fp)
 100562c:	10c00005 	stb	r3,0(r2)
 1005630:	e0bffe17 	ldw	r2,-8(fp)
 1005634:	10800044 	addi	r2,r2,1
 1005638:	e0bffe15 	stw	r2,-8(fp)
 100563c:	e0bfff17 	ldw	r2,-4(fp)
 1005640:	10800044 	addi	r2,r2,1
 1005644:	e0bfff15 	stw	r2,-4(fp)
        len++;
 1005648:	e0bffd03 	ldbu	r2,-12(fp)
 100564c:	10800044 	addi	r2,r2,1
 1005650:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 1005654:	e0bfff17 	ldw	r2,-4(fp)
 1005658:	10800003 	ldbu	r2,0(r2)
 100565c:	10803fcc 	andi	r2,r2,255
 1005660:	1004c03a 	cmpne	r2,r2,zero
 1005664:	103fee1e 	bne	r2,zero,1005620 <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
 1005668:	e0bffe17 	ldw	r2,-8(fp)
 100566c:	10000005 	stb	zero,0(r2)
    return (len);
 1005670:	e0bffd03 	ldbu	r2,-12(fp)
}
 1005674:	e037883a 	mov	sp,fp
 1005678:	df000017 	ldw	fp,0(sp)
 100567c:	dec00104 	addi	sp,sp,4
 1005680:	f800283a 	ret

01005684 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
 1005684:	defffd04 	addi	sp,sp,-12
 1005688:	df000215 	stw	fp,8(sp)
 100568c:	df000204 	addi	fp,sp,8
 1005690:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
 1005694:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
 1005698:	00000606 	br	10056b4 <OS_StrLen+0x30>
        psrc++;
 100569c:	e0bfff17 	ldw	r2,-4(fp)
 10056a0:	10800044 	addi	r2,r2,1
 10056a4:	e0bfff15 	stw	r2,-4(fp)
        len++;
 10056a8:	e0bffe03 	ldbu	r2,-8(fp)
 10056ac:	10800044 	addi	r2,r2,1
 10056b0:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 10056b4:	e0bfff17 	ldw	r2,-4(fp)
 10056b8:	10800003 	ldbu	r2,0(r2)
 10056bc:	10803fcc 	andi	r2,r2,255
 10056c0:	1004c03a 	cmpne	r2,r2,zero
 10056c4:	103ff51e 	bne	r2,zero,100569c <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
 10056c8:	e0bffe03 	ldbu	r2,-8(fp)
}
 10056cc:	e037883a 	mov	sp,fp
 10056d0:	df000017 	ldw	fp,0(sp)
 10056d4:	dec00104 	addi	sp,sp,4
 10056d8:	f800283a 	ret

010056dc <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
 10056dc:	defffa04 	addi	sp,sp,-24
 10056e0:	dfc00515 	stw	ra,20(sp)
 10056e4:	df000415 	stw	fp,16(sp)
 10056e8:	df000404 	addi	fp,sp,16
 10056ec:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 10056f0:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10056f4:	0005303a 	rdctl	r2,status
 10056f8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10056fc:	e0fffd17 	ldw	r3,-12(fp)
 1005700:	00bfff84 	movi	r2,-2
 1005704:	1884703a 	and	r2,r3,r2
 1005708:	1001703a 	wrctl	status,r2
  
  return context;
 100570c:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
 1005710:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtr++;
 1005714:	d0a72c17 	ldw	r2,-25424(gp)
 1005718:	10800044 	addi	r2,r2,1
 100571c:	d0a72c15 	stw	r2,-25424(gp)
 1005720:	e0bffe17 	ldw	r2,-8(fp)
 1005724:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1005728:	e0bffc17 	ldw	r2,-16(fp)
 100572c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
 1005730:	100e2a80 	call	100e2a8 <OSTaskIdleHook>
    }
 1005734:	003fef06 	br	10056f4 <OS_TaskIdle+0x18>

01005738 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
 1005738:	defffa04 	addi	sp,sp,-24
 100573c:	dfc00515 	stw	ra,20(sp)
 1005740:	df000415 	stw	fp,16(sp)
 1005744:	df000404 	addi	fp,sp,16
 1005748:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 100574c:	e03ffe15 	stw	zero,-8(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 1005750:	00000206 	br	100575c <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
 1005754:	01003204 	movi	r4,200
 1005758:	100b7b80 	call	100b7b8 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 100575c:	d0a73d03 	ldbu	r2,-25356(gp)
 1005760:	10803fcc 	andi	r2,r2,255
 1005764:	1005003a 	cmpeq	r2,r2,zero
 1005768:	103ffa1e 	bne	r2,zero,1005754 <OS_TaskStat+0x1c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
 100576c:	d1273117 	ldw	r4,-25404(gp)
 1005770:	01401904 	movi	r5,100
 1005774:	100f8a40 	call	100f8a4 <__udivsi3>
 1005778:	d0a73115 	stw	r2,-25404(gp)
    if (OSIdleCtrMax == 0L) {
 100577c:	d0a73117 	ldw	r2,-25404(gp)
 1005780:	1004c03a 	cmpne	r2,r2,zero
 1005784:	1000031e 	bne	r2,zero,1005794 <OS_TaskStat+0x5c>
        OSCPUUsage = 0;
 1005788:	d0273305 	stb	zero,-25396(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
 100578c:	01003fc4 	movi	r4,255
 1005790:	100b3cc0 	call	100b3cc <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1005794:	0005303a 	rdctl	r2,status
 1005798:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100579c:	e0fffd17 	ldw	r3,-12(fp)
 10057a0:	00bfff84 	movi	r2,-2
 10057a4:	1884703a 	and	r2,r3,r2
 10057a8:	1001703a 	wrctl	status,r2
  
  return context;
 10057ac:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
 10057b0:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
 10057b4:	d0a72c17 	ldw	r2,-25424(gp)
 10057b8:	d0a73e15 	stw	r2,-25352(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
 10057bc:	d0272c15 	stw	zero,-25424(gp)
 10057c0:	e0bffe17 	ldw	r2,-8(fp)
 10057c4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10057c8:	e0bffc17 	ldw	r2,-16(fp)
 10057cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
 10057d0:	d1273e17 	ldw	r4,-25352(gp)
 10057d4:	d1673117 	ldw	r5,-25404(gp)
 10057d8:	100f8a40 	call	100f8a4 <__udivsi3>
 10057dc:	1007883a 	mov	r3,r2
 10057e0:	00801904 	movi	r2,100
 10057e4:	10c5c83a 	sub	r2,r2,r3
 10057e8:	d0a73305 	stb	r2,-25396(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
 10057ec:	100e2380 	call	100e238 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
 10057f0:	10058000 	call	1005800 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
 10057f4:	01001904 	movi	r4,100
 10057f8:	100b7b80 	call	100b7b8 <OSTimeDly>
    }
 10057fc:	003fe506 	br	1005794 <OS_TaskStat+0x5c>

01005800 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
 1005800:	defffa04 	addi	sp,sp,-24
 1005804:	dfc00515 	stw	ra,20(sp)
 1005808:	df000415 	stw	fp,16(sp)
 100580c:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 1005810:	e03ffc05 	stb	zero,-16(fp)
 1005814:	00002406 	br	10058a8 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
 1005818:	e13ffc03 	ldbu	r4,-16(fp)
 100581c:	e17ffe04 	addi	r5,fp,-8
 1005820:	100b1d00 	call	100b1d0 <OSTaskStkChk>
 1005824:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
 1005828:	e0bffc43 	ldbu	r2,-15(fp)
 100582c:	1004c03a 	cmpne	r2,r2,zero
 1005830:	10001a1e 	bne	r2,zero,100589c <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
 1005834:	e0bffc03 	ldbu	r2,-16(fp)
 1005838:	00c040b4 	movhi	r3,258
 100583c:	18eb3f04 	addi	r3,r3,-21252
 1005840:	1085883a 	add	r2,r2,r2
 1005844:	1085883a 	add	r2,r2,r2
 1005848:	10c5883a 	add	r2,r2,r3
 100584c:	10800017 	ldw	r2,0(r2)
 1005850:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
 1005854:	e0bffd17 	ldw	r2,-12(fp)
 1005858:	1005003a 	cmpeq	r2,r2,zero
 100585c:	10000f1e 	bne	r2,zero,100589c <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
 1005860:	e0bffd17 	ldw	r2,-12(fp)
 1005864:	10800060 	cmpeqi	r2,r2,1
 1005868:	10000c1e 	bne	r2,zero,100589c <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
 100586c:	e0bffd17 	ldw	r2,-12(fp)
 1005870:	10c00217 	ldw	r3,8(r2)
 1005874:	e0bffd17 	ldw	r2,-12(fp)
 1005878:	10800317 	ldw	r2,12(r2)
 100587c:	1085883a 	add	r2,r2,r2
 1005880:	1085883a 	add	r2,r2,r2
 1005884:	1887883a 	add	r3,r3,r2
 1005888:	e0bffd17 	ldw	r2,-12(fp)
 100588c:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
 1005890:	e0ffff17 	ldw	r3,-4(fp)
 1005894:	e0bffd17 	ldw	r2,-12(fp)
 1005898:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 100589c:	e0bffc03 	ldbu	r2,-16(fp)
 10058a0:	10800044 	addi	r2,r2,1
 10058a4:	e0bffc05 	stb	r2,-16(fp)
 10058a8:	e0bffc03 	ldbu	r2,-16(fp)
 10058ac:	10800570 	cmpltui	r2,r2,21
 10058b0:	103fd91e 	bne	r2,zero,1005818 <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
 10058b4:	e037883a 	mov	sp,fp
 10058b8:	dfc00117 	ldw	ra,4(sp)
 10058bc:	df000017 	ldw	fp,0(sp)
 10058c0:	dec00204 	addi	sp,sp,8
 10058c4:	f800283a 	ret

010058c8 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
 10058c8:	defff104 	addi	sp,sp,-60
 10058cc:	dfc00e15 	stw	ra,56(sp)
 10058d0:	df000d15 	stw	fp,52(sp)
 10058d4:	df000d04 	addi	fp,sp,52
 10058d8:	e17ffb15 	stw	r5,-20(fp)
 10058dc:	e1bffc15 	stw	r6,-16(fp)
 10058e0:	e0800417 	ldw	r2,16(fp)
 10058e4:	e13ffa05 	stb	r4,-24(fp)
 10058e8:	e1fffd0d 	sth	r7,-12(fp)
 10058ec:	e0bffe0d 	sth	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 10058f0:	e03ff815 	stw	zero,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10058f4:	0005303a 	rdctl	r2,status
 10058f8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10058fc:	e0fff717 	ldw	r3,-36(fp)
 1005900:	00bfff84 	movi	r2,-2
 1005904:	1884703a 	and	r2,r3,r2
 1005908:	1001703a 	wrctl	status,r2
  
  return context;
 100590c:	e0bff717 	ldw	r2,-36(fp)
#endif



    OS_ENTER_CRITICAL();
 1005910:	e0bff815 	stw	r2,-32(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
 1005914:	d0a73217 	ldw	r2,-25400(gp)
 1005918:	e0bff915 	stw	r2,-28(fp)
    if (ptcb != (OS_TCB *)0) {
 100591c:	e0bff917 	ldw	r2,-28(fp)
 1005920:	1005003a 	cmpeq	r2,r2,zero
 1005924:	1000941e 	bne	r2,zero,1005b78 <OS_TCBInit+0x2b0>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
 1005928:	e0bff917 	ldw	r2,-28(fp)
 100592c:	10800517 	ldw	r2,20(r2)
 1005930:	d0a73215 	stw	r2,-25400(gp)
 1005934:	e0bff817 	ldw	r2,-32(fp)
 1005938:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100593c:	e0bff617 	ldw	r2,-40(fp)
 1005940:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
 1005944:	e0fff917 	ldw	r3,-28(fp)
 1005948:	e0bffb17 	ldw	r2,-20(fp)
 100594c:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
 1005950:	e0fff917 	ldw	r3,-28(fp)
 1005954:	e0bffa03 	ldbu	r2,-24(fp)
 1005958:	18800c85 	stb	r2,50(r3)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
 100595c:	e0bff917 	ldw	r2,-28(fp)
 1005960:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
 1005964:	e0bff917 	ldw	r2,-28(fp)
 1005968:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
 100596c:	e0bff917 	ldw	r2,-28(fp)
 1005970:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
 1005974:	e0fff917 	ldw	r3,-28(fp)
 1005978:	e0800317 	ldw	r2,12(fp)
 100597c:	18800115 	stw	r2,4(r3)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
 1005980:	e0fff917 	ldw	r3,-28(fp)
 1005984:	e0800217 	ldw	r2,8(fp)
 1005988:	18800315 	stw	r2,12(r3)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
 100598c:	e0fff917 	ldw	r3,-28(fp)
 1005990:	e0bffc17 	ldw	r2,-16(fp)
 1005994:	18800215 	stw	r2,8(r3)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
 1005998:	e0fff917 	ldw	r3,-28(fp)
 100599c:	e0bffe0b 	ldhu	r2,-8(fp)
 10059a0:	1880040d 	sth	r2,16(r3)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
 10059a4:	e0fff917 	ldw	r3,-28(fp)
 10059a8:	e0bffd0b 	ldhu	r2,-12(fp)
 10059ac:	1880048d 	sth	r2,18(r3)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
 10059b0:	e0bff917 	ldw	r2,-28(fp)
 10059b4:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
 10059b8:	e0bffa03 	ldbu	r2,-24(fp)
 10059bc:	1004d0fa 	srli	r2,r2,3
 10059c0:	1007883a 	mov	r3,r2
 10059c4:	e0bff917 	ldw	r2,-28(fp)
 10059c8:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
 10059cc:	e0bffa03 	ldbu	r2,-24(fp)
 10059d0:	108001cc 	andi	r2,r2,7
 10059d4:	1007883a 	mov	r3,r2
 10059d8:	e0bff917 	ldw	r2,-28(fp)
 10059dc:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
 10059e0:	e0bff917 	ldw	r2,-28(fp)
 10059e4:	10800d03 	ldbu	r2,52(r2)
 10059e8:	10c03fcc 	andi	r3,r2,255
 10059ec:	00800044 	movi	r2,1
 10059f0:	10c4983a 	sll	r2,r2,r3
 10059f4:	1007883a 	mov	r3,r2
 10059f8:	e0bff917 	ldw	r2,-28(fp)
 10059fc:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
 1005a00:	e0bff917 	ldw	r2,-28(fp)
 1005a04:	10800cc3 	ldbu	r2,51(r2)
 1005a08:	10c03fcc 	andi	r3,r2,255
 1005a0c:	00800044 	movi	r2,1
 1005a10:	10c4983a 	sll	r2,r2,r3
 1005a14:	1007883a 	mov	r3,r2
 1005a18:	e0bff917 	ldw	r2,-28(fp)
 1005a1c:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
 1005a20:	e0bff917 	ldw	r2,-28(fp)
 1005a24:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
 1005a28:	e0bff917 	ldw	r2,-28(fp)
 1005a2c:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
 1005a30:	e0bff917 	ldw	r2,-28(fp)
 1005a34:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
 1005a38:	e0bff917 	ldw	r2,-28(fp)
 1005a3c:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
 1005a40:	e0bff917 	ldw	r2,-28(fp)
 1005a44:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
 1005a48:	e0bff917 	ldw	r2,-28(fp)
 1005a4c:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
 1005a50:	e0bff917 	ldw	r2,-28(fp)
 1005a54:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
 1005a58:	e0bff917 	ldw	r2,-28(fp)
 1005a5c:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
 1005a60:	e0bff917 	ldw	r2,-28(fp)
 1005a64:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
 1005a68:	e0fff917 	ldw	r3,-28(fp)
 1005a6c:	00800fc4 	movi	r2,63
 1005a70:	18801305 	stb	r2,76(r3)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 1005a74:	e0bff917 	ldw	r2,-28(fp)
 1005a78:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
 1005a7c:	e13ff917 	ldw	r4,-28(fp)
 1005a80:	100e2c40 	call	100e2c4 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
 1005a84:	e13ff917 	ldw	r4,-28(fp)
 1005a88:	100e1dc0 	call	100e1dc <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1005a8c:	0005303a 	rdctl	r2,status
 1005a90:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1005a94:	e0fff517 	ldw	r3,-44(fp)
 1005a98:	00bfff84 	movi	r2,-2
 1005a9c:	1884703a 	and	r2,r3,r2
 1005aa0:	1001703a 	wrctl	status,r2
  
  return context;
 1005aa4:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
 1005aa8:	e0bff815 	stw	r2,-32(fp)
        OSTCBPrioTbl[prio] = ptcb;
 1005aac:	e0bffa03 	ldbu	r2,-24(fp)
 1005ab0:	00c040b4 	movhi	r3,258
 1005ab4:	18eb3f04 	addi	r3,r3,-21252
 1005ab8:	1085883a 	add	r2,r2,r2
 1005abc:	1085883a 	add	r2,r2,r2
 1005ac0:	10c7883a 	add	r3,r2,r3
 1005ac4:	e0bff917 	ldw	r2,-28(fp)
 1005ac8:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
 1005acc:	d0e72e17 	ldw	r3,-25416(gp)
 1005ad0:	e0bff917 	ldw	r2,-28(fp)
 1005ad4:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
 1005ad8:	e0bff917 	ldw	r2,-28(fp)
 1005adc:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
 1005ae0:	d0a72e17 	ldw	r2,-25416(gp)
 1005ae4:	1005003a 	cmpeq	r2,r2,zero
 1005ae8:	1000031e 	bne	r2,zero,1005af8 <OS_TCBInit+0x230>
            OSTCBList->OSTCBPrev = ptcb;
 1005aec:	d0e72e17 	ldw	r3,-25416(gp)
 1005af0:	e0bff917 	ldw	r2,-28(fp)
 1005af4:	18800615 	stw	r2,24(r3)
        }
        OSTCBList               = ptcb;
 1005af8:	e0bff917 	ldw	r2,-28(fp)
 1005afc:	d0a72e15 	stw	r2,-25416(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
 1005b00:	e0bff917 	ldw	r2,-28(fp)
 1005b04:	10c00d83 	ldbu	r3,54(r2)
 1005b08:	d0a73703 	ldbu	r2,-25380(gp)
 1005b0c:	1884b03a 	or	r2,r3,r2
 1005b10:	d0a73705 	stb	r2,-25380(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 1005b14:	e0bff917 	ldw	r2,-28(fp)
 1005b18:	10800d03 	ldbu	r2,52(r2)
 1005b1c:	11003fcc 	andi	r4,r2,255
 1005b20:	e0bff917 	ldw	r2,-28(fp)
 1005b24:	10800d03 	ldbu	r2,52(r2)
 1005b28:	10c03fcc 	andi	r3,r2,255
 1005b2c:	d0a73744 	addi	r2,gp,-25379
 1005b30:	1885883a 	add	r2,r3,r2
 1005b34:	10c00003 	ldbu	r3,0(r2)
 1005b38:	e0bff917 	ldw	r2,-28(fp)
 1005b3c:	10800d43 	ldbu	r2,53(r2)
 1005b40:	1884b03a 	or	r2,r3,r2
 1005b44:	1007883a 	mov	r3,r2
 1005b48:	d0a73744 	addi	r2,gp,-25379
 1005b4c:	2085883a 	add	r2,r4,r2
 1005b50:	10c00005 	stb	r3,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
 1005b54:	d0a73343 	ldbu	r2,-25395(gp)
 1005b58:	10800044 	addi	r2,r2,1
 1005b5c:	d0a73345 	stb	r2,-25395(gp)
 1005b60:	e0bff817 	ldw	r2,-32(fp)
 1005b64:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1005b68:	e0bff417 	ldw	r2,-48(fp)
 1005b6c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 1005b70:	e03fff15 	stw	zero,-4(fp)
 1005b74:	00000606 	br	1005b90 <OS_TCBInit+0x2c8>
 1005b78:	e0bff817 	ldw	r2,-32(fp)
 1005b7c:	e0bff315 	stw	r2,-52(fp)
 1005b80:	e0bff317 	ldw	r2,-52(fp)
 1005b84:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
 1005b88:	00801084 	movi	r2,66
 1005b8c:	e0bfff15 	stw	r2,-4(fp)
 1005b90:	e0bfff17 	ldw	r2,-4(fp)
}
 1005b94:	e037883a 	mov	sp,fp
 1005b98:	dfc00117 	ldw	ra,4(sp)
 1005b9c:	df000017 	ldw	fp,0(sp)
 1005ba0:	dec00204 	addi	sp,sp,8
 1005ba4:	f800283a 	ret

01005ba8 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
 1005ba8:	defffe04 	addi	sp,sp,-8
 1005bac:	df000115 	stw	fp,4(sp)
 1005bb0:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
 1005bb4:	d0a00d04 	addi	r2,gp,-32716
 1005bb8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
 1005bbc:	d0a00e04 	addi	r2,gp,-32712
 1005bc0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
 1005bc4:	d0a00f84 	addi	r2,gp,-32706
 1005bc8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
 1005bcc:	d0a01004 	addi	r2,gp,-32704
 1005bd0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
 1005bd4:	d0a00f04 	addi	r2,gp,-32708
 1005bd8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
 1005bdc:	d0a01084 	addi	r2,gp,-32702
 1005be0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
 1005be4:	d0a01104 	addi	r2,gp,-32700
 1005be8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
 1005bec:	d0a01184 	addi	r2,gp,-32698
 1005bf0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
 1005bf4:	d0a01204 	addi	r2,gp,-32696
 1005bf8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
 1005bfc:	d0a01284 	addi	r2,gp,-32694
 1005c00:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
 1005c04:	d0a01304 	addi	r2,gp,-32692
 1005c08:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
 1005c0c:	d0a01384 	addi	r2,gp,-32690
 1005c10:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
 1005c14:	d0a01404 	addi	r2,gp,-32688
 1005c18:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
 1005c1c:	d0a01484 	addi	r2,gp,-32686
 1005c20:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
 1005c24:	d0a01504 	addi	r2,gp,-32684
 1005c28:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
 1005c2c:	d0a01584 	addi	r2,gp,-32682
 1005c30:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
 1005c34:	d0a01604 	addi	r2,gp,-32680
 1005c38:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
 1005c3c:	d0a01684 	addi	r2,gp,-32678
 1005c40:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
 1005c44:	d0a01704 	addi	r2,gp,-32676
 1005c48:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
 1005c4c:	d0a01784 	addi	r2,gp,-32674
 1005c50:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
 1005c54:	d0a01804 	addi	r2,gp,-32672
 1005c58:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
 1005c5c:	d0a01884 	addi	r2,gp,-32670
 1005c60:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
 1005c64:	d0a01904 	addi	r2,gp,-32668
 1005c68:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
 1005c6c:	d0a01984 	addi	r2,gp,-32666
 1005c70:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
 1005c74:	d0a01a04 	addi	r2,gp,-32664
 1005c78:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
 1005c7c:	d0a01a84 	addi	r2,gp,-32662
 1005c80:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
 1005c84:	d0a01b04 	addi	r2,gp,-32660
 1005c88:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
 1005c8c:	d0a01b84 	addi	r2,gp,-32658
 1005c90:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
 1005c94:	d0a01c04 	addi	r2,gp,-32656
 1005c98:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
 1005c9c:	d0a01c84 	addi	r2,gp,-32654
 1005ca0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
 1005ca4:	d0a01d04 	addi	r2,gp,-32652
 1005ca8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
 1005cac:	d0a01d84 	addi	r2,gp,-32650
 1005cb0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
 1005cb4:	d0a01e04 	addi	r2,gp,-32648
 1005cb8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
 1005cbc:	d0a01e84 	addi	r2,gp,-32646
 1005cc0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
 1005cc4:	d0a01f04 	addi	r2,gp,-32644
 1005cc8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
 1005ccc:	d0a01f84 	addi	r2,gp,-32642
 1005cd0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
 1005cd4:	d0a02004 	addi	r2,gp,-32640
 1005cd8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
 1005cdc:	d0a02084 	addi	r2,gp,-32638
 1005ce0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
 1005ce4:	d0a02104 	addi	r2,gp,-32636
 1005ce8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
 1005cec:	d0a02184 	addi	r2,gp,-32634
 1005cf0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
 1005cf4:	d0a02204 	addi	r2,gp,-32632
 1005cf8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
 1005cfc:	d0a02284 	addi	r2,gp,-32630
 1005d00:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
 1005d04:	d0a02304 	addi	r2,gp,-32628
 1005d08:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
 1005d0c:	d0a02384 	addi	r2,gp,-32626
 1005d10:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
 1005d14:	d0a02404 	addi	r2,gp,-32624
 1005d18:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
 1005d1c:	d0a02904 	addi	r2,gp,-32604
 1005d20:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
 1005d24:	e037883a 	mov	sp,fp
 1005d28:	df000017 	ldw	fp,0(sp)
 1005d2c:	dec00104 	addi	sp,sp,4
 1005d30:	f800283a 	ret

01005d34 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
 1005d34:	defff104 	addi	sp,sp,-60
 1005d38:	df000e15 	stw	fp,56(sp)
 1005d3c:	df000e04 	addi	fp,sp,56
 1005d40:	e13ffa15 	stw	r4,-24(fp)
 1005d44:	e1fffd15 	stw	r7,-12(fp)
 1005d48:	e17ffb0d 	sth	r5,-20(fp)
 1005d4c:	e1bffc05 	stb	r6,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 1005d50:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 1005d54:	e0bffd17 	ldw	r2,-12(fp)
 1005d58:	1004c03a 	cmpne	r2,r2,zero
 1005d5c:	1000021e 	bne	r2,zero,1005d68 <OSFlagAccept+0x34>
        return ((OS_FLAGS)0);
 1005d60:	e03fff15 	stw	zero,-4(fp)
 1005d64:	0000bb06 	br	1006054 <OSFlagAccept+0x320>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 1005d68:	e0bffa17 	ldw	r2,-24(fp)
 1005d6c:	1004c03a 	cmpne	r2,r2,zero
 1005d70:	1000051e 	bne	r2,zero,1005d88 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 1005d74:	e0fffd17 	ldw	r3,-12(fp)
 1005d78:	00801b84 	movi	r2,110
 1005d7c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 1005d80:	e03fff15 	stw	zero,-4(fp)
 1005d84:	0000b306 	br	1006054 <OSFlagAccept+0x320>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 1005d88:	e0bffa17 	ldw	r2,-24(fp)
 1005d8c:	10800003 	ldbu	r2,0(r2)
 1005d90:	10803fcc 	andi	r2,r2,255
 1005d94:	10800160 	cmpeqi	r2,r2,5
 1005d98:	1000051e 	bne	r2,zero,1005db0 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 1005d9c:	e0fffd17 	ldw	r3,-12(fp)
 1005da0:	00800044 	movi	r2,1
 1005da4:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 1005da8:	e03fff15 	stw	zero,-4(fp)
 1005dac:	0000a906 	br	1006054 <OSFlagAccept+0x320>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 1005db0:	e0fffc03 	ldbu	r3,-16(fp)
 1005db4:	00bfe004 	movi	r2,-128
 1005db8:	1884703a 	and	r2,r3,r2
 1005dbc:	e0bff945 	stb	r2,-27(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
 1005dc0:	e0bff943 	ldbu	r2,-27(fp)
 1005dc4:	1005003a 	cmpeq	r2,r2,zero
 1005dc8:	1000061e 	bne	r2,zero,1005de4 <OSFlagAccept+0xb0>
        wait_type &= ~OS_FLAG_CONSUME;
 1005dcc:	e0bffc03 	ldbu	r2,-16(fp)
 1005dd0:	10801fcc 	andi	r2,r2,127
 1005dd4:	e0bffc05 	stb	r2,-16(fp)
        consume    = OS_TRUE;
 1005dd8:	00800044 	movi	r2,1
 1005ddc:	e0bff905 	stb	r2,-28(fp)
 1005de0:	00000106 	br	1005de8 <OSFlagAccept+0xb4>
    } else {
        consume    = OS_FALSE;
 1005de4:	e03ff905 	stb	zero,-28(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
 1005de8:	e0bffd17 	ldw	r2,-12(fp)
 1005dec:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1005df0:	0005303a 	rdctl	r2,status
 1005df4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1005df8:	e0fff717 	ldw	r3,-36(fp)
 1005dfc:	00bfff84 	movi	r2,-2
 1005e00:	1884703a 	and	r2,r3,r2
 1005e04:	1001703a 	wrctl	status,r2
  
  return context;
 1005e08:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
 1005e0c:	e0bff815 	stw	r2,-32(fp)
    switch (wait_type) {
 1005e10:	e0bffc03 	ldbu	r2,-16(fp)
 1005e14:	e0bffe15 	stw	r2,-8(fp)
 1005e18:	e0fffe17 	ldw	r3,-8(fp)
 1005e1c:	18800060 	cmpeqi	r2,r3,1
 1005e20:	1000651e 	bne	r2,zero,1005fb8 <OSFlagAccept+0x284>
 1005e24:	e0fffe17 	ldw	r3,-8(fp)
 1005e28:	18800088 	cmpgei	r2,r3,2
 1005e2c:	1000041e 	bne	r2,zero,1005e40 <OSFlagAccept+0x10c>
 1005e30:	e0fffe17 	ldw	r3,-8(fp)
 1005e34:	1805003a 	cmpeq	r2,r3,zero
 1005e38:	1000421e 	bne	r2,zero,1005f44 <OSFlagAccept+0x210>
 1005e3c:	00007b06 	br	100602c <OSFlagAccept+0x2f8>
 1005e40:	e0fffe17 	ldw	r3,-8(fp)
 1005e44:	188000a0 	cmpeqi	r2,r3,2
 1005e48:	1000041e 	bne	r2,zero,1005e5c <OSFlagAccept+0x128>
 1005e4c:	e0fffe17 	ldw	r3,-8(fp)
 1005e50:	188000e0 	cmpeqi	r2,r3,3
 1005e54:	10001e1e 	bne	r2,zero,1005ed0 <OSFlagAccept+0x19c>
 1005e58:	00007406 	br	100602c <OSFlagAccept+0x2f8>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 1005e5c:	e0bffa17 	ldw	r2,-24(fp)
 1005e60:	10c0020b 	ldhu	r3,8(r2)
 1005e64:	e0bffb0b 	ldhu	r2,-20(fp)
 1005e68:	1884703a 	and	r2,r3,r2
 1005e6c:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 1005e70:	e0fff98b 	ldhu	r3,-26(fp)
 1005e74:	e0bffb0b 	ldhu	r2,-20(fp)
 1005e78:	18800d1e 	bne	r3,r2,1005eb0 <OSFlagAccept+0x17c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 1005e7c:	e0bff903 	ldbu	r2,-28(fp)
 1005e80:	10800058 	cmpnei	r2,r2,1
 1005e84:	10000d1e 	bne	r2,zero,1005ebc <OSFlagAccept+0x188>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 1005e88:	e0bffa17 	ldw	r2,-24(fp)
 1005e8c:	1080020b 	ldhu	r2,8(r2)
 1005e90:	1007883a 	mov	r3,r2
 1005e94:	e0bff98b 	ldhu	r2,-26(fp)
 1005e98:	0084303a 	nor	r2,zero,r2
 1005e9c:	1884703a 	and	r2,r3,r2
 1005ea0:	1007883a 	mov	r3,r2
 1005ea4:	e0bffa17 	ldw	r2,-24(fp)
 1005ea8:	10c0020d 	sth	r3,8(r2)
 1005eac:	00000306 	br	1005ebc <OSFlagAccept+0x188>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 1005eb0:	e0fffd17 	ldw	r3,-12(fp)
 1005eb4:	00801c04 	movi	r2,112
 1005eb8:	18800005 	stb	r2,0(r3)
 1005ebc:	e0bff817 	ldw	r2,-32(fp)
 1005ec0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1005ec4:	e0bff617 	ldw	r2,-40(fp)
 1005ec8:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 1005ecc:	00005f06 	br	100604c <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 1005ed0:	e0bffa17 	ldw	r2,-24(fp)
 1005ed4:	10c0020b 	ldhu	r3,8(r2)
 1005ed8:	e0bffb0b 	ldhu	r2,-20(fp)
 1005edc:	1884703a 	and	r2,r3,r2
 1005ee0:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 1005ee4:	e0bff98b 	ldhu	r2,-26(fp)
 1005ee8:	1005003a 	cmpeq	r2,r2,zero
 1005eec:	10000d1e 	bne	r2,zero,1005f24 <OSFlagAccept+0x1f0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 1005ef0:	e0bff903 	ldbu	r2,-28(fp)
 1005ef4:	10800058 	cmpnei	r2,r2,1
 1005ef8:	10000d1e 	bne	r2,zero,1005f30 <OSFlagAccept+0x1fc>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 1005efc:	e0bffa17 	ldw	r2,-24(fp)
 1005f00:	1080020b 	ldhu	r2,8(r2)
 1005f04:	1007883a 	mov	r3,r2
 1005f08:	e0bff98b 	ldhu	r2,-26(fp)
 1005f0c:	0084303a 	nor	r2,zero,r2
 1005f10:	1884703a 	and	r2,r3,r2
 1005f14:	1007883a 	mov	r3,r2
 1005f18:	e0bffa17 	ldw	r2,-24(fp)
 1005f1c:	10c0020d 	sth	r3,8(r2)
 1005f20:	00000306 	br	1005f30 <OSFlagAccept+0x1fc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 1005f24:	e0fffd17 	ldw	r3,-12(fp)
 1005f28:	00801c04 	movi	r2,112
 1005f2c:	18800005 	stb	r2,0(r3)
 1005f30:	e0bff817 	ldw	r2,-32(fp)
 1005f34:	e0bff515 	stw	r2,-44(fp)
 1005f38:	e0bff517 	ldw	r2,-44(fp)
 1005f3c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 1005f40:	00004206 	br	100604c <OSFlagAccept+0x318>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 1005f44:	e0bffa17 	ldw	r2,-24(fp)
 1005f48:	1080020b 	ldhu	r2,8(r2)
 1005f4c:	0084303a 	nor	r2,zero,r2
 1005f50:	1007883a 	mov	r3,r2
 1005f54:	e0bffb0b 	ldhu	r2,-20(fp)
 1005f58:	1884703a 	and	r2,r3,r2
 1005f5c:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 1005f60:	e0fff98b 	ldhu	r3,-26(fp)
 1005f64:	e0bffb0b 	ldhu	r2,-20(fp)
 1005f68:	18800b1e 	bne	r3,r2,1005f98 <OSFlagAccept+0x264>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 1005f6c:	e0bff903 	ldbu	r2,-28(fp)
 1005f70:	10800058 	cmpnei	r2,r2,1
 1005f74:	10000b1e 	bne	r2,zero,1005fa4 <OSFlagAccept+0x270>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 1005f78:	e0bffa17 	ldw	r2,-24(fp)
 1005f7c:	10c0020b 	ldhu	r3,8(r2)
 1005f80:	e0bff98b 	ldhu	r2,-26(fp)
 1005f84:	1884b03a 	or	r2,r3,r2
 1005f88:	1007883a 	mov	r3,r2
 1005f8c:	e0bffa17 	ldw	r2,-24(fp)
 1005f90:	10c0020d 	sth	r3,8(r2)
 1005f94:	00000306 	br	1005fa4 <OSFlagAccept+0x270>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 1005f98:	e0fffd17 	ldw	r3,-12(fp)
 1005f9c:	00801c04 	movi	r2,112
 1005fa0:	18800005 	stb	r2,0(r3)
 1005fa4:	e0bff817 	ldw	r2,-32(fp)
 1005fa8:	e0bff415 	stw	r2,-48(fp)
 1005fac:	e0bff417 	ldw	r2,-48(fp)
 1005fb0:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 1005fb4:	00002506 	br	100604c <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 1005fb8:	e0bffa17 	ldw	r2,-24(fp)
 1005fbc:	1080020b 	ldhu	r2,8(r2)
 1005fc0:	0084303a 	nor	r2,zero,r2
 1005fc4:	1007883a 	mov	r3,r2
 1005fc8:	e0bffb0b 	ldhu	r2,-20(fp)
 1005fcc:	1884703a 	and	r2,r3,r2
 1005fd0:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 1005fd4:	e0bff98b 	ldhu	r2,-26(fp)
 1005fd8:	1005003a 	cmpeq	r2,r2,zero
 1005fdc:	10000b1e 	bne	r2,zero,100600c <OSFlagAccept+0x2d8>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 1005fe0:	e0bff903 	ldbu	r2,-28(fp)
 1005fe4:	10800058 	cmpnei	r2,r2,1
 1005fe8:	10000b1e 	bne	r2,zero,1006018 <OSFlagAccept+0x2e4>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 1005fec:	e0bffa17 	ldw	r2,-24(fp)
 1005ff0:	10c0020b 	ldhu	r3,8(r2)
 1005ff4:	e0bff98b 	ldhu	r2,-26(fp)
 1005ff8:	1884b03a 	or	r2,r3,r2
 1005ffc:	1007883a 	mov	r3,r2
 1006000:	e0bffa17 	ldw	r2,-24(fp)
 1006004:	10c0020d 	sth	r3,8(r2)
 1006008:	00000306 	br	1006018 <OSFlagAccept+0x2e4>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 100600c:	e0fffd17 	ldw	r3,-12(fp)
 1006010:	00801c04 	movi	r2,112
 1006014:	18800005 	stb	r2,0(r3)
 1006018:	e0bff817 	ldw	r2,-32(fp)
 100601c:	e0bff315 	stw	r2,-52(fp)
 1006020:	e0bff317 	ldw	r2,-52(fp)
 1006024:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 1006028:	00000806 	br	100604c <OSFlagAccept+0x318>
 100602c:	e0bff817 	ldw	r2,-32(fp)
 1006030:	e0bff215 	stw	r2,-56(fp)
 1006034:	e0bff217 	ldw	r2,-56(fp)
 1006038:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 100603c:	e03ff98d 	sth	zero,-26(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
 1006040:	e0fffd17 	ldw	r3,-12(fp)
 1006044:	00801bc4 	movi	r2,111
 1006048:	18800005 	stb	r2,0(r3)
             break;
    }
    return (flags_rdy);
 100604c:	e0bff98b 	ldhu	r2,-26(fp)
 1006050:	e0bfff15 	stw	r2,-4(fp)
 1006054:	e0bfff17 	ldw	r2,-4(fp)
}
 1006058:	e037883a 	mov	sp,fp
 100605c:	df000017 	ldw	fp,0(sp)
 1006060:	dec00104 	addi	sp,sp,4
 1006064:	f800283a 	ret

01006068 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
 1006068:	defff704 	addi	sp,sp,-36
 100606c:	df000815 	stw	fp,32(sp)
 1006070:	df000804 	addi	fp,sp,32
 1006074:	e17ffe15 	stw	r5,-8(fp)
 1006078:	e13ffd0d 	sth	r4,-12(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
 100607c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
 1006080:	e0bffe17 	ldw	r2,-8(fp)
 1006084:	1004c03a 	cmpne	r2,r2,zero
 1006088:	1000021e 	bne	r2,zero,1006094 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
 100608c:	e03fff15 	stw	zero,-4(fp)
 1006090:	00003f06 	br	1006190 <OSFlagCreate+0x128>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
 1006094:	00804074 	movhi	r2,257
 1006098:	108eb804 	addi	r2,r2,15072
 100609c:	10800003 	ldbu	r2,0(r2)
 10060a0:	10803fcc 	andi	r2,r2,255
 10060a4:	1005003a 	cmpeq	r2,r2,zero
 10060a8:	1000051e 	bne	r2,zero,10060c0 <OSFlagCreate+0x58>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
 10060ac:	e0fffe17 	ldw	r3,-8(fp)
 10060b0:	00800404 	movi	r2,16
 10060b4:	18800005 	stb	r2,0(r3)
        return ((OS_FLAG_GRP *)0);
 10060b8:	e03fff15 	stw	zero,-4(fp)
 10060bc:	00003406 	br	1006190 <OSFlagCreate+0x128>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10060c0:	0005303a 	rdctl	r2,status
 10060c4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10060c8:	e0fffa17 	ldw	r3,-24(fp)
 10060cc:	00bfff84 	movi	r2,-2
 10060d0:	1884703a 	and	r2,r3,r2
 10060d4:	1001703a 	wrctl	status,r2
  
  return context;
 10060d8:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 10060dc:	e0bffb15 	stw	r2,-20(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
 10060e0:	00804074 	movhi	r2,257
 10060e4:	108ebb04 	addi	r2,r2,15084
 10060e8:	10800017 	ldw	r2,0(r2)
 10060ec:	e0bffc15 	stw	r2,-16(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
 10060f0:	e0bffc17 	ldw	r2,-16(fp)
 10060f4:	1005003a 	cmpeq	r2,r2,zero
 10060f8:	10001c1e 	bne	r2,zero,100616c <OSFlagCreate+0x104>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
 10060fc:	00804074 	movhi	r2,257
 1006100:	108ebb04 	addi	r2,r2,15084
 1006104:	10800017 	ldw	r2,0(r2)
 1006108:	10800117 	ldw	r2,4(r2)
 100610c:	1007883a 	mov	r3,r2
 1006110:	00804074 	movhi	r2,257
 1006114:	108ebb04 	addi	r2,r2,15084
 1006118:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
 100611c:	e0fffc17 	ldw	r3,-16(fp)
 1006120:	00800144 	movi	r2,5
 1006124:	18800005 	stb	r2,0(r3)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
 1006128:	e0fffc17 	ldw	r3,-16(fp)
 100612c:	e0bffd0b 	ldhu	r2,-12(fp)
 1006130:	1880020d 	sth	r2,8(r3)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
 1006134:	e0bffc17 	ldw	r2,-16(fp)
 1006138:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
 100613c:	e0fffc17 	ldw	r3,-16(fp)
 1006140:	00800fc4 	movi	r2,63
 1006144:	18800285 	stb	r2,10(r3)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 1006148:	e0bffc17 	ldw	r2,-16(fp)
 100614c:	100002c5 	stb	zero,11(r2)
 1006150:	e0bffb17 	ldw	r2,-20(fp)
 1006154:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1006158:	e0bff917 	ldw	r2,-28(fp)
 100615c:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
 1006160:	e0bffe17 	ldw	r2,-8(fp)
 1006164:	10000005 	stb	zero,0(r2)
 1006168:	00000706 	br	1006188 <OSFlagCreate+0x120>
 100616c:	e0bffb17 	ldw	r2,-20(fp)
 1006170:	e0bff815 	stw	r2,-32(fp)
 1006174:	e0bff817 	ldw	r2,-32(fp)
 1006178:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
 100617c:	e0fffe17 	ldw	r3,-8(fp)
 1006180:	00801c84 	movi	r2,114
 1006184:	18800005 	stb	r2,0(r3)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
 1006188:	e0bffc17 	ldw	r2,-16(fp)
 100618c:	e0bfff15 	stw	r2,-4(fp)
 1006190:	e0bfff17 	ldw	r2,-4(fp)
}
 1006194:	e037883a 	mov	sp,fp
 1006198:	df000017 	ldw	fp,0(sp)
 100619c:	dec00104 	addi	sp,sp,4
 10061a0:	f800283a 	ret

010061a4 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
 10061a4:	defff004 	addi	sp,sp,-64
 10061a8:	dfc00f15 	stw	ra,60(sp)
 10061ac:	df000e15 	stw	fp,56(sp)
 10061b0:	df000e04 	addi	fp,sp,56
 10061b4:	e13ffb15 	stw	r4,-20(fp)
 10061b8:	e1bffd15 	stw	r6,-12(fp)
 10061bc:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 10061c0:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 10061c4:	e0bffd17 	ldw	r2,-12(fp)
 10061c8:	1004c03a 	cmpne	r2,r2,zero
 10061cc:	1000031e 	bne	r2,zero,10061dc <OSFlagDel+0x38>
        return (pgrp);
 10061d0:	e0bffb17 	ldw	r2,-20(fp)
 10061d4:	e0bfff15 	stw	r2,-4(fp)
 10061d8:	00009606 	br	1006434 <OSFlagDel+0x290>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 10061dc:	e0bffb17 	ldw	r2,-20(fp)
 10061e0:	1004c03a 	cmpne	r2,r2,zero
 10061e4:	1000061e 	bne	r2,zero,1006200 <OSFlagDel+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 10061e8:	e0fffd17 	ldw	r3,-12(fp)
 10061ec:	00801b84 	movi	r2,110
 10061f0:	18800005 	stb	r2,0(r3)
        return (pgrp);
 10061f4:	e0fffb17 	ldw	r3,-20(fp)
 10061f8:	e0ffff15 	stw	r3,-4(fp)
 10061fc:	00008d06 	br	1006434 <OSFlagDel+0x290>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 1006200:	00804074 	movhi	r2,257
 1006204:	108eb804 	addi	r2,r2,15072
 1006208:	10800003 	ldbu	r2,0(r2)
 100620c:	10803fcc 	andi	r2,r2,255
 1006210:	1005003a 	cmpeq	r2,r2,zero
 1006214:	1000061e 	bne	r2,zero,1006230 <OSFlagDel+0x8c>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 1006218:	e0fffd17 	ldw	r3,-12(fp)
 100621c:	008003c4 	movi	r2,15
 1006220:	18800005 	stb	r2,0(r3)
        return (pgrp);
 1006224:	e0bffb17 	ldw	r2,-20(fp)
 1006228:	e0bfff15 	stw	r2,-4(fp)
 100622c:	00008106 	br	1006434 <OSFlagDel+0x290>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
 1006230:	e0bffb17 	ldw	r2,-20(fp)
 1006234:	10800003 	ldbu	r2,0(r2)
 1006238:	10803fcc 	andi	r2,r2,255
 100623c:	10800160 	cmpeqi	r2,r2,5
 1006240:	1000061e 	bne	r2,zero,100625c <OSFlagDel+0xb8>
        *perr = OS_ERR_EVENT_TYPE;
 1006244:	e0fffd17 	ldw	r3,-12(fp)
 1006248:	00800044 	movi	r2,1
 100624c:	18800005 	stb	r2,0(r3)
        return (pgrp);
 1006250:	e0fffb17 	ldw	r3,-20(fp)
 1006254:	e0ffff15 	stw	r3,-4(fp)
 1006258:	00007606 	br	1006434 <OSFlagDel+0x290>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100625c:	0005303a 	rdctl	r2,status
 1006260:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1006264:	e0fff617 	ldw	r3,-40(fp)
 1006268:	00bfff84 	movi	r2,-2
 100626c:	1884703a 	and	r2,r3,r2
 1006270:	1001703a 	wrctl	status,r2
  
  return context;
 1006274:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
 1006278:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
 100627c:	e0bffb17 	ldw	r2,-20(fp)
 1006280:	10800117 	ldw	r2,4(r2)
 1006284:	1005003a 	cmpeq	r2,r2,zero
 1006288:	1000031e 	bne	r2,zero,1006298 <OSFlagDel+0xf4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 100628c:	00800044 	movi	r2,1
 1006290:	e0bffa05 	stb	r2,-24(fp)
 1006294:	00000106 	br	100629c <OSFlagDel+0xf8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 1006298:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
 100629c:	e0bffc03 	ldbu	r2,-16(fp)
 10062a0:	e0bffe15 	stw	r2,-8(fp)
 10062a4:	e0fffe17 	ldw	r3,-8(fp)
 10062a8:	1805003a 	cmpeq	r2,r3,zero
 10062ac:	1000041e 	bne	r2,zero,10062c0 <OSFlagDel+0x11c>
 10062b0:	e0fffe17 	ldw	r3,-8(fp)
 10062b4:	18800060 	cmpeqi	r2,r3,1
 10062b8:	1000281e 	bne	r2,zero,100635c <OSFlagDel+0x1b8>
 10062bc:	00005206 	br	1006408 <OSFlagDel+0x264>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
 10062c0:	e0bffa03 	ldbu	r2,-24(fp)
 10062c4:	1004c03a 	cmpne	r2,r2,zero
 10062c8:	10001a1e 	bne	r2,zero,1006334 <OSFlagDel+0x190>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
 10062cc:	e0fffb17 	ldw	r3,-20(fp)
 10062d0:	00800fc4 	movi	r2,63
 10062d4:	18800285 	stb	r2,10(r3)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 10062d8:	e0bffb17 	ldw	r2,-20(fp)
 10062dc:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 10062e0:	e0bffb17 	ldw	r2,-20(fp)
 10062e4:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
 10062e8:	00804074 	movhi	r2,257
 10062ec:	108ebb04 	addi	r2,r2,15084
 10062f0:	10c00017 	ldw	r3,0(r2)
 10062f4:	e0bffb17 	ldw	r2,-20(fp)
 10062f8:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
 10062fc:	e0bffb17 	ldw	r2,-20(fp)
 1006300:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
 1006304:	00c04074 	movhi	r3,257
 1006308:	18cebb04 	addi	r3,r3,15084
 100630c:	e0bffb17 	ldw	r2,-20(fp)
 1006310:	18800015 	stw	r2,0(r3)
 1006314:	e0bff717 	ldw	r2,-36(fp)
 1006318:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100631c:	e0bff517 	ldw	r2,-44(fp)
 1006320:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
 1006324:	e0bffd17 	ldw	r2,-12(fp)
 1006328:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
 100632c:	e03ff815 	stw	zero,-32(fp)
 1006330:	00003e06 	br	100642c <OSFlagDel+0x288>
 1006334:	e0bff717 	ldw	r2,-36(fp)
 1006338:	e0bff415 	stw	r2,-48(fp)
 100633c:	e0bff417 	ldw	r2,-48(fp)
 1006340:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
 1006344:	e0fffd17 	ldw	r3,-12(fp)
 1006348:	00801244 	movi	r2,73
 100634c:	18800005 	stb	r2,0(r3)
                 pgrp_return          = pgrp;
 1006350:	e0bffb17 	ldw	r2,-20(fp)
 1006354:	e0bff815 	stw	r2,-32(fp)
             }
             break;
 1006358:	00003406 	br	100642c <OSFlagDel+0x288>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 100635c:	e0bffb17 	ldw	r2,-20(fp)
 1006360:	10800117 	ldw	r2,4(r2)
 1006364:	e0bff915 	stw	r2,-28(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 1006368:	00000606 	br	1006384 <OSFlagDel+0x1e0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
 100636c:	e13ff917 	ldw	r4,-28(fp)
 1006370:	000b883a 	mov	r5,zero
 1006374:	10074b40 	call	10074b4 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 1006378:	e0bff917 	ldw	r2,-28(fp)
 100637c:	10800017 	ldw	r2,0(r2)
 1006380:	e0bff915 	stw	r2,-28(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 1006384:	e0bff917 	ldw	r2,-28(fp)
 1006388:	1004c03a 	cmpne	r2,r2,zero
 100638c:	103ff71e 	bne	r2,zero,100636c <OSFlagDel+0x1c8>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
 1006390:	e0fffb17 	ldw	r3,-20(fp)
 1006394:	00800fc4 	movi	r2,63
 1006398:	18800285 	stb	r2,10(r3)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 100639c:	e0bffb17 	ldw	r2,-20(fp)
 10063a0:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 10063a4:	e0bffb17 	ldw	r2,-20(fp)
 10063a8:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
 10063ac:	00804074 	movhi	r2,257
 10063b0:	108ebb04 	addi	r2,r2,15084
 10063b4:	10c00017 	ldw	r3,0(r2)
 10063b8:	e0bffb17 	ldw	r2,-20(fp)
 10063bc:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
 10063c0:	e0bffb17 	ldw	r2,-20(fp)
 10063c4:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
 10063c8:	00c04074 	movhi	r3,257
 10063cc:	18cebb04 	addi	r3,r3,15084
 10063d0:	e0bffb17 	ldw	r2,-20(fp)
 10063d4:	18800015 	stw	r2,0(r3)
 10063d8:	e0bff717 	ldw	r2,-36(fp)
 10063dc:	e0bff315 	stw	r2,-52(fp)
 10063e0:	e0bff317 	ldw	r2,-52(fp)
 10063e4:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 10063e8:	e0bffa03 	ldbu	r2,-24(fp)
 10063ec:	10800058 	cmpnei	r2,r2,1
 10063f0:	1000011e 	bne	r2,zero,10063f8 <OSFlagDel+0x254>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 10063f4:	10054c00 	call	10054c0 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
 10063f8:	e0bffd17 	ldw	r2,-12(fp)
 10063fc:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
 1006400:	e03ff815 	stw	zero,-32(fp)
             break;
 1006404:	00000906 	br	100642c <OSFlagDel+0x288>
 1006408:	e0bff717 	ldw	r2,-36(fp)
 100640c:	e0bff215 	stw	r2,-56(fp)
 1006410:	e0bff217 	ldw	r2,-56(fp)
 1006414:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
 1006418:	e0fffd17 	ldw	r3,-12(fp)
 100641c:	008001c4 	movi	r2,7
 1006420:	18800005 	stb	r2,0(r3)
             pgrp_return          = pgrp;
 1006424:	e0bffb17 	ldw	r2,-20(fp)
 1006428:	e0bff815 	stw	r2,-32(fp)
             break;
    }
    return (pgrp_return);
 100642c:	e0bff817 	ldw	r2,-32(fp)
 1006430:	e0bfff15 	stw	r2,-4(fp)
 1006434:	e0bfff17 	ldw	r2,-4(fp)
}
 1006438:	e037883a 	mov	sp,fp
 100643c:	dfc00117 	ldw	ra,4(sp)
 1006440:	df000017 	ldw	fp,0(sp)
 1006444:	dec00204 	addi	sp,sp,8
 1006448:	f800283a 	ret

0100644c <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 100644c:	defff504 	addi	sp,sp,-44
 1006450:	dfc00a15 	stw	ra,40(sp)
 1006454:	df000915 	stw	fp,36(sp)
 1006458:	df000904 	addi	fp,sp,36
 100645c:	e13ffc15 	stw	r4,-16(fp)
 1006460:	e17ffd15 	stw	r5,-12(fp)
 1006464:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1006468:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 100646c:	e0bffe17 	ldw	r2,-8(fp)
 1006470:	1004c03a 	cmpne	r2,r2,zero
 1006474:	1000021e 	bne	r2,zero,1006480 <OSFlagNameGet+0x34>
        return (0);
 1006478:	e03fff15 	stw	zero,-4(fp)
 100647c:	00003e06 	br	1006578 <OSFlagNameGet+0x12c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 1006480:	e0bffc17 	ldw	r2,-16(fp)
 1006484:	1004c03a 	cmpne	r2,r2,zero
 1006488:	1000051e 	bne	r2,zero,10064a0 <OSFlagNameGet+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 100648c:	e0fffe17 	ldw	r3,-8(fp)
 1006490:	00801b84 	movi	r2,110
 1006494:	18800005 	stb	r2,0(r3)
        return (0);
 1006498:	e03fff15 	stw	zero,-4(fp)
 100649c:	00003606 	br	1006578 <OSFlagNameGet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 10064a0:	e0bffd17 	ldw	r2,-12(fp)
 10064a4:	1004c03a 	cmpne	r2,r2,zero
 10064a8:	1000051e 	bne	r2,zero,10064c0 <OSFlagNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
 10064ac:	e0fffe17 	ldw	r3,-8(fp)
 10064b0:	00800304 	movi	r2,12
 10064b4:	18800005 	stb	r2,0(r3)
        return (0);
 10064b8:	e03fff15 	stw	zero,-4(fp)
 10064bc:	00002e06 	br	1006578 <OSFlagNameGet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 10064c0:	00804074 	movhi	r2,257
 10064c4:	108eb804 	addi	r2,r2,15072
 10064c8:	10800003 	ldbu	r2,0(r2)
 10064cc:	10803fcc 	andi	r2,r2,255
 10064d0:	1005003a 	cmpeq	r2,r2,zero
 10064d4:	1000051e 	bne	r2,zero,10064ec <OSFlagNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
 10064d8:	e0fffe17 	ldw	r3,-8(fp)
 10064dc:	00800444 	movi	r2,17
 10064e0:	18800005 	stb	r2,0(r3)
        return (0);
 10064e4:	e03fff15 	stw	zero,-4(fp)
 10064e8:	00002306 	br	1006578 <OSFlagNameGet+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10064ec:	0005303a 	rdctl	r2,status
 10064f0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10064f4:	e0fff917 	ldw	r3,-28(fp)
 10064f8:	00bfff84 	movi	r2,-2
 10064fc:	1884703a 	and	r2,r3,r2
 1006500:	1001703a 	wrctl	status,r2
  
  return context;
 1006504:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 1006508:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 100650c:	e0bffc17 	ldw	r2,-16(fp)
 1006510:	10800003 	ldbu	r2,0(r2)
 1006514:	10803fcc 	andi	r2,r2,255
 1006518:	10800160 	cmpeqi	r2,r2,5
 100651c:	1000091e 	bne	r2,zero,1006544 <OSFlagNameGet+0xf8>
 1006520:	e0bffa17 	ldw	r2,-24(fp)
 1006524:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1006528:	e0bff817 	ldw	r2,-32(fp)
 100652c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 1006530:	e0fffe17 	ldw	r3,-8(fp)
 1006534:	00800044 	movi	r2,1
 1006538:	18800005 	stb	r2,0(r3)
        return (0);
 100653c:	e03fff15 	stw	zero,-4(fp)
 1006540:	00000d06 	br	1006578 <OSFlagNameGet+0x12c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
 1006544:	e0bffc17 	ldw	r2,-16(fp)
 1006548:	11400284 	addi	r5,r2,10
 100654c:	e13ffd17 	ldw	r4,-12(fp)
 1006550:	10056040 	call	1005604 <OS_StrCopy>
 1006554:	e0bffb05 	stb	r2,-20(fp)
 1006558:	e0bffa17 	ldw	r2,-24(fp)
 100655c:	e0bff715 	stw	r2,-36(fp)
 1006560:	e0bff717 	ldw	r2,-36(fp)
 1006564:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 1006568:	e0bffe17 	ldw	r2,-8(fp)
 100656c:	10000005 	stb	zero,0(r2)
    return (len);
 1006570:	e0bffb03 	ldbu	r2,-20(fp)
 1006574:	e0bfff15 	stw	r2,-4(fp)
 1006578:	e0bfff17 	ldw	r2,-4(fp)
}
 100657c:	e037883a 	mov	sp,fp
 1006580:	dfc00117 	ldw	ra,4(sp)
 1006584:	df000017 	ldw	fp,0(sp)
 1006588:	dec00204 	addi	sp,sp,8
 100658c:	f800283a 	ret

01006590 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 1006590:	defff504 	addi	sp,sp,-44
 1006594:	dfc00a15 	stw	ra,40(sp)
 1006598:	df000915 	stw	fp,36(sp)
 100659c:	df000904 	addi	fp,sp,36
 10065a0:	e13ffd15 	stw	r4,-12(fp)
 10065a4:	e17ffe15 	stw	r5,-8(fp)
 10065a8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 10065ac:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 10065b0:	e0bfff17 	ldw	r2,-4(fp)
 10065b4:	1005003a 	cmpeq	r2,r2,zero
 10065b8:	1000451e 	bne	r2,zero,10066d0 <OSFlagNameSet+0x140>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 10065bc:	e0bffd17 	ldw	r2,-12(fp)
 10065c0:	1004c03a 	cmpne	r2,r2,zero
 10065c4:	1000041e 	bne	r2,zero,10065d8 <OSFlagNameSet+0x48>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 10065c8:	e0ffff17 	ldw	r3,-4(fp)
 10065cc:	00801b84 	movi	r2,110
 10065d0:	18800005 	stb	r2,0(r3)
        return;
 10065d4:	00003e06 	br	10066d0 <OSFlagNameSet+0x140>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 10065d8:	e0bffe17 	ldw	r2,-8(fp)
 10065dc:	1004c03a 	cmpne	r2,r2,zero
 10065e0:	1000041e 	bne	r2,zero,10065f4 <OSFlagNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
 10065e4:	e0ffff17 	ldw	r3,-4(fp)
 10065e8:	00800304 	movi	r2,12
 10065ec:	18800005 	stb	r2,0(r3)
        return;
 10065f0:	00003706 	br	10066d0 <OSFlagNameSet+0x140>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 10065f4:	00804074 	movhi	r2,257
 10065f8:	108eb804 	addi	r2,r2,15072
 10065fc:	10800003 	ldbu	r2,0(r2)
 1006600:	10803fcc 	andi	r2,r2,255
 1006604:	1005003a 	cmpeq	r2,r2,zero
 1006608:	1000041e 	bne	r2,zero,100661c <OSFlagNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
 100660c:	e0ffff17 	ldw	r3,-4(fp)
 1006610:	00800484 	movi	r2,18
 1006614:	18800005 	stb	r2,0(r3)
        return;
 1006618:	00002d06 	br	10066d0 <OSFlagNameSet+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100661c:	0005303a 	rdctl	r2,status
 1006620:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1006624:	e0fffa17 	ldw	r3,-24(fp)
 1006628:	00bfff84 	movi	r2,-2
 100662c:	1884703a 	and	r2,r3,r2
 1006630:	1001703a 	wrctl	status,r2
  
  return context;
 1006634:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 1006638:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 100663c:	e0bffd17 	ldw	r2,-12(fp)
 1006640:	10800003 	ldbu	r2,0(r2)
 1006644:	10803fcc 	andi	r2,r2,255
 1006648:	10800160 	cmpeqi	r2,r2,5
 100664c:	1000081e 	bne	r2,zero,1006670 <OSFlagNameSet+0xe0>
 1006650:	e0bffb17 	ldw	r2,-20(fp)
 1006654:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1006658:	e0bff917 	ldw	r2,-28(fp)
 100665c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 1006660:	e0ffff17 	ldw	r3,-4(fp)
 1006664:	00800044 	movi	r2,1
 1006668:	18800005 	stb	r2,0(r3)
        return;
 100666c:	00001806 	br	10066d0 <OSFlagNameSet+0x140>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 1006670:	e13ffe17 	ldw	r4,-8(fp)
 1006674:	10056840 	call	1005684 <OS_StrLen>
 1006678:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
 100667c:	e0bffc03 	ldbu	r2,-16(fp)
 1006680:	10800830 	cmpltui	r2,r2,32
 1006684:	1000081e 	bne	r2,zero,10066a8 <OSFlagNameSet+0x118>
 1006688:	e0bffb17 	ldw	r2,-20(fp)
 100668c:	e0bff815 	stw	r2,-32(fp)
 1006690:	e0bff817 	ldw	r2,-32(fp)
 1006694:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
 1006698:	e0ffff17 	ldw	r3,-4(fp)
 100669c:	00801cc4 	movi	r2,115
 10066a0:	18800005 	stb	r2,0(r3)
        return;
 10066a4:	00000a06 	br	10066d0 <OSFlagNameSet+0x140>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
 10066a8:	e0bffd17 	ldw	r2,-12(fp)
 10066ac:	11000284 	addi	r4,r2,10
 10066b0:	e17ffe17 	ldw	r5,-8(fp)
 10066b4:	10056040 	call	1005604 <OS_StrCopy>
 10066b8:	e0bffb17 	ldw	r2,-20(fp)
 10066bc:	e0bff715 	stw	r2,-36(fp)
 10066c0:	e0bff717 	ldw	r2,-36(fp)
 10066c4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 10066c8:	e0bfff17 	ldw	r2,-4(fp)
 10066cc:	10000005 	stb	zero,0(r2)
    return;
}
 10066d0:	e037883a 	mov	sp,fp
 10066d4:	dfc00117 	ldw	ra,4(sp)
 10066d8:	df000017 	ldw	fp,0(sp)
 10066dc:	dec00204 	addi	sp,sp,8
 10066e0:	f800283a 	ret

010066e4 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
 10066e4:	deffe004 	addi	sp,sp,-128
 10066e8:	dfc01f15 	stw	ra,124(sp)
 10066ec:	df001e15 	stw	fp,120(sp)
 10066f0:	df001e04 	addi	fp,sp,120
 10066f4:	e13ff915 	stw	r4,-28(fp)
 10066f8:	e17ffa0d 	sth	r5,-24(fp)
 10066fc:	e1bffb05 	stb	r6,-20(fp)
 1006700:	e1fffc0d 	sth	r7,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 1006704:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 1006708:	e0800217 	ldw	r2,8(fp)
 100670c:	1004c03a 	cmpne	r2,r2,zero
 1006710:	1000021e 	bne	r2,zero,100671c <OSFlagPend+0x38>
        return ((OS_FLAGS)0);
 1006714:	e03fff15 	stw	zero,-4(fp)
 1006718:	00017d06 	br	1006d10 <OSFlagPend+0x62c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 100671c:	e0bff917 	ldw	r2,-28(fp)
 1006720:	1004c03a 	cmpne	r2,r2,zero
 1006724:	1000051e 	bne	r2,zero,100673c <OSFlagPend+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 1006728:	e0c00217 	ldw	r3,8(fp)
 100672c:	00801b84 	movi	r2,110
 1006730:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 1006734:	e03fff15 	stw	zero,-4(fp)
 1006738:	00017506 	br	1006d10 <OSFlagPend+0x62c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 100673c:	00804074 	movhi	r2,257
 1006740:	108eb804 	addi	r2,r2,15072
 1006744:	10800003 	ldbu	r2,0(r2)
 1006748:	10803fcc 	andi	r2,r2,255
 100674c:	1005003a 	cmpeq	r2,r2,zero
 1006750:	1000051e 	bne	r2,zero,1006768 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
 1006754:	e0c00217 	ldw	r3,8(fp)
 1006758:	00800084 	movi	r2,2
 100675c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 1006760:	e03fff15 	stw	zero,-4(fp)
 1006764:	00016a06 	br	1006d10 <OSFlagPend+0x62c>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
 1006768:	00804074 	movhi	r2,257
 100676c:	108eaa04 	addi	r2,r2,15016
 1006770:	10800003 	ldbu	r2,0(r2)
 1006774:	10803fcc 	andi	r2,r2,255
 1006778:	1005003a 	cmpeq	r2,r2,zero
 100677c:	1000051e 	bne	r2,zero,1006794 <OSFlagPend+0xb0>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
 1006780:	e0c00217 	ldw	r3,8(fp)
 1006784:	00800344 	movi	r2,13
 1006788:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 100678c:	e03fff15 	stw	zero,-4(fp)
 1006790:	00015f06 	br	1006d10 <OSFlagPend+0x62c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 1006794:	e0bff917 	ldw	r2,-28(fp)
 1006798:	10800003 	ldbu	r2,0(r2)
 100679c:	10803fcc 	andi	r2,r2,255
 10067a0:	10800160 	cmpeqi	r2,r2,5
 10067a4:	1000051e 	bne	r2,zero,10067bc <OSFlagPend+0xd8>
        *perr = OS_ERR_EVENT_TYPE;
 10067a8:	e0c00217 	ldw	r3,8(fp)
 10067ac:	00800044 	movi	r2,1
 10067b0:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 10067b4:	e03fff15 	stw	zero,-4(fp)
 10067b8:	00015506 	br	1006d10 <OSFlagPend+0x62c>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 10067bc:	e0fffb03 	ldbu	r3,-20(fp)
 10067c0:	00bfe004 	movi	r2,-128
 10067c4:	1884703a 	and	r2,r3,r2
 10067c8:	e0bff285 	stb	r2,-54(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
 10067cc:	e0bff283 	ldbu	r2,-54(fp)
 10067d0:	1005003a 	cmpeq	r2,r2,zero
 10067d4:	1000071e 	bne	r2,zero,10067f4 <OSFlagPend+0x110>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
 10067d8:	00c01fc4 	movi	r3,127
 10067dc:	e0bffb03 	ldbu	r2,-20(fp)
 10067e0:	10c4703a 	and	r2,r2,r3
 10067e4:	e0bffb05 	stb	r2,-20(fp)
        consume    = OS_TRUE;
 10067e8:	00800044 	movi	r2,1
 10067ec:	e0bff205 	stb	r2,-56(fp)
 10067f0:	00000106 	br	10067f8 <OSFlagPend+0x114>
    } else {
        consume    = OS_FALSE;
 10067f4:	e03ff205 	stb	zero,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10067f8:	0005303a 	rdctl	r2,status
 10067fc:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1006800:	e0fff017 	ldw	r3,-64(fp)
 1006804:	00bfff84 	movi	r2,-2
 1006808:	1884703a 	and	r2,r3,r2
 100680c:	1001703a 	wrctl	status,r2
  
  return context;
 1006810:	e0bff017 	ldw	r2,-64(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 1006814:	e0bff115 	stw	r2,-60(fp)
    switch (wait_type) {
 1006818:	e0bffb03 	ldbu	r2,-20(fp)
 100681c:	e0bffe15 	stw	r2,-8(fp)
 1006820:	e0fffe17 	ldw	r3,-8(fp)
 1006824:	18800060 	cmpeqi	r2,r3,1
 1006828:	1000981e 	bne	r2,zero,1006a8c <OSFlagPend+0x3a8>
 100682c:	e0fffe17 	ldw	r3,-8(fp)
 1006830:	18800088 	cmpgei	r2,r3,2
 1006834:	1000041e 	bne	r2,zero,1006848 <OSFlagPend+0x164>
 1006838:	e0fffe17 	ldw	r3,-8(fp)
 100683c:	1805003a 	cmpeq	r2,r3,zero
 1006840:	1000641e 	bne	r2,zero,10069d4 <OSFlagPend+0x2f0>
 1006844:	0000bf06 	br	1006b44 <OSFlagPend+0x460>
 1006848:	e0fffe17 	ldw	r3,-8(fp)
 100684c:	188000a0 	cmpeqi	r2,r3,2
 1006850:	1000041e 	bne	r2,zero,1006864 <OSFlagPend+0x180>
 1006854:	e0fffe17 	ldw	r3,-8(fp)
 1006858:	188000e0 	cmpeqi	r2,r3,3
 100685c:	10002f1e 	bne	r2,zero,100691c <OSFlagPend+0x238>
 1006860:	0000b806 	br	1006b44 <OSFlagPend+0x460>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
 1006864:	e0bff917 	ldw	r2,-28(fp)
 1006868:	10c0020b 	ldhu	r3,8(r2)
 100686c:	e0bffa0b 	ldhu	r2,-24(fp)
 1006870:	1884703a 	and	r2,r3,r2
 1006874:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 1006878:	e0fff30b 	ldhu	r3,-52(fp)
 100687c:	e0bffa0b 	ldhu	r2,-24(fp)
 1006880:	18801a1e 	bne	r3,r2,10068ec <OSFlagPend+0x208>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 1006884:	e0bff203 	ldbu	r2,-56(fp)
 1006888:	10800058 	cmpnei	r2,r2,1
 100688c:	1000091e 	bne	r2,zero,10068b4 <OSFlagPend+0x1d0>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 1006890:	e0bff917 	ldw	r2,-28(fp)
 1006894:	1080020b 	ldhu	r2,8(r2)
 1006898:	1007883a 	mov	r3,r2
 100689c:	e0bff30b 	ldhu	r2,-52(fp)
 10068a0:	0084303a 	nor	r2,zero,r2
 10068a4:	1884703a 	and	r2,r3,r2
 10068a8:	1007883a 	mov	r3,r2
 10068ac:	e0bff917 	ldw	r2,-28(fp)
 10068b0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 10068b4:	00804074 	movhi	r2,257
 10068b8:	108eb904 	addi	r2,r2,15076
 10068bc:	10c00017 	ldw	r3,0(r2)
 10068c0:	e0bff30b 	ldhu	r2,-52(fp)
 10068c4:	18800b0d 	sth	r2,44(r3)
 10068c8:	e0bff117 	ldw	r2,-60(fp)
 10068cc:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10068d0:	e0bfef17 	ldw	r2,-68(fp)
 10068d4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 10068d8:	e0800217 	ldw	r2,8(fp)
 10068dc:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 10068e0:	e0bff30b 	ldhu	r2,-52(fp)
 10068e4:	e0bfff15 	stw	r2,-4(fp)
 10068e8:	00010906 	br	1006d10 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 10068ec:	e1bffa0b 	ldhu	r6,-24(fp)
 10068f0:	e1fffb03 	ldbu	r7,-20(fp)
 10068f4:	e0bffc0b 	ldhu	r2,-16(fp)
 10068f8:	e17ff404 	addi	r5,fp,-48
 10068fc:	d8800015 	stw	r2,0(sp)
 1006900:	e13ff917 	ldw	r4,-28(fp)
 1006904:	100720c0 	call	100720c <OS_FlagBlock>
 1006908:	e0bff117 	ldw	r2,-60(fp)
 100690c:	e0bfee15 	stw	r2,-72(fp)
 1006910:	e0bfee17 	ldw	r2,-72(fp)
 1006914:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 1006918:	00009506 	br	1006b70 <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
 100691c:	e0bff917 	ldw	r2,-28(fp)
 1006920:	10c0020b 	ldhu	r3,8(r2)
 1006924:	e0bffa0b 	ldhu	r2,-24(fp)
 1006928:	1884703a 	and	r2,r3,r2
 100692c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 1006930:	e0bff30b 	ldhu	r2,-52(fp)
 1006934:	1005003a 	cmpeq	r2,r2,zero
 1006938:	10001a1e 	bne	r2,zero,10069a4 <OSFlagPend+0x2c0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 100693c:	e0bff203 	ldbu	r2,-56(fp)
 1006940:	10800058 	cmpnei	r2,r2,1
 1006944:	1000091e 	bne	r2,zero,100696c <OSFlagPend+0x288>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 1006948:	e0bff917 	ldw	r2,-28(fp)
 100694c:	1080020b 	ldhu	r2,8(r2)
 1006950:	1007883a 	mov	r3,r2
 1006954:	e0bff30b 	ldhu	r2,-52(fp)
 1006958:	0084303a 	nor	r2,zero,r2
 100695c:	1884703a 	and	r2,r3,r2
 1006960:	1007883a 	mov	r3,r2
 1006964:	e0bff917 	ldw	r2,-28(fp)
 1006968:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 100696c:	00804074 	movhi	r2,257
 1006970:	108eb904 	addi	r2,r2,15076
 1006974:	10c00017 	ldw	r3,0(r2)
 1006978:	e0bff30b 	ldhu	r2,-52(fp)
 100697c:	18800b0d 	sth	r2,44(r3)
 1006980:	e0bff117 	ldw	r2,-60(fp)
 1006984:	e0bfed15 	stw	r2,-76(fp)
 1006988:	e0bfed17 	ldw	r2,-76(fp)
 100698c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 1006990:	e0800217 	ldw	r2,8(fp)
 1006994:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 1006998:	e0fff30b 	ldhu	r3,-52(fp)
 100699c:	e0ffff15 	stw	r3,-4(fp)
 10069a0:	0000db06 	br	1006d10 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 10069a4:	e1bffa0b 	ldhu	r6,-24(fp)
 10069a8:	e1fffb03 	ldbu	r7,-20(fp)
 10069ac:	e0bffc0b 	ldhu	r2,-16(fp)
 10069b0:	e17ff404 	addi	r5,fp,-48
 10069b4:	d8800015 	stw	r2,0(sp)
 10069b8:	e13ff917 	ldw	r4,-28(fp)
 10069bc:	100720c0 	call	100720c <OS_FlagBlock>
 10069c0:	e0bff117 	ldw	r2,-60(fp)
 10069c4:	e0bfec15 	stw	r2,-80(fp)
 10069c8:	e0bfec17 	ldw	r2,-80(fp)
 10069cc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 10069d0:	00006706 	br	1006b70 <OSFlagPend+0x48c>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 10069d4:	e0bff917 	ldw	r2,-28(fp)
 10069d8:	1080020b 	ldhu	r2,8(r2)
 10069dc:	0084303a 	nor	r2,zero,r2
 10069e0:	1007883a 	mov	r3,r2
 10069e4:	e0bffa0b 	ldhu	r2,-24(fp)
 10069e8:	1884703a 	and	r2,r3,r2
 10069ec:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 10069f0:	e0fff30b 	ldhu	r3,-52(fp)
 10069f4:	e0bffa0b 	ldhu	r2,-24(fp)
 10069f8:	1880181e 	bne	r3,r2,1006a5c <OSFlagPend+0x378>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 10069fc:	e0bff203 	ldbu	r2,-56(fp)
 1006a00:	10800058 	cmpnei	r2,r2,1
 1006a04:	1000071e 	bne	r2,zero,1006a24 <OSFlagPend+0x340>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 1006a08:	e0bff917 	ldw	r2,-28(fp)
 1006a0c:	10c0020b 	ldhu	r3,8(r2)
 1006a10:	e0bff30b 	ldhu	r2,-52(fp)
 1006a14:	1884b03a 	or	r2,r3,r2
 1006a18:	1007883a 	mov	r3,r2
 1006a1c:	e0bff917 	ldw	r2,-28(fp)
 1006a20:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 1006a24:	00804074 	movhi	r2,257
 1006a28:	108eb904 	addi	r2,r2,15076
 1006a2c:	10c00017 	ldw	r3,0(r2)
 1006a30:	e0bff30b 	ldhu	r2,-52(fp)
 1006a34:	18800b0d 	sth	r2,44(r3)
 1006a38:	e0bff117 	ldw	r2,-60(fp)
 1006a3c:	e0bfeb15 	stw	r2,-84(fp)
 1006a40:	e0bfeb17 	ldw	r2,-84(fp)
 1006a44:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 1006a48:	e0800217 	ldw	r2,8(fp)
 1006a4c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 1006a50:	e0bff30b 	ldhu	r2,-52(fp)
 1006a54:	e0bfff15 	stw	r2,-4(fp)
 1006a58:	0000ad06 	br	1006d10 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 1006a5c:	e1bffa0b 	ldhu	r6,-24(fp)
 1006a60:	e1fffb03 	ldbu	r7,-20(fp)
 1006a64:	e0bffc0b 	ldhu	r2,-16(fp)
 1006a68:	e17ff404 	addi	r5,fp,-48
 1006a6c:	d8800015 	stw	r2,0(sp)
 1006a70:	e13ff917 	ldw	r4,-28(fp)
 1006a74:	100720c0 	call	100720c <OS_FlagBlock>
 1006a78:	e0bff117 	ldw	r2,-60(fp)
 1006a7c:	e0bfea15 	stw	r2,-88(fp)
 1006a80:	e0bfea17 	ldw	r2,-88(fp)
 1006a84:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 1006a88:	00003906 	br	1006b70 <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 1006a8c:	e0bff917 	ldw	r2,-28(fp)
 1006a90:	1080020b 	ldhu	r2,8(r2)
 1006a94:	0084303a 	nor	r2,zero,r2
 1006a98:	1007883a 	mov	r3,r2
 1006a9c:	e0bffa0b 	ldhu	r2,-24(fp)
 1006aa0:	1884703a 	and	r2,r3,r2
 1006aa4:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 1006aa8:	e0bff30b 	ldhu	r2,-52(fp)
 1006aac:	1005003a 	cmpeq	r2,r2,zero
 1006ab0:	1000181e 	bne	r2,zero,1006b14 <OSFlagPend+0x430>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 1006ab4:	e0bff203 	ldbu	r2,-56(fp)
 1006ab8:	10800058 	cmpnei	r2,r2,1
 1006abc:	1000071e 	bne	r2,zero,1006adc <OSFlagPend+0x3f8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 1006ac0:	e0bff917 	ldw	r2,-28(fp)
 1006ac4:	10c0020b 	ldhu	r3,8(r2)
 1006ac8:	e0bff30b 	ldhu	r2,-52(fp)
 1006acc:	1884b03a 	or	r2,r3,r2
 1006ad0:	1007883a 	mov	r3,r2
 1006ad4:	e0bff917 	ldw	r2,-28(fp)
 1006ad8:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 1006adc:	00804074 	movhi	r2,257
 1006ae0:	108eb904 	addi	r2,r2,15076
 1006ae4:	10c00017 	ldw	r3,0(r2)
 1006ae8:	e0bff30b 	ldhu	r2,-52(fp)
 1006aec:	18800b0d 	sth	r2,44(r3)
 1006af0:	e0bff117 	ldw	r2,-60(fp)
 1006af4:	e0bfe915 	stw	r2,-92(fp)
 1006af8:	e0bfe917 	ldw	r2,-92(fp)
 1006afc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 1006b00:	e0800217 	ldw	r2,8(fp)
 1006b04:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 1006b08:	e0fff30b 	ldhu	r3,-52(fp)
 1006b0c:	e0ffff15 	stw	r3,-4(fp)
 1006b10:	00007f06 	br	1006d10 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 1006b14:	e1bffa0b 	ldhu	r6,-24(fp)
 1006b18:	e1fffb03 	ldbu	r7,-20(fp)
 1006b1c:	e0bffc0b 	ldhu	r2,-16(fp)
 1006b20:	e17ff404 	addi	r5,fp,-48
 1006b24:	d8800015 	stw	r2,0(sp)
 1006b28:	e13ff917 	ldw	r4,-28(fp)
 1006b2c:	100720c0 	call	100720c <OS_FlagBlock>
 1006b30:	e0bff117 	ldw	r2,-60(fp)
 1006b34:	e0bfe815 	stw	r2,-96(fp)
 1006b38:	e0bfe817 	ldw	r2,-96(fp)
 1006b3c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 1006b40:	00000b06 	br	1006b70 <OSFlagPend+0x48c>
 1006b44:	e0bff117 	ldw	r2,-60(fp)
 1006b48:	e0bfe715 	stw	r2,-100(fp)
 1006b4c:	e0bfe717 	ldw	r2,-100(fp)
 1006b50:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 1006b54:	e03ff30d 	sth	zero,-52(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
 1006b58:	e0c00217 	ldw	r3,8(fp)
 1006b5c:	00801bc4 	movi	r2,111
 1006b60:	18800005 	stb	r2,0(r3)
             return (flags_rdy);
 1006b64:	e0bff30b 	ldhu	r2,-52(fp)
 1006b68:	e0bfff15 	stw	r2,-4(fp)
 1006b6c:	00006806 	br	1006d10 <OSFlagPend+0x62c>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
 1006b70:	10054c00 	call	10054c0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1006b74:	0005303a 	rdctl	r2,status
 1006b78:	e0bfe615 	stw	r2,-104(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1006b7c:	e0ffe617 	ldw	r3,-104(fp)
 1006b80:	00bfff84 	movi	r2,-2
 1006b84:	1884703a 	and	r2,r3,r2
 1006b88:	1001703a 	wrctl	status,r2
  
  return context;
 1006b8c:	e0bfe617 	ldw	r2,-104(fp)
    OS_ENTER_CRITICAL();
 1006b90:	e0bff115 	stw	r2,-60(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
 1006b94:	00804074 	movhi	r2,257
 1006b98:	108eb904 	addi	r2,r2,15076
 1006b9c:	10800017 	ldw	r2,0(r2)
 1006ba0:	10800c43 	ldbu	r2,49(r2)
 1006ba4:	10803fcc 	andi	r2,r2,255
 1006ba8:	1005003a 	cmpeq	r2,r2,zero
 1006bac:	1000221e 	bne	r2,zero,1006c38 <OSFlagPend+0x554>
        pend_stat                = OSTCBCur->OSTCBStatPend;
 1006bb0:	00804074 	movhi	r2,257
 1006bb4:	108eb904 	addi	r2,r2,15076
 1006bb8:	10800017 	ldw	r2,0(r2)
 1006bbc:	10800c43 	ldbu	r2,49(r2)
 1006bc0:	e0bff245 	stb	r2,-55(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 1006bc4:	00804074 	movhi	r2,257
 1006bc8:	108eb904 	addi	r2,r2,15076
 1006bcc:	10800017 	ldw	r2,0(r2)
 1006bd0:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
 1006bd4:	e13ff404 	addi	r4,fp,-48
 1006bd8:	10075c40 	call	10075c4 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
 1006bdc:	00804074 	movhi	r2,257
 1006be0:	108eb904 	addi	r2,r2,15076
 1006be4:	10800017 	ldw	r2,0(r2)
 1006be8:	10000c05 	stb	zero,48(r2)
 1006bec:	e0bff117 	ldw	r2,-60(fp)
 1006bf0:	e0bfe515 	stw	r2,-108(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1006bf4:	e0bfe517 	ldw	r2,-108(fp)
 1006bf8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
 1006bfc:	e03ff30d 	sth	zero,-52(fp)
        switch (pend_stat) {
 1006c00:	e0bff243 	ldbu	r2,-55(fp)
 1006c04:	108000a0 	cmpeqi	r2,r2,2
 1006c08:	1000011e 	bne	r2,zero,1006c10 <OSFlagPend+0x52c>
 1006c0c:	00000406 	br	1006c20 <OSFlagPend+0x53c>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
 1006c10:	e0c00217 	ldw	r3,8(fp)
 1006c14:	00800384 	movi	r2,14
 1006c18:	18800005 	stb	r2,0(r3)
                 break;
 1006c1c:	00000306 	br	1006c2c <OSFlagPend+0x548>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
 1006c20:	e0c00217 	ldw	r3,8(fp)
 1006c24:	00800284 	movi	r2,10
 1006c28:	18800005 	stb	r2,0(r3)
                 break;
        }
        return (flags_rdy);
 1006c2c:	e0fff30b 	ldhu	r3,-52(fp)
 1006c30:	e0ffff15 	stw	r3,-4(fp)
 1006c34:	00003606 	br	1006d10 <OSFlagPend+0x62c>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
 1006c38:	00804074 	movhi	r2,257
 1006c3c:	108eb904 	addi	r2,r2,15076
 1006c40:	10800017 	ldw	r2,0(r2)
 1006c44:	10800b0b 	ldhu	r2,44(r2)
 1006c48:	e0bff30d 	sth	r2,-52(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
 1006c4c:	e0bff203 	ldbu	r2,-56(fp)
 1006c50:	10800058 	cmpnei	r2,r2,1
 1006c54:	1000261e 	bne	r2,zero,1006cf0 <OSFlagPend+0x60c>
        switch (wait_type) {
 1006c58:	e0bffb03 	ldbu	r2,-20(fp)
 1006c5c:	e0bffd15 	stw	r2,-12(fp)
 1006c60:	e0fffd17 	ldw	r3,-12(fp)
 1006c64:	1804803a 	cmplt	r2,r3,zero
 1006c68:	1000181e 	bne	r2,zero,1006ccc <OSFlagPend+0x5e8>
 1006c6c:	e0fffd17 	ldw	r3,-12(fp)
 1006c70:	18800090 	cmplti	r2,r3,2
 1006c74:	10000d1e 	bne	r2,zero,1006cac <OSFlagPend+0x5c8>
 1006c78:	e0fffd17 	ldw	r3,-12(fp)
 1006c7c:	18800108 	cmpgei	r2,r3,4
 1006c80:	1000121e 	bne	r2,zero,1006ccc <OSFlagPend+0x5e8>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
 1006c84:	e0bff917 	ldw	r2,-28(fp)
 1006c88:	1080020b 	ldhu	r2,8(r2)
 1006c8c:	1007883a 	mov	r3,r2
 1006c90:	e0bff30b 	ldhu	r2,-52(fp)
 1006c94:	0084303a 	nor	r2,zero,r2
 1006c98:	1884703a 	and	r2,r3,r2
 1006c9c:	1007883a 	mov	r3,r2
 1006ca0:	e0bff917 	ldw	r2,-28(fp)
 1006ca4:	10c0020d 	sth	r3,8(r2)
                 break;
 1006ca8:	00001106 	br	1006cf0 <OSFlagPend+0x60c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
 1006cac:	e0bff917 	ldw	r2,-28(fp)
 1006cb0:	10c0020b 	ldhu	r3,8(r2)
 1006cb4:	e0bff30b 	ldhu	r2,-52(fp)
 1006cb8:	1884b03a 	or	r2,r3,r2
 1006cbc:	1007883a 	mov	r3,r2
 1006cc0:	e0bff917 	ldw	r2,-28(fp)
 1006cc4:	10c0020d 	sth	r3,8(r2)
                 break;
 1006cc8:	00000906 	br	1006cf0 <OSFlagPend+0x60c>
 1006ccc:	e0bff117 	ldw	r2,-60(fp)
 1006cd0:	e0bfe415 	stw	r2,-112(fp)
 1006cd4:	e0bfe417 	ldw	r2,-112(fp)
 1006cd8:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 1006cdc:	e0c00217 	ldw	r3,8(fp)
 1006ce0:	00801bc4 	movi	r2,111
 1006ce4:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
 1006ce8:	e03fff15 	stw	zero,-4(fp)
 1006cec:	00000806 	br	1006d10 <OSFlagPend+0x62c>
 1006cf0:	e0bff117 	ldw	r2,-60(fp)
 1006cf4:	e0bfe315 	stw	r2,-116(fp)
 1006cf8:	e0bfe317 	ldw	r2,-116(fp)
 1006cfc:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
 1006d00:	e0800217 	ldw	r2,8(fp)
 1006d04:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
 1006d08:	e0bff30b 	ldhu	r2,-52(fp)
 1006d0c:	e0bfff15 	stw	r2,-4(fp)
 1006d10:	e0bfff17 	ldw	r2,-4(fp)
}
 1006d14:	e037883a 	mov	sp,fp
 1006d18:	dfc00117 	ldw	ra,4(sp)
 1006d1c:	df000017 	ldw	fp,0(sp)
 1006d20:	dec00204 	addi	sp,sp,8
 1006d24:	f800283a 	ret

01006d28 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
 1006d28:	defffb04 	addi	sp,sp,-20
 1006d2c:	df000415 	stw	fp,16(sp)
 1006d30:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 1006d34:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1006d38:	0005303a 	rdctl	r2,status
 1006d3c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1006d40:	e0fffd17 	ldw	r3,-12(fp)
 1006d44:	00bfff84 	movi	r2,-2
 1006d48:	1884703a 	and	r2,r3,r2
 1006d4c:	1001703a 	wrctl	status,r2
  
  return context;
 1006d50:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 1006d54:	e0bffe15 	stw	r2,-8(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
 1006d58:	00804074 	movhi	r2,257
 1006d5c:	108eb904 	addi	r2,r2,15076
 1006d60:	10800017 	ldw	r2,0(r2)
 1006d64:	10800b0b 	ldhu	r2,44(r2)
 1006d68:	e0bfff0d 	sth	r2,-4(fp)
 1006d6c:	e0bffe17 	ldw	r2,-8(fp)
 1006d70:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1006d74:	e0bffc17 	ldw	r2,-16(fp)
 1006d78:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
 1006d7c:	e0bfff0b 	ldhu	r2,-4(fp)
}
 1006d80:	e037883a 	mov	sp,fp
 1006d84:	df000017 	ldw	fp,0(sp)
 1006d88:	dec00104 	addi	sp,sp,4
 1006d8c:	f800283a 	ret

01006d90 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
 1006d90:	deffed04 	addi	sp,sp,-76
 1006d94:	dfc01215 	stw	ra,72(sp)
 1006d98:	df001115 	stw	fp,68(sp)
 1006d9c:	df001104 	addi	fp,sp,68
 1006da0:	e13ff915 	stw	r4,-28(fp)
 1006da4:	e1fffc15 	stw	r7,-16(fp)
 1006da8:	e17ffa0d 	sth	r5,-24(fp)
 1006dac:	e1bffb05 	stb	r6,-20(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
 1006db0:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 1006db4:	e0bffc17 	ldw	r2,-16(fp)
 1006db8:	1004c03a 	cmpne	r2,r2,zero
 1006dbc:	1000021e 	bne	r2,zero,1006dc8 <OSFlagPost+0x38>
        return ((OS_FLAGS)0);
 1006dc0:	e03fff15 	stw	zero,-4(fp)
 1006dc4:	0000d606 	br	1007120 <OSFlagPost+0x390>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
 1006dc8:	e0bff917 	ldw	r2,-28(fp)
 1006dcc:	1004c03a 	cmpne	r2,r2,zero
 1006dd0:	1000051e 	bne	r2,zero,1006de8 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 1006dd4:	e0fffc17 	ldw	r3,-16(fp)
 1006dd8:	00801b84 	movi	r2,110
 1006ddc:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 1006de0:	e03fff15 	stw	zero,-4(fp)
 1006de4:	0000ce06 	br	1007120 <OSFlagPost+0x390>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
 1006de8:	e0bff917 	ldw	r2,-28(fp)
 1006dec:	10800003 	ldbu	r2,0(r2)
 1006df0:	10803fcc 	andi	r2,r2,255
 1006df4:	10800160 	cmpeqi	r2,r2,5
 1006df8:	1000051e 	bne	r2,zero,1006e10 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
 1006dfc:	e0fffc17 	ldw	r3,-16(fp)
 1006e00:	00800044 	movi	r2,1
 1006e04:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 1006e08:	e03fff15 	stw	zero,-4(fp)
 1006e0c:	0000c406 	br	1007120 <OSFlagPost+0x390>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1006e10:	0005303a 	rdctl	r2,status
 1006e14:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1006e18:	e0fff417 	ldw	r3,-48(fp)
 1006e1c:	00bfff84 	movi	r2,-2
 1006e20:	1884703a 	and	r2,r3,r2
 1006e24:	1001703a 	wrctl	status,r2
  
  return context;
 1006e28:	e0bff417 	ldw	r2,-48(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 1006e2c:	e0bff515 	stw	r2,-44(fp)
    switch (opt) {
 1006e30:	e0bffb03 	ldbu	r2,-20(fp)
 1006e34:	e0bffe15 	stw	r2,-8(fp)
 1006e38:	e0fffe17 	ldw	r3,-8(fp)
 1006e3c:	1805003a 	cmpeq	r2,r3,zero
 1006e40:	1000041e 	bne	r2,zero,1006e54 <OSFlagPost+0xc4>
 1006e44:	e0fffe17 	ldw	r3,-8(fp)
 1006e48:	18800060 	cmpeqi	r2,r3,1
 1006e4c:	10000b1e 	bne	r2,zero,1006e7c <OSFlagPost+0xec>
 1006e50:	00001206 	br	1006e9c <OSFlagPost+0x10c>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
 1006e54:	e0bff917 	ldw	r2,-28(fp)
 1006e58:	1080020b 	ldhu	r2,8(r2)
 1006e5c:	1007883a 	mov	r3,r2
 1006e60:	e0bffa0b 	ldhu	r2,-24(fp)
 1006e64:	0084303a 	nor	r2,zero,r2
 1006e68:	1884703a 	and	r2,r3,r2
 1006e6c:	1007883a 	mov	r3,r2
 1006e70:	e0bff917 	ldw	r2,-28(fp)
 1006e74:	10c0020d 	sth	r3,8(r2)
             break;
 1006e78:	00001106 	br	1006ec0 <OSFlagPost+0x130>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
 1006e7c:	e0bff917 	ldw	r2,-28(fp)
 1006e80:	10c0020b 	ldhu	r3,8(r2)
 1006e84:	e0bffa0b 	ldhu	r2,-24(fp)
 1006e88:	1884b03a 	or	r2,r3,r2
 1006e8c:	1007883a 	mov	r3,r2
 1006e90:	e0bff917 	ldw	r2,-28(fp)
 1006e94:	10c0020d 	sth	r3,8(r2)
             break;
 1006e98:	00000906 	br	1006ec0 <OSFlagPost+0x130>
 1006e9c:	e0bff517 	ldw	r2,-44(fp)
 1006ea0:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1006ea4:	e0bff317 	ldw	r2,-52(fp)
 1006ea8:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
 1006eac:	e0fffc17 	ldw	r3,-16(fp)
 1006eb0:	00801c44 	movi	r2,113
 1006eb4:	18800005 	stb	r2,0(r3)
             return ((OS_FLAGS)0);
 1006eb8:	e03fff15 	stw	zero,-4(fp)
 1006ebc:	00009806 	br	1007120 <OSFlagPost+0x390>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
 1006ec0:	e03ff785 	stb	zero,-34(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 1006ec4:	e0bff917 	ldw	r2,-28(fp)
 1006ec8:	10800117 	ldw	r2,4(r2)
 1006ecc:	e0bff815 	stw	r2,-32(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 1006ed0:	00007506 	br	10070a8 <OSFlagPost+0x318>
        switch (pnode->OSFlagNodeWaitType) {
 1006ed4:	e0bff817 	ldw	r2,-32(fp)
 1006ed8:	10800483 	ldbu	r2,18(r2)
 1006edc:	10803fcc 	andi	r2,r2,255
 1006ee0:	e0bffd15 	stw	r2,-12(fp)
 1006ee4:	e0fffd17 	ldw	r3,-12(fp)
 1006ee8:	18800060 	cmpeqi	r2,r3,1
 1006eec:	10004d1e 	bne	r2,zero,1007024 <OSFlagPost+0x294>
 1006ef0:	e0fffd17 	ldw	r3,-12(fp)
 1006ef4:	18800088 	cmpgei	r2,r3,2
 1006ef8:	1000041e 	bne	r2,zero,1006f0c <OSFlagPost+0x17c>
 1006efc:	e0fffd17 	ldw	r3,-12(fp)
 1006f00:	1805003a 	cmpeq	r2,r3,zero
 1006f04:	1000301e 	bne	r2,zero,1006fc8 <OSFlagPost+0x238>
 1006f08:	00005b06 	br	1007078 <OSFlagPost+0x2e8>
 1006f0c:	e0fffd17 	ldw	r3,-12(fp)
 1006f10:	188000a0 	cmpeqi	r2,r3,2
 1006f14:	1000041e 	bne	r2,zero,1006f28 <OSFlagPost+0x198>
 1006f18:	e0fffd17 	ldw	r3,-12(fp)
 1006f1c:	188000e0 	cmpeqi	r2,r3,3
 1006f20:	1000161e 	bne	r2,zero,1006f7c <OSFlagPost+0x1ec>
 1006f24:	00005406 	br	1007078 <OSFlagPost+0x2e8>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 1006f28:	e0bff917 	ldw	r2,-28(fp)
 1006f2c:	10c0020b 	ldhu	r3,8(r2)
 1006f30:	e0bff817 	ldw	r2,-32(fp)
 1006f34:	1080040b 	ldhu	r2,16(r2)
 1006f38:	1884703a 	and	r2,r3,r2
 1006f3c:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 1006f40:	e0bff817 	ldw	r2,-32(fp)
 1006f44:	1080040b 	ldhu	r2,16(r2)
 1006f48:	10ffffcc 	andi	r3,r2,65535
 1006f4c:	e0bff68b 	ldhu	r2,-38(fp)
 1006f50:	1880521e 	bne	r3,r2,100709c <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 1006f54:	e17ff68b 	ldhu	r5,-38(fp)
 1006f58:	e13ff817 	ldw	r4,-32(fp)
 1006f5c:	10074b40 	call	10074b4 <OS_FlagTaskRdy>
 1006f60:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
 1006f64:	e0bff603 	ldbu	r2,-40(fp)
 1006f68:	10800058 	cmpnei	r2,r2,1
 1006f6c:	10004b1e 	bne	r2,zero,100709c <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 1006f70:	00800044 	movi	r2,1
 1006f74:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
 1006f78:	00004806 	br	100709c <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 1006f7c:	e0bff917 	ldw	r2,-28(fp)
 1006f80:	10c0020b 	ldhu	r3,8(r2)
 1006f84:	e0bff817 	ldw	r2,-32(fp)
 1006f88:	1080040b 	ldhu	r2,16(r2)
 1006f8c:	1884703a 	and	r2,r3,r2
 1006f90:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 1006f94:	e0bff68b 	ldhu	r2,-38(fp)
 1006f98:	1005003a 	cmpeq	r2,r2,zero
 1006f9c:	10003f1e 	bne	r2,zero,100709c <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 1006fa0:	e17ff68b 	ldhu	r5,-38(fp)
 1006fa4:	e13ff817 	ldw	r4,-32(fp)
 1006fa8:	10074b40 	call	10074b4 <OS_FlagTaskRdy>
 1006fac:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
 1006fb0:	e0bff603 	ldbu	r2,-40(fp)
 1006fb4:	10800058 	cmpnei	r2,r2,1
 1006fb8:	1000381e 	bne	r2,zero,100709c <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 1006fbc:	00800044 	movi	r2,1
 1006fc0:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
 1006fc4:	00003506 	br	100709c <OSFlagPost+0x30c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 1006fc8:	e0bff917 	ldw	r2,-28(fp)
 1006fcc:	1080020b 	ldhu	r2,8(r2)
 1006fd0:	0084303a 	nor	r2,zero,r2
 1006fd4:	1007883a 	mov	r3,r2
 1006fd8:	e0bff817 	ldw	r2,-32(fp)
 1006fdc:	1080040b 	ldhu	r2,16(r2)
 1006fe0:	1884703a 	and	r2,r3,r2
 1006fe4:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 1006fe8:	e0bff817 	ldw	r2,-32(fp)
 1006fec:	1080040b 	ldhu	r2,16(r2)
 1006ff0:	10ffffcc 	andi	r3,r2,65535
 1006ff4:	e0bff68b 	ldhu	r2,-38(fp)
 1006ff8:	1880281e 	bne	r3,r2,100709c <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 1006ffc:	e17ff68b 	ldhu	r5,-38(fp)
 1007000:	e13ff817 	ldw	r4,-32(fp)
 1007004:	10074b40 	call	10074b4 <OS_FlagTaskRdy>
 1007008:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
 100700c:	e0bff603 	ldbu	r2,-40(fp)
 1007010:	10800058 	cmpnei	r2,r2,1
 1007014:	1000211e 	bne	r2,zero,100709c <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 1007018:	00800044 	movi	r2,1
 100701c:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
 1007020:	00001e06 	br	100709c <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 1007024:	e0bff917 	ldw	r2,-28(fp)
 1007028:	1080020b 	ldhu	r2,8(r2)
 100702c:	0084303a 	nor	r2,zero,r2
 1007030:	1007883a 	mov	r3,r2
 1007034:	e0bff817 	ldw	r2,-32(fp)
 1007038:	1080040b 	ldhu	r2,16(r2)
 100703c:	1884703a 	and	r2,r3,r2
 1007040:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 1007044:	e0bff68b 	ldhu	r2,-38(fp)
 1007048:	1005003a 	cmpeq	r2,r2,zero
 100704c:	1000131e 	bne	r2,zero,100709c <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 1007050:	e17ff68b 	ldhu	r5,-38(fp)
 1007054:	e13ff817 	ldw	r4,-32(fp)
 1007058:	10074b40 	call	10074b4 <OS_FlagTaskRdy>
 100705c:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
 1007060:	e0bff603 	ldbu	r2,-40(fp)
 1007064:	10800058 	cmpnei	r2,r2,1
 1007068:	10000c1e 	bne	r2,zero,100709c <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 100706c:	00800044 	movi	r2,1
 1007070:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
 1007074:	00000906 	br	100709c <OSFlagPost+0x30c>
 1007078:	e0bff517 	ldw	r2,-44(fp)
 100707c:	e0bff215 	stw	r2,-56(fp)
 1007080:	e0bff217 	ldw	r2,-56(fp)
 1007084:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 1007088:	e0fffc17 	ldw	r3,-16(fp)
 100708c:	00801bc4 	movi	r2,111
 1007090:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
 1007094:	e03fff15 	stw	zero,-4(fp)
 1007098:	00002106 	br	1007120 <OSFlagPost+0x390>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
 100709c:	e0bff817 	ldw	r2,-32(fp)
 10070a0:	10800017 	ldw	r2,0(r2)
 10070a4:	e0bff815 	stw	r2,-32(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 10070a8:	e0bff817 	ldw	r2,-32(fp)
 10070ac:	1004c03a 	cmpne	r2,r2,zero
 10070b0:	103f881e 	bne	r2,zero,1006ed4 <OSFlagPost+0x144>
 10070b4:	e0bff517 	ldw	r2,-44(fp)
 10070b8:	e0bff115 	stw	r2,-60(fp)
 10070bc:	e0bff117 	ldw	r2,-60(fp)
 10070c0:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
 10070c4:	e0bff783 	ldbu	r2,-34(fp)
 10070c8:	10800058 	cmpnei	r2,r2,1
 10070cc:	1000011e 	bne	r2,zero,10070d4 <OSFlagPost+0x344>
        OS_Sched();
 10070d0:	10054c00 	call	10054c0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10070d4:	0005303a 	rdctl	r2,status
 10070d8:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10070dc:	e0fff017 	ldw	r3,-64(fp)
 10070e0:	00bfff84 	movi	r2,-2
 10070e4:	1884703a 	and	r2,r3,r2
 10070e8:	1001703a 	wrctl	status,r2
  
  return context;
 10070ec:	e0bff017 	ldw	r2,-64(fp)
    }
    OS_ENTER_CRITICAL();
 10070f0:	e0bff515 	stw	r2,-44(fp)
    flags_cur = pgrp->OSFlagFlags;
 10070f4:	e0bff917 	ldw	r2,-28(fp)
 10070f8:	1080020b 	ldhu	r2,8(r2)
 10070fc:	e0bff70d 	sth	r2,-36(fp)
 1007100:	e0bff517 	ldw	r2,-44(fp)
 1007104:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1007108:	e0bfef17 	ldw	r2,-68(fp)
 100710c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
 1007110:	e0bffc17 	ldw	r2,-16(fp)
 1007114:	10000005 	stb	zero,0(r2)
    return (flags_cur);
 1007118:	e0bff70b 	ldhu	r2,-36(fp)
 100711c:	e0bfff15 	stw	r2,-4(fp)
 1007120:	e0bfff17 	ldw	r2,-4(fp)
}
 1007124:	e037883a 	mov	sp,fp
 1007128:	dfc00117 	ldw	ra,4(sp)
 100712c:	df000017 	ldw	fp,0(sp)
 1007130:	dec00204 	addi	sp,sp,8
 1007134:	f800283a 	ret

01007138 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
 1007138:	defff804 	addi	sp,sp,-32
 100713c:	df000715 	stw	fp,28(sp)
 1007140:	df000704 	addi	fp,sp,28
 1007144:	e13ffd15 	stw	r4,-12(fp)
 1007148:	e17ffe15 	stw	r5,-8(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
 100714c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
 1007150:	e0bffe17 	ldw	r2,-8(fp)
 1007154:	1004c03a 	cmpne	r2,r2,zero
 1007158:	1000021e 	bne	r2,zero,1007164 <OSFlagQuery+0x2c>
        return ((OS_FLAGS)0);
 100715c:	e03fff15 	stw	zero,-4(fp)
 1007160:	00002506 	br	10071f8 <OSFlagQuery+0xc0>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
 1007164:	e0bffd17 	ldw	r2,-12(fp)
 1007168:	1004c03a 	cmpne	r2,r2,zero
 100716c:	1000051e 	bne	r2,zero,1007184 <OSFlagQuery+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 1007170:	e0fffe17 	ldw	r3,-8(fp)
 1007174:	00801b84 	movi	r2,110
 1007178:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 100717c:	e03fff15 	stw	zero,-4(fp)
 1007180:	00001d06 	br	10071f8 <OSFlagQuery+0xc0>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
 1007184:	e0bffd17 	ldw	r2,-12(fp)
 1007188:	10800003 	ldbu	r2,0(r2)
 100718c:	10803fcc 	andi	r2,r2,255
 1007190:	10800160 	cmpeqi	r2,r2,5
 1007194:	1000051e 	bne	r2,zero,10071ac <OSFlagQuery+0x74>
        *perr = OS_ERR_EVENT_TYPE;
 1007198:	e0fffe17 	ldw	r3,-8(fp)
 100719c:	00800044 	movi	r2,1
 10071a0:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 10071a4:	e03fff15 	stw	zero,-4(fp)
 10071a8:	00001306 	br	10071f8 <OSFlagQuery+0xc0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10071ac:	0005303a 	rdctl	r2,status
 10071b0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10071b4:	e0fffa17 	ldw	r3,-24(fp)
 10071b8:	00bfff84 	movi	r2,-2
 10071bc:	1884703a 	and	r2,r3,r2
 10071c0:	1001703a 	wrctl	status,r2
  
  return context;
 10071c4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 10071c8:	e0bffb15 	stw	r2,-20(fp)
    flags = pgrp->OSFlagFlags;
 10071cc:	e0bffd17 	ldw	r2,-12(fp)
 10071d0:	1080020b 	ldhu	r2,8(r2)
 10071d4:	e0bffc0d 	sth	r2,-16(fp)
 10071d8:	e0bffb17 	ldw	r2,-20(fp)
 10071dc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10071e0:	e0bff917 	ldw	r2,-28(fp)
 10071e4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 10071e8:	e0bffe17 	ldw	r2,-8(fp)
 10071ec:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
 10071f0:	e0bffc0b 	ldhu	r2,-16(fp)
 10071f4:	e0bfff15 	stw	r2,-4(fp)
 10071f8:	e0bfff17 	ldw	r2,-4(fp)
}
 10071fc:	e037883a 	mov	sp,fp
 1007200:	df000017 	ldw	fp,0(sp)
 1007204:	dec00104 	addi	sp,sp,4
 1007208:	f800283a 	ret

0100720c <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
 100720c:	defff804 	addi	sp,sp,-32
 1007210:	df000715 	stw	fp,28(sp)
 1007214:	df000704 	addi	fp,sp,28
 1007218:	e13ffb15 	stw	r4,-20(fp)
 100721c:	e17ffc15 	stw	r5,-16(fp)
 1007220:	e0800117 	ldw	r2,4(fp)
 1007224:	e1bffd0d 	sth	r6,-12(fp)
 1007228:	e1fffe05 	stb	r7,-8(fp)
 100722c:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
 1007230:	00804074 	movhi	r2,257
 1007234:	108eb904 	addi	r2,r2,15076
 1007238:	10c00017 	ldw	r3,0(r2)
 100723c:	00804074 	movhi	r2,257
 1007240:	108eb904 	addi	r2,r2,15076
 1007244:	10800017 	ldw	r2,0(r2)
 1007248:	10800c03 	ldbu	r2,48(r2)
 100724c:	10800814 	ori	r2,r2,32
 1007250:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
 1007254:	00804074 	movhi	r2,257
 1007258:	108eb904 	addi	r2,r2,15076
 100725c:	10800017 	ldw	r2,0(r2)
 1007260:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
 1007264:	00804074 	movhi	r2,257
 1007268:	108eb904 	addi	r2,r2,15076
 100726c:	10c00017 	ldw	r3,0(r2)
 1007270:	e0bfff0b 	ldhu	r2,-4(fp)
 1007274:	18800b8d 	sth	r2,46(r3)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
 1007278:	00804074 	movhi	r2,257
 100727c:	108eb904 	addi	r2,r2,15076
 1007280:	10c00017 	ldw	r3,0(r2)
 1007284:	e0bffc17 	ldw	r2,-16(fp)
 1007288:	18800a15 	stw	r2,40(r3)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
 100728c:	e0fffc17 	ldw	r3,-16(fp)
 1007290:	e0bffd0b 	ldhu	r2,-12(fp)
 1007294:	1880040d 	sth	r2,16(r3)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
 1007298:	e0fffc17 	ldw	r3,-16(fp)
 100729c:	e0bffe03 	ldbu	r2,-8(fp)
 10072a0:	18800485 	stb	r2,18(r3)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
 10072a4:	00804074 	movhi	r2,257
 10072a8:	108eb904 	addi	r2,r2,15076
 10072ac:	10c00017 	ldw	r3,0(r2)
 10072b0:	e0bffc17 	ldw	r2,-16(fp)
 10072b4:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
 10072b8:	e0bffb17 	ldw	r2,-20(fp)
 10072bc:	10c00117 	ldw	r3,4(r2)
 10072c0:	e0bffc17 	ldw	r2,-16(fp)
 10072c4:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
 10072c8:	e0bffc17 	ldw	r2,-16(fp)
 10072cc:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
 10072d0:	e0fffc17 	ldw	r3,-16(fp)
 10072d4:	e0bffb17 	ldw	r2,-20(fp)
 10072d8:	18800315 	stw	r2,12(r3)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 10072dc:	e0bffb17 	ldw	r2,-20(fp)
 10072e0:	10800117 	ldw	r2,4(r2)
 10072e4:	e0bffa15 	stw	r2,-24(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
 10072e8:	e0bffa17 	ldw	r2,-24(fp)
 10072ec:	1005003a 	cmpeq	r2,r2,zero
 10072f0:	1000031e 	bne	r2,zero,1007300 <OS_FlagBlock+0xf4>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
 10072f4:	e0fffa17 	ldw	r3,-24(fp)
 10072f8:	e0bffc17 	ldw	r2,-16(fp)
 10072fc:	18800115 	stw	r2,4(r3)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
 1007300:	e0fffb17 	ldw	r3,-20(fp)
 1007304:	e0bffc17 	ldw	r2,-16(fp)
 1007308:	18800115 	stw	r2,4(r3)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
 100730c:	00804074 	movhi	r2,257
 1007310:	108eb904 	addi	r2,r2,15076
 1007314:	10800017 	ldw	r2,0(r2)
 1007318:	10800d03 	ldbu	r2,52(r2)
 100731c:	e0bff905 	stb	r2,-28(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 1007320:	e13ff903 	ldbu	r4,-28(fp)
 1007324:	e0fff903 	ldbu	r3,-28(fp)
 1007328:	00804074 	movhi	r2,257
 100732c:	108eb644 	addi	r2,r2,15065
 1007330:	10c5883a 	add	r2,r2,r3
 1007334:	10800003 	ldbu	r2,0(r2)
 1007338:	1007883a 	mov	r3,r2
 100733c:	00804074 	movhi	r2,257
 1007340:	108eb904 	addi	r2,r2,15076
 1007344:	10800017 	ldw	r2,0(r2)
 1007348:	10800d43 	ldbu	r2,53(r2)
 100734c:	0084303a 	nor	r2,zero,r2
 1007350:	1884703a 	and	r2,r3,r2
 1007354:	1007883a 	mov	r3,r2
 1007358:	00804074 	movhi	r2,257
 100735c:	108eb644 	addi	r2,r2,15065
 1007360:	1105883a 	add	r2,r2,r4
 1007364:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0x00) {
 1007368:	e0fff903 	ldbu	r3,-28(fp)
 100736c:	00804074 	movhi	r2,257
 1007370:	108eb644 	addi	r2,r2,15065
 1007374:	10c5883a 	add	r2,r2,r3
 1007378:	10800003 	ldbu	r2,0(r2)
 100737c:	10803fcc 	andi	r2,r2,255
 1007380:	1004c03a 	cmpne	r2,r2,zero
 1007384:	10000e1e 	bne	r2,zero,10073c0 <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 1007388:	00804074 	movhi	r2,257
 100738c:	108eb904 	addi	r2,r2,15076
 1007390:	10800017 	ldw	r2,0(r2)
 1007394:	10800d83 	ldbu	r2,54(r2)
 1007398:	0084303a 	nor	r2,zero,r2
 100739c:	1007883a 	mov	r3,r2
 10073a0:	00804074 	movhi	r2,257
 10073a4:	108eb604 	addi	r2,r2,15064
 10073a8:	10800003 	ldbu	r2,0(r2)
 10073ac:	1884703a 	and	r2,r3,r2
 10073b0:	1007883a 	mov	r3,r2
 10073b4:	00804074 	movhi	r2,257
 10073b8:	108eb604 	addi	r2,r2,15064
 10073bc:	10c00005 	stb	r3,0(r2)
    }
}
 10073c0:	e037883a 	mov	sp,fp
 10073c4:	df000017 	ldw	fp,0(sp)
 10073c8:	dec00104 	addi	sp,sp,4
 10073cc:	f800283a 	ret

010073d0 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
 10073d0:	defffb04 	addi	sp,sp,-20
 10073d4:	dfc00415 	stw	ra,16(sp)
 10073d8:	df000315 	stw	fp,12(sp)
 10073dc:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
 10073e0:	01004074 	movhi	r4,257
 10073e4:	211ecb04 	addi	r4,r4,31532
 10073e8:	0140dc04 	movi	r5,880
 10073ec:	10054000 	call	1005400 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
 10073f0:	00804074 	movhi	r2,257
 10073f4:	109ecb04 	addi	r2,r2,31532
 10073f8:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
 10073fc:	00804074 	movhi	r2,257
 1007400:	109ed604 	addi	r2,r2,31576
 1007404:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 1007408:	e03fff0d 	sth	zero,-4(fp)
 100740c:	00001306 	br	100745c <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 1007410:	e0bffe17 	ldw	r2,-8(fp)
 1007414:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
 1007418:	e0fffe17 	ldw	r3,-8(fp)
 100741c:	e0bffd17 	ldw	r2,-12(fp)
 1007420:	18800115 	stw	r2,4(r3)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
 1007424:	e0fffe17 	ldw	r3,-8(fp)
 1007428:	00800fc4 	movi	r2,63
 100742c:	18800285 	stb	r2,10(r3)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 1007430:	e0bffe17 	ldw	r2,-8(fp)
 1007434:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
 1007438:	e0bffe17 	ldw	r2,-8(fp)
 100743c:	10800b04 	addi	r2,r2,44
 1007440:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
 1007444:	e0bffd17 	ldw	r2,-12(fp)
 1007448:	10800b04 	addi	r2,r2,44
 100744c:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 1007450:	e0bfff0b 	ldhu	r2,-4(fp)
 1007454:	10800044 	addi	r2,r2,1
 1007458:	e0bfff0d 	sth	r2,-4(fp)
 100745c:	e0bfff0b 	ldhu	r2,-4(fp)
 1007460:	108004f0 	cmpltui	r2,r2,19
 1007464:	103fea1e 	bne	r2,zero,1007410 <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 1007468:	e0bffe17 	ldw	r2,-8(fp)
 100746c:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
 1007470:	e0bffe17 	ldw	r2,-8(fp)
 1007474:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
 1007478:	e0fffe17 	ldw	r3,-8(fp)
 100747c:	00800fc4 	movi	r2,63
 1007480:	18800285 	stb	r2,10(r3)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 1007484:	e0bffe17 	ldw	r2,-8(fp)
 1007488:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
 100748c:	00c04074 	movhi	r3,257
 1007490:	18cebb04 	addi	r3,r3,15084
 1007494:	00804074 	movhi	r2,257
 1007498:	109ecb04 	addi	r2,r2,31532
 100749c:	18800015 	stw	r2,0(r3)
#endif
}
 10074a0:	e037883a 	mov	sp,fp
 10074a4:	dfc00117 	ldw	ra,4(sp)
 10074a8:	df000017 	ldw	fp,0(sp)
 10074ac:	dec00204 	addi	sp,sp,8
 10074b0:	f800283a 	ret

010074b4 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
 10074b4:	defffa04 	addi	sp,sp,-24
 10074b8:	dfc00515 	stw	ra,20(sp)
 10074bc:	df000415 	stw	fp,16(sp)
 10074c0:	df000404 	addi	fp,sp,16
 10074c4:	e13ffe15 	stw	r4,-8(fp)
 10074c8:	e17fff0d 	sth	r5,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
 10074cc:	e0bffe17 	ldw	r2,-8(fp)
 10074d0:	10800217 	ldw	r2,8(r2)
 10074d4:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
 10074d8:	e0bffd17 	ldw	r2,-12(fp)
 10074dc:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
 10074e0:	e0fffd17 	ldw	r3,-12(fp)
 10074e4:	e0bfff0b 	ldhu	r2,-4(fp)
 10074e8:	18800b0d 	sth	r2,44(r3)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
 10074ec:	e0bffd17 	ldw	r2,-12(fp)
 10074f0:	10c00c03 	ldbu	r3,48(r2)
 10074f4:	00bff7c4 	movi	r2,-33
 10074f8:	1884703a 	and	r2,r3,r2
 10074fc:	1007883a 	mov	r3,r2
 1007500:	e0bffd17 	ldw	r2,-12(fp)
 1007504:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
 1007508:	e0bffd17 	ldw	r2,-12(fp)
 100750c:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
 1007510:	e0bffd17 	ldw	r2,-12(fp)
 1007514:	10800c03 	ldbu	r2,48(r2)
 1007518:	10803fcc 	andi	r2,r2,255
 100751c:	1004c03a 	cmpne	r2,r2,zero
 1007520:	10001f1e 	bne	r2,zero,10075a0 <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
 1007524:	e0bffd17 	ldw	r2,-12(fp)
 1007528:	10c00d83 	ldbu	r3,54(r2)
 100752c:	00804074 	movhi	r2,257
 1007530:	108eb604 	addi	r2,r2,15064
 1007534:	10800003 	ldbu	r2,0(r2)
 1007538:	1884b03a 	or	r2,r3,r2
 100753c:	1007883a 	mov	r3,r2
 1007540:	00804074 	movhi	r2,257
 1007544:	108eb604 	addi	r2,r2,15064
 1007548:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 100754c:	e0bffd17 	ldw	r2,-12(fp)
 1007550:	10800d03 	ldbu	r2,52(r2)
 1007554:	11003fcc 	andi	r4,r2,255
 1007558:	e0bffd17 	ldw	r2,-12(fp)
 100755c:	10800d03 	ldbu	r2,52(r2)
 1007560:	10c03fcc 	andi	r3,r2,255
 1007564:	00804074 	movhi	r2,257
 1007568:	108eb644 	addi	r2,r2,15065
 100756c:	10c5883a 	add	r2,r2,r3
 1007570:	10c00003 	ldbu	r3,0(r2)
 1007574:	e0bffd17 	ldw	r2,-12(fp)
 1007578:	10800d43 	ldbu	r2,53(r2)
 100757c:	1884b03a 	or	r2,r3,r2
 1007580:	1007883a 	mov	r3,r2
 1007584:	00804074 	movhi	r2,257
 1007588:	108eb644 	addi	r2,r2,15065
 100758c:	1105883a 	add	r2,r2,r4
 1007590:	10c00005 	stb	r3,0(r2)
        sched                   = OS_TRUE;
 1007594:	00800044 	movi	r2,1
 1007598:	e0bffc05 	stb	r2,-16(fp)
 100759c:	00000106 	br	10075a4 <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
 10075a0:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
 10075a4:	e13ffe17 	ldw	r4,-8(fp)
 10075a8:	10075c40 	call	10075c4 <OS_FlagUnlink>
    return (sched);
 10075ac:	e0bffc03 	ldbu	r2,-16(fp)
}
 10075b0:	e037883a 	mov	sp,fp
 10075b4:	dfc00117 	ldw	ra,4(sp)
 10075b8:	df000017 	ldw	fp,0(sp)
 10075bc:	dec00204 	addi	sp,sp,8
 10075c0:	f800283a 	ret

010075c4 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
 10075c4:	defffa04 	addi	sp,sp,-24
 10075c8:	df000515 	stw	fp,20(sp)
 10075cc:	df000504 	addi	fp,sp,20
 10075d0:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
 10075d4:	e0bfff17 	ldw	r2,-4(fp)
 10075d8:	10800117 	ldw	r2,4(r2)
 10075dc:	e0bffc15 	stw	r2,-16(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 10075e0:	e0bfff17 	ldw	r2,-4(fp)
 10075e4:	10800017 	ldw	r2,0(r2)
 10075e8:	e0bffb15 	stw	r2,-20(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
 10075ec:	e0bffc17 	ldw	r2,-16(fp)
 10075f0:	1004c03a 	cmpne	r2,r2,zero
 10075f4:	10000c1e 	bne	r2,zero,1007628 <OS_FlagUnlink+0x64>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
 10075f8:	e0bfff17 	ldw	r2,-4(fp)
 10075fc:	10800317 	ldw	r2,12(r2)
 1007600:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
 1007604:	e0fffd17 	ldw	r3,-12(fp)
 1007608:	e0bffb17 	ldw	r2,-20(fp)
 100760c:	18800115 	stw	r2,4(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {
 1007610:	e0bffb17 	ldw	r2,-20(fp)
 1007614:	1005003a 	cmpeq	r2,r2,zero
 1007618:	10000c1e 	bne	r2,zero,100764c <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
 100761c:	e0bffb17 	ldw	r2,-20(fp)
 1007620:	10000115 	stw	zero,4(r2)
 1007624:	00000906 	br	100764c <OS_FlagUnlink+0x88>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
 1007628:	e0fffc17 	ldw	r3,-16(fp)
 100762c:	e0bffb17 	ldw	r2,-20(fp)
 1007630:	18800015 	stw	r2,0(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
 1007634:	e0bffb17 	ldw	r2,-20(fp)
 1007638:	1005003a 	cmpeq	r2,r2,zero
 100763c:	1000031e 	bne	r2,zero,100764c <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
 1007640:	e0fffb17 	ldw	r3,-20(fp)
 1007644:	e0bffc17 	ldw	r2,-16(fp)
 1007648:	18800115 	stw	r2,4(r3)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
 100764c:	e0bfff17 	ldw	r2,-4(fp)
 1007650:	10800217 	ldw	r2,8(r2)
 1007654:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
 1007658:	e0bffe17 	ldw	r2,-8(fp)
 100765c:	10000a15 	stw	zero,40(r2)
#endif
}
 1007660:	e037883a 	mov	sp,fp
 1007664:	df000017 	ldw	fp,0(sp)
 1007668:	dec00104 	addi	sp,sp,4
 100766c:	f800283a 	ret

01007670 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
 1007670:	defff304 	addi	sp,sp,-52
 1007674:	df000c15 	stw	fp,48(sp)
 1007678:	df000c04 	addi	fp,sp,48
 100767c:	e13ffb15 	stw	r4,-20(fp)
 1007680:	e17ffc15 	stw	r5,-16(fp)
 1007684:	e1bffd15 	stw	r6,-12(fp)
 1007688:	e1fffe15 	stw	r7,-8(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 100768c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 1007690:	e0bffe17 	ldw	r2,-8(fp)
 1007694:	1004c03a 	cmpne	r2,r2,zero
 1007698:	1000021e 	bne	r2,zero,10076a4 <OSMemCreate+0x34>
        return ((OS_MEM *)0);
 100769c:	e03fff15 	stw	zero,-4(fp)
 10076a0:	00007506 	br	1007878 <OSMemCreate+0x208>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
 10076a4:	e0bffb17 	ldw	r2,-20(fp)
 10076a8:	1004c03a 	cmpne	r2,r2,zero
 10076ac:	1000051e 	bne	r2,zero,10076c4 <OSMemCreate+0x54>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 10076b0:	e0fffe17 	ldw	r3,-8(fp)
 10076b4:	00801884 	movi	r2,98
 10076b8:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 10076bc:	e03fff15 	stw	zero,-4(fp)
 10076c0:	00006d06 	br	1007878 <OSMemCreate+0x208>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
 10076c4:	e0bffb17 	ldw	r2,-20(fp)
 10076c8:	108000cc 	andi	r2,r2,3
 10076cc:	1005003a 	cmpeq	r2,r2,zero
 10076d0:	1000051e 	bne	r2,zero,10076e8 <OSMemCreate+0x78>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 10076d4:	e0fffe17 	ldw	r3,-8(fp)
 10076d8:	00801884 	movi	r2,98
 10076dc:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 10076e0:	e03fff15 	stw	zero,-4(fp)
 10076e4:	00006406 	br	1007878 <OSMemCreate+0x208>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
 10076e8:	e0bffc17 	ldw	r2,-16(fp)
 10076ec:	108000a8 	cmpgeui	r2,r2,2
 10076f0:	1000051e 	bne	r2,zero,1007708 <OSMemCreate+0x98>
        *perr = OS_ERR_MEM_INVALID_BLKS;
 10076f4:	e0fffe17 	ldw	r3,-8(fp)
 10076f8:	008016c4 	movi	r2,91
 10076fc:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 1007700:	e03fff15 	stw	zero,-4(fp)
 1007704:	00005c06 	br	1007878 <OSMemCreate+0x208>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
 1007708:	e0bffd17 	ldw	r2,-12(fp)
 100770c:	10800128 	cmpgeui	r2,r2,4
 1007710:	1000051e 	bne	r2,zero,1007728 <OSMemCreate+0xb8>
        *perr = OS_ERR_MEM_INVALID_SIZE;
 1007714:	e0fffe17 	ldw	r3,-8(fp)
 1007718:	00801704 	movi	r2,92
 100771c:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 1007720:	e03fff15 	stw	zero,-4(fp)
 1007724:	00005406 	br	1007878 <OSMemCreate+0x208>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1007728:	0005303a 	rdctl	r2,status
 100772c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1007730:	e0fff517 	ldw	r3,-44(fp)
 1007734:	00bfff84 	movi	r2,-2
 1007738:	1884703a 	and	r2,r3,r2
 100773c:	1001703a 	wrctl	status,r2
  
  return context;
 1007740:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 1007744:	e0bff615 	stw	r2,-40(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
 1007748:	00804074 	movhi	r2,257
 100774c:	108eb304 	addi	r2,r2,15052
 1007750:	10800017 	ldw	r2,0(r2)
 1007754:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
 1007758:	00804074 	movhi	r2,257
 100775c:	108eb304 	addi	r2,r2,15052
 1007760:	10800017 	ldw	r2,0(r2)
 1007764:	1005003a 	cmpeq	r2,r2,zero
 1007768:	1000081e 	bne	r2,zero,100778c <OSMemCreate+0x11c>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
 100776c:	00804074 	movhi	r2,257
 1007770:	108eb304 	addi	r2,r2,15052
 1007774:	10800017 	ldw	r2,0(r2)
 1007778:	10800117 	ldw	r2,4(r2)
 100777c:	1007883a 	mov	r3,r2
 1007780:	00804074 	movhi	r2,257
 1007784:	108eb304 	addi	r2,r2,15052
 1007788:	10c00015 	stw	r3,0(r2)
 100778c:	e0bff617 	ldw	r2,-40(fp)
 1007790:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1007794:	e0bff417 	ldw	r2,-48(fp)
 1007798:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
 100779c:	e0bffa17 	ldw	r2,-24(fp)
 10077a0:	1004c03a 	cmpne	r2,r2,zero
 10077a4:	1000051e 	bne	r2,zero,10077bc <OSMemCreate+0x14c>
        *perr = OS_ERR_MEM_INVALID_PART;
 10077a8:	e0fffe17 	ldw	r3,-8(fp)
 10077ac:	00801684 	movi	r2,90
 10077b0:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 10077b4:	e03fff15 	stw	zero,-4(fp)
 10077b8:	00002f06 	br	1007878 <OSMemCreate+0x208>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
 10077bc:	e0bffb17 	ldw	r2,-20(fp)
 10077c0:	e0bff815 	stw	r2,-32(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
 10077c4:	e0bffb17 	ldw	r2,-20(fp)
 10077c8:	1007883a 	mov	r3,r2
 10077cc:	e0bffd17 	ldw	r2,-12(fp)
 10077d0:	1885883a 	add	r2,r3,r2
 10077d4:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < (nblks - 1); i++) {
 10077d8:	e03ff715 	stw	zero,-36(fp)
 10077dc:	00000d06 	br	1007814 <OSMemCreate+0x1a4>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
 10077e0:	e0fff817 	ldw	r3,-32(fp)
 10077e4:	e0bff917 	ldw	r2,-28(fp)
 10077e8:	18800015 	stw	r2,0(r3)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
 10077ec:	e0bff917 	ldw	r2,-28(fp)
 10077f0:	e0bff815 	stw	r2,-32(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
 10077f4:	e0bff917 	ldw	r2,-28(fp)
 10077f8:	1007883a 	mov	r3,r2
 10077fc:	e0bffd17 	ldw	r2,-12(fp)
 1007800:	1885883a 	add	r2,r3,r2
 1007804:	e0bff915 	stw	r2,-28(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
 1007808:	e0bff717 	ldw	r2,-36(fp)
 100780c:	10800044 	addi	r2,r2,1
 1007810:	e0bff715 	stw	r2,-36(fp)
 1007814:	e0bffc17 	ldw	r2,-16(fp)
 1007818:	10ffffc4 	addi	r3,r2,-1
 100781c:	e0bff717 	ldw	r2,-36(fp)
 1007820:	10ffef36 	bltu	r2,r3,10077e0 <OSMemCreate+0x170>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
 1007824:	e0bff817 	ldw	r2,-32(fp)
 1007828:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
 100782c:	e0fffa17 	ldw	r3,-24(fp)
 1007830:	e0bffb17 	ldw	r2,-20(fp)
 1007834:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
 1007838:	e0fffa17 	ldw	r3,-24(fp)
 100783c:	e0bffb17 	ldw	r2,-20(fp)
 1007840:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
 1007844:	e0fffa17 	ldw	r3,-24(fp)
 1007848:	e0bffc17 	ldw	r2,-16(fp)
 100784c:	18800415 	stw	r2,16(r3)
    pmem->OSMemNBlks    = nblks;
 1007850:	e0fffa17 	ldw	r3,-24(fp)
 1007854:	e0bffc17 	ldw	r2,-16(fp)
 1007858:	18800315 	stw	r2,12(r3)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
 100785c:	e0fffa17 	ldw	r3,-24(fp)
 1007860:	e0bffd17 	ldw	r2,-12(fp)
 1007864:	18800215 	stw	r2,8(r3)
    *perr               = OS_ERR_NONE;
 1007868:	e0bffe17 	ldw	r2,-8(fp)
 100786c:	10000005 	stb	zero,0(r2)
    return (pmem);
 1007870:	e0bffa17 	ldw	r2,-24(fp)
 1007874:	e0bfff15 	stw	r2,-4(fp)
 1007878:	e0bfff17 	ldw	r2,-4(fp)
}
 100787c:	e037883a 	mov	sp,fp
 1007880:	df000017 	ldw	fp,0(sp)
 1007884:	dec00104 	addi	sp,sp,4
 1007888:	f800283a 	ret

0100788c <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
 100788c:	defff704 	addi	sp,sp,-36
 1007890:	df000815 	stw	fp,32(sp)
 1007894:	df000804 	addi	fp,sp,32
 1007898:	e13ffd15 	stw	r4,-12(fp)
 100789c:	e17ffe15 	stw	r5,-8(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 10078a0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 10078a4:	e0bffe17 	ldw	r2,-8(fp)
 10078a8:	1004c03a 	cmpne	r2,r2,zero
 10078ac:	1000021e 	bne	r2,zero,10078b8 <OSMemGet+0x2c>
        return ((void *)0);
 10078b0:	e03fff15 	stw	zero,-4(fp)
 10078b4:	00003106 	br	100797c <OSMemGet+0xf0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
 10078b8:	e0bffd17 	ldw	r2,-12(fp)
 10078bc:	1004c03a 	cmpne	r2,r2,zero
 10078c0:	1000051e 	bne	r2,zero,10078d8 <OSMemGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 10078c4:	e0fffe17 	ldw	r3,-8(fp)
 10078c8:	00801804 	movi	r2,96
 10078cc:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 10078d0:	e03fff15 	stw	zero,-4(fp)
 10078d4:	00002906 	br	100797c <OSMemGet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10078d8:	0005303a 	rdctl	r2,status
 10078dc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10078e0:	e0fffa17 	ldw	r3,-24(fp)
 10078e4:	00bfff84 	movi	r2,-2
 10078e8:	1884703a 	and	r2,r3,r2
 10078ec:	1001703a 	wrctl	status,r2
  
  return context;
 10078f0:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 10078f4:	e0bffb15 	stw	r2,-20(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
 10078f8:	e0bffd17 	ldw	r2,-12(fp)
 10078fc:	10800417 	ldw	r2,16(r2)
 1007900:	1005003a 	cmpeq	r2,r2,zero
 1007904:	1000151e 	bne	r2,zero,100795c <OSMemGet+0xd0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
 1007908:	e0bffd17 	ldw	r2,-12(fp)
 100790c:	10800117 	ldw	r2,4(r2)
 1007910:	e0bffc15 	stw	r2,-16(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
 1007914:	e0bffc17 	ldw	r2,-16(fp)
 1007918:	10c00017 	ldw	r3,0(r2)
 100791c:	e0bffd17 	ldw	r2,-12(fp)
 1007920:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
 1007924:	e0bffd17 	ldw	r2,-12(fp)
 1007928:	10800417 	ldw	r2,16(r2)
 100792c:	10ffffc4 	addi	r3,r2,-1
 1007930:	e0bffd17 	ldw	r2,-12(fp)
 1007934:	10c00415 	stw	r3,16(r2)
 1007938:	e0bffb17 	ldw	r2,-20(fp)
 100793c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1007940:	e0bff917 	ldw	r2,-28(fp)
 1007944:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
 1007948:	e0bffe17 	ldw	r2,-8(fp)
 100794c:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
 1007950:	e0bffc17 	ldw	r2,-16(fp)
 1007954:	e0bfff15 	stw	r2,-4(fp)
 1007958:	00000806 	br	100797c <OSMemGet+0xf0>
 100795c:	e0bffb17 	ldw	r2,-20(fp)
 1007960:	e0bff815 	stw	r2,-32(fp)
 1007964:	e0bff817 	ldw	r2,-32(fp)
 1007968:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
 100796c:	e0fffe17 	ldw	r3,-8(fp)
 1007970:	00801744 	movi	r2,93
 1007974:	18800005 	stb	r2,0(r3)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
 1007978:	e03fff15 	stw	zero,-4(fp)
 100797c:	e0bfff17 	ldw	r2,-4(fp)
}
 1007980:	e037883a 	mov	sp,fp
 1007984:	df000017 	ldw	fp,0(sp)
 1007988:	dec00104 	addi	sp,sp,4
 100798c:	f800283a 	ret

01007990 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 1007990:	defff604 	addi	sp,sp,-40
 1007994:	dfc00915 	stw	ra,36(sp)
 1007998:	df000815 	stw	fp,32(sp)
 100799c:	df000804 	addi	fp,sp,32
 10079a0:	e13ffc15 	stw	r4,-16(fp)
 10079a4:	e17ffd15 	stw	r5,-12(fp)
 10079a8:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 10079ac:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 10079b0:	e0bffe17 	ldw	r2,-8(fp)
 10079b4:	1004c03a 	cmpne	r2,r2,zero
 10079b8:	1000021e 	bne	r2,zero,10079c4 <OSMemNameGet+0x34>
        return (0);
 10079bc:	e03fff15 	stw	zero,-4(fp)
 10079c0:	00003006 	br	1007a84 <OSMemNameGet+0xf4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 10079c4:	e0bffc17 	ldw	r2,-16(fp)
 10079c8:	1004c03a 	cmpne	r2,r2,zero
 10079cc:	1000051e 	bne	r2,zero,10079e4 <OSMemNameGet+0x54>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 10079d0:	e0fffe17 	ldw	r3,-8(fp)
 10079d4:	00801804 	movi	r2,96
 10079d8:	18800005 	stb	r2,0(r3)
        return (0);
 10079dc:	e03fff15 	stw	zero,-4(fp)
 10079e0:	00002806 	br	1007a84 <OSMemNameGet+0xf4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 10079e4:	e0bffd17 	ldw	r2,-12(fp)
 10079e8:	1004c03a 	cmpne	r2,r2,zero
 10079ec:	1000051e 	bne	r2,zero,1007a04 <OSMemNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
 10079f0:	e0fffe17 	ldw	r3,-8(fp)
 10079f4:	00800304 	movi	r2,12
 10079f8:	18800005 	stb	r2,0(r3)
        return (0);
 10079fc:	e03fff15 	stw	zero,-4(fp)
 1007a00:	00002006 	br	1007a84 <OSMemNameGet+0xf4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 1007a04:	00804074 	movhi	r2,257
 1007a08:	108eb804 	addi	r2,r2,15072
 1007a0c:	10800003 	ldbu	r2,0(r2)
 1007a10:	10803fcc 	andi	r2,r2,255
 1007a14:	1005003a 	cmpeq	r2,r2,zero
 1007a18:	1000051e 	bne	r2,zero,1007a30 <OSMemNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
 1007a1c:	e0fffe17 	ldw	r3,-8(fp)
 1007a20:	00800444 	movi	r2,17
 1007a24:	18800005 	stb	r2,0(r3)
        return (0);
 1007a28:	e03fff15 	stw	zero,-4(fp)
 1007a2c:	00001506 	br	1007a84 <OSMemNameGet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1007a30:	0005303a 	rdctl	r2,status
 1007a34:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1007a38:	e0fff917 	ldw	r3,-28(fp)
 1007a3c:	00bfff84 	movi	r2,-2
 1007a40:	1884703a 	and	r2,r3,r2
 1007a44:	1001703a 	wrctl	status,r2
  
  return context;
 1007a48:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 1007a4c:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
 1007a50:	e0bffc17 	ldw	r2,-16(fp)
 1007a54:	11400504 	addi	r5,r2,20
 1007a58:	e13ffd17 	ldw	r4,-12(fp)
 1007a5c:	10056040 	call	1005604 <OS_StrCopy>
 1007a60:	e0bffb05 	stb	r2,-20(fp)
 1007a64:	e0bffa17 	ldw	r2,-24(fp)
 1007a68:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1007a6c:	e0bff817 	ldw	r2,-32(fp)
 1007a70:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 1007a74:	e0bffe17 	ldw	r2,-8(fp)
 1007a78:	10000005 	stb	zero,0(r2)
    return (len);
 1007a7c:	e0bffb03 	ldbu	r2,-20(fp)
 1007a80:	e0bfff15 	stw	r2,-4(fp)
 1007a84:	e0bfff17 	ldw	r2,-4(fp)
}
 1007a88:	e037883a 	mov	sp,fp
 1007a8c:	dfc00117 	ldw	ra,4(sp)
 1007a90:	df000017 	ldw	fp,0(sp)
 1007a94:	dec00204 	addi	sp,sp,8
 1007a98:	f800283a 	ret

01007a9c <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 1007a9c:	defff604 	addi	sp,sp,-40
 1007aa0:	dfc00915 	stw	ra,36(sp)
 1007aa4:	df000815 	stw	fp,32(sp)
 1007aa8:	df000804 	addi	fp,sp,32
 1007aac:	e13ffd15 	stw	r4,-12(fp)
 1007ab0:	e17ffe15 	stw	r5,-8(fp)
 1007ab4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1007ab8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 1007abc:	e0bfff17 	ldw	r2,-4(fp)
 1007ac0:	1005003a 	cmpeq	r2,r2,zero
 1007ac4:	1000381e 	bne	r2,zero,1007ba8 <OSMemNameSet+0x10c>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 1007ac8:	e0bffd17 	ldw	r2,-12(fp)
 1007acc:	1004c03a 	cmpne	r2,r2,zero
 1007ad0:	1000041e 	bne	r2,zero,1007ae4 <OSMemNameSet+0x48>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 1007ad4:	e0ffff17 	ldw	r3,-4(fp)
 1007ad8:	00801804 	movi	r2,96
 1007adc:	18800005 	stb	r2,0(r3)
        return;
 1007ae0:	00003106 	br	1007ba8 <OSMemNameSet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 1007ae4:	e0bffe17 	ldw	r2,-8(fp)
 1007ae8:	1004c03a 	cmpne	r2,r2,zero
 1007aec:	1000041e 	bne	r2,zero,1007b00 <OSMemNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
 1007af0:	e0ffff17 	ldw	r3,-4(fp)
 1007af4:	00800304 	movi	r2,12
 1007af8:	18800005 	stb	r2,0(r3)
        return;
 1007afc:	00002a06 	br	1007ba8 <OSMemNameSet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 1007b00:	00804074 	movhi	r2,257
 1007b04:	108eb804 	addi	r2,r2,15072
 1007b08:	10800003 	ldbu	r2,0(r2)
 1007b0c:	10803fcc 	andi	r2,r2,255
 1007b10:	1005003a 	cmpeq	r2,r2,zero
 1007b14:	1000041e 	bne	r2,zero,1007b28 <OSMemNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
 1007b18:	e0ffff17 	ldw	r3,-4(fp)
 1007b1c:	00800484 	movi	r2,18
 1007b20:	18800005 	stb	r2,0(r3)
        return;
 1007b24:	00002006 	br	1007ba8 <OSMemNameSet+0x10c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1007b28:	0005303a 	rdctl	r2,status
 1007b2c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1007b30:	e0fffa17 	ldw	r3,-24(fp)
 1007b34:	00bfff84 	movi	r2,-2
 1007b38:	1884703a 	and	r2,r3,r2
 1007b3c:	1001703a 	wrctl	status,r2
  
  return context;
 1007b40:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 1007b44:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 1007b48:	e13ffe17 	ldw	r4,-8(fp)
 1007b4c:	10056840 	call	1005684 <OS_StrLen>
 1007b50:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
 1007b54:	e0bffc03 	ldbu	r2,-16(fp)
 1007b58:	10800830 	cmpltui	r2,r2,32
 1007b5c:	1000081e 	bne	r2,zero,1007b80 <OSMemNameSet+0xe4>
 1007b60:	e0bffb17 	ldw	r2,-20(fp)
 1007b64:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1007b68:	e0bff917 	ldw	r2,-28(fp)
 1007b6c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
 1007b70:	e0ffff17 	ldw	r3,-4(fp)
 1007b74:	008018c4 	movi	r2,99
 1007b78:	18800005 	stb	r2,0(r3)
        return;
 1007b7c:	00000a06 	br	1007ba8 <OSMemNameSet+0x10c>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
 1007b80:	e0bffd17 	ldw	r2,-12(fp)
 1007b84:	11000504 	addi	r4,r2,20
 1007b88:	e17ffe17 	ldw	r5,-8(fp)
 1007b8c:	10056040 	call	1005604 <OS_StrCopy>
 1007b90:	e0bffb17 	ldw	r2,-20(fp)
 1007b94:	e0bff815 	stw	r2,-32(fp)
 1007b98:	e0bff817 	ldw	r2,-32(fp)
 1007b9c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 1007ba0:	e0bfff17 	ldw	r2,-4(fp)
 1007ba4:	10000005 	stb	zero,0(r2)
}
 1007ba8:	e037883a 	mov	sp,fp
 1007bac:	dfc00117 	ldw	ra,4(sp)
 1007bb0:	df000017 	ldw	fp,0(sp)
 1007bb4:	dec00204 	addi	sp,sp,8
 1007bb8:	f800283a 	ret

01007bbc <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
 1007bbc:	defff804 	addi	sp,sp,-32
 1007bc0:	df000715 	stw	fp,28(sp)
 1007bc4:	df000704 	addi	fp,sp,28
 1007bc8:	e13ffd15 	stw	r4,-12(fp)
 1007bcc:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1007bd0:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 1007bd4:	e0bffd17 	ldw	r2,-12(fp)
 1007bd8:	1004c03a 	cmpne	r2,r2,zero
 1007bdc:	1000031e 	bne	r2,zero,1007bec <OSMemPut+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
 1007be0:	00801804 	movi	r2,96
 1007be4:	e0bfff15 	stw	r2,-4(fp)
 1007be8:	00002b06 	br	1007c98 <OSMemPut+0xdc>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
 1007bec:	e0bffe17 	ldw	r2,-8(fp)
 1007bf0:	1004c03a 	cmpne	r2,r2,zero
 1007bf4:	1000031e 	bne	r2,zero,1007c04 <OSMemPut+0x48>
        return (OS_ERR_MEM_INVALID_PBLK);
 1007bf8:	008017c4 	movi	r2,95
 1007bfc:	e0bfff15 	stw	r2,-4(fp)
 1007c00:	00002506 	br	1007c98 <OSMemPut+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1007c04:	0005303a 	rdctl	r2,status
 1007c08:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1007c0c:	e0fffb17 	ldw	r3,-20(fp)
 1007c10:	00bfff84 	movi	r2,-2
 1007c14:	1884703a 	and	r2,r3,r2
 1007c18:	1001703a 	wrctl	status,r2
  
  return context;
 1007c1c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 1007c20:	e0bffc15 	stw	r2,-16(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
 1007c24:	e0bffd17 	ldw	r2,-12(fp)
 1007c28:	10c00417 	ldw	r3,16(r2)
 1007c2c:	e0bffd17 	ldw	r2,-12(fp)
 1007c30:	10800317 	ldw	r2,12(r2)
 1007c34:	18800736 	bltu	r3,r2,1007c54 <OSMemPut+0x98>
 1007c38:	e0bffc17 	ldw	r2,-16(fp)
 1007c3c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1007c40:	e0bffa17 	ldw	r2,-24(fp)
 1007c44:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
 1007c48:	00801784 	movi	r2,94
 1007c4c:	e0bfff15 	stw	r2,-4(fp)
 1007c50:	00001106 	br	1007c98 <OSMemPut+0xdc>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
 1007c54:	e0fffe17 	ldw	r3,-8(fp)
 1007c58:	e0bffd17 	ldw	r2,-12(fp)
 1007c5c:	10800117 	ldw	r2,4(r2)
 1007c60:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = pblk;
 1007c64:	e0fffd17 	ldw	r3,-12(fp)
 1007c68:	e0bffe17 	ldw	r2,-8(fp)
 1007c6c:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
 1007c70:	e0bffd17 	ldw	r2,-12(fp)
 1007c74:	10800417 	ldw	r2,16(r2)
 1007c78:	10c00044 	addi	r3,r2,1
 1007c7c:	e0bffd17 	ldw	r2,-12(fp)
 1007c80:	10c00415 	stw	r3,16(r2)
 1007c84:	e0bffc17 	ldw	r2,-16(fp)
 1007c88:	e0bff915 	stw	r2,-28(fp)
 1007c8c:	e0bff917 	ldw	r2,-28(fp)
 1007c90:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
 1007c94:	e03fff15 	stw	zero,-4(fp)
 1007c98:	e0bfff17 	ldw	r2,-4(fp)
}
 1007c9c:	e037883a 	mov	sp,fp
 1007ca0:	df000017 	ldw	fp,0(sp)
 1007ca4:	dec00104 	addi	sp,sp,4
 1007ca8:	f800283a 	ret

01007cac <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
 1007cac:	defff904 	addi	sp,sp,-28
 1007cb0:	df000615 	stw	fp,24(sp)
 1007cb4:	df000604 	addi	fp,sp,24
 1007cb8:	e13ffd15 	stw	r4,-12(fp)
 1007cbc:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1007cc0:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 1007cc4:	e0bffd17 	ldw	r2,-12(fp)
 1007cc8:	1004c03a 	cmpne	r2,r2,zero
 1007ccc:	1000031e 	bne	r2,zero,1007cdc <OSMemQuery+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
 1007cd0:	00801804 	movi	r2,96
 1007cd4:	e0bfff15 	stw	r2,-4(fp)
 1007cd8:	00002e06 	br	1007d94 <OSMemQuery+0xe8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
 1007cdc:	e0bffe17 	ldw	r2,-8(fp)
 1007ce0:	1004c03a 	cmpne	r2,r2,zero
 1007ce4:	1000031e 	bne	r2,zero,1007cf4 <OSMemQuery+0x48>
        return (OS_ERR_MEM_INVALID_PDATA);
 1007ce8:	00801844 	movi	r2,97
 1007cec:	e0bfff15 	stw	r2,-4(fp)
 1007cf0:	00002806 	br	1007d94 <OSMemQuery+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1007cf4:	0005303a 	rdctl	r2,status
 1007cf8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1007cfc:	e0fffb17 	ldw	r3,-20(fp)
 1007d00:	00bfff84 	movi	r2,-2
 1007d04:	1884703a 	and	r2,r3,r2
 1007d08:	1001703a 	wrctl	status,r2
  
  return context;
 1007d0c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 1007d10:	e0bffc15 	stw	r2,-16(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
 1007d14:	e0bffd17 	ldw	r2,-12(fp)
 1007d18:	10c00017 	ldw	r3,0(r2)
 1007d1c:	e0bffe17 	ldw	r2,-8(fp)
 1007d20:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
 1007d24:	e0bffd17 	ldw	r2,-12(fp)
 1007d28:	10c00117 	ldw	r3,4(r2)
 1007d2c:	e0bffe17 	ldw	r2,-8(fp)
 1007d30:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
 1007d34:	e0bffd17 	ldw	r2,-12(fp)
 1007d38:	10c00217 	ldw	r3,8(r2)
 1007d3c:	e0bffe17 	ldw	r2,-8(fp)
 1007d40:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
 1007d44:	e0bffd17 	ldw	r2,-12(fp)
 1007d48:	10c00317 	ldw	r3,12(r2)
 1007d4c:	e0bffe17 	ldw	r2,-8(fp)
 1007d50:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
 1007d54:	e0bffd17 	ldw	r2,-12(fp)
 1007d58:	10c00417 	ldw	r3,16(r2)
 1007d5c:	e0bffe17 	ldw	r2,-8(fp)
 1007d60:	10c00415 	stw	r3,16(r2)
 1007d64:	e0bffc17 	ldw	r2,-16(fp)
 1007d68:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1007d6c:	e0bffa17 	ldw	r2,-24(fp)
 1007d70:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
 1007d74:	e0bffe17 	ldw	r2,-8(fp)
 1007d78:	10c00317 	ldw	r3,12(r2)
 1007d7c:	e0bffe17 	ldw	r2,-8(fp)
 1007d80:	10800417 	ldw	r2,16(r2)
 1007d84:	1887c83a 	sub	r3,r3,r2
 1007d88:	e0bffe17 	ldw	r2,-8(fp)
 1007d8c:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
 1007d90:	e03fff15 	stw	zero,-4(fp)
 1007d94:	e0bfff17 	ldw	r2,-4(fp)
}
 1007d98:	e037883a 	mov	sp,fp
 1007d9c:	df000017 	ldw	fp,0(sp)
 1007da0:	dec00104 	addi	sp,sp,4
 1007da4:	f800283a 	ret

01007da8 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
 1007da8:	defffc04 	addi	sp,sp,-16
 1007dac:	dfc00315 	stw	ra,12(sp)
 1007db0:	df000215 	stw	fp,8(sp)
 1007db4:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
 1007db8:	01004074 	movhi	r4,257
 1007dbc:	211fa704 	addi	r4,r4,32412
 1007dc0:	01430c04 	movi	r5,3120
 1007dc4:	10054000 	call	1005400 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
 1007dc8:	00804074 	movhi	r2,257
 1007dcc:	109fa704 	addi	r2,r2,32412
 1007dd0:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 1007dd4:	e03ffe0d 	sth	zero,-8(fp)
 1007dd8:	00001406 	br	1007e2c <OS_MemInit+0x84>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
 1007ddc:	e13ffe0b 	ldhu	r4,-8(fp)
 1007de0:	01400d04 	movi	r5,52
 1007de4:	1002c3c0 	call	1002c3c <__mulsi3>
 1007de8:	1007883a 	mov	r3,r2
 1007dec:	00804074 	movhi	r2,257
 1007df0:	109fb404 	addi	r2,r2,32464
 1007df4:	1887883a 	add	r3,r3,r2
 1007df8:	e0bfff17 	ldw	r2,-4(fp)
 1007dfc:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
 1007e00:	e0ffff17 	ldw	r3,-4(fp)
 1007e04:	00800fc4 	movi	r2,63
 1007e08:	18800505 	stb	r2,20(r3)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
 1007e0c:	e0bfff17 	ldw	r2,-4(fp)
 1007e10:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
 1007e14:	e0bfff17 	ldw	r2,-4(fp)
 1007e18:	10800d04 	addi	r2,r2,52
 1007e1c:	e0bfff15 	stw	r2,-4(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 1007e20:	e0bffe0b 	ldhu	r2,-8(fp)
 1007e24:	10800044 	addi	r2,r2,1
 1007e28:	e0bffe0d 	sth	r2,-8(fp)
 1007e2c:	e0bffe0b 	ldhu	r2,-8(fp)
 1007e30:	10800ef0 	cmpltui	r2,r2,59
 1007e34:	103fe91e 	bne	r2,zero,1007ddc <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
 1007e38:	e0bfff17 	ldw	r2,-4(fp)
 1007e3c:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
 1007e40:	e0ffff17 	ldw	r3,-4(fp)
 1007e44:	00800fc4 	movi	r2,63
 1007e48:	18800505 	stb	r2,20(r3)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
 1007e4c:	e0bfff17 	ldw	r2,-4(fp)
 1007e50:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
 1007e54:	00c04074 	movhi	r3,257
 1007e58:	18ceb304 	addi	r3,r3,15052
 1007e5c:	00804074 	movhi	r2,257
 1007e60:	109fa704 	addi	r2,r2,32412
 1007e64:	18800015 	stw	r2,0(r3)
#endif
}
 1007e68:	e037883a 	mov	sp,fp
 1007e6c:	dfc00117 	ldw	ra,4(sp)
 1007e70:	df000017 	ldw	fp,0(sp)
 1007e74:	dec00204 	addi	sp,sp,8
 1007e78:	f800283a 	ret

01007e7c <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
 1007e7c:	defff704 	addi	sp,sp,-36
 1007e80:	df000815 	stw	fp,32(sp)
 1007e84:	df000804 	addi	fp,sp,32
 1007e88:	e13ffd15 	stw	r4,-12(fp)
 1007e8c:	e17ffe15 	stw	r5,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1007e90:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 1007e94:	e0bffe17 	ldw	r2,-8(fp)
 1007e98:	1004c03a 	cmpne	r2,r2,zero
 1007e9c:	1000021e 	bne	r2,zero,1007ea8 <OSQAccept+0x2c>
        return ((void *)0);
 1007ea0:	e03fff15 	stw	zero,-4(fp)
 1007ea4:	00004506 	br	1007fbc <OSQAccept+0x140>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 1007ea8:	e0bffd17 	ldw	r2,-12(fp)
 1007eac:	1004c03a 	cmpne	r2,r2,zero
 1007eb0:	1000051e 	bne	r2,zero,1007ec8 <OSQAccept+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
 1007eb4:	e0fffe17 	ldw	r3,-8(fp)
 1007eb8:	00800104 	movi	r2,4
 1007ebc:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 1007ec0:	e03fff15 	stw	zero,-4(fp)
 1007ec4:	00003d06 	br	1007fbc <OSQAccept+0x140>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 1007ec8:	e0bffd17 	ldw	r2,-12(fp)
 1007ecc:	10800003 	ldbu	r2,0(r2)
 1007ed0:	10803fcc 	andi	r2,r2,255
 1007ed4:	108000a0 	cmpeqi	r2,r2,2
 1007ed8:	1000051e 	bne	r2,zero,1007ef0 <OSQAccept+0x74>
        *perr = OS_ERR_EVENT_TYPE;
 1007edc:	e0fffe17 	ldw	r3,-8(fp)
 1007ee0:	00800044 	movi	r2,1
 1007ee4:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 1007ee8:	e03fff15 	stw	zero,-4(fp)
 1007eec:	00003306 	br	1007fbc <OSQAccept+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1007ef0:	0005303a 	rdctl	r2,status
 1007ef4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1007ef8:	e0fff917 	ldw	r3,-28(fp)
 1007efc:	00bfff84 	movi	r2,-2
 1007f00:	1884703a 	and	r2,r3,r2
 1007f04:	1001703a 	wrctl	status,r2
  
  return context;
 1007f08:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 1007f0c:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 1007f10:	e0bffd17 	ldw	r2,-12(fp)
 1007f14:	10800117 	ldw	r2,4(r2)
 1007f18:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 1007f1c:	e0bffb17 	ldw	r2,-20(fp)
 1007f20:	1080058b 	ldhu	r2,22(r2)
 1007f24:	10bfffcc 	andi	r2,r2,65535
 1007f28:	1005003a 	cmpeq	r2,r2,zero
 1007f2c:	1000191e 	bne	r2,zero,1007f94 <OSQAccept+0x118>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 1007f30:	e0bffb17 	ldw	r2,-20(fp)
 1007f34:	10c00417 	ldw	r3,16(r2)
 1007f38:	18800017 	ldw	r2,0(r3)
 1007f3c:	e0bffc15 	stw	r2,-16(fp)
 1007f40:	18c00104 	addi	r3,r3,4
 1007f44:	e0bffb17 	ldw	r2,-20(fp)
 1007f48:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 1007f4c:	e0bffb17 	ldw	r2,-20(fp)
 1007f50:	1080058b 	ldhu	r2,22(r2)
 1007f54:	10bfffc4 	addi	r2,r2,-1
 1007f58:	1007883a 	mov	r3,r2
 1007f5c:	e0bffb17 	ldw	r2,-20(fp)
 1007f60:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 1007f64:	e0bffb17 	ldw	r2,-20(fp)
 1007f68:	10c00417 	ldw	r3,16(r2)
 1007f6c:	e0bffb17 	ldw	r2,-20(fp)
 1007f70:	10800217 	ldw	r2,8(r2)
 1007f74:	1880041e 	bne	r3,r2,1007f88 <OSQAccept+0x10c>
            pq->OSQOut = pq->OSQStart;
 1007f78:	e0bffb17 	ldw	r2,-20(fp)
 1007f7c:	10c00117 	ldw	r3,4(r2)
 1007f80:	e0bffb17 	ldw	r2,-20(fp)
 1007f84:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
 1007f88:	e0bffe17 	ldw	r2,-8(fp)
 1007f8c:	10000005 	stb	zero,0(r2)
 1007f90:	00000406 	br	1007fa4 <OSQAccept+0x128>
    } else {
        *perr = OS_ERR_Q_EMPTY;
 1007f94:	e0fffe17 	ldw	r3,-8(fp)
 1007f98:	008007c4 	movi	r2,31
 1007f9c:	18800005 	stb	r2,0(r3)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
 1007fa0:	e03ffc15 	stw	zero,-16(fp)
 1007fa4:	e0bffa17 	ldw	r2,-24(fp)
 1007fa8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1007fac:	e0bff817 	ldw	r2,-32(fp)
 1007fb0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
 1007fb4:	e0bffc17 	ldw	r2,-16(fp)
 1007fb8:	e0bfff15 	stw	r2,-4(fp)
 1007fbc:	e0bfff17 	ldw	r2,-4(fp)
}
 1007fc0:	e037883a 	mov	sp,fp
 1007fc4:	df000017 	ldw	fp,0(sp)
 1007fc8:	dec00104 	addi	sp,sp,4
 1007fcc:	f800283a 	ret

01007fd0 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
 1007fd0:	defff304 	addi	sp,sp,-52
 1007fd4:	dfc00c15 	stw	ra,48(sp)
 1007fd8:	df000b15 	stw	fp,44(sp)
 1007fdc:	df000b04 	addi	fp,sp,44
 1007fe0:	e13ffd15 	stw	r4,-12(fp)
 1007fe4:	e17ffe0d 	sth	r5,-8(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1007fe8:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 1007fec:	00804074 	movhi	r2,257
 1007ff0:	108eb804 	addi	r2,r2,15072
 1007ff4:	10800003 	ldbu	r2,0(r2)
 1007ff8:	10803fcc 	andi	r2,r2,255
 1007ffc:	1005003a 	cmpeq	r2,r2,zero
 1008000:	1000021e 	bne	r2,zero,100800c <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
 1008004:	e03fff15 	stw	zero,-4(fp)
 1008008:	00007006 	br	10081cc <OSQCreate+0x1fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100800c:	0005303a 	rdctl	r2,status
 1008010:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1008014:	e0fff917 	ldw	r3,-28(fp)
 1008018:	00bfff84 	movi	r2,-2
 100801c:	1884703a 	and	r2,r3,r2
 1008020:	1001703a 	wrctl	status,r2
  
  return context;
 1008024:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 1008028:	e0bffa15 	stw	r2,-24(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
 100802c:	00804074 	movhi	r2,257
 1008030:	108eb704 	addi	r2,r2,15068
 1008034:	10800017 	ldw	r2,0(r2)
 1008038:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
 100803c:	00804074 	movhi	r2,257
 1008040:	108eb704 	addi	r2,r2,15068
 1008044:	10800017 	ldw	r2,0(r2)
 1008048:	1005003a 	cmpeq	r2,r2,zero
 100804c:	1000081e 	bne	r2,zero,1008070 <OSQCreate+0xa0>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 1008050:	00804074 	movhi	r2,257
 1008054:	108eb704 	addi	r2,r2,15068
 1008058:	10800017 	ldw	r2,0(r2)
 100805c:	10800117 	ldw	r2,4(r2)
 1008060:	1007883a 	mov	r3,r2
 1008064:	00804074 	movhi	r2,257
 1008068:	108eb704 	addi	r2,r2,15068
 100806c:	10c00015 	stw	r3,0(r2)
 1008070:	e0bffa17 	ldw	r2,-24(fp)
 1008074:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1008078:	e0bff817 	ldw	r2,-32(fp)
 100807c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
 1008080:	e0bffc17 	ldw	r2,-16(fp)
 1008084:	1005003a 	cmpeq	r2,r2,zero
 1008088:	10004e1e 	bne	r2,zero,10081c4 <OSQCreate+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100808c:	0005303a 	rdctl	r2,status
 1008090:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1008094:	e0fff717 	ldw	r3,-36(fp)
 1008098:	00bfff84 	movi	r2,-2
 100809c:	1884703a 	and	r2,r3,r2
 10080a0:	1001703a 	wrctl	status,r2
  
  return context;
 10080a4:	e0bff717 	ldw	r2,-36(fp)
        OS_ENTER_CRITICAL();
 10080a8:	e0bffa15 	stw	r2,-24(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
 10080ac:	00804074 	movhi	r2,257
 10080b0:	108eb504 	addi	r2,r2,15060
 10080b4:	10800017 	ldw	r2,0(r2)
 10080b8:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
 10080bc:	e0bffb17 	ldw	r2,-20(fp)
 10080c0:	1005003a 	cmpeq	r2,r2,zero
 10080c4:	1000311e 	bne	r2,zero,100818c <OSQCreate+0x1bc>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
 10080c8:	00804074 	movhi	r2,257
 10080cc:	108eb504 	addi	r2,r2,15060
 10080d0:	10800017 	ldw	r2,0(r2)
 10080d4:	10c00017 	ldw	r3,0(r2)
 10080d8:	00804074 	movhi	r2,257
 10080dc:	108eb504 	addi	r2,r2,15060
 10080e0:	10c00015 	stw	r3,0(r2)
 10080e4:	e0bffa17 	ldw	r2,-24(fp)
 10080e8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10080ec:	e0bff617 	ldw	r2,-40(fp)
 10080f0:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
 10080f4:	e0fffb17 	ldw	r3,-20(fp)
 10080f8:	e0bffd17 	ldw	r2,-12(fp)
 10080fc:	18800115 	stw	r2,4(r3)
            pq->OSQEnd             = &start[size];
 1008100:	e0bffe0b 	ldhu	r2,-8(fp)
 1008104:	1085883a 	add	r2,r2,r2
 1008108:	1085883a 	add	r2,r2,r2
 100810c:	1007883a 	mov	r3,r2
 1008110:	e0bffd17 	ldw	r2,-12(fp)
 1008114:	1887883a 	add	r3,r3,r2
 1008118:	e0bffb17 	ldw	r2,-20(fp)
 100811c:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
 1008120:	e0fffb17 	ldw	r3,-20(fp)
 1008124:	e0bffd17 	ldw	r2,-12(fp)
 1008128:	18800315 	stw	r2,12(r3)
            pq->OSQOut             = start;
 100812c:	e0fffb17 	ldw	r3,-20(fp)
 1008130:	e0bffd17 	ldw	r2,-12(fp)
 1008134:	18800415 	stw	r2,16(r3)
            pq->OSQSize            = size;
 1008138:	e0fffb17 	ldw	r3,-20(fp)
 100813c:	e0bffe0b 	ldhu	r2,-8(fp)
 1008140:	1880050d 	sth	r2,20(r3)
            pq->OSQEntries         = 0;
 1008144:	e0bffb17 	ldw	r2,-20(fp)
 1008148:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
 100814c:	e0fffc17 	ldw	r3,-16(fp)
 1008150:	00800084 	movi	r2,2
 1008154:	18800005 	stb	r2,0(r3)
            pevent->OSEventCnt     = 0;
 1008158:	e0bffc17 	ldw	r2,-16(fp)
 100815c:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
 1008160:	e0fffc17 	ldw	r3,-16(fp)
 1008164:	e0bffb17 	ldw	r2,-20(fp)
 1008168:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
 100816c:	e0fffc17 	ldw	r3,-16(fp)
 1008170:	00800fc4 	movi	r2,63
 1008174:	18800385 	stb	r2,14(r3)
            pevent->OSEventName[1] = OS_ASCII_NUL;
 1008178:	e0bffc17 	ldw	r2,-16(fp)
 100817c:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
 1008180:	e13ffc17 	ldw	r4,-16(fp)
 1008184:	10050340 	call	1005034 <OS_EventWaitListInit>
 1008188:	00000e06 	br	10081c4 <OSQCreate+0x1f4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
 100818c:	00804074 	movhi	r2,257
 1008190:	108eb704 	addi	r2,r2,15068
 1008194:	10c00017 	ldw	r3,0(r2)
 1008198:	e0bffc17 	ldw	r2,-16(fp)
 100819c:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
 10081a0:	00c04074 	movhi	r3,257
 10081a4:	18ceb704 	addi	r3,r3,15068
 10081a8:	e0bffc17 	ldw	r2,-16(fp)
 10081ac:	18800015 	stw	r2,0(r3)
 10081b0:	e0bffa17 	ldw	r2,-24(fp)
 10081b4:	e0bff515 	stw	r2,-44(fp)
 10081b8:	e0bff517 	ldw	r2,-44(fp)
 10081bc:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
 10081c0:	e03ffc15 	stw	zero,-16(fp)
        }
    }
    return (pevent);
 10081c4:	e0bffc17 	ldw	r2,-16(fp)
 10081c8:	e0bfff15 	stw	r2,-4(fp)
 10081cc:	e0bfff17 	ldw	r2,-4(fp)
}
 10081d0:	e037883a 	mov	sp,fp
 10081d4:	dfc00117 	ldw	ra,4(sp)
 10081d8:	df000017 	ldw	fp,0(sp)
 10081dc:	dec00204 	addi	sp,sp,8
 10081e0:	f800283a 	ret

010081e4 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 10081e4:	defff004 	addi	sp,sp,-64
 10081e8:	dfc00f15 	stw	ra,60(sp)
 10081ec:	df000e15 	stw	fp,56(sp)
 10081f0:	df000e04 	addi	fp,sp,56
 10081f4:	e13ffb15 	stw	r4,-20(fp)
 10081f8:	e1bffd15 	stw	r6,-12(fp)
 10081fc:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 1008200:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 1008204:	e0bffd17 	ldw	r2,-12(fp)
 1008208:	1004c03a 	cmpne	r2,r2,zero
 100820c:	1000031e 	bne	r2,zero,100821c <OSQDel+0x38>
        return (pevent);
 1008210:	e0bffb17 	ldw	r2,-20(fp)
 1008214:	e0bfff15 	stw	r2,-4(fp)
 1008218:	0000ac06 	br	10084cc <OSQDel+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 100821c:	e0bffb17 	ldw	r2,-20(fp)
 1008220:	1004c03a 	cmpne	r2,r2,zero
 1008224:	1000061e 	bne	r2,zero,1008240 <OSQDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
 1008228:	e0fffd17 	ldw	r3,-12(fp)
 100822c:	00800104 	movi	r2,4
 1008230:	18800005 	stb	r2,0(r3)
        return (pevent);
 1008234:	e0fffb17 	ldw	r3,-20(fp)
 1008238:	e0ffff15 	stw	r3,-4(fp)
 100823c:	0000a306 	br	10084cc <OSQDel+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 1008240:	e0bffb17 	ldw	r2,-20(fp)
 1008244:	10800003 	ldbu	r2,0(r2)
 1008248:	10803fcc 	andi	r2,r2,255
 100824c:	108000a0 	cmpeqi	r2,r2,2
 1008250:	1000061e 	bne	r2,zero,100826c <OSQDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
 1008254:	e0fffd17 	ldw	r3,-12(fp)
 1008258:	00800044 	movi	r2,1
 100825c:	18800005 	stb	r2,0(r3)
        return (pevent);
 1008260:	e0bffb17 	ldw	r2,-20(fp)
 1008264:	e0bfff15 	stw	r2,-4(fp)
 1008268:	00009806 	br	10084cc <OSQDel+0x2e8>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 100826c:	00804074 	movhi	r2,257
 1008270:	108eb804 	addi	r2,r2,15072
 1008274:	10800003 	ldbu	r2,0(r2)
 1008278:	10803fcc 	andi	r2,r2,255
 100827c:	1005003a 	cmpeq	r2,r2,zero
 1008280:	1000061e 	bne	r2,zero,100829c <OSQDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 1008284:	e0fffd17 	ldw	r3,-12(fp)
 1008288:	008003c4 	movi	r2,15
 100828c:	18800005 	stb	r2,0(r3)
        return (pevent);
 1008290:	e0fffb17 	ldw	r3,-20(fp)
 1008294:	e0ffff15 	stw	r3,-4(fp)
 1008298:	00008c06 	br	10084cc <OSQDel+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100829c:	0005303a 	rdctl	r2,status
 10082a0:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10082a4:	e0fff617 	ldw	r3,-40(fp)
 10082a8:	00bfff84 	movi	r2,-2
 10082ac:	1884703a 	and	r2,r3,r2
 10082b0:	1001703a 	wrctl	status,r2
  
  return context;
 10082b4:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
 10082b8:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
 10082bc:	e0bffb17 	ldw	r2,-20(fp)
 10082c0:	10800283 	ldbu	r2,10(r2)
 10082c4:	10803fcc 	andi	r2,r2,255
 10082c8:	1005003a 	cmpeq	r2,r2,zero
 10082cc:	1000031e 	bne	r2,zero,10082dc <OSQDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 10082d0:	00800044 	movi	r2,1
 10082d4:	e0bffa05 	stb	r2,-24(fp)
 10082d8:	00000106 	br	10082e0 <OSQDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 10082dc:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
 10082e0:	e0bffc03 	ldbu	r2,-16(fp)
 10082e4:	e0bffe15 	stw	r2,-8(fp)
 10082e8:	e0fffe17 	ldw	r3,-8(fp)
 10082ec:	1805003a 	cmpeq	r2,r3,zero
 10082f0:	1000041e 	bne	r2,zero,1008304 <OSQDel+0x120>
 10082f4:	e0fffe17 	ldw	r3,-8(fp)
 10082f8:	18800060 	cmpeqi	r2,r3,1
 10082fc:	1000391e 	bne	r2,zero,10083e4 <OSQDel+0x200>
 1008300:	00006706 	br	10084a0 <OSQDel+0x2bc>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
 1008304:	e0bffa03 	ldbu	r2,-24(fp)
 1008308:	1004c03a 	cmpne	r2,r2,zero
 100830c:	1000261e 	bne	r2,zero,10083a8 <OSQDel+0x1c4>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 1008310:	e0fffb17 	ldw	r3,-20(fp)
 1008314:	00800fc4 	movi	r2,63
 1008318:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 100831c:	e0bffb17 	ldw	r2,-20(fp)
 1008320:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
 1008324:	e0bffb17 	ldw	r2,-20(fp)
 1008328:	10800117 	ldw	r2,4(r2)
 100832c:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
 1008330:	00804074 	movhi	r2,257
 1008334:	108eb504 	addi	r2,r2,15060
 1008338:	10c00017 	ldw	r3,0(r2)
 100833c:	e0bff817 	ldw	r2,-32(fp)
 1008340:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
 1008344:	00c04074 	movhi	r3,257
 1008348:	18ceb504 	addi	r3,r3,15060
 100834c:	e0bff817 	ldw	r2,-32(fp)
 1008350:	18800015 	stw	r2,0(r3)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 1008354:	e0bffb17 	ldw	r2,-20(fp)
 1008358:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 100835c:	00804074 	movhi	r2,257
 1008360:	108eb704 	addi	r2,r2,15068
 1008364:	10c00017 	ldw	r3,0(r2)
 1008368:	e0bffb17 	ldw	r2,-20(fp)
 100836c:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 1008370:	e0bffb17 	ldw	r2,-20(fp)
 1008374:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 1008378:	00c04074 	movhi	r3,257
 100837c:	18ceb704 	addi	r3,r3,15068
 1008380:	e0bffb17 	ldw	r2,-20(fp)
 1008384:	18800015 	stw	r2,0(r3)
 1008388:	e0bff717 	ldw	r2,-36(fp)
 100838c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1008390:	e0bff517 	ldw	r2,-44(fp)
 1008394:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 1008398:	e0bffd17 	ldw	r2,-12(fp)
 100839c:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
 10083a0:	e03ff915 	stw	zero,-28(fp)
 10083a4:	00004706 	br	10084c4 <OSQDel+0x2e0>
 10083a8:	e0bff717 	ldw	r2,-36(fp)
 10083ac:	e0bff415 	stw	r2,-48(fp)
 10083b0:	e0bff417 	ldw	r2,-48(fp)
 10083b4:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 10083b8:	e0fffd17 	ldw	r3,-12(fp)
 10083bc:	00801244 	movi	r2,73
 10083c0:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
 10083c4:	e0bffb17 	ldw	r2,-20(fp)
 10083c8:	e0bff915 	stw	r2,-28(fp)
             }
             break;
 10083cc:	00003d06 	br	10084c4 <OSQDel+0x2e0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
 10083d0:	e13ffb17 	ldw	r4,-20(fp)
 10083d4:	000b883a 	mov	r5,zero
 10083d8:	01800104 	movi	r6,4
 10083dc:	000f883a 	mov	r7,zero
 10083e0:	1004a800 	call	1004a80 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
 10083e4:	e0bffb17 	ldw	r2,-20(fp)
 10083e8:	10800283 	ldbu	r2,10(r2)
 10083ec:	10803fcc 	andi	r2,r2,255
 10083f0:	1004c03a 	cmpne	r2,r2,zero
 10083f4:	103ff61e 	bne	r2,zero,10083d0 <OSQDel+0x1ec>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 10083f8:	e0fffb17 	ldw	r3,-20(fp)
 10083fc:	00800fc4 	movi	r2,63
 1008400:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 1008404:	e0bffb17 	ldw	r2,-20(fp)
 1008408:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
 100840c:	e0bffb17 	ldw	r2,-20(fp)
 1008410:	10800117 	ldw	r2,4(r2)
 1008414:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
 1008418:	00804074 	movhi	r2,257
 100841c:	108eb504 	addi	r2,r2,15060
 1008420:	10c00017 	ldw	r3,0(r2)
 1008424:	e0bff817 	ldw	r2,-32(fp)
 1008428:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
 100842c:	00c04074 	movhi	r3,257
 1008430:	18ceb504 	addi	r3,r3,15060
 1008434:	e0bff817 	ldw	r2,-32(fp)
 1008438:	18800015 	stw	r2,0(r3)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 100843c:	e0bffb17 	ldw	r2,-20(fp)
 1008440:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 1008444:	00804074 	movhi	r2,257
 1008448:	108eb704 	addi	r2,r2,15068
 100844c:	10c00017 	ldw	r3,0(r2)
 1008450:	e0bffb17 	ldw	r2,-20(fp)
 1008454:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 1008458:	e0bffb17 	ldw	r2,-20(fp)
 100845c:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 1008460:	00c04074 	movhi	r3,257
 1008464:	18ceb704 	addi	r3,r3,15068
 1008468:	e0bffb17 	ldw	r2,-20(fp)
 100846c:	18800015 	stw	r2,0(r3)
 1008470:	e0bff717 	ldw	r2,-36(fp)
 1008474:	e0bff315 	stw	r2,-52(fp)
 1008478:	e0bff317 	ldw	r2,-52(fp)
 100847c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 1008480:	e0bffa03 	ldbu	r2,-24(fp)
 1008484:	10800058 	cmpnei	r2,r2,1
 1008488:	1000011e 	bne	r2,zero,1008490 <OSQDel+0x2ac>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 100848c:	10054c00 	call	10054c0 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 1008490:	e0bffd17 	ldw	r2,-12(fp)
 1008494:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
 1008498:	e03ff915 	stw	zero,-28(fp)
             break;
 100849c:	00000906 	br	10084c4 <OSQDel+0x2e0>
 10084a0:	e0bff717 	ldw	r2,-36(fp)
 10084a4:	e0bff215 	stw	r2,-56(fp)
 10084a8:	e0bff217 	ldw	r2,-56(fp)
 10084ac:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 10084b0:	e0fffd17 	ldw	r3,-12(fp)
 10084b4:	008001c4 	movi	r2,7
 10084b8:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
 10084bc:	e0bffb17 	ldw	r2,-20(fp)
 10084c0:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
 10084c4:	e0bff917 	ldw	r2,-28(fp)
 10084c8:	e0bfff15 	stw	r2,-4(fp)
 10084cc:	e0bfff17 	ldw	r2,-4(fp)
}
 10084d0:	e037883a 	mov	sp,fp
 10084d4:	dfc00117 	ldw	ra,4(sp)
 10084d8:	df000017 	ldw	fp,0(sp)
 10084dc:	dec00204 	addi	sp,sp,8
 10084e0:	f800283a 	ret

010084e4 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
 10084e4:	defff904 	addi	sp,sp,-28
 10084e8:	df000615 	stw	fp,24(sp)
 10084ec:	df000604 	addi	fp,sp,24
 10084f0:	e13ffe15 	stw	r4,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 10084f4:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 10084f8:	e0bffe17 	ldw	r2,-8(fp)
 10084fc:	1004c03a 	cmpne	r2,r2,zero
 1008500:	1000031e 	bne	r2,zero,1008510 <OSQFlush+0x2c>
        return (OS_ERR_PEVENT_NULL);
 1008504:	00800104 	movi	r2,4
 1008508:	e0bfff15 	stw	r2,-4(fp)
 100850c:	00002206 	br	1008598 <OSQFlush+0xb4>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 1008510:	e0bffe17 	ldw	r2,-8(fp)
 1008514:	10800003 	ldbu	r2,0(r2)
 1008518:	10803fcc 	andi	r2,r2,255
 100851c:	108000a0 	cmpeqi	r2,r2,2
 1008520:	1000031e 	bne	r2,zero,1008530 <OSQFlush+0x4c>
        return (OS_ERR_EVENT_TYPE);
 1008524:	00800044 	movi	r2,1
 1008528:	e0bfff15 	stw	r2,-4(fp)
 100852c:	00001a06 	br	1008598 <OSQFlush+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1008530:	0005303a 	rdctl	r2,status
 1008534:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1008538:	e0fffb17 	ldw	r3,-20(fp)
 100853c:	00bfff84 	movi	r2,-2
 1008540:	1884703a 	and	r2,r3,r2
 1008544:	1001703a 	wrctl	status,r2
  
  return context;
 1008548:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 100854c:	e0bffc15 	stw	r2,-16(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
 1008550:	e0bffe17 	ldw	r2,-8(fp)
 1008554:	10800117 	ldw	r2,4(r2)
 1008558:	e0bffd15 	stw	r2,-12(fp)
    pq->OSQIn      = pq->OSQStart;
 100855c:	e0bffd17 	ldw	r2,-12(fp)
 1008560:	10c00117 	ldw	r3,4(r2)
 1008564:	e0bffd17 	ldw	r2,-12(fp)
 1008568:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
 100856c:	e0bffd17 	ldw	r2,-12(fp)
 1008570:	10c00117 	ldw	r3,4(r2)
 1008574:	e0bffd17 	ldw	r2,-12(fp)
 1008578:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
 100857c:	e0bffd17 	ldw	r2,-12(fp)
 1008580:	1000058d 	sth	zero,22(r2)
 1008584:	e0bffc17 	ldw	r2,-16(fp)
 1008588:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100858c:	e0bffa17 	ldw	r2,-24(fp)
 1008590:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 1008594:	e03fff15 	stw	zero,-4(fp)
 1008598:	e0bfff17 	ldw	r2,-4(fp)
}
 100859c:	e037883a 	mov	sp,fp
 10085a0:	df000017 	ldw	fp,0(sp)
 10085a4:	dec00104 	addi	sp,sp,4
 10085a8:	f800283a 	ret

010085ac <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 10085ac:	defff104 	addi	sp,sp,-60
 10085b0:	dfc00e15 	stw	ra,56(sp)
 10085b4:	df000d15 	stw	fp,52(sp)
 10085b8:	df000d04 	addi	fp,sp,52
 10085bc:	e13ffb15 	stw	r4,-20(fp)
 10085c0:	e1bffd15 	stw	r6,-12(fp)
 10085c4:	e17ffc0d 	sth	r5,-16(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 10085c8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 10085cc:	e0bffd17 	ldw	r2,-12(fp)
 10085d0:	1004c03a 	cmpne	r2,r2,zero
 10085d4:	1000021e 	bne	r2,zero,10085e0 <OSQPend+0x34>
        return ((void *)0);
 10085d8:	e03fff15 	stw	zero,-4(fp)
 10085dc:	0000b506 	br	10088b4 <OSQPend+0x308>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 10085e0:	e0bffb17 	ldw	r2,-20(fp)
 10085e4:	1004c03a 	cmpne	r2,r2,zero
 10085e8:	1000051e 	bne	r2,zero,1008600 <OSQPend+0x54>
        *perr = OS_ERR_PEVENT_NULL;
 10085ec:	e0fffd17 	ldw	r3,-12(fp)
 10085f0:	00800104 	movi	r2,4
 10085f4:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 10085f8:	e03fff15 	stw	zero,-4(fp)
 10085fc:	0000ad06 	br	10088b4 <OSQPend+0x308>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 1008600:	e0bffb17 	ldw	r2,-20(fp)
 1008604:	10800003 	ldbu	r2,0(r2)
 1008608:	10803fcc 	andi	r2,r2,255
 100860c:	108000a0 	cmpeqi	r2,r2,2
 1008610:	1000051e 	bne	r2,zero,1008628 <OSQPend+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 1008614:	e0fffd17 	ldw	r3,-12(fp)
 1008618:	00800044 	movi	r2,1
 100861c:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 1008620:	e03fff15 	stw	zero,-4(fp)
 1008624:	0000a306 	br	10088b4 <OSQPend+0x308>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 1008628:	00804074 	movhi	r2,257
 100862c:	108eb804 	addi	r2,r2,15072
 1008630:	10800003 	ldbu	r2,0(r2)
 1008634:	10803fcc 	andi	r2,r2,255
 1008638:	1005003a 	cmpeq	r2,r2,zero
 100863c:	1000051e 	bne	r2,zero,1008654 <OSQPend+0xa8>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
 1008640:	e0fffd17 	ldw	r3,-12(fp)
 1008644:	00800084 	movi	r2,2
 1008648:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 100864c:	e03fff15 	stw	zero,-4(fp)
 1008650:	00009806 	br	10088b4 <OSQPend+0x308>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
 1008654:	00804074 	movhi	r2,257
 1008658:	108eaa04 	addi	r2,r2,15016
 100865c:	10800003 	ldbu	r2,0(r2)
 1008660:	10803fcc 	andi	r2,r2,255
 1008664:	1005003a 	cmpeq	r2,r2,zero
 1008668:	1000051e 	bne	r2,zero,1008680 <OSQPend+0xd4>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
 100866c:	e0fffd17 	ldw	r3,-12(fp)
 1008670:	00800344 	movi	r2,13
 1008674:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 1008678:	e03fff15 	stw	zero,-4(fp)
 100867c:	00008d06 	br	10088b4 <OSQPend+0x308>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1008680:	0005303a 	rdctl	r2,status
 1008684:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1008688:	e0fff717 	ldw	r3,-36(fp)
 100868c:	00bfff84 	movi	r2,-2
 1008690:	1884703a 	and	r2,r3,r2
 1008694:	1001703a 	wrctl	status,r2
  
  return context;
 1008698:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 100869c:	e0bff815 	stw	r2,-32(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 10086a0:	e0bffb17 	ldw	r2,-20(fp)
 10086a4:	10800117 	ldw	r2,4(r2)
 10086a8:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 10086ac:	e0bff917 	ldw	r2,-28(fp)
 10086b0:	1080058b 	ldhu	r2,22(r2)
 10086b4:	10bfffcc 	andi	r2,r2,65535
 10086b8:	1005003a 	cmpeq	r2,r2,zero
 10086bc:	10001f1e 	bne	r2,zero,100873c <OSQPend+0x190>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 10086c0:	e0bff917 	ldw	r2,-28(fp)
 10086c4:	10c00417 	ldw	r3,16(r2)
 10086c8:	18800017 	ldw	r2,0(r3)
 10086cc:	e0bffa15 	stw	r2,-24(fp)
 10086d0:	18c00104 	addi	r3,r3,4
 10086d4:	e0bff917 	ldw	r2,-28(fp)
 10086d8:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 10086dc:	e0bff917 	ldw	r2,-28(fp)
 10086e0:	1080058b 	ldhu	r2,22(r2)
 10086e4:	10bfffc4 	addi	r2,r2,-1
 10086e8:	1007883a 	mov	r3,r2
 10086ec:	e0bff917 	ldw	r2,-28(fp)
 10086f0:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 10086f4:	e0bff917 	ldw	r2,-28(fp)
 10086f8:	10c00417 	ldw	r3,16(r2)
 10086fc:	e0bff917 	ldw	r2,-28(fp)
 1008700:	10800217 	ldw	r2,8(r2)
 1008704:	1880041e 	bne	r3,r2,1008718 <OSQPend+0x16c>
            pq->OSQOut = pq->OSQStart;
 1008708:	e0bff917 	ldw	r2,-28(fp)
 100870c:	10c00117 	ldw	r3,4(r2)
 1008710:	e0bff917 	ldw	r2,-28(fp)
 1008714:	10c00415 	stw	r3,16(r2)
 1008718:	e0bff817 	ldw	r2,-32(fp)
 100871c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1008720:	e0bff617 	ldw	r2,-40(fp)
 1008724:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 1008728:	e0bffd17 	ldw	r2,-12(fp)
 100872c:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
 1008730:	e0bffa17 	ldw	r2,-24(fp)
 1008734:	e0bfff15 	stw	r2,-4(fp)
 1008738:	00005e06 	br	10088b4 <OSQPend+0x308>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
 100873c:	00804074 	movhi	r2,257
 1008740:	108eb904 	addi	r2,r2,15076
 1008744:	10c00017 	ldw	r3,0(r2)
 1008748:	00804074 	movhi	r2,257
 100874c:	108eb904 	addi	r2,r2,15076
 1008750:	10800017 	ldw	r2,0(r2)
 1008754:	10800c03 	ldbu	r2,48(r2)
 1008758:	10800114 	ori	r2,r2,4
 100875c:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 1008760:	00804074 	movhi	r2,257
 1008764:	108eb904 	addi	r2,r2,15076
 1008768:	10800017 	ldw	r2,0(r2)
 100876c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
 1008770:	00804074 	movhi	r2,257
 1008774:	108eb904 	addi	r2,r2,15076
 1008778:	10c00017 	ldw	r3,0(r2)
 100877c:	e0bffc0b 	ldhu	r2,-16(fp)
 1008780:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
 1008784:	e13ffb17 	ldw	r4,-20(fp)
 1008788:	1004c140 	call	1004c14 <OS_EventTaskWait>
 100878c:	e0bff817 	ldw	r2,-32(fp)
 1008790:	e0bff515 	stw	r2,-44(fp)
 1008794:	e0bff517 	ldw	r2,-44(fp)
 1008798:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
 100879c:	10054c00 	call	10054c0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10087a0:	0005303a 	rdctl	r2,status
 10087a4:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10087a8:	e0fff417 	ldw	r3,-48(fp)
 10087ac:	00bfff84 	movi	r2,-2
 10087b0:	1884703a 	and	r2,r3,r2
 10087b4:	1001703a 	wrctl	status,r2
  
  return context;
 10087b8:	e0bff417 	ldw	r2,-48(fp)
    OS_ENTER_CRITICAL();
 10087bc:	e0bff815 	stw	r2,-32(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 10087c0:	00804074 	movhi	r2,257
 10087c4:	108eb904 	addi	r2,r2,15076
 10087c8:	10800017 	ldw	r2,0(r2)
 10087cc:	10800c43 	ldbu	r2,49(r2)
 10087d0:	10803fcc 	andi	r2,r2,255
 10087d4:	e0bffe15 	stw	r2,-8(fp)
 10087d8:	e0fffe17 	ldw	r3,-8(fp)
 10087dc:	1805003a 	cmpeq	r2,r3,zero
 10087e0:	1000041e 	bne	r2,zero,10087f4 <OSQPend+0x248>
 10087e4:	e0fffe17 	ldw	r3,-8(fp)
 10087e8:	188000a0 	cmpeqi	r2,r3,2
 10087ec:	1000091e 	bne	r2,zero,1008814 <OSQPend+0x268>
 10087f0:	00000d06 	br	1008828 <OSQPend+0x27c>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
 10087f4:	00804074 	movhi	r2,257
 10087f8:	108eb904 	addi	r2,r2,15076
 10087fc:	10800017 	ldw	r2,0(r2)
 1008800:	10800917 	ldw	r2,36(r2)
 1008804:	e0bffa15 	stw	r2,-24(fp)
            *perr =  OS_ERR_NONE;
 1008808:	e0bffd17 	ldw	r2,-12(fp)
 100880c:	10000005 	stb	zero,0(r2)
             break;
 1008810:	00000e06 	br	100884c <OSQPend+0x2a0>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
 1008814:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 1008818:	e0fffd17 	ldw	r3,-12(fp)
 100881c:	00800384 	movi	r2,14
 1008820:	18800005 	stb	r2,0(r3)
             break;
 1008824:	00000906 	br	100884c <OSQPend+0x2a0>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 1008828:	00804074 	movhi	r2,257
 100882c:	108eb904 	addi	r2,r2,15076
 1008830:	11000017 	ldw	r4,0(r2)
 1008834:	e17ffb17 	ldw	r5,-20(fp)
 1008838:	1004e780 	call	1004e78 <OS_EventTaskRemove>
             pmsg = (void *)0;
 100883c:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 1008840:	e0fffd17 	ldw	r3,-12(fp)
 1008844:	00800284 	movi	r2,10
 1008848:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 100884c:	00804074 	movhi	r2,257
 1008850:	108eb904 	addi	r2,r2,15076
 1008854:	10800017 	ldw	r2,0(r2)
 1008858:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 100885c:	00804074 	movhi	r2,257
 1008860:	108eb904 	addi	r2,r2,15076
 1008864:	10800017 	ldw	r2,0(r2)
 1008868:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 100886c:	00804074 	movhi	r2,257
 1008870:	108eb904 	addi	r2,r2,15076
 1008874:	10800017 	ldw	r2,0(r2)
 1008878:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 100887c:	00804074 	movhi	r2,257
 1008880:	108eb904 	addi	r2,r2,15076
 1008884:	10800017 	ldw	r2,0(r2)
 1008888:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
 100888c:	00804074 	movhi	r2,257
 1008890:	108eb904 	addi	r2,r2,15076
 1008894:	10800017 	ldw	r2,0(r2)
 1008898:	10000915 	stw	zero,36(r2)
 100889c:	e0bff817 	ldw	r2,-32(fp)
 10088a0:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10088a4:	e0bff317 	ldw	r2,-52(fp)
 10088a8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
 10088ac:	e0bffa17 	ldw	r2,-24(fp)
 10088b0:	e0bfff15 	stw	r2,-4(fp)
 10088b4:	e0bfff17 	ldw	r2,-4(fp)
}
 10088b8:	e037883a 	mov	sp,fp
 10088bc:	dfc00117 	ldw	ra,4(sp)
 10088c0:	df000017 	ldw	fp,0(sp)
 10088c4:	dec00204 	addi	sp,sp,8
 10088c8:	f800283a 	ret

010088cc <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 10088cc:	defff504 	addi	sp,sp,-44
 10088d0:	dfc00a15 	stw	ra,40(sp)
 10088d4:	df000915 	stw	fp,36(sp)
 10088d8:	df000904 	addi	fp,sp,36
 10088dc:	e13ffc15 	stw	r4,-16(fp)
 10088e0:	e1bffe15 	stw	r6,-8(fp)
 10088e4:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 10088e8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 10088ec:	e0bffe17 	ldw	r2,-8(fp)
 10088f0:	1004c03a 	cmpne	r2,r2,zero
 10088f4:	1000021e 	bne	r2,zero,1008900 <OSQPendAbort+0x34>
        return (0);
 10088f8:	e03fff15 	stw	zero,-4(fp)
 10088fc:	00004c06 	br	1008a30 <OSQPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 1008900:	e0bffc17 	ldw	r2,-16(fp)
 1008904:	1004c03a 	cmpne	r2,r2,zero
 1008908:	1000051e 	bne	r2,zero,1008920 <OSQPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
 100890c:	e0fffe17 	ldw	r3,-8(fp)
 1008910:	00800104 	movi	r2,4
 1008914:	18800005 	stb	r2,0(r3)
        return (0);
 1008918:	e03fff15 	stw	zero,-4(fp)
 100891c:	00004406 	br	1008a30 <OSQPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 1008920:	e0bffc17 	ldw	r2,-16(fp)
 1008924:	10800003 	ldbu	r2,0(r2)
 1008928:	10803fcc 	andi	r2,r2,255
 100892c:	108000a0 	cmpeqi	r2,r2,2
 1008930:	1000051e 	bne	r2,zero,1008948 <OSQPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 1008934:	e0fffe17 	ldw	r3,-8(fp)
 1008938:	00800044 	movi	r2,1
 100893c:	18800005 	stb	r2,0(r3)
        return (0);
 1008940:	e03fff15 	stw	zero,-4(fp)
 1008944:	00003a06 	br	1008a30 <OSQPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1008948:	0005303a 	rdctl	r2,status
 100894c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1008950:	e0fff917 	ldw	r3,-28(fp)
 1008954:	00bfff84 	movi	r2,-2
 1008958:	1884703a 	and	r2,r3,r2
 100895c:	1001703a 	wrctl	status,r2
  
  return context;
 1008960:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 1008964:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
 1008968:	e0bffc17 	ldw	r2,-16(fp)
 100896c:	10800283 	ldbu	r2,10(r2)
 1008970:	10803fcc 	andi	r2,r2,255
 1008974:	1005003a 	cmpeq	r2,r2,zero
 1008978:	1000261e 	bne	r2,zero,1008a14 <OSQPendAbort+0x148>
        nbr_tasks = 0;
 100897c:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
 1008980:	e0bffd03 	ldbu	r2,-12(fp)
 1008984:	10800060 	cmpeqi	r2,r2,1
 1008988:	1000091e 	bne	r2,zero,10089b0 <OSQPendAbort+0xe4>
 100898c:	00000e06 	br	10089c8 <OSQPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 1008990:	e13ffc17 	ldw	r4,-16(fp)
 1008994:	000b883a 	mov	r5,zero
 1008998:	01800104 	movi	r6,4
 100899c:	01c00084 	movi	r7,2
 10089a0:	1004a800 	call	1004a80 <OS_EventTaskRdy>
                     nbr_tasks++;
 10089a4:	e0bffb03 	ldbu	r2,-20(fp)
 10089a8:	10800044 	addi	r2,r2,1
 10089ac:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
 10089b0:	e0bffc17 	ldw	r2,-16(fp)
 10089b4:	10800283 	ldbu	r2,10(r2)
 10089b8:	10803fcc 	andi	r2,r2,255
 10089bc:	1004c03a 	cmpne	r2,r2,zero
 10089c0:	103ff31e 	bne	r2,zero,1008990 <OSQPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 10089c4:	00000806 	br	10089e8 <OSQPendAbort+0x11c>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 10089c8:	e13ffc17 	ldw	r4,-16(fp)
 10089cc:	000b883a 	mov	r5,zero
 10089d0:	01800104 	movi	r6,4
 10089d4:	01c00084 	movi	r7,2
 10089d8:	1004a800 	call	1004a80 <OS_EventTaskRdy>
                 nbr_tasks++;
 10089dc:	e0bffb03 	ldbu	r2,-20(fp)
 10089e0:	10800044 	addi	r2,r2,1
 10089e4:	e0bffb05 	stb	r2,-20(fp)
 10089e8:	e0bffa17 	ldw	r2,-24(fp)
 10089ec:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10089f0:	e0bff817 	ldw	r2,-32(fp)
 10089f4:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
 10089f8:	10054c00 	call	10054c0 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 10089fc:	e0fffe17 	ldw	r3,-8(fp)
 1008a00:	00800384 	movi	r2,14
 1008a04:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
 1008a08:	e0bffb03 	ldbu	r2,-20(fp)
 1008a0c:	e0bfff15 	stw	r2,-4(fp)
 1008a10:	00000706 	br	1008a30 <OSQPendAbort+0x164>
 1008a14:	e0bffa17 	ldw	r2,-24(fp)
 1008a18:	e0bff715 	stw	r2,-36(fp)
 1008a1c:	e0bff717 	ldw	r2,-36(fp)
 1008a20:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 1008a24:	e0bffe17 	ldw	r2,-8(fp)
 1008a28:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
 1008a2c:	e03fff15 	stw	zero,-4(fp)
 1008a30:	e0bfff17 	ldw	r2,-4(fp)
}
 1008a34:	e037883a 	mov	sp,fp
 1008a38:	dfc00117 	ldw	ra,4(sp)
 1008a3c:	df000017 	ldw	fp,0(sp)
 1008a40:	dec00204 	addi	sp,sp,8
 1008a44:	f800283a 	ret

01008a48 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
 1008a48:	defff504 	addi	sp,sp,-44
 1008a4c:	dfc00a15 	stw	ra,40(sp)
 1008a50:	df000915 	stw	fp,36(sp)
 1008a54:	df000904 	addi	fp,sp,36
 1008a58:	e13ffd15 	stw	r4,-12(fp)
 1008a5c:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 1008a60:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 1008a64:	e0bffd17 	ldw	r2,-12(fp)
 1008a68:	1004c03a 	cmpne	r2,r2,zero
 1008a6c:	1000031e 	bne	r2,zero,1008a7c <OSQPost+0x34>
        return (OS_ERR_PEVENT_NULL);
 1008a70:	00800104 	movi	r2,4
 1008a74:	e0bfff15 	stw	r2,-4(fp)
 1008a78:	00004d06 	br	1008bb0 <OSQPost+0x168>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 1008a7c:	e0bffd17 	ldw	r2,-12(fp)
 1008a80:	10800003 	ldbu	r2,0(r2)
 1008a84:	10803fcc 	andi	r2,r2,255
 1008a88:	108000a0 	cmpeqi	r2,r2,2
 1008a8c:	1000031e 	bne	r2,zero,1008a9c <OSQPost+0x54>
        return (OS_ERR_EVENT_TYPE);
 1008a90:	00800044 	movi	r2,1
 1008a94:	e0bfff15 	stw	r2,-4(fp)
 1008a98:	00004506 	br	1008bb0 <OSQPost+0x168>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1008a9c:	0005303a 	rdctl	r2,status
 1008aa0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1008aa4:	e0fffa17 	ldw	r3,-24(fp)
 1008aa8:	00bfff84 	movi	r2,-2
 1008aac:	1884703a 	and	r2,r3,r2
 1008ab0:	1001703a 	wrctl	status,r2
  
  return context;
 1008ab4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 1008ab8:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
 1008abc:	e0bffd17 	ldw	r2,-12(fp)
 1008ac0:	10800283 	ldbu	r2,10(r2)
 1008ac4:	10803fcc 	andi	r2,r2,255
 1008ac8:	1005003a 	cmpeq	r2,r2,zero
 1008acc:	10000c1e 	bne	r2,zero,1008b00 <OSQPost+0xb8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 1008ad0:	e13ffd17 	ldw	r4,-12(fp)
 1008ad4:	e17ffe17 	ldw	r5,-8(fp)
 1008ad8:	01800104 	movi	r6,4
 1008adc:	000f883a 	mov	r7,zero
 1008ae0:	1004a800 	call	1004a80 <OS_EventTaskRdy>
 1008ae4:	e0bffb17 	ldw	r2,-20(fp)
 1008ae8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1008aec:	e0bff917 	ldw	r2,-28(fp)
 1008af0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
 1008af4:	10054c00 	call	10054c0 <OS_Sched>
        return (OS_ERR_NONE);
 1008af8:	e03fff15 	stw	zero,-4(fp)
 1008afc:	00002c06 	br	1008bb0 <OSQPost+0x168>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
 1008b00:	e0bffd17 	ldw	r2,-12(fp)
 1008b04:	10800117 	ldw	r2,4(r2)
 1008b08:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
 1008b0c:	e0bffc17 	ldw	r2,-16(fp)
 1008b10:	10c0058b 	ldhu	r3,22(r2)
 1008b14:	e0bffc17 	ldw	r2,-16(fp)
 1008b18:	1080050b 	ldhu	r2,20(r2)
 1008b1c:	18ffffcc 	andi	r3,r3,65535
 1008b20:	10bfffcc 	andi	r2,r2,65535
 1008b24:	18800736 	bltu	r3,r2,1008b44 <OSQPost+0xfc>
 1008b28:	e0bffb17 	ldw	r2,-20(fp)
 1008b2c:	e0bff815 	stw	r2,-32(fp)
 1008b30:	e0bff817 	ldw	r2,-32(fp)
 1008b34:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 1008b38:	00800784 	movi	r2,30
 1008b3c:	e0bfff15 	stw	r2,-4(fp)
 1008b40:	00001b06 	br	1008bb0 <OSQPost+0x168>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
 1008b44:	e0bffc17 	ldw	r2,-16(fp)
 1008b48:	10c00317 	ldw	r3,12(r2)
 1008b4c:	e0bffe17 	ldw	r2,-8(fp)
 1008b50:	18800015 	stw	r2,0(r3)
 1008b54:	18c00104 	addi	r3,r3,4
 1008b58:	e0bffc17 	ldw	r2,-16(fp)
 1008b5c:	10c00315 	stw	r3,12(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
 1008b60:	e0bffc17 	ldw	r2,-16(fp)
 1008b64:	1080058b 	ldhu	r2,22(r2)
 1008b68:	10800044 	addi	r2,r2,1
 1008b6c:	1007883a 	mov	r3,r2
 1008b70:	e0bffc17 	ldw	r2,-16(fp)
 1008b74:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
 1008b78:	e0bffc17 	ldw	r2,-16(fp)
 1008b7c:	10c00317 	ldw	r3,12(r2)
 1008b80:	e0bffc17 	ldw	r2,-16(fp)
 1008b84:	10800217 	ldw	r2,8(r2)
 1008b88:	1880041e 	bne	r3,r2,1008b9c <OSQPost+0x154>
        pq->OSQIn = pq->OSQStart;
 1008b8c:	e0bffc17 	ldw	r2,-16(fp)
 1008b90:	10c00117 	ldw	r3,4(r2)
 1008b94:	e0bffc17 	ldw	r2,-16(fp)
 1008b98:	10c00315 	stw	r3,12(r2)
 1008b9c:	e0bffb17 	ldw	r2,-20(fp)
 1008ba0:	e0bff715 	stw	r2,-36(fp)
 1008ba4:	e0bff717 	ldw	r2,-36(fp)
 1008ba8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 1008bac:	e03fff15 	stw	zero,-4(fp)
 1008bb0:	e0bfff17 	ldw	r2,-4(fp)
}
 1008bb4:	e037883a 	mov	sp,fp
 1008bb8:	dfc00117 	ldw	ra,4(sp)
 1008bbc:	df000017 	ldw	fp,0(sp)
 1008bc0:	dec00204 	addi	sp,sp,8
 1008bc4:	f800283a 	ret

01008bc8 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
 1008bc8:	defff504 	addi	sp,sp,-44
 1008bcc:	dfc00a15 	stw	ra,40(sp)
 1008bd0:	df000915 	stw	fp,36(sp)
 1008bd4:	df000904 	addi	fp,sp,36
 1008bd8:	e13ffd15 	stw	r4,-12(fp)
 1008bdc:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 1008be0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 1008be4:	e0bffd17 	ldw	r2,-12(fp)
 1008be8:	1004c03a 	cmpne	r2,r2,zero
 1008bec:	1000031e 	bne	r2,zero,1008bfc <OSQPostFront+0x34>
        return (OS_ERR_PEVENT_NULL);
 1008bf0:	00800104 	movi	r2,4
 1008bf4:	e0bfff15 	stw	r2,-4(fp)
 1008bf8:	00004f06 	br	1008d38 <OSQPostFront+0x170>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 1008bfc:	e0bffd17 	ldw	r2,-12(fp)
 1008c00:	10800003 	ldbu	r2,0(r2)
 1008c04:	10803fcc 	andi	r2,r2,255
 1008c08:	108000a0 	cmpeqi	r2,r2,2
 1008c0c:	1000031e 	bne	r2,zero,1008c1c <OSQPostFront+0x54>
        return (OS_ERR_EVENT_TYPE);
 1008c10:	00800044 	movi	r2,1
 1008c14:	e0bfff15 	stw	r2,-4(fp)
 1008c18:	00004706 	br	1008d38 <OSQPostFront+0x170>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1008c1c:	0005303a 	rdctl	r2,status
 1008c20:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1008c24:	e0fffa17 	ldw	r3,-24(fp)
 1008c28:	00bfff84 	movi	r2,-2
 1008c2c:	1884703a 	and	r2,r3,r2
 1008c30:	1001703a 	wrctl	status,r2
  
  return context;
 1008c34:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 1008c38:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
 1008c3c:	e0bffd17 	ldw	r2,-12(fp)
 1008c40:	10800283 	ldbu	r2,10(r2)
 1008c44:	10803fcc 	andi	r2,r2,255
 1008c48:	1005003a 	cmpeq	r2,r2,zero
 1008c4c:	10000c1e 	bne	r2,zero,1008c80 <OSQPostFront+0xb8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 1008c50:	e13ffd17 	ldw	r4,-12(fp)
 1008c54:	e17ffe17 	ldw	r5,-8(fp)
 1008c58:	01800104 	movi	r6,4
 1008c5c:	000f883a 	mov	r7,zero
 1008c60:	1004a800 	call	1004a80 <OS_EventTaskRdy>
 1008c64:	e0bffb17 	ldw	r2,-20(fp)
 1008c68:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1008c6c:	e0bff917 	ldw	r2,-28(fp)
 1008c70:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
 1008c74:	10054c00 	call	10054c0 <OS_Sched>
        return (OS_ERR_NONE);
 1008c78:	e03fff15 	stw	zero,-4(fp)
 1008c7c:	00002e06 	br	1008d38 <OSQPostFront+0x170>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 1008c80:	e0bffd17 	ldw	r2,-12(fp)
 1008c84:	10800117 	ldw	r2,4(r2)
 1008c88:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 1008c8c:	e0bffc17 	ldw	r2,-16(fp)
 1008c90:	10c0058b 	ldhu	r3,22(r2)
 1008c94:	e0bffc17 	ldw	r2,-16(fp)
 1008c98:	1080050b 	ldhu	r2,20(r2)
 1008c9c:	18ffffcc 	andi	r3,r3,65535
 1008ca0:	10bfffcc 	andi	r2,r2,65535
 1008ca4:	18800736 	bltu	r3,r2,1008cc4 <OSQPostFront+0xfc>
 1008ca8:	e0bffb17 	ldw	r2,-20(fp)
 1008cac:	e0bff815 	stw	r2,-32(fp)
 1008cb0:	e0bff817 	ldw	r2,-32(fp)
 1008cb4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 1008cb8:	00800784 	movi	r2,30
 1008cbc:	e0bfff15 	stw	r2,-4(fp)
 1008cc0:	00001d06 	br	1008d38 <OSQPostFront+0x170>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
 1008cc4:	e0bffc17 	ldw	r2,-16(fp)
 1008cc8:	10c00417 	ldw	r3,16(r2)
 1008ccc:	e0bffc17 	ldw	r2,-16(fp)
 1008cd0:	10800117 	ldw	r2,4(r2)
 1008cd4:	1880041e 	bne	r3,r2,1008ce8 <OSQPostFront+0x120>
        pq->OSQOut = pq->OSQEnd;
 1008cd8:	e0bffc17 	ldw	r2,-16(fp)
 1008cdc:	10c00217 	ldw	r3,8(r2)
 1008ce0:	e0bffc17 	ldw	r2,-16(fp)
 1008ce4:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
 1008ce8:	e0bffc17 	ldw	r2,-16(fp)
 1008cec:	10800417 	ldw	r2,16(r2)
 1008cf0:	10ffff04 	addi	r3,r2,-4
 1008cf4:	e0bffc17 	ldw	r2,-16(fp)
 1008cf8:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
 1008cfc:	e0bffc17 	ldw	r2,-16(fp)
 1008d00:	10c00417 	ldw	r3,16(r2)
 1008d04:	e0bffe17 	ldw	r2,-8(fp)
 1008d08:	18800015 	stw	r2,0(r3)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 1008d0c:	e0bffc17 	ldw	r2,-16(fp)
 1008d10:	1080058b 	ldhu	r2,22(r2)
 1008d14:	10800044 	addi	r2,r2,1
 1008d18:	1007883a 	mov	r3,r2
 1008d1c:	e0bffc17 	ldw	r2,-16(fp)
 1008d20:	10c0058d 	sth	r3,22(r2)
 1008d24:	e0bffb17 	ldw	r2,-20(fp)
 1008d28:	e0bff715 	stw	r2,-36(fp)
 1008d2c:	e0bff717 	ldw	r2,-36(fp)
 1008d30:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 1008d34:	e03fff15 	stw	zero,-4(fp)
 1008d38:	e0bfff17 	ldw	r2,-4(fp)
}
 1008d3c:	e037883a 	mov	sp,fp
 1008d40:	dfc00117 	ldw	ra,4(sp)
 1008d44:	df000017 	ldw	fp,0(sp)
 1008d48:	dec00204 	addi	sp,sp,8
 1008d4c:	f800283a 	ret

01008d50 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
 1008d50:	defff404 	addi	sp,sp,-48
 1008d54:	dfc00b15 	stw	ra,44(sp)
 1008d58:	df000a15 	stw	fp,40(sp)
 1008d5c:	df000a04 	addi	fp,sp,40
 1008d60:	e13ffc15 	stw	r4,-16(fp)
 1008d64:	e17ffd15 	stw	r5,-12(fp)
 1008d68:	e1bffe05 	stb	r6,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 1008d6c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 1008d70:	e0bffc17 	ldw	r2,-16(fp)
 1008d74:	1004c03a 	cmpne	r2,r2,zero
 1008d78:	1000031e 	bne	r2,zero,1008d88 <OSQPostOpt+0x38>
        return (OS_ERR_PEVENT_NULL);
 1008d7c:	00800104 	movi	r2,4
 1008d80:	e0bfff15 	stw	r2,-4(fp)
 1008d84:	00007906 	br	1008f6c <OSQPostOpt+0x21c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 1008d88:	e0bffc17 	ldw	r2,-16(fp)
 1008d8c:	10800003 	ldbu	r2,0(r2)
 1008d90:	10803fcc 	andi	r2,r2,255
 1008d94:	108000a0 	cmpeqi	r2,r2,2
 1008d98:	1000031e 	bne	r2,zero,1008da8 <OSQPostOpt+0x58>
        return (OS_ERR_EVENT_TYPE);
 1008d9c:	00800044 	movi	r2,1
 1008da0:	e0bfff15 	stw	r2,-4(fp)
 1008da4:	00007106 	br	1008f6c <OSQPostOpt+0x21c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1008da8:	0005303a 	rdctl	r2,status
 1008dac:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1008db0:	e0fff917 	ldw	r3,-28(fp)
 1008db4:	00bfff84 	movi	r2,-2
 1008db8:	1884703a 	and	r2,r3,r2
 1008dbc:	1001703a 	wrctl	status,r2
  
  return context;
 1008dc0:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 1008dc4:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
 1008dc8:	e0bffc17 	ldw	r2,-16(fp)
 1008dcc:	10800283 	ldbu	r2,10(r2)
 1008dd0:	10803fcc 	andi	r2,r2,255
 1008dd4:	1005003a 	cmpeq	r2,r2,zero
 1008dd8:	1000211e 	bne	r2,zero,1008e60 <OSQPostOpt+0x110>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
 1008ddc:	e0bffe03 	ldbu	r2,-8(fp)
 1008de0:	1080004c 	andi	r2,r2,1
 1008de4:	10803fcc 	andi	r2,r2,255
 1008de8:	1005003a 	cmpeq	r2,r2,zero
 1008dec:	10000c1e 	bne	r2,zero,1008e20 <OSQPostOpt+0xd0>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 1008df0:	00000506 	br	1008e08 <OSQPostOpt+0xb8>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 1008df4:	e13ffc17 	ldw	r4,-16(fp)
 1008df8:	e17ffd17 	ldw	r5,-12(fp)
 1008dfc:	01800104 	movi	r6,4
 1008e00:	000f883a 	mov	r7,zero
 1008e04:	1004a800 	call	1004a80 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 1008e08:	e0bffc17 	ldw	r2,-16(fp)
 1008e0c:	10800283 	ldbu	r2,10(r2)
 1008e10:	10803fcc 	andi	r2,r2,255
 1008e14:	1004c03a 	cmpne	r2,r2,zero
 1008e18:	103ff61e 	bne	r2,zero,1008df4 <OSQPostOpt+0xa4>
 1008e1c:	00000506 	br	1008e34 <OSQPostOpt+0xe4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 1008e20:	e13ffc17 	ldw	r4,-16(fp)
 1008e24:	e17ffd17 	ldw	r5,-12(fp)
 1008e28:	01800104 	movi	r6,4
 1008e2c:	000f883a 	mov	r7,zero
 1008e30:	1004a800 	call	1004a80 <OS_EventTaskRdy>
 1008e34:	e0bffa17 	ldw	r2,-24(fp)
 1008e38:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1008e3c:	e0bff817 	ldw	r2,-32(fp)
 1008e40:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
 1008e44:	e0bffe03 	ldbu	r2,-8(fp)
 1008e48:	1080010c 	andi	r2,r2,4
 1008e4c:	1004c03a 	cmpne	r2,r2,zero
 1008e50:	1000011e 	bne	r2,zero,1008e58 <OSQPostOpt+0x108>
            OS_Sched();                               /* Find highest priority task ready to run       */
 1008e54:	10054c00 	call	10054c0 <OS_Sched>
        }
        return (OS_ERR_NONE);
 1008e58:	e03fff15 	stw	zero,-4(fp)
 1008e5c:	00004306 	br	1008f6c <OSQPostOpt+0x21c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 1008e60:	e0bffc17 	ldw	r2,-16(fp)
 1008e64:	10800117 	ldw	r2,4(r2)
 1008e68:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 1008e6c:	e0bffb17 	ldw	r2,-20(fp)
 1008e70:	10c0058b 	ldhu	r3,22(r2)
 1008e74:	e0bffb17 	ldw	r2,-20(fp)
 1008e78:	1080050b 	ldhu	r2,20(r2)
 1008e7c:	18ffffcc 	andi	r3,r3,65535
 1008e80:	10bfffcc 	andi	r2,r2,65535
 1008e84:	18800736 	bltu	r3,r2,1008ea4 <OSQPostOpt+0x154>
 1008e88:	e0bffa17 	ldw	r2,-24(fp)
 1008e8c:	e0bff715 	stw	r2,-36(fp)
 1008e90:	e0bff717 	ldw	r2,-36(fp)
 1008e94:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 1008e98:	00800784 	movi	r2,30
 1008e9c:	e0bfff15 	stw	r2,-4(fp)
 1008ea0:	00003206 	br	1008f6c <OSQPostOpt+0x21c>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
 1008ea4:	e0bffe03 	ldbu	r2,-8(fp)
 1008ea8:	1080008c 	andi	r2,r2,2
 1008eac:	1005003a 	cmpeq	r2,r2,zero
 1008eb0:	1000131e 	bne	r2,zero,1008f00 <OSQPostOpt+0x1b0>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
 1008eb4:	e0bffb17 	ldw	r2,-20(fp)
 1008eb8:	10c00417 	ldw	r3,16(r2)
 1008ebc:	e0bffb17 	ldw	r2,-20(fp)
 1008ec0:	10800117 	ldw	r2,4(r2)
 1008ec4:	1880041e 	bne	r3,r2,1008ed8 <OSQPostOpt+0x188>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
 1008ec8:	e0bffb17 	ldw	r2,-20(fp)
 1008ecc:	10c00217 	ldw	r3,8(r2)
 1008ed0:	e0bffb17 	ldw	r2,-20(fp)
 1008ed4:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
 1008ed8:	e0bffb17 	ldw	r2,-20(fp)
 1008edc:	10800417 	ldw	r2,16(r2)
 1008ee0:	10ffff04 	addi	r3,r2,-4
 1008ee4:	e0bffb17 	ldw	r2,-20(fp)
 1008ee8:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
 1008eec:	e0bffb17 	ldw	r2,-20(fp)
 1008ef0:	10c00417 	ldw	r3,16(r2)
 1008ef4:	e0bffd17 	ldw	r2,-12(fp)
 1008ef8:	18800015 	stw	r2,0(r3)
 1008efc:	00001006 	br	1008f40 <OSQPostOpt+0x1f0>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
 1008f00:	e0bffb17 	ldw	r2,-20(fp)
 1008f04:	10c00317 	ldw	r3,12(r2)
 1008f08:	e0bffd17 	ldw	r2,-12(fp)
 1008f0c:	18800015 	stw	r2,0(r3)
 1008f10:	18c00104 	addi	r3,r3,4
 1008f14:	e0bffb17 	ldw	r2,-20(fp)
 1008f18:	10c00315 	stw	r3,12(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
 1008f1c:	e0bffb17 	ldw	r2,-20(fp)
 1008f20:	10c00317 	ldw	r3,12(r2)
 1008f24:	e0bffb17 	ldw	r2,-20(fp)
 1008f28:	10800217 	ldw	r2,8(r2)
 1008f2c:	1880041e 	bne	r3,r2,1008f40 <OSQPostOpt+0x1f0>
            pq->OSQIn = pq->OSQStart;
 1008f30:	e0bffb17 	ldw	r2,-20(fp)
 1008f34:	10c00117 	ldw	r3,4(r2)
 1008f38:	e0bffb17 	ldw	r2,-20(fp)
 1008f3c:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 1008f40:	e0bffb17 	ldw	r2,-20(fp)
 1008f44:	1080058b 	ldhu	r2,22(r2)
 1008f48:	10800044 	addi	r2,r2,1
 1008f4c:	1007883a 	mov	r3,r2
 1008f50:	e0bffb17 	ldw	r2,-20(fp)
 1008f54:	10c0058d 	sth	r3,22(r2)
 1008f58:	e0bffa17 	ldw	r2,-24(fp)
 1008f5c:	e0bff615 	stw	r2,-40(fp)
 1008f60:	e0bff617 	ldw	r2,-40(fp)
 1008f64:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 1008f68:	e03fff15 	stw	zero,-4(fp)
 1008f6c:	e0bfff17 	ldw	r2,-4(fp)
}
 1008f70:	e037883a 	mov	sp,fp
 1008f74:	dfc00117 	ldw	ra,4(sp)
 1008f78:	df000017 	ldw	fp,0(sp)
 1008f7c:	dec00204 	addi	sp,sp,8
 1008f80:	f800283a 	ret

01008f84 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
 1008f84:	defff504 	addi	sp,sp,-44
 1008f88:	df000a15 	stw	fp,40(sp)
 1008f8c:	df000a04 	addi	fp,sp,40
 1008f90:	e13ffd15 	stw	r4,-12(fp)
 1008f94:	e17ffe15 	stw	r5,-8(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 1008f98:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 1008f9c:	e0bffd17 	ldw	r2,-12(fp)
 1008fa0:	1004c03a 	cmpne	r2,r2,zero
 1008fa4:	1000031e 	bne	r2,zero,1008fb4 <OSQQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
 1008fa8:	00800104 	movi	r2,4
 1008fac:	e0bfff15 	stw	r2,-4(fp)
 1008fb0:	00004f06 	br	10090f0 <OSQQuery+0x16c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
 1008fb4:	e0bffe17 	ldw	r2,-8(fp)
 1008fb8:	1004c03a 	cmpne	r2,r2,zero
 1008fbc:	1000031e 	bne	r2,zero,1008fcc <OSQQuery+0x48>
        return (OS_ERR_PDATA_NULL);
 1008fc0:	00800244 	movi	r2,9
 1008fc4:	e0bfff15 	stw	r2,-4(fp)
 1008fc8:	00004906 	br	10090f0 <OSQQuery+0x16c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 1008fcc:	e0bffd17 	ldw	r2,-12(fp)
 1008fd0:	10800003 	ldbu	r2,0(r2)
 1008fd4:	10803fcc 	andi	r2,r2,255
 1008fd8:	108000a0 	cmpeqi	r2,r2,2
 1008fdc:	1000031e 	bne	r2,zero,1008fec <OSQQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
 1008fe0:	00800044 	movi	r2,1
 1008fe4:	e0bfff15 	stw	r2,-4(fp)
 1008fe8:	00004106 	br	10090f0 <OSQQuery+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1008fec:	0005303a 	rdctl	r2,status
 1008ff0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1008ff4:	e0fff717 	ldw	r3,-36(fp)
 1008ff8:	00bfff84 	movi	r2,-2
 1008ffc:	1884703a 	and	r2,r3,r2
 1009000:	1001703a 	wrctl	status,r2
  
  return context;
 1009004:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 1009008:	e0bff815 	stw	r2,-32(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
 100900c:	e0bffd17 	ldw	r2,-12(fp)
 1009010:	10c00283 	ldbu	r3,10(r2)
 1009014:	e0bffe17 	ldw	r2,-8(fp)
 1009018:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
 100901c:	e0bffd17 	ldw	r2,-12(fp)
 1009020:	108002c4 	addi	r2,r2,11
 1009024:	e0bffa15 	stw	r2,-24(fp)
    pdest                = &p_q_data->OSEventTbl[0];
 1009028:	e0bffe17 	ldw	r2,-8(fp)
 100902c:	10800204 	addi	r2,r2,8
 1009030:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 1009034:	e03ffb05 	stb	zero,-20(fp)
 1009038:	00000d06 	br	1009070 <OSQQuery+0xec>
        *pdest++ = *psrc++;
 100903c:	e0bffa17 	ldw	r2,-24(fp)
 1009040:	10c00003 	ldbu	r3,0(r2)
 1009044:	e0bff917 	ldw	r2,-28(fp)
 1009048:	10c00005 	stb	r3,0(r2)
 100904c:	e0bff917 	ldw	r2,-28(fp)
 1009050:	10800044 	addi	r2,r2,1
 1009054:	e0bff915 	stw	r2,-28(fp)
 1009058:	e0bffa17 	ldw	r2,-24(fp)
 100905c:	10800044 	addi	r2,r2,1
 1009060:	e0bffa15 	stw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 1009064:	e0bffb03 	ldbu	r2,-20(fp)
 1009068:	10800044 	addi	r2,r2,1
 100906c:	e0bffb05 	stb	r2,-20(fp)
 1009070:	e0bffb03 	ldbu	r2,-20(fp)
 1009074:	108000f0 	cmpltui	r2,r2,3
 1009078:	103ff01e 	bne	r2,zero,100903c <OSQQuery+0xb8>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
 100907c:	e0bffd17 	ldw	r2,-12(fp)
 1009080:	10800117 	ldw	r2,4(r2)
 1009084:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
 1009088:	e0bffc17 	ldw	r2,-16(fp)
 100908c:	1080058b 	ldhu	r2,22(r2)
 1009090:	10bfffcc 	andi	r2,r2,65535
 1009094:	1005003a 	cmpeq	r2,r2,zero
 1009098:	1000061e 	bne	r2,zero,10090b4 <OSQQuery+0x130>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
 100909c:	e0bffc17 	ldw	r2,-16(fp)
 10090a0:	10800417 	ldw	r2,16(r2)
 10090a4:	10c00017 	ldw	r3,0(r2)
 10090a8:	e0bffe17 	ldw	r2,-8(fp)
 10090ac:	10c00015 	stw	r3,0(r2)
 10090b0:	00000206 	br	10090bc <OSQQuery+0x138>
    } else {
        p_q_data->OSMsg = (void *)0;
 10090b4:	e0bffe17 	ldw	r2,-8(fp)
 10090b8:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
 10090bc:	e0bffc17 	ldw	r2,-16(fp)
 10090c0:	10c0058b 	ldhu	r3,22(r2)
 10090c4:	e0bffe17 	ldw	r2,-8(fp)
 10090c8:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
 10090cc:	e0bffc17 	ldw	r2,-16(fp)
 10090d0:	10c0050b 	ldhu	r3,20(r2)
 10090d4:	e0bffe17 	ldw	r2,-8(fp)
 10090d8:	10c0018d 	sth	r3,6(r2)
 10090dc:	e0bff817 	ldw	r2,-32(fp)
 10090e0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10090e4:	e0bff617 	ldw	r2,-40(fp)
 10090e8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 10090ec:	e03fff15 	stw	zero,-4(fp)
 10090f0:	e0bfff17 	ldw	r2,-4(fp)
}
 10090f4:	e037883a 	mov	sp,fp
 10090f8:	df000017 	ldw	fp,0(sp)
 10090fc:	dec00104 	addi	sp,sp,4
 1009100:	f800283a 	ret

01009104 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
 1009104:	defffb04 	addi	sp,sp,-20
 1009108:	dfc00415 	stw	ra,16(sp)
 100910c:	df000315 	stw	fp,12(sp)
 1009110:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
 1009114:	010040b4 	movhi	r4,258
 1009118:	2124b304 	addi	r4,r4,-27956
 100911c:	01407804 	movi	r5,480
 1009120:	10054000 	call	1005400 <OS_MemClr>
    pq1 = &OSQTbl[0];
 1009124:	008040b4 	movhi	r2,258
 1009128:	10a4b304 	addi	r2,r2,-27956
 100912c:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
 1009130:	008040b4 	movhi	r2,258
 1009134:	10a4b904 	addi	r2,r2,-27932
 1009138:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 100913c:	e03fff0d 	sth	zero,-4(fp)
 1009140:	00000c06 	br	1009174 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
 1009144:	e0fffe17 	ldw	r3,-8(fp)
 1009148:	e0bffd17 	ldw	r2,-12(fp)
 100914c:	18800015 	stw	r2,0(r3)
        pq1++;
 1009150:	e0bffe17 	ldw	r2,-8(fp)
 1009154:	10800604 	addi	r2,r2,24
 1009158:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
 100915c:	e0bffd17 	ldw	r2,-12(fp)
 1009160:	10800604 	addi	r2,r2,24
 1009164:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 1009168:	e0bfff0b 	ldhu	r2,-4(fp)
 100916c:	10800044 	addi	r2,r2,1
 1009170:	e0bfff0d 	sth	r2,-4(fp)
 1009174:	e0bfff0b 	ldhu	r2,-4(fp)
 1009178:	108004f0 	cmpltui	r2,r2,19
 100917c:	103ff11e 	bne	r2,zero,1009144 <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
 1009180:	e0bffe17 	ldw	r2,-8(fp)
 1009184:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
 1009188:	00c04074 	movhi	r3,257
 100918c:	18ceb504 	addi	r3,r3,15060
 1009190:	008040b4 	movhi	r2,258
 1009194:	10a4b304 	addi	r2,r2,-27956
 1009198:	18800015 	stw	r2,0(r3)
#endif
}
 100919c:	e037883a 	mov	sp,fp
 10091a0:	dfc00117 	ldw	ra,4(sp)
 10091a4:	df000017 	ldw	fp,0(sp)
 10091a8:	dec00204 	addi	sp,sp,8
 10091ac:	f800283a 	ret

010091b0 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
 10091b0:	defff904 	addi	sp,sp,-28
 10091b4:	df000615 	stw	fp,24(sp)
 10091b8:	df000604 	addi	fp,sp,24
 10091bc:	e13ffe15 	stw	r4,-8(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 10091c0:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 10091c4:	e0bffe17 	ldw	r2,-8(fp)
 10091c8:	1004c03a 	cmpne	r2,r2,zero
 10091cc:	1000021e 	bne	r2,zero,10091d8 <OSSemAccept+0x28>
        return (0);
 10091d0:	e03fff15 	stw	zero,-4(fp)
 10091d4:	00002106 	br	100925c <OSSemAccept+0xac>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 10091d8:	e0bffe17 	ldw	r2,-8(fp)
 10091dc:	10800003 	ldbu	r2,0(r2)
 10091e0:	10803fcc 	andi	r2,r2,255
 10091e4:	108000e0 	cmpeqi	r2,r2,3
 10091e8:	1000021e 	bne	r2,zero,10091f4 <OSSemAccept+0x44>
        return (0);
 10091ec:	e03fff15 	stw	zero,-4(fp)
 10091f0:	00001a06 	br	100925c <OSSemAccept+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10091f4:	0005303a 	rdctl	r2,status
 10091f8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10091fc:	e0fffb17 	ldw	r3,-20(fp)
 1009200:	00bfff84 	movi	r2,-2
 1009204:	1884703a 	and	r2,r3,r2
 1009208:	1001703a 	wrctl	status,r2
  
  return context;
 100920c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 1009210:	e0bffc15 	stw	r2,-16(fp)
    cnt = pevent->OSEventCnt;
 1009214:	e0bffe17 	ldw	r2,-8(fp)
 1009218:	1080020b 	ldhu	r2,8(r2)
 100921c:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
 1009220:	e0bffd0b 	ldhu	r2,-12(fp)
 1009224:	1005003a 	cmpeq	r2,r2,zero
 1009228:	1000061e 	bne	r2,zero,1009244 <OSSemAccept+0x94>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
 100922c:	e0bffe17 	ldw	r2,-8(fp)
 1009230:	1080020b 	ldhu	r2,8(r2)
 1009234:	10bfffc4 	addi	r2,r2,-1
 1009238:	1007883a 	mov	r3,r2
 100923c:	e0bffe17 	ldw	r2,-8(fp)
 1009240:	10c0020d 	sth	r3,8(r2)
 1009244:	e0bffc17 	ldw	r2,-16(fp)
 1009248:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100924c:	e0bffa17 	ldw	r2,-24(fp)
 1009250:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
 1009254:	e0bffd0b 	ldhu	r2,-12(fp)
 1009258:	e0bfff15 	stw	r2,-4(fp)
 100925c:	e0bfff17 	ldw	r2,-4(fp)
}
 1009260:	e037883a 	mov	sp,fp
 1009264:	df000017 	ldw	fp,0(sp)
 1009268:	dec00104 	addi	sp,sp,4
 100926c:	f800283a 	ret

01009270 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
 1009270:	defff804 	addi	sp,sp,-32
 1009274:	dfc00715 	stw	ra,28(sp)
 1009278:	df000615 	stw	fp,24(sp)
 100927c:	df000604 	addi	fp,sp,24
 1009280:	e13ffe0d 	sth	r4,-8(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 1009284:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 1009288:	00804074 	movhi	r2,257
 100928c:	108eb804 	addi	r2,r2,15072
 1009290:	10800003 	ldbu	r2,0(r2)
 1009294:	10803fcc 	andi	r2,r2,255
 1009298:	1005003a 	cmpeq	r2,r2,zero
 100929c:	1000021e 	bne	r2,zero,10092a8 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
 10092a0:	e03fff15 	stw	zero,-4(fp)
 10092a4:	00003106 	br	100936c <OSSemCreate+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10092a8:	0005303a 	rdctl	r2,status
 10092ac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10092b0:	e0fffb17 	ldw	r3,-20(fp)
 10092b4:	00bfff84 	movi	r2,-2
 10092b8:	1884703a 	and	r2,r3,r2
 10092bc:	1001703a 	wrctl	status,r2
  
  return context;
 10092c0:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 10092c4:	e0bffc15 	stw	r2,-16(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
 10092c8:	00804074 	movhi	r2,257
 10092cc:	108eb704 	addi	r2,r2,15068
 10092d0:	10800017 	ldw	r2,0(r2)
 10092d4:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
 10092d8:	00804074 	movhi	r2,257
 10092dc:	108eb704 	addi	r2,r2,15068
 10092e0:	10800017 	ldw	r2,0(r2)
 10092e4:	1005003a 	cmpeq	r2,r2,zero
 10092e8:	1000081e 	bne	r2,zero,100930c <OSSemCreate+0x9c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 10092ec:	00804074 	movhi	r2,257
 10092f0:	108eb704 	addi	r2,r2,15068
 10092f4:	10800017 	ldw	r2,0(r2)
 10092f8:	10800117 	ldw	r2,4(r2)
 10092fc:	1007883a 	mov	r3,r2
 1009300:	00804074 	movhi	r2,257
 1009304:	108eb704 	addi	r2,r2,15068
 1009308:	10c00015 	stw	r3,0(r2)
 100930c:	e0bffc17 	ldw	r2,-16(fp)
 1009310:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1009314:	e0bffa17 	ldw	r2,-24(fp)
 1009318:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
 100931c:	e0bffd17 	ldw	r2,-12(fp)
 1009320:	1005003a 	cmpeq	r2,r2,zero
 1009324:	10000f1e 	bne	r2,zero,1009364 <OSSemCreate+0xf4>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
 1009328:	e0fffd17 	ldw	r3,-12(fp)
 100932c:	008000c4 	movi	r2,3
 1009330:	18800005 	stb	r2,0(r3)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
 1009334:	e0fffd17 	ldw	r3,-12(fp)
 1009338:	e0bffe0b 	ldhu	r2,-8(fp)
 100933c:	1880020d 	sth	r2,8(r3)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
 1009340:	e0bffd17 	ldw	r2,-12(fp)
 1009344:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
 1009348:	e0fffd17 	ldw	r3,-12(fp)
 100934c:	00800fc4 	movi	r2,63
 1009350:	18800385 	stb	r2,14(r3)
        pevent->OSEventName[1] = OS_ASCII_NUL;
 1009354:	e0bffd17 	ldw	r2,-12(fp)
 1009358:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
 100935c:	e13ffd17 	ldw	r4,-12(fp)
 1009360:	10050340 	call	1005034 <OS_EventWaitListInit>
    }
    return (pevent);
 1009364:	e0bffd17 	ldw	r2,-12(fp)
 1009368:	e0bfff15 	stw	r2,-4(fp)
 100936c:	e0bfff17 	ldw	r2,-4(fp)
}
 1009370:	e037883a 	mov	sp,fp
 1009374:	dfc00117 	ldw	ra,4(sp)
 1009378:	df000017 	ldw	fp,0(sp)
 100937c:	dec00204 	addi	sp,sp,8
 1009380:	f800283a 	ret

01009384 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 1009384:	defff104 	addi	sp,sp,-60
 1009388:	dfc00e15 	stw	ra,56(sp)
 100938c:	df000d15 	stw	fp,52(sp)
 1009390:	df000d04 	addi	fp,sp,52
 1009394:	e13ffb15 	stw	r4,-20(fp)
 1009398:	e1bffd15 	stw	r6,-12(fp)
 100939c:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 10093a0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 10093a4:	e0bffd17 	ldw	r2,-12(fp)
 10093a8:	1004c03a 	cmpne	r2,r2,zero
 10093ac:	1000031e 	bne	r2,zero,10093bc <OSSemDel+0x38>
        return (pevent);
 10093b0:	e0bffb17 	ldw	r2,-20(fp)
 10093b4:	e0bfff15 	stw	r2,-4(fp)
 10093b8:	00009406 	br	100960c <OSSemDel+0x288>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 10093bc:	e0bffb17 	ldw	r2,-20(fp)
 10093c0:	1004c03a 	cmpne	r2,r2,zero
 10093c4:	1000061e 	bne	r2,zero,10093e0 <OSSemDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
 10093c8:	e0fffd17 	ldw	r3,-12(fp)
 10093cc:	00800104 	movi	r2,4
 10093d0:	18800005 	stb	r2,0(r3)
        return (pevent);
 10093d4:	e0fffb17 	ldw	r3,-20(fp)
 10093d8:	e0ffff15 	stw	r3,-4(fp)
 10093dc:	00008b06 	br	100960c <OSSemDel+0x288>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 10093e0:	e0bffb17 	ldw	r2,-20(fp)
 10093e4:	10800003 	ldbu	r2,0(r2)
 10093e8:	10803fcc 	andi	r2,r2,255
 10093ec:	108000e0 	cmpeqi	r2,r2,3
 10093f0:	1000061e 	bne	r2,zero,100940c <OSSemDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
 10093f4:	e0fffd17 	ldw	r3,-12(fp)
 10093f8:	00800044 	movi	r2,1
 10093fc:	18800005 	stb	r2,0(r3)
        return (pevent);
 1009400:	e0bffb17 	ldw	r2,-20(fp)
 1009404:	e0bfff15 	stw	r2,-4(fp)
 1009408:	00008006 	br	100960c <OSSemDel+0x288>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 100940c:	00804074 	movhi	r2,257
 1009410:	108eb804 	addi	r2,r2,15072
 1009414:	10800003 	ldbu	r2,0(r2)
 1009418:	10803fcc 	andi	r2,r2,255
 100941c:	1005003a 	cmpeq	r2,r2,zero
 1009420:	1000061e 	bne	r2,zero,100943c <OSSemDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
 1009424:	e0fffd17 	ldw	r3,-12(fp)
 1009428:	008003c4 	movi	r2,15
 100942c:	18800005 	stb	r2,0(r3)
        return (pevent);
 1009430:	e0fffb17 	ldw	r3,-20(fp)
 1009434:	e0ffff15 	stw	r3,-4(fp)
 1009438:	00007406 	br	100960c <OSSemDel+0x288>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100943c:	0005303a 	rdctl	r2,status
 1009440:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1009444:	e0fff717 	ldw	r3,-36(fp)
 1009448:	00bfff84 	movi	r2,-2
 100944c:	1884703a 	and	r2,r3,r2
 1009450:	1001703a 	wrctl	status,r2
  
  return context;
 1009454:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 1009458:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
 100945c:	e0bffb17 	ldw	r2,-20(fp)
 1009460:	10800283 	ldbu	r2,10(r2)
 1009464:	10803fcc 	andi	r2,r2,255
 1009468:	1005003a 	cmpeq	r2,r2,zero
 100946c:	1000031e 	bne	r2,zero,100947c <OSSemDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 1009470:	00800044 	movi	r2,1
 1009474:	e0bffa05 	stb	r2,-24(fp)
 1009478:	00000106 	br	1009480 <OSSemDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 100947c:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
 1009480:	e0bffc03 	ldbu	r2,-16(fp)
 1009484:	e0bffe15 	stw	r2,-8(fp)
 1009488:	e0fffe17 	ldw	r3,-8(fp)
 100948c:	1805003a 	cmpeq	r2,r3,zero
 1009490:	1000041e 	bne	r2,zero,10094a4 <OSSemDel+0x120>
 1009494:	e0fffe17 	ldw	r3,-8(fp)
 1009498:	18800060 	cmpeqi	r2,r3,1
 100949c:	10002d1e 	bne	r2,zero,1009554 <OSSemDel+0x1d0>
 10094a0:	00004f06 	br	10095e0 <OSSemDel+0x25c>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
 10094a4:	e0bffa03 	ldbu	r2,-24(fp)
 10094a8:	1004c03a 	cmpne	r2,r2,zero
 10094ac:	10001a1e 	bne	r2,zero,1009518 <OSSemDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 10094b0:	e0fffb17 	ldw	r3,-20(fp)
 10094b4:	00800fc4 	movi	r2,63
 10094b8:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 10094bc:	e0bffb17 	ldw	r2,-20(fp)
 10094c0:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 10094c4:	e0bffb17 	ldw	r2,-20(fp)
 10094c8:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 10094cc:	00804074 	movhi	r2,257
 10094d0:	108eb704 	addi	r2,r2,15068
 10094d4:	10c00017 	ldw	r3,0(r2)
 10094d8:	e0bffb17 	ldw	r2,-20(fp)
 10094dc:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 10094e0:	e0bffb17 	ldw	r2,-20(fp)
 10094e4:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 10094e8:	00c04074 	movhi	r3,257
 10094ec:	18ceb704 	addi	r3,r3,15068
 10094f0:	e0bffb17 	ldw	r2,-20(fp)
 10094f4:	18800015 	stw	r2,0(r3)
 10094f8:	e0bff817 	ldw	r2,-32(fp)
 10094fc:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1009500:	e0bff617 	ldw	r2,-40(fp)
 1009504:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 1009508:	e0bffd17 	ldw	r2,-12(fp)
 100950c:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
 1009510:	e03ff915 	stw	zero,-28(fp)
 1009514:	00003b06 	br	1009604 <OSSemDel+0x280>
 1009518:	e0bff817 	ldw	r2,-32(fp)
 100951c:	e0bff515 	stw	r2,-44(fp)
 1009520:	e0bff517 	ldw	r2,-44(fp)
 1009524:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 1009528:	e0fffd17 	ldw	r3,-12(fp)
 100952c:	00801244 	movi	r2,73
 1009530:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
 1009534:	e0bffb17 	ldw	r2,-20(fp)
 1009538:	e0bff915 	stw	r2,-28(fp)
             }
             break;
 100953c:	00003106 	br	1009604 <OSSemDel+0x280>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 1009540:	e13ffb17 	ldw	r4,-20(fp)
 1009544:	000b883a 	mov	r5,zero
 1009548:	01800044 	movi	r6,1
 100954c:	000f883a 	mov	r7,zero
 1009550:	1004a800 	call	1004a80 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
 1009554:	e0bffb17 	ldw	r2,-20(fp)
 1009558:	10800283 	ldbu	r2,10(r2)
 100955c:	10803fcc 	andi	r2,r2,255
 1009560:	1004c03a 	cmpne	r2,r2,zero
 1009564:	103ff61e 	bne	r2,zero,1009540 <OSSemDel+0x1bc>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 1009568:	e0fffb17 	ldw	r3,-20(fp)
 100956c:	00800fc4 	movi	r2,63
 1009570:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 1009574:	e0bffb17 	ldw	r2,-20(fp)
 1009578:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 100957c:	e0bffb17 	ldw	r2,-20(fp)
 1009580:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 1009584:	00804074 	movhi	r2,257
 1009588:	108eb704 	addi	r2,r2,15068
 100958c:	10c00017 	ldw	r3,0(r2)
 1009590:	e0bffb17 	ldw	r2,-20(fp)
 1009594:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 1009598:	e0bffb17 	ldw	r2,-20(fp)
 100959c:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 10095a0:	00c04074 	movhi	r3,257
 10095a4:	18ceb704 	addi	r3,r3,15068
 10095a8:	e0bffb17 	ldw	r2,-20(fp)
 10095ac:	18800015 	stw	r2,0(r3)
 10095b0:	e0bff817 	ldw	r2,-32(fp)
 10095b4:	e0bff415 	stw	r2,-48(fp)
 10095b8:	e0bff417 	ldw	r2,-48(fp)
 10095bc:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 10095c0:	e0bffa03 	ldbu	r2,-24(fp)
 10095c4:	10800058 	cmpnei	r2,r2,1
 10095c8:	1000011e 	bne	r2,zero,10095d0 <OSSemDel+0x24c>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 10095cc:	10054c00 	call	10054c0 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 10095d0:	e0bffd17 	ldw	r2,-12(fp)
 10095d4:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
 10095d8:	e03ff915 	stw	zero,-28(fp)
             break;
 10095dc:	00000906 	br	1009604 <OSSemDel+0x280>
 10095e0:	e0bff817 	ldw	r2,-32(fp)
 10095e4:	e0bff315 	stw	r2,-52(fp)
 10095e8:	e0bff317 	ldw	r2,-52(fp)
 10095ec:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 10095f0:	e0fffd17 	ldw	r3,-12(fp)
 10095f4:	008001c4 	movi	r2,7
 10095f8:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
 10095fc:	e0bffb17 	ldw	r2,-20(fp)
 1009600:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
 1009604:	e0bff917 	ldw	r2,-28(fp)
 1009608:	e0bfff15 	stw	r2,-4(fp)
 100960c:	e0bfff17 	ldw	r2,-4(fp)
}
 1009610:	e037883a 	mov	sp,fp
 1009614:	dfc00117 	ldw	ra,4(sp)
 1009618:	df000017 	ldw	fp,0(sp)
 100961c:	dec00204 	addi	sp,sp,8
 1009620:	f800283a 	ret

01009624 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 1009624:	defff404 	addi	sp,sp,-48
 1009628:	dfc00b15 	stw	ra,44(sp)
 100962c:	df000a15 	stw	fp,40(sp)
 1009630:	df000a04 	addi	fp,sp,40
 1009634:	e13ffc15 	stw	r4,-16(fp)
 1009638:	e1bffe15 	stw	r6,-8(fp)
 100963c:	e17ffd0d 	sth	r5,-12(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 1009640:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 1009644:	e0bffe17 	ldw	r2,-8(fp)
 1009648:	1005003a 	cmpeq	r2,r2,zero
 100964c:	10008f1e 	bne	r2,zero,100988c <OSSemPend+0x268>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 1009650:	e0bffc17 	ldw	r2,-16(fp)
 1009654:	1004c03a 	cmpne	r2,r2,zero
 1009658:	1000041e 	bne	r2,zero,100966c <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
 100965c:	e0fffe17 	ldw	r3,-8(fp)
 1009660:	00800104 	movi	r2,4
 1009664:	18800005 	stb	r2,0(r3)
        return;
 1009668:	00008806 	br	100988c <OSSemPend+0x268>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 100966c:	e0bffc17 	ldw	r2,-16(fp)
 1009670:	10800003 	ldbu	r2,0(r2)
 1009674:	10803fcc 	andi	r2,r2,255
 1009678:	108000e0 	cmpeqi	r2,r2,3
 100967c:	1000041e 	bne	r2,zero,1009690 <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
 1009680:	e0fffe17 	ldw	r3,-8(fp)
 1009684:	00800044 	movi	r2,1
 1009688:	18800005 	stb	r2,0(r3)
        return;
 100968c:	00007f06 	br	100988c <OSSemPend+0x268>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
 1009690:	00804074 	movhi	r2,257
 1009694:	108eb804 	addi	r2,r2,15072
 1009698:	10800003 	ldbu	r2,0(r2)
 100969c:	10803fcc 	andi	r2,r2,255
 10096a0:	1005003a 	cmpeq	r2,r2,zero
 10096a4:	1000041e 	bne	r2,zero,10096b8 <OSSemPend+0x94>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 10096a8:	e0fffe17 	ldw	r3,-8(fp)
 10096ac:	00800084 	movi	r2,2
 10096b0:	18800005 	stb	r2,0(r3)
        return;
 10096b4:	00007506 	br	100988c <OSSemPend+0x268>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
 10096b8:	00804074 	movhi	r2,257
 10096bc:	108eaa04 	addi	r2,r2,15016
 10096c0:	10800003 	ldbu	r2,0(r2)
 10096c4:	10803fcc 	andi	r2,r2,255
 10096c8:	1005003a 	cmpeq	r2,r2,zero
 10096cc:	1000041e 	bne	r2,zero,10096e0 <OSSemPend+0xbc>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 10096d0:	e0fffe17 	ldw	r3,-8(fp)
 10096d4:	00800344 	movi	r2,13
 10096d8:	18800005 	stb	r2,0(r3)
        return;
 10096dc:	00006b06 	br	100988c <OSSemPend+0x268>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10096e0:	0005303a 	rdctl	r2,status
 10096e4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10096e8:	e0fffa17 	ldw	r3,-24(fp)
 10096ec:	00bfff84 	movi	r2,-2
 10096f0:	1884703a 	and	r2,r3,r2
 10096f4:	1001703a 	wrctl	status,r2
  
  return context;
 10096f8:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 10096fc:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
 1009700:	e0bffc17 	ldw	r2,-16(fp)
 1009704:	1080020b 	ldhu	r2,8(r2)
 1009708:	10bfffcc 	andi	r2,r2,65535
 100970c:	1005003a 	cmpeq	r2,r2,zero
 1009710:	10000d1e 	bne	r2,zero,1009748 <OSSemPend+0x124>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
 1009714:	e0bffc17 	ldw	r2,-16(fp)
 1009718:	1080020b 	ldhu	r2,8(r2)
 100971c:	10bfffc4 	addi	r2,r2,-1
 1009720:	1007883a 	mov	r3,r2
 1009724:	e0bffc17 	ldw	r2,-16(fp)
 1009728:	10c0020d 	sth	r3,8(r2)
 100972c:	e0bffb17 	ldw	r2,-20(fp)
 1009730:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1009734:	e0bff917 	ldw	r2,-28(fp)
 1009738:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 100973c:	e0bffe17 	ldw	r2,-8(fp)
 1009740:	10000005 	stb	zero,0(r2)
        return;
 1009744:	00005106 	br	100988c <OSSemPend+0x268>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
 1009748:	00804074 	movhi	r2,257
 100974c:	108eb904 	addi	r2,r2,15076
 1009750:	10c00017 	ldw	r3,0(r2)
 1009754:	00804074 	movhi	r2,257
 1009758:	108eb904 	addi	r2,r2,15076
 100975c:	10800017 	ldw	r2,0(r2)
 1009760:	10800c03 	ldbu	r2,48(r2)
 1009764:	10800054 	ori	r2,r2,1
 1009768:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 100976c:	00804074 	movhi	r2,257
 1009770:	108eb904 	addi	r2,r2,15076
 1009774:	10800017 	ldw	r2,0(r2)
 1009778:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
 100977c:	00804074 	movhi	r2,257
 1009780:	108eb904 	addi	r2,r2,15076
 1009784:	10c00017 	ldw	r3,0(r2)
 1009788:	e0bffd0b 	ldhu	r2,-12(fp)
 100978c:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 1009790:	e13ffc17 	ldw	r4,-16(fp)
 1009794:	1004c140 	call	1004c14 <OS_EventTaskWait>
 1009798:	e0bffb17 	ldw	r2,-20(fp)
 100979c:	e0bff815 	stw	r2,-32(fp)
 10097a0:	e0bff817 	ldw	r2,-32(fp)
 10097a4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
 10097a8:	10054c00 	call	10054c0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10097ac:	0005303a 	rdctl	r2,status
 10097b0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10097b4:	e0fff717 	ldw	r3,-36(fp)
 10097b8:	00bfff84 	movi	r2,-2
 10097bc:	1884703a 	and	r2,r3,r2
 10097c0:	1001703a 	wrctl	status,r2
  
  return context;
 10097c4:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
 10097c8:	e0bffb15 	stw	r2,-20(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 10097cc:	00804074 	movhi	r2,257
 10097d0:	108eb904 	addi	r2,r2,15076
 10097d4:	10800017 	ldw	r2,0(r2)
 10097d8:	10800c43 	ldbu	r2,49(r2)
 10097dc:	10803fcc 	andi	r2,r2,255
 10097e0:	e0bfff15 	stw	r2,-4(fp)
 10097e4:	e0ffff17 	ldw	r3,-4(fp)
 10097e8:	1805003a 	cmpeq	r2,r3,zero
 10097ec:	1000041e 	bne	r2,zero,1009800 <OSSemPend+0x1dc>
 10097f0:	e0ffff17 	ldw	r3,-4(fp)
 10097f4:	188000a0 	cmpeqi	r2,r3,2
 10097f8:	1000041e 	bne	r2,zero,100980c <OSSemPend+0x1e8>
 10097fc:	00000706 	br	100981c <OSSemPend+0x1f8>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
 1009800:	e0bffe17 	ldw	r2,-8(fp)
 1009804:	10000005 	stb	zero,0(r2)
             break;
 1009808:	00000c06 	br	100983c <OSSemPend+0x218>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 100980c:	e0fffe17 	ldw	r3,-8(fp)
 1009810:	00800384 	movi	r2,14
 1009814:	18800005 	stb	r2,0(r3)
             break;
 1009818:	00000806 	br	100983c <OSSemPend+0x218>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
 100981c:	00804074 	movhi	r2,257
 1009820:	108eb904 	addi	r2,r2,15076
 1009824:	11000017 	ldw	r4,0(r2)
 1009828:	e17ffc17 	ldw	r5,-16(fp)
 100982c:	1004e780 	call	1004e78 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 1009830:	e0fffe17 	ldw	r3,-8(fp)
 1009834:	00800284 	movi	r2,10
 1009838:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 100983c:	00804074 	movhi	r2,257
 1009840:	108eb904 	addi	r2,r2,15076
 1009844:	10800017 	ldw	r2,0(r2)
 1009848:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 100984c:	00804074 	movhi	r2,257
 1009850:	108eb904 	addi	r2,r2,15076
 1009854:	10800017 	ldw	r2,0(r2)
 1009858:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 100985c:	00804074 	movhi	r2,257
 1009860:	108eb904 	addi	r2,r2,15076
 1009864:	10800017 	ldw	r2,0(r2)
 1009868:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 100986c:	00804074 	movhi	r2,257
 1009870:	108eb904 	addi	r2,r2,15076
 1009874:	10800017 	ldw	r2,0(r2)
 1009878:	10000815 	stw	zero,32(r2)
 100987c:	e0bffb17 	ldw	r2,-20(fp)
 1009880:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1009884:	e0bff617 	ldw	r2,-40(fp)
 1009888:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
 100988c:	e037883a 	mov	sp,fp
 1009890:	dfc00117 	ldw	ra,4(sp)
 1009894:	df000017 	ldw	fp,0(sp)
 1009898:	dec00204 	addi	sp,sp,8
 100989c:	f800283a 	ret

010098a0 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 10098a0:	defff504 	addi	sp,sp,-44
 10098a4:	dfc00a15 	stw	ra,40(sp)
 10098a8:	df000915 	stw	fp,36(sp)
 10098ac:	df000904 	addi	fp,sp,36
 10098b0:	e13ffc15 	stw	r4,-16(fp)
 10098b4:	e1bffe15 	stw	r6,-8(fp)
 10098b8:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 10098bc:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 10098c0:	e0bffe17 	ldw	r2,-8(fp)
 10098c4:	1004c03a 	cmpne	r2,r2,zero
 10098c8:	1000021e 	bne	r2,zero,10098d4 <OSSemPendAbort+0x34>
        return (0);
 10098cc:	e03fff15 	stw	zero,-4(fp)
 10098d0:	00004c06 	br	1009a04 <OSSemPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 10098d4:	e0bffc17 	ldw	r2,-16(fp)
 10098d8:	1004c03a 	cmpne	r2,r2,zero
 10098dc:	1000051e 	bne	r2,zero,10098f4 <OSSemPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
 10098e0:	e0fffe17 	ldw	r3,-8(fp)
 10098e4:	00800104 	movi	r2,4
 10098e8:	18800005 	stb	r2,0(r3)
        return (0);
 10098ec:	e03fff15 	stw	zero,-4(fp)
 10098f0:	00004406 	br	1009a04 <OSSemPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 10098f4:	e0bffc17 	ldw	r2,-16(fp)
 10098f8:	10800003 	ldbu	r2,0(r2)
 10098fc:	10803fcc 	andi	r2,r2,255
 1009900:	108000e0 	cmpeqi	r2,r2,3
 1009904:	1000051e 	bne	r2,zero,100991c <OSSemPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 1009908:	e0fffe17 	ldw	r3,-8(fp)
 100990c:	00800044 	movi	r2,1
 1009910:	18800005 	stb	r2,0(r3)
        return (0);
 1009914:	e03fff15 	stw	zero,-4(fp)
 1009918:	00003a06 	br	1009a04 <OSSemPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100991c:	0005303a 	rdctl	r2,status
 1009920:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1009924:	e0fff917 	ldw	r3,-28(fp)
 1009928:	00bfff84 	movi	r2,-2
 100992c:	1884703a 	and	r2,r3,r2
 1009930:	1001703a 	wrctl	status,r2
  
  return context;
 1009934:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 1009938:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
 100993c:	e0bffc17 	ldw	r2,-16(fp)
 1009940:	10800283 	ldbu	r2,10(r2)
 1009944:	10803fcc 	andi	r2,r2,255
 1009948:	1005003a 	cmpeq	r2,r2,zero
 100994c:	1000261e 	bne	r2,zero,10099e8 <OSSemPendAbort+0x148>
        nbr_tasks = 0;
 1009950:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
 1009954:	e0bffd03 	ldbu	r2,-12(fp)
 1009958:	10800060 	cmpeqi	r2,r2,1
 100995c:	1000091e 	bne	r2,zero,1009984 <OSSemPendAbort+0xe4>
 1009960:	00000e06 	br	100999c <OSSemPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 1009964:	e13ffc17 	ldw	r4,-16(fp)
 1009968:	000b883a 	mov	r5,zero
 100996c:	01800044 	movi	r6,1
 1009970:	01c00084 	movi	r7,2
 1009974:	1004a800 	call	1004a80 <OS_EventTaskRdy>
                     nbr_tasks++;
 1009978:	e0bffb03 	ldbu	r2,-20(fp)
 100997c:	10800044 	addi	r2,r2,1
 1009980:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
 1009984:	e0bffc17 	ldw	r2,-16(fp)
 1009988:	10800283 	ldbu	r2,10(r2)
 100998c:	10803fcc 	andi	r2,r2,255
 1009990:	1004c03a 	cmpne	r2,r2,zero
 1009994:	103ff31e 	bne	r2,zero,1009964 <OSSemPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 1009998:	00000806 	br	10099bc <OSSemPendAbort+0x11c>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 100999c:	e13ffc17 	ldw	r4,-16(fp)
 10099a0:	000b883a 	mov	r5,zero
 10099a4:	01800044 	movi	r6,1
 10099a8:	01c00084 	movi	r7,2
 10099ac:	1004a800 	call	1004a80 <OS_EventTaskRdy>
                 nbr_tasks++;
 10099b0:	e0bffb03 	ldbu	r2,-20(fp)
 10099b4:	10800044 	addi	r2,r2,1
 10099b8:	e0bffb05 	stb	r2,-20(fp)
 10099bc:	e0bffa17 	ldw	r2,-24(fp)
 10099c0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10099c4:	e0bff817 	ldw	r2,-32(fp)
 10099c8:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 10099cc:	10054c00 	call	10054c0 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 10099d0:	e0fffe17 	ldw	r3,-8(fp)
 10099d4:	00800384 	movi	r2,14
 10099d8:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
 10099dc:	e0bffb03 	ldbu	r2,-20(fp)
 10099e0:	e0bfff15 	stw	r2,-4(fp)
 10099e4:	00000706 	br	1009a04 <OSSemPendAbort+0x164>
 10099e8:	e0bffa17 	ldw	r2,-24(fp)
 10099ec:	e0bff715 	stw	r2,-36(fp)
 10099f0:	e0bff717 	ldw	r2,-36(fp)
 10099f4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 10099f8:	e0bffe17 	ldw	r2,-8(fp)
 10099fc:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
 1009a00:	e03fff15 	stw	zero,-4(fp)
 1009a04:	e0bfff17 	ldw	r2,-4(fp)
}
 1009a08:	e037883a 	mov	sp,fp
 1009a0c:	dfc00117 	ldw	ra,4(sp)
 1009a10:	df000017 	ldw	fp,0(sp)
 1009a14:	dec00204 	addi	sp,sp,8
 1009a18:	f800283a 	ret

01009a1c <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
 1009a1c:	defff704 	addi	sp,sp,-36
 1009a20:	dfc00815 	stw	ra,32(sp)
 1009a24:	df000715 	stw	fp,28(sp)
 1009a28:	df000704 	addi	fp,sp,28
 1009a2c:	e13ffe15 	stw	r4,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 1009a30:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 1009a34:	e0bffe17 	ldw	r2,-8(fp)
 1009a38:	1004c03a 	cmpne	r2,r2,zero
 1009a3c:	1000031e 	bne	r2,zero,1009a4c <OSSemPost+0x30>
        return (OS_ERR_PEVENT_NULL);
 1009a40:	00800104 	movi	r2,4
 1009a44:	e0bfff15 	stw	r2,-4(fp)
 1009a48:	00003806 	br	1009b2c <OSSemPost+0x110>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 1009a4c:	e0bffe17 	ldw	r2,-8(fp)
 1009a50:	10800003 	ldbu	r2,0(r2)
 1009a54:	10803fcc 	andi	r2,r2,255
 1009a58:	108000e0 	cmpeqi	r2,r2,3
 1009a5c:	1000031e 	bne	r2,zero,1009a6c <OSSemPost+0x50>
        return (OS_ERR_EVENT_TYPE);
 1009a60:	00800044 	movi	r2,1
 1009a64:	e0bfff15 	stw	r2,-4(fp)
 1009a68:	00003006 	br	1009b2c <OSSemPost+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1009a6c:	0005303a 	rdctl	r2,status
 1009a70:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1009a74:	e0fffc17 	ldw	r3,-16(fp)
 1009a78:	00bfff84 	movi	r2,-2
 1009a7c:	1884703a 	and	r2,r3,r2
 1009a80:	1001703a 	wrctl	status,r2
  
  return context;
 1009a84:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 1009a88:	e0bffd15 	stw	r2,-12(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
 1009a8c:	e0bffe17 	ldw	r2,-8(fp)
 1009a90:	10800283 	ldbu	r2,10(r2)
 1009a94:	10803fcc 	andi	r2,r2,255
 1009a98:	1005003a 	cmpeq	r2,r2,zero
 1009a9c:	10000c1e 	bne	r2,zero,1009ad0 <OSSemPost+0xb4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 1009aa0:	e13ffe17 	ldw	r4,-8(fp)
 1009aa4:	000b883a 	mov	r5,zero
 1009aa8:	01800044 	movi	r6,1
 1009aac:	000f883a 	mov	r7,zero
 1009ab0:	1004a800 	call	1004a80 <OS_EventTaskRdy>
 1009ab4:	e0bffd17 	ldw	r2,-12(fp)
 1009ab8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1009abc:	e0bffb17 	ldw	r2,-20(fp)
 1009ac0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 1009ac4:	10054c00 	call	10054c0 <OS_Sched>
        return (OS_ERR_NONE);
 1009ac8:	e03fff15 	stw	zero,-4(fp)
 1009acc:	00001706 	br	1009b2c <OSSemPost+0x110>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
 1009ad0:	e0bffe17 	ldw	r2,-8(fp)
 1009ad4:	1080020b 	ldhu	r2,8(r2)
 1009ad8:	10ffffcc 	andi	r3,r2,65535
 1009adc:	00bfffd4 	movui	r2,65535
 1009ae0:	18800c26 	beq	r3,r2,1009b14 <OSSemPost+0xf8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
 1009ae4:	e0bffe17 	ldw	r2,-8(fp)
 1009ae8:	1080020b 	ldhu	r2,8(r2)
 1009aec:	10800044 	addi	r2,r2,1
 1009af0:	1007883a 	mov	r3,r2
 1009af4:	e0bffe17 	ldw	r2,-8(fp)
 1009af8:	10c0020d 	sth	r3,8(r2)
 1009afc:	e0bffd17 	ldw	r2,-12(fp)
 1009b00:	e0bffa15 	stw	r2,-24(fp)
 1009b04:	e0bffa17 	ldw	r2,-24(fp)
 1009b08:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 1009b0c:	e03fff15 	stw	zero,-4(fp)
 1009b10:	00000606 	br	1009b2c <OSSemPost+0x110>
 1009b14:	e0bffd17 	ldw	r2,-12(fp)
 1009b18:	e0bff915 	stw	r2,-28(fp)
 1009b1c:	e0bff917 	ldw	r2,-28(fp)
 1009b20:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
 1009b24:	00800c84 	movi	r2,50
 1009b28:	e0bfff15 	stw	r2,-4(fp)
 1009b2c:	e0bfff17 	ldw	r2,-4(fp)
}
 1009b30:	e037883a 	mov	sp,fp
 1009b34:	dfc00117 	ldw	ra,4(sp)
 1009b38:	df000017 	ldw	fp,0(sp)
 1009b3c:	dec00204 	addi	sp,sp,8
 1009b40:	f800283a 	ret

01009b44 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
 1009b44:	defff604 	addi	sp,sp,-40
 1009b48:	df000915 	stw	fp,36(sp)
 1009b4c:	df000904 	addi	fp,sp,36
 1009b50:	e13ffd15 	stw	r4,-12(fp)
 1009b54:	e17ffe15 	stw	r5,-8(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 1009b58:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 1009b5c:	e0bffd17 	ldw	r2,-12(fp)
 1009b60:	1004c03a 	cmpne	r2,r2,zero
 1009b64:	1000031e 	bne	r2,zero,1009b74 <OSSemQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
 1009b68:	00800104 	movi	r2,4
 1009b6c:	e0bfff15 	stw	r2,-4(fp)
 1009b70:	00003b06 	br	1009c60 <OSSemQuery+0x11c>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
 1009b74:	e0bffe17 	ldw	r2,-8(fp)
 1009b78:	1004c03a 	cmpne	r2,r2,zero
 1009b7c:	1000031e 	bne	r2,zero,1009b8c <OSSemQuery+0x48>
        return (OS_ERR_PDATA_NULL);
 1009b80:	00800244 	movi	r2,9
 1009b84:	e0bfff15 	stw	r2,-4(fp)
 1009b88:	00003506 	br	1009c60 <OSSemQuery+0x11c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 1009b8c:	e0bffd17 	ldw	r2,-12(fp)
 1009b90:	10800003 	ldbu	r2,0(r2)
 1009b94:	10803fcc 	andi	r2,r2,255
 1009b98:	108000e0 	cmpeqi	r2,r2,3
 1009b9c:	1000031e 	bne	r2,zero,1009bac <OSSemQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
 1009ba0:	00800044 	movi	r2,1
 1009ba4:	e0bfff15 	stw	r2,-4(fp)
 1009ba8:	00002d06 	br	1009c60 <OSSemQuery+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1009bac:	0005303a 	rdctl	r2,status
 1009bb0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1009bb4:	e0fff817 	ldw	r3,-32(fp)
 1009bb8:	00bfff84 	movi	r2,-2
 1009bbc:	1884703a 	and	r2,r3,r2
 1009bc0:	1001703a 	wrctl	status,r2
  
  return context;
 1009bc4:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
 1009bc8:	e0bff915 	stw	r2,-28(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
 1009bcc:	e0bffd17 	ldw	r2,-12(fp)
 1009bd0:	10c00283 	ldbu	r3,10(r2)
 1009bd4:	e0bffe17 	ldw	r2,-8(fp)
 1009bd8:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
 1009bdc:	e0bffd17 	ldw	r2,-12(fp)
 1009be0:	108002c4 	addi	r2,r2,11
 1009be4:	e0bffc15 	stw	r2,-16(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
 1009be8:	e0bffe17 	ldw	r2,-8(fp)
 1009bec:	10800084 	addi	r2,r2,2
 1009bf0:	e0bffb15 	stw	r2,-20(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 1009bf4:	e03ffa05 	stb	zero,-24(fp)
 1009bf8:	00000d06 	br	1009c30 <OSSemQuery+0xec>
        *pdest++ = *psrc++;
 1009bfc:	e0bffc17 	ldw	r2,-16(fp)
 1009c00:	10c00003 	ldbu	r3,0(r2)
 1009c04:	e0bffb17 	ldw	r2,-20(fp)
 1009c08:	10c00005 	stb	r3,0(r2)
 1009c0c:	e0bffb17 	ldw	r2,-20(fp)
 1009c10:	10800044 	addi	r2,r2,1
 1009c14:	e0bffb15 	stw	r2,-20(fp)
 1009c18:	e0bffc17 	ldw	r2,-16(fp)
 1009c1c:	10800044 	addi	r2,r2,1
 1009c20:	e0bffc15 	stw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 1009c24:	e0bffa03 	ldbu	r2,-24(fp)
 1009c28:	10800044 	addi	r2,r2,1
 1009c2c:	e0bffa05 	stb	r2,-24(fp)
 1009c30:	e0bffa03 	ldbu	r2,-24(fp)
 1009c34:	108000f0 	cmpltui	r2,r2,3
 1009c38:	103ff01e 	bne	r2,zero,1009bfc <OSSemQuery+0xb8>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
 1009c3c:	e0bffd17 	ldw	r2,-12(fp)
 1009c40:	10c0020b 	ldhu	r3,8(r2)
 1009c44:	e0bffe17 	ldw	r2,-8(fp)
 1009c48:	10c0000d 	sth	r3,0(r2)
 1009c4c:	e0bff917 	ldw	r2,-28(fp)
 1009c50:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1009c54:	e0bff717 	ldw	r2,-36(fp)
 1009c58:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 1009c5c:	e03fff15 	stw	zero,-4(fp)
 1009c60:	e0bfff17 	ldw	r2,-4(fp)
}
 1009c64:	e037883a 	mov	sp,fp
 1009c68:	df000017 	ldw	fp,0(sp)
 1009c6c:	dec00104 	addi	sp,sp,4
 1009c70:	f800283a 	ret

01009c74 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
 1009c74:	defff904 	addi	sp,sp,-28
 1009c78:	df000615 	stw	fp,24(sp)
 1009c7c:	df000604 	addi	fp,sp,24
 1009c80:	e13ffd15 	stw	r4,-12(fp)
 1009c84:	e1bfff15 	stw	r6,-4(fp)
 1009c88:	e17ffe0d 	sth	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 1009c8c:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 1009c90:	e0bfff17 	ldw	r2,-4(fp)
 1009c94:	1005003a 	cmpeq	r2,r2,zero
 1009c98:	1000331e 	bne	r2,zero,1009d68 <OSSemSet+0xf4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 1009c9c:	e0bffd17 	ldw	r2,-12(fp)
 1009ca0:	1004c03a 	cmpne	r2,r2,zero
 1009ca4:	1000041e 	bne	r2,zero,1009cb8 <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
 1009ca8:	e0ffff17 	ldw	r3,-4(fp)
 1009cac:	00800104 	movi	r2,4
 1009cb0:	18800005 	stb	r2,0(r3)
        return;
 1009cb4:	00002c06 	br	1009d68 <OSSemSet+0xf4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 1009cb8:	e0bffd17 	ldw	r2,-12(fp)
 1009cbc:	10800003 	ldbu	r2,0(r2)
 1009cc0:	10803fcc 	andi	r2,r2,255
 1009cc4:	108000e0 	cmpeqi	r2,r2,3
 1009cc8:	1000041e 	bne	r2,zero,1009cdc <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
 1009ccc:	e0ffff17 	ldw	r3,-4(fp)
 1009cd0:	00800044 	movi	r2,1
 1009cd4:	18800005 	stb	r2,0(r3)
        return;
 1009cd8:	00002306 	br	1009d68 <OSSemSet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1009cdc:	0005303a 	rdctl	r2,status
 1009ce0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1009ce4:	e0fffb17 	ldw	r3,-20(fp)
 1009ce8:	00bfff84 	movi	r2,-2
 1009cec:	1884703a 	and	r2,r3,r2
 1009cf0:	1001703a 	wrctl	status,r2
  
  return context;
 1009cf4:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 1009cf8:	e0bffc15 	stw	r2,-16(fp)
    *perr = OS_ERR_NONE;
 1009cfc:	e0bfff17 	ldw	r2,-4(fp)
 1009d00:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
 1009d04:	e0bffd17 	ldw	r2,-12(fp)
 1009d08:	1080020b 	ldhu	r2,8(r2)
 1009d0c:	10bfffcc 	andi	r2,r2,65535
 1009d10:	1005003a 	cmpeq	r2,r2,zero
 1009d14:	1000041e 	bne	r2,zero,1009d28 <OSSemSet+0xb4>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
 1009d18:	e0fffd17 	ldw	r3,-12(fp)
 1009d1c:	e0bffe0b 	ldhu	r2,-8(fp)
 1009d20:	1880020d 	sth	r2,8(r3)
 1009d24:	00000c06 	br	1009d58 <OSSemSet+0xe4>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
 1009d28:	e0bffd17 	ldw	r2,-12(fp)
 1009d2c:	10800283 	ldbu	r2,10(r2)
 1009d30:	10803fcc 	andi	r2,r2,255
 1009d34:	1004c03a 	cmpne	r2,r2,zero
 1009d38:	1000041e 	bne	r2,zero,1009d4c <OSSemSet+0xd8>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
 1009d3c:	e0fffd17 	ldw	r3,-12(fp)
 1009d40:	e0bffe0b 	ldhu	r2,-8(fp)
 1009d44:	1880020d 	sth	r2,8(r3)
 1009d48:	00000306 	br	1009d58 <OSSemSet+0xe4>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
 1009d4c:	e0ffff17 	ldw	r3,-4(fp)
 1009d50:	00801244 	movi	r2,73
 1009d54:	18800005 	stb	r2,0(r3)
 1009d58:	e0bffc17 	ldw	r2,-16(fp)
 1009d5c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1009d60:	e0bffa17 	ldw	r2,-24(fp)
 1009d64:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
 1009d68:	e037883a 	mov	sp,fp
 1009d6c:	df000017 	ldw	fp,0(sp)
 1009d70:	dec00104 	addi	sp,sp,4
 1009d74:	f800283a 	ret

01009d78 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
 1009d78:	defff004 	addi	sp,sp,-64
 1009d7c:	dfc00f15 	stw	ra,60(sp)
 1009d80:	df000e15 	stw	fp,56(sp)
 1009d84:	df000e04 	addi	fp,sp,56
 1009d88:	e13ffd05 	stb	r4,-12(fp)
 1009d8c:	e17ffe05 	stb	r5,-8(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
 1009d90:	e03ff715 	stw	zero,-36(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
 1009d94:	e0bffd03 	ldbu	r2,-12(fp)
 1009d98:	10800530 	cmpltui	r2,r2,20
 1009d9c:	1000061e 	bne	r2,zero,1009db8 <OSTaskChangePrio+0x40>
        if (oldprio != OS_PRIO_SELF) {
 1009da0:	e0bffd03 	ldbu	r2,-12(fp)
 1009da4:	10803fe0 	cmpeqi	r2,r2,255
 1009da8:	1000031e 	bne	r2,zero,1009db8 <OSTaskChangePrio+0x40>
            return (OS_ERR_PRIO_INVALID);
 1009dac:	00800a84 	movi	r2,42
 1009db0:	e0bfff15 	stw	r2,-4(fp)
 1009db4:	00014706 	br	100a2d4 <OSTaskChangePrio+0x55c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
 1009db8:	e0bffe03 	ldbu	r2,-8(fp)
 1009dbc:	10800530 	cmpltui	r2,r2,20
 1009dc0:	1000031e 	bne	r2,zero,1009dd0 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
 1009dc4:	00800a84 	movi	r2,42
 1009dc8:	e0bfff15 	stw	r2,-4(fp)
 1009dcc:	00014106 	br	100a2d4 <OSTaskChangePrio+0x55c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1009dd0:	0005303a 	rdctl	r2,status
 1009dd4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1009dd8:	e0fff617 	ldw	r3,-40(fp)
 1009ddc:	00bfff84 	movi	r2,-2
 1009de0:	1884703a 	and	r2,r3,r2
 1009de4:	1001703a 	wrctl	status,r2
  
  return context;
 1009de8:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 1009dec:	e0bff715 	stw	r2,-36(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
 1009df0:	e0bffe03 	ldbu	r2,-8(fp)
 1009df4:	00c040b4 	movhi	r3,258
 1009df8:	18eb3f04 	addi	r3,r3,-21252
 1009dfc:	1085883a 	add	r2,r2,r2
 1009e00:	1085883a 	add	r2,r2,r2
 1009e04:	10c5883a 	add	r2,r2,r3
 1009e08:	10800017 	ldw	r2,0(r2)
 1009e0c:	1005003a 	cmpeq	r2,r2,zero
 1009e10:	1000071e 	bne	r2,zero,1009e30 <OSTaskChangePrio+0xb8>
 1009e14:	e0bff717 	ldw	r2,-36(fp)
 1009e18:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1009e1c:	e0bff517 	ldw	r2,-44(fp)
 1009e20:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
 1009e24:	00800a04 	movi	r2,40
 1009e28:	e0bfff15 	stw	r2,-4(fp)
 1009e2c:	00012906 	br	100a2d4 <OSTaskChangePrio+0x55c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
 1009e30:	e0bffd03 	ldbu	r2,-12(fp)
 1009e34:	10803fd8 	cmpnei	r2,r2,255
 1009e38:	1000051e 	bne	r2,zero,1009e50 <OSTaskChangePrio+0xd8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
 1009e3c:	00804074 	movhi	r2,257
 1009e40:	108eb904 	addi	r2,r2,15076
 1009e44:	10800017 	ldw	r2,0(r2)
 1009e48:	10800c83 	ldbu	r2,50(r2)
 1009e4c:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
 1009e50:	e0bffd03 	ldbu	r2,-12(fp)
 1009e54:	00c040b4 	movhi	r3,258
 1009e58:	18eb3f04 	addi	r3,r3,-21252
 1009e5c:	1085883a 	add	r2,r2,r2
 1009e60:	1085883a 	add	r2,r2,r2
 1009e64:	10c5883a 	add	r2,r2,r3
 1009e68:	10800017 	ldw	r2,0(r2)
 1009e6c:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
 1009e70:	e0bffa17 	ldw	r2,-24(fp)
 1009e74:	1004c03a 	cmpne	r2,r2,zero
 1009e78:	1000071e 	bne	r2,zero,1009e98 <OSTaskChangePrio+0x120>
 1009e7c:	e0bff717 	ldw	r2,-36(fp)
 1009e80:	e0bff415 	stw	r2,-48(fp)
 1009e84:	e0bff417 	ldw	r2,-48(fp)
 1009e88:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
 1009e8c:	00800a44 	movi	r2,41
 1009e90:	e0bfff15 	stw	r2,-4(fp)
 1009e94:	00010f06 	br	100a2d4 <OSTaskChangePrio+0x55c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
 1009e98:	e0bffa17 	ldw	r2,-24(fp)
 1009e9c:	10800058 	cmpnei	r2,r2,1
 1009ea0:	1000071e 	bne	r2,zero,1009ec0 <OSTaskChangePrio+0x148>
 1009ea4:	e0bff717 	ldw	r2,-36(fp)
 1009ea8:	e0bff315 	stw	r2,-52(fp)
 1009eac:	e0bff317 	ldw	r2,-52(fp)
 1009eb0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
 1009eb4:	008010c4 	movi	r2,67
 1009eb8:	e0bfff15 	stw	r2,-4(fp)
 1009ebc:	00010506 	br	100a2d4 <OSTaskChangePrio+0x55c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
 1009ec0:	e0bffe03 	ldbu	r2,-8(fp)
 1009ec4:	1004d0fa 	srli	r2,r2,3
 1009ec8:	e0bff985 	stb	r2,-26(fp)
    x_new                 = (INT8U)(newprio & 0x07);
 1009ecc:	e0bffe03 	ldbu	r2,-8(fp)
 1009ed0:	108001cc 	andi	r2,r2,7
 1009ed4:	e0bff945 	stb	r2,-27(fp)
    bity_new              = (INT8U)(1 << y_new);
 1009ed8:	e0fff983 	ldbu	r3,-26(fp)
 1009edc:	00800044 	movi	r2,1
 1009ee0:	10c4983a 	sll	r2,r2,r3
 1009ee4:	e0bff8c5 	stb	r2,-29(fp)
    bitx_new              = (INT8U)(1 << x_new);
 1009ee8:	e0fff943 	ldbu	r3,-27(fp)
 1009eec:	00800044 	movi	r2,1
 1009ef0:	10c4983a 	sll	r2,r2,r3
 1009ef4:	e0bff885 	stb	r2,-30(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
 1009ef8:	e0bffd03 	ldbu	r2,-12(fp)
 1009efc:	00c040b4 	movhi	r3,258
 1009f00:	18eb3f04 	addi	r3,r3,-21252
 1009f04:	1085883a 	add	r2,r2,r2
 1009f08:	1085883a 	add	r2,r2,r2
 1009f0c:	10c5883a 	add	r2,r2,r3
 1009f10:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
 1009f14:	e0bffe03 	ldbu	r2,-8(fp)
 1009f18:	00c040b4 	movhi	r3,258
 1009f1c:	18eb3f04 	addi	r3,r3,-21252
 1009f20:	1085883a 	add	r2,r2,r2
 1009f24:	1085883a 	add	r2,r2,r2
 1009f28:	10c7883a 	add	r3,r2,r3
 1009f2c:	e0bffa17 	ldw	r2,-24(fp)
 1009f30:	18800015 	stw	r2,0(r3)
    y_old                 =  ptcb->OSTCBY;
 1009f34:	e0bffa17 	ldw	r2,-24(fp)
 1009f38:	10800d03 	ldbu	r2,52(r2)
 1009f3c:	e0bff905 	stb	r2,-28(fp)
    bity_old              =  ptcb->OSTCBBitY;
 1009f40:	e0bffa17 	ldw	r2,-24(fp)
 1009f44:	10800d83 	ldbu	r2,54(r2)
 1009f48:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
 1009f4c:	e0bffa17 	ldw	r2,-24(fp)
 1009f50:	10800d43 	ldbu	r2,53(r2)
 1009f54:	e0bff805 	stb	r2,-32(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
 1009f58:	e0fff903 	ldbu	r3,-28(fp)
 1009f5c:	00804074 	movhi	r2,257
 1009f60:	108eb644 	addi	r2,r2,15065
 1009f64:	10c5883a 	add	r2,r2,r3
 1009f68:	10c00003 	ldbu	r3,0(r2)
 1009f6c:	e0bff803 	ldbu	r2,-32(fp)
 1009f70:	1884703a 	and	r2,r3,r2
 1009f74:	10803fcc 	andi	r2,r2,255
 1009f78:	1005003a 	cmpeq	r2,r2,zero
 1009f7c:	1000381e 	bne	r2,zero,100a060 <OSTaskChangePrio+0x2e8>
         OSRdyTbl[y_old] &= ~bitx_old;
 1009f80:	e13ff903 	ldbu	r4,-28(fp)
 1009f84:	e0fff903 	ldbu	r3,-28(fp)
 1009f88:	00804074 	movhi	r2,257
 1009f8c:	108eb644 	addi	r2,r2,15065
 1009f90:	10c5883a 	add	r2,r2,r3
 1009f94:	10800003 	ldbu	r2,0(r2)
 1009f98:	1007883a 	mov	r3,r2
 1009f9c:	e0bff803 	ldbu	r2,-32(fp)
 1009fa0:	0084303a 	nor	r2,zero,r2
 1009fa4:	1884703a 	and	r2,r3,r2
 1009fa8:	1007883a 	mov	r3,r2
 1009fac:	00804074 	movhi	r2,257
 1009fb0:	108eb644 	addi	r2,r2,15065
 1009fb4:	1105883a 	add	r2,r2,r4
 1009fb8:	10c00005 	stb	r3,0(r2)
         if (OSRdyTbl[y_old] == 0) {
 1009fbc:	e0fff903 	ldbu	r3,-28(fp)
 1009fc0:	00804074 	movhi	r2,257
 1009fc4:	108eb644 	addi	r2,r2,15065
 1009fc8:	10c5883a 	add	r2,r2,r3
 1009fcc:	10800003 	ldbu	r2,0(r2)
 1009fd0:	10803fcc 	andi	r2,r2,255
 1009fd4:	1004c03a 	cmpne	r2,r2,zero
 1009fd8:	10000b1e 	bne	r2,zero,100a008 <OSTaskChangePrio+0x290>
             OSRdyGrp &= ~bity_old;
 1009fdc:	e0bff843 	ldbu	r2,-31(fp)
 1009fe0:	0084303a 	nor	r2,zero,r2
 1009fe4:	1007883a 	mov	r3,r2
 1009fe8:	00804074 	movhi	r2,257
 1009fec:	108eb604 	addi	r2,r2,15064
 1009ff0:	10800003 	ldbu	r2,0(r2)
 1009ff4:	1884703a 	and	r2,r3,r2
 1009ff8:	1007883a 	mov	r3,r2
 1009ffc:	00804074 	movhi	r2,257
 100a000:	108eb604 	addi	r2,r2,15064
 100a004:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
 100a008:	00804074 	movhi	r2,257
 100a00c:	108eb604 	addi	r2,r2,15064
 100a010:	10c00003 	ldbu	r3,0(r2)
 100a014:	e0bff8c3 	ldbu	r2,-29(fp)
 100a018:	1884b03a 	or	r2,r3,r2
 100a01c:	1007883a 	mov	r3,r2
 100a020:	00804074 	movhi	r2,257
 100a024:	108eb604 	addi	r2,r2,15064
 100a028:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
 100a02c:	e13ff983 	ldbu	r4,-26(fp)
 100a030:	e0fff983 	ldbu	r3,-26(fp)
 100a034:	00804074 	movhi	r2,257
 100a038:	108eb644 	addi	r2,r2,15065
 100a03c:	10c5883a 	add	r2,r2,r3
 100a040:	10c00003 	ldbu	r3,0(r2)
 100a044:	e0bff883 	ldbu	r2,-30(fp)
 100a048:	1884b03a 	or	r2,r3,r2
 100a04c:	1007883a 	mov	r3,r2
 100a050:	00804074 	movhi	r2,257
 100a054:	108eb644 	addi	r2,r2,15065
 100a058:	1105883a 	add	r2,r2,r4
 100a05c:	10c00005 	stb	r3,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
 100a060:	e0bffa17 	ldw	r2,-24(fp)
 100a064:	10800717 	ldw	r2,28(r2)
 100a068:	e0bffc15 	stw	r2,-16(fp)
    if (pevent != (OS_EVENT *)0) {
 100a06c:	e0bffc17 	ldw	r2,-16(fp)
 100a070:	1005003a 	cmpeq	r2,r2,zero
 100a074:	1000341e 	bne	r2,zero,100a148 <OSTaskChangePrio+0x3d0>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
 100a078:	e13ff903 	ldbu	r4,-28(fp)
 100a07c:	e0fff903 	ldbu	r3,-28(fp)
 100a080:	e0bffc17 	ldw	r2,-16(fp)
 100a084:	1885883a 	add	r2,r3,r2
 100a088:	10800204 	addi	r2,r2,8
 100a08c:	108000c3 	ldbu	r2,3(r2)
 100a090:	1007883a 	mov	r3,r2
 100a094:	e0bff803 	ldbu	r2,-32(fp)
 100a098:	0084303a 	nor	r2,zero,r2
 100a09c:	1884703a 	and	r2,r3,r2
 100a0a0:	1007883a 	mov	r3,r2
 100a0a4:	e0bffc17 	ldw	r2,-16(fp)
 100a0a8:	2085883a 	add	r2,r4,r2
 100a0ac:	10800204 	addi	r2,r2,8
 100a0b0:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
 100a0b4:	e0fff903 	ldbu	r3,-28(fp)
 100a0b8:	e0bffc17 	ldw	r2,-16(fp)
 100a0bc:	1885883a 	add	r2,r3,r2
 100a0c0:	10800204 	addi	r2,r2,8
 100a0c4:	108000c3 	ldbu	r2,3(r2)
 100a0c8:	10803fcc 	andi	r2,r2,255
 100a0cc:	1004c03a 	cmpne	r2,r2,zero
 100a0d0:	1000091e 	bne	r2,zero,100a0f8 <OSTaskChangePrio+0x380>
            pevent->OSEventGrp    &= ~bity_old;
 100a0d4:	e0bffc17 	ldw	r2,-16(fp)
 100a0d8:	10800283 	ldbu	r2,10(r2)
 100a0dc:	1007883a 	mov	r3,r2
 100a0e0:	e0bff843 	ldbu	r2,-31(fp)
 100a0e4:	0084303a 	nor	r2,zero,r2
 100a0e8:	1884703a 	and	r2,r3,r2
 100a0ec:	1007883a 	mov	r3,r2
 100a0f0:	e0bffc17 	ldw	r2,-16(fp)
 100a0f4:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
 100a0f8:	e0bffc17 	ldw	r2,-16(fp)
 100a0fc:	10c00283 	ldbu	r3,10(r2)
 100a100:	e0bff8c3 	ldbu	r2,-29(fp)
 100a104:	1884b03a 	or	r2,r3,r2
 100a108:	1007883a 	mov	r3,r2
 100a10c:	e0bffc17 	ldw	r2,-16(fp)
 100a110:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
 100a114:	e13ff983 	ldbu	r4,-26(fp)
 100a118:	e0fff983 	ldbu	r3,-26(fp)
 100a11c:	e0bffc17 	ldw	r2,-16(fp)
 100a120:	1885883a 	add	r2,r3,r2
 100a124:	10800204 	addi	r2,r2,8
 100a128:	10c000c3 	ldbu	r3,3(r2)
 100a12c:	e0bff883 	ldbu	r2,-30(fp)
 100a130:	1884b03a 	or	r2,r3,r2
 100a134:	1007883a 	mov	r3,r2
 100a138:	e0bffc17 	ldw	r2,-16(fp)
 100a13c:	2085883a 	add	r2,r4,r2
 100a140:	10800204 	addi	r2,r2,8
 100a144:	10c000c5 	stb	r3,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
 100a148:	e0bffa17 	ldw	r2,-24(fp)
 100a14c:	10800817 	ldw	r2,32(r2)
 100a150:	1005003a 	cmpeq	r2,r2,zero
 100a154:	1000441e 	bne	r2,zero,100a268 <OSTaskChangePrio+0x4f0>
        pevents =  ptcb->OSTCBEventMultiPtr;
 100a158:	e0bffa17 	ldw	r2,-24(fp)
 100a15c:	10800817 	ldw	r2,32(r2)
 100a160:	e0bffb15 	stw	r2,-20(fp)
        pevent  = *pevents;
 100a164:	e0bffb17 	ldw	r2,-20(fp)
 100a168:	10800017 	ldw	r2,0(r2)
 100a16c:	e0bffc15 	stw	r2,-16(fp)
        while (pevent != (OS_EVENT *)0) {
 100a170:	00003a06 	br	100a25c <OSTaskChangePrio+0x4e4>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
 100a174:	e13ff903 	ldbu	r4,-28(fp)
 100a178:	e0fff903 	ldbu	r3,-28(fp)
 100a17c:	e0bffc17 	ldw	r2,-16(fp)
 100a180:	1885883a 	add	r2,r3,r2
 100a184:	10800204 	addi	r2,r2,8
 100a188:	108000c3 	ldbu	r2,3(r2)
 100a18c:	1007883a 	mov	r3,r2
 100a190:	e0bff803 	ldbu	r2,-32(fp)
 100a194:	0084303a 	nor	r2,zero,r2
 100a198:	1884703a 	and	r2,r3,r2
 100a19c:	1007883a 	mov	r3,r2
 100a1a0:	e0bffc17 	ldw	r2,-16(fp)
 100a1a4:	2085883a 	add	r2,r4,r2
 100a1a8:	10800204 	addi	r2,r2,8
 100a1ac:	10c000c5 	stb	r3,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
 100a1b0:	e0fff903 	ldbu	r3,-28(fp)
 100a1b4:	e0bffc17 	ldw	r2,-16(fp)
 100a1b8:	1885883a 	add	r2,r3,r2
 100a1bc:	10800204 	addi	r2,r2,8
 100a1c0:	108000c3 	ldbu	r2,3(r2)
 100a1c4:	10803fcc 	andi	r2,r2,255
 100a1c8:	1004c03a 	cmpne	r2,r2,zero
 100a1cc:	1000091e 	bne	r2,zero,100a1f4 <OSTaskChangePrio+0x47c>
                pevent->OSEventGrp    &= ~bity_old;
 100a1d0:	e0bffc17 	ldw	r2,-16(fp)
 100a1d4:	10800283 	ldbu	r2,10(r2)
 100a1d8:	1007883a 	mov	r3,r2
 100a1dc:	e0bff843 	ldbu	r2,-31(fp)
 100a1e0:	0084303a 	nor	r2,zero,r2
 100a1e4:	1884703a 	and	r2,r3,r2
 100a1e8:	1007883a 	mov	r3,r2
 100a1ec:	e0bffc17 	ldw	r2,-16(fp)
 100a1f0:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
 100a1f4:	e0bffc17 	ldw	r2,-16(fp)
 100a1f8:	10c00283 	ldbu	r3,10(r2)
 100a1fc:	e0bff8c3 	ldbu	r2,-29(fp)
 100a200:	1884b03a 	or	r2,r3,r2
 100a204:	1007883a 	mov	r3,r2
 100a208:	e0bffc17 	ldw	r2,-16(fp)
 100a20c:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
 100a210:	e13ff983 	ldbu	r4,-26(fp)
 100a214:	e0fff983 	ldbu	r3,-26(fp)
 100a218:	e0bffc17 	ldw	r2,-16(fp)
 100a21c:	1885883a 	add	r2,r3,r2
 100a220:	10800204 	addi	r2,r2,8
 100a224:	10c000c3 	ldbu	r3,3(r2)
 100a228:	e0bff883 	ldbu	r2,-30(fp)
 100a22c:	1884b03a 	or	r2,r3,r2
 100a230:	1007883a 	mov	r3,r2
 100a234:	e0bffc17 	ldw	r2,-16(fp)
 100a238:	2085883a 	add	r2,r4,r2
 100a23c:	10800204 	addi	r2,r2,8
 100a240:	10c000c5 	stb	r3,3(r2)
            pevents++;
 100a244:	e0bffb17 	ldw	r2,-20(fp)
 100a248:	10800104 	addi	r2,r2,4
 100a24c:	e0bffb15 	stw	r2,-20(fp)
            pevent                     = *pevents;
 100a250:	e0bffb17 	ldw	r2,-20(fp)
 100a254:	10800017 	ldw	r2,0(r2)
 100a258:	e0bffc15 	stw	r2,-16(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
 100a25c:	e0bffc17 	ldw	r2,-16(fp)
 100a260:	1004c03a 	cmpne	r2,r2,zero
 100a264:	103fc31e 	bne	r2,zero,100a174 <OSTaskChangePrio+0x3fc>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
 100a268:	e0fffa17 	ldw	r3,-24(fp)
 100a26c:	e0bffe03 	ldbu	r2,-8(fp)
 100a270:	18800c85 	stb	r2,50(r3)
    ptcb->OSTCBY    = y_new;
 100a274:	e0fffa17 	ldw	r3,-24(fp)
 100a278:	e0bff983 	ldbu	r2,-26(fp)
 100a27c:	18800d05 	stb	r2,52(r3)
    ptcb->OSTCBX    = x_new;
 100a280:	e0fffa17 	ldw	r3,-24(fp)
 100a284:	e0bff943 	ldbu	r2,-27(fp)
 100a288:	18800cc5 	stb	r2,51(r3)
    ptcb->OSTCBBitY = bity_new;
 100a28c:	e0fffa17 	ldw	r3,-24(fp)
 100a290:	e0bff8c3 	ldbu	r2,-29(fp)
 100a294:	18800d85 	stb	r2,54(r3)
    ptcb->OSTCBBitX = bitx_new;
 100a298:	e0fffa17 	ldw	r3,-24(fp)
 100a29c:	e0bff883 	ldbu	r2,-30(fp)
 100a2a0:	18800d45 	stb	r2,53(r3)
 100a2a4:	e0bff717 	ldw	r2,-36(fp)
 100a2a8:	e0bff215 	stw	r2,-56(fp)
 100a2ac:	e0bff217 	ldw	r2,-56(fp)
 100a2b0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 100a2b4:	00804074 	movhi	r2,257
 100a2b8:	108eaa44 	addi	r2,r2,15017
 100a2bc:	10800003 	ldbu	r2,0(r2)
 100a2c0:	10803fcc 	andi	r2,r2,255
 100a2c4:	10800058 	cmpnei	r2,r2,1
 100a2c8:	1000011e 	bne	r2,zero,100a2d0 <OSTaskChangePrio+0x558>
        OS_Sched();                                         /* Find new highest priority task          */
 100a2cc:	10054c00 	call	10054c0 <OS_Sched>
    }
    return (OS_ERR_NONE);
 100a2d0:	e03fff15 	stw	zero,-4(fp)
 100a2d4:	e0bfff17 	ldw	r2,-4(fp)
}
 100a2d8:	e037883a 	mov	sp,fp
 100a2dc:	dfc00117 	ldw	ra,4(sp)
 100a2e0:	df000017 	ldw	fp,0(sp)
 100a2e4:	dec00204 	addi	sp,sp,8
 100a2e8:	f800283a 	ret

0100a2ec <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
 100a2ec:	deffed04 	addi	sp,sp,-76
 100a2f0:	dfc01215 	stw	ra,72(sp)
 100a2f4:	df001115 	stw	fp,68(sp)
 100a2f8:	df001104 	addi	fp,sp,68
 100a2fc:	e13ffb15 	stw	r4,-20(fp)
 100a300:	e17ffc15 	stw	r5,-16(fp)
 100a304:	e1bffd15 	stw	r6,-12(fp)
 100a308:	e1fffe05 	stb	r7,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 100a30c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 100a310:	e0bffe03 	ldbu	r2,-8(fp)
 100a314:	10800570 	cmpltui	r2,r2,21
 100a318:	1000031e 	bne	r2,zero,100a328 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
 100a31c:	00800a84 	movi	r2,42
 100a320:	e0bfff15 	stw	r2,-4(fp)
 100a324:	00006006 	br	100a4a8 <OSTaskCreate+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100a328:	0005303a 	rdctl	r2,status
 100a32c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100a330:	e0fff717 	ldw	r3,-36(fp)
 100a334:	00bfff84 	movi	r2,-2
 100a338:	1884703a 	and	r2,r3,r2
 100a33c:	1001703a 	wrctl	status,r2
  
  return context;
 100a340:	e0bff717 	ldw	r2,-36(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 100a344:	e0bff815 	stw	r2,-32(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 100a348:	00804074 	movhi	r2,257
 100a34c:	108eb804 	addi	r2,r2,15072
 100a350:	10800003 	ldbu	r2,0(r2)
 100a354:	10803fcc 	andi	r2,r2,255
 100a358:	1005003a 	cmpeq	r2,r2,zero
 100a35c:	1000071e 	bne	r2,zero,100a37c <OSTaskCreate+0x90>
 100a360:	e0bff817 	ldw	r2,-32(fp)
 100a364:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100a368:	e0bff617 	ldw	r2,-40(fp)
 100a36c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 100a370:	00800f04 	movi	r2,60
 100a374:	e0bfff15 	stw	r2,-4(fp)
 100a378:	00004b06 	br	100a4a8 <OSTaskCreate+0x1bc>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 100a37c:	e0bffe03 	ldbu	r2,-8(fp)
 100a380:	00c040b4 	movhi	r3,258
 100a384:	18eb3f04 	addi	r3,r3,-21252
 100a388:	1085883a 	add	r2,r2,r2
 100a38c:	1085883a 	add	r2,r2,r2
 100a390:	10c5883a 	add	r2,r2,r3
 100a394:	10800017 	ldw	r2,0(r2)
 100a398:	1004c03a 	cmpne	r2,r2,zero
 100a39c:	10003c1e 	bne	r2,zero,100a490 <OSTaskCreate+0x1a4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 100a3a0:	e0bffe03 	ldbu	r2,-8(fp)
 100a3a4:	00c040b4 	movhi	r3,258
 100a3a8:	18eb3f04 	addi	r3,r3,-21252
 100a3ac:	1085883a 	add	r2,r2,r2
 100a3b0:	1085883a 	add	r2,r2,r2
 100a3b4:	10c7883a 	add	r3,r2,r3
 100a3b8:	00800044 	movi	r2,1
 100a3bc:	18800015 	stw	r2,0(r3)
 100a3c0:	e0bff817 	ldw	r2,-32(fp)
 100a3c4:	e0bff515 	stw	r2,-44(fp)
 100a3c8:	e0bff517 	ldw	r2,-44(fp)
 100a3cc:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
 100a3d0:	e13ffb17 	ldw	r4,-20(fp)
 100a3d4:	e17ffc17 	ldw	r5,-16(fp)
 100a3d8:	e1bffd17 	ldw	r6,-12(fp)
 100a3dc:	000f883a 	mov	r7,zero
 100a3e0:	100decc0 	call	100decc <OSTaskStkInit>
 100a3e4:	e0bffa15 	stw	r2,-24(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
 100a3e8:	e13ffe03 	ldbu	r4,-8(fp)
 100a3ec:	d8000015 	stw	zero,0(sp)
 100a3f0:	d8000115 	stw	zero,4(sp)
 100a3f4:	d8000215 	stw	zero,8(sp)
 100a3f8:	e17ffa17 	ldw	r5,-24(fp)
 100a3fc:	000d883a 	mov	r6,zero
 100a400:	000f883a 	mov	r7,zero
 100a404:	10058c80 	call	10058c8 <OS_TCBInit>
 100a408:	e0bff905 	stb	r2,-28(fp)
        if (err == OS_ERR_NONE) {
 100a40c:	e0bff903 	ldbu	r2,-28(fp)
 100a410:	1004c03a 	cmpne	r2,r2,zero
 100a414:	1000081e 	bne	r2,zero,100a438 <OSTaskCreate+0x14c>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
 100a418:	00804074 	movhi	r2,257
 100a41c:	108eaa44 	addi	r2,r2,15017
 100a420:	10800003 	ldbu	r2,0(r2)
 100a424:	10803fcc 	andi	r2,r2,255
 100a428:	10800058 	cmpnei	r2,r2,1
 100a42c:	1000151e 	bne	r2,zero,100a484 <OSTaskCreate+0x198>
                OS_Sched();
 100a430:	10054c00 	call	10054c0 <OS_Sched>
 100a434:	00001306 	br	100a484 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100a438:	0005303a 	rdctl	r2,status
 100a43c:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100a440:	e0fff417 	ldw	r3,-48(fp)
 100a444:	00bfff84 	movi	r2,-2
 100a448:	1884703a 	and	r2,r3,r2
 100a44c:	1001703a 	wrctl	status,r2
  
  return context;
 100a450:	e0bff417 	ldw	r2,-48(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 100a454:	e0bff815 	stw	r2,-32(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
 100a458:	e0bffe03 	ldbu	r2,-8(fp)
 100a45c:	00c040b4 	movhi	r3,258
 100a460:	18eb3f04 	addi	r3,r3,-21252
 100a464:	1085883a 	add	r2,r2,r2
 100a468:	1085883a 	add	r2,r2,r2
 100a46c:	10c5883a 	add	r2,r2,r3
 100a470:	10000015 	stw	zero,0(r2)
 100a474:	e0bff817 	ldw	r2,-32(fp)
 100a478:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100a47c:	e0bff317 	ldw	r2,-52(fp)
 100a480:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 100a484:	e0bff903 	ldbu	r2,-28(fp)
 100a488:	e0bfff15 	stw	r2,-4(fp)
 100a48c:	00000606 	br	100a4a8 <OSTaskCreate+0x1bc>
 100a490:	e0bff817 	ldw	r2,-32(fp)
 100a494:	e0bff215 	stw	r2,-56(fp)
 100a498:	e0bff217 	ldw	r2,-56(fp)
 100a49c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 100a4a0:	00800a04 	movi	r2,40
 100a4a4:	e0bfff15 	stw	r2,-4(fp)
 100a4a8:	e0bfff17 	ldw	r2,-4(fp)
}
 100a4ac:	e037883a 	mov	sp,fp
 100a4b0:	dfc00117 	ldw	ra,4(sp)
 100a4b4:	df000017 	ldw	fp,0(sp)
 100a4b8:	dec00204 	addi	sp,sp,8
 100a4bc:	f800283a 	ret

0100a4c0 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
 100a4c0:	deffeb04 	addi	sp,sp,-84
 100a4c4:	dfc01415 	stw	ra,80(sp)
 100a4c8:	df001315 	stw	fp,76(sp)
 100a4cc:	df001304 	addi	fp,sp,76
 100a4d0:	e13ff915 	stw	r4,-28(fp)
 100a4d4:	e17ffa15 	stw	r5,-24(fp)
 100a4d8:	e1bffb15 	stw	r6,-20(fp)
 100a4dc:	e0800217 	ldw	r2,8(fp)
 100a4e0:	e0c00617 	ldw	r3,24(fp)
 100a4e4:	e1fffc05 	stb	r7,-16(fp)
 100a4e8:	e0bffd0d 	sth	r2,-12(fp)
 100a4ec:	e0fffe0d 	sth	r3,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 100a4f0:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 100a4f4:	e0bffc03 	ldbu	r2,-16(fp)
 100a4f8:	10800570 	cmpltui	r2,r2,21
 100a4fc:	1000031e 	bne	r2,zero,100a50c <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
 100a500:	00800a84 	movi	r2,42
 100a504:	e0bfff15 	stw	r2,-4(fp)
 100a508:	00006706 	br	100a6a8 <OSTaskCreateExt+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100a50c:	0005303a 	rdctl	r2,status
 100a510:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100a514:	e0fff517 	ldw	r3,-44(fp)
 100a518:	00bfff84 	movi	r2,-2
 100a51c:	1884703a 	and	r2,r3,r2
 100a520:	1001703a 	wrctl	status,r2
  
  return context;
 100a524:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 100a528:	e0bff615 	stw	r2,-40(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 100a52c:	00804074 	movhi	r2,257
 100a530:	108eb804 	addi	r2,r2,15072
 100a534:	10800003 	ldbu	r2,0(r2)
 100a538:	10803fcc 	andi	r2,r2,255
 100a53c:	1005003a 	cmpeq	r2,r2,zero
 100a540:	1000071e 	bne	r2,zero,100a560 <OSTaskCreateExt+0xa0>
 100a544:	e0bff617 	ldw	r2,-40(fp)
 100a548:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100a54c:	e0bff417 	ldw	r2,-48(fp)
 100a550:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 100a554:	00800f04 	movi	r2,60
 100a558:	e0bfff15 	stw	r2,-4(fp)
 100a55c:	00005206 	br	100a6a8 <OSTaskCreateExt+0x1e8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 100a560:	e0bffc03 	ldbu	r2,-16(fp)
 100a564:	00c040b4 	movhi	r3,258
 100a568:	18eb3f04 	addi	r3,r3,-21252
 100a56c:	1085883a 	add	r2,r2,r2
 100a570:	1085883a 	add	r2,r2,r2
 100a574:	10c5883a 	add	r2,r2,r3
 100a578:	10800017 	ldw	r2,0(r2)
 100a57c:	1004c03a 	cmpne	r2,r2,zero
 100a580:	1000431e 	bne	r2,zero,100a690 <OSTaskCreateExt+0x1d0>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 100a584:	e0bffc03 	ldbu	r2,-16(fp)
 100a588:	00c040b4 	movhi	r3,258
 100a58c:	18eb3f04 	addi	r3,r3,-21252
 100a590:	1085883a 	add	r2,r2,r2
 100a594:	1085883a 	add	r2,r2,r2
 100a598:	10c7883a 	add	r3,r2,r3
 100a59c:	00800044 	movi	r2,1
 100a5a0:	18800015 	stw	r2,0(r3)
 100a5a4:	e0bff617 	ldw	r2,-40(fp)
 100a5a8:	e0bff315 	stw	r2,-52(fp)
 100a5ac:	e0bff317 	ldw	r2,-52(fp)
 100a5b0:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
 100a5b4:	e1bffe0b 	ldhu	r6,-8(fp)
 100a5b8:	e1000317 	ldw	r4,12(fp)
 100a5bc:	e1400417 	ldw	r5,16(fp)
 100a5c0:	100b73c0 	call	100b73c <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
 100a5c4:	e1fffe0b 	ldhu	r7,-8(fp)
 100a5c8:	e13ff917 	ldw	r4,-28(fp)
 100a5cc:	e17ffa17 	ldw	r5,-24(fp)
 100a5d0:	e1bffb17 	ldw	r6,-20(fp)
 100a5d4:	100decc0 	call	100decc <OSTaskStkInit>
 100a5d8:	e0bff815 	stw	r2,-32(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
 100a5dc:	e13ffc03 	ldbu	r4,-16(fp)
 100a5e0:	e1fffd0b 	ldhu	r7,-12(fp)
 100a5e4:	e0fffe0b 	ldhu	r3,-8(fp)
 100a5e8:	e0800417 	ldw	r2,16(fp)
 100a5ec:	d8800015 	stw	r2,0(sp)
 100a5f0:	e0800517 	ldw	r2,20(fp)
 100a5f4:	d8800115 	stw	r2,4(sp)
 100a5f8:	d8c00215 	stw	r3,8(sp)
 100a5fc:	e17ff817 	ldw	r5,-32(fp)
 100a600:	e1800317 	ldw	r6,12(fp)
 100a604:	10058c80 	call	10058c8 <OS_TCBInit>
 100a608:	e0bff705 	stb	r2,-36(fp)
        if (err == OS_ERR_NONE) {
 100a60c:	e0bff703 	ldbu	r2,-36(fp)
 100a610:	1004c03a 	cmpne	r2,r2,zero
 100a614:	1000081e 	bne	r2,zero,100a638 <OSTaskCreateExt+0x178>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
 100a618:	00804074 	movhi	r2,257
 100a61c:	108eaa44 	addi	r2,r2,15017
 100a620:	10800003 	ldbu	r2,0(r2)
 100a624:	10803fcc 	andi	r2,r2,255
 100a628:	10800058 	cmpnei	r2,r2,1
 100a62c:	1000151e 	bne	r2,zero,100a684 <OSTaskCreateExt+0x1c4>
                OS_Sched();
 100a630:	10054c00 	call	10054c0 <OS_Sched>
 100a634:	00001306 	br	100a684 <OSTaskCreateExt+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100a638:	0005303a 	rdctl	r2,status
 100a63c:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100a640:	e0fff217 	ldw	r3,-56(fp)
 100a644:	00bfff84 	movi	r2,-2
 100a648:	1884703a 	and	r2,r3,r2
 100a64c:	1001703a 	wrctl	status,r2
  
  return context;
 100a650:	e0bff217 	ldw	r2,-56(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 100a654:	e0bff615 	stw	r2,-40(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
 100a658:	e0bffc03 	ldbu	r2,-16(fp)
 100a65c:	00c040b4 	movhi	r3,258
 100a660:	18eb3f04 	addi	r3,r3,-21252
 100a664:	1085883a 	add	r2,r2,r2
 100a668:	1085883a 	add	r2,r2,r2
 100a66c:	10c5883a 	add	r2,r2,r3
 100a670:	10000015 	stw	zero,0(r2)
 100a674:	e0bff617 	ldw	r2,-40(fp)
 100a678:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100a67c:	e0bff117 	ldw	r2,-60(fp)
 100a680:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 100a684:	e0bff703 	ldbu	r2,-36(fp)
 100a688:	e0bfff15 	stw	r2,-4(fp)
 100a68c:	00000606 	br	100a6a8 <OSTaskCreateExt+0x1e8>
 100a690:	e0bff617 	ldw	r2,-40(fp)
 100a694:	e0bff015 	stw	r2,-64(fp)
 100a698:	e0bff017 	ldw	r2,-64(fp)
 100a69c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 100a6a0:	00800a04 	movi	r2,40
 100a6a4:	e0bfff15 	stw	r2,-4(fp)
 100a6a8:	e0bfff17 	ldw	r2,-4(fp)
}
 100a6ac:	e037883a 	mov	sp,fp
 100a6b0:	dfc00117 	ldw	ra,4(sp)
 100a6b4:	df000017 	ldw	fp,0(sp)
 100a6b8:	dec00204 	addi	sp,sp,8
 100a6bc:	f800283a 	ret

0100a6c0 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
 100a6c0:	defff304 	addi	sp,sp,-52
 100a6c4:	dfc00c15 	stw	ra,48(sp)
 100a6c8:	df000b15 	stw	fp,44(sp)
 100a6cc:	df000b04 	addi	fp,sp,44
 100a6d0:	e13ffe05 	stb	r4,-8(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
 100a6d4:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
 100a6d8:	00804074 	movhi	r2,257
 100a6dc:	108eb804 	addi	r2,r2,15072
 100a6e0:	10800003 	ldbu	r2,0(r2)
 100a6e4:	10803fcc 	andi	r2,r2,255
 100a6e8:	1005003a 	cmpeq	r2,r2,zero
 100a6ec:	1000031e 	bne	r2,zero,100a6fc <OSTaskDel+0x3c>
        return (OS_ERR_TASK_DEL_ISR);
 100a6f0:	00801004 	movi	r2,64
 100a6f4:	e0bfff15 	stw	r2,-4(fp)
 100a6f8:	0000ee06 	br	100aab4 <OSTaskDel+0x3f4>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
 100a6fc:	e0bffe03 	ldbu	r2,-8(fp)
 100a700:	10800518 	cmpnei	r2,r2,20
 100a704:	1000031e 	bne	r2,zero,100a714 <OSTaskDel+0x54>
        return (OS_ERR_TASK_DEL_IDLE);
 100a708:	00800f84 	movi	r2,62
 100a70c:	e0bfff15 	stw	r2,-4(fp)
 100a710:	0000e806 	br	100aab4 <OSTaskDel+0x3f4>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
 100a714:	e0bffe03 	ldbu	r2,-8(fp)
 100a718:	10800530 	cmpltui	r2,r2,20
 100a71c:	1000061e 	bne	r2,zero,100a738 <OSTaskDel+0x78>
        if (prio != OS_PRIO_SELF) {
 100a720:	e0bffe03 	ldbu	r2,-8(fp)
 100a724:	10803fe0 	cmpeqi	r2,r2,255
 100a728:	1000031e 	bne	r2,zero,100a738 <OSTaskDel+0x78>
            return (OS_ERR_PRIO_INVALID);
 100a72c:	00800a84 	movi	r2,42
 100a730:	e0bfff15 	stw	r2,-4(fp)
 100a734:	0000df06 	br	100aab4 <OSTaskDel+0x3f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100a738:	0005303a 	rdctl	r2,status
 100a73c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100a740:	e0fffa17 	ldw	r3,-24(fp)
 100a744:	00bfff84 	movi	r2,-2
 100a748:	1884703a 	and	r2,r3,r2
 100a74c:	1001703a 	wrctl	status,r2
  
  return context;
 100a750:	e0bffa17 	ldw	r2,-24(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
 100a754:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
 100a758:	e0bffe03 	ldbu	r2,-8(fp)
 100a75c:	10803fd8 	cmpnei	r2,r2,255
 100a760:	1000051e 	bne	r2,zero,100a778 <OSTaskDel+0xb8>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
 100a764:	00804074 	movhi	r2,257
 100a768:	108eb904 	addi	r2,r2,15076
 100a76c:	10800017 	ldw	r2,0(r2)
 100a770:	10800c83 	ldbu	r2,50(r2)
 100a774:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 100a778:	e0bffe03 	ldbu	r2,-8(fp)
 100a77c:	00c040b4 	movhi	r3,258
 100a780:	18eb3f04 	addi	r3,r3,-21252
 100a784:	1085883a 	add	r2,r2,r2
 100a788:	1085883a 	add	r2,r2,r2
 100a78c:	10c5883a 	add	r2,r2,r3
 100a790:	10800017 	ldw	r2,0(r2)
 100a794:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
 100a798:	e0bffc17 	ldw	r2,-16(fp)
 100a79c:	1004c03a 	cmpne	r2,r2,zero
 100a7a0:	1000071e 	bne	r2,zero,100a7c0 <OSTaskDel+0x100>
 100a7a4:	e0bffb17 	ldw	r2,-20(fp)
 100a7a8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100a7ac:	e0bff917 	ldw	r2,-28(fp)
 100a7b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 100a7b4:	008010c4 	movi	r2,67
 100a7b8:	e0bfff15 	stw	r2,-4(fp)
 100a7bc:	0000bd06 	br	100aab4 <OSTaskDel+0x3f4>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
 100a7c0:	e0bffc17 	ldw	r2,-16(fp)
 100a7c4:	10800058 	cmpnei	r2,r2,1
 100a7c8:	1000071e 	bne	r2,zero,100a7e8 <OSTaskDel+0x128>
 100a7cc:	e0bffb17 	ldw	r2,-20(fp)
 100a7d0:	e0bff815 	stw	r2,-32(fp)
 100a7d4:	e0bff817 	ldw	r2,-32(fp)
 100a7d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 100a7dc:	00800f44 	movi	r2,61
 100a7e0:	e0bfff15 	stw	r2,-4(fp)
 100a7e4:	0000b306 	br	100aab4 <OSTaskDel+0x3f4>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
 100a7e8:	e0bffc17 	ldw	r2,-16(fp)
 100a7ec:	10800d03 	ldbu	r2,52(r2)
 100a7f0:	11003fcc 	andi	r4,r2,255
 100a7f4:	e0bffc17 	ldw	r2,-16(fp)
 100a7f8:	10800d03 	ldbu	r2,52(r2)
 100a7fc:	10c03fcc 	andi	r3,r2,255
 100a800:	00804074 	movhi	r2,257
 100a804:	108eb644 	addi	r2,r2,15065
 100a808:	10c5883a 	add	r2,r2,r3
 100a80c:	10800003 	ldbu	r2,0(r2)
 100a810:	1007883a 	mov	r3,r2
 100a814:	e0bffc17 	ldw	r2,-16(fp)
 100a818:	10800d43 	ldbu	r2,53(r2)
 100a81c:	0084303a 	nor	r2,zero,r2
 100a820:	1884703a 	and	r2,r3,r2
 100a824:	1007883a 	mov	r3,r2
 100a828:	00804074 	movhi	r2,257
 100a82c:	108eb644 	addi	r2,r2,15065
 100a830:	1105883a 	add	r2,r2,r4
 100a834:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
 100a838:	e0bffc17 	ldw	r2,-16(fp)
 100a83c:	10800d03 	ldbu	r2,52(r2)
 100a840:	10c03fcc 	andi	r3,r2,255
 100a844:	00804074 	movhi	r2,257
 100a848:	108eb644 	addi	r2,r2,15065
 100a84c:	10c5883a 	add	r2,r2,r3
 100a850:	10800003 	ldbu	r2,0(r2)
 100a854:	10803fcc 	andi	r2,r2,255
 100a858:	1004c03a 	cmpne	r2,r2,zero
 100a85c:	10000c1e 	bne	r2,zero,100a890 <OSTaskDel+0x1d0>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
 100a860:	e0bffc17 	ldw	r2,-16(fp)
 100a864:	10800d83 	ldbu	r2,54(r2)
 100a868:	0084303a 	nor	r2,zero,r2
 100a86c:	1007883a 	mov	r3,r2
 100a870:	00804074 	movhi	r2,257
 100a874:	108eb604 	addi	r2,r2,15064
 100a878:	10800003 	ldbu	r2,0(r2)
 100a87c:	1884703a 	and	r2,r3,r2
 100a880:	1007883a 	mov	r3,r2
 100a884:	00804074 	movhi	r2,257
 100a888:	108eb604 	addi	r2,r2,15064
 100a88c:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
 100a890:	e0bffc17 	ldw	r2,-16(fp)
 100a894:	10800717 	ldw	r2,28(r2)
 100a898:	1005003a 	cmpeq	r2,r2,zero
 100a89c:	1000041e 	bne	r2,zero,100a8b0 <OSTaskDel+0x1f0>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
 100a8a0:	e0bffc17 	ldw	r2,-16(fp)
 100a8a4:	11400717 	ldw	r5,28(r2)
 100a8a8:	e13ffc17 	ldw	r4,-16(fp)
 100a8ac:	1004e780 	call	1004e78 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
 100a8b0:	e0bffc17 	ldw	r2,-16(fp)
 100a8b4:	10800817 	ldw	r2,32(r2)
 100a8b8:	1005003a 	cmpeq	r2,r2,zero
 100a8bc:	1000041e 	bne	r2,zero,100a8d0 <OSTaskDel+0x210>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 100a8c0:	e0bffc17 	ldw	r2,-16(fp)
 100a8c4:	11400817 	ldw	r5,32(r2)
 100a8c8:	e13ffc17 	ldw	r4,-16(fp)
 100a8cc:	1004f300 	call	1004f30 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
 100a8d0:	e0bffc17 	ldw	r2,-16(fp)
 100a8d4:	10800a17 	ldw	r2,40(r2)
 100a8d8:	e0bffd15 	stw	r2,-12(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
 100a8dc:	e0bffd17 	ldw	r2,-12(fp)
 100a8e0:	1005003a 	cmpeq	r2,r2,zero
 100a8e4:	1000021e 	bne	r2,zero,100a8f0 <OSTaskDel+0x230>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
 100a8e8:	e13ffd17 	ldw	r4,-12(fp)
 100a8ec:	10075c40 	call	10075c4 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
 100a8f0:	e0bffc17 	ldw	r2,-16(fp)
 100a8f4:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
 100a8f8:	e0bffc17 	ldw	r2,-16(fp)
 100a8fc:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 100a900:	e0bffc17 	ldw	r2,-16(fp)
 100a904:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
 100a908:	00804074 	movhi	r2,257
 100a90c:	108eaa04 	addi	r2,r2,15016
 100a910:	10800003 	ldbu	r2,0(r2)
 100a914:	10803fcc 	andi	r2,r2,255
 100a918:	10803fe0 	cmpeqi	r2,r2,255
 100a91c:	1000081e 	bne	r2,zero,100a940 <OSTaskDel+0x280>
        OSLockNesting++;
 100a920:	00804074 	movhi	r2,257
 100a924:	108eaa04 	addi	r2,r2,15016
 100a928:	10800003 	ldbu	r2,0(r2)
 100a92c:	10800044 	addi	r2,r2,1
 100a930:	1007883a 	mov	r3,r2
 100a934:	00804074 	movhi	r2,257
 100a938:	108eaa04 	addi	r2,r2,15016
 100a93c:	10c00005 	stb	r3,0(r2)
 100a940:	e0bffb17 	ldw	r2,-20(fp)
 100a944:	e0bff715 	stw	r2,-36(fp)
 100a948:	e0bff717 	ldw	r2,-36(fp)
 100a94c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
 100a950:	1004a640 	call	1004a64 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100a954:	0005303a 	rdctl	r2,status
 100a958:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100a95c:	e0fff617 	ldw	r3,-40(fp)
 100a960:	00bfff84 	movi	r2,-2
 100a964:	1884703a 	and	r2,r3,r2
 100a968:	1001703a 	wrctl	status,r2
  
  return context;
 100a96c:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
 100a970:	e0bffb15 	stw	r2,-20(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
 100a974:	00804074 	movhi	r2,257
 100a978:	108eaa04 	addi	r2,r2,15016
 100a97c:	10800003 	ldbu	r2,0(r2)
 100a980:	10803fcc 	andi	r2,r2,255
 100a984:	1005003a 	cmpeq	r2,r2,zero
 100a988:	1000081e 	bne	r2,zero,100a9ac <OSTaskDel+0x2ec>
        OSLockNesting--;
 100a98c:	00804074 	movhi	r2,257
 100a990:	108eaa04 	addi	r2,r2,15016
 100a994:	10800003 	ldbu	r2,0(r2)
 100a998:	10bfffc4 	addi	r2,r2,-1
 100a99c:	1007883a 	mov	r3,r2
 100a9a0:	00804074 	movhi	r2,257
 100a9a4:	108eaa04 	addi	r2,r2,15016
 100a9a8:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
 100a9ac:	e13ffc17 	ldw	r4,-16(fp)
 100a9b0:	100e1fc0 	call	100e1fc <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
 100a9b4:	00804074 	movhi	r2,257
 100a9b8:	108eb244 	addi	r2,r2,15049
 100a9bc:	10800003 	ldbu	r2,0(r2)
 100a9c0:	10bfffc4 	addi	r2,r2,-1
 100a9c4:	1007883a 	mov	r3,r2
 100a9c8:	00804074 	movhi	r2,257
 100a9cc:	108eb244 	addi	r2,r2,15049
 100a9d0:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
 100a9d4:	e0bffe03 	ldbu	r2,-8(fp)
 100a9d8:	00c040b4 	movhi	r3,258
 100a9dc:	18eb3f04 	addi	r3,r3,-21252
 100a9e0:	1085883a 	add	r2,r2,r2
 100a9e4:	1085883a 	add	r2,r2,r2
 100a9e8:	10c5883a 	add	r2,r2,r3
 100a9ec:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
 100a9f0:	e0bffc17 	ldw	r2,-16(fp)
 100a9f4:	10800617 	ldw	r2,24(r2)
 100a9f8:	1004c03a 	cmpne	r2,r2,zero
 100a9fc:	1000091e 	bne	r2,zero,100aa24 <OSTaskDel+0x364>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
 100aa00:	e0bffc17 	ldw	r2,-16(fp)
 100aa04:	10800517 	ldw	r2,20(r2)
 100aa08:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
 100aa0c:	e0bffc17 	ldw	r2,-16(fp)
 100aa10:	10c00517 	ldw	r3,20(r2)
 100aa14:	00804074 	movhi	r2,257
 100aa18:	108ead04 	addi	r2,r2,15028
 100aa1c:	10c00015 	stw	r3,0(r2)
 100aa20:	00000a06 	br	100aa4c <OSTaskDel+0x38c>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
 100aa24:	e0bffc17 	ldw	r2,-16(fp)
 100aa28:	10c00617 	ldw	r3,24(r2)
 100aa2c:	e0bffc17 	ldw	r2,-16(fp)
 100aa30:	10800517 	ldw	r2,20(r2)
 100aa34:	18800515 	stw	r2,20(r3)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
 100aa38:	e0bffc17 	ldw	r2,-16(fp)
 100aa3c:	10c00517 	ldw	r3,20(r2)
 100aa40:	e0bffc17 	ldw	r2,-16(fp)
 100aa44:	10800617 	ldw	r2,24(r2)
 100aa48:	18800615 	stw	r2,24(r3)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
 100aa4c:	00804074 	movhi	r2,257
 100aa50:	108eb104 	addi	r2,r2,15044
 100aa54:	10c00017 	ldw	r3,0(r2)
 100aa58:	e0bffc17 	ldw	r2,-16(fp)
 100aa5c:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
 100aa60:	00c04074 	movhi	r3,257
 100aa64:	18ceb104 	addi	r3,r3,15044
 100aa68:	e0bffc17 	ldw	r2,-16(fp)
 100aa6c:	18800015 	stw	r2,0(r3)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
 100aa70:	e0fffc17 	ldw	r3,-16(fp)
 100aa74:	00800fc4 	movi	r2,63
 100aa78:	18801305 	stb	r2,76(r3)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 100aa7c:	e0bffc17 	ldw	r2,-16(fp)
 100aa80:	10001345 	stb	zero,77(r2)
 100aa84:	e0bffb17 	ldw	r2,-20(fp)
 100aa88:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100aa8c:	e0bff517 	ldw	r2,-44(fp)
 100aa90:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 100aa94:	00804074 	movhi	r2,257
 100aa98:	108eaa44 	addi	r2,r2,15017
 100aa9c:	10800003 	ldbu	r2,0(r2)
 100aaa0:	10803fcc 	andi	r2,r2,255
 100aaa4:	10800058 	cmpnei	r2,r2,1
 100aaa8:	1000011e 	bne	r2,zero,100aab0 <OSTaskDel+0x3f0>
        OS_Sched();                                     /* Find new highest priority task              */
 100aaac:	10054c00 	call	10054c0 <OS_Sched>
    }
    return (OS_ERR_NONE);
 100aab0:	e03fff15 	stw	zero,-4(fp)
 100aab4:	e0bfff17 	ldw	r2,-4(fp)
}
 100aab8:	e037883a 	mov	sp,fp
 100aabc:	dfc00117 	ldw	ra,4(sp)
 100aac0:	df000017 	ldw	fp,0(sp)
 100aac4:	dec00204 	addi	sp,sp,8
 100aac8:	f800283a 	ret

0100aacc <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
 100aacc:	defff404 	addi	sp,sp,-48
 100aad0:	df000b15 	stw	fp,44(sp)
 100aad4:	df000b04 	addi	fp,sp,44
 100aad8:	e13ffe05 	stb	r4,-8(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 100aadc:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
 100aae0:	e0bffe03 	ldbu	r2,-8(fp)
 100aae4:	10800518 	cmpnei	r2,r2,20
 100aae8:	1000031e 	bne	r2,zero,100aaf8 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
 100aaec:	00800f84 	movi	r2,62
 100aaf0:	e0bfff15 	stw	r2,-4(fp)
 100aaf4:	00004c06 	br	100ac28 <OSTaskDelReq+0x15c>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 100aaf8:	e0bffe03 	ldbu	r2,-8(fp)
 100aafc:	10800530 	cmpltui	r2,r2,20
 100ab00:	1000061e 	bne	r2,zero,100ab1c <OSTaskDelReq+0x50>
        if (prio != OS_PRIO_SELF) {
 100ab04:	e0bffe03 	ldbu	r2,-8(fp)
 100ab08:	10803fe0 	cmpeqi	r2,r2,255
 100ab0c:	1000031e 	bne	r2,zero,100ab1c <OSTaskDelReq+0x50>
            return (OS_ERR_PRIO_INVALID);
 100ab10:	00800a84 	movi	r2,42
 100ab14:	e0bfff15 	stw	r2,-4(fp)
 100ab18:	00004306 	br	100ac28 <OSTaskDelReq+0x15c>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
 100ab1c:	e0bffe03 	ldbu	r2,-8(fp)
 100ab20:	10803fd8 	cmpnei	r2,r2,255
 100ab24:	1000141e 	bne	r2,zero,100ab78 <OSTaskDelReq+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100ab28:	0005303a 	rdctl	r2,status
 100ab2c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100ab30:	e0fffa17 	ldw	r3,-24(fp)
 100ab34:	00bfff84 	movi	r2,-2
 100ab38:	1884703a 	and	r2,r3,r2
 100ab3c:	1001703a 	wrctl	status,r2
  
  return context;
 100ab40:	e0bffa17 	ldw	r2,-24(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
 100ab44:	e0bffb15 	stw	r2,-20(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
 100ab48:	00804074 	movhi	r2,257
 100ab4c:	108eb904 	addi	r2,r2,15076
 100ab50:	10800017 	ldw	r2,0(r2)
 100ab54:	10800dc3 	ldbu	r2,55(r2)
 100ab58:	e0bffd05 	stb	r2,-12(fp)
 100ab5c:	e0bffb17 	ldw	r2,-20(fp)
 100ab60:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100ab64:	e0bff917 	ldw	r2,-28(fp)
 100ab68:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
 100ab6c:	e0bffd03 	ldbu	r2,-12(fp)
 100ab70:	e0bfff15 	stw	r2,-4(fp)
 100ab74:	00002c06 	br	100ac28 <OSTaskDelReq+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100ab78:	0005303a 	rdctl	r2,status
 100ab7c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100ab80:	e0fff817 	ldw	r3,-32(fp)
 100ab84:	00bfff84 	movi	r2,-2
 100ab88:	1884703a 	and	r2,r3,r2
 100ab8c:	1001703a 	wrctl	status,r2
  
  return context;
 100ab90:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
 100ab94:	e0bffb15 	stw	r2,-20(fp)
    ptcb = OSTCBPrioTbl[prio];
 100ab98:	e0bffe03 	ldbu	r2,-8(fp)
 100ab9c:	00c040b4 	movhi	r3,258
 100aba0:	18eb3f04 	addi	r3,r3,-21252
 100aba4:	1085883a 	add	r2,r2,r2
 100aba8:	1085883a 	add	r2,r2,r2
 100abac:	10c5883a 	add	r2,r2,r3
 100abb0:	10800017 	ldw	r2,0(r2)
 100abb4:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
 100abb8:	e0bffc17 	ldw	r2,-16(fp)
 100abbc:	1004c03a 	cmpne	r2,r2,zero
 100abc0:	1000071e 	bne	r2,zero,100abe0 <OSTaskDelReq+0x114>
 100abc4:	e0bffb17 	ldw	r2,-20(fp)
 100abc8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100abcc:	e0bff717 	ldw	r2,-36(fp)
 100abd0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
 100abd4:	008010c4 	movi	r2,67
 100abd8:	e0bfff15 	stw	r2,-4(fp)
 100abdc:	00001206 	br	100ac28 <OSTaskDelReq+0x15c>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
 100abe0:	e0bffc17 	ldw	r2,-16(fp)
 100abe4:	10800058 	cmpnei	r2,r2,1
 100abe8:	1000071e 	bne	r2,zero,100ac08 <OSTaskDelReq+0x13c>
 100abec:	e0bffb17 	ldw	r2,-20(fp)
 100abf0:	e0bff615 	stw	r2,-40(fp)
 100abf4:	e0bff617 	ldw	r2,-40(fp)
 100abf8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 100abfc:	00800f44 	movi	r2,61
 100ac00:	e0bfff15 	stw	r2,-4(fp)
 100ac04:	00000806 	br	100ac28 <OSTaskDelReq+0x15c>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
 100ac08:	e0fffc17 	ldw	r3,-16(fp)
 100ac0c:	00800fc4 	movi	r2,63
 100ac10:	18800dc5 	stb	r2,55(r3)
 100ac14:	e0bffb17 	ldw	r2,-20(fp)
 100ac18:	e0bff515 	stw	r2,-44(fp)
 100ac1c:	e0bff517 	ldw	r2,-44(fp)
 100ac20:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 100ac24:	e03fff15 	stw	zero,-4(fp)
 100ac28:	e0bfff17 	ldw	r2,-4(fp)
}
 100ac2c:	e037883a 	mov	sp,fp
 100ac30:	df000017 	ldw	fp,0(sp)
 100ac34:	dec00104 	addi	sp,sp,4
 100ac38:	f800283a 	ret

0100ac3c <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
 100ac3c:	defff304 	addi	sp,sp,-52
 100ac40:	dfc00c15 	stw	ra,48(sp)
 100ac44:	df000b15 	stw	fp,44(sp)
 100ac48:	df000b04 	addi	fp,sp,44
 100ac4c:	e17ffd15 	stw	r5,-12(fp)
 100ac50:	e1bffe15 	stw	r6,-8(fp)
 100ac54:	e13ffc05 	stb	r4,-16(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
 100ac58:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
 100ac5c:	e0bffe17 	ldw	r2,-8(fp)
 100ac60:	1004c03a 	cmpne	r2,r2,zero
 100ac64:	1000021e 	bne	r2,zero,100ac70 <OSTaskNameGet+0x34>
        return (0);
 100ac68:	e03fff15 	stw	zero,-4(fp)
 100ac6c:	00005b06 	br	100addc <OSTaskNameGet+0x1a0>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
 100ac70:	e0bffc03 	ldbu	r2,-16(fp)
 100ac74:	10800570 	cmpltui	r2,r2,21
 100ac78:	1000081e 	bne	r2,zero,100ac9c <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
 100ac7c:	e0bffc03 	ldbu	r2,-16(fp)
 100ac80:	10803fe0 	cmpeqi	r2,r2,255
 100ac84:	1000051e 	bne	r2,zero,100ac9c <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
 100ac88:	e0fffe17 	ldw	r3,-8(fp)
 100ac8c:	00800a84 	movi	r2,42
 100ac90:	18800005 	stb	r2,0(r3)
            return (0);
 100ac94:	e03fff15 	stw	zero,-4(fp)
 100ac98:	00005006 	br	100addc <OSTaskNameGet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
 100ac9c:	e0bffd17 	ldw	r2,-12(fp)
 100aca0:	1004c03a 	cmpne	r2,r2,zero
 100aca4:	1000051e 	bne	r2,zero,100acbc <OSTaskNameGet+0x80>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
 100aca8:	e0fffe17 	ldw	r3,-8(fp)
 100acac:	00800304 	movi	r2,12
 100acb0:	18800005 	stb	r2,0(r3)
        return (0);
 100acb4:	e03fff15 	stw	zero,-4(fp)
 100acb8:	00004806 	br	100addc <OSTaskNameGet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
 100acbc:	00804074 	movhi	r2,257
 100acc0:	108eb804 	addi	r2,r2,15072
 100acc4:	10800003 	ldbu	r2,0(r2)
 100acc8:	10803fcc 	andi	r2,r2,255
 100accc:	1005003a 	cmpeq	r2,r2,zero
 100acd0:	1000051e 	bne	r2,zero,100ace8 <OSTaskNameGet+0xac>
        *perr = OS_ERR_NAME_GET_ISR;
 100acd4:	e0fffe17 	ldw	r3,-8(fp)
 100acd8:	00800444 	movi	r2,17
 100acdc:	18800005 	stb	r2,0(r3)
        return (0);
 100ace0:	e03fff15 	stw	zero,-4(fp)
 100ace4:	00003d06 	br	100addc <OSTaskNameGet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100ace8:	0005303a 	rdctl	r2,status
 100acec:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100acf0:	e0fff817 	ldw	r3,-32(fp)
 100acf4:	00bfff84 	movi	r2,-2
 100acf8:	1884703a 	and	r2,r3,r2
 100acfc:	1001703a 	wrctl	status,r2
  
  return context;
 100ad00:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
 100ad04:	e0bff915 	stw	r2,-28(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
 100ad08:	e0bffc03 	ldbu	r2,-16(fp)
 100ad0c:	10803fd8 	cmpnei	r2,r2,255
 100ad10:	1000051e 	bne	r2,zero,100ad28 <OSTaskNameGet+0xec>
        prio = OSTCBCur->OSTCBPrio;
 100ad14:	00804074 	movhi	r2,257
 100ad18:	108eb904 	addi	r2,r2,15076
 100ad1c:	10800017 	ldw	r2,0(r2)
 100ad20:	10800c83 	ldbu	r2,50(r2)
 100ad24:	e0bffc05 	stb	r2,-16(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 100ad28:	e0bffc03 	ldbu	r2,-16(fp)
 100ad2c:	00c040b4 	movhi	r3,258
 100ad30:	18eb3f04 	addi	r3,r3,-21252
 100ad34:	1085883a 	add	r2,r2,r2
 100ad38:	1085883a 	add	r2,r2,r2
 100ad3c:	10c5883a 	add	r2,r2,r3
 100ad40:	10800017 	ldw	r2,0(r2)
 100ad44:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
 100ad48:	e0bffb17 	ldw	r2,-20(fp)
 100ad4c:	1004c03a 	cmpne	r2,r2,zero
 100ad50:	1000091e 	bne	r2,zero,100ad78 <OSTaskNameGet+0x13c>
 100ad54:	e0bff917 	ldw	r2,-28(fp)
 100ad58:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100ad5c:	e0bff717 	ldw	r2,-36(fp)
 100ad60:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
 100ad64:	e0fffe17 	ldw	r3,-8(fp)
 100ad68:	008010c4 	movi	r2,67
 100ad6c:	18800005 	stb	r2,0(r3)
        return (0);
 100ad70:	e03fff15 	stw	zero,-4(fp)
 100ad74:	00001906 	br	100addc <OSTaskNameGet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
 100ad78:	e0bffb17 	ldw	r2,-20(fp)
 100ad7c:	10800058 	cmpnei	r2,r2,1
 100ad80:	1000091e 	bne	r2,zero,100ada8 <OSTaskNameGet+0x16c>
 100ad84:	e0bff917 	ldw	r2,-28(fp)
 100ad88:	e0bff615 	stw	r2,-40(fp)
 100ad8c:	e0bff617 	ldw	r2,-40(fp)
 100ad90:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
 100ad94:	e0fffe17 	ldw	r3,-8(fp)
 100ad98:	008010c4 	movi	r2,67
 100ad9c:	18800005 	stb	r2,0(r3)
        return (0);
 100ada0:	e03fff15 	stw	zero,-4(fp)
 100ada4:	00000d06 	br	100addc <OSTaskNameGet+0x1a0>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
 100ada8:	e0bffb17 	ldw	r2,-20(fp)
 100adac:	11401304 	addi	r5,r2,76
 100adb0:	e13ffd17 	ldw	r4,-12(fp)
 100adb4:	10056040 	call	1005604 <OS_StrCopy>
 100adb8:	e0bffa05 	stb	r2,-24(fp)
 100adbc:	e0bff917 	ldw	r2,-28(fp)
 100adc0:	e0bff515 	stw	r2,-44(fp)
 100adc4:	e0bff517 	ldw	r2,-44(fp)
 100adc8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 100adcc:	e0bffe17 	ldw	r2,-8(fp)
 100add0:	10000005 	stb	zero,0(r2)
    return (len);
 100add4:	e0bffa03 	ldbu	r2,-24(fp)
 100add8:	e0bfff15 	stw	r2,-4(fp)
 100addc:	e0bfff17 	ldw	r2,-4(fp)
}
 100ade0:	e037883a 	mov	sp,fp
 100ade4:	dfc00117 	ldw	ra,4(sp)
 100ade8:	df000017 	ldw	fp,0(sp)
 100adec:	dec00204 	addi	sp,sp,8
 100adf0:	f800283a 	ret

0100adf4 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
 100adf4:	defff304 	addi	sp,sp,-52
 100adf8:	dfc00c15 	stw	ra,48(sp)
 100adfc:	df000b15 	stw	fp,44(sp)
 100ae00:	df000b04 	addi	fp,sp,44
 100ae04:	e17ffe15 	stw	r5,-8(fp)
 100ae08:	e1bfff15 	stw	r6,-4(fp)
 100ae0c:	e13ffd05 	stb	r4,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 100ae10:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 100ae14:	e0bfff17 	ldw	r2,-4(fp)
 100ae18:	1005003a 	cmpeq	r2,r2,zero
 100ae1c:	1000611e 	bne	r2,zero,100afa4 <OSTaskNameSet+0x1b0>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
 100ae20:	e0bffd03 	ldbu	r2,-12(fp)
 100ae24:	10800570 	cmpltui	r2,r2,21
 100ae28:	1000071e 	bne	r2,zero,100ae48 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
 100ae2c:	e0bffd03 	ldbu	r2,-12(fp)
 100ae30:	10803fe0 	cmpeqi	r2,r2,255
 100ae34:	1000041e 	bne	r2,zero,100ae48 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
 100ae38:	e0ffff17 	ldw	r3,-4(fp)
 100ae3c:	00800a84 	movi	r2,42
 100ae40:	18800005 	stb	r2,0(r3)
            return;
 100ae44:	00005706 	br	100afa4 <OSTaskNameSet+0x1b0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
 100ae48:	e0bffe17 	ldw	r2,-8(fp)
 100ae4c:	1004c03a 	cmpne	r2,r2,zero
 100ae50:	1000041e 	bne	r2,zero,100ae64 <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
 100ae54:	e0ffff17 	ldw	r3,-4(fp)
 100ae58:	00800304 	movi	r2,12
 100ae5c:	18800005 	stb	r2,0(r3)
        return;
 100ae60:	00005006 	br	100afa4 <OSTaskNameSet+0x1b0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
 100ae64:	00804074 	movhi	r2,257
 100ae68:	108eb804 	addi	r2,r2,15072
 100ae6c:	10800003 	ldbu	r2,0(r2)
 100ae70:	10803fcc 	andi	r2,r2,255
 100ae74:	1005003a 	cmpeq	r2,r2,zero
 100ae78:	1000041e 	bne	r2,zero,100ae8c <OSTaskNameSet+0x98>
        *perr = OS_ERR_NAME_SET_ISR;
 100ae7c:	e0ffff17 	ldw	r3,-4(fp)
 100ae80:	00800484 	movi	r2,18
 100ae84:	18800005 	stb	r2,0(r3)
        return;
 100ae88:	00004606 	br	100afa4 <OSTaskNameSet+0x1b0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100ae8c:	0005303a 	rdctl	r2,status
 100ae90:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100ae94:	e0fff917 	ldw	r3,-28(fp)
 100ae98:	00bfff84 	movi	r2,-2
 100ae9c:	1884703a 	and	r2,r3,r2
 100aea0:	1001703a 	wrctl	status,r2
  
  return context;
 100aea4:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 100aea8:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
 100aeac:	e0bffd03 	ldbu	r2,-12(fp)
 100aeb0:	10803fd8 	cmpnei	r2,r2,255
 100aeb4:	1000051e 	bne	r2,zero,100aecc <OSTaskNameSet+0xd8>
        prio = OSTCBCur->OSTCBPrio;
 100aeb8:	00804074 	movhi	r2,257
 100aebc:	108eb904 	addi	r2,r2,15076
 100aec0:	10800017 	ldw	r2,0(r2)
 100aec4:	10800c83 	ldbu	r2,50(r2)
 100aec8:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 100aecc:	e0bffd03 	ldbu	r2,-12(fp)
 100aed0:	00c040b4 	movhi	r3,258
 100aed4:	18eb3f04 	addi	r3,r3,-21252
 100aed8:	1085883a 	add	r2,r2,r2
 100aedc:	1085883a 	add	r2,r2,r2
 100aee0:	10c5883a 	add	r2,r2,r3
 100aee4:	10800017 	ldw	r2,0(r2)
 100aee8:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
 100aeec:	e0bffb17 	ldw	r2,-20(fp)
 100aef0:	1004c03a 	cmpne	r2,r2,zero
 100aef4:	1000081e 	bne	r2,zero,100af18 <OSTaskNameSet+0x124>
 100aef8:	e0bffa17 	ldw	r2,-24(fp)
 100aefc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100af00:	e0bff817 	ldw	r2,-32(fp)
 100af04:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
 100af08:	e0ffff17 	ldw	r3,-4(fp)
 100af0c:	008010c4 	movi	r2,67
 100af10:	18800005 	stb	r2,0(r3)
        return;
 100af14:	00002306 	br	100afa4 <OSTaskNameSet+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
 100af18:	e0bffb17 	ldw	r2,-20(fp)
 100af1c:	10800058 	cmpnei	r2,r2,1
 100af20:	1000081e 	bne	r2,zero,100af44 <OSTaskNameSet+0x150>
 100af24:	e0bffa17 	ldw	r2,-24(fp)
 100af28:	e0bff715 	stw	r2,-36(fp)
 100af2c:	e0bff717 	ldw	r2,-36(fp)
 100af30:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
 100af34:	e0ffff17 	ldw	r3,-4(fp)
 100af38:	008010c4 	movi	r2,67
 100af3c:	18800005 	stb	r2,0(r3)
        return;
 100af40:	00001806 	br	100afa4 <OSTaskNameSet+0x1b0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
 100af44:	e13ffe17 	ldw	r4,-8(fp)
 100af48:	10056840 	call	1005684 <OS_StrLen>
 100af4c:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
 100af50:	e0bffc03 	ldbu	r2,-16(fp)
 100af54:	10800830 	cmpltui	r2,r2,32
 100af58:	1000081e 	bne	r2,zero,100af7c <OSTaskNameSet+0x188>
 100af5c:	e0bffa17 	ldw	r2,-24(fp)
 100af60:	e0bff615 	stw	r2,-40(fp)
 100af64:	e0bff617 	ldw	r2,-40(fp)
 100af68:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
 100af6c:	e0ffff17 	ldw	r3,-4(fp)
 100af70:	00801044 	movi	r2,65
 100af74:	18800005 	stb	r2,0(r3)
        return;
 100af78:	00000a06 	br	100afa4 <OSTaskNameSet+0x1b0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
 100af7c:	e0bffb17 	ldw	r2,-20(fp)
 100af80:	11001304 	addi	r4,r2,76
 100af84:	e17ffe17 	ldw	r5,-8(fp)
 100af88:	10056040 	call	1005604 <OS_StrCopy>
 100af8c:	e0bffa17 	ldw	r2,-24(fp)
 100af90:	e0bff515 	stw	r2,-44(fp)
 100af94:	e0bff517 	ldw	r2,-44(fp)
 100af98:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 100af9c:	e0bfff17 	ldw	r2,-4(fp)
 100afa0:	10000005 	stb	zero,0(r2)
}
 100afa4:	e037883a 	mov	sp,fp
 100afa8:	dfc00117 	ldw	ra,4(sp)
 100afac:	df000017 	ldw	fp,0(sp)
 100afb0:	dec00204 	addi	sp,sp,8
 100afb4:	f800283a 	ret

0100afb8 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
 100afb8:	defff304 	addi	sp,sp,-52
 100afbc:	dfc00c15 	stw	ra,48(sp)
 100afc0:	df000b15 	stw	fp,44(sp)
 100afc4:	df000b04 	addi	fp,sp,44
 100afc8:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 100afcc:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
 100afd0:	e0bffe03 	ldbu	r2,-8(fp)
 100afd4:	10800530 	cmpltui	r2,r2,20
 100afd8:	1000031e 	bne	r2,zero,100afe8 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 100afdc:	00800a84 	movi	r2,42
 100afe0:	e0bfff15 	stw	r2,-4(fp)
 100afe4:	00007406 	br	100b1b8 <OSTaskResume+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100afe8:	0005303a 	rdctl	r2,status
 100afec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100aff0:	e0fffb17 	ldw	r3,-20(fp)
 100aff4:	00bfff84 	movi	r2,-2
 100aff8:	1884703a 	and	r2,r3,r2
 100affc:	1001703a 	wrctl	status,r2
  
  return context;
 100b000:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 100b004:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];
 100b008:	e0bffe03 	ldbu	r2,-8(fp)
 100b00c:	00c040b4 	movhi	r3,258
 100b010:	18eb3f04 	addi	r3,r3,-21252
 100b014:	1085883a 	add	r2,r2,r2
 100b018:	1085883a 	add	r2,r2,r2
 100b01c:	10c5883a 	add	r2,r2,r3
 100b020:	10800017 	ldw	r2,0(r2)
 100b024:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
 100b028:	e0bffd17 	ldw	r2,-12(fp)
 100b02c:	1004c03a 	cmpne	r2,r2,zero
 100b030:	1000071e 	bne	r2,zero,100b050 <OSTaskResume+0x98>
 100b034:	e0bffc17 	ldw	r2,-16(fp)
 100b038:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100b03c:	e0bffa17 	ldw	r2,-24(fp)
 100b040:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
 100b044:	00801184 	movi	r2,70
 100b048:	e0bfff15 	stw	r2,-4(fp)
 100b04c:	00005a06 	br	100b1b8 <OSTaskResume+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
 100b050:	e0bffd17 	ldw	r2,-12(fp)
 100b054:	10800058 	cmpnei	r2,r2,1
 100b058:	1000071e 	bne	r2,zero,100b078 <OSTaskResume+0xc0>
 100b05c:	e0bffc17 	ldw	r2,-16(fp)
 100b060:	e0bff915 	stw	r2,-28(fp)
 100b064:	e0bff917 	ldw	r2,-28(fp)
 100b068:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 100b06c:	008010c4 	movi	r2,67
 100b070:	e0bfff15 	stw	r2,-4(fp)
 100b074:	00005006 	br	100b1b8 <OSTaskResume+0x200>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
 100b078:	e0bffd17 	ldw	r2,-12(fp)
 100b07c:	10800c03 	ldbu	r2,48(r2)
 100b080:	10803fcc 	andi	r2,r2,255
 100b084:	1080020c 	andi	r2,r2,8
 100b088:	1005003a 	cmpeq	r2,r2,zero
 100b08c:	1000441e 	bne	r2,zero,100b1a0 <OSTaskResume+0x1e8>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
 100b090:	e0bffd17 	ldw	r2,-12(fp)
 100b094:	10c00c03 	ldbu	r3,48(r2)
 100b098:	00bffdc4 	movi	r2,-9
 100b09c:	1884703a 	and	r2,r3,r2
 100b0a0:	1007883a 	mov	r3,r2
 100b0a4:	e0bffd17 	ldw	r2,-12(fp)
 100b0a8:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
 100b0ac:	e0bffd17 	ldw	r2,-12(fp)
 100b0b0:	10800c03 	ldbu	r2,48(r2)
 100b0b4:	10803fcc 	andi	r2,r2,255
 100b0b8:	1004c03a 	cmpne	r2,r2,zero
 100b0bc:	1000321e 	bne	r2,zero,100b188 <OSTaskResume+0x1d0>
            if (ptcb->OSTCBDly == 0) {
 100b0c0:	e0bffd17 	ldw	r2,-12(fp)
 100b0c4:	10800b8b 	ldhu	r2,46(r2)
 100b0c8:	10bfffcc 	andi	r2,r2,65535
 100b0cc:	1004c03a 	cmpne	r2,r2,zero
 100b0d0:	1000281e 	bne	r2,zero,100b174 <OSTaskResume+0x1bc>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
 100b0d4:	e0bffd17 	ldw	r2,-12(fp)
 100b0d8:	10c00d83 	ldbu	r3,54(r2)
 100b0dc:	00804074 	movhi	r2,257
 100b0e0:	108eb604 	addi	r2,r2,15064
 100b0e4:	10800003 	ldbu	r2,0(r2)
 100b0e8:	1884b03a 	or	r2,r3,r2
 100b0ec:	1007883a 	mov	r3,r2
 100b0f0:	00804074 	movhi	r2,257
 100b0f4:	108eb604 	addi	r2,r2,15064
 100b0f8:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 100b0fc:	e0bffd17 	ldw	r2,-12(fp)
 100b100:	10800d03 	ldbu	r2,52(r2)
 100b104:	11003fcc 	andi	r4,r2,255
 100b108:	e0bffd17 	ldw	r2,-12(fp)
 100b10c:	10800d03 	ldbu	r2,52(r2)
 100b110:	10c03fcc 	andi	r3,r2,255
 100b114:	00804074 	movhi	r2,257
 100b118:	108eb644 	addi	r2,r2,15065
 100b11c:	10c5883a 	add	r2,r2,r3
 100b120:	10c00003 	ldbu	r3,0(r2)
 100b124:	e0bffd17 	ldw	r2,-12(fp)
 100b128:	10800d43 	ldbu	r2,53(r2)
 100b12c:	1884b03a 	or	r2,r3,r2
 100b130:	1007883a 	mov	r3,r2
 100b134:	00804074 	movhi	r2,257
 100b138:	108eb644 	addi	r2,r2,15065
 100b13c:	1105883a 	add	r2,r2,r4
 100b140:	10c00005 	stb	r3,0(r2)
 100b144:	e0bffc17 	ldw	r2,-16(fp)
 100b148:	e0bff815 	stw	r2,-32(fp)
 100b14c:	e0bff817 	ldw	r2,-32(fp)
 100b150:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
 100b154:	00804074 	movhi	r2,257
 100b158:	108eaa44 	addi	r2,r2,15017
 100b15c:	10800003 	ldbu	r2,0(r2)
 100b160:	10803fcc 	andi	r2,r2,255
 100b164:	10800058 	cmpnei	r2,r2,1
 100b168:	10000b1e 	bne	r2,zero,100b198 <OSTaskResume+0x1e0>
                    OS_Sched();                               /* Find new highest priority task        */
 100b16c:	10054c00 	call	10054c0 <OS_Sched>
 100b170:	00000906 	br	100b198 <OSTaskResume+0x1e0>
 100b174:	e0bffc17 	ldw	r2,-16(fp)
 100b178:	e0bff715 	stw	r2,-36(fp)
 100b17c:	e0bff717 	ldw	r2,-36(fp)
 100b180:	1001703a 	wrctl	status,r2
 100b184:	00000406 	br	100b198 <OSTaskResume+0x1e0>
 100b188:	e0bffc17 	ldw	r2,-16(fp)
 100b18c:	e0bff615 	stw	r2,-40(fp)
 100b190:	e0bff617 	ldw	r2,-40(fp)
 100b194:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
 100b198:	e03fff15 	stw	zero,-4(fp)
 100b19c:	00000606 	br	100b1b8 <OSTaskResume+0x200>
 100b1a0:	e0bffc17 	ldw	r2,-16(fp)
 100b1a4:	e0bff515 	stw	r2,-44(fp)
 100b1a8:	e0bff517 	ldw	r2,-44(fp)
 100b1ac:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
 100b1b0:	00801104 	movi	r2,68
 100b1b4:	e0bfff15 	stw	r2,-4(fp)
 100b1b8:	e0bfff17 	ldw	r2,-4(fp)
}
 100b1bc:	e037883a 	mov	sp,fp
 100b1c0:	dfc00117 	ldw	ra,4(sp)
 100b1c4:	df000017 	ldw	fp,0(sp)
 100b1c8:	dec00204 	addi	sp,sp,8
 100b1cc:	f800283a 	ret

0100b1d0 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
 100b1d0:	defff204 	addi	sp,sp,-56
 100b1d4:	df000d15 	stw	fp,52(sp)
 100b1d8:	df000d04 	addi	fp,sp,52
 100b1dc:	e17ffe15 	stw	r5,-8(fp)
 100b1e0:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 100b1e4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
 100b1e8:	e0bffd03 	ldbu	r2,-12(fp)
 100b1ec:	10800570 	cmpltui	r2,r2,21
 100b1f0:	1000061e 	bne	r2,zero,100b20c <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
 100b1f4:	e0bffd03 	ldbu	r2,-12(fp)
 100b1f8:	10803fe0 	cmpeqi	r2,r2,255
 100b1fc:	1000031e 	bne	r2,zero,100b20c <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
 100b200:	00800a84 	movi	r2,42
 100b204:	e0bfff15 	stw	r2,-4(fp)
 100b208:	00006b06 	br	100b3b8 <OSTaskStkChk+0x1e8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
 100b20c:	e0bffe17 	ldw	r2,-8(fp)
 100b210:	1004c03a 	cmpne	r2,r2,zero
 100b214:	1000031e 	bne	r2,zero,100b224 <OSTaskStkChk+0x54>
        return (OS_ERR_PDATA_NULL);
 100b218:	00800244 	movi	r2,9
 100b21c:	e0bfff15 	stw	r2,-4(fp)
 100b220:	00006506 	br	100b3b8 <OSTaskStkChk+0x1e8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
 100b224:	e0bffe17 	ldw	r2,-8(fp)
 100b228:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
 100b22c:	e0bffe17 	ldw	r2,-8(fp)
 100b230:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100b234:	0005303a 	rdctl	r2,status
 100b238:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100b23c:	e0fff717 	ldw	r3,-36(fp)
 100b240:	00bfff84 	movi	r2,-2
 100b244:	1884703a 	and	r2,r3,r2
 100b248:	1001703a 	wrctl	status,r2
  
  return context;
 100b24c:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
 100b250:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
 100b254:	e0bffd03 	ldbu	r2,-12(fp)
 100b258:	10803fd8 	cmpnei	r2,r2,255
 100b25c:	1000051e 	bne	r2,zero,100b274 <OSTaskStkChk+0xa4>
        prio = OSTCBCur->OSTCBPrio;
 100b260:	00804074 	movhi	r2,257
 100b264:	108eb904 	addi	r2,r2,15076
 100b268:	10800017 	ldw	r2,0(r2)
 100b26c:	10800c83 	ldbu	r2,50(r2)
 100b270:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 100b274:	e0bffd03 	ldbu	r2,-12(fp)
 100b278:	00c040b4 	movhi	r3,258
 100b27c:	18eb3f04 	addi	r3,r3,-21252
 100b280:	1085883a 	add	r2,r2,r2
 100b284:	1085883a 	add	r2,r2,r2
 100b288:	10c5883a 	add	r2,r2,r3
 100b28c:	10800017 	ldw	r2,0(r2)
 100b290:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
 100b294:	e0bffc17 	ldw	r2,-16(fp)
 100b298:	1004c03a 	cmpne	r2,r2,zero
 100b29c:	1000071e 	bne	r2,zero,100b2bc <OSTaskStkChk+0xec>
 100b2a0:	e0bff817 	ldw	r2,-32(fp)
 100b2a4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100b2a8:	e0bff617 	ldw	r2,-40(fp)
 100b2ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 100b2b0:	008010c4 	movi	r2,67
 100b2b4:	e0bfff15 	stw	r2,-4(fp)
 100b2b8:	00003f06 	br	100b3b8 <OSTaskStkChk+0x1e8>
    }
    if (ptcb == OS_TCB_RESERVED) {
 100b2bc:	e0bffc17 	ldw	r2,-16(fp)
 100b2c0:	10800058 	cmpnei	r2,r2,1
 100b2c4:	1000071e 	bne	r2,zero,100b2e4 <OSTaskStkChk+0x114>
 100b2c8:	e0bff817 	ldw	r2,-32(fp)
 100b2cc:	e0bff515 	stw	r2,-44(fp)
 100b2d0:	e0bff517 	ldw	r2,-44(fp)
 100b2d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 100b2d8:	008010c4 	movi	r2,67
 100b2dc:	e0bfff15 	stw	r2,-4(fp)
 100b2e0:	00003506 	br	100b3b8 <OSTaskStkChk+0x1e8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
 100b2e4:	e0bffc17 	ldw	r2,-16(fp)
 100b2e8:	1080040b 	ldhu	r2,16(r2)
 100b2ec:	10bfffcc 	andi	r2,r2,65535
 100b2f0:	1080004c 	andi	r2,r2,1
 100b2f4:	1004c03a 	cmpne	r2,r2,zero
 100b2f8:	1000071e 	bne	r2,zero,100b318 <OSTaskStkChk+0x148>
 100b2fc:	e0bff817 	ldw	r2,-32(fp)
 100b300:	e0bff415 	stw	r2,-48(fp)
 100b304:	e0bff417 	ldw	r2,-48(fp)
 100b308:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
 100b30c:	00801144 	movi	r2,69
 100b310:	e0bfff15 	stw	r2,-4(fp)
 100b314:	00002806 	br	100b3b8 <OSTaskStkChk+0x1e8>
    }
    nfree = 0;
 100b318:	e03ffa15 	stw	zero,-24(fp)
    size  = ptcb->OSTCBStkSize;
 100b31c:	e0bffc17 	ldw	r2,-16(fp)
 100b320:	10800317 	ldw	r2,12(r2)
 100b324:	e0bff915 	stw	r2,-28(fp)
    pchk  = ptcb->OSTCBStkBottom;
 100b328:	e0bffc17 	ldw	r2,-16(fp)
 100b32c:	10800217 	ldw	r2,8(r2)
 100b330:	e0bffb15 	stw	r2,-20(fp)
 100b334:	e0bff817 	ldw	r2,-32(fp)
 100b338:	e0bff315 	stw	r2,-52(fp)
 100b33c:	e0bff317 	ldw	r2,-52(fp)
 100b340:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 100b344:	00000306 	br	100b354 <OSTaskStkChk+0x184>
        nfree++;
 100b348:	e0bffa17 	ldw	r2,-24(fp)
 100b34c:	10800044 	addi	r2,r2,1
 100b350:	e0bffa15 	stw	r2,-24(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 100b354:	e0bffb17 	ldw	r2,-20(fp)
 100b358:	10800017 	ldw	r2,0(r2)
 100b35c:	1005003a 	cmpeq	r2,r2,zero
 100b360:	1007883a 	mov	r3,r2
 100b364:	e0bffb17 	ldw	r2,-20(fp)
 100b368:	10800104 	addi	r2,r2,4
 100b36c:	e0bffb15 	stw	r2,-20(fp)
 100b370:	18803fcc 	andi	r2,r3,255
 100b374:	1004c03a 	cmpne	r2,r2,zero
 100b378:	103ff31e 	bne	r2,zero,100b348 <OSTaskStkChk+0x178>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
 100b37c:	e0bffa17 	ldw	r2,-24(fp)
 100b380:	1085883a 	add	r2,r2,r2
 100b384:	1085883a 	add	r2,r2,r2
 100b388:	1007883a 	mov	r3,r2
 100b38c:	e0bffe17 	ldw	r2,-8(fp)
 100b390:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
 100b394:	e0fff917 	ldw	r3,-28(fp)
 100b398:	e0bffa17 	ldw	r2,-24(fp)
 100b39c:	1885c83a 	sub	r2,r3,r2
 100b3a0:	1085883a 	add	r2,r2,r2
 100b3a4:	1085883a 	add	r2,r2,r2
 100b3a8:	1007883a 	mov	r3,r2
 100b3ac:	e0bffe17 	ldw	r2,-8(fp)
 100b3b0:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
 100b3b4:	e03fff15 	stw	zero,-4(fp)
 100b3b8:	e0bfff17 	ldw	r2,-4(fp)
}
 100b3bc:	e037883a 	mov	sp,fp
 100b3c0:	df000017 	ldw	fp,0(sp)
 100b3c4:	dec00104 	addi	sp,sp,4
 100b3c8:	f800283a 	ret

0100b3cc <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
 100b3cc:	defff404 	addi	sp,sp,-48
 100b3d0:	dfc00b15 	stw	ra,44(sp)
 100b3d4:	df000a15 	stw	fp,40(sp)
 100b3d8:	df000a04 	addi	fp,sp,40
 100b3dc:	e13ffe05 	stb	r4,-8(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 100b3e0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
 100b3e4:	e0bffe03 	ldbu	r2,-8(fp)
 100b3e8:	10800518 	cmpnei	r2,r2,20
 100b3ec:	1000031e 	bne	r2,zero,100b3fc <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
 100b3f0:	008011c4 	movi	r2,71
 100b3f4:	e0bfff15 	stw	r2,-4(fp)
 100b3f8:	00007906 	br	100b5e0 <OSTaskSuspend+0x214>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 100b3fc:	e0bffe03 	ldbu	r2,-8(fp)
 100b400:	10800530 	cmpltui	r2,r2,20
 100b404:	1000061e 	bne	r2,zero,100b420 <OSTaskSuspend+0x54>
        if (prio != OS_PRIO_SELF) {
 100b408:	e0bffe03 	ldbu	r2,-8(fp)
 100b40c:	10803fe0 	cmpeqi	r2,r2,255
 100b410:	1000031e 	bne	r2,zero,100b420 <OSTaskSuspend+0x54>
            return (OS_ERR_PRIO_INVALID);
 100b414:	00800a84 	movi	r2,42
 100b418:	e0bfff15 	stw	r2,-4(fp)
 100b41c:	00007006 	br	100b5e0 <OSTaskSuspend+0x214>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100b420:	0005303a 	rdctl	r2,status
 100b424:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100b428:	e0fff917 	ldw	r3,-28(fp)
 100b42c:	00bfff84 	movi	r2,-2
 100b430:	1884703a 	and	r2,r3,r2
 100b434:	1001703a 	wrctl	status,r2
  
  return context;
 100b438:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
 100b43c:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
 100b440:	e0bffe03 	ldbu	r2,-8(fp)
 100b444:	10803fd8 	cmpnei	r2,r2,255
 100b448:	1000081e 	bne	r2,zero,100b46c <OSTaskSuspend+0xa0>
        prio = OSTCBCur->OSTCBPrio;
 100b44c:	00804074 	movhi	r2,257
 100b450:	108eb904 	addi	r2,r2,15076
 100b454:	10800017 	ldw	r2,0(r2)
 100b458:	10800c83 	ldbu	r2,50(r2)
 100b45c:	e0bffe05 	stb	r2,-8(fp)
        self = OS_TRUE;
 100b460:	00800044 	movi	r2,1
 100b464:	e0bffd05 	stb	r2,-12(fp)
 100b468:	00000b06 	br	100b498 <OSTaskSuspend+0xcc>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
 100b46c:	00804074 	movhi	r2,257
 100b470:	108eb904 	addi	r2,r2,15076
 100b474:	10800017 	ldw	r2,0(r2)
 100b478:	10800c83 	ldbu	r2,50(r2)
 100b47c:	10c03fcc 	andi	r3,r2,255
 100b480:	e0bffe03 	ldbu	r2,-8(fp)
 100b484:	1880031e 	bne	r3,r2,100b494 <OSTaskSuspend+0xc8>
        self = OS_TRUE;
 100b488:	00800044 	movi	r2,1
 100b48c:	e0bffd05 	stb	r2,-12(fp)
 100b490:	00000106 	br	100b498 <OSTaskSuspend+0xcc>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
 100b494:	e03ffd05 	stb	zero,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 100b498:	e0bffe03 	ldbu	r2,-8(fp)
 100b49c:	00c040b4 	movhi	r3,258
 100b4a0:	18eb3f04 	addi	r3,r3,-21252
 100b4a4:	1085883a 	add	r2,r2,r2
 100b4a8:	1085883a 	add	r2,r2,r2
 100b4ac:	10c5883a 	add	r2,r2,r3
 100b4b0:	10800017 	ldw	r2,0(r2)
 100b4b4:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
 100b4b8:	e0bffc17 	ldw	r2,-16(fp)
 100b4bc:	1004c03a 	cmpne	r2,r2,zero
 100b4c0:	1000071e 	bne	r2,zero,100b4e0 <OSTaskSuspend+0x114>
 100b4c4:	e0bffa17 	ldw	r2,-24(fp)
 100b4c8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100b4cc:	e0bff817 	ldw	r2,-32(fp)
 100b4d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
 100b4d4:	00801204 	movi	r2,72
 100b4d8:	e0bfff15 	stw	r2,-4(fp)
 100b4dc:	00004006 	br	100b5e0 <OSTaskSuspend+0x214>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
 100b4e0:	e0bffc17 	ldw	r2,-16(fp)
 100b4e4:	10800058 	cmpnei	r2,r2,1
 100b4e8:	1000071e 	bne	r2,zero,100b508 <OSTaskSuspend+0x13c>
 100b4ec:	e0bffa17 	ldw	r2,-24(fp)
 100b4f0:	e0bff715 	stw	r2,-36(fp)
 100b4f4:	e0bff717 	ldw	r2,-36(fp)
 100b4f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 100b4fc:	008010c4 	movi	r2,67
 100b500:	e0bfff15 	stw	r2,-4(fp)
 100b504:	00003606 	br	100b5e0 <OSTaskSuspend+0x214>
    }
    y            = ptcb->OSTCBY;
 100b508:	e0bffc17 	ldw	r2,-16(fp)
 100b50c:	10800d03 	ldbu	r2,52(r2)
 100b510:	e0bffb05 	stb	r2,-20(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
 100b514:	e13ffb03 	ldbu	r4,-20(fp)
 100b518:	e0fffb03 	ldbu	r3,-20(fp)
 100b51c:	00804074 	movhi	r2,257
 100b520:	108eb644 	addi	r2,r2,15065
 100b524:	10c5883a 	add	r2,r2,r3
 100b528:	10800003 	ldbu	r2,0(r2)
 100b52c:	1007883a 	mov	r3,r2
 100b530:	e0bffc17 	ldw	r2,-16(fp)
 100b534:	10800d43 	ldbu	r2,53(r2)
 100b538:	0084303a 	nor	r2,zero,r2
 100b53c:	1884703a 	and	r2,r3,r2
 100b540:	1007883a 	mov	r3,r2
 100b544:	00804074 	movhi	r2,257
 100b548:	108eb644 	addi	r2,r2,15065
 100b54c:	1105883a 	add	r2,r2,r4
 100b550:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
 100b554:	e0fffb03 	ldbu	r3,-20(fp)
 100b558:	00804074 	movhi	r2,257
 100b55c:	108eb644 	addi	r2,r2,15065
 100b560:	10c5883a 	add	r2,r2,r3
 100b564:	10800003 	ldbu	r2,0(r2)
 100b568:	10803fcc 	andi	r2,r2,255
 100b56c:	1004c03a 	cmpne	r2,r2,zero
 100b570:	10000c1e 	bne	r2,zero,100b5a4 <OSTaskSuspend+0x1d8>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
 100b574:	e0bffc17 	ldw	r2,-16(fp)
 100b578:	10800d83 	ldbu	r2,54(r2)
 100b57c:	0084303a 	nor	r2,zero,r2
 100b580:	1007883a 	mov	r3,r2
 100b584:	00804074 	movhi	r2,257
 100b588:	108eb604 	addi	r2,r2,15064
 100b58c:	10800003 	ldbu	r2,0(r2)
 100b590:	1884703a 	and	r2,r3,r2
 100b594:	1007883a 	mov	r3,r2
 100b598:	00804074 	movhi	r2,257
 100b59c:	108eb604 	addi	r2,r2,15064
 100b5a0:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
 100b5a4:	e0bffc17 	ldw	r2,-16(fp)
 100b5a8:	10800c03 	ldbu	r2,48(r2)
 100b5ac:	10800214 	ori	r2,r2,8
 100b5b0:	1007883a 	mov	r3,r2
 100b5b4:	e0bffc17 	ldw	r2,-16(fp)
 100b5b8:	10c00c05 	stb	r3,48(r2)
 100b5bc:	e0bffa17 	ldw	r2,-24(fp)
 100b5c0:	e0bff615 	stw	r2,-40(fp)
 100b5c4:	e0bff617 	ldw	r2,-40(fp)
 100b5c8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
 100b5cc:	e0bffd03 	ldbu	r2,-12(fp)
 100b5d0:	10800058 	cmpnei	r2,r2,1
 100b5d4:	1000011e 	bne	r2,zero,100b5dc <OSTaskSuspend+0x210>
        OS_Sched();                                             /* Find new highest priority task      */
 100b5d8:	10054c00 	call	10054c0 <OS_Sched>
    }
    return (OS_ERR_NONE);
 100b5dc:	e03fff15 	stw	zero,-4(fp)
 100b5e0:	e0bfff17 	ldw	r2,-4(fp)
}
 100b5e4:	e037883a 	mov	sp,fp
 100b5e8:	dfc00117 	ldw	ra,4(sp)
 100b5ec:	df000017 	ldw	fp,0(sp)
 100b5f0:	dec00204 	addi	sp,sp,8
 100b5f4:	f800283a 	ret

0100b5f8 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
 100b5f8:	defff504 	addi	sp,sp,-44
 100b5fc:	dfc00a15 	stw	ra,40(sp)
 100b600:	df000915 	stw	fp,36(sp)
 100b604:	df000904 	addi	fp,sp,36
 100b608:	e17ffe15 	stw	r5,-8(fp)
 100b60c:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 100b610:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
 100b614:	e0bffd03 	ldbu	r2,-12(fp)
 100b618:	10800570 	cmpltui	r2,r2,21
 100b61c:	1000061e 	bne	r2,zero,100b638 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
 100b620:	e0bffd03 	ldbu	r2,-12(fp)
 100b624:	10803fe0 	cmpeqi	r2,r2,255
 100b628:	1000031e 	bne	r2,zero,100b638 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
 100b62c:	00800a84 	movi	r2,42
 100b630:	e0bfff15 	stw	r2,-4(fp)
 100b634:	00003b06 	br	100b724 <OSTaskQuery+0x12c>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
 100b638:	e0bffe17 	ldw	r2,-8(fp)
 100b63c:	1004c03a 	cmpne	r2,r2,zero
 100b640:	1000031e 	bne	r2,zero,100b650 <OSTaskQuery+0x58>
        return (OS_ERR_PDATA_NULL);
 100b644:	00800244 	movi	r2,9
 100b648:	e0bfff15 	stw	r2,-4(fp)
 100b64c:	00003506 	br	100b724 <OSTaskQuery+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100b650:	0005303a 	rdctl	r2,status
 100b654:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100b658:	e0fffa17 	ldw	r3,-24(fp)
 100b65c:	00bfff84 	movi	r2,-2
 100b660:	1884703a 	and	r2,r3,r2
 100b664:	1001703a 	wrctl	status,r2
  
  return context;
 100b668:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 100b66c:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
 100b670:	e0bffd03 	ldbu	r2,-12(fp)
 100b674:	10803fd8 	cmpnei	r2,r2,255
 100b678:	1000051e 	bne	r2,zero,100b690 <OSTaskQuery+0x98>
        prio = OSTCBCur->OSTCBPrio;
 100b67c:	00804074 	movhi	r2,257
 100b680:	108eb904 	addi	r2,r2,15076
 100b684:	10800017 	ldw	r2,0(r2)
 100b688:	10800c83 	ldbu	r2,50(r2)
 100b68c:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 100b690:	e0bffd03 	ldbu	r2,-12(fp)
 100b694:	00c040b4 	movhi	r3,258
 100b698:	18eb3f04 	addi	r3,r3,-21252
 100b69c:	1085883a 	add	r2,r2,r2
 100b6a0:	1085883a 	add	r2,r2,r2
 100b6a4:	10c5883a 	add	r2,r2,r3
 100b6a8:	10800017 	ldw	r2,0(r2)
 100b6ac:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
 100b6b0:	e0bffc17 	ldw	r2,-16(fp)
 100b6b4:	1004c03a 	cmpne	r2,r2,zero
 100b6b8:	1000071e 	bne	r2,zero,100b6d8 <OSTaskQuery+0xe0>
 100b6bc:	e0bffb17 	ldw	r2,-20(fp)
 100b6c0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100b6c4:	e0bff917 	ldw	r2,-28(fp)
 100b6c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
 100b6cc:	00800a44 	movi	r2,41
 100b6d0:	e0bfff15 	stw	r2,-4(fp)
 100b6d4:	00001306 	br	100b724 <OSTaskQuery+0x12c>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
 100b6d8:	e0bffc17 	ldw	r2,-16(fp)
 100b6dc:	10800058 	cmpnei	r2,r2,1
 100b6e0:	1000071e 	bne	r2,zero,100b700 <OSTaskQuery+0x108>
 100b6e4:	e0bffb17 	ldw	r2,-20(fp)
 100b6e8:	e0bff815 	stw	r2,-32(fp)
 100b6ec:	e0bff817 	ldw	r2,-32(fp)
 100b6f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 100b6f4:	008010c4 	movi	r2,67
 100b6f8:	e0bfff15 	stw	r2,-4(fp)
 100b6fc:	00000906 	br	100b724 <OSTaskQuery+0x12c>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
 100b700:	e13ffe17 	ldw	r4,-8(fp)
 100b704:	e17ffc17 	ldw	r5,-16(fp)
 100b708:	01801b04 	movi	r6,108
 100b70c:	10054540 	call	1005454 <OS_MemCopy>
 100b710:	e0bffb17 	ldw	r2,-20(fp)
 100b714:	e0bff715 	stw	r2,-36(fp)
 100b718:	e0bff717 	ldw	r2,-36(fp)
 100b71c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 100b720:	e03fff15 	stw	zero,-4(fp)
 100b724:	e0bfff17 	ldw	r2,-4(fp)
}
 100b728:	e037883a 	mov	sp,fp
 100b72c:	dfc00117 	ldw	ra,4(sp)
 100b730:	df000017 	ldw	fp,0(sp)
 100b734:	dec00204 	addi	sp,sp,8
 100b738:	f800283a 	ret

0100b73c <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
 100b73c:	defffc04 	addi	sp,sp,-16
 100b740:	df000315 	stw	fp,12(sp)
 100b744:	df000304 	addi	fp,sp,12
 100b748:	e13ffd15 	stw	r4,-12(fp)
 100b74c:	e17ffe15 	stw	r5,-8(fp)
 100b750:	e1bfff0d 	sth	r6,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
 100b754:	e0bfff0b 	ldhu	r2,-4(fp)
 100b758:	1080004c 	andi	r2,r2,1
 100b75c:	10803fcc 	andi	r2,r2,255
 100b760:	1005003a 	cmpeq	r2,r2,zero
 100b764:	1000101e 	bne	r2,zero,100b7a8 <OS_TaskStkClr+0x6c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
 100b768:	e0bfff0b 	ldhu	r2,-4(fp)
 100b76c:	1080008c 	andi	r2,r2,2
 100b770:	1005003a 	cmpeq	r2,r2,zero
 100b774:	10000c1e 	bne	r2,zero,100b7a8 <OS_TaskStkClr+0x6c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 100b778:	00000806 	br	100b79c <OS_TaskStkClr+0x60>
                size--;
 100b77c:	e0bffe17 	ldw	r2,-8(fp)
 100b780:	10bfffc4 	addi	r2,r2,-1
 100b784:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
 100b788:	e0bffd17 	ldw	r2,-12(fp)
 100b78c:	10000015 	stw	zero,0(r2)
 100b790:	e0bffd17 	ldw	r2,-12(fp)
 100b794:	10800104 	addi	r2,r2,4
 100b798:	e0bffd15 	stw	r2,-12(fp)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 100b79c:	e0bffe17 	ldw	r2,-8(fp)
 100b7a0:	1004c03a 	cmpne	r2,r2,zero
 100b7a4:	103ff51e 	bne	r2,zero,100b77c <OS_TaskStkClr+0x40>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
 100b7a8:	e037883a 	mov	sp,fp
 100b7ac:	df000017 	ldw	fp,0(sp)
 100b7b0:	dec00104 	addi	sp,sp,4
 100b7b4:	f800283a 	ret

0100b7b8 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
 100b7b8:	defff904 	addi	sp,sp,-28
 100b7bc:	dfc00615 	stw	ra,24(sp)
 100b7c0:	df000515 	stw	fp,20(sp)
 100b7c4:	df000504 	addi	fp,sp,20
 100b7c8:	e13fff0d 	sth	r4,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 100b7cc:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 100b7d0:	00804074 	movhi	r2,257
 100b7d4:	108eb804 	addi	r2,r2,15072
 100b7d8:	10800003 	ldbu	r2,0(r2)
 100b7dc:	10803fcc 	andi	r2,r2,255
 100b7e0:	1004c03a 	cmpne	r2,r2,zero
 100b7e4:	1000421e 	bne	r2,zero,100b8f0 <OSTimeDly+0x138>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
 100b7e8:	e0bfff0b 	ldhu	r2,-4(fp)
 100b7ec:	1005003a 	cmpeq	r2,r2,zero
 100b7f0:	10003f1e 	bne	r2,zero,100b8f0 <OSTimeDly+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100b7f4:	0005303a 	rdctl	r2,status
 100b7f8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100b7fc:	e0fffc17 	ldw	r3,-16(fp)
 100b800:	00bfff84 	movi	r2,-2
 100b804:	1884703a 	and	r2,r3,r2
 100b808:	1001703a 	wrctl	status,r2
  
  return context;
 100b80c:	e0bffc17 	ldw	r2,-16(fp)
        OS_ENTER_CRITICAL();
 100b810:	e0bffd15 	stw	r2,-12(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
 100b814:	00804074 	movhi	r2,257
 100b818:	108eb904 	addi	r2,r2,15076
 100b81c:	10800017 	ldw	r2,0(r2)
 100b820:	10800d03 	ldbu	r2,52(r2)
 100b824:	e0bffe05 	stb	r2,-8(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 100b828:	e13ffe03 	ldbu	r4,-8(fp)
 100b82c:	e0fffe03 	ldbu	r3,-8(fp)
 100b830:	00804074 	movhi	r2,257
 100b834:	108eb644 	addi	r2,r2,15065
 100b838:	10c5883a 	add	r2,r2,r3
 100b83c:	10800003 	ldbu	r2,0(r2)
 100b840:	1007883a 	mov	r3,r2
 100b844:	00804074 	movhi	r2,257
 100b848:	108eb904 	addi	r2,r2,15076
 100b84c:	10800017 	ldw	r2,0(r2)
 100b850:	10800d43 	ldbu	r2,53(r2)
 100b854:	0084303a 	nor	r2,zero,r2
 100b858:	1884703a 	and	r2,r3,r2
 100b85c:	1007883a 	mov	r3,r2
 100b860:	00804074 	movhi	r2,257
 100b864:	108eb644 	addi	r2,r2,15065
 100b868:	1105883a 	add	r2,r2,r4
 100b86c:	10c00005 	stb	r3,0(r2)
        if (OSRdyTbl[y] == 0) {
 100b870:	e0fffe03 	ldbu	r3,-8(fp)
 100b874:	00804074 	movhi	r2,257
 100b878:	108eb644 	addi	r2,r2,15065
 100b87c:	10c5883a 	add	r2,r2,r3
 100b880:	10800003 	ldbu	r2,0(r2)
 100b884:	10803fcc 	andi	r2,r2,255
 100b888:	1004c03a 	cmpne	r2,r2,zero
 100b88c:	10000e1e 	bne	r2,zero,100b8c8 <OSTimeDly+0x110>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 100b890:	00804074 	movhi	r2,257
 100b894:	108eb904 	addi	r2,r2,15076
 100b898:	10800017 	ldw	r2,0(r2)
 100b89c:	10800d83 	ldbu	r2,54(r2)
 100b8a0:	0084303a 	nor	r2,zero,r2
 100b8a4:	1007883a 	mov	r3,r2
 100b8a8:	00804074 	movhi	r2,257
 100b8ac:	108eb604 	addi	r2,r2,15064
 100b8b0:	10800003 	ldbu	r2,0(r2)
 100b8b4:	1884703a 	and	r2,r3,r2
 100b8b8:	1007883a 	mov	r3,r2
 100b8bc:	00804074 	movhi	r2,257
 100b8c0:	108eb604 	addi	r2,r2,15064
 100b8c4:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
 100b8c8:	00804074 	movhi	r2,257
 100b8cc:	108eb904 	addi	r2,r2,15076
 100b8d0:	10c00017 	ldw	r3,0(r2)
 100b8d4:	e0bfff0b 	ldhu	r2,-4(fp)
 100b8d8:	18800b8d 	sth	r2,46(r3)
 100b8dc:	e0bffd17 	ldw	r2,-12(fp)
 100b8e0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100b8e4:	e0bffb17 	ldw	r2,-20(fp)
 100b8e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
 100b8ec:	10054c00 	call	10054c0 <OS_Sched>
    }
}
 100b8f0:	e037883a 	mov	sp,fp
 100b8f4:	dfc00117 	ldw	ra,4(sp)
 100b8f8:	df000017 	ldw	fp,0(sp)
 100b8fc:	dec00204 	addi	sp,sp,8
 100b900:	f800283a 	ret

0100b904 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
 100b904:	defff504 	addi	sp,sp,-44
 100b908:	dfc00a15 	stw	ra,40(sp)
 100b90c:	df000915 	stw	fp,36(sp)
 100b910:	dc400815 	stw	r17,32(sp)
 100b914:	dc000715 	stw	r16,28(sp)
 100b918:	df000704 	addi	fp,sp,28
 100b91c:	e13ffb05 	stb	r4,-20(fp)
 100b920:	e17ffc05 	stb	r5,-16(fp)
 100b924:	e1bffd05 	stb	r6,-12(fp)
 100b928:	e1fffe0d 	sth	r7,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 100b92c:	00804074 	movhi	r2,257
 100b930:	108eb804 	addi	r2,r2,15072
 100b934:	10800003 	ldbu	r2,0(r2)
 100b938:	10803fcc 	andi	r2,r2,255
 100b93c:	1005003a 	cmpeq	r2,r2,zero
 100b940:	1000031e 	bne	r2,zero,100b950 <OSTimeDlyHMSM+0x4c>
        return (OS_ERR_TIME_DLY_ISR);
 100b944:	00801544 	movi	r2,85
 100b948:	e0bfff15 	stw	r2,-4(fp)
 100b94c:	00007b06 	br	100bb3c <OSTimeDlyHMSM+0x238>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
 100b950:	e0bffb03 	ldbu	r2,-20(fp)
 100b954:	1004c03a 	cmpne	r2,r2,zero
 100b958:	10000c1e 	bne	r2,zero,100b98c <OSTimeDlyHMSM+0x88>
        if (minutes == 0) {
 100b95c:	e0bffc03 	ldbu	r2,-16(fp)
 100b960:	1004c03a 	cmpne	r2,r2,zero
 100b964:	1000091e 	bne	r2,zero,100b98c <OSTimeDlyHMSM+0x88>
            if (seconds == 0) {
 100b968:	e0bffd03 	ldbu	r2,-12(fp)
 100b96c:	1004c03a 	cmpne	r2,r2,zero
 100b970:	1000061e 	bne	r2,zero,100b98c <OSTimeDlyHMSM+0x88>
                if (ms == 0) {
 100b974:	e0bffe0b 	ldhu	r2,-8(fp)
 100b978:	1004c03a 	cmpne	r2,r2,zero
 100b97c:	1000031e 	bne	r2,zero,100b98c <OSTimeDlyHMSM+0x88>
                    return (OS_ERR_TIME_ZERO_DLY);
 100b980:	00801504 	movi	r2,84
 100b984:	e0bfff15 	stw	r2,-4(fp)
 100b988:	00006c06 	br	100bb3c <OSTimeDlyHMSM+0x238>
                }
            }
        }
    }
    if (minutes > 59) {
 100b98c:	e0bffc03 	ldbu	r2,-16(fp)
 100b990:	10800f30 	cmpltui	r2,r2,60
 100b994:	1000031e 	bne	r2,zero,100b9a4 <OSTimeDlyHMSM+0xa0>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
 100b998:	00801444 	movi	r2,81
 100b99c:	e0bfff15 	stw	r2,-4(fp)
 100b9a0:	00006606 	br	100bb3c <OSTimeDlyHMSM+0x238>
    }
    if (seconds > 59) {
 100b9a4:	e0bffd03 	ldbu	r2,-12(fp)
 100b9a8:	10800f30 	cmpltui	r2,r2,60
 100b9ac:	1000031e 	bne	r2,zero,100b9bc <OSTimeDlyHMSM+0xb8>
        return (OS_ERR_TIME_INVALID_SECONDS);
 100b9b0:	00801484 	movi	r2,82
 100b9b4:	e0bfff15 	stw	r2,-4(fp)
 100b9b8:	00006006 	br	100bb3c <OSTimeDlyHMSM+0x238>
    }
    if (ms > 999) {
 100b9bc:	e0bffe0b 	ldhu	r2,-8(fp)
 100b9c0:	1080fa30 	cmpltui	r2,r2,1000
 100b9c4:	1000031e 	bne	r2,zero,100b9d4 <OSTimeDlyHMSM+0xd0>
        return (OS_ERR_TIME_INVALID_MS);
 100b9c8:	008014c4 	movi	r2,83
 100b9cc:	e0bfff15 	stw	r2,-4(fp)
 100b9d0:	00005a06 	br	100bb3c <OSTimeDlyHMSM+0x238>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
 100b9d4:	e13ffb03 	ldbu	r4,-20(fp)
 100b9d8:	01438404 	movi	r5,3600
 100b9dc:	1002c3c0 	call	1002c3c <__mulsi3>
 100b9e0:	1021883a 	mov	r16,r2
 100b9e4:	e13ffc03 	ldbu	r4,-16(fp)
 100b9e8:	01400f04 	movi	r5,60
 100b9ec:	1002c3c0 	call	1002c3c <__mulsi3>
 100b9f0:	8087883a 	add	r3,r16,r2
 100b9f4:	e0bffd03 	ldbu	r2,-12(fp)
 100b9f8:	1889883a 	add	r4,r3,r2
 100b9fc:	100f5d40 	call	100f5d4 <__floatunsidf>
 100ba00:	100b883a 	mov	r5,r2
 100ba04:	180d883a 	mov	r6,r3
 100ba08:	2809883a 	mov	r4,r5
 100ba0c:	300b883a 	mov	r5,r6
 100ba10:	000d883a 	mov	r6,zero
 100ba14:	01d023f4 	movhi	r7,16527
 100ba18:	39d00004 	addi	r7,r7,16384
 100ba1c:	100ee580 	call	100ee58 <__muldf3>
 100ba20:	1009883a 	mov	r4,r2
 100ba24:	180b883a 	mov	r5,r3
 100ba28:	2021883a 	mov	r16,r4
 100ba2c:	2823883a 	mov	r17,r5
 100ba30:	e13ffe0b 	ldhu	r4,-8(fp)
 100ba34:	100f5d40 	call	100f5d4 <__floatunsidf>
 100ba38:	100b883a 	mov	r5,r2
 100ba3c:	180d883a 	mov	r6,r3
 100ba40:	2809883a 	mov	r4,r5
 100ba44:	300b883a 	mov	r5,r6
 100ba48:	000d883a 	mov	r6,zero
 100ba4c:	01cff834 	movhi	r7,16352
 100ba50:	100ede40 	call	100ede4 <__adddf3>
 100ba54:	1009883a 	mov	r4,r2
 100ba58:	180b883a 	mov	r5,r3
 100ba5c:	2005883a 	mov	r2,r4
 100ba60:	2807883a 	mov	r3,r5
 100ba64:	1009883a 	mov	r4,r2
 100ba68:	180b883a 	mov	r5,r3
 100ba6c:	000d883a 	mov	r6,zero
 100ba70:	01d023f4 	movhi	r7,16527
 100ba74:	39d00004 	addi	r7,r7,16384
 100ba78:	100ee580 	call	100ee58 <__muldf3>
 100ba7c:	1009883a 	mov	r4,r2
 100ba80:	180b883a 	mov	r5,r3
 100ba84:	2005883a 	mov	r2,r4
 100ba88:	2807883a 	mov	r3,r5
 100ba8c:	1009883a 	mov	r4,r2
 100ba90:	180b883a 	mov	r5,r3
 100ba94:	000d883a 	mov	r6,zero
 100ba98:	01d023f4 	movhi	r7,16527
 100ba9c:	39d00004 	addi	r7,r7,16384
 100baa0:	100f21c0 	call	100f21c <__divdf3>
 100baa4:	1009883a 	mov	r4,r2
 100baa8:	180b883a 	mov	r5,r3
 100baac:	2005883a 	mov	r2,r4
 100bab0:	2807883a 	mov	r3,r5
 100bab4:	8009883a 	mov	r4,r16
 100bab8:	880b883a 	mov	r5,r17
 100babc:	100d883a 	mov	r6,r2
 100bac0:	180f883a 	mov	r7,r3
 100bac4:	100ede40 	call	100ede4 <__adddf3>
 100bac8:	1009883a 	mov	r4,r2
 100bacc:	180b883a 	mov	r5,r3
 100bad0:	2005883a 	mov	r2,r4
 100bad4:	2807883a 	mov	r3,r5
 100bad8:	1009883a 	mov	r4,r2
 100badc:	180b883a 	mov	r5,r3
 100bae0:	100e8b00 	call	100e8b0 <__fixunsdfsi>
 100bae4:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
 100bae8:	e0bffa17 	ldw	r2,-24(fp)
 100baec:	1004d43a 	srli	r2,r2,16
 100baf0:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
 100baf4:	e0bffa17 	ldw	r2,-24(fp)
 100baf8:	10bfffcc 	andi	r2,r2,65535
 100bafc:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
 100bb00:	e0bffa17 	ldw	r2,-24(fp)
 100bb04:	113fffcc 	andi	r4,r2,65535
 100bb08:	100b7b80 	call	100b7b8 <OSTimeDly>
    while (loops > 0) {
 100bb0c:	00000706 	br	100bb2c <OSTimeDlyHMSM+0x228>
        OSTimeDly((INT16U)32768u);
 100bb10:	01200014 	movui	r4,32768
 100bb14:	100b7b80 	call	100b7b8 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
 100bb18:	01200014 	movui	r4,32768
 100bb1c:	100b7b80 	call	100b7b8 <OSTimeDly>
        loops--;
 100bb20:	e0bff90b 	ldhu	r2,-28(fp)
 100bb24:	10bfffc4 	addi	r2,r2,-1
 100bb28:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
 100bb2c:	e0bff90b 	ldhu	r2,-28(fp)
 100bb30:	1004c03a 	cmpne	r2,r2,zero
 100bb34:	103ff61e 	bne	r2,zero,100bb10 <OSTimeDlyHMSM+0x20c>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
 100bb38:	e03fff15 	stw	zero,-4(fp)
 100bb3c:	e0bfff17 	ldw	r2,-4(fp)
}
 100bb40:	e037883a 	mov	sp,fp
 100bb44:	dfc00317 	ldw	ra,12(sp)
 100bb48:	df000217 	ldw	fp,8(sp)
 100bb4c:	dc400117 	ldw	r17,4(sp)
 100bb50:	dc000017 	ldw	r16,0(sp)
 100bb54:	dec00404 	addi	sp,sp,16
 100bb58:	f800283a 	ret

0100bb5c <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
 100bb5c:	defff404 	addi	sp,sp,-48
 100bb60:	dfc00b15 	stw	ra,44(sp)
 100bb64:	df000a15 	stw	fp,40(sp)
 100bb68:	df000a04 	addi	fp,sp,40
 100bb6c:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 100bb70:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
 100bb74:	e0bffe03 	ldbu	r2,-8(fp)
 100bb78:	10800530 	cmpltui	r2,r2,20
 100bb7c:	1000031e 	bne	r2,zero,100bb8c <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 100bb80:	00800a84 	movi	r2,42
 100bb84:	e0bfff15 	stw	r2,-4(fp)
 100bb88:	00007206 	br	100bd54 <OSTimeDlyResume+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100bb8c:	0005303a 	rdctl	r2,status
 100bb90:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100bb94:	e0fffb17 	ldw	r3,-20(fp)
 100bb98:	00bfff84 	movi	r2,-2
 100bb9c:	1884703a 	and	r2,r3,r2
 100bba0:	1001703a 	wrctl	status,r2
  
  return context;
 100bba4:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 100bba8:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
 100bbac:	e0bffe03 	ldbu	r2,-8(fp)
 100bbb0:	00c040b4 	movhi	r3,258
 100bbb4:	18eb3f04 	addi	r3,r3,-21252
 100bbb8:	1085883a 	add	r2,r2,r2
 100bbbc:	1085883a 	add	r2,r2,r2
 100bbc0:	10c5883a 	add	r2,r2,r3
 100bbc4:	10800017 	ldw	r2,0(r2)
 100bbc8:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {
 100bbcc:	e0bffd17 	ldw	r2,-12(fp)
 100bbd0:	1004c03a 	cmpne	r2,r2,zero
 100bbd4:	1000071e 	bne	r2,zero,100bbf4 <OSTimeDlyResume+0x98>
 100bbd8:	e0bffc17 	ldw	r2,-16(fp)
 100bbdc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100bbe0:	e0bffa17 	ldw	r2,-24(fp)
 100bbe4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 100bbe8:	008010c4 	movi	r2,67
 100bbec:	e0bfff15 	stw	r2,-4(fp)
 100bbf0:	00005806 	br	100bd54 <OSTimeDlyResume+0x1f8>
    }
    if (ptcb == OS_TCB_RESERVED) {
 100bbf4:	e0bffd17 	ldw	r2,-12(fp)
 100bbf8:	10800058 	cmpnei	r2,r2,1
 100bbfc:	1000071e 	bne	r2,zero,100bc1c <OSTimeDlyResume+0xc0>
 100bc00:	e0bffc17 	ldw	r2,-16(fp)
 100bc04:	e0bff915 	stw	r2,-28(fp)
 100bc08:	e0bff917 	ldw	r2,-28(fp)
 100bc0c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 100bc10:	008010c4 	movi	r2,67
 100bc14:	e0bfff15 	stw	r2,-4(fp)
 100bc18:	00004e06 	br	100bd54 <OSTimeDlyResume+0x1f8>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
 100bc1c:	e0bffd17 	ldw	r2,-12(fp)
 100bc20:	10800b8b 	ldhu	r2,46(r2)
 100bc24:	10bfffcc 	andi	r2,r2,65535
 100bc28:	1004c03a 	cmpne	r2,r2,zero
 100bc2c:	1000071e 	bne	r2,zero,100bc4c <OSTimeDlyResume+0xf0>
 100bc30:	e0bffc17 	ldw	r2,-16(fp)
 100bc34:	e0bff815 	stw	r2,-32(fp)
 100bc38:	e0bff817 	ldw	r2,-32(fp)
 100bc3c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
 100bc40:	00801404 	movi	r2,80
 100bc44:	e0bfff15 	stw	r2,-4(fp)
 100bc48:	00004206 	br	100bd54 <OSTimeDlyResume+0x1f8>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
 100bc4c:	e0bffd17 	ldw	r2,-12(fp)
 100bc50:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 100bc54:	e0bffd17 	ldw	r2,-12(fp)
 100bc58:	10800c03 	ldbu	r2,48(r2)
 100bc5c:	10803fcc 	andi	r2,r2,255
 100bc60:	10800dcc 	andi	r2,r2,55
 100bc64:	1005003a 	cmpeq	r2,r2,zero
 100bc68:	10000b1e 	bne	r2,zero,100bc98 <OSTimeDlyResume+0x13c>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
 100bc6c:	e0bffd17 	ldw	r2,-12(fp)
 100bc70:	10c00c03 	ldbu	r3,48(r2)
 100bc74:	00bff204 	movi	r2,-56
 100bc78:	1884703a 	and	r2,r3,r2
 100bc7c:	1007883a 	mov	r3,r2
 100bc80:	e0bffd17 	ldw	r2,-12(fp)
 100bc84:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
 100bc88:	e0fffd17 	ldw	r3,-12(fp)
 100bc8c:	00800044 	movi	r2,1
 100bc90:	18800c45 	stb	r2,49(r3)
 100bc94:	00000206 	br	100bca0 <OSTimeDlyResume+0x144>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
 100bc98:	e0bffd17 	ldw	r2,-12(fp)
 100bc9c:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
 100bca0:	e0bffd17 	ldw	r2,-12(fp)
 100bca4:	10800c03 	ldbu	r2,48(r2)
 100bca8:	10803fcc 	andi	r2,r2,255
 100bcac:	1080020c 	andi	r2,r2,8
 100bcb0:	1004c03a 	cmpne	r2,r2,zero
 100bcb4:	1000221e 	bne	r2,zero,100bd40 <OSTimeDlyResume+0x1e4>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
 100bcb8:	e0bffd17 	ldw	r2,-12(fp)
 100bcbc:	10c00d83 	ldbu	r3,54(r2)
 100bcc0:	00804074 	movhi	r2,257
 100bcc4:	108eb604 	addi	r2,r2,15064
 100bcc8:	10800003 	ldbu	r2,0(r2)
 100bccc:	1884b03a 	or	r2,r3,r2
 100bcd0:	1007883a 	mov	r3,r2
 100bcd4:	00804074 	movhi	r2,257
 100bcd8:	108eb604 	addi	r2,r2,15064
 100bcdc:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 100bce0:	e0bffd17 	ldw	r2,-12(fp)
 100bce4:	10800d03 	ldbu	r2,52(r2)
 100bce8:	11003fcc 	andi	r4,r2,255
 100bcec:	e0bffd17 	ldw	r2,-12(fp)
 100bcf0:	10800d03 	ldbu	r2,52(r2)
 100bcf4:	10c03fcc 	andi	r3,r2,255
 100bcf8:	00804074 	movhi	r2,257
 100bcfc:	108eb644 	addi	r2,r2,15065
 100bd00:	10c5883a 	add	r2,r2,r3
 100bd04:	10c00003 	ldbu	r3,0(r2)
 100bd08:	e0bffd17 	ldw	r2,-12(fp)
 100bd0c:	10800d43 	ldbu	r2,53(r2)
 100bd10:	1884b03a 	or	r2,r3,r2
 100bd14:	1007883a 	mov	r3,r2
 100bd18:	00804074 	movhi	r2,257
 100bd1c:	108eb644 	addi	r2,r2,15065
 100bd20:	1105883a 	add	r2,r2,r4
 100bd24:	10c00005 	stb	r3,0(r2)
 100bd28:	e0bffc17 	ldw	r2,-16(fp)
 100bd2c:	e0bff715 	stw	r2,-36(fp)
 100bd30:	e0bff717 	ldw	r2,-36(fp)
 100bd34:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
 100bd38:	10054c00 	call	10054c0 <OS_Sched>
 100bd3c:	00000406 	br	100bd50 <OSTimeDlyResume+0x1f4>
 100bd40:	e0bffc17 	ldw	r2,-16(fp)
 100bd44:	e0bff615 	stw	r2,-40(fp)
 100bd48:	e0bff617 	ldw	r2,-40(fp)
 100bd4c:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
 100bd50:	e03fff15 	stw	zero,-4(fp)
 100bd54:	e0bfff17 	ldw	r2,-4(fp)
}
 100bd58:	e037883a 	mov	sp,fp
 100bd5c:	dfc00117 	ldw	ra,4(sp)
 100bd60:	df000017 	ldw	fp,0(sp)
 100bd64:	dec00204 	addi	sp,sp,8
 100bd68:	f800283a 	ret

0100bd6c <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
 100bd6c:	defffb04 	addi	sp,sp,-20
 100bd70:	df000415 	stw	fp,16(sp)
 100bd74:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 100bd78:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100bd7c:	0005303a 	rdctl	r2,status
 100bd80:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100bd84:	e0fffd17 	ldw	r3,-12(fp)
 100bd88:	00bfff84 	movi	r2,-2
 100bd8c:	1884703a 	and	r2,r3,r2
 100bd90:	1001703a 	wrctl	status,r2
  
  return context;
 100bd94:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 100bd98:	e0bffe15 	stw	r2,-8(fp)
    ticks = OSTime;
 100bd9c:	00804074 	movhi	r2,257
 100bda0:	108eba04 	addi	r2,r2,15080
 100bda4:	10800017 	ldw	r2,0(r2)
 100bda8:	e0bfff15 	stw	r2,-4(fp)
 100bdac:	e0bffe17 	ldw	r2,-8(fp)
 100bdb0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100bdb4:	e0bffc17 	ldw	r2,-16(fp)
 100bdb8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
 100bdbc:	e0bfff17 	ldw	r2,-4(fp)
}
 100bdc0:	e037883a 	mov	sp,fp
 100bdc4:	df000017 	ldw	fp,0(sp)
 100bdc8:	dec00104 	addi	sp,sp,4
 100bdcc:	f800283a 	ret

0100bdd0 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
 100bdd0:	defffb04 	addi	sp,sp,-20
 100bdd4:	df000415 	stw	fp,16(sp)
 100bdd8:	df000404 	addi	fp,sp,16
 100bddc:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 100bde0:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100bde4:	0005303a 	rdctl	r2,status
 100bde8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100bdec:	e0fffd17 	ldw	r3,-12(fp)
 100bdf0:	00bfff84 	movi	r2,-2
 100bdf4:	1884703a 	and	r2,r3,r2
 100bdf8:	1001703a 	wrctl	status,r2
  
  return context;
 100bdfc:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 100be00:	e0bffe15 	stw	r2,-8(fp)
    OSTime = ticks;
 100be04:	00c04074 	movhi	r3,257
 100be08:	18ceba04 	addi	r3,r3,15080
 100be0c:	e0bfff17 	ldw	r2,-4(fp)
 100be10:	18800015 	stw	r2,0(r3)
 100be14:	e0bffe17 	ldw	r2,-8(fp)
 100be18:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100be1c:	e0bffc17 	ldw	r2,-16(fp)
 100be20:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 100be24:	e037883a 	mov	sp,fp
 100be28:	df000017 	ldw	fp,0(sp)
 100be2c:	dec00104 	addi	sp,sp,4
 100be30:	f800283a 	ret

0100be34 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 100be34:	defffd04 	addi	sp,sp,-12
 100be38:	dfc00215 	stw	ra,8(sp)
 100be3c:	df000115 	stw	fp,4(sp)
 100be40:	df000104 	addi	fp,sp,4
 100be44:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU_0, cpu_0);
 100be48:	100dddc0 	call	100dddc <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 100be4c:	00800044 	movi	r2,1
 100be50:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 100be54:	e037883a 	mov	sp,fp
 100be58:	dfc00117 	ldw	ra,4(sp)
 100be5c:	df000017 	ldw	fp,0(sp)
 100be60:	dec00204 	addi	sp,sp,8
 100be64:	f800283a 	ret

0100be68 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 100be68:	defffe04 	addi	sp,sp,-8
 100be6c:	dfc00115 	stw	ra,4(sp)
 100be70:	df000015 	stw	fp,0(sp)
 100be74:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0_A, timer_0_A);
 100be78:	01000434 	movhi	r4,16
 100be7c:	21144804 	addi	r4,r4,20768
 100be80:	000b883a 	mov	r5,zero
 100be84:	01800084 	movi	r6,2
 100be88:	01c0fa04 	movi	r7,1000
 100be8c:	100d1bc0 	call	100d1bc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_0_B, timer_0_B);
    ALTERA_AVALON_FIFO_INIT ( FIFO_0, fifo_0);
    ALTERA_AVALON_FIFO_INIT ( FIFO_1, fifo_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 100be90:	01004074 	movhi	r4,257
 100be94:	21033404 	addi	r4,r4,3280
 100be98:	000b883a 	mov	r5,zero
 100be9c:	01800144 	movi	r6,5
 100bea0:	100c1c80 	call	100c1c8 <altera_avalon_jtag_uart_init>
 100bea4:	01004074 	movhi	r4,257
 100bea8:	21032a04 	addi	r4,r4,3240
 100beac:	100c0480 	call	100c048 <alt_dev_reg>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_0, mutex_0);
 100beb0:	01004074 	movhi	r4,257
 100beb4:	21074504 	addi	r4,r4,7444
 100beb8:	100bf340 	call	100bf34 <alt_avalon_mutex_reg>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_1, mutex_1);
 100bebc:	01004074 	movhi	r4,257
 100bec0:	21074a04 	addi	r4,r4,7464
 100bec4:	100bf340 	call	100bf34 <alt_avalon_mutex_reg>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_2, mutex_2);
 100bec8:	01004074 	movhi	r4,257
 100becc:	21074f04 	addi	r4,r4,7484
 100bed0:	100bf340 	call	100bf34 <alt_avalon_mutex_reg>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_3, mutex_3);
 100bed4:	01004074 	movhi	r4,257
 100bed8:	21075404 	addi	r4,r4,7504
 100bedc:	100bf340 	call	100bf34 <alt_avalon_mutex_reg>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_4, mutex_4);
 100bee0:	01004074 	movhi	r4,257
 100bee4:	21075904 	addi	r4,r4,7524
 100bee8:	100bf340 	call	100bf34 <alt_avalon_mutex_reg>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER_0, performance_counter_0);
 100beec:	00c00434 	movhi	r3,16
 100bef0:	18d40004 	addi	r3,r3,20480
 100bef4:	00800044 	movi	r2,1
 100bef8:	18800035 	stwio	r2,0(r3)
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( BUTTONS, Buttons);
 100befc:	01004074 	movhi	r4,257
 100bf00:	21075e04 	addi	r4,r4,7544
 100bf04:	100c0480 	call	100c048 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
 100bf08:	01004074 	movhi	r4,257
 100bf0c:	21076904 	addi	r4,r4,7588
 100bf10:	100c0480 	call	100c048 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
 100bf14:	01004074 	movhi	r4,257
 100bf18:	21077404 	addi	r4,r4,7632
 100bf1c:	100c0480 	call	100c048 <alt_dev_reg>
}
 100bf20:	e037883a 	mov	sp,fp
 100bf24:	dfc00117 	ldw	ra,4(sp)
 100bf28:	df000017 	ldw	fp,0(sp)
 100bf2c:	dec00204 	addi	sp,sp,8
 100bf30:	f800283a 	ret

0100bf34 <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
 100bf34:	defff904 	addi	sp,sp,-28
 100bf38:	dfc00615 	stw	ra,24(sp)
 100bf3c:	df000515 	stw	fp,20(sp)
 100bf40:	df000504 	addi	fp,sp,20
 100bf44:	e13ffe15 	stw	r4,-8(fp)
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
 100bf48:	e0bffe17 	ldw	r2,-8(fp)
 100bf4c:	10800404 	addi	r2,r2,16
 100bf50:	e0bffb15 	stw	r2,-20(fp)
 100bf54:	00800044 	movi	r2,1
 100bf58:	e0bffc0d 	sth	r2,-16(fp)
 100bf5c:	e13ffc0b 	ldhu	r4,-16(fp)
 100bf60:	10092700 	call	1009270 <OSSemCreate>
 100bf64:	1007883a 	mov	r3,r2
 100bf68:	e0bffb17 	ldw	r2,-20(fp)
 100bf6c:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
 100bf70:	e0bffb17 	ldw	r2,-20(fp)
 100bf74:	10800017 	ldw	r2,0(r2)
 100bf78:	1005003a 	cmpeq	r2,r2,zero
 100bf7c:	1000021e 	bne	r2,zero,100bf88 <alt_avalon_mutex_reg+0x54>
 100bf80:	e03fff15 	stw	zero,-4(fp)
 100bf84:	00000206 	br	100bf90 <alt_avalon_mutex_reg+0x5c>
 100bf88:	00bfffc4 	movi	r2,-1
 100bf8c:	e0bfff15 	stw	r2,-4(fp)
 100bf90:	e0bfff17 	ldw	r2,-4(fp)
 100bf94:	e0bffd15 	stw	r2,-12(fp)
  if (!ret_code)
 100bf98:	e0bffd17 	ldw	r2,-12(fp)
 100bf9c:	1004c03a 	cmpne	r2,r2,zero
 100bfa0:	1000061e 	bne	r2,zero,100bfbc <alt_avalon_mutex_reg+0x88>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
 100bfa4:	e13ffe17 	ldw	r4,-8(fp)
 100bfa8:	01404074 	movhi	r5,257
 100bfac:	2947a904 	addi	r5,r5,7844
 100bfb0:	100d3b40 	call	100d3b4 <alt_dev_llist_insert>
 100bfb4:	e0bffd15 	stw	r2,-12(fp)
 100bfb8:	00000506 	br	100bfd0 <alt_avalon_mutex_reg+0x9c>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
 100bfbc:	100bfe80 	call	100bfe8 <alt_get_errno>
 100bfc0:	00c00304 	movi	r3,12
 100bfc4:	10c00015 	stw	r3,0(r2)
    ret_code = -ENOMEM;
 100bfc8:	00bffd04 	movi	r2,-12
 100bfcc:	e0bffd15 	stw	r2,-12(fp)
  }

  return ret_code;
 100bfd0:	e0bffd17 	ldw	r2,-12(fp)
}
 100bfd4:	e037883a 	mov	sp,fp
 100bfd8:	dfc00117 	ldw	ra,4(sp)
 100bfdc:	df000017 	ldw	fp,0(sp)
 100bfe0:	dec00204 	addi	sp,sp,8
 100bfe4:	f800283a 	ret

0100bfe8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100bfe8:	defffd04 	addi	sp,sp,-12
 100bfec:	dfc00215 	stw	ra,8(sp)
 100bff0:	df000115 	stw	fp,4(sp)
 100bff4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100bff8:	00804074 	movhi	r2,257
 100bffc:	10878804 	addi	r2,r2,7712
 100c000:	10800017 	ldw	r2,0(r2)
 100c004:	1005003a 	cmpeq	r2,r2,zero
 100c008:	1000061e 	bne	r2,zero,100c024 <alt_get_errno+0x3c>
 100c00c:	00804074 	movhi	r2,257
 100c010:	10878804 	addi	r2,r2,7712
 100c014:	10800017 	ldw	r2,0(r2)
 100c018:	103ee83a 	callr	r2
 100c01c:	e0bfff15 	stw	r2,-4(fp)
 100c020:	00000306 	br	100c030 <alt_get_errno+0x48>
 100c024:	00804074 	movhi	r2,257
 100c028:	108ea104 	addi	r2,r2,14980
 100c02c:	e0bfff15 	stw	r2,-4(fp)
 100c030:	e0bfff17 	ldw	r2,-4(fp)
}
 100c034:	e037883a 	mov	sp,fp
 100c038:	dfc00117 	ldw	ra,4(sp)
 100c03c:	df000017 	ldw	fp,0(sp)
 100c040:	dec00204 	addi	sp,sp,8
 100c044:	f800283a 	ret

0100c048 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 100c048:	defffd04 	addi	sp,sp,-12
 100c04c:	dfc00215 	stw	ra,8(sp)
 100c050:	df000115 	stw	fp,4(sp)
 100c054:	df000104 	addi	fp,sp,4
 100c058:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 100c05c:	e13fff17 	ldw	r4,-4(fp)
 100c060:	01404074 	movhi	r5,257
 100c064:	29478504 	addi	r5,r5,7700
 100c068:	100d3b40 	call	100d3b4 <alt_dev_llist_insert>
}
 100c06c:	e037883a 	mov	sp,fp
 100c070:	dfc00117 	ldw	ra,4(sp)
 100c074:	df000017 	ldw	fp,0(sp)
 100c078:	dec00204 	addi	sp,sp,8
 100c07c:	f800283a 	ret

0100c080 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 100c080:	defffa04 	addi	sp,sp,-24
 100c084:	dfc00515 	stw	ra,20(sp)
 100c088:	df000415 	stw	fp,16(sp)
 100c08c:	df000404 	addi	fp,sp,16
 100c090:	e13ffd15 	stw	r4,-12(fp)
 100c094:	e17ffe15 	stw	r5,-8(fp)
 100c098:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 100c09c:	e0bffd17 	ldw	r2,-12(fp)
 100c0a0:	10800017 	ldw	r2,0(r2)
 100c0a4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 100c0a8:	e0bffc17 	ldw	r2,-16(fp)
 100c0ac:	11000a04 	addi	r4,r2,40
 100c0b0:	e0bffd17 	ldw	r2,-12(fp)
 100c0b4:	11c00217 	ldw	r7,8(r2)
 100c0b8:	e17ffe17 	ldw	r5,-8(fp)
 100c0bc:	e1bfff17 	ldw	r6,-4(fp)
 100c0c0:	100c83c0 	call	100c83c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 100c0c4:	e037883a 	mov	sp,fp
 100c0c8:	dfc00117 	ldw	ra,4(sp)
 100c0cc:	df000017 	ldw	fp,0(sp)
 100c0d0:	dec00204 	addi	sp,sp,8
 100c0d4:	f800283a 	ret

0100c0d8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 100c0d8:	defffa04 	addi	sp,sp,-24
 100c0dc:	dfc00515 	stw	ra,20(sp)
 100c0e0:	df000415 	stw	fp,16(sp)
 100c0e4:	df000404 	addi	fp,sp,16
 100c0e8:	e13ffd15 	stw	r4,-12(fp)
 100c0ec:	e17ffe15 	stw	r5,-8(fp)
 100c0f0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 100c0f4:	e0bffd17 	ldw	r2,-12(fp)
 100c0f8:	10800017 	ldw	r2,0(r2)
 100c0fc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 100c100:	e0bffc17 	ldw	r2,-16(fp)
 100c104:	11000a04 	addi	r4,r2,40
 100c108:	e0bffd17 	ldw	r2,-12(fp)
 100c10c:	11c00217 	ldw	r7,8(r2)
 100c110:	e17ffe17 	ldw	r5,-8(fp)
 100c114:	e1bfff17 	ldw	r6,-4(fp)
 100c118:	100cafc0 	call	100cafc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 100c11c:	e037883a 	mov	sp,fp
 100c120:	dfc00117 	ldw	ra,4(sp)
 100c124:	df000017 	ldw	fp,0(sp)
 100c128:	dec00204 	addi	sp,sp,8
 100c12c:	f800283a 	ret

0100c130 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 100c130:	defffc04 	addi	sp,sp,-16
 100c134:	dfc00315 	stw	ra,12(sp)
 100c138:	df000215 	stw	fp,8(sp)
 100c13c:	df000204 	addi	fp,sp,8
 100c140:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 100c144:	e0bfff17 	ldw	r2,-4(fp)
 100c148:	10800017 	ldw	r2,0(r2)
 100c14c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 100c150:	e0bffe17 	ldw	r2,-8(fp)
 100c154:	11000a04 	addi	r4,r2,40
 100c158:	e0bfff17 	ldw	r2,-4(fp)
 100c15c:	11400217 	ldw	r5,8(r2)
 100c160:	100c6d40 	call	100c6d4 <altera_avalon_jtag_uart_close>
}
 100c164:	e037883a 	mov	sp,fp
 100c168:	dfc00117 	ldw	ra,4(sp)
 100c16c:	df000017 	ldw	fp,0(sp)
 100c170:	dec00204 	addi	sp,sp,8
 100c174:	f800283a 	ret

0100c178 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 100c178:	defffa04 	addi	sp,sp,-24
 100c17c:	dfc00515 	stw	ra,20(sp)
 100c180:	df000415 	stw	fp,16(sp)
 100c184:	df000404 	addi	fp,sp,16
 100c188:	e13ffd15 	stw	r4,-12(fp)
 100c18c:	e17ffe15 	stw	r5,-8(fp)
 100c190:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 100c194:	e0bffd17 	ldw	r2,-12(fp)
 100c198:	10800017 	ldw	r2,0(r2)
 100c19c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 100c1a0:	e0bffc17 	ldw	r2,-16(fp)
 100c1a4:	11000a04 	addi	r4,r2,40
 100c1a8:	e17ffe17 	ldw	r5,-8(fp)
 100c1ac:	e1bfff17 	ldw	r6,-4(fp)
 100c1b0:	100c7480 	call	100c748 <altera_avalon_jtag_uart_ioctl>
}
 100c1b4:	e037883a 	mov	sp,fp
 100c1b8:	dfc00117 	ldw	ra,4(sp)
 100c1bc:	df000017 	ldw	fp,0(sp)
 100c1c0:	dec00204 	addi	sp,sp,8
 100c1c4:	f800283a 	ret

0100c1c8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 100c1c8:	defff504 	addi	sp,sp,-44
 100c1cc:	dfc00a15 	stw	ra,40(sp)
 100c1d0:	df000915 	stw	fp,36(sp)
 100c1d4:	df000904 	addi	fp,sp,36
 100c1d8:	e13ffd15 	stw	r4,-12(fp)
 100c1dc:	e17ffe15 	stw	r5,-8(fp)
 100c1e0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
 100c1e4:	e0bffd17 	ldw	r2,-12(fp)
 100c1e8:	10800c04 	addi	r2,r2,48
 100c1ec:	e0bffb15 	stw	r2,-20(fp)
 100c1f0:	e03ffc0d 	sth	zero,-16(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
 100c1f4:	e13ffc0b 	ldhu	r4,-16(fp)
 100c1f8:	e17ffc84 	addi	r5,fp,-14
 100c1fc:	10060680 	call	1006068 <OSFlagCreate>
 100c200:	1007883a 	mov	r3,r2
 100c204:	e0bffb17 	ldw	r2,-20(fp)
 100c208:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
 100c20c:	e0bffd17 	ldw	r2,-12(fp)
 100c210:	10800a04 	addi	r2,r2,40
 100c214:	e0bff915 	stw	r2,-28(fp)
 100c218:	00800044 	movi	r2,1
 100c21c:	e0bffa0d 	sth	r2,-24(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
 100c220:	e13ffa0b 	ldhu	r4,-24(fp)
 100c224:	10092700 	call	1009270 <OSSemCreate>
 100c228:	1007883a 	mov	r3,r2
 100c22c:	e0bff917 	ldw	r2,-28(fp)
 100c230:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
 100c234:	e0bffd17 	ldw	r2,-12(fp)
 100c238:	10800b04 	addi	r2,r2,44
 100c23c:	e0bff715 	stw	r2,-36(fp)
 100c240:	00800044 	movi	r2,1
 100c244:	e0bff80d 	sth	r2,-32(fp)
 100c248:	e13ff80b 	ldhu	r4,-32(fp)
 100c24c:	10092700 	call	1009270 <OSSemCreate>
 100c250:	1007883a 	mov	r3,r2
 100c254:	e0bff717 	ldw	r2,-36(fp)
 100c258:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 100c25c:	e0fffd17 	ldw	r3,-12(fp)
 100c260:	00800044 	movi	r2,1
 100c264:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 100c268:	e0bffd17 	ldw	r2,-12(fp)
 100c26c:	10800017 	ldw	r2,0(r2)
 100c270:	11000104 	addi	r4,r2,4
 100c274:	e0bffd17 	ldw	r2,-12(fp)
 100c278:	10800817 	ldw	r2,32(r2)
 100c27c:	1007883a 	mov	r3,r2
 100c280:	2005883a 	mov	r2,r4
 100c284:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
 100c288:	e13fff17 	ldw	r4,-4(fp)
 100c28c:	e17ffd17 	ldw	r5,-12(fp)
 100c290:	01804074 	movhi	r6,257
 100c294:	31b0be04 	addi	r6,r6,-15624
 100c298:	100d7900 	call	100d790 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 100c29c:	e0bffd17 	ldw	r2,-12(fp)
 100c2a0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 100c2a4:	e0bffd17 	ldw	r2,-12(fp)
 100c2a8:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 100c2ac:	00804074 	movhi	r2,257
 100c2b0:	108ebf04 	addi	r2,r2,15100
 100c2b4:	10800017 	ldw	r2,0(r2)
 100c2b8:	100b883a 	mov	r5,r2
 100c2bc:	01804074 	movhi	r6,257
 100c2c0:	31b17004 	addi	r6,r6,-14912
 100c2c4:	e1fffd17 	ldw	r7,-12(fp)
 100c2c8:	100d2440 	call	100d244 <alt_alarm_start>
 100c2cc:	1004403a 	cmpge	r2,r2,zero
 100c2d0:	1000041e 	bne	r2,zero,100c2e4 <altera_avalon_jtag_uart_init+0x11c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 100c2d4:	e0fffd17 	ldw	r3,-12(fp)
 100c2d8:	00a00034 	movhi	r2,32768
 100c2dc:	10bfffc4 	addi	r2,r2,-1
 100c2e0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 100c2e4:	e037883a 	mov	sp,fp
 100c2e8:	dfc00117 	ldw	ra,4(sp)
 100c2ec:	df000017 	ldw	fp,0(sp)
 100c2f0:	dec00204 	addi	sp,sp,8
 100c2f4:	f800283a 	ret

0100c2f8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 100c2f8:	defff104 	addi	sp,sp,-60
 100c2fc:	dfc00e15 	stw	ra,56(sp)
 100c300:	df000d15 	stw	fp,52(sp)
 100c304:	df000d04 	addi	fp,sp,52
 100c308:	e13ffe15 	stw	r4,-8(fp)
 100c30c:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 100c310:	e0bffe17 	ldw	r2,-8(fp)
 100c314:	e0bffc15 	stw	r2,-16(fp)
  unsigned int base = sp->base;
 100c318:	e0bffc17 	ldw	r2,-16(fp)
 100c31c:	10800017 	ldw	r2,0(r2)
 100c320:	e0bffb15 	stw	r2,-20(fp)
 100c324:	00000006 	br	100c328 <altera_avalon_jtag_uart_irq+0x30>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100c328:	e0bffb17 	ldw	r2,-20(fp)
 100c32c:	10800104 	addi	r2,r2,4
 100c330:	10800037 	ldwio	r2,0(r2)
 100c334:	e0bffa15 	stw	r2,-24(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 100c338:	e0bffa17 	ldw	r2,-24(fp)
 100c33c:	1080c00c 	andi	r2,r2,768
 100c340:	1005003a 	cmpeq	r2,r2,zero
 100c344:	1000991e 	bne	r2,zero,100c5ac <altera_avalon_jtag_uart_irq+0x2b4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 100c348:	e0bffa17 	ldw	r2,-24(fp)
 100c34c:	1080400c 	andi	r2,r2,256
 100c350:	1005003a 	cmpeq	r2,r2,zero
 100c354:	1000481e 	bne	r2,zero,100c478 <altera_avalon_jtag_uart_irq+0x180>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 100c358:	00800074 	movhi	r2,1
 100c35c:	e0bff915 	stw	r2,-28(fp)
 100c360:	00000006 	br	100c364 <altera_avalon_jtag_uart_irq+0x6c>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100c364:	e0bffc17 	ldw	r2,-16(fp)
 100c368:	10800d17 	ldw	r2,52(r2)
 100c36c:	10800044 	addi	r2,r2,1
 100c370:	1081ffcc 	andi	r2,r2,2047
 100c374:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
 100c378:	e0bffc17 	ldw	r2,-16(fp)
 100c37c:	10c00e17 	ldw	r3,56(r2)
 100c380:	e0bff817 	ldw	r2,-32(fp)
 100c384:	18802826 	beq	r3,r2,100c428 <altera_avalon_jtag_uart_irq+0x130>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 100c388:	e0bffb17 	ldw	r2,-20(fp)
 100c38c:	10800037 	ldwio	r2,0(r2)
 100c390:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 100c394:	e0bff917 	ldw	r2,-28(fp)
 100c398:	10a0000c 	andi	r2,r2,32768
 100c39c:	1005003a 	cmpeq	r2,r2,zero
 100c3a0:	1000211e 	bne	r2,zero,100c428 <altera_avalon_jtag_uart_irq+0x130>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 100c3a4:	e0bffc17 	ldw	r2,-16(fp)
 100c3a8:	10c00d17 	ldw	r3,52(r2)
 100c3ac:	e0bff917 	ldw	r2,-28(fp)
 100c3b0:	1009883a 	mov	r4,r2
 100c3b4:	e0bffc17 	ldw	r2,-16(fp)
 100c3b8:	1885883a 	add	r2,r3,r2
 100c3bc:	10801104 	addi	r2,r2,68
 100c3c0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100c3c4:	e0bffc17 	ldw	r2,-16(fp)
 100c3c8:	10800d17 	ldw	r2,52(r2)
 100c3cc:	10800044 	addi	r2,r2,1
 100c3d0:	10c1ffcc 	andi	r3,r2,2047
 100c3d4:	e0bffc17 	ldw	r2,-16(fp)
 100c3d8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
 100c3dc:	e0bffc17 	ldw	r2,-16(fp)
 100c3e0:	10800c17 	ldw	r2,48(r2)
 100c3e4:	e0bff515 	stw	r2,-44(fp)
 100c3e8:	00800044 	movi	r2,1
 100c3ec:	e0bff60d 	sth	r2,-40(fp)
 100c3f0:	00800044 	movi	r2,1
 100c3f4:	e0bff685 	stb	r2,-38(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 100c3f8:	00804074 	movhi	r2,257
 100c3fc:	108eaa44 	addi	r2,r2,15017
 100c400:	10800003 	ldbu	r2,0(r2)
 100c404:	10803fcc 	andi	r2,r2,255
 100c408:	1005003a 	cmpeq	r2,r2,zero
 100c40c:	103fd51e 	bne	r2,zero,100c364 <altera_avalon_jtag_uart_irq+0x6c>
  {
    OSFlagPost (group, flags, opt, &err);
 100c410:	e17ff60b 	ldhu	r5,-40(fp)
 100c414:	e1bff683 	ldbu	r6,-38(fp)
 100c418:	e1fffd04 	addi	r7,fp,-12
 100c41c:	e13ff517 	ldw	r4,-44(fp)
 100c420:	1006d900 	call	1006d90 <OSFlagPost>
    return err;
 100c424:	003fcf06 	br	100c364 <altera_avalon_jtag_uart_irq+0x6c>
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 100c428:	e0bff917 	ldw	r2,-28(fp)
 100c42c:	10bfffec 	andhi	r2,r2,65535
 100c430:	1005003a 	cmpeq	r2,r2,zero
 100c434:	1000101e 	bne	r2,zero,100c478 <altera_avalon_jtag_uart_irq+0x180>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 100c438:	e0bffc17 	ldw	r2,-16(fp)
 100c43c:	10c00817 	ldw	r3,32(r2)
 100c440:	00bfff84 	movi	r2,-2
 100c444:	1886703a 	and	r3,r3,r2
 100c448:	e0bffc17 	ldw	r2,-16(fp)
 100c44c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 100c450:	e0bffb17 	ldw	r2,-20(fp)
 100c454:	11000104 	addi	r4,r2,4
 100c458:	e0bffc17 	ldw	r2,-16(fp)
 100c45c:	10800817 	ldw	r2,32(r2)
 100c460:	1007883a 	mov	r3,r2
 100c464:	2005883a 	mov	r2,r4
 100c468:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100c46c:	e0bffb17 	ldw	r2,-20(fp)
 100c470:	10800104 	addi	r2,r2,4
 100c474:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 100c478:	e0bffa17 	ldw	r2,-24(fp)
 100c47c:	1080800c 	andi	r2,r2,512
 100c480:	1005003a 	cmpeq	r2,r2,zero
 100c484:	103fa81e 	bne	r2,zero,100c328 <altera_avalon_jtag_uart_irq+0x30>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 100c488:	e0bffa17 	ldw	r2,-24(fp)
 100c48c:	10bfffec 	andhi	r2,r2,65535
 100c490:	1004d43a 	srli	r2,r2,16
 100c494:	e0bff715 	stw	r2,-36(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 100c498:	00002706 	br	100c538 <altera_avalon_jtag_uart_irq+0x240>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 100c49c:	e13ffb17 	ldw	r4,-20(fp)
 100c4a0:	e0bffc17 	ldw	r2,-16(fp)
 100c4a4:	10c01017 	ldw	r3,64(r2)
 100c4a8:	e0bffc17 	ldw	r2,-16(fp)
 100c4ac:	1885883a 	add	r2,r3,r2
 100c4b0:	10821104 	addi	r2,r2,2116
 100c4b4:	10800003 	ldbu	r2,0(r2)
 100c4b8:	10c03fcc 	andi	r3,r2,255
 100c4bc:	18c0201c 	xori	r3,r3,128
 100c4c0:	18ffe004 	addi	r3,r3,-128
 100c4c4:	2005883a 	mov	r2,r4
 100c4c8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100c4cc:	e0bffc17 	ldw	r2,-16(fp)
 100c4d0:	10801017 	ldw	r2,64(r2)
 100c4d4:	10800044 	addi	r2,r2,1
 100c4d8:	10c1ffcc 	andi	r3,r2,2047
 100c4dc:	e0bffc17 	ldw	r2,-16(fp)
 100c4e0:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
 100c4e4:	e0bffc17 	ldw	r2,-16(fp)
 100c4e8:	10800c17 	ldw	r2,48(r2)
 100c4ec:	e0bff315 	stw	r2,-52(fp)
 100c4f0:	00800084 	movi	r2,2
 100c4f4:	e0bff40d 	sth	r2,-48(fp)
 100c4f8:	00800044 	movi	r2,1
 100c4fc:	e0bff485 	stb	r2,-46(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 100c500:	00804074 	movhi	r2,257
 100c504:	108eaa44 	addi	r2,r2,15017
 100c508:	10800003 	ldbu	r2,0(r2)
 100c50c:	10803fcc 	andi	r2,r2,255
 100c510:	1005003a 	cmpeq	r2,r2,zero
 100c514:	1000051e 	bne	r2,zero,100c52c <altera_avalon_jtag_uart_irq+0x234>
  {
    OSFlagPost (group, flags, opt, &err);
 100c518:	e17ff40b 	ldhu	r5,-48(fp)
 100c51c:	e1bff483 	ldbu	r6,-46(fp)
 100c520:	e1fffd44 	addi	r7,fp,-11
 100c524:	e13ff317 	ldw	r4,-52(fp)
 100c528:	1006d900 	call	1006d90 <OSFlagPost>

        space--;
 100c52c:	e0bff717 	ldw	r2,-36(fp)
 100c530:	10bfffc4 	addi	r2,r2,-1
 100c534:	e0bff715 	stw	r2,-36(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 100c538:	e0bff717 	ldw	r2,-36(fp)
 100c53c:	1005003a 	cmpeq	r2,r2,zero
 100c540:	1000051e 	bne	r2,zero,100c558 <altera_avalon_jtag_uart_irq+0x260>
 100c544:	e0bffc17 	ldw	r2,-16(fp)
 100c548:	10c01017 	ldw	r3,64(r2)
 100c54c:	e0bffc17 	ldw	r2,-16(fp)
 100c550:	10800f17 	ldw	r2,60(r2)
 100c554:	18bfd11e 	bne	r3,r2,100c49c <altera_avalon_jtag_uart_irq+0x1a4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 100c558:	e0bff717 	ldw	r2,-36(fp)
 100c55c:	1005003a 	cmpeq	r2,r2,zero
 100c560:	103f711e 	bne	r2,zero,100c328 <altera_avalon_jtag_uart_irq+0x30>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 100c564:	e0bffc17 	ldw	r2,-16(fp)
 100c568:	10c00817 	ldw	r3,32(r2)
 100c56c:	00bfff44 	movi	r2,-3
 100c570:	1886703a 	and	r3,r3,r2
 100c574:	e0bffc17 	ldw	r2,-16(fp)
 100c578:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 100c57c:	e0bffc17 	ldw	r2,-16(fp)
 100c580:	10800017 	ldw	r2,0(r2)
 100c584:	11000104 	addi	r4,r2,4
 100c588:	e0bffc17 	ldw	r2,-16(fp)
 100c58c:	10800817 	ldw	r2,32(r2)
 100c590:	1007883a 	mov	r3,r2
 100c594:	2005883a 	mov	r2,r4
 100c598:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100c59c:	e0bffb17 	ldw	r2,-20(fp)
 100c5a0:	10800104 	addi	r2,r2,4
 100c5a4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 100c5a8:	003f5f06 	br	100c328 <altera_avalon_jtag_uart_irq+0x30>
}
 100c5ac:	e037883a 	mov	sp,fp
 100c5b0:	dfc00117 	ldw	ra,4(sp)
 100c5b4:	df000017 	ldw	fp,0(sp)
 100c5b8:	dec00204 	addi	sp,sp,8
 100c5bc:	f800283a 	ret

0100c5c0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 100c5c0:	defff804 	addi	sp,sp,-32
 100c5c4:	dfc00715 	stw	ra,28(sp)
 100c5c8:	df000615 	stw	fp,24(sp)
 100c5cc:	df000604 	addi	fp,sp,24
 100c5d0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 100c5d4:	e0bfff17 	ldw	r2,-4(fp)
 100c5d8:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 100c5dc:	e0bffd17 	ldw	r2,-12(fp)
 100c5e0:	10800017 	ldw	r2,0(r2)
 100c5e4:	10800104 	addi	r2,r2,4
 100c5e8:	10800037 	ldwio	r2,0(r2)
 100c5ec:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 100c5f0:	e0bffc17 	ldw	r2,-16(fp)
 100c5f4:	1081000c 	andi	r2,r2,1024
 100c5f8:	1005003a 	cmpeq	r2,r2,zero
 100c5fc:	10000c1e 	bne	r2,zero,100c630 <altera_avalon_jtag_uart_timeout+0x70>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 100c600:	e0bffd17 	ldw	r2,-12(fp)
 100c604:	10800017 	ldw	r2,0(r2)
 100c608:	11000104 	addi	r4,r2,4
 100c60c:	e0bffd17 	ldw	r2,-12(fp)
 100c610:	10800817 	ldw	r2,32(r2)
 100c614:	10810014 	ori	r2,r2,1024
 100c618:	1007883a 	mov	r3,r2
 100c61c:	2005883a 	mov	r2,r4
 100c620:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 100c624:	e0bffd17 	ldw	r2,-12(fp)
 100c628:	10000915 	stw	zero,36(r2)
 100c62c:	00002106 	br	100c6b4 <altera_avalon_jtag_uart_timeout+0xf4>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 100c630:	e0bffd17 	ldw	r2,-12(fp)
 100c634:	10c00917 	ldw	r3,36(r2)
 100c638:	00a00034 	movhi	r2,32768
 100c63c:	10bfff04 	addi	r2,r2,-4
 100c640:	10c01c36 	bltu	r2,r3,100c6b4 <altera_avalon_jtag_uart_timeout+0xf4>
    sp->host_inactive++;
 100c644:	e0bffd17 	ldw	r2,-12(fp)
 100c648:	10800917 	ldw	r2,36(r2)
 100c64c:	10c00044 	addi	r3,r2,1
 100c650:	e0bffd17 	ldw	r2,-12(fp)
 100c654:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
 100c658:	e0bffd17 	ldw	r2,-12(fp)
 100c65c:	10c00917 	ldw	r3,36(r2)
 100c660:	e0bffd17 	ldw	r2,-12(fp)
 100c664:	10800117 	ldw	r2,4(r2)
 100c668:	18801236 	bltu	r3,r2,100c6b4 <altera_avalon_jtag_uart_timeout+0xf4>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
 100c66c:	e0bffd17 	ldw	r2,-12(fp)
 100c670:	10800c17 	ldw	r2,48(r2)
 100c674:	e0bffa15 	stw	r2,-24(fp)
 100c678:	00800104 	movi	r2,4
 100c67c:	e0bffb0d 	sth	r2,-20(fp)
 100c680:	00800044 	movi	r2,1
 100c684:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 100c688:	00804074 	movhi	r2,257
 100c68c:	108eaa44 	addi	r2,r2,15017
 100c690:	10800003 	ldbu	r2,0(r2)
 100c694:	10803fcc 	andi	r2,r2,255
 100c698:	1005003a 	cmpeq	r2,r2,zero
 100c69c:	1000051e 	bne	r2,zero,100c6b4 <altera_avalon_jtag_uart_timeout+0xf4>
  {
    OSFlagPost (group, flags, opt, &err);
 100c6a0:	e17ffb0b 	ldhu	r5,-20(fp)
 100c6a4:	e1bffb83 	ldbu	r6,-18(fp)
 100c6a8:	e1fffe04 	addi	r7,fp,-8
 100c6ac:	e13ffa17 	ldw	r4,-24(fp)
 100c6b0:	1006d900 	call	1006d90 <OSFlagPost>
 100c6b4:	00804074 	movhi	r2,257
 100c6b8:	108ebf04 	addi	r2,r2,15100
 100c6bc:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
 100c6c0:	e037883a 	mov	sp,fp
 100c6c4:	dfc00117 	ldw	ra,4(sp)
 100c6c8:	df000017 	ldw	fp,0(sp)
 100c6cc:	dec00204 	addi	sp,sp,8
 100c6d0:	f800283a 	ret

0100c6d4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 100c6d4:	defffc04 	addi	sp,sp,-16
 100c6d8:	df000315 	stw	fp,12(sp)
 100c6dc:	df000304 	addi	fp,sp,12
 100c6e0:	e13ffd15 	stw	r4,-12(fp)
 100c6e4:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 100c6e8:	00000706 	br	100c708 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 100c6ec:	e0bffe17 	ldw	r2,-8(fp)
 100c6f0:	1090000c 	andi	r2,r2,16384
 100c6f4:	1005003a 	cmpeq	r2,r2,zero
 100c6f8:	1000031e 	bne	r2,zero,100c708 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 100c6fc:	00bffd44 	movi	r2,-11
 100c700:	e0bfff15 	stw	r2,-4(fp)
 100c704:	00000b06 	br	100c734 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 100c708:	e0bffd17 	ldw	r2,-12(fp)
 100c70c:	10c01017 	ldw	r3,64(r2)
 100c710:	e0bffd17 	ldw	r2,-12(fp)
 100c714:	10800f17 	ldw	r2,60(r2)
 100c718:	18800526 	beq	r3,r2,100c730 <altera_avalon_jtag_uart_close+0x5c>
 100c71c:	e0bffd17 	ldw	r2,-12(fp)
 100c720:	10c00917 	ldw	r3,36(r2)
 100c724:	e0bffd17 	ldw	r2,-12(fp)
 100c728:	10800117 	ldw	r2,4(r2)
 100c72c:	18bfef36 	bltu	r3,r2,100c6ec <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 100c730:	e03fff15 	stw	zero,-4(fp)
 100c734:	e0bfff17 	ldw	r2,-4(fp)
}
 100c738:	e037883a 	mov	sp,fp
 100c73c:	df000017 	ldw	fp,0(sp)
 100c740:	dec00104 	addi	sp,sp,4
 100c744:	f800283a 	ret

0100c748 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 100c748:	defff804 	addi	sp,sp,-32
 100c74c:	df000715 	stw	fp,28(sp)
 100c750:	df000704 	addi	fp,sp,28
 100c754:	e13ffb15 	stw	r4,-20(fp)
 100c758:	e17ffc15 	stw	r5,-16(fp)
 100c75c:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 100c760:	00bff9c4 	movi	r2,-25
 100c764:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 100c768:	e0bffc17 	ldw	r2,-16(fp)
 100c76c:	e0bfff15 	stw	r2,-4(fp)
 100c770:	e0ffff17 	ldw	r3,-4(fp)
 100c774:	189a8060 	cmpeqi	r2,r3,27137
 100c778:	1000041e 	bne	r2,zero,100c78c <altera_avalon_jtag_uart_ioctl+0x44>
 100c77c:	e0ffff17 	ldw	r3,-4(fp)
 100c780:	189a80a0 	cmpeqi	r2,r3,27138
 100c784:	10001b1e 	bne	r2,zero,100c7f4 <altera_avalon_jtag_uart_ioctl+0xac>
 100c788:	00002706 	br	100c828 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 100c78c:	e0bffb17 	ldw	r2,-20(fp)
 100c790:	10c00117 	ldw	r3,4(r2)
 100c794:	00a00034 	movhi	r2,32768
 100c798:	10bfffc4 	addi	r2,r2,-1
 100c79c:	18802226 	beq	r3,r2,100c828 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 100c7a0:	e0bffd17 	ldw	r2,-12(fp)
 100c7a4:	10800017 	ldw	r2,0(r2)
 100c7a8:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 100c7ac:	e0bff917 	ldw	r2,-28(fp)
 100c7b0:	10800090 	cmplti	r2,r2,2
 100c7b4:	1000071e 	bne	r2,zero,100c7d4 <altera_avalon_jtag_uart_ioctl+0x8c>
 100c7b8:	e0fff917 	ldw	r3,-28(fp)
 100c7bc:	00a00034 	movhi	r2,32768
 100c7c0:	10bfffc4 	addi	r2,r2,-1
 100c7c4:	18800326 	beq	r3,r2,100c7d4 <altera_avalon_jtag_uart_ioctl+0x8c>
 100c7c8:	e0bff917 	ldw	r2,-28(fp)
 100c7cc:	e0bffe15 	stw	r2,-8(fp)
 100c7d0:	00000306 	br	100c7e0 <altera_avalon_jtag_uart_ioctl+0x98>
 100c7d4:	00e00034 	movhi	r3,32768
 100c7d8:	18ffff84 	addi	r3,r3,-2
 100c7dc:	e0fffe15 	stw	r3,-8(fp)
 100c7e0:	e0bffb17 	ldw	r2,-20(fp)
 100c7e4:	e0fffe17 	ldw	r3,-8(fp)
 100c7e8:	10c00115 	stw	r3,4(r2)
      rc = 0;
 100c7ec:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 100c7f0:	00000d06 	br	100c828 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 100c7f4:	e0bffb17 	ldw	r2,-20(fp)
 100c7f8:	10c00117 	ldw	r3,4(r2)
 100c7fc:	00a00034 	movhi	r2,32768
 100c800:	10bfffc4 	addi	r2,r2,-1
 100c804:	18800826 	beq	r3,r2,100c828 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 100c808:	e13ffd17 	ldw	r4,-12(fp)
 100c80c:	e0bffb17 	ldw	r2,-20(fp)
 100c810:	10c00917 	ldw	r3,36(r2)
 100c814:	e0bffb17 	ldw	r2,-20(fp)
 100c818:	10800117 	ldw	r2,4(r2)
 100c81c:	1885803a 	cmpltu	r2,r3,r2
 100c820:	20800015 	stw	r2,0(r4)
      rc = 0;
 100c824:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 100c828:	e0bffa17 	ldw	r2,-24(fp)
}
 100c82c:	e037883a 	mov	sp,fp
 100c830:	df000017 	ldw	fp,0(sp)
 100c834:	dec00104 	addi	sp,sp,4
 100c838:	f800283a 	ret

0100c83c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 100c83c:	deffeb04 	addi	sp,sp,-84
 100c840:	dfc01415 	stw	ra,80(sp)
 100c844:	df001315 	stw	fp,76(sp)
 100c848:	df001304 	addi	fp,sp,76
 100c84c:	e13ffb15 	stw	r4,-20(fp)
 100c850:	e17ffc15 	stw	r5,-16(fp)
 100c854:	e1bffd15 	stw	r6,-12(fp)
 100c858:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 100c85c:	e0bffc17 	ldw	r2,-16(fp)
 100c860:	e0bff915 	stw	r2,-28(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
 100c864:	e0bffb17 	ldw	r2,-20(fp)
 100c868:	10800a17 	ldw	r2,40(r2)
 100c86c:	e0bff315 	stw	r2,-52(fp)
 100c870:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
 100c874:	e17ff40b 	ldhu	r5,-48(fp)
 100c878:	e1bffa44 	addi	r6,fp,-23
 100c87c:	e13ff317 	ldw	r4,-52(fp)
 100c880:	10096240 	call	1009624 <OSSemPend>

  while (space > 0)
 100c884:	00006406 	br	100ca18 <altera_avalon_jtag_uart_read+0x1dc>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 100c888:	e0bffb17 	ldw	r2,-20(fp)
 100c88c:	10800d17 	ldw	r2,52(r2)
 100c890:	e0bff615 	stw	r2,-40(fp)
      out = sp->rx_out;
 100c894:	e0bffb17 	ldw	r2,-20(fp)
 100c898:	10800e17 	ldw	r2,56(r2)
 100c89c:	e0bff515 	stw	r2,-44(fp)

      if (in >= out)
 100c8a0:	e0fff617 	ldw	r3,-40(fp)
 100c8a4:	e0bff517 	ldw	r2,-44(fp)
 100c8a8:	18800536 	bltu	r3,r2,100c8c0 <altera_avalon_jtag_uart_read+0x84>
        n = in - out;
 100c8ac:	e0bff617 	ldw	r2,-40(fp)
 100c8b0:	e0fff517 	ldw	r3,-44(fp)
 100c8b4:	10c5c83a 	sub	r2,r2,r3
 100c8b8:	e0bff715 	stw	r2,-36(fp)
 100c8bc:	00000406 	br	100c8d0 <altera_avalon_jtag_uart_read+0x94>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 100c8c0:	00820004 	movi	r2,2048
 100c8c4:	e0fff517 	ldw	r3,-44(fp)
 100c8c8:	10c5c83a 	sub	r2,r2,r3
 100c8cc:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
 100c8d0:	e0bff717 	ldw	r2,-36(fp)
 100c8d4:	1005003a 	cmpeq	r2,r2,zero
 100c8d8:	10001f1e 	bne	r2,zero,100c958 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
 100c8dc:	e0fffd17 	ldw	r3,-12(fp)
 100c8e0:	e0bff717 	ldw	r2,-36(fp)
 100c8e4:	1880022e 	bgeu	r3,r2,100c8f0 <altera_avalon_jtag_uart_read+0xb4>
        n = space;
 100c8e8:	e0bffd17 	ldw	r2,-12(fp)
 100c8ec:	e0bff715 	stw	r2,-36(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 100c8f0:	e0bffb17 	ldw	r2,-20(fp)
 100c8f4:	10c01104 	addi	r3,r2,68
 100c8f8:	e0bff517 	ldw	r2,-44(fp)
 100c8fc:	1887883a 	add	r3,r3,r2
 100c900:	e0bff917 	ldw	r2,-28(fp)
 100c904:	1009883a 	mov	r4,r2
 100c908:	180b883a 	mov	r5,r3
 100c90c:	e1bff717 	ldw	r6,-36(fp)
 100c910:	10010e00 	call	10010e0 <memcpy>
      ptr   += n;
 100c914:	e0fff717 	ldw	r3,-36(fp)
 100c918:	e0bff917 	ldw	r2,-28(fp)
 100c91c:	10c5883a 	add	r2,r2,r3
 100c920:	e0bff915 	stw	r2,-28(fp)
      space -= n;
 100c924:	e0fffd17 	ldw	r3,-12(fp)
 100c928:	e0bff717 	ldw	r2,-36(fp)
 100c92c:	1885c83a 	sub	r2,r3,r2
 100c930:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100c934:	e0fff517 	ldw	r3,-44(fp)
 100c938:	e0bff717 	ldw	r2,-36(fp)
 100c93c:	1885883a 	add	r2,r3,r2
 100c940:	10c1ffcc 	andi	r3,r2,2047
 100c944:	e0bffb17 	ldw	r2,-20(fp)
 100c948:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
 100c94c:	e0bffd17 	ldw	r2,-12(fp)
 100c950:	10800048 	cmpgei	r2,r2,1
 100c954:	103fcc1e 	bne	r2,zero,100c888 <altera_avalon_jtag_uart_read+0x4c>

    /* If we read any data then return it */
    if (ptr != buffer)
 100c958:	e0fff917 	ldw	r3,-28(fp)
 100c95c:	e0bffc17 	ldw	r2,-16(fp)
 100c960:	1880301e 	bne	r3,r2,100ca24 <altera_avalon_jtag_uart_read+0x1e8>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 100c964:	e0bffe17 	ldw	r2,-8(fp)
 100c968:	1090000c 	andi	r2,r2,16384
 100c96c:	1004c03a 	cmpne	r2,r2,zero
 100c970:	10002c1e 	bne	r2,zero,100ca24 <altera_avalon_jtag_uart_read+0x1e8>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
 100c974:	00804074 	movhi	r2,257
 100c978:	108eaa44 	addi	r2,r2,15017
 100c97c:	10800003 	ldbu	r2,0(r2)
 100c980:	10803fcc 	andi	r2,r2,255
 100c984:	10800058 	cmpnei	r2,r2,1
 100c988:	1000161e 	bne	r2,zero,100c9e4 <altera_avalon_jtag_uart_read+0x1a8>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
 100c98c:	e0bffb17 	ldw	r2,-20(fp)
 100c990:	10800c17 	ldw	r2,48(r2)
 100c994:	e0bff015 	stw	r2,-64(fp)
 100c998:	00800144 	movi	r2,5
 100c99c:	e0bff10d 	sth	r2,-60(fp)
 100c9a0:	00bfe0c4 	movi	r2,-125
 100c9a4:	e0bff185 	stb	r2,-58(fp)
 100c9a8:	e03ff20d 	sth	zero,-56(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 100c9ac:	00804074 	movhi	r2,257
 100c9b0:	108eaa44 	addi	r2,r2,15017
 100c9b4:	10800003 	ldbu	r2,0(r2)
 100c9b8:	10803fcc 	andi	r2,r2,255
 100c9bc:	1005003a 	cmpeq	r2,r2,zero
 100c9c0:	1000111e 	bne	r2,zero,100ca08 <altera_avalon_jtag_uart_read+0x1cc>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 100c9c4:	e17ff10b 	ldhu	r5,-60(fp)
 100c9c8:	e1bff183 	ldbu	r6,-58(fp)
 100c9cc:	e1fff20b 	ldhu	r7,-56(fp)
 100c9d0:	e0bffa04 	addi	r2,fp,-24
 100c9d4:	d8800015 	stw	r2,0(sp)
 100c9d8:	e13ff017 	ldw	r4,-64(fp)
 100c9dc:	10066e40 	call	10066e4 <OSFlagPend>
    return err;
 100c9e0:	00000906 	br	100ca08 <altera_avalon_jtag_uart_read+0x1cc>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 100c9e4:	e0bffb17 	ldw	r2,-20(fp)
 100c9e8:	10c00d17 	ldw	r3,52(r2)
 100c9ec:	e0bff617 	ldw	r2,-40(fp)
 100c9f0:	1880051e 	bne	r3,r2,100ca08 <altera_avalon_jtag_uart_read+0x1cc>
 100c9f4:	e0bffb17 	ldw	r2,-20(fp)
 100c9f8:	10c00917 	ldw	r3,36(r2)
 100c9fc:	e0bffb17 	ldw	r2,-20(fp)
 100ca00:	10800117 	ldw	r2,4(r2)
 100ca04:	18bff736 	bltu	r3,r2,100c9e4 <altera_avalon_jtag_uart_read+0x1a8>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 100ca08:	e0bffb17 	ldw	r2,-20(fp)
 100ca0c:	10c00d17 	ldw	r3,52(r2)
 100ca10:	e0bff617 	ldw	r2,-40(fp)
 100ca14:	18800326 	beq	r3,r2,100ca24 <altera_avalon_jtag_uart_read+0x1e8>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 100ca18:	e0bffd17 	ldw	r2,-12(fp)
 100ca1c:	10800048 	cmpgei	r2,r2,1
 100ca20:	103f991e 	bne	r2,zero,100c888 <altera_avalon_jtag_uart_read+0x4c>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
 100ca24:	e0bffb17 	ldw	r2,-20(fp)
 100ca28:	11000a17 	ldw	r4,40(r2)
 100ca2c:	1009a1c0 	call	1009a1c <OSSemPost>

  if (ptr != buffer)
 100ca30:	e0fff917 	ldw	r3,-28(fp)
 100ca34:	e0bffc17 	ldw	r2,-16(fp)
 100ca38:	18801926 	beq	r3,r2,100caa0 <altera_avalon_jtag_uart_read+0x264>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100ca3c:	0005303a 	rdctl	r2,status
 100ca40:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100ca44:	e0ffef17 	ldw	r3,-68(fp)
 100ca48:	00bfff84 	movi	r2,-2
 100ca4c:	1884703a 	and	r2,r3,r2
 100ca50:	1001703a 	wrctl	status,r2
  
  return context;
 100ca54:	e0bfef17 	ldw	r2,-68(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 100ca58:	e0bff815 	stw	r2,-32(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 100ca5c:	e0bffb17 	ldw	r2,-20(fp)
 100ca60:	10800817 	ldw	r2,32(r2)
 100ca64:	10c00054 	ori	r3,r2,1
 100ca68:	e0bffb17 	ldw	r2,-20(fp)
 100ca6c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 100ca70:	e0bffb17 	ldw	r2,-20(fp)
 100ca74:	10800017 	ldw	r2,0(r2)
 100ca78:	11000104 	addi	r4,r2,4
 100ca7c:	e0bffb17 	ldw	r2,-20(fp)
 100ca80:	10800817 	ldw	r2,32(r2)
 100ca84:	1007883a 	mov	r3,r2
 100ca88:	2005883a 	mov	r2,r4
 100ca8c:	10c00035 	stwio	r3,0(r2)
 100ca90:	e0bff817 	ldw	r2,-32(fp)
 100ca94:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100ca98:	e0bfee17 	ldw	r2,-72(fp)
 100ca9c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 100caa0:	e0fff917 	ldw	r3,-28(fp)
 100caa4:	e0bffc17 	ldw	r2,-16(fp)
 100caa8:	18800526 	beq	r3,r2,100cac0 <altera_avalon_jtag_uart_read+0x284>
    return ptr - buffer;
 100caac:	e0fff917 	ldw	r3,-28(fp)
 100cab0:	e0bffc17 	ldw	r2,-16(fp)
 100cab4:	1887c83a 	sub	r3,r3,r2
 100cab8:	e0ffff15 	stw	r3,-4(fp)
 100cabc:	00000906 	br	100cae4 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
 100cac0:	e0bffe17 	ldw	r2,-8(fp)
 100cac4:	1090000c 	andi	r2,r2,16384
 100cac8:	1005003a 	cmpeq	r2,r2,zero
 100cacc:	1000031e 	bne	r2,zero,100cadc <altera_avalon_jtag_uart_read+0x2a0>
    return -EWOULDBLOCK;
 100cad0:	00bffd44 	movi	r2,-11
 100cad4:	e0bfff15 	stw	r2,-4(fp)
 100cad8:	00000206 	br	100cae4 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
 100cadc:	00bffec4 	movi	r2,-5
 100cae0:	e0bfff15 	stw	r2,-4(fp)
 100cae4:	e0bfff17 	ldw	r2,-4(fp)
}
 100cae8:	e037883a 	mov	sp,fp
 100caec:	dfc00117 	ldw	ra,4(sp)
 100caf0:	df000017 	ldw	fp,0(sp)
 100caf4:	dec00204 	addi	sp,sp,8
 100caf8:	f800283a 	ret

0100cafc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 100cafc:	deffeb04 	addi	sp,sp,-84
 100cb00:	dfc01415 	stw	ra,80(sp)
 100cb04:	df001315 	stw	fp,76(sp)
 100cb08:	df001304 	addi	fp,sp,76
 100cb0c:	e13ffb15 	stw	r4,-20(fp)
 100cb10:	e17ffc15 	stw	r5,-16(fp)
 100cb14:	e1bffd15 	stw	r6,-12(fp)
 100cb18:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 100cb1c:	e03ff815 	stw	zero,-32(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 100cb20:	e0bffc17 	ldw	r2,-16(fp)
 100cb24:	e0bff515 	stw	r2,-44(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
 100cb28:	e0bffb17 	ldw	r2,-20(fp)
 100cb2c:	10800b17 	ldw	r2,44(r2)
 100cb30:	e0bff315 	stw	r2,-52(fp)
 100cb34:	e03ff40d 	sth	zero,-48(fp)
 100cb38:	e17ff40b 	ldhu	r5,-48(fp)
 100cb3c:	e1bffa04 	addi	r6,fp,-24
 100cb40:	e13ff317 	ldw	r4,-52(fp)
 100cb44:	10096240 	call	1009624 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 100cb48:	00003a06 	br	100cc34 <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 100cb4c:	e0bffb17 	ldw	r2,-20(fp)
 100cb50:	10800f17 	ldw	r2,60(r2)
 100cb54:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 100cb58:	e0bffb17 	ldw	r2,-20(fp)
 100cb5c:	10801017 	ldw	r2,64(r2)
 100cb60:	e0bff815 	stw	r2,-32(fp)

      if (in < out)
 100cb64:	e0fff917 	ldw	r3,-28(fp)
 100cb68:	e0bff817 	ldw	r2,-32(fp)
 100cb6c:	1880062e 	bgeu	r3,r2,100cb88 <altera_avalon_jtag_uart_write+0x8c>
        n = out - 1 - in;
 100cb70:	e0fff817 	ldw	r3,-32(fp)
 100cb74:	e0bff917 	ldw	r2,-28(fp)
 100cb78:	1885c83a 	sub	r2,r3,r2
 100cb7c:	10bfffc4 	addi	r2,r2,-1
 100cb80:	e0bff715 	stw	r2,-36(fp)
 100cb84:	00000c06 	br	100cbb8 <altera_avalon_jtag_uart_write+0xbc>
      else if (out > 0)
 100cb88:	e0bff817 	ldw	r2,-32(fp)
 100cb8c:	1005003a 	cmpeq	r2,r2,zero
 100cb90:	1000051e 	bne	r2,zero,100cba8 <altera_avalon_jtag_uart_write+0xac>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 100cb94:	00820004 	movi	r2,2048
 100cb98:	e0fff917 	ldw	r3,-28(fp)
 100cb9c:	10c5c83a 	sub	r2,r2,r3
 100cba0:	e0bff715 	stw	r2,-36(fp)
 100cba4:	00000406 	br	100cbb8 <altera_avalon_jtag_uart_write+0xbc>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 100cba8:	0081ffc4 	movi	r2,2047
 100cbac:	e0fff917 	ldw	r3,-28(fp)
 100cbb0:	10c5c83a 	sub	r2,r2,r3
 100cbb4:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
 100cbb8:	e0bff717 	ldw	r2,-36(fp)
 100cbbc:	1005003a 	cmpeq	r2,r2,zero
 100cbc0:	10001f1e 	bne	r2,zero,100cc40 <altera_avalon_jtag_uart_write+0x144>
        break;

      if (n > count)
 100cbc4:	e0fffd17 	ldw	r3,-12(fp)
 100cbc8:	e0bff717 	ldw	r2,-36(fp)
 100cbcc:	1880022e 	bgeu	r3,r2,100cbd8 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
 100cbd0:	e0bffd17 	ldw	r2,-12(fp)
 100cbd4:	e0bff715 	stw	r2,-36(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 100cbd8:	e0bffb17 	ldw	r2,-20(fp)
 100cbdc:	10c21104 	addi	r3,r2,2116
 100cbe0:	e0bff917 	ldw	r2,-28(fp)
 100cbe4:	1885883a 	add	r2,r3,r2
 100cbe8:	e0fffc17 	ldw	r3,-16(fp)
 100cbec:	1009883a 	mov	r4,r2
 100cbf0:	180b883a 	mov	r5,r3
 100cbf4:	e1bff717 	ldw	r6,-36(fp)
 100cbf8:	10010e00 	call	10010e0 <memcpy>
      ptr   += n;
 100cbfc:	e0fff717 	ldw	r3,-36(fp)
 100cc00:	e0bffc17 	ldw	r2,-16(fp)
 100cc04:	10c5883a 	add	r2,r2,r3
 100cc08:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 100cc0c:	e0fffd17 	ldw	r3,-12(fp)
 100cc10:	e0bff717 	ldw	r2,-36(fp)
 100cc14:	1885c83a 	sub	r2,r3,r2
 100cc18:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100cc1c:	e0fff917 	ldw	r3,-28(fp)
 100cc20:	e0bff717 	ldw	r2,-36(fp)
 100cc24:	1885883a 	add	r2,r3,r2
 100cc28:	10c1ffcc 	andi	r3,r2,2047
 100cc2c:	e0bffb17 	ldw	r2,-20(fp)
 100cc30:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 100cc34:	e0bffd17 	ldw	r2,-12(fp)
 100cc38:	10800048 	cmpgei	r2,r2,1
 100cc3c:	103fc31e 	bne	r2,zero,100cb4c <altera_avalon_jtag_uart_write+0x50>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100cc40:	0005303a 	rdctl	r2,status
 100cc44:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100cc48:	e0fff217 	ldw	r3,-56(fp)
 100cc4c:	00bfff84 	movi	r2,-2
 100cc50:	1884703a 	and	r2,r3,r2
 100cc54:	1001703a 	wrctl	status,r2
  
  return context;
 100cc58:	e0bff217 	ldw	r2,-56(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 100cc5c:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 100cc60:	e0bffb17 	ldw	r2,-20(fp)
 100cc64:	10800817 	ldw	r2,32(r2)
 100cc68:	10c00094 	ori	r3,r2,2
 100cc6c:	e0bffb17 	ldw	r2,-20(fp)
 100cc70:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 100cc74:	e0bffb17 	ldw	r2,-20(fp)
 100cc78:	10800017 	ldw	r2,0(r2)
 100cc7c:	11000104 	addi	r4,r2,4
 100cc80:	e0bffb17 	ldw	r2,-20(fp)
 100cc84:	10800817 	ldw	r2,32(r2)
 100cc88:	1007883a 	mov	r3,r2
 100cc8c:	2005883a 	mov	r2,r4
 100cc90:	10c00035 	stwio	r3,0(r2)
 100cc94:	e0bff617 	ldw	r2,-40(fp)
 100cc98:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100cc9c:	e0bff117 	ldw	r2,-60(fp)
 100cca0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 100cca4:	e0bffd17 	ldw	r2,-12(fp)
 100cca8:	10800050 	cmplti	r2,r2,1
 100ccac:	10002d1e 	bne	r2,zero,100cd64 <altera_avalon_jtag_uart_write+0x268>
    {
      if (flags & O_NONBLOCK)
 100ccb0:	e0bffe17 	ldw	r2,-8(fp)
 100ccb4:	1090000c 	andi	r2,r2,16384
 100ccb8:	1004c03a 	cmpne	r2,r2,zero
 100ccbc:	10002c1e 	bne	r2,zero,100cd70 <altera_avalon_jtag_uart_write+0x274>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
 100ccc0:	00804074 	movhi	r2,257
 100ccc4:	108eaa44 	addi	r2,r2,15017
 100ccc8:	10800003 	ldbu	r2,0(r2)
 100cccc:	10803fcc 	andi	r2,r2,255
 100ccd0:	10800058 	cmpnei	r2,r2,1
 100ccd4:	1000161e 	bne	r2,zero,100cd30 <altera_avalon_jtag_uart_write+0x234>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
 100ccd8:	e0bffb17 	ldw	r2,-20(fp)
 100ccdc:	10800c17 	ldw	r2,48(r2)
 100cce0:	e0bfee15 	stw	r2,-72(fp)
 100cce4:	00800184 	movi	r2,6
 100cce8:	e0bfef0d 	sth	r2,-68(fp)
 100ccec:	00bfe0c4 	movi	r2,-125
 100ccf0:	e0bfef85 	stb	r2,-66(fp)
 100ccf4:	e03ff00d 	sth	zero,-64(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 100ccf8:	00804074 	movhi	r2,257
 100ccfc:	108eaa44 	addi	r2,r2,15017
 100cd00:	10800003 	ldbu	r2,0(r2)
 100cd04:	10803fcc 	andi	r2,r2,255
 100cd08:	1005003a 	cmpeq	r2,r2,zero
 100cd0c:	1000111e 	bne	r2,zero,100cd54 <altera_avalon_jtag_uart_write+0x258>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 100cd10:	e17fef0b 	ldhu	r5,-68(fp)
 100cd14:	e1bfef83 	ldbu	r6,-66(fp)
 100cd18:	e1fff00b 	ldhu	r7,-64(fp)
 100cd1c:	e0bffa44 	addi	r2,fp,-23
 100cd20:	d8800015 	stw	r2,0(sp)
 100cd24:	e13fee17 	ldw	r4,-72(fp)
 100cd28:	10066e40 	call	10066e4 <OSFlagPend>
    return err;
 100cd2c:	00000906 	br	100cd54 <altera_avalon_jtag_uart_write+0x258>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 100cd30:	e0bffb17 	ldw	r2,-20(fp)
 100cd34:	10c01017 	ldw	r3,64(r2)
 100cd38:	e0bff817 	ldw	r2,-32(fp)
 100cd3c:	1880051e 	bne	r3,r2,100cd54 <altera_avalon_jtag_uart_write+0x258>
 100cd40:	e0bffb17 	ldw	r2,-20(fp)
 100cd44:	10c00917 	ldw	r3,36(r2)
 100cd48:	e0bffb17 	ldw	r2,-20(fp)
 100cd4c:	10800117 	ldw	r2,4(r2)
 100cd50:	18bff736 	bltu	r3,r2,100cd30 <altera_avalon_jtag_uart_write+0x234>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 100cd54:	e0bffb17 	ldw	r2,-20(fp)
 100cd58:	10c01017 	ldw	r3,64(r2)
 100cd5c:	e0bff817 	ldw	r2,-32(fp)
 100cd60:	18800326 	beq	r3,r2,100cd70 <altera_avalon_jtag_uart_write+0x274>
         break;
    }
  }
  while (count > 0);
 100cd64:	e0bffd17 	ldw	r2,-12(fp)
 100cd68:	10800048 	cmpgei	r2,r2,1
 100cd6c:	103fb11e 	bne	r2,zero,100cc34 <altera_avalon_jtag_uart_write+0x138>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
 100cd70:	e0bffb17 	ldw	r2,-20(fp)
 100cd74:	11000b17 	ldw	r4,44(r2)
 100cd78:	1009a1c0 	call	1009a1c <OSSemPost>

  if (ptr != start)
 100cd7c:	e0fffc17 	ldw	r3,-16(fp)
 100cd80:	e0bff517 	ldw	r2,-44(fp)
 100cd84:	18800526 	beq	r3,r2,100cd9c <altera_avalon_jtag_uart_write+0x2a0>
    return ptr - start;
 100cd88:	e0fffc17 	ldw	r3,-16(fp)
 100cd8c:	e0bff517 	ldw	r2,-44(fp)
 100cd90:	1887c83a 	sub	r3,r3,r2
 100cd94:	e0ffff15 	stw	r3,-4(fp)
 100cd98:	00000906 	br	100cdc0 <altera_avalon_jtag_uart_write+0x2c4>
  else if (flags & O_NONBLOCK)
 100cd9c:	e0bffe17 	ldw	r2,-8(fp)
 100cda0:	1090000c 	andi	r2,r2,16384
 100cda4:	1005003a 	cmpeq	r2,r2,zero
 100cda8:	1000031e 	bne	r2,zero,100cdb8 <altera_avalon_jtag_uart_write+0x2bc>
    return -EWOULDBLOCK;
 100cdac:	00bffd44 	movi	r2,-11
 100cdb0:	e0bfff15 	stw	r2,-4(fp)
 100cdb4:	00000206 	br	100cdc0 <altera_avalon_jtag_uart_write+0x2c4>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 100cdb8:	00bffec4 	movi	r2,-5
 100cdbc:	e0bfff15 	stw	r2,-4(fp)
 100cdc0:	e0bfff17 	ldw	r2,-4(fp)
}
 100cdc4:	e037883a 	mov	sp,fp
 100cdc8:	dfc00117 	ldw	ra,4(sp)
 100cdcc:	df000017 	ldw	fp,0(sp)
 100cdd0:	dec00204 	addi	sp,sp,8
 100cdd4:	f800283a 	ret

0100cdd8 <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 100cdd8:	defff904 	addi	sp,sp,-28
 100cddc:	df000615 	stw	fp,24(sp)
 100cde0:	df000604 	addi	fp,sp,24
 100cde4:	e13ffe15 	stw	r4,-8(fp)
 100cde8:	e17fff15 	stw	r5,-4(fp)
  alt_u32 id, data, check;
  int ret_code = -1;
 100cdec:	00bfffc4 	movi	r2,-1
 100cdf0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_READ_CPUID(id);
 100cdf4:	0005317a 	rdctl	r2,cpuid
 100cdf8:	e0bffd15 	stw	r2,-12(fp)

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
 100cdfc:	e0bffd17 	ldw	r2,-12(fp)
 100ce00:	1006943a 	slli	r3,r2,16
 100ce04:	e0bfff17 	ldw	r2,-4(fp)
 100ce08:	1884b03a 	or	r2,r3,r2
 100ce0c:	e0bffc15 	stw	r2,-16(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
 100ce10:	e0bffe17 	ldw	r2,-8(fp)
 100ce14:	10800317 	ldw	r2,12(r2)
 100ce18:	e0fffc17 	ldw	r3,-16(fp)
 100ce1c:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 100ce20:	e0bffe17 	ldw	r2,-8(fp)
 100ce24:	10800317 	ldw	r2,12(r2)
 100ce28:	10800037 	ldwio	r2,0(r2)
 100ce2c:	e0bffb15 	stw	r2,-20(fp)

  if ( check == data)
 100ce30:	e0fffb17 	ldw	r3,-20(fp)
 100ce34:	e0bffc17 	ldw	r2,-16(fp)
 100ce38:	1880011e 	bne	r3,r2,100ce40 <alt_mutex_trylock+0x68>
  {
    ret_code = 0;
 100ce3c:	e03ffa15 	stw	zero,-24(fp)
  }

  return ret_code;
 100ce40:	e0bffa17 	ldw	r2,-24(fp)
}
 100ce44:	e037883a 	mov	sp,fp
 100ce48:	df000017 	ldw	fp,0(sp)
 100ce4c:	dec00104 	addi	sp,sp,4
 100ce50:	f800283a 	ret

0100ce54 <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
 100ce54:	defffc04 	addi	sp,sp,-16
 100ce58:	dfc00315 	stw	ra,12(sp)
 100ce5c:	df000215 	stw	fp,8(sp)
 100ce60:	df000204 	addi	fp,sp,8
 100ce64:	e13fff15 	stw	r4,-4(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
 100ce68:	e13fff17 	ldw	r4,-4(fp)
 100ce6c:	d1602a04 	addi	r5,gp,-32600
 100ce70:	100d5900 	call	100d590 <alt_find_dev>
 100ce74:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
 100ce78:	e0bffe17 	ldw	r2,-8(fp)
 100ce7c:	1004c03a 	cmpne	r2,r2,zero
 100ce80:	1000041e 	bne	r2,zero,100ce94 <altera_avalon_mutex_open+0x40>
  {
    ALT_ERRNO = ENODEV;
 100ce84:	100ceac0 	call	100ceac <alt_get_errno>
 100ce88:	1007883a 	mov	r3,r2
 100ce8c:	008004c4 	movi	r2,19
 100ce90:	18800015 	stw	r2,0(r3)
  }

  return dev;
 100ce94:	e0bffe17 	ldw	r2,-8(fp)
}
 100ce98:	e037883a 	mov	sp,fp
 100ce9c:	dfc00117 	ldw	ra,4(sp)
 100cea0:	df000017 	ldw	fp,0(sp)
 100cea4:	dec00204 	addi	sp,sp,8
 100cea8:	f800283a 	ret

0100ceac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100ceac:	defffd04 	addi	sp,sp,-12
 100ceb0:	dfc00215 	stw	ra,8(sp)
 100ceb4:	df000115 	stw	fp,4(sp)
 100ceb8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100cebc:	00804074 	movhi	r2,257
 100cec0:	10878804 	addi	r2,r2,7712
 100cec4:	10800017 	ldw	r2,0(r2)
 100cec8:	1005003a 	cmpeq	r2,r2,zero
 100cecc:	1000061e 	bne	r2,zero,100cee8 <alt_get_errno+0x3c>
 100ced0:	00804074 	movhi	r2,257
 100ced4:	10878804 	addi	r2,r2,7712
 100ced8:	10800017 	ldw	r2,0(r2)
 100cedc:	103ee83a 	callr	r2
 100cee0:	e0bfff15 	stw	r2,-4(fp)
 100cee4:	00000306 	br	100cef4 <alt_get_errno+0x48>
 100cee8:	00804074 	movhi	r2,257
 100ceec:	108ea104 	addi	r2,r2,14980
 100cef0:	e0bfff15 	stw	r2,-4(fp)
 100cef4:	e0bfff17 	ldw	r2,-4(fp)
}
 100cef8:	e037883a 	mov	sp,fp
 100cefc:	dfc00117 	ldw	ra,4(sp)
 100cf00:	df000017 	ldw	fp,0(sp)
 100cf04:	dec00204 	addi	sp,sp,8
 100cf08:	f800283a 	ret

0100cf0c <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
 100cf0c:	defffe04 	addi	sp,sp,-8
 100cf10:	df000115 	stw	fp,4(sp)
 100cf14:	df000104 	addi	fp,sp,4
 100cf18:	e13fff15 	stw	r4,-4(fp)
  return;
}
 100cf1c:	e037883a 	mov	sp,fp
 100cf20:	df000017 	ldw	fp,0(sp)
 100cf24:	dec00104 	addi	sp,sp,4
 100cf28:	f800283a 	ret

0100cf2c <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
 100cf2c:	defffa04 	addi	sp,sp,-24
 100cf30:	dfc00515 	stw	ra,20(sp)
 100cf34:	df000415 	stw	fp,16(sp)
 100cf38:	df000404 	addi	fp,sp,16
 100cf3c:	e13ffe15 	stw	r4,-8(fp)
 100cf40:	e17fff15 	stw	r5,-4(fp)
  /*
   * When running in a multi threaded environment, obtain the "lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);
 100cf44:	e0bffe17 	ldw	r2,-8(fp)
 100cf48:	10800417 	ldw	r2,16(r2)
 100cf4c:	e0bffc15 	stw	r2,-16(fp)
 100cf50:	e03ffd0d 	sth	zero,-12(fp)
 100cf54:	e17ffd0b 	ldhu	r5,-12(fp)
 100cf58:	e1bffd84 	addi	r6,fp,-10
 100cf5c:	e13ffc17 	ldw	r4,-16(fp)
 100cf60:	10096240 	call	1009624 <OSSemPend>

  while ( alt_mutex_trylock( dev, value ) != 0);
 100cf64:	e13ffe17 	ldw	r4,-8(fp)
 100cf68:	e17fff17 	ldw	r5,-4(fp)
 100cf6c:	100cdd80 	call	100cdd8 <alt_mutex_trylock>
 100cf70:	1004c03a 	cmpne	r2,r2,zero
 100cf74:	103ffb1e 	bne	r2,zero,100cf64 <altera_avalon_mutex_lock+0x38>
}
 100cf78:	e037883a 	mov	sp,fp
 100cf7c:	dfc00117 	ldw	ra,4(sp)
 100cf80:	df000017 	ldw	fp,0(sp)
 100cf84:	dec00204 	addi	sp,sp,8
 100cf88:	f800283a 	ret

0100cf8c <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 100cf8c:	defff804 	addi	sp,sp,-32
 100cf90:	dfc00715 	stw	ra,28(sp)
 100cf94:	df000615 	stw	fp,24(sp)
 100cf98:	df000604 	addi	fp,sp,24
 100cf9c:	e13ffe15 	stw	r4,-8(fp)
 100cfa0:	e17fff15 	stw	r5,-4(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);
 100cfa4:	e0bffe17 	ldw	r2,-8(fp)
 100cfa8:	10800417 	ldw	r2,16(r2)
 100cfac:	e0bffa15 	stw	r2,-24(fp)
 100cfb0:	e03ffb0d 	sth	zero,-20(fp)
 100cfb4:	e17ffb0b 	ldhu	r5,-20(fp)
 100cfb8:	e1bffd04 	addi	r6,fp,-12
 100cfbc:	e13ffa17 	ldw	r4,-24(fp)
 100cfc0:	10096240 	call	1009624 <OSSemPend>

  ret_code = alt_mutex_trylock( dev, value);
 100cfc4:	e13ffe17 	ldw	r4,-8(fp)
 100cfc8:	e17fff17 	ldw	r5,-4(fp)
 100cfcc:	100cdd80 	call	100cdd8 <alt_mutex_trylock>
 100cfd0:	e0bffc15 	stw	r2,-16(fp)

  /*
  * If the try failed then release the thread Mutex  
  */
  if (ret_code)
 100cfd4:	e0bffc17 	ldw	r2,-16(fp)
 100cfd8:	1005003a 	cmpeq	r2,r2,zero
 100cfdc:	1000031e 	bne	r2,zero,100cfec <altera_avalon_mutex_trylock+0x60>
  {
    ALT_SEM_POST (dev->lock);
 100cfe0:	e0bffe17 	ldw	r2,-8(fp)
 100cfe4:	11000417 	ldw	r4,16(r2)
 100cfe8:	1009a1c0 	call	1009a1c <OSSemPost>
  }

  return ret_code;
 100cfec:	e0bffc17 	ldw	r2,-16(fp)
}
 100cff0:	e037883a 	mov	sp,fp
 100cff4:	dfc00117 	ldw	ra,4(sp)
 100cff8:	df000017 	ldw	fp,0(sp)
 100cffc:	dec00204 	addi	sp,sp,8
 100d000:	f800283a 	ret

0100d004 <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
 100d004:	defffc04 	addi	sp,sp,-16
 100d008:	dfc00315 	stw	ra,12(sp)
 100d00c:	df000215 	stw	fp,8(sp)
 100d010:	df000204 	addi	fp,sp,8
 100d014:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id;
  NIOS2_READ_CPUID(id);
 100d018:	0005317a 	rdctl	r2,cpuid
 100d01c:	e0bffe15 	stw	r2,-8(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
 100d020:	e0bfff17 	ldw	r2,-4(fp)
 100d024:	10800317 	ldw	r2,12(r2)
 100d028:	10800104 	addi	r2,r2,4
 100d02c:	1007883a 	mov	r3,r2
 100d030:	00800044 	movi	r2,1
 100d034:	18800035 	stwio	r2,0(r3)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
 100d038:	e0bfff17 	ldw	r2,-4(fp)
 100d03c:	11000317 	ldw	r4,12(r2)
 100d040:	e0bffe17 	ldw	r2,-8(fp)
 100d044:	1004943a 	slli	r2,r2,16
 100d048:	1007883a 	mov	r3,r2
 100d04c:	2005883a 	mov	r2,r4
 100d050:	10c00035 	stwio	r3,0(r2)
                                  id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST);

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
 100d054:	e0bfff17 	ldw	r2,-4(fp)
 100d058:	11000417 	ldw	r4,16(r2)
 100d05c:	1009a1c0 	call	1009a1c <OSSemPost>
}
 100d060:	e037883a 	mov	sp,fp
 100d064:	dfc00117 	ldw	ra,4(sp)
 100d068:	df000017 	ldw	fp,0(sp)
 100d06c:	dec00204 	addi	sp,sp,8
 100d070:	f800283a 	ret

0100d074 <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
 100d074:	defff904 	addi	sp,sp,-28
 100d078:	df000615 	stw	fp,24(sp)
 100d07c:	df000604 	addi	fp,sp,24
 100d080:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id, data, owner, value;
  int ret_code = 0;
 100d084:	e03ffa15 	stw	zero,-24(fp)

  NIOS2_READ_CPUID(id);
 100d088:	0005317a 	rdctl	r2,cpuid
 100d08c:	e0bffe15 	stw	r2,-8(fp)

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 100d090:	e0bfff17 	ldw	r2,-4(fp)
 100d094:	10800317 	ldw	r2,12(r2)
 100d098:	10800037 	ldwio	r2,0(r2)
 100d09c:	e0bffd15 	stw	r2,-12(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
 100d0a0:	e0bffd17 	ldw	r2,-12(fp)
 100d0a4:	10bfffec 	andhi	r2,r2,65535
 100d0a8:	1004d43a 	srli	r2,r2,16
 100d0ac:	e0bffc15 	stw	r2,-16(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
 100d0b0:	e0fffc17 	ldw	r3,-16(fp)
 100d0b4:	e0bffe17 	ldw	r2,-8(fp)
 100d0b8:	1880081e 	bne	r3,r2,100d0dc <altera_avalon_mutex_is_mine+0x68>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
 100d0bc:	e0bffd17 	ldw	r2,-12(fp)
 100d0c0:	10bfffcc 	andi	r2,r2,65535
 100d0c4:	e0bffb15 	stw	r2,-20(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
 100d0c8:	e0bffb17 	ldw	r2,-20(fp)
 100d0cc:	1005003a 	cmpeq	r2,r2,zero
 100d0d0:	1000021e 	bne	r2,zero,100d0dc <altera_avalon_mutex_is_mine+0x68>
    {
      ret_code = 1;
 100d0d4:	00800044 	movi	r2,1
 100d0d8:	e0bffa15 	stw	r2,-24(fp)
    }
  }

  return ret_code;
 100d0dc:	e0bffa17 	ldw	r2,-24(fp)
}
 100d0e0:	e037883a 	mov	sp,fp
 100d0e4:	df000017 	ldw	fp,0(sp)
 100d0e8:	dec00104 	addi	sp,sp,4
 100d0ec:	f800283a 	ret

0100d0f0 <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
 100d0f0:	defffc04 	addi	sp,sp,-16
 100d0f4:	df000315 	stw	fp,12(sp)
 100d0f8:	df000304 	addi	fp,sp,12
 100d0fc:	e13fff15 	stw	r4,-4(fp)
  alt_u32 data;
  int ret_code = 0;
 100d100:	e03ffd15 	stw	zero,-12(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
 100d104:	e0bfff17 	ldw	r2,-4(fp)
 100d108:	10800317 	ldw	r2,12(r2)
 100d10c:	10800104 	addi	r2,r2,4
 100d110:	10800037 	ldwio	r2,0(r2)
 100d114:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
 100d118:	e0bffe17 	ldw	r2,-8(fp)
 100d11c:	1080004c 	andi	r2,r2,1
 100d120:	10803fcc 	andi	r2,r2,255
 100d124:	1005003a 	cmpeq	r2,r2,zero
 100d128:	1000021e 	bne	r2,zero,100d134 <altera_avalon_mutex_first_lock+0x44>
  {
    ret_code = 1;
 100d12c:	00800044 	movi	r2,1
 100d130:	e0bffd15 	stw	r2,-12(fp)
  }

  return ret_code;
 100d134:	e0bffd17 	ldw	r2,-12(fp)
}
 100d138:	e037883a 	mov	sp,fp
 100d13c:	df000017 	ldw	fp,0(sp)
 100d140:	dec00104 	addi	sp,sp,4
 100d144:	f800283a 	ret

0100d148 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 100d148:	defff904 	addi	sp,sp,-28
 100d14c:	dfc00615 	stw	ra,24(sp)
 100d150:	df000515 	stw	fp,20(sp)
 100d154:	df000504 	addi	fp,sp,20
 100d158:	e13ffe15 	stw	r4,-8(fp)
 100d15c:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 100d160:	e0bffe17 	ldw	r2,-8(fp)
 100d164:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 100d168:	e0bffe17 	ldw	r2,-8(fp)
 100d16c:	10800104 	addi	r2,r2,4
 100d170:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100d174:	0005303a 	rdctl	r2,status
 100d178:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100d17c:	e0fffc17 	ldw	r3,-16(fp)
 100d180:	00bfff84 	movi	r2,-2
 100d184:	1884703a 	and	r2,r3,r2
 100d188:	1001703a 	wrctl	status,r2
  
  return context;
 100d18c:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 100d190:	e0bffd15 	stw	r2,-12(fp)
  alt_tick ();
 100d194:	100dccc0 	call	100dccc <alt_tick>
 100d198:	e0bffd17 	ldw	r2,-12(fp)
 100d19c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100d1a0:	e0bffb17 	ldw	r2,-20(fp)
 100d1a4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 100d1a8:	e037883a 	mov	sp,fp
 100d1ac:	dfc00117 	ldw	ra,4(sp)
 100d1b0:	df000017 	ldw	fp,0(sp)
 100d1b4:	dec00204 	addi	sp,sp,8
 100d1b8:	f800283a 	ret

0100d1bc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 100d1bc:	defff904 	addi	sp,sp,-28
 100d1c0:	dfc00615 	stw	ra,24(sp)
 100d1c4:	df000515 	stw	fp,20(sp)
 100d1c8:	df000504 	addi	fp,sp,20
 100d1cc:	e13ffc15 	stw	r4,-16(fp)
 100d1d0:	e17ffd15 	stw	r5,-12(fp)
 100d1d4:	e1bffe15 	stw	r6,-8(fp)
 100d1d8:	e1ffff15 	stw	r7,-4(fp)
 100d1dc:	e0bfff17 	ldw	r2,-4(fp)
 100d1e0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 100d1e4:	00804074 	movhi	r2,257
 100d1e8:	108ebf04 	addi	r2,r2,15100
 100d1ec:	10800017 	ldw	r2,0(r2)
 100d1f0:	1004c03a 	cmpne	r2,r2,zero
 100d1f4:	1000041e 	bne	r2,zero,100d208 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
 100d1f8:	00c04074 	movhi	r3,257
 100d1fc:	18cebf04 	addi	r3,r3,15100
 100d200:	e0bffb17 	ldw	r2,-20(fp)
 100d204:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 100d208:	e0bffc17 	ldw	r2,-16(fp)
 100d20c:	10800104 	addi	r2,r2,4
 100d210:	1007883a 	mov	r3,r2
 100d214:	008001c4 	movi	r2,7
 100d218:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
 100d21c:	e13ffe17 	ldw	r4,-8(fp)
 100d220:	e17ffc17 	ldw	r5,-16(fp)
 100d224:	01804074 	movhi	r6,257
 100d228:	31b45204 	addi	r6,r6,-11960
 100d22c:	100d7900 	call	100d790 <alt_irq_register>
#endif  
}
 100d230:	e037883a 	mov	sp,fp
 100d234:	dfc00117 	ldw	ra,4(sp)
 100d238:	df000017 	ldw	fp,0(sp)
 100d23c:	dec00204 	addi	sp,sp,8
 100d240:	f800283a 	ret

0100d244 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 100d244:	defff404 	addi	sp,sp,-48
 100d248:	df000b15 	stw	fp,44(sp)
 100d24c:	df000b04 	addi	fp,sp,44
 100d250:	e13ffb15 	stw	r4,-20(fp)
 100d254:	e17ffc15 	stw	r5,-16(fp)
 100d258:	e1bffd15 	stw	r6,-12(fp)
 100d25c:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 100d260:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 100d264:	00804074 	movhi	r2,257
 100d268:	108ebf04 	addi	r2,r2,15100
 100d26c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 100d270:	1005003a 	cmpeq	r2,r2,zero
 100d274:	1000411e 	bne	r2,zero,100d37c <alt_alarm_start+0x138>
  {
    if (alarm)
 100d278:	e0bffb17 	ldw	r2,-20(fp)
 100d27c:	1005003a 	cmpeq	r2,r2,zero
 100d280:	10003b1e 	bne	r2,zero,100d370 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 100d284:	e0fffb17 	ldw	r3,-20(fp)
 100d288:	e0bffd17 	ldw	r2,-12(fp)
 100d28c:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 100d290:	e0fffb17 	ldw	r3,-20(fp)
 100d294:	e0bffe17 	ldw	r2,-8(fp)
 100d298:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100d29c:	0005303a 	rdctl	r2,status
 100d2a0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100d2a4:	e0fff817 	ldw	r3,-32(fp)
 100d2a8:	00bfff84 	movi	r2,-2
 100d2ac:	1884703a 	and	r2,r3,r2
 100d2b0:	1001703a 	wrctl	status,r2
  
  return context;
 100d2b4:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 100d2b8:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 100d2bc:	00804074 	movhi	r2,257
 100d2c0:	108ec004 	addi	r2,r2,15104
 100d2c4:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 100d2c8:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 100d2cc:	e0fffc17 	ldw	r3,-16(fp)
 100d2d0:	e0bff917 	ldw	r2,-28(fp)
 100d2d4:	1885883a 	add	r2,r3,r2
 100d2d8:	10c00044 	addi	r3,r2,1
 100d2dc:	e0bffb17 	ldw	r2,-20(fp)
 100d2e0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 100d2e4:	e0bffb17 	ldw	r2,-20(fp)
 100d2e8:	10c00217 	ldw	r3,8(r2)
 100d2ec:	e0bff917 	ldw	r2,-28(fp)
 100d2f0:	1880042e 	bgeu	r3,r2,100d304 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 100d2f4:	e0fffb17 	ldw	r3,-20(fp)
 100d2f8:	00800044 	movi	r2,1
 100d2fc:	18800405 	stb	r2,16(r3)
 100d300:	00000206 	br	100d30c <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 100d304:	e0bffb17 	ldw	r2,-20(fp)
 100d308:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 100d30c:	e0fffb17 	ldw	r3,-20(fp)
 100d310:	00804074 	movhi	r2,257
 100d314:	1087ac04 	addi	r2,r2,7856
 100d318:	e0bff615 	stw	r2,-40(fp)
 100d31c:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 100d320:	e0fff717 	ldw	r3,-36(fp)
 100d324:	e0bff617 	ldw	r2,-40(fp)
 100d328:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 100d32c:	e0bff617 	ldw	r2,-40(fp)
 100d330:	10c00017 	ldw	r3,0(r2)
 100d334:	e0bff717 	ldw	r2,-36(fp)
 100d338:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 100d33c:	e0bff617 	ldw	r2,-40(fp)
 100d340:	10c00017 	ldw	r3,0(r2)
 100d344:	e0bff717 	ldw	r2,-36(fp)
 100d348:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 100d34c:	e0fff617 	ldw	r3,-40(fp)
 100d350:	e0bff717 	ldw	r2,-36(fp)
 100d354:	18800015 	stw	r2,0(r3)
 100d358:	e0bffa17 	ldw	r2,-24(fp)
 100d35c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100d360:	e0bff517 	ldw	r2,-44(fp)
 100d364:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 100d368:	e03fff15 	stw	zero,-4(fp)
 100d36c:	00000506 	br	100d384 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 100d370:	00bffa84 	movi	r2,-22
 100d374:	e0bfff15 	stw	r2,-4(fp)
 100d378:	00000206 	br	100d384 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 100d37c:	00bfde84 	movi	r2,-134
 100d380:	e0bfff15 	stw	r2,-4(fp)
 100d384:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 100d388:	e037883a 	mov	sp,fp
 100d38c:	df000017 	ldw	fp,0(sp)
 100d390:	dec00104 	addi	sp,sp,4
 100d394:	f800283a 	ret

0100d398 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 100d398:	deffff04 	addi	sp,sp,-4
 100d39c:	df000015 	stw	fp,0(sp)
 100d3a0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 100d3a4:	e037883a 	mov	sp,fp
 100d3a8:	df000017 	ldw	fp,0(sp)
 100d3ac:	dec00104 	addi	sp,sp,4
 100d3b0:	f800283a 	ret

0100d3b4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 100d3b4:	defff904 	addi	sp,sp,-28
 100d3b8:	dfc00615 	stw	ra,24(sp)
 100d3bc:	df000515 	stw	fp,20(sp)
 100d3c0:	df000504 	addi	fp,sp,20
 100d3c4:	e13ffd15 	stw	r4,-12(fp)
 100d3c8:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 100d3cc:	e0bffd17 	ldw	r2,-12(fp)
 100d3d0:	1005003a 	cmpeq	r2,r2,zero
 100d3d4:	1000041e 	bne	r2,zero,100d3e8 <alt_dev_llist_insert+0x34>
 100d3d8:	e0bffd17 	ldw	r2,-12(fp)
 100d3dc:	10800217 	ldw	r2,8(r2)
 100d3e0:	1004c03a 	cmpne	r2,r2,zero
 100d3e4:	1000071e 	bne	r2,zero,100d404 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 100d3e8:	100d4680 	call	100d468 <alt_get_errno>
 100d3ec:	1007883a 	mov	r3,r2
 100d3f0:	00800584 	movi	r2,22
 100d3f4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 100d3f8:	00bffa84 	movi	r2,-22
 100d3fc:	e0bfff15 	stw	r2,-4(fp)
 100d400:	00001306 	br	100d450 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 100d404:	e0fffd17 	ldw	r3,-12(fp)
 100d408:	e0bffe17 	ldw	r2,-8(fp)
 100d40c:	e0bffb15 	stw	r2,-20(fp)
 100d410:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 100d414:	e0fffc17 	ldw	r3,-16(fp)
 100d418:	e0bffb17 	ldw	r2,-20(fp)
 100d41c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 100d420:	e0bffb17 	ldw	r2,-20(fp)
 100d424:	10c00017 	ldw	r3,0(r2)
 100d428:	e0bffc17 	ldw	r2,-16(fp)
 100d42c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 100d430:	e0bffb17 	ldw	r2,-20(fp)
 100d434:	10c00017 	ldw	r3,0(r2)
 100d438:	e0bffc17 	ldw	r2,-16(fp)
 100d43c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 100d440:	e0fffb17 	ldw	r3,-20(fp)
 100d444:	e0bffc17 	ldw	r2,-16(fp)
 100d448:	18800015 	stw	r2,0(r3)

  return 0;  
 100d44c:	e03fff15 	stw	zero,-4(fp)
 100d450:	e0bfff17 	ldw	r2,-4(fp)
}
 100d454:	e037883a 	mov	sp,fp
 100d458:	dfc00117 	ldw	ra,4(sp)
 100d45c:	df000017 	ldw	fp,0(sp)
 100d460:	dec00204 	addi	sp,sp,8
 100d464:	f800283a 	ret

0100d468 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100d468:	defffd04 	addi	sp,sp,-12
 100d46c:	dfc00215 	stw	ra,8(sp)
 100d470:	df000115 	stw	fp,4(sp)
 100d474:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100d478:	00804074 	movhi	r2,257
 100d47c:	10878804 	addi	r2,r2,7712
 100d480:	10800017 	ldw	r2,0(r2)
 100d484:	1005003a 	cmpeq	r2,r2,zero
 100d488:	1000061e 	bne	r2,zero,100d4a4 <alt_get_errno+0x3c>
 100d48c:	00804074 	movhi	r2,257
 100d490:	10878804 	addi	r2,r2,7712
 100d494:	10800017 	ldw	r2,0(r2)
 100d498:	103ee83a 	callr	r2
 100d49c:	e0bfff15 	stw	r2,-4(fp)
 100d4a0:	00000306 	br	100d4b0 <alt_get_errno+0x48>
 100d4a4:	00804074 	movhi	r2,257
 100d4a8:	108ea104 	addi	r2,r2,14980
 100d4ac:	e0bfff15 	stw	r2,-4(fp)
 100d4b0:	e0bfff17 	ldw	r2,-4(fp)
}
 100d4b4:	e037883a 	mov	sp,fp
 100d4b8:	dfc00117 	ldw	ra,4(sp)
 100d4bc:	df000017 	ldw	fp,0(sp)
 100d4c0:	dec00204 	addi	sp,sp,8
 100d4c4:	f800283a 	ret

0100d4c8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 100d4c8:	defffd04 	addi	sp,sp,-12
 100d4cc:	dfc00215 	stw	ra,8(sp)
 100d4d0:	df000115 	stw	fp,4(sp)
 100d4d4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 100d4d8:	00bfff04 	movi	r2,-4
 100d4dc:	00c04074 	movhi	r3,257
 100d4e0:	18fff704 	addi	r3,r3,-36
 100d4e4:	1885883a 	add	r2,r3,r2
 100d4e8:	e0bfff15 	stw	r2,-4(fp)
 100d4ec:	00000606 	br	100d508 <_do_ctors+0x40>
        (*ctor) (); 
 100d4f0:	e0bfff17 	ldw	r2,-4(fp)
 100d4f4:	10800017 	ldw	r2,0(r2)
 100d4f8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 100d4fc:	e0bfff17 	ldw	r2,-4(fp)
 100d500:	10bfff04 	addi	r2,r2,-4
 100d504:	e0bfff15 	stw	r2,-4(fp)
 100d508:	e0ffff17 	ldw	r3,-4(fp)
 100d50c:	00804074 	movhi	r2,257
 100d510:	10bff604 	addi	r2,r2,-40
 100d514:	18bff62e 	bgeu	r3,r2,100d4f0 <_do_ctors+0x28>
        (*ctor) (); 
}
 100d518:	e037883a 	mov	sp,fp
 100d51c:	dfc00117 	ldw	ra,4(sp)
 100d520:	df000017 	ldw	fp,0(sp)
 100d524:	dec00204 	addi	sp,sp,8
 100d528:	f800283a 	ret

0100d52c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 100d52c:	defffd04 	addi	sp,sp,-12
 100d530:	dfc00215 	stw	ra,8(sp)
 100d534:	df000115 	stw	fp,4(sp)
 100d538:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 100d53c:	00bfff04 	movi	r2,-4
 100d540:	00c04074 	movhi	r3,257
 100d544:	18fff704 	addi	r3,r3,-36
 100d548:	1885883a 	add	r2,r3,r2
 100d54c:	e0bfff15 	stw	r2,-4(fp)
 100d550:	00000606 	br	100d56c <_do_dtors+0x40>
        (*dtor) (); 
 100d554:	e0bfff17 	ldw	r2,-4(fp)
 100d558:	10800017 	ldw	r2,0(r2)
 100d55c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 100d560:	e0bfff17 	ldw	r2,-4(fp)
 100d564:	10bfff04 	addi	r2,r2,-4
 100d568:	e0bfff15 	stw	r2,-4(fp)
 100d56c:	e0ffff17 	ldw	r3,-4(fp)
 100d570:	00804074 	movhi	r2,257
 100d574:	10bff704 	addi	r2,r2,-36
 100d578:	18bff62e 	bgeu	r3,r2,100d554 <_do_dtors+0x28>
        (*dtor) (); 
}
 100d57c:	e037883a 	mov	sp,fp
 100d580:	dfc00117 	ldw	ra,4(sp)
 100d584:	df000017 	ldw	fp,0(sp)
 100d588:	dec00204 	addi	sp,sp,8
 100d58c:	f800283a 	ret

0100d590 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 100d590:	defff904 	addi	sp,sp,-28
 100d594:	dfc00615 	stw	ra,24(sp)
 100d598:	df000515 	stw	fp,20(sp)
 100d59c:	df000504 	addi	fp,sp,20
 100d5a0:	e13ffd15 	stw	r4,-12(fp)
 100d5a4:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 100d5a8:	e0bffe17 	ldw	r2,-8(fp)
 100d5ac:	10800017 	ldw	r2,0(r2)
 100d5b0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 100d5b4:	e13ffd17 	ldw	r4,-12(fp)
 100d5b8:	10003ac0 	call	10003ac <strlen>
 100d5bc:	10800044 	addi	r2,r2,1
 100d5c0:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 100d5c4:	00000d06 	br	100d5fc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 100d5c8:	e0bffc17 	ldw	r2,-16(fp)
 100d5cc:	11000217 	ldw	r4,8(r2)
 100d5d0:	e1bffb17 	ldw	r6,-20(fp)
 100d5d4:	e17ffd17 	ldw	r5,-12(fp)
 100d5d8:	100e5540 	call	100e554 <memcmp>
 100d5dc:	1004c03a 	cmpne	r2,r2,zero
 100d5e0:	1000031e 	bne	r2,zero,100d5f0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 100d5e4:	e0bffc17 	ldw	r2,-16(fp)
 100d5e8:	e0bfff15 	stw	r2,-4(fp)
 100d5ec:	00000706 	br	100d60c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 100d5f0:	e0bffc17 	ldw	r2,-16(fp)
 100d5f4:	10800017 	ldw	r2,0(r2)
 100d5f8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 100d5fc:	e0fffe17 	ldw	r3,-8(fp)
 100d600:	e0bffc17 	ldw	r2,-16(fp)
 100d604:	10fff01e 	bne	r2,r3,100d5c8 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 100d608:	e03fff15 	stw	zero,-4(fp)
 100d60c:	e0bfff17 	ldw	r2,-4(fp)
}
 100d610:	e037883a 	mov	sp,fp
 100d614:	dfc00117 	ldw	ra,4(sp)
 100d618:	df000017 	ldw	fp,0(sp)
 100d61c:	dec00204 	addi	sp,sp,8
 100d620:	f800283a 	ret

0100d624 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 100d624:	deffff04 	addi	sp,sp,-4
 100d628:	df000015 	stw	fp,0(sp)
 100d62c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 100d630:	e037883a 	mov	sp,fp
 100d634:	df000017 	ldw	fp,0(sp)
 100d638:	dec00104 	addi	sp,sp,4
 100d63c:	f800283a 	ret

0100d640 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 100d640:	defff804 	addi	sp,sp,-32
 100d644:	dfc00715 	stw	ra,28(sp)
 100d648:	df000615 	stw	fp,24(sp)
 100d64c:	dc000515 	stw	r16,20(sp)
 100d650:	df000504 	addi	fp,sp,20
 100d654:	e13ffc15 	stw	r4,-16(fp)
 100d658:	e17ffd15 	stw	r5,-12(fp)
 100d65c:	e1bffe15 	stw	r6,-8(fp)
 100d660:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 100d664:	e13ffd17 	ldw	r4,-12(fp)
 100d668:	e17ffe17 	ldw	r5,-8(fp)
 100d66c:	e1bfff17 	ldw	r6,-4(fp)
 100d670:	100da480 	call	100da48 <open>
 100d674:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 100d678:	e0bffb17 	ldw	r2,-20(fp)
 100d67c:	1004803a 	cmplt	r2,r2,zero
 100d680:	10001f1e 	bne	r2,zero,100d700 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
 100d684:	e13ffb17 	ldw	r4,-20(fp)
 100d688:	04004074 	movhi	r16,257
 100d68c:	8402ca04 	addi	r16,r16,2856
 100d690:	01400304 	movi	r5,12
 100d694:	1002c3c0 	call	1002c3c <__mulsi3>
 100d698:	1405883a 	add	r2,r2,r16
 100d69c:	10c00017 	ldw	r3,0(r2)
 100d6a0:	e0bffc17 	ldw	r2,-16(fp)
 100d6a4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 100d6a8:	e13ffb17 	ldw	r4,-20(fp)
 100d6ac:	04004074 	movhi	r16,257
 100d6b0:	8402ca04 	addi	r16,r16,2856
 100d6b4:	01400304 	movi	r5,12
 100d6b8:	1002c3c0 	call	1002c3c <__mulsi3>
 100d6bc:	1405883a 	add	r2,r2,r16
 100d6c0:	10800104 	addi	r2,r2,4
 100d6c4:	10c00017 	ldw	r3,0(r2)
 100d6c8:	e0bffc17 	ldw	r2,-16(fp)
 100d6cc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 100d6d0:	e13ffb17 	ldw	r4,-20(fp)
 100d6d4:	04004074 	movhi	r16,257
 100d6d8:	8402ca04 	addi	r16,r16,2856
 100d6dc:	01400304 	movi	r5,12
 100d6e0:	1002c3c0 	call	1002c3c <__mulsi3>
 100d6e4:	1405883a 	add	r2,r2,r16
 100d6e8:	10800204 	addi	r2,r2,8
 100d6ec:	10c00017 	ldw	r3,0(r2)
 100d6f0:	e0bffc17 	ldw	r2,-16(fp)
 100d6f4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 100d6f8:	e13ffb17 	ldw	r4,-20(fp)
 100d6fc:	10034e80 	call	10034e8 <alt_release_fd>
  }
} 
 100d700:	e037883a 	mov	sp,fp
 100d704:	dfc00217 	ldw	ra,8(sp)
 100d708:	df000117 	ldw	fp,4(sp)
 100d70c:	dc000017 	ldw	r16,0(sp)
 100d710:	dec00304 	addi	sp,sp,12
 100d714:	f800283a 	ret

0100d718 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 100d718:	defffb04 	addi	sp,sp,-20
 100d71c:	dfc00415 	stw	ra,16(sp)
 100d720:	df000315 	stw	fp,12(sp)
 100d724:	df000304 	addi	fp,sp,12
 100d728:	e13ffd15 	stw	r4,-12(fp)
 100d72c:	e17ffe15 	stw	r5,-8(fp)
 100d730:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 100d734:	01004074 	movhi	r4,257
 100d738:	2102cd04 	addi	r4,r4,2868
 100d73c:	e17ffd17 	ldw	r5,-12(fp)
 100d740:	01800044 	movi	r6,1
 100d744:	01c07fc4 	movi	r7,511
 100d748:	100d6400 	call	100d640 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 100d74c:	01004074 	movhi	r4,257
 100d750:	2102ca04 	addi	r4,r4,2856
 100d754:	e17ffe17 	ldw	r5,-8(fp)
 100d758:	000d883a 	mov	r6,zero
 100d75c:	01c07fc4 	movi	r7,511
 100d760:	100d6400 	call	100d640 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 100d764:	01004074 	movhi	r4,257
 100d768:	2102d004 	addi	r4,r4,2880
 100d76c:	e17fff17 	ldw	r5,-4(fp)
 100d770:	01800044 	movi	r6,1
 100d774:	01c07fc4 	movi	r7,511
 100d778:	100d6400 	call	100d640 <alt_open_fd>
}  
 100d77c:	e037883a 	mov	sp,fp
 100d780:	dfc00117 	ldw	ra,4(sp)
 100d784:	df000017 	ldw	fp,0(sp)
 100d788:	dec00204 	addi	sp,sp,8
 100d78c:	f800283a 	ret

0100d790 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 100d790:	deffef04 	addi	sp,sp,-68
 100d794:	df001015 	stw	fp,64(sp)
 100d798:	df001004 	addi	fp,sp,64
 100d79c:	e13ffc15 	stw	r4,-16(fp)
 100d7a0:	e17ffd15 	stw	r5,-12(fp)
 100d7a4:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
 100d7a8:	00bffa84 	movi	r2,-22
 100d7ac:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 100d7b0:	e0bffc17 	ldw	r2,-16(fp)
 100d7b4:	10800828 	cmpgeui	r2,r2,32
 100d7b8:	1000601e 	bne	r2,zero,100d93c <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100d7bc:	0005303a 	rdctl	r2,status
 100d7c0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100d7c4:	e0fff917 	ldw	r3,-28(fp)
 100d7c8:	00bfff84 	movi	r2,-2
 100d7cc:	1884703a 	and	r2,r3,r2
 100d7d0:	1001703a 	wrctl	status,r2
  
  return context;
 100d7d4:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 100d7d8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
 100d7dc:	e0bffc17 	ldw	r2,-16(fp)
 100d7e0:	00c040b4 	movhi	r3,258
 100d7e4:	18eb5404 	addi	r3,r3,-21168
 100d7e8:	100490fa 	slli	r2,r2,3
 100d7ec:	10c7883a 	add	r3,r2,r3
 100d7f0:	e0bffe17 	ldw	r2,-8(fp)
 100d7f4:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
 100d7f8:	e0bffc17 	ldw	r2,-16(fp)
 100d7fc:	00c040b4 	movhi	r3,258
 100d800:	18eb5404 	addi	r3,r3,-21168
 100d804:	100490fa 	slli	r2,r2,3
 100d808:	10c5883a 	add	r2,r2,r3
 100d80c:	10c00104 	addi	r3,r2,4
 100d810:	e0bffd17 	ldw	r2,-12(fp)
 100d814:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 100d818:	e0bffe17 	ldw	r2,-8(fp)
 100d81c:	1005003a 	cmpeq	r2,r2,zero
 100d820:	1000201e 	bne	r2,zero,100d8a4 <alt_irq_register+0x114>
 100d824:	e0bffc17 	ldw	r2,-16(fp)
 100d828:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100d82c:	0005303a 	rdctl	r2,status
 100d830:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100d834:	e0fff617 	ldw	r3,-40(fp)
 100d838:	00bfff84 	movi	r2,-2
 100d83c:	1884703a 	and	r2,r3,r2
 100d840:	1001703a 	wrctl	status,r2
  
  return context;
 100d844:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 100d848:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 100d84c:	e0fff717 	ldw	r3,-36(fp)
 100d850:	00800044 	movi	r2,1
 100d854:	10c4983a 	sll	r2,r2,r3
 100d858:	1007883a 	mov	r3,r2
 100d85c:	00804074 	movhi	r2,257
 100d860:	108ebe04 	addi	r2,r2,15096
 100d864:	10800017 	ldw	r2,0(r2)
 100d868:	1886b03a 	or	r3,r3,r2
 100d86c:	00804074 	movhi	r2,257
 100d870:	108ebe04 	addi	r2,r2,15096
 100d874:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 100d878:	00804074 	movhi	r2,257
 100d87c:	108ebe04 	addi	r2,r2,15096
 100d880:	10800017 	ldw	r2,0(r2)
 100d884:	100170fa 	wrctl	ienable,r2
 100d888:	e0bff817 	ldw	r2,-32(fp)
 100d88c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100d890:	e0bff517 	ldw	r2,-44(fp)
 100d894:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 100d898:	0005883a 	mov	r2,zero
 100d89c:	e0bfff15 	stw	r2,-4(fp)
 100d8a0:	00002006 	br	100d924 <alt_irq_register+0x194>
 100d8a4:	e0bffc17 	ldw	r2,-16(fp)
 100d8a8:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100d8ac:	0005303a 	rdctl	r2,status
 100d8b0:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100d8b4:	e0fff217 	ldw	r3,-56(fp)
 100d8b8:	00bfff84 	movi	r2,-2
 100d8bc:	1884703a 	and	r2,r3,r2
 100d8c0:	1001703a 	wrctl	status,r2
  
  return context;
 100d8c4:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 100d8c8:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
 100d8cc:	e0fff317 	ldw	r3,-52(fp)
 100d8d0:	00800044 	movi	r2,1
 100d8d4:	10c4983a 	sll	r2,r2,r3
 100d8d8:	0084303a 	nor	r2,zero,r2
 100d8dc:	1007883a 	mov	r3,r2
 100d8e0:	00804074 	movhi	r2,257
 100d8e4:	108ebe04 	addi	r2,r2,15096
 100d8e8:	10800017 	ldw	r2,0(r2)
 100d8ec:	1886703a 	and	r3,r3,r2
 100d8f0:	00804074 	movhi	r2,257
 100d8f4:	108ebe04 	addi	r2,r2,15096
 100d8f8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 100d8fc:	00804074 	movhi	r2,257
 100d900:	108ebe04 	addi	r2,r2,15096
 100d904:	10800017 	ldw	r2,0(r2)
 100d908:	100170fa 	wrctl	ienable,r2
 100d90c:	e0bff417 	ldw	r2,-48(fp)
 100d910:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100d914:	e0bff117 	ldw	r2,-60(fp)
 100d918:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 100d91c:	0005883a 	mov	r2,zero
 100d920:	e0bfff15 	stw	r2,-4(fp)
 100d924:	e0bfff17 	ldw	r2,-4(fp)
 100d928:	e0bffb15 	stw	r2,-20(fp)
 100d92c:	e0bffa17 	ldw	r2,-24(fp)
 100d930:	e0bff015 	stw	r2,-64(fp)
 100d934:	e0bff017 	ldw	r2,-64(fp)
 100d938:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 100d93c:	e0bffb17 	ldw	r2,-20(fp)
}
 100d940:	e037883a 	mov	sp,fp
 100d944:	df000017 	ldw	fp,0(sp)
 100d948:	dec00104 	addi	sp,sp,4
 100d94c:	f800283a 	ret

0100d950 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 100d950:	defffa04 	addi	sp,sp,-24
 100d954:	dfc00515 	stw	ra,20(sp)
 100d958:	df000415 	stw	fp,16(sp)
 100d95c:	dc000315 	stw	r16,12(sp)
 100d960:	df000304 	addi	fp,sp,12
 100d964:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 100d968:	e0bffe17 	ldw	r2,-8(fp)
 100d96c:	10800217 	ldw	r2,8(r2)
 100d970:	10d00034 	orhi	r3,r2,16384
 100d974:	e0bffe17 	ldw	r2,-8(fp)
 100d978:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 100d97c:	e03ffd15 	stw	zero,-12(fp)
 100d980:	00002306 	br	100da10 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 100d984:	e13ffd17 	ldw	r4,-12(fp)
 100d988:	04004074 	movhi	r16,257
 100d98c:	8402ca04 	addi	r16,r16,2856
 100d990:	01400304 	movi	r5,12
 100d994:	1002c3c0 	call	1002c3c <__mulsi3>
 100d998:	1405883a 	add	r2,r2,r16
 100d99c:	10c00017 	ldw	r3,0(r2)
 100d9a0:	e0bffe17 	ldw	r2,-8(fp)
 100d9a4:	10800017 	ldw	r2,0(r2)
 100d9a8:	1880161e 	bne	r3,r2,100da04 <alt_file_locked+0xb4>
 100d9ac:	e13ffd17 	ldw	r4,-12(fp)
 100d9b0:	04004074 	movhi	r16,257
 100d9b4:	8402ca04 	addi	r16,r16,2856
 100d9b8:	01400304 	movi	r5,12
 100d9bc:	1002c3c0 	call	1002c3c <__mulsi3>
 100d9c0:	1405883a 	add	r2,r2,r16
 100d9c4:	10800204 	addi	r2,r2,8
 100d9c8:	10800017 	ldw	r2,0(r2)
 100d9cc:	1004403a 	cmpge	r2,r2,zero
 100d9d0:	10000c1e 	bne	r2,zero,100da04 <alt_file_locked+0xb4>
 100d9d4:	e13ffd17 	ldw	r4,-12(fp)
 100d9d8:	01400304 	movi	r5,12
 100d9dc:	1002c3c0 	call	1002c3c <__mulsi3>
 100d9e0:	1007883a 	mov	r3,r2
 100d9e4:	00804074 	movhi	r2,257
 100d9e8:	1082ca04 	addi	r2,r2,2856
 100d9ec:	1887883a 	add	r3,r3,r2
 100d9f0:	e0bffe17 	ldw	r2,-8(fp)
 100d9f4:	18800326 	beq	r3,r2,100da04 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 100d9f8:	00bffcc4 	movi	r2,-13
 100d9fc:	e0bfff15 	stw	r2,-4(fp)
 100da00:	00000a06 	br	100da2c <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 100da04:	e0bffd17 	ldw	r2,-12(fp)
 100da08:	10800044 	addi	r2,r2,1
 100da0c:	e0bffd15 	stw	r2,-12(fp)
 100da10:	00804074 	movhi	r2,257
 100da14:	10878704 	addi	r2,r2,7708
 100da18:	10800017 	ldw	r2,0(r2)
 100da1c:	1007883a 	mov	r3,r2
 100da20:	e0bffd17 	ldw	r2,-12(fp)
 100da24:	18bfd72e 	bgeu	r3,r2,100d984 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 100da28:	e03fff15 	stw	zero,-4(fp)
 100da2c:	e0bfff17 	ldw	r2,-4(fp)
}
 100da30:	e037883a 	mov	sp,fp
 100da34:	dfc00217 	ldw	ra,8(sp)
 100da38:	df000117 	ldw	fp,4(sp)
 100da3c:	dc000017 	ldw	r16,0(sp)
 100da40:	dec00304 	addi	sp,sp,12
 100da44:	f800283a 	ret

0100da48 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 100da48:	defff404 	addi	sp,sp,-48
 100da4c:	dfc00b15 	stw	ra,44(sp)
 100da50:	df000a15 	stw	fp,40(sp)
 100da54:	df000a04 	addi	fp,sp,40
 100da58:	e13ffb15 	stw	r4,-20(fp)
 100da5c:	e17ffc15 	stw	r5,-16(fp)
 100da60:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 100da64:	00bfffc4 	movi	r2,-1
 100da68:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 100da6c:	00bffb44 	movi	r2,-19
 100da70:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 100da74:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 100da78:	e13ffb17 	ldw	r4,-20(fp)
 100da7c:	01404074 	movhi	r5,257
 100da80:	29478504 	addi	r5,r5,7700
 100da84:	100d5900 	call	100d590 <alt_find_dev>
 100da88:	e0bffa15 	stw	r2,-24(fp)
 100da8c:	e0bffa17 	ldw	r2,-24(fp)
 100da90:	1004c03a 	cmpne	r2,r2,zero
 100da94:	1000051e 	bne	r2,zero,100daac <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 100da98:	e13ffb17 	ldw	r4,-20(fp)
 100da9c:	100e2e40 	call	100e2e4 <alt_find_file>
 100daa0:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 100daa4:	00800044 	movi	r2,1
 100daa8:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 100daac:	e0bffa17 	ldw	r2,-24(fp)
 100dab0:	1005003a 	cmpeq	r2,r2,zero
 100dab4:	1000311e 	bne	r2,zero,100db7c <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
 100dab8:	e13ffa17 	ldw	r4,-24(fp)
 100dabc:	100e4040 	call	100e404 <alt_get_fd>
 100dac0:	e0bff815 	stw	r2,-32(fp)
 100dac4:	e0bff817 	ldw	r2,-32(fp)
 100dac8:	1004403a 	cmpge	r2,r2,zero
 100dacc:	1000031e 	bne	r2,zero,100dadc <open+0x94>
    {
      status = index;
 100dad0:	e0bff817 	ldw	r2,-32(fp)
 100dad4:	e0bff715 	stw	r2,-36(fp)
 100dad8:	00002a06 	br	100db84 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
 100dadc:	e13ff817 	ldw	r4,-32(fp)
 100dae0:	01400304 	movi	r5,12
 100dae4:	1002c3c0 	call	1002c3c <__mulsi3>
 100dae8:	1007883a 	mov	r3,r2
 100daec:	00804074 	movhi	r2,257
 100daf0:	1082ca04 	addi	r2,r2,2856
 100daf4:	1885883a 	add	r2,r3,r2
 100daf8:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 100dafc:	e0fffc17 	ldw	r3,-16(fp)
 100db00:	00900034 	movhi	r2,16384
 100db04:	10bfffc4 	addi	r2,r2,-1
 100db08:	1886703a 	and	r3,r3,r2
 100db0c:	e0bff917 	ldw	r2,-28(fp)
 100db10:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 100db14:	e0bff617 	ldw	r2,-40(fp)
 100db18:	1004c03a 	cmpne	r2,r2,zero
 100db1c:	1000061e 	bne	r2,zero,100db38 <open+0xf0>
 100db20:	e13ff917 	ldw	r4,-28(fp)
 100db24:	100d9500 	call	100d950 <alt_file_locked>
 100db28:	e0bff715 	stw	r2,-36(fp)
 100db2c:	e0bff717 	ldw	r2,-36(fp)
 100db30:	1004803a 	cmplt	r2,r2,zero
 100db34:	1000131e 	bne	r2,zero,100db84 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 100db38:	e0bffa17 	ldw	r2,-24(fp)
 100db3c:	10800317 	ldw	r2,12(r2)
 100db40:	1005003a 	cmpeq	r2,r2,zero
 100db44:	1000091e 	bne	r2,zero,100db6c <open+0x124>
 100db48:	e0bffa17 	ldw	r2,-24(fp)
 100db4c:	10800317 	ldw	r2,12(r2)
 100db50:	e13ff917 	ldw	r4,-28(fp)
 100db54:	e17ffb17 	ldw	r5,-20(fp)
 100db58:	e1bffc17 	ldw	r6,-16(fp)
 100db5c:	e1fffd17 	ldw	r7,-12(fp)
 100db60:	103ee83a 	callr	r2
 100db64:	e0bfff15 	stw	r2,-4(fp)
 100db68:	00000106 	br	100db70 <open+0x128>
 100db6c:	e03fff15 	stw	zero,-4(fp)
 100db70:	e0bfff17 	ldw	r2,-4(fp)
 100db74:	e0bff715 	stw	r2,-36(fp)
 100db78:	00000206 	br	100db84 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 100db7c:	00bffb44 	movi	r2,-19
 100db80:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 100db84:	e0bff717 	ldw	r2,-36(fp)
 100db88:	1004403a 	cmpge	r2,r2,zero
 100db8c:	1000091e 	bne	r2,zero,100dbb4 <open+0x16c>
  {
    alt_release_fd (index);  
 100db90:	e13ff817 	ldw	r4,-32(fp)
 100db94:	10034e80 	call	10034e8 <alt_release_fd>
    ALT_ERRNO = -status;
 100db98:	100dbd40 	call	100dbd4 <alt_get_errno>
 100db9c:	e0fff717 	ldw	r3,-36(fp)
 100dba0:	00c7c83a 	sub	r3,zero,r3
 100dba4:	10c00015 	stw	r3,0(r2)
    return -1;
 100dba8:	00bfffc4 	movi	r2,-1
 100dbac:	e0bffe15 	stw	r2,-8(fp)
 100dbb0:	00000206 	br	100dbbc <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
 100dbb4:	e0bff817 	ldw	r2,-32(fp)
 100dbb8:	e0bffe15 	stw	r2,-8(fp)
 100dbbc:	e0bffe17 	ldw	r2,-8(fp)
}
 100dbc0:	e037883a 	mov	sp,fp
 100dbc4:	dfc00117 	ldw	ra,4(sp)
 100dbc8:	df000017 	ldw	fp,0(sp)
 100dbcc:	dec00204 	addi	sp,sp,8
 100dbd0:	f800283a 	ret

0100dbd4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100dbd4:	defffd04 	addi	sp,sp,-12
 100dbd8:	dfc00215 	stw	ra,8(sp)
 100dbdc:	df000115 	stw	fp,4(sp)
 100dbe0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100dbe4:	00804074 	movhi	r2,257
 100dbe8:	10878804 	addi	r2,r2,7712
 100dbec:	10800017 	ldw	r2,0(r2)
 100dbf0:	1005003a 	cmpeq	r2,r2,zero
 100dbf4:	1000061e 	bne	r2,zero,100dc10 <alt_get_errno+0x3c>
 100dbf8:	00804074 	movhi	r2,257
 100dbfc:	10878804 	addi	r2,r2,7712
 100dc00:	10800017 	ldw	r2,0(r2)
 100dc04:	103ee83a 	callr	r2
 100dc08:	e0bfff15 	stw	r2,-4(fp)
 100dc0c:	00000306 	br	100dc1c <alt_get_errno+0x48>
 100dc10:	00804074 	movhi	r2,257
 100dc14:	108ea104 	addi	r2,r2,14980
 100dc18:	e0bfff15 	stw	r2,-4(fp)
 100dc1c:	e0bfff17 	ldw	r2,-4(fp)
}
 100dc20:	e037883a 	mov	sp,fp
 100dc24:	dfc00117 	ldw	ra,4(sp)
 100dc28:	df000017 	ldw	fp,0(sp)
 100dc2c:	dec00204 	addi	sp,sp,8
 100dc30:	f800283a 	ret

0100dc34 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 100dc34:	defffa04 	addi	sp,sp,-24
 100dc38:	df000515 	stw	fp,20(sp)
 100dc3c:	df000504 	addi	fp,sp,20
 100dc40:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100dc44:	0005303a 	rdctl	r2,status
 100dc48:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100dc4c:	e0fffd17 	ldw	r3,-12(fp)
 100dc50:	00bfff84 	movi	r2,-2
 100dc54:	1884703a 	and	r2,r3,r2
 100dc58:	1001703a 	wrctl	status,r2
  
  return context;
 100dc5c:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 100dc60:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 100dc64:	e0bfff17 	ldw	r2,-4(fp)
 100dc68:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 100dc6c:	e0bffc17 	ldw	r2,-16(fp)
 100dc70:	10c00017 	ldw	r3,0(r2)
 100dc74:	e0bffc17 	ldw	r2,-16(fp)
 100dc78:	10800117 	ldw	r2,4(r2)
 100dc7c:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 100dc80:	e0bffc17 	ldw	r2,-16(fp)
 100dc84:	10c00117 	ldw	r3,4(r2)
 100dc88:	e0bffc17 	ldw	r2,-16(fp)
 100dc8c:	10800017 	ldw	r2,0(r2)
 100dc90:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 100dc94:	e0fffc17 	ldw	r3,-16(fp)
 100dc98:	e0bffc17 	ldw	r2,-16(fp)
 100dc9c:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 100dca0:	e0fffc17 	ldw	r3,-16(fp)
 100dca4:	e0bffc17 	ldw	r2,-16(fp)
 100dca8:	18800015 	stw	r2,0(r3)
 100dcac:	e0bffe17 	ldw	r2,-8(fp)
 100dcb0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100dcb4:	e0bffb17 	ldw	r2,-20(fp)
 100dcb8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 100dcbc:	e037883a 	mov	sp,fp
 100dcc0:	df000017 	ldw	fp,0(sp)
 100dcc4:	dec00104 	addi	sp,sp,4
 100dcc8:	f800283a 	ret

0100dccc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 100dccc:	defffb04 	addi	sp,sp,-20
 100dcd0:	dfc00415 	stw	ra,16(sp)
 100dcd4:	df000315 	stw	fp,12(sp)
 100dcd8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 100dcdc:	d0a02d17 	ldw	r2,-32588(gp)
 100dce0:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 100dce4:	d0a74117 	ldw	r2,-25340(gp)
 100dce8:	10800044 	addi	r2,r2,1
 100dcec:	d0a74115 	stw	r2,-25340(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 100dcf0:	00003106 	br	100ddb8 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 100dcf4:	e0bffe17 	ldw	r2,-8(fp)
 100dcf8:	10800017 	ldw	r2,0(r2)
 100dcfc:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 100dd00:	e0bffe17 	ldw	r2,-8(fp)
 100dd04:	10800403 	ldbu	r2,16(r2)
 100dd08:	10803fcc 	andi	r2,r2,255
 100dd0c:	1005003a 	cmpeq	r2,r2,zero
 100dd10:	1000051e 	bne	r2,zero,100dd28 <alt_tick+0x5c>
 100dd14:	d0a74117 	ldw	r2,-25340(gp)
 100dd18:	1004c03a 	cmpne	r2,r2,zero
 100dd1c:	1000021e 	bne	r2,zero,100dd28 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 100dd20:	e0bffe17 	ldw	r2,-8(fp)
 100dd24:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 100dd28:	e0bffe17 	ldw	r2,-8(fp)
 100dd2c:	10c00217 	ldw	r3,8(r2)
 100dd30:	d0a74117 	ldw	r2,-25340(gp)
 100dd34:	10c01e36 	bltu	r2,r3,100ddb0 <alt_tick+0xe4>
 100dd38:	e0bffe17 	ldw	r2,-8(fp)
 100dd3c:	10800403 	ldbu	r2,16(r2)
 100dd40:	10803fcc 	andi	r2,r2,255
 100dd44:	1004c03a 	cmpne	r2,r2,zero
 100dd48:	1000191e 	bne	r2,zero,100ddb0 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 100dd4c:	e0bffe17 	ldw	r2,-8(fp)
 100dd50:	10c00317 	ldw	r3,12(r2)
 100dd54:	e0bffe17 	ldw	r2,-8(fp)
 100dd58:	11000517 	ldw	r4,20(r2)
 100dd5c:	183ee83a 	callr	r3
 100dd60:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 100dd64:	e0bffd17 	ldw	r2,-12(fp)
 100dd68:	1004c03a 	cmpne	r2,r2,zero
 100dd6c:	1000031e 	bne	r2,zero,100dd7c <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 100dd70:	e13ffe17 	ldw	r4,-8(fp)
 100dd74:	100dc340 	call	100dc34 <alt_alarm_stop>
 100dd78:	00000d06 	br	100ddb0 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 100dd7c:	e0bffe17 	ldw	r2,-8(fp)
 100dd80:	10c00217 	ldw	r3,8(r2)
 100dd84:	e0bffd17 	ldw	r2,-12(fp)
 100dd88:	1887883a 	add	r3,r3,r2
 100dd8c:	e0bffe17 	ldw	r2,-8(fp)
 100dd90:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 100dd94:	e0bffe17 	ldw	r2,-8(fp)
 100dd98:	10c00217 	ldw	r3,8(r2)
 100dd9c:	d0a74117 	ldw	r2,-25340(gp)
 100dda0:	1880032e 	bgeu	r3,r2,100ddb0 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 100dda4:	e0fffe17 	ldw	r3,-8(fp)
 100dda8:	00800044 	movi	r2,1
 100ddac:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 100ddb0:	e0bfff17 	ldw	r2,-4(fp)
 100ddb4:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 100ddb8:	d0e02d04 	addi	r3,gp,-32588
 100ddbc:	e0bffe17 	ldw	r2,-8(fp)
 100ddc0:	10ffcc1e 	bne	r2,r3,100dcf4 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 100ddc4:	10048040 	call	1004804 <OSTimeTick>
}
 100ddc8:	e037883a 	mov	sp,fp
 100ddcc:	dfc00117 	ldw	ra,4(sp)
 100ddd0:	df000017 	ldw	fp,0(sp)
 100ddd4:	dec00204 	addi	sp,sp,8
 100ddd8:	f800283a 	ret

0100dddc <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 100dddc:	deffff04 	addi	sp,sp,-4
 100dde0:	df000015 	stw	fp,0(sp)
 100dde4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 100dde8:	000170fa 	wrctl	ienable,zero
}
 100ddec:	e037883a 	mov	sp,fp
 100ddf0:	df000017 	ldw	fp,0(sp)
 100ddf4:	dec00104 	addi	sp,sp,4
 100ddf8:	f800283a 	ret

0100ddfc <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
 100ddfc:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
 100de00:	d0e00017 	ldw	r3,-32768(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
 100de04:	d1273a17 	ldw	r4,-25368(gp)

      stw ra,  0(sp)
 100de08:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
 100de0c:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
 100de10:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
 100de14:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
 100de18:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
 100de1c:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
 100de20:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
 100de24:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
 100de28:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
 100de2c:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
 100de30:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
 100de34:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 100de38:	100e21c0 	call	100e21c <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
 100de3c:	d1273517 	ldw	r4,-25388(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
 100de40:	d1672d07 	ldb	r5,-25420(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
 100de44:	d1273a15 	stw	r4,-25368(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
 100de48:	d1672d45 	stb	r5,-25419(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
 100de4c:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
 100de50:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
 100de54:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
 100de58:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
 100de5c:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
 100de60:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
 100de64:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
 100de68:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
 100de6c:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
 100de70:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
 100de74:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
 100de78:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
 100de7c:	d0e00015 	stw	r3,-32768(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
 100de80:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
 100de84:	f800283a 	ret

0100de88 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
 100de88:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
 100de8c:	047fff84 	movi	r17,-2
      and   r18, r18, r17
 100de90:	9464703a 	and	r18,r18,r17
      wrctl status, r18
 100de94:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 100de98:	100e21c0 	call	100e21c <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
 100de9c:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
 100dea0:	d4a72b45 	stb	r18,-25427(gp)

      /*
       * start execution of the new task.
       */

      br 9b
 100dea4:	003fe506 	br	100de3c <OSCtxSw+0x40>

0100dea8 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
 100dea8:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
 100deac:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
 100deb0:	10800054 	ori	r2,r2,1
      wrctl status, r2
 100deb4:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
 100deb8:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
 100debc:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
 100dec0:	dec00204 	addi	sp,sp,8

      callr r2
 100dec4:	103ee83a 	callr	r2

      nop
 100dec8:	0001883a 	nop

0100decc <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
 100decc:	defff704 	addi	sp,sp,-36
 100ded0:	dfc00815 	stw	ra,32(sp)
 100ded4:	df000715 	stw	fp,28(sp)
 100ded8:	df000704 	addi	fp,sp,28
 100dedc:	e13ffc15 	stw	r4,-16(fp)
 100dee0:	e17ffd15 	stw	r5,-12(fp)
 100dee4:	e1bffe15 	stw	r6,-8(fp)
 100dee8:	e1ffff0d 	sth	r7,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
 100deec:	e0bffe17 	ldw	r2,-8(fp)
 100def0:	1007883a 	mov	r3,r2
 100def4:	00bfff04 	movi	r2,-4
 100def8:	1884703a 	and	r2,r3,r2
 100defc:	10bf0004 	addi	r2,r2,-1024
 100df00:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
 100df04:	e0bff917 	ldw	r2,-28(fp)
 100df08:	10000015 	stw	zero,0(r2)
 100df0c:	e0bff917 	ldw	r2,-28(fp)
 100df10:	10c0bb04 	addi	r3,r2,748
 100df14:	e0bff917 	ldw	r2,-28(fp)
 100df18:	10c00115 	stw	r3,4(r2)
 100df1c:	e0bff917 	ldw	r2,-28(fp)
 100df20:	1080bb04 	addi	r2,r2,748
 100df24:	10c01704 	addi	r3,r2,92
 100df28:	e0bff917 	ldw	r2,-28(fp)
 100df2c:	10c00215 	stw	r3,8(r2)
 100df30:	e0bff917 	ldw	r2,-28(fp)
 100df34:	1080bb04 	addi	r2,r2,748
 100df38:	10c02e04 	addi	r3,r2,184
 100df3c:	e0bff917 	ldw	r2,-28(fp)
 100df40:	10c00315 	stw	r3,12(r2)
 100df44:	e0bff917 	ldw	r2,-28(fp)
 100df48:	10000415 	stw	zero,16(r2)
 100df4c:	e0bff917 	ldw	r2,-28(fp)
 100df50:	10800504 	addi	r2,r2,20
 100df54:	1009883a 	mov	r4,r2
 100df58:	01800644 	movi	r6,25
 100df5c:	000b883a 	mov	r5,zero
 100df60:	10026780 	call	1002678 <memset>
 100df64:	e0bff917 	ldw	r2,-28(fp)
 100df68:	10000c15 	stw	zero,48(r2)
 100df6c:	e0fff917 	ldw	r3,-28(fp)
 100df70:	00804074 	movhi	r2,257
 100df74:	10807804 	addi	r2,r2,480
 100df78:	18800d15 	stw	r2,52(r3)
 100df7c:	e0bff917 	ldw	r2,-28(fp)
 100df80:	10000e15 	stw	zero,56(r2)
 100df84:	e0bff917 	ldw	r2,-28(fp)
 100df88:	10000f15 	stw	zero,60(r2)
 100df8c:	e0bff917 	ldw	r2,-28(fp)
 100df90:	10001015 	stw	zero,64(r2)
 100df94:	e0bff917 	ldw	r2,-28(fp)
 100df98:	10001115 	stw	zero,68(r2)
 100df9c:	e0bff917 	ldw	r2,-28(fp)
 100dfa0:	10001215 	stw	zero,72(r2)
 100dfa4:	e0bff917 	ldw	r2,-28(fp)
 100dfa8:	10001315 	stw	zero,76(r2)
 100dfac:	e0bff917 	ldw	r2,-28(fp)
 100dfb0:	10001415 	stw	zero,80(r2)
 100dfb4:	e0bff917 	ldw	r2,-28(fp)
 100dfb8:	10001515 	stw	zero,84(r2)
 100dfbc:	e0bff917 	ldw	r2,-28(fp)
 100dfc0:	10001615 	stw	zero,88(r2)
 100dfc4:	e0bff917 	ldw	r2,-28(fp)
 100dfc8:	10001715 	stw	zero,92(r2)
 100dfcc:	e0bff917 	ldw	r2,-28(fp)
 100dfd0:	10001805 	stb	zero,96(r2)
 100dfd4:	e0bff917 	ldw	r2,-28(fp)
 100dfd8:	10801f04 	addi	r2,r2,124
 100dfdc:	10000015 	stw	zero,0(r2)
 100dfe0:	10000115 	stw	zero,4(r2)
 100dfe4:	10000215 	stw	zero,8(r2)
 100dfe8:	10000315 	stw	zero,12(r2)
 100dfec:	10000415 	stw	zero,16(r2)
 100dff0:	10000515 	stw	zero,20(r2)
 100dff4:	10000615 	stw	zero,24(r2)
 100dff8:	10000715 	stw	zero,28(r2)
 100dffc:	10000815 	stw	zero,32(r2)
 100e000:	e0bff917 	ldw	r2,-28(fp)
 100e004:	10002815 	stw	zero,160(r2)
 100e008:	e0fff917 	ldw	r3,-28(fp)
 100e00c:	00800044 	movi	r2,1
 100e010:	18802915 	stw	r2,164(r3)
 100e014:	18002a15 	stw	zero,168(r3)
 100e018:	e0fff917 	ldw	r3,-28(fp)
 100e01c:	008cc384 	movi	r2,13070
 100e020:	18802b0d 	sth	r2,172(r3)
 100e024:	e0fff917 	ldw	r3,-28(fp)
 100e028:	00aaf344 	movi	r2,-21555
 100e02c:	18802b8d 	sth	r2,174(r3)
 100e030:	e0fff917 	ldw	r3,-28(fp)
 100e034:	00848d04 	movi	r2,4660
 100e038:	18802c0d 	sth	r2,176(r3)
 100e03c:	e0fff917 	ldw	r3,-28(fp)
 100e040:	00b99b44 	movi	r2,-6547
 100e044:	18802c8d 	sth	r2,178(r3)
 100e048:	e0fff917 	ldw	r3,-28(fp)
 100e04c:	00b7bb04 	movi	r2,-8468
 100e050:	18802d0d 	sth	r2,180(r3)
 100e054:	e0fff917 	ldw	r3,-28(fp)
 100e058:	00800144 	movi	r2,5
 100e05c:	18802d8d 	sth	r2,182(r3)
 100e060:	e0fff917 	ldw	r3,-28(fp)
 100e064:	008002c4 	movi	r2,11
 100e068:	18802e0d 	sth	r2,184(r3)
 100e06c:	e0bff917 	ldw	r2,-28(fp)
 100e070:	10002f15 	stw	zero,188(r2)
 100e074:	e0bff917 	ldw	r2,-28(fp)
 100e078:	10003015 	stw	zero,192(r2)
 100e07c:	e0bff917 	ldw	r2,-28(fp)
 100e080:	10003115 	stw	zero,196(r2)
 100e084:	e0bff917 	ldw	r2,-28(fp)
 100e088:	10003215 	stw	zero,200(r2)
 100e08c:	e0bff917 	ldw	r2,-28(fp)
 100e090:	10003315 	stw	zero,204(r2)
 100e094:	e0bff917 	ldw	r2,-28(fp)
 100e098:	10003415 	stw	zero,208(r2)
 100e09c:	e0bff917 	ldw	r2,-28(fp)
 100e0a0:	10003e15 	stw	zero,248(r2)
 100e0a4:	e0bff917 	ldw	r2,-28(fp)
 100e0a8:	10003f15 	stw	zero,252(r2)
 100e0ac:	e0bff917 	ldw	r2,-28(fp)
 100e0b0:	10004015 	stw	zero,256(r2)
 100e0b4:	e0bff917 	ldw	r2,-28(fp)
 100e0b8:	10004115 	stw	zero,260(r2)
 100e0bc:	e0bff917 	ldw	r2,-28(fp)
 100e0c0:	10004215 	stw	zero,264(r2)
 100e0c4:	e0bff917 	ldw	r2,-28(fp)
 100e0c8:	10004315 	stw	zero,268(r2)
 100e0cc:	e0bff917 	ldw	r2,-28(fp)
 100e0d0:	10004415 	stw	zero,272(r2)
 100e0d4:	e0bff917 	ldw	r2,-28(fp)
 100e0d8:	10004515 	stw	zero,276(r2)
 100e0dc:	e0bff917 	ldw	r2,-28(fp)
 100e0e0:	10004615 	stw	zero,280(r2)
 100e0e4:	e0bff917 	ldw	r2,-28(fp)
 100e0e8:	10004715 	stw	zero,284(r2)
 100e0ec:	e0bff917 	ldw	r2,-28(fp)
 100e0f0:	10003505 	stb	zero,212(r2)
 100e0f4:	e0bff917 	ldw	r2,-28(fp)
 100e0f8:	10003705 	stb	zero,220(r2)
 100e0fc:	e0bff917 	ldw	r2,-28(fp)
 100e100:	10003d15 	stw	zero,244(r2)
 100e104:	e0bff917 	ldw	r2,-28(fp)
 100e108:	10005215 	stw	zero,328(r2)
 100e10c:	e0bff917 	ldw	r2,-28(fp)
 100e110:	10005315 	stw	zero,332(r2)
 100e114:	e0bff917 	ldw	r2,-28(fp)
 100e118:	10005415 	stw	zero,336(r2)
 100e11c:	e0bff917 	ldw	r2,-28(fp)
 100e120:	10005515 	stw	zero,340(r2)
 100e124:	e0bff917 	ldw	r2,-28(fp)
 100e128:	1000b515 	stw	zero,724(r2)
 100e12c:	e0bff917 	ldw	r2,-28(fp)
 100e130:	10007515 	stw	zero,468(r2)
 100e134:	e0bff917 	ldw	r2,-28(fp)
 100e138:	1000b715 	stw	zero,732(r2)
 100e13c:	e0bff917 	ldw	r2,-28(fp)
 100e140:	1000b815 	stw	zero,736(r2)
 100e144:	e0bff917 	ldw	r2,-28(fp)
 100e148:	1000b915 	stw	zero,740(r2)
 100e14c:	e0bff917 	ldw	r2,-28(fp)
 100e150:	1000ba15 	stw	zero,744(r2)
 100e154:	e0bff917 	ldw	r2,-28(fp)
 100e158:	1080bb04 	addi	r2,r2,748
 100e15c:	1009883a 	mov	r4,r2
 100e160:	01804504 	movi	r6,276
 100e164:	000b883a 	mov	r5,zero
 100e168:	10026780 	call	1002678 <memset>
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
 100e16c:	e0bff917 	ldw	r2,-28(fp)
 100e170:	e0bffb15 	stw	r2,-20(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
 100e174:	e0bffb17 	ldw	r2,-20(fp)
 100e178:	10bff304 	addi	r2,r2,-52
 100e17c:	e0bffa15 	stw	r2,-24(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
 100e180:	e0bffa17 	ldw	r2,-24(fp)
 100e184:	10c00c04 	addi	r3,r2,48
 100e188:	e0bffc17 	ldw	r2,-16(fp)
 100e18c:	18800015 	stw	r2,0(r3)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
 100e190:	e0bffa17 	ldw	r2,-24(fp)
 100e194:	10c00b04 	addi	r3,r2,44
 100e198:	e0bffd17 	ldw	r2,-12(fp)
 100e19c:	18800015 	stw	r2,0(r3)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
 100e1a0:	e0bffa17 	ldw	r2,-24(fp)
 100e1a4:	10c00a04 	addi	r3,r2,40
 100e1a8:	e0bff917 	ldw	r2,-28(fp)
 100e1ac:	18800015 	stw	r2,0(r3)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
 100e1b0:	00804074 	movhi	r2,257
 100e1b4:	10b7aa04 	addi	r2,r2,-8536
 100e1b8:	10c00104 	addi	r3,r2,4
 100e1bc:	e0bffa17 	ldw	r2,-24(fp)
 100e1c0:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
 100e1c4:	e0bffa17 	ldw	r2,-24(fp)
}
 100e1c8:	e037883a 	mov	sp,fp
 100e1cc:	dfc00117 	ldw	ra,4(sp)
 100e1d0:	df000017 	ldw	fp,0(sp)
 100e1d4:	dec00204 	addi	sp,sp,8
 100e1d8:	f800283a 	ret

0100e1dc <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
 100e1dc:	defffe04 	addi	sp,sp,-8
 100e1e0:	df000115 	stw	fp,4(sp)
 100e1e4:	df000104 	addi	fp,sp,4
 100e1e8:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
 100e1ec:	e037883a 	mov	sp,fp
 100e1f0:	df000017 	ldw	fp,0(sp)
 100e1f4:	dec00104 	addi	sp,sp,4
 100e1f8:	f800283a 	ret

0100e1fc <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
 100e1fc:	defffe04 	addi	sp,sp,-8
 100e200:	df000115 	stw	fp,4(sp)
 100e204:	df000104 	addi	fp,sp,4
 100e208:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
 100e20c:	e037883a 	mov	sp,fp
 100e210:	df000017 	ldw	fp,0(sp)
 100e214:	dec00104 	addi	sp,sp,4
 100e218:	f800283a 	ret

0100e21c <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
 100e21c:	deffff04 	addi	sp,sp,-4
 100e220:	df000015 	stw	fp,0(sp)
 100e224:	d839883a 	mov	fp,sp
}
 100e228:	e037883a 	mov	sp,fp
 100e22c:	df000017 	ldw	fp,0(sp)
 100e230:	dec00104 	addi	sp,sp,4
 100e234:	f800283a 	ret

0100e238 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
 100e238:	deffff04 	addi	sp,sp,-4
 100e23c:	df000015 	stw	fp,0(sp)
 100e240:	d839883a 	mov	fp,sp
}
 100e244:	e037883a 	mov	sp,fp
 100e248:	df000017 	ldw	fp,0(sp)
 100e24c:	dec00104 	addi	sp,sp,4
 100e250:	f800283a 	ret

0100e254 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
 100e254:	deffff04 	addi	sp,sp,-4
 100e258:	df000015 	stw	fp,0(sp)
 100e25c:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
 100e260:	e037883a 	mov	sp,fp
 100e264:	df000017 	ldw	fp,0(sp)
 100e268:	dec00104 	addi	sp,sp,4
 100e26c:	f800283a 	ret

0100e270 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
 100e270:	deffff04 	addi	sp,sp,-4
 100e274:	df000015 	stw	fp,0(sp)
 100e278:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
 100e27c:	e037883a 	mov	sp,fp
 100e280:	df000017 	ldw	fp,0(sp)
 100e284:	dec00104 	addi	sp,sp,4
 100e288:	f800283a 	ret

0100e28c <OSInitHookEnd>:

void OSInitHookEnd(void)
{
 100e28c:	deffff04 	addi	sp,sp,-4
 100e290:	df000015 	stw	fp,0(sp)
 100e294:	d839883a 	mov	fp,sp
}
 100e298:	e037883a 	mov	sp,fp
 100e29c:	df000017 	ldw	fp,0(sp)
 100e2a0:	dec00104 	addi	sp,sp,4
 100e2a4:	f800283a 	ret

0100e2a8 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
 100e2a8:	deffff04 	addi	sp,sp,-4
 100e2ac:	df000015 	stw	fp,0(sp)
 100e2b0:	d839883a 	mov	fp,sp
}
 100e2b4:	e037883a 	mov	sp,fp
 100e2b8:	df000017 	ldw	fp,0(sp)
 100e2bc:	dec00104 	addi	sp,sp,4
 100e2c0:	f800283a 	ret

0100e2c4 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
 100e2c4:	defffe04 	addi	sp,sp,-8
 100e2c8:	df000115 	stw	fp,4(sp)
 100e2cc:	df000104 	addi	fp,sp,4
 100e2d0:	e13fff15 	stw	r4,-4(fp)
}
 100e2d4:	e037883a 	mov	sp,fp
 100e2d8:	df000017 	ldw	fp,0(sp)
 100e2dc:	dec00104 	addi	sp,sp,4
 100e2e0:	f800283a 	ret

0100e2e4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 100e2e4:	defffa04 	addi	sp,sp,-24
 100e2e8:	dfc00515 	stw	ra,20(sp)
 100e2ec:	df000415 	stw	fp,16(sp)
 100e2f0:	df000404 	addi	fp,sp,16
 100e2f4:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 100e2f8:	00804074 	movhi	r2,257
 100e2fc:	10878304 	addi	r2,r2,7692
 100e300:	10800017 	ldw	r2,0(r2)
 100e304:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 100e308:	00003306 	br	100e3d8 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 100e30c:	e0bffd17 	ldw	r2,-12(fp)
 100e310:	11000217 	ldw	r4,8(r2)
 100e314:	10003ac0 	call	10003ac <strlen>
 100e318:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 100e31c:	e0bffd17 	ldw	r2,-12(fp)
 100e320:	10c00217 	ldw	r3,8(r2)
 100e324:	e0bffc17 	ldw	r2,-16(fp)
 100e328:	1885883a 	add	r2,r3,r2
 100e32c:	10bfffc4 	addi	r2,r2,-1
 100e330:	10800003 	ldbu	r2,0(r2)
 100e334:	10803fcc 	andi	r2,r2,255
 100e338:	1080201c 	xori	r2,r2,128
 100e33c:	10bfe004 	addi	r2,r2,-128
 100e340:	10800bd8 	cmpnei	r2,r2,47
 100e344:	1000031e 	bne	r2,zero,100e354 <alt_find_file+0x70>
    {
      len -= 1;
 100e348:	e0bffc17 	ldw	r2,-16(fp)
 100e34c:	10bfffc4 	addi	r2,r2,-1
 100e350:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 100e354:	e0bffc17 	ldw	r2,-16(fp)
 100e358:	1007883a 	mov	r3,r2
 100e35c:	e0bffe17 	ldw	r2,-8(fp)
 100e360:	1885883a 	add	r2,r3,r2
 100e364:	10800003 	ldbu	r2,0(r2)
 100e368:	10803fcc 	andi	r2,r2,255
 100e36c:	1080201c 	xori	r2,r2,128
 100e370:	10bfe004 	addi	r2,r2,-128
 100e374:	10800be0 	cmpeqi	r2,r2,47
 100e378:	10000a1e 	bne	r2,zero,100e3a4 <alt_find_file+0xc0>
 100e37c:	e0bffc17 	ldw	r2,-16(fp)
 100e380:	1007883a 	mov	r3,r2
 100e384:	e0bffe17 	ldw	r2,-8(fp)
 100e388:	1885883a 	add	r2,r3,r2
 100e38c:	10800003 	ldbu	r2,0(r2)
 100e390:	10803fcc 	andi	r2,r2,255
 100e394:	1080201c 	xori	r2,r2,128
 100e398:	10bfe004 	addi	r2,r2,-128
 100e39c:	1004c03a 	cmpne	r2,r2,zero
 100e3a0:	10000a1e 	bne	r2,zero,100e3cc <alt_find_file+0xe8>
 100e3a4:	e0bffd17 	ldw	r2,-12(fp)
 100e3a8:	11000217 	ldw	r4,8(r2)
 100e3ac:	e1bffc17 	ldw	r6,-16(fp)
 100e3b0:	e17ffe17 	ldw	r5,-8(fp)
 100e3b4:	100e5540 	call	100e554 <memcmp>
 100e3b8:	1004c03a 	cmpne	r2,r2,zero
 100e3bc:	1000031e 	bne	r2,zero,100e3cc <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 100e3c0:	e0bffd17 	ldw	r2,-12(fp)
 100e3c4:	e0bfff15 	stw	r2,-4(fp)
 100e3c8:	00000806 	br	100e3ec <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 100e3cc:	e0bffd17 	ldw	r2,-12(fp)
 100e3d0:	10800017 	ldw	r2,0(r2)
 100e3d4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 100e3d8:	00c04074 	movhi	r3,257
 100e3dc:	18c78304 	addi	r3,r3,7692
 100e3e0:	e0bffd17 	ldw	r2,-12(fp)
 100e3e4:	10ffc91e 	bne	r2,r3,100e30c <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 100e3e8:	e03fff15 	stw	zero,-4(fp)
 100e3ec:	e0bfff17 	ldw	r2,-4(fp)
}
 100e3f0:	e037883a 	mov	sp,fp
 100e3f4:	dfc00117 	ldw	ra,4(sp)
 100e3f8:	df000017 	ldw	fp,0(sp)
 100e3fc:	dec00204 	addi	sp,sp,8
 100e400:	f800283a 	ret

0100e404 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 100e404:	defff704 	addi	sp,sp,-36
 100e408:	dfc00815 	stw	ra,32(sp)
 100e40c:	df000715 	stw	fp,28(sp)
 100e410:	dc000615 	stw	r16,24(sp)
 100e414:	df000604 	addi	fp,sp,24
 100e418:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 100e41c:	00bffa04 	movi	r2,-24
 100e420:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
 100e424:	00804074 	movhi	r2,257
 100e428:	108ea204 	addi	r2,r2,14984
 100e42c:	10800017 	ldw	r2,0(r2)
 100e430:	e0bffa15 	stw	r2,-24(fp)
 100e434:	e03ffb0d 	sth	zero,-20(fp)
 100e438:	e17ffb0b 	ldhu	r5,-20(fp)
 100e43c:	e1bffe04 	addi	r6,fp,-8
 100e440:	e13ffa17 	ldw	r4,-24(fp)
 100e444:	10096240 	call	1009624 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 100e448:	e03ffd15 	stw	zero,-12(fp)
 100e44c:	00002006 	br	100e4d0 <alt_get_fd+0xcc>
  {
    if (!alt_fd_list[i].dev)
 100e450:	e13ffd17 	ldw	r4,-12(fp)
 100e454:	04004074 	movhi	r16,257
 100e458:	8402ca04 	addi	r16,r16,2856
 100e45c:	01400304 	movi	r5,12
 100e460:	1002c3c0 	call	1002c3c <__mulsi3>
 100e464:	1405883a 	add	r2,r2,r16
 100e468:	10800017 	ldw	r2,0(r2)
 100e46c:	1004c03a 	cmpne	r2,r2,zero
 100e470:	1000141e 	bne	r2,zero,100e4c4 <alt_get_fd+0xc0>
    {
      alt_fd_list[i].dev = dev;
 100e474:	e13ffd17 	ldw	r4,-12(fp)
 100e478:	04004074 	movhi	r16,257
 100e47c:	8402ca04 	addi	r16,r16,2856
 100e480:	01400304 	movi	r5,12
 100e484:	1002c3c0 	call	1002c3c <__mulsi3>
 100e488:	1407883a 	add	r3,r2,r16
 100e48c:	e0bfff17 	ldw	r2,-4(fp)
 100e490:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 100e494:	00804074 	movhi	r2,257
 100e498:	10878704 	addi	r2,r2,7708
 100e49c:	10c00017 	ldw	r3,0(r2)
 100e4a0:	e0bffd17 	ldw	r2,-12(fp)
 100e4a4:	1880040e 	bge	r3,r2,100e4b8 <alt_get_fd+0xb4>
      {
        alt_max_fd = i;
 100e4a8:	00c04074 	movhi	r3,257
 100e4ac:	18c78704 	addi	r3,r3,7708
 100e4b0:	e0bffd17 	ldw	r2,-12(fp)
 100e4b4:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 100e4b8:	e0bffd17 	ldw	r2,-12(fp)
 100e4bc:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
 100e4c0:	00000606 	br	100e4dc <alt_get_fd+0xd8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 100e4c4:	e0bffd17 	ldw	r2,-12(fp)
 100e4c8:	10800044 	addi	r2,r2,1
 100e4cc:	e0bffd15 	stw	r2,-12(fp)
 100e4d0:	e0bffd17 	ldw	r2,-12(fp)
 100e4d4:	10800810 	cmplti	r2,r2,32
 100e4d8:	103fdd1e 	bne	r2,zero,100e450 <alt_get_fd+0x4c>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
 100e4dc:	00804074 	movhi	r2,257
 100e4e0:	108ea204 	addi	r2,r2,14984
 100e4e4:	11000017 	ldw	r4,0(r2)
 100e4e8:	1009a1c0 	call	1009a1c <OSSemPost>

  return rc;
 100e4ec:	e0bffc17 	ldw	r2,-16(fp)
}
 100e4f0:	e037883a 	mov	sp,fp
 100e4f4:	dfc00217 	ldw	ra,8(sp)
 100e4f8:	df000117 	ldw	fp,4(sp)
 100e4fc:	dc000017 	ldw	r16,0(sp)
 100e500:	dec00304 	addi	sp,sp,12
 100e504:	f800283a 	ret

0100e508 <atexit>:
 100e508:	200b883a 	mov	r5,r4
 100e50c:	000d883a 	mov	r6,zero
 100e510:	0009883a 	mov	r4,zero
 100e514:	000f883a 	mov	r7,zero
 100e518:	100e5c81 	jmpi	100e5c8 <__register_exitproc>

0100e51c <exit>:
 100e51c:	defffe04 	addi	sp,sp,-8
 100e520:	000b883a 	mov	r5,zero
 100e524:	dc000015 	stw	r16,0(sp)
 100e528:	dfc00115 	stw	ra,4(sp)
 100e52c:	2021883a 	mov	r16,r4
 100e530:	100e7000 	call	100e700 <__call_exitprocs>
 100e534:	00804074 	movhi	r2,257
 100e538:	10878004 	addi	r2,r2,7680
 100e53c:	11000017 	ldw	r4,0(r2)
 100e540:	20800f17 	ldw	r2,60(r4)
 100e544:	10000126 	beq	r2,zero,100e54c <exit+0x30>
 100e548:	103ee83a 	callr	r2
 100e54c:	8009883a 	mov	r4,r16
 100e550:	100ffac0 	call	100ffac <_exit>

0100e554 <memcmp>:
 100e554:	00c000c4 	movi	r3,3
 100e558:	1980032e 	bgeu	r3,r6,100e568 <memcmp+0x14>
 100e55c:	2144b03a 	or	r2,r4,r5
 100e560:	10c4703a 	and	r2,r2,r3
 100e564:	10000f26 	beq	r2,zero,100e5a4 <memcmp+0x50>
 100e568:	31ffffc4 	addi	r7,r6,-1
 100e56c:	3000061e 	bne	r6,zero,100e588 <memcmp+0x34>
 100e570:	00000a06 	br	100e59c <memcmp+0x48>
 100e574:	39ffffc4 	addi	r7,r7,-1
 100e578:	00bfffc4 	movi	r2,-1
 100e57c:	21000044 	addi	r4,r4,1
 100e580:	29400044 	addi	r5,r5,1
 100e584:	38800526 	beq	r7,r2,100e59c <memcmp+0x48>
 100e588:	20c00003 	ldbu	r3,0(r4)
 100e58c:	28800003 	ldbu	r2,0(r5)
 100e590:	18bff826 	beq	r3,r2,100e574 <memcmp+0x20>
 100e594:	1885c83a 	sub	r2,r3,r2
 100e598:	f800283a 	ret
 100e59c:	0005883a 	mov	r2,zero
 100e5a0:	f800283a 	ret
 100e5a4:	180f883a 	mov	r7,r3
 100e5a8:	20c00017 	ldw	r3,0(r4)
 100e5ac:	28800017 	ldw	r2,0(r5)
 100e5b0:	18bfed1e 	bne	r3,r2,100e568 <memcmp+0x14>
 100e5b4:	31bfff04 	addi	r6,r6,-4
 100e5b8:	21000104 	addi	r4,r4,4
 100e5bc:	29400104 	addi	r5,r5,4
 100e5c0:	39bff936 	bltu	r7,r6,100e5a8 <memcmp+0x54>
 100e5c4:	003fe806 	br	100e568 <memcmp+0x14>

0100e5c8 <__register_exitproc>:
 100e5c8:	defffa04 	addi	sp,sp,-24
 100e5cc:	00804074 	movhi	r2,257
 100e5d0:	10878004 	addi	r2,r2,7680
 100e5d4:	dc000015 	stw	r16,0(sp)
 100e5d8:	14000017 	ldw	r16,0(r2)
 100e5dc:	dd000415 	stw	r20,16(sp)
 100e5e0:	2829883a 	mov	r20,r5
 100e5e4:	81405217 	ldw	r5,328(r16)
 100e5e8:	dcc00315 	stw	r19,12(sp)
 100e5ec:	dc800215 	stw	r18,8(sp)
 100e5f0:	dc400115 	stw	r17,4(sp)
 100e5f4:	dfc00515 	stw	ra,20(sp)
 100e5f8:	2023883a 	mov	r17,r4
 100e5fc:	3027883a 	mov	r19,r6
 100e600:	3825883a 	mov	r18,r7
 100e604:	28002526 	beq	r5,zero,100e69c <__register_exitproc+0xd4>
 100e608:	29000117 	ldw	r4,4(r5)
 100e60c:	008007c4 	movi	r2,31
 100e610:	11002716 	blt	r2,r4,100e6b0 <__register_exitproc+0xe8>
 100e614:	8800101e 	bne	r17,zero,100e658 <__register_exitproc+0x90>
 100e618:	2105883a 	add	r2,r4,r4
 100e61c:	1085883a 	add	r2,r2,r2
 100e620:	20c00044 	addi	r3,r4,1
 100e624:	1145883a 	add	r2,r2,r5
 100e628:	0009883a 	mov	r4,zero
 100e62c:	15000215 	stw	r20,8(r2)
 100e630:	28c00115 	stw	r3,4(r5)
 100e634:	2005883a 	mov	r2,r4
 100e638:	dfc00517 	ldw	ra,20(sp)
 100e63c:	dd000417 	ldw	r20,16(sp)
 100e640:	dcc00317 	ldw	r19,12(sp)
 100e644:	dc800217 	ldw	r18,8(sp)
 100e648:	dc400117 	ldw	r17,4(sp)
 100e64c:	dc000017 	ldw	r16,0(sp)
 100e650:	dec00604 	addi	sp,sp,24
 100e654:	f800283a 	ret
 100e658:	29802204 	addi	r6,r5,136
 100e65c:	00800044 	movi	r2,1
 100e660:	110e983a 	sll	r7,r2,r4
 100e664:	30c04017 	ldw	r3,256(r6)
 100e668:	2105883a 	add	r2,r4,r4
 100e66c:	1085883a 	add	r2,r2,r2
 100e670:	1185883a 	add	r2,r2,r6
 100e674:	19c6b03a 	or	r3,r3,r7
 100e678:	14802015 	stw	r18,128(r2)
 100e67c:	14c00015 	stw	r19,0(r2)
 100e680:	00800084 	movi	r2,2
 100e684:	30c04015 	stw	r3,256(r6)
 100e688:	88bfe31e 	bne	r17,r2,100e618 <__register_exitproc+0x50>
 100e68c:	30804117 	ldw	r2,260(r6)
 100e690:	11c4b03a 	or	r2,r2,r7
 100e694:	30804115 	stw	r2,260(r6)
 100e698:	003fdf06 	br	100e618 <__register_exitproc+0x50>
 100e69c:	008040b4 	movhi	r2,258
 100e6a0:	10ab9404 	addi	r2,r2,-20912
 100e6a4:	100b883a 	mov	r5,r2
 100e6a8:	80805215 	stw	r2,328(r16)
 100e6ac:	003fd606 	br	100e608 <__register_exitproc+0x40>
 100e6b0:	00800034 	movhi	r2,0
 100e6b4:	10800004 	addi	r2,r2,0
 100e6b8:	1000021e 	bne	r2,zero,100e6c4 <__register_exitproc+0xfc>
 100e6bc:	013fffc4 	movi	r4,-1
 100e6c0:	003fdc06 	br	100e634 <__register_exitproc+0x6c>
 100e6c4:	01006404 	movi	r4,400
 100e6c8:	103ee83a 	callr	r2
 100e6cc:	1007883a 	mov	r3,r2
 100e6d0:	103ffa26 	beq	r2,zero,100e6bc <__register_exitproc+0xf4>
 100e6d4:	80805217 	ldw	r2,328(r16)
 100e6d8:	180b883a 	mov	r5,r3
 100e6dc:	18000115 	stw	zero,4(r3)
 100e6e0:	18800015 	stw	r2,0(r3)
 100e6e4:	80c05215 	stw	r3,328(r16)
 100e6e8:	18006215 	stw	zero,392(r3)
 100e6ec:	18006315 	stw	zero,396(r3)
 100e6f0:	0009883a 	mov	r4,zero
 100e6f4:	883fc826 	beq	r17,zero,100e618 <__register_exitproc+0x50>
 100e6f8:	003fd706 	br	100e658 <__register_exitproc+0x90>

0100e6fc <register_fini>:
 100e6fc:	f800283a 	ret

0100e700 <__call_exitprocs>:
 100e700:	00804074 	movhi	r2,257
 100e704:	10878004 	addi	r2,r2,7680
 100e708:	10800017 	ldw	r2,0(r2)
 100e70c:	defff304 	addi	sp,sp,-52
 100e710:	df000b15 	stw	fp,44(sp)
 100e714:	d8800115 	stw	r2,4(sp)
 100e718:	00800034 	movhi	r2,0
 100e71c:	10800004 	addi	r2,r2,0
 100e720:	1005003a 	cmpeq	r2,r2,zero
 100e724:	d8800215 	stw	r2,8(sp)
 100e728:	d8800117 	ldw	r2,4(sp)
 100e72c:	dd400815 	stw	r21,32(sp)
 100e730:	dd000715 	stw	r20,28(sp)
 100e734:	10805204 	addi	r2,r2,328
 100e738:	dfc00c15 	stw	ra,48(sp)
 100e73c:	ddc00a15 	stw	r23,40(sp)
 100e740:	dd800915 	stw	r22,36(sp)
 100e744:	dcc00615 	stw	r19,24(sp)
 100e748:	dc800515 	stw	r18,20(sp)
 100e74c:	dc400415 	stw	r17,16(sp)
 100e750:	dc000315 	stw	r16,12(sp)
 100e754:	282b883a 	mov	r21,r5
 100e758:	2039883a 	mov	fp,r4
 100e75c:	d8800015 	stw	r2,0(sp)
 100e760:	2829003a 	cmpeq	r20,r5,zero
 100e764:	d8800117 	ldw	r2,4(sp)
 100e768:	14405217 	ldw	r17,328(r2)
 100e76c:	88001026 	beq	r17,zero,100e7b0 <__call_exitprocs+0xb0>
 100e770:	ddc00017 	ldw	r23,0(sp)
 100e774:	88800117 	ldw	r2,4(r17)
 100e778:	8c802204 	addi	r18,r17,136
 100e77c:	143fffc4 	addi	r16,r2,-1
 100e780:	80000916 	blt	r16,zero,100e7a8 <__call_exitprocs+0xa8>
 100e784:	05bfffc4 	movi	r22,-1
 100e788:	a000151e 	bne	r20,zero,100e7e0 <__call_exitprocs+0xe0>
 100e78c:	8409883a 	add	r4,r16,r16
 100e790:	2105883a 	add	r2,r4,r4
 100e794:	1485883a 	add	r2,r2,r18
 100e798:	10c02017 	ldw	r3,128(r2)
 100e79c:	a8c01126 	beq	r21,r3,100e7e4 <__call_exitprocs+0xe4>
 100e7a0:	843fffc4 	addi	r16,r16,-1
 100e7a4:	85bff81e 	bne	r16,r22,100e788 <__call_exitprocs+0x88>
 100e7a8:	d8800217 	ldw	r2,8(sp)
 100e7ac:	10003126 	beq	r2,zero,100e874 <__call_exitprocs+0x174>
 100e7b0:	dfc00c17 	ldw	ra,48(sp)
 100e7b4:	df000b17 	ldw	fp,44(sp)
 100e7b8:	ddc00a17 	ldw	r23,40(sp)
 100e7bc:	dd800917 	ldw	r22,36(sp)
 100e7c0:	dd400817 	ldw	r21,32(sp)
 100e7c4:	dd000717 	ldw	r20,28(sp)
 100e7c8:	dcc00617 	ldw	r19,24(sp)
 100e7cc:	dc800517 	ldw	r18,20(sp)
 100e7d0:	dc400417 	ldw	r17,16(sp)
 100e7d4:	dc000317 	ldw	r16,12(sp)
 100e7d8:	dec00d04 	addi	sp,sp,52
 100e7dc:	f800283a 	ret
 100e7e0:	8409883a 	add	r4,r16,r16
 100e7e4:	88c00117 	ldw	r3,4(r17)
 100e7e8:	2105883a 	add	r2,r4,r4
 100e7ec:	1445883a 	add	r2,r2,r17
 100e7f0:	18ffffc4 	addi	r3,r3,-1
 100e7f4:	11800217 	ldw	r6,8(r2)
 100e7f8:	1c001526 	beq	r3,r16,100e850 <__call_exitprocs+0x150>
 100e7fc:	10000215 	stw	zero,8(r2)
 100e800:	303fe726 	beq	r6,zero,100e7a0 <__call_exitprocs+0xa0>
 100e804:	00c00044 	movi	r3,1
 100e808:	1c06983a 	sll	r3,r3,r16
 100e80c:	90804017 	ldw	r2,256(r18)
 100e810:	8cc00117 	ldw	r19,4(r17)
 100e814:	1884703a 	and	r2,r3,r2
 100e818:	10001426 	beq	r2,zero,100e86c <__call_exitprocs+0x16c>
 100e81c:	90804117 	ldw	r2,260(r18)
 100e820:	1884703a 	and	r2,r3,r2
 100e824:	10000c1e 	bne	r2,zero,100e858 <__call_exitprocs+0x158>
 100e828:	2105883a 	add	r2,r4,r4
 100e82c:	1485883a 	add	r2,r2,r18
 100e830:	11400017 	ldw	r5,0(r2)
 100e834:	e009883a 	mov	r4,fp
 100e838:	303ee83a 	callr	r6
 100e83c:	88800117 	ldw	r2,4(r17)
 100e840:	98bfc81e 	bne	r19,r2,100e764 <__call_exitprocs+0x64>
 100e844:	b8800017 	ldw	r2,0(r23)
 100e848:	147fd526 	beq	r2,r17,100e7a0 <__call_exitprocs+0xa0>
 100e84c:	003fc506 	br	100e764 <__call_exitprocs+0x64>
 100e850:	8c000115 	stw	r16,4(r17)
 100e854:	003fea06 	br	100e800 <__call_exitprocs+0x100>
 100e858:	2105883a 	add	r2,r4,r4
 100e85c:	1485883a 	add	r2,r2,r18
 100e860:	11000017 	ldw	r4,0(r2)
 100e864:	303ee83a 	callr	r6
 100e868:	003ff406 	br	100e83c <__call_exitprocs+0x13c>
 100e86c:	303ee83a 	callr	r6
 100e870:	003ff206 	br	100e83c <__call_exitprocs+0x13c>
 100e874:	88800117 	ldw	r2,4(r17)
 100e878:	1000081e 	bne	r2,zero,100e89c <__call_exitprocs+0x19c>
 100e87c:	89000017 	ldw	r4,0(r17)
 100e880:	20000726 	beq	r4,zero,100e8a0 <__call_exitprocs+0x1a0>
 100e884:	b9000015 	stw	r4,0(r23)
 100e888:	8809883a 	mov	r4,r17
 100e88c:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 100e890:	bc400017 	ldw	r17,0(r23)
 100e894:	883fb71e 	bne	r17,zero,100e774 <__call_exitprocs+0x74>
 100e898:	003fc506 	br	100e7b0 <__call_exitprocs+0xb0>
 100e89c:	89000017 	ldw	r4,0(r17)
 100e8a0:	882f883a 	mov	r23,r17
 100e8a4:	2023883a 	mov	r17,r4
 100e8a8:	883fb21e 	bne	r17,zero,100e774 <__call_exitprocs+0x74>
 100e8ac:	003fc006 	br	100e7b0 <__call_exitprocs+0xb0>

0100e8b0 <__fixunsdfsi>:
 100e8b0:	defffb04 	addi	sp,sp,-20
 100e8b4:	dc400115 	stw	r17,4(sp)
 100e8b8:	dc000015 	stw	r16,0(sp)
 100e8bc:	04507834 	movhi	r17,16864
 100e8c0:	0021883a 	mov	r16,zero
 100e8c4:	800d883a 	mov	r6,r16
 100e8c8:	880f883a 	mov	r7,r17
 100e8cc:	dcc00315 	stw	r19,12(sp)
 100e8d0:	dc800215 	stw	r18,8(sp)
 100e8d4:	2827883a 	mov	r19,r5
 100e8d8:	2025883a 	mov	r18,r4
 100e8dc:	dfc00415 	stw	ra,16(sp)
 100e8e0:	100f4740 	call	100f474 <__gedf2>
 100e8e4:	000d883a 	mov	r6,zero
 100e8e8:	880f883a 	mov	r7,r17
 100e8ec:	980b883a 	mov	r5,r19
 100e8f0:	9009883a 	mov	r4,r18
 100e8f4:	10000d16 	blt	r2,zero,100e92c <__fixunsdfsi+0x7c>
 100e8f8:	100ed640 	call	100ed64 <__subdf3>
 100e8fc:	180b883a 	mov	r5,r3
 100e900:	1009883a 	mov	r4,r2
 100e904:	100f4fc0 	call	100f4fc <__fixdfsi>
 100e908:	00e00034 	movhi	r3,32768
 100e90c:	10c5883a 	add	r2,r2,r3
 100e910:	dfc00417 	ldw	ra,16(sp)
 100e914:	dcc00317 	ldw	r19,12(sp)
 100e918:	dc800217 	ldw	r18,8(sp)
 100e91c:	dc400117 	ldw	r17,4(sp)
 100e920:	dc000017 	ldw	r16,0(sp)
 100e924:	dec00504 	addi	sp,sp,20
 100e928:	f800283a 	ret
 100e92c:	980b883a 	mov	r5,r19
 100e930:	9009883a 	mov	r4,r18
 100e934:	100f4fc0 	call	100f4fc <__fixdfsi>
 100e938:	dfc00417 	ldw	ra,16(sp)
 100e93c:	dcc00317 	ldw	r19,12(sp)
 100e940:	dc800217 	ldw	r18,8(sp)
 100e944:	dc400117 	ldw	r17,4(sp)
 100e948:	dc000017 	ldw	r16,0(sp)
 100e94c:	dec00504 	addi	sp,sp,20
 100e950:	f800283a 	ret

0100e954 <_fpadd_parts>:
 100e954:	defff804 	addi	sp,sp,-32
 100e958:	dcc00315 	stw	r19,12(sp)
 100e95c:	2027883a 	mov	r19,r4
 100e960:	21000017 	ldw	r4,0(r4)
 100e964:	00c00044 	movi	r3,1
 100e968:	dd400515 	stw	r21,20(sp)
 100e96c:	dd000415 	stw	r20,16(sp)
 100e970:	ddc00715 	stw	r23,28(sp)
 100e974:	dd800615 	stw	r22,24(sp)
 100e978:	dc800215 	stw	r18,8(sp)
 100e97c:	dc400115 	stw	r17,4(sp)
 100e980:	dc000015 	stw	r16,0(sp)
 100e984:	282b883a 	mov	r21,r5
 100e988:	3029883a 	mov	r20,r6
 100e98c:	1900632e 	bgeu	r3,r4,100eb1c <_fpadd_parts+0x1c8>
 100e990:	28800017 	ldw	r2,0(r5)
 100e994:	1880812e 	bgeu	r3,r2,100eb9c <_fpadd_parts+0x248>
 100e998:	00c00104 	movi	r3,4
 100e99c:	20c0dc26 	beq	r4,r3,100ed10 <_fpadd_parts+0x3bc>
 100e9a0:	10c07e26 	beq	r2,r3,100eb9c <_fpadd_parts+0x248>
 100e9a4:	00c00084 	movi	r3,2
 100e9a8:	10c06726 	beq	r2,r3,100eb48 <_fpadd_parts+0x1f4>
 100e9ac:	20c07b26 	beq	r4,r3,100eb9c <_fpadd_parts+0x248>
 100e9b0:	9dc00217 	ldw	r23,8(r19)
 100e9b4:	28c00217 	ldw	r3,8(r5)
 100e9b8:	9c400317 	ldw	r17,12(r19)
 100e9bc:	2bc00317 	ldw	r15,12(r5)
 100e9c0:	b8cdc83a 	sub	r6,r23,r3
 100e9c4:	9c800417 	ldw	r18,16(r19)
 100e9c8:	2c000417 	ldw	r16,16(r5)
 100e9cc:	3009883a 	mov	r4,r6
 100e9d0:	30009716 	blt	r6,zero,100ec30 <_fpadd_parts+0x2dc>
 100e9d4:	00800fc4 	movi	r2,63
 100e9d8:	11806b16 	blt	r2,r6,100eb88 <_fpadd_parts+0x234>
 100e9dc:	0100a40e 	bge	zero,r4,100ec70 <_fpadd_parts+0x31c>
 100e9e0:	35bff804 	addi	r22,r6,-32
 100e9e4:	b000bc16 	blt	r22,zero,100ecd8 <_fpadd_parts+0x384>
 100e9e8:	8596d83a 	srl	r11,r16,r22
 100e9ec:	0019883a 	mov	r12,zero
 100e9f0:	0013883a 	mov	r9,zero
 100e9f4:	01000044 	movi	r4,1
 100e9f8:	0015883a 	mov	r10,zero
 100e9fc:	b000be16 	blt	r22,zero,100ecf8 <_fpadd_parts+0x3a4>
 100ea00:	2590983a 	sll	r8,r4,r22
 100ea04:	000f883a 	mov	r7,zero
 100ea08:	00bfffc4 	movi	r2,-1
 100ea0c:	3889883a 	add	r4,r7,r2
 100ea10:	408b883a 	add	r5,r8,r2
 100ea14:	21cd803a 	cmpltu	r6,r4,r7
 100ea18:	314b883a 	add	r5,r6,r5
 100ea1c:	7904703a 	and	r2,r15,r4
 100ea20:	8146703a 	and	r3,r16,r5
 100ea24:	10c4b03a 	or	r2,r2,r3
 100ea28:	10000226 	beq	r2,zero,100ea34 <_fpadd_parts+0xe0>
 100ea2c:	02400044 	movi	r9,1
 100ea30:	0015883a 	mov	r10,zero
 100ea34:	5a5eb03a 	or	r15,r11,r9
 100ea38:	62a0b03a 	or	r16,r12,r10
 100ea3c:	99400117 	ldw	r5,4(r19)
 100ea40:	a8800117 	ldw	r2,4(r21)
 100ea44:	28806e26 	beq	r5,r2,100ec00 <_fpadd_parts+0x2ac>
 100ea48:	28006626 	beq	r5,zero,100ebe4 <_fpadd_parts+0x290>
 100ea4c:	7c45c83a 	sub	r2,r15,r17
 100ea50:	7889803a 	cmpltu	r4,r15,r2
 100ea54:	8487c83a 	sub	r3,r16,r18
 100ea58:	1909c83a 	sub	r4,r3,r4
 100ea5c:	100d883a 	mov	r6,r2
 100ea60:	200f883a 	mov	r7,r4
 100ea64:	38007716 	blt	r7,zero,100ec44 <_fpadd_parts+0x2f0>
 100ea68:	a5c00215 	stw	r23,8(r20)
 100ea6c:	a1c00415 	stw	r7,16(r20)
 100ea70:	a0000115 	stw	zero,4(r20)
 100ea74:	a1800315 	stw	r6,12(r20)
 100ea78:	a2000317 	ldw	r8,12(r20)
 100ea7c:	a2400417 	ldw	r9,16(r20)
 100ea80:	00bfffc4 	movi	r2,-1
 100ea84:	408b883a 	add	r5,r8,r2
 100ea88:	2a09803a 	cmpltu	r4,r5,r8
 100ea8c:	488d883a 	add	r6,r9,r2
 100ea90:	01c40034 	movhi	r7,4096
 100ea94:	39ffffc4 	addi	r7,r7,-1
 100ea98:	218d883a 	add	r6,r4,r6
 100ea9c:	39801736 	bltu	r7,r6,100eafc <_fpadd_parts+0x1a8>
 100eaa0:	31c06526 	beq	r6,r7,100ec38 <_fpadd_parts+0x2e4>
 100eaa4:	a3000217 	ldw	r12,8(r20)
 100eaa8:	4209883a 	add	r4,r8,r8
 100eaac:	00bfffc4 	movi	r2,-1
 100eab0:	220f803a 	cmpltu	r7,r4,r8
 100eab4:	4a4b883a 	add	r5,r9,r9
 100eab8:	394f883a 	add	r7,r7,r5
 100eabc:	2095883a 	add	r10,r4,r2
 100eac0:	3897883a 	add	r11,r7,r2
 100eac4:	510d803a 	cmpltu	r6,r10,r4
 100eac8:	6099883a 	add	r12,r12,r2
 100eacc:	32d7883a 	add	r11,r6,r11
 100ead0:	00840034 	movhi	r2,4096
 100ead4:	10bfffc4 	addi	r2,r2,-1
 100ead8:	2011883a 	mov	r8,r4
 100eadc:	3813883a 	mov	r9,r7
 100eae0:	a1000315 	stw	r4,12(r20)
 100eae4:	a1c00415 	stw	r7,16(r20)
 100eae8:	a3000215 	stw	r12,8(r20)
 100eaec:	12c00336 	bltu	r2,r11,100eafc <_fpadd_parts+0x1a8>
 100eaf0:	58bfed1e 	bne	r11,r2,100eaa8 <_fpadd_parts+0x154>
 100eaf4:	00bfff84 	movi	r2,-2
 100eaf8:	12bfeb2e 	bgeu	r2,r10,100eaa8 <_fpadd_parts+0x154>
 100eafc:	a2800417 	ldw	r10,16(r20)
 100eb00:	008000c4 	movi	r2,3
 100eb04:	00c80034 	movhi	r3,8192
 100eb08:	18ffffc4 	addi	r3,r3,-1
 100eb0c:	a2400317 	ldw	r9,12(r20)
 100eb10:	a0800015 	stw	r2,0(r20)
 100eb14:	1a802336 	bltu	r3,r10,100eba4 <_fpadd_parts+0x250>
 100eb18:	a027883a 	mov	r19,r20
 100eb1c:	9805883a 	mov	r2,r19
 100eb20:	ddc00717 	ldw	r23,28(sp)
 100eb24:	dd800617 	ldw	r22,24(sp)
 100eb28:	dd400517 	ldw	r21,20(sp)
 100eb2c:	dd000417 	ldw	r20,16(sp)
 100eb30:	dcc00317 	ldw	r19,12(sp)
 100eb34:	dc800217 	ldw	r18,8(sp)
 100eb38:	dc400117 	ldw	r17,4(sp)
 100eb3c:	dc000017 	ldw	r16,0(sp)
 100eb40:	dec00804 	addi	sp,sp,32
 100eb44:	f800283a 	ret
 100eb48:	20fff41e 	bne	r4,r3,100eb1c <_fpadd_parts+0x1c8>
 100eb4c:	31000015 	stw	r4,0(r6)
 100eb50:	98800117 	ldw	r2,4(r19)
 100eb54:	30800115 	stw	r2,4(r6)
 100eb58:	98c00217 	ldw	r3,8(r19)
 100eb5c:	30c00215 	stw	r3,8(r6)
 100eb60:	98800317 	ldw	r2,12(r19)
 100eb64:	30800315 	stw	r2,12(r6)
 100eb68:	98c00417 	ldw	r3,16(r19)
 100eb6c:	30c00415 	stw	r3,16(r6)
 100eb70:	98800117 	ldw	r2,4(r19)
 100eb74:	28c00117 	ldw	r3,4(r5)
 100eb78:	3027883a 	mov	r19,r6
 100eb7c:	10c4703a 	and	r2,r2,r3
 100eb80:	30800115 	stw	r2,4(r6)
 100eb84:	003fe506 	br	100eb1c <_fpadd_parts+0x1c8>
 100eb88:	1dc02616 	blt	r3,r23,100ec24 <_fpadd_parts+0x2d0>
 100eb8c:	0023883a 	mov	r17,zero
 100eb90:	182f883a 	mov	r23,r3
 100eb94:	0025883a 	mov	r18,zero
 100eb98:	003fa806 	br	100ea3c <_fpadd_parts+0xe8>
 100eb9c:	a827883a 	mov	r19,r21
 100eba0:	003fde06 	br	100eb1c <_fpadd_parts+0x1c8>
 100eba4:	01800044 	movi	r6,1
 100eba8:	500497fa 	slli	r2,r10,31
 100ebac:	4808d07a 	srli	r4,r9,1
 100ebb0:	518ad83a 	srl	r5,r10,r6
 100ebb4:	a2000217 	ldw	r8,8(r20)
 100ebb8:	1108b03a 	or	r4,r2,r4
 100ebbc:	0007883a 	mov	r3,zero
 100ebc0:	4984703a 	and	r2,r9,r6
 100ebc4:	208cb03a 	or	r6,r4,r2
 100ebc8:	28ceb03a 	or	r7,r5,r3
 100ebcc:	42000044 	addi	r8,r8,1
 100ebd0:	a027883a 	mov	r19,r20
 100ebd4:	a1c00415 	stw	r7,16(r20)
 100ebd8:	a2000215 	stw	r8,8(r20)
 100ebdc:	a1800315 	stw	r6,12(r20)
 100ebe0:	003fce06 	br	100eb1c <_fpadd_parts+0x1c8>
 100ebe4:	8bc5c83a 	sub	r2,r17,r15
 100ebe8:	8889803a 	cmpltu	r4,r17,r2
 100ebec:	9407c83a 	sub	r3,r18,r16
 100ebf0:	1909c83a 	sub	r4,r3,r4
 100ebf4:	100d883a 	mov	r6,r2
 100ebf8:	200f883a 	mov	r7,r4
 100ebfc:	003f9906 	br	100ea64 <_fpadd_parts+0x110>
 100ec00:	7c45883a 	add	r2,r15,r17
 100ec04:	13c9803a 	cmpltu	r4,r2,r15
 100ec08:	8487883a 	add	r3,r16,r18
 100ec0c:	20c9883a 	add	r4,r4,r3
 100ec10:	a1400115 	stw	r5,4(r20)
 100ec14:	a5c00215 	stw	r23,8(r20)
 100ec18:	a0800315 	stw	r2,12(r20)
 100ec1c:	a1000415 	stw	r4,16(r20)
 100ec20:	003fb606 	br	100eafc <_fpadd_parts+0x1a8>
 100ec24:	001f883a 	mov	r15,zero
 100ec28:	0021883a 	mov	r16,zero
 100ec2c:	003f8306 	br	100ea3c <_fpadd_parts+0xe8>
 100ec30:	018dc83a 	sub	r6,zero,r6
 100ec34:	003f6706 	br	100e9d4 <_fpadd_parts+0x80>
 100ec38:	00bfff84 	movi	r2,-2
 100ec3c:	117faf36 	bltu	r2,r5,100eafc <_fpadd_parts+0x1a8>
 100ec40:	003f9806 	br	100eaa4 <_fpadd_parts+0x150>
 100ec44:	0005883a 	mov	r2,zero
 100ec48:	1189c83a 	sub	r4,r2,r6
 100ec4c:	1105803a 	cmpltu	r2,r2,r4
 100ec50:	01cbc83a 	sub	r5,zero,r7
 100ec54:	2885c83a 	sub	r2,r5,r2
 100ec58:	01800044 	movi	r6,1
 100ec5c:	a1800115 	stw	r6,4(r20)
 100ec60:	a5c00215 	stw	r23,8(r20)
 100ec64:	a1000315 	stw	r4,12(r20)
 100ec68:	a0800415 	stw	r2,16(r20)
 100ec6c:	003f8206 	br	100ea78 <_fpadd_parts+0x124>
 100ec70:	203f7226 	beq	r4,zero,100ea3c <_fpadd_parts+0xe8>
 100ec74:	35bff804 	addi	r22,r6,-32
 100ec78:	b9af883a 	add	r23,r23,r6
 100ec7c:	b0003116 	blt	r22,zero,100ed44 <_fpadd_parts+0x3f0>
 100ec80:	959ad83a 	srl	r13,r18,r22
 100ec84:	001d883a 	mov	r14,zero
 100ec88:	000f883a 	mov	r7,zero
 100ec8c:	01000044 	movi	r4,1
 100ec90:	0011883a 	mov	r8,zero
 100ec94:	b0002516 	blt	r22,zero,100ed2c <_fpadd_parts+0x3d8>
 100ec98:	2594983a 	sll	r10,r4,r22
 100ec9c:	0013883a 	mov	r9,zero
 100eca0:	00bfffc4 	movi	r2,-1
 100eca4:	4889883a 	add	r4,r9,r2
 100eca8:	508b883a 	add	r5,r10,r2
 100ecac:	224d803a 	cmpltu	r6,r4,r9
 100ecb0:	314b883a 	add	r5,r6,r5
 100ecb4:	8904703a 	and	r2,r17,r4
 100ecb8:	9146703a 	and	r3,r18,r5
 100ecbc:	10c4b03a 	or	r2,r2,r3
 100ecc0:	10000226 	beq	r2,zero,100eccc <_fpadd_parts+0x378>
 100ecc4:	01c00044 	movi	r7,1
 100ecc8:	0011883a 	mov	r8,zero
 100eccc:	69e2b03a 	or	r17,r13,r7
 100ecd0:	7224b03a 	or	r18,r14,r8
 100ecd4:	003f5906 	br	100ea3c <_fpadd_parts+0xe8>
 100ecd8:	8407883a 	add	r3,r16,r16
 100ecdc:	008007c4 	movi	r2,31
 100ece0:	1185c83a 	sub	r2,r2,r6
 100ece4:	1886983a 	sll	r3,r3,r2
 100ece8:	7996d83a 	srl	r11,r15,r6
 100ecec:	8198d83a 	srl	r12,r16,r6
 100ecf0:	1ad6b03a 	or	r11,r3,r11
 100ecf4:	003f3e06 	br	100e9f0 <_fpadd_parts+0x9c>
 100ecf8:	2006d07a 	srli	r3,r4,1
 100ecfc:	008007c4 	movi	r2,31
 100ed00:	1185c83a 	sub	r2,r2,r6
 100ed04:	1890d83a 	srl	r8,r3,r2
 100ed08:	218e983a 	sll	r7,r4,r6
 100ed0c:	003f3e06 	br	100ea08 <_fpadd_parts+0xb4>
 100ed10:	113f821e 	bne	r2,r4,100eb1c <_fpadd_parts+0x1c8>
 100ed14:	28c00117 	ldw	r3,4(r5)
 100ed18:	98800117 	ldw	r2,4(r19)
 100ed1c:	10ff7f26 	beq	r2,r3,100eb1c <_fpadd_parts+0x1c8>
 100ed20:	04c04074 	movhi	r19,257
 100ed24:	9cc07904 	addi	r19,r19,484
 100ed28:	003f7c06 	br	100eb1c <_fpadd_parts+0x1c8>
 100ed2c:	2006d07a 	srli	r3,r4,1
 100ed30:	008007c4 	movi	r2,31
 100ed34:	1185c83a 	sub	r2,r2,r6
 100ed38:	1894d83a 	srl	r10,r3,r2
 100ed3c:	2192983a 	sll	r9,r4,r6
 100ed40:	003fd706 	br	100eca0 <_fpadd_parts+0x34c>
 100ed44:	9487883a 	add	r3,r18,r18
 100ed48:	008007c4 	movi	r2,31
 100ed4c:	1185c83a 	sub	r2,r2,r6
 100ed50:	1886983a 	sll	r3,r3,r2
 100ed54:	899ad83a 	srl	r13,r17,r6
 100ed58:	919cd83a 	srl	r14,r18,r6
 100ed5c:	1b5ab03a 	or	r13,r3,r13
 100ed60:	003fc906 	br	100ec88 <_fpadd_parts+0x334>

0100ed64 <__subdf3>:
 100ed64:	deffea04 	addi	sp,sp,-88
 100ed68:	dcc01415 	stw	r19,80(sp)
 100ed6c:	dcc00404 	addi	r19,sp,16
 100ed70:	2011883a 	mov	r8,r4
 100ed74:	2813883a 	mov	r9,r5
 100ed78:	dc401315 	stw	r17,76(sp)
 100ed7c:	d809883a 	mov	r4,sp
 100ed80:	980b883a 	mov	r5,r19
 100ed84:	dc400904 	addi	r17,sp,36
 100ed88:	dfc01515 	stw	ra,84(sp)
 100ed8c:	da400115 	stw	r9,4(sp)
 100ed90:	d9c00315 	stw	r7,12(sp)
 100ed94:	da000015 	stw	r8,0(sp)
 100ed98:	d9800215 	stw	r6,8(sp)
 100ed9c:	100fd6c0 	call	100fd6c <__unpack_d>
 100eda0:	d9000204 	addi	r4,sp,8
 100eda4:	880b883a 	mov	r5,r17
 100eda8:	100fd6c0 	call	100fd6c <__unpack_d>
 100edac:	d8800a17 	ldw	r2,40(sp)
 100edb0:	880b883a 	mov	r5,r17
 100edb4:	9809883a 	mov	r4,r19
 100edb8:	d9800e04 	addi	r6,sp,56
 100edbc:	1080005c 	xori	r2,r2,1
 100edc0:	d8800a15 	stw	r2,40(sp)
 100edc4:	100e9540 	call	100e954 <_fpadd_parts>
 100edc8:	1009883a 	mov	r4,r2
 100edcc:	100fa580 	call	100fa58 <__pack_d>
 100edd0:	dfc01517 	ldw	ra,84(sp)
 100edd4:	dcc01417 	ldw	r19,80(sp)
 100edd8:	dc401317 	ldw	r17,76(sp)
 100eddc:	dec01604 	addi	sp,sp,88
 100ede0:	f800283a 	ret

0100ede4 <__adddf3>:
 100ede4:	deffea04 	addi	sp,sp,-88
 100ede8:	dcc01415 	stw	r19,80(sp)
 100edec:	dcc00404 	addi	r19,sp,16
 100edf0:	2011883a 	mov	r8,r4
 100edf4:	2813883a 	mov	r9,r5
 100edf8:	dc401315 	stw	r17,76(sp)
 100edfc:	d809883a 	mov	r4,sp
 100ee00:	980b883a 	mov	r5,r19
 100ee04:	dc400904 	addi	r17,sp,36
 100ee08:	dfc01515 	stw	ra,84(sp)
 100ee0c:	da400115 	stw	r9,4(sp)
 100ee10:	d9c00315 	stw	r7,12(sp)
 100ee14:	da000015 	stw	r8,0(sp)
 100ee18:	d9800215 	stw	r6,8(sp)
 100ee1c:	100fd6c0 	call	100fd6c <__unpack_d>
 100ee20:	d9000204 	addi	r4,sp,8
 100ee24:	880b883a 	mov	r5,r17
 100ee28:	100fd6c0 	call	100fd6c <__unpack_d>
 100ee2c:	d9800e04 	addi	r6,sp,56
 100ee30:	9809883a 	mov	r4,r19
 100ee34:	880b883a 	mov	r5,r17
 100ee38:	100e9540 	call	100e954 <_fpadd_parts>
 100ee3c:	1009883a 	mov	r4,r2
 100ee40:	100fa580 	call	100fa58 <__pack_d>
 100ee44:	dfc01517 	ldw	ra,84(sp)
 100ee48:	dcc01417 	ldw	r19,80(sp)
 100ee4c:	dc401317 	ldw	r17,76(sp)
 100ee50:	dec01604 	addi	sp,sp,88
 100ee54:	f800283a 	ret

0100ee58 <__muldf3>:
 100ee58:	deffe004 	addi	sp,sp,-128
 100ee5c:	dc401815 	stw	r17,96(sp)
 100ee60:	dc400404 	addi	r17,sp,16
 100ee64:	2011883a 	mov	r8,r4
 100ee68:	2813883a 	mov	r9,r5
 100ee6c:	dc001715 	stw	r16,92(sp)
 100ee70:	d809883a 	mov	r4,sp
 100ee74:	880b883a 	mov	r5,r17
 100ee78:	dc000904 	addi	r16,sp,36
 100ee7c:	dfc01f15 	stw	ra,124(sp)
 100ee80:	da400115 	stw	r9,4(sp)
 100ee84:	d9c00315 	stw	r7,12(sp)
 100ee88:	da000015 	stw	r8,0(sp)
 100ee8c:	d9800215 	stw	r6,8(sp)
 100ee90:	ddc01e15 	stw	r23,120(sp)
 100ee94:	dd801d15 	stw	r22,116(sp)
 100ee98:	dd401c15 	stw	r21,112(sp)
 100ee9c:	dd001b15 	stw	r20,108(sp)
 100eea0:	dcc01a15 	stw	r19,104(sp)
 100eea4:	dc801915 	stw	r18,100(sp)
 100eea8:	100fd6c0 	call	100fd6c <__unpack_d>
 100eeac:	d9000204 	addi	r4,sp,8
 100eeb0:	800b883a 	mov	r5,r16
 100eeb4:	100fd6c0 	call	100fd6c <__unpack_d>
 100eeb8:	d9000417 	ldw	r4,16(sp)
 100eebc:	00800044 	movi	r2,1
 100eec0:	1100102e 	bgeu	r2,r4,100ef04 <__muldf3+0xac>
 100eec4:	d8c00917 	ldw	r3,36(sp)
 100eec8:	10c0062e 	bgeu	r2,r3,100eee4 <__muldf3+0x8c>
 100eecc:	00800104 	movi	r2,4
 100eed0:	20800a26 	beq	r4,r2,100eefc <__muldf3+0xa4>
 100eed4:	1880cc26 	beq	r3,r2,100f208 <__muldf3+0x3b0>
 100eed8:	00800084 	movi	r2,2
 100eedc:	20800926 	beq	r4,r2,100ef04 <__muldf3+0xac>
 100eee0:	1880191e 	bne	r3,r2,100ef48 <__muldf3+0xf0>
 100eee4:	d8c00a17 	ldw	r3,40(sp)
 100eee8:	d8800517 	ldw	r2,20(sp)
 100eeec:	8009883a 	mov	r4,r16
 100eef0:	10c4c03a 	cmpne	r2,r2,r3
 100eef4:	d8800a15 	stw	r2,40(sp)
 100eef8:	00000706 	br	100ef18 <__muldf3+0xc0>
 100eefc:	00800084 	movi	r2,2
 100ef00:	1880c326 	beq	r3,r2,100f210 <__muldf3+0x3b8>
 100ef04:	d8800517 	ldw	r2,20(sp)
 100ef08:	d8c00a17 	ldw	r3,40(sp)
 100ef0c:	8809883a 	mov	r4,r17
 100ef10:	10c4c03a 	cmpne	r2,r2,r3
 100ef14:	d8800515 	stw	r2,20(sp)
 100ef18:	100fa580 	call	100fa58 <__pack_d>
 100ef1c:	dfc01f17 	ldw	ra,124(sp)
 100ef20:	ddc01e17 	ldw	r23,120(sp)
 100ef24:	dd801d17 	ldw	r22,116(sp)
 100ef28:	dd401c17 	ldw	r21,112(sp)
 100ef2c:	dd001b17 	ldw	r20,108(sp)
 100ef30:	dcc01a17 	ldw	r19,104(sp)
 100ef34:	dc801917 	ldw	r18,100(sp)
 100ef38:	dc401817 	ldw	r17,96(sp)
 100ef3c:	dc001717 	ldw	r16,92(sp)
 100ef40:	dec02004 	addi	sp,sp,128
 100ef44:	f800283a 	ret
 100ef48:	dd800717 	ldw	r22,28(sp)
 100ef4c:	dc800c17 	ldw	r18,48(sp)
 100ef50:	002b883a 	mov	r21,zero
 100ef54:	0023883a 	mov	r17,zero
 100ef58:	a80b883a 	mov	r5,r21
 100ef5c:	b00d883a 	mov	r6,r22
 100ef60:	880f883a 	mov	r7,r17
 100ef64:	ddc00817 	ldw	r23,32(sp)
 100ef68:	dcc00d17 	ldw	r19,52(sp)
 100ef6c:	9009883a 	mov	r4,r18
 100ef70:	100f8b40 	call	100f8b4 <__muldi3>
 100ef74:	001b883a 	mov	r13,zero
 100ef78:	680f883a 	mov	r7,r13
 100ef7c:	b009883a 	mov	r4,r22
 100ef80:	000b883a 	mov	r5,zero
 100ef84:	980d883a 	mov	r6,r19
 100ef88:	b82d883a 	mov	r22,r23
 100ef8c:	002f883a 	mov	r23,zero
 100ef90:	db401615 	stw	r13,88(sp)
 100ef94:	d8801315 	stw	r2,76(sp)
 100ef98:	d8c01415 	stw	r3,80(sp)
 100ef9c:	dcc01515 	stw	r19,84(sp)
 100efa0:	100f8b40 	call	100f8b4 <__muldi3>
 100efa4:	b00d883a 	mov	r6,r22
 100efa8:	000b883a 	mov	r5,zero
 100efac:	9009883a 	mov	r4,r18
 100efb0:	b80f883a 	mov	r7,r23
 100efb4:	1021883a 	mov	r16,r2
 100efb8:	1823883a 	mov	r17,r3
 100efbc:	100f8b40 	call	100f8b4 <__muldi3>
 100efc0:	8085883a 	add	r2,r16,r2
 100efc4:	140d803a 	cmpltu	r6,r2,r16
 100efc8:	88c7883a 	add	r3,r17,r3
 100efcc:	30cd883a 	add	r6,r6,r3
 100efd0:	1029883a 	mov	r20,r2
 100efd4:	302b883a 	mov	r21,r6
 100efd8:	da801317 	ldw	r10,76(sp)
 100efdc:	dac01417 	ldw	r11,80(sp)
 100efe0:	db001517 	ldw	r12,84(sp)
 100efe4:	db401617 	ldw	r13,88(sp)
 100efe8:	3440612e 	bgeu	r6,r17,100f170 <__muldf3+0x318>
 100efec:	0009883a 	mov	r4,zero
 100eff0:	5105883a 	add	r2,r10,r4
 100eff4:	128d803a 	cmpltu	r6,r2,r10
 100eff8:	5d07883a 	add	r3,r11,r20
 100effc:	30cd883a 	add	r6,r6,r3
 100f000:	0021883a 	mov	r16,zero
 100f004:	04400044 	movi	r17,1
 100f008:	1025883a 	mov	r18,r2
 100f00c:	3027883a 	mov	r19,r6
 100f010:	32c06236 	bltu	r6,r11,100f19c <__muldf3+0x344>
 100f014:	59807a26 	beq	r11,r6,100f200 <__muldf3+0x3a8>
 100f018:	680b883a 	mov	r5,r13
 100f01c:	b80f883a 	mov	r7,r23
 100f020:	6009883a 	mov	r4,r12
 100f024:	b00d883a 	mov	r6,r22
 100f028:	100f8b40 	call	100f8b4 <__muldi3>
 100f02c:	1009883a 	mov	r4,r2
 100f030:	000f883a 	mov	r7,zero
 100f034:	1545883a 	add	r2,r2,r21
 100f038:	1111803a 	cmpltu	r8,r2,r4
 100f03c:	19c7883a 	add	r3,r3,r7
 100f040:	40c7883a 	add	r3,r8,r3
 100f044:	88cb883a 	add	r5,r17,r3
 100f048:	d8c00617 	ldw	r3,24(sp)
 100f04c:	8089883a 	add	r4,r16,r2
 100f050:	d8800b17 	ldw	r2,44(sp)
 100f054:	18c00104 	addi	r3,r3,4
 100f058:	240d803a 	cmpltu	r6,r4,r16
 100f05c:	10c7883a 	add	r3,r2,r3
 100f060:	2013883a 	mov	r9,r4
 100f064:	d8800a17 	ldw	r2,40(sp)
 100f068:	d9000517 	ldw	r4,20(sp)
 100f06c:	314d883a 	add	r6,r6,r5
 100f070:	3015883a 	mov	r10,r6
 100f074:	2088c03a 	cmpne	r4,r4,r2
 100f078:	00880034 	movhi	r2,8192
 100f07c:	10bfffc4 	addi	r2,r2,-1
 100f080:	d9000f15 	stw	r4,60(sp)
 100f084:	d8c01015 	stw	r3,64(sp)
 100f088:	1180162e 	bgeu	r2,r6,100f0e4 <__muldf3+0x28c>
 100f08c:	1811883a 	mov	r8,r3
 100f090:	101f883a 	mov	r15,r2
 100f094:	980497fa 	slli	r2,r19,31
 100f098:	9016d07a 	srli	r11,r18,1
 100f09c:	500697fa 	slli	r3,r10,31
 100f0a0:	480cd07a 	srli	r6,r9,1
 100f0a4:	500ed07a 	srli	r7,r10,1
 100f0a8:	12d6b03a 	or	r11,r2,r11
 100f0ac:	00800044 	movi	r2,1
 100f0b0:	198cb03a 	or	r6,r3,r6
 100f0b4:	4888703a 	and	r4,r9,r2
 100f0b8:	9818d07a 	srli	r12,r19,1
 100f0bc:	001b883a 	mov	r13,zero
 100f0c0:	03a00034 	movhi	r14,32768
 100f0c4:	3013883a 	mov	r9,r6
 100f0c8:	3815883a 	mov	r10,r7
 100f0cc:	4091883a 	add	r8,r8,r2
 100f0d0:	20000226 	beq	r4,zero,100f0dc <__muldf3+0x284>
 100f0d4:	5b64b03a 	or	r18,r11,r13
 100f0d8:	63a6b03a 	or	r19,r12,r14
 100f0dc:	7abfed36 	bltu	r15,r10,100f094 <__muldf3+0x23c>
 100f0e0:	da001015 	stw	r8,64(sp)
 100f0e4:	00840034 	movhi	r2,4096
 100f0e8:	10bfffc4 	addi	r2,r2,-1
 100f0ec:	12801436 	bltu	r2,r10,100f140 <__muldf3+0x2e8>
 100f0f0:	da001017 	ldw	r8,64(sp)
 100f0f4:	101f883a 	mov	r15,r2
 100f0f8:	4a45883a 	add	r2,r9,r9
 100f0fc:	124d803a 	cmpltu	r6,r2,r9
 100f100:	5287883a 	add	r3,r10,r10
 100f104:	9497883a 	add	r11,r18,r18
 100f108:	5c8f803a 	cmpltu	r7,r11,r18
 100f10c:	9cd9883a 	add	r12,r19,r19
 100f110:	01000044 	movi	r4,1
 100f114:	30cd883a 	add	r6,r6,r3
 100f118:	3b0f883a 	add	r7,r7,r12
 100f11c:	423fffc4 	addi	r8,r8,-1
 100f120:	1013883a 	mov	r9,r2
 100f124:	3015883a 	mov	r10,r6
 100f128:	111ab03a 	or	r13,r2,r4
 100f12c:	98003016 	blt	r19,zero,100f1f0 <__muldf3+0x398>
 100f130:	5825883a 	mov	r18,r11
 100f134:	3827883a 	mov	r19,r7
 100f138:	7abfef2e 	bgeu	r15,r10,100f0f8 <__muldf3+0x2a0>
 100f13c:	da001015 	stw	r8,64(sp)
 100f140:	00803fc4 	movi	r2,255
 100f144:	488e703a 	and	r7,r9,r2
 100f148:	00802004 	movi	r2,128
 100f14c:	0007883a 	mov	r3,zero
 100f150:	0011883a 	mov	r8,zero
 100f154:	38801826 	beq	r7,r2,100f1b8 <__muldf3+0x360>
 100f158:	008000c4 	movi	r2,3
 100f15c:	d9000e04 	addi	r4,sp,56
 100f160:	da801215 	stw	r10,72(sp)
 100f164:	d8800e15 	stw	r2,56(sp)
 100f168:	da401115 	stw	r9,68(sp)
 100f16c:	003f6a06 	br	100ef18 <__muldf3+0xc0>
 100f170:	89802126 	beq	r17,r6,100f1f8 <__muldf3+0x3a0>
 100f174:	0009883a 	mov	r4,zero
 100f178:	5105883a 	add	r2,r10,r4
 100f17c:	128d803a 	cmpltu	r6,r2,r10
 100f180:	5d07883a 	add	r3,r11,r20
 100f184:	30cd883a 	add	r6,r6,r3
 100f188:	0021883a 	mov	r16,zero
 100f18c:	0023883a 	mov	r17,zero
 100f190:	1025883a 	mov	r18,r2
 100f194:	3027883a 	mov	r19,r6
 100f198:	32ff9e2e 	bgeu	r6,r11,100f014 <__muldf3+0x1bc>
 100f19c:	00800044 	movi	r2,1
 100f1a0:	8089883a 	add	r4,r16,r2
 100f1a4:	240d803a 	cmpltu	r6,r4,r16
 100f1a8:	344d883a 	add	r6,r6,r17
 100f1ac:	2021883a 	mov	r16,r4
 100f1b0:	3023883a 	mov	r17,r6
 100f1b4:	003f9806 	br	100f018 <__muldf3+0x1c0>
 100f1b8:	403fe71e 	bne	r8,zero,100f158 <__muldf3+0x300>
 100f1bc:	01004004 	movi	r4,256
 100f1c0:	4904703a 	and	r2,r9,r4
 100f1c4:	10c4b03a 	or	r2,r2,r3
 100f1c8:	103fe31e 	bne	r2,zero,100f158 <__muldf3+0x300>
 100f1cc:	94c4b03a 	or	r2,r18,r19
 100f1d0:	103fe126 	beq	r2,zero,100f158 <__muldf3+0x300>
 100f1d4:	49c5883a 	add	r2,r9,r7
 100f1d8:	1251803a 	cmpltu	r8,r2,r9
 100f1dc:	4291883a 	add	r8,r8,r10
 100f1e0:	013fc004 	movi	r4,-256
 100f1e4:	1112703a 	and	r9,r2,r4
 100f1e8:	4015883a 	mov	r10,r8
 100f1ec:	003fda06 	br	100f158 <__muldf3+0x300>
 100f1f0:	6813883a 	mov	r9,r13
 100f1f4:	003fce06 	br	100f130 <__muldf3+0x2d8>
 100f1f8:	143f7c36 	bltu	r2,r16,100efec <__muldf3+0x194>
 100f1fc:	003fdd06 	br	100f174 <__muldf3+0x31c>
 100f200:	12bf852e 	bgeu	r2,r10,100f018 <__muldf3+0x1c0>
 100f204:	003fe506 	br	100f19c <__muldf3+0x344>
 100f208:	00800084 	movi	r2,2
 100f20c:	20bf351e 	bne	r4,r2,100eee4 <__muldf3+0x8c>
 100f210:	01004074 	movhi	r4,257
 100f214:	21007904 	addi	r4,r4,484
 100f218:	003f3f06 	br	100ef18 <__muldf3+0xc0>

0100f21c <__divdf3>:
 100f21c:	deffed04 	addi	sp,sp,-76
 100f220:	dcc01115 	stw	r19,68(sp)
 100f224:	dcc00404 	addi	r19,sp,16
 100f228:	2011883a 	mov	r8,r4
 100f22c:	2813883a 	mov	r9,r5
 100f230:	dc000e15 	stw	r16,56(sp)
 100f234:	d809883a 	mov	r4,sp
 100f238:	980b883a 	mov	r5,r19
 100f23c:	dc000904 	addi	r16,sp,36
 100f240:	dfc01215 	stw	ra,72(sp)
 100f244:	da400115 	stw	r9,4(sp)
 100f248:	d9c00315 	stw	r7,12(sp)
 100f24c:	da000015 	stw	r8,0(sp)
 100f250:	d9800215 	stw	r6,8(sp)
 100f254:	dc801015 	stw	r18,64(sp)
 100f258:	dc400f15 	stw	r17,60(sp)
 100f25c:	100fd6c0 	call	100fd6c <__unpack_d>
 100f260:	d9000204 	addi	r4,sp,8
 100f264:	800b883a 	mov	r5,r16
 100f268:	100fd6c0 	call	100fd6c <__unpack_d>
 100f26c:	d9000417 	ldw	r4,16(sp)
 100f270:	00800044 	movi	r2,1
 100f274:	11000b2e 	bgeu	r2,r4,100f2a4 <__divdf3+0x88>
 100f278:	d9400917 	ldw	r5,36(sp)
 100f27c:	1140762e 	bgeu	r2,r5,100f458 <__divdf3+0x23c>
 100f280:	d8800517 	ldw	r2,20(sp)
 100f284:	d8c00a17 	ldw	r3,40(sp)
 100f288:	01800104 	movi	r6,4
 100f28c:	10c4f03a 	xor	r2,r2,r3
 100f290:	d8800515 	stw	r2,20(sp)
 100f294:	21800226 	beq	r4,r6,100f2a0 <__divdf3+0x84>
 100f298:	00800084 	movi	r2,2
 100f29c:	2080141e 	bne	r4,r2,100f2f0 <__divdf3+0xd4>
 100f2a0:	29000926 	beq	r5,r4,100f2c8 <__divdf3+0xac>
 100f2a4:	9809883a 	mov	r4,r19
 100f2a8:	100fa580 	call	100fa58 <__pack_d>
 100f2ac:	dfc01217 	ldw	ra,72(sp)
 100f2b0:	dcc01117 	ldw	r19,68(sp)
 100f2b4:	dc801017 	ldw	r18,64(sp)
 100f2b8:	dc400f17 	ldw	r17,60(sp)
 100f2bc:	dc000e17 	ldw	r16,56(sp)
 100f2c0:	dec01304 	addi	sp,sp,76
 100f2c4:	f800283a 	ret
 100f2c8:	01004074 	movhi	r4,257
 100f2cc:	21007904 	addi	r4,r4,484
 100f2d0:	100fa580 	call	100fa58 <__pack_d>
 100f2d4:	dfc01217 	ldw	ra,72(sp)
 100f2d8:	dcc01117 	ldw	r19,68(sp)
 100f2dc:	dc801017 	ldw	r18,64(sp)
 100f2e0:	dc400f17 	ldw	r17,60(sp)
 100f2e4:	dc000e17 	ldw	r16,56(sp)
 100f2e8:	dec01304 	addi	sp,sp,76
 100f2ec:	f800283a 	ret
 100f2f0:	29805b26 	beq	r5,r6,100f460 <__divdf3+0x244>
 100f2f4:	28802d26 	beq	r5,r2,100f3ac <__divdf3+0x190>
 100f2f8:	d8c00617 	ldw	r3,24(sp)
 100f2fc:	d8800b17 	ldw	r2,44(sp)
 100f300:	d9c00817 	ldw	r7,32(sp)
 100f304:	dc400d17 	ldw	r17,52(sp)
 100f308:	188bc83a 	sub	r5,r3,r2
 100f30c:	d9800717 	ldw	r6,28(sp)
 100f310:	dc000c17 	ldw	r16,48(sp)
 100f314:	d9400615 	stw	r5,24(sp)
 100f318:	3c403836 	bltu	r7,r17,100f3fc <__divdf3+0x1e0>
 100f31c:	89c03626 	beq	r17,r7,100f3f8 <__divdf3+0x1dc>
 100f320:	0015883a 	mov	r10,zero
 100f324:	001d883a 	mov	r14,zero
 100f328:	02c40034 	movhi	r11,4096
 100f32c:	001f883a 	mov	r15,zero
 100f330:	003f883a 	mov	ra,zero
 100f334:	04800f44 	movi	r18,61
 100f338:	00000f06 	br	100f378 <__divdf3+0x15c>
 100f33c:	601d883a 	mov	r14,r12
 100f340:	681f883a 	mov	r15,r13
 100f344:	400d883a 	mov	r6,r8
 100f348:	100f883a 	mov	r7,r2
 100f34c:	3191883a 	add	r8,r6,r6
 100f350:	5808d07a 	srli	r4,r11,1
 100f354:	4185803a 	cmpltu	r2,r8,r6
 100f358:	39d3883a 	add	r9,r7,r7
 100f35c:	28c6b03a 	or	r3,r5,r3
 100f360:	1245883a 	add	r2,r2,r9
 100f364:	1815883a 	mov	r10,r3
 100f368:	2017883a 	mov	r11,r4
 100f36c:	400d883a 	mov	r6,r8
 100f370:	100f883a 	mov	r7,r2
 100f374:	fc801726 	beq	ra,r18,100f3d4 <__divdf3+0x1b8>
 100f378:	580a97fa 	slli	r5,r11,31
 100f37c:	5006d07a 	srli	r3,r10,1
 100f380:	ffc00044 	addi	ra,ra,1
 100f384:	3c7ff136 	bltu	r7,r17,100f34c <__divdf3+0x130>
 100f388:	3411c83a 	sub	r8,r6,r16
 100f38c:	3205803a 	cmpltu	r2,r6,r8
 100f390:	3c53c83a 	sub	r9,r7,r17
 100f394:	7298b03a 	or	r12,r14,r10
 100f398:	7adab03a 	or	r13,r15,r11
 100f39c:	4885c83a 	sub	r2,r9,r2
 100f3a0:	89ffe61e 	bne	r17,r7,100f33c <__divdf3+0x120>
 100f3a4:	343fe936 	bltu	r6,r16,100f34c <__divdf3+0x130>
 100f3a8:	003fe406 	br	100f33c <__divdf3+0x120>
 100f3ac:	9809883a 	mov	r4,r19
 100f3b0:	d9800415 	stw	r6,16(sp)
 100f3b4:	100fa580 	call	100fa58 <__pack_d>
 100f3b8:	dfc01217 	ldw	ra,72(sp)
 100f3bc:	dcc01117 	ldw	r19,68(sp)
 100f3c0:	dc801017 	ldw	r18,64(sp)
 100f3c4:	dc400f17 	ldw	r17,60(sp)
 100f3c8:	dc000e17 	ldw	r16,56(sp)
 100f3cc:	dec01304 	addi	sp,sp,76
 100f3d0:	f800283a 	ret
 100f3d4:	00803fc4 	movi	r2,255
 100f3d8:	7090703a 	and	r8,r14,r2
 100f3dc:	00802004 	movi	r2,128
 100f3e0:	0007883a 	mov	r3,zero
 100f3e4:	0013883a 	mov	r9,zero
 100f3e8:	40800d26 	beq	r8,r2,100f420 <__divdf3+0x204>
 100f3ec:	dbc00815 	stw	r15,32(sp)
 100f3f0:	db800715 	stw	r14,28(sp)
 100f3f4:	003fab06 	br	100f2a4 <__divdf3+0x88>
 100f3f8:	343fc92e 	bgeu	r6,r16,100f320 <__divdf3+0x104>
 100f3fc:	3185883a 	add	r2,r6,r6
 100f400:	1189803a 	cmpltu	r4,r2,r6
 100f404:	39c7883a 	add	r3,r7,r7
 100f408:	20c9883a 	add	r4,r4,r3
 100f40c:	297fffc4 	addi	r5,r5,-1
 100f410:	100d883a 	mov	r6,r2
 100f414:	200f883a 	mov	r7,r4
 100f418:	d9400615 	stw	r5,24(sp)
 100f41c:	003fc006 	br	100f320 <__divdf3+0x104>
 100f420:	483ff21e 	bne	r9,zero,100f3ec <__divdf3+0x1d0>
 100f424:	01004004 	movi	r4,256
 100f428:	7104703a 	and	r2,r14,r4
 100f42c:	10c4b03a 	or	r2,r2,r3
 100f430:	103fee1e 	bne	r2,zero,100f3ec <__divdf3+0x1d0>
 100f434:	31c4b03a 	or	r2,r6,r7
 100f438:	103fec26 	beq	r2,zero,100f3ec <__divdf3+0x1d0>
 100f43c:	7205883a 	add	r2,r14,r8
 100f440:	1391803a 	cmpltu	r8,r2,r14
 100f444:	43d1883a 	add	r8,r8,r15
 100f448:	013fc004 	movi	r4,-256
 100f44c:	111c703a 	and	r14,r2,r4
 100f450:	401f883a 	mov	r15,r8
 100f454:	003fe506 	br	100f3ec <__divdf3+0x1d0>
 100f458:	8009883a 	mov	r4,r16
 100f45c:	003f9206 	br	100f2a8 <__divdf3+0x8c>
 100f460:	9809883a 	mov	r4,r19
 100f464:	d8000715 	stw	zero,28(sp)
 100f468:	d8000815 	stw	zero,32(sp)
 100f46c:	d8000615 	stw	zero,24(sp)
 100f470:	003f8d06 	br	100f2a8 <__divdf3+0x8c>

0100f474 <__gedf2>:
 100f474:	deffef04 	addi	sp,sp,-68
 100f478:	dc400f15 	stw	r17,60(sp)
 100f47c:	dc400404 	addi	r17,sp,16
 100f480:	2005883a 	mov	r2,r4
 100f484:	2807883a 	mov	r3,r5
 100f488:	dc000e15 	stw	r16,56(sp)
 100f48c:	d809883a 	mov	r4,sp
 100f490:	880b883a 	mov	r5,r17
 100f494:	dc000904 	addi	r16,sp,36
 100f498:	d8c00115 	stw	r3,4(sp)
 100f49c:	d8800015 	stw	r2,0(sp)
 100f4a0:	d9800215 	stw	r6,8(sp)
 100f4a4:	dfc01015 	stw	ra,64(sp)
 100f4a8:	d9c00315 	stw	r7,12(sp)
 100f4ac:	100fd6c0 	call	100fd6c <__unpack_d>
 100f4b0:	d9000204 	addi	r4,sp,8
 100f4b4:	800b883a 	mov	r5,r16
 100f4b8:	100fd6c0 	call	100fd6c <__unpack_d>
 100f4bc:	d8800417 	ldw	r2,16(sp)
 100f4c0:	00c00044 	movi	r3,1
 100f4c4:	01bfffc4 	movi	r6,-1
 100f4c8:	1880062e 	bgeu	r3,r2,100f4e4 <__gedf2+0x70>
 100f4cc:	d8800917 	ldw	r2,36(sp)
 100f4d0:	8809883a 	mov	r4,r17
 100f4d4:	800b883a 	mov	r5,r16
 100f4d8:	1880022e 	bgeu	r3,r2,100f4e4 <__gedf2+0x70>
 100f4dc:	100fea40 	call	100fea4 <__fpcmp_parts_d>
 100f4e0:	100d883a 	mov	r6,r2
 100f4e4:	3005883a 	mov	r2,r6
 100f4e8:	dfc01017 	ldw	ra,64(sp)
 100f4ec:	dc400f17 	ldw	r17,60(sp)
 100f4f0:	dc000e17 	ldw	r16,56(sp)
 100f4f4:	dec01104 	addi	sp,sp,68
 100f4f8:	f800283a 	ret

0100f4fc <__fixdfsi>:
 100f4fc:	defff804 	addi	sp,sp,-32
 100f500:	2005883a 	mov	r2,r4
 100f504:	2807883a 	mov	r3,r5
 100f508:	d809883a 	mov	r4,sp
 100f50c:	d9400204 	addi	r5,sp,8
 100f510:	d8c00115 	stw	r3,4(sp)
 100f514:	d8800015 	stw	r2,0(sp)
 100f518:	dfc00715 	stw	ra,28(sp)
 100f51c:	100fd6c0 	call	100fd6c <__unpack_d>
 100f520:	d8c00217 	ldw	r3,8(sp)
 100f524:	00800084 	movi	r2,2
 100f528:	1880051e 	bne	r3,r2,100f540 <__fixdfsi+0x44>
 100f52c:	0007883a 	mov	r3,zero
 100f530:	1805883a 	mov	r2,r3
 100f534:	dfc00717 	ldw	ra,28(sp)
 100f538:	dec00804 	addi	sp,sp,32
 100f53c:	f800283a 	ret
 100f540:	00800044 	movi	r2,1
 100f544:	10fff92e 	bgeu	r2,r3,100f52c <__fixdfsi+0x30>
 100f548:	00800104 	movi	r2,4
 100f54c:	18800426 	beq	r3,r2,100f560 <__fixdfsi+0x64>
 100f550:	d8c00417 	ldw	r3,16(sp)
 100f554:	183ff516 	blt	r3,zero,100f52c <__fixdfsi+0x30>
 100f558:	00800784 	movi	r2,30
 100f55c:	10c0080e 	bge	r2,r3,100f580 <__fixdfsi+0x84>
 100f560:	d8800317 	ldw	r2,12(sp)
 100f564:	1000121e 	bne	r2,zero,100f5b0 <__fixdfsi+0xb4>
 100f568:	00e00034 	movhi	r3,32768
 100f56c:	18ffffc4 	addi	r3,r3,-1
 100f570:	1805883a 	mov	r2,r3
 100f574:	dfc00717 	ldw	ra,28(sp)
 100f578:	dec00804 	addi	sp,sp,32
 100f57c:	f800283a 	ret
 100f580:	00800f04 	movi	r2,60
 100f584:	10d1c83a 	sub	r8,r2,r3
 100f588:	40bff804 	addi	r2,r8,-32
 100f58c:	d9800517 	ldw	r6,20(sp)
 100f590:	d9c00617 	ldw	r7,24(sp)
 100f594:	10000816 	blt	r2,zero,100f5b8 <__fixdfsi+0xbc>
 100f598:	3888d83a 	srl	r4,r7,r2
 100f59c:	d8800317 	ldw	r2,12(sp)
 100f5a0:	2007883a 	mov	r3,r4
 100f5a4:	103fe226 	beq	r2,zero,100f530 <__fixdfsi+0x34>
 100f5a8:	0107c83a 	sub	r3,zero,r4
 100f5ac:	003fe006 	br	100f530 <__fixdfsi+0x34>
 100f5b0:	00e00034 	movhi	r3,32768
 100f5b4:	003fde06 	br	100f530 <__fixdfsi+0x34>
 100f5b8:	39c7883a 	add	r3,r7,r7
 100f5bc:	008007c4 	movi	r2,31
 100f5c0:	1205c83a 	sub	r2,r2,r8
 100f5c4:	1886983a 	sll	r3,r3,r2
 100f5c8:	3208d83a 	srl	r4,r6,r8
 100f5cc:	1908b03a 	or	r4,r3,r4
 100f5d0:	003ff206 	br	100f59c <__fixdfsi+0xa0>

0100f5d4 <__floatunsidf>:
 100f5d4:	defff204 	addi	sp,sp,-56
 100f5d8:	dfc00d15 	stw	ra,52(sp)
 100f5dc:	ddc00c15 	stw	r23,48(sp)
 100f5e0:	dd800b15 	stw	r22,44(sp)
 100f5e4:	dd400a15 	stw	r21,40(sp)
 100f5e8:	dd000915 	stw	r20,36(sp)
 100f5ec:	dcc00815 	stw	r19,32(sp)
 100f5f0:	dc800715 	stw	r18,28(sp)
 100f5f4:	dc400615 	stw	r17,24(sp)
 100f5f8:	dc000515 	stw	r16,20(sp)
 100f5fc:	d8000115 	stw	zero,4(sp)
 100f600:	20000f1e 	bne	r4,zero,100f640 <__floatunsidf+0x6c>
 100f604:	00800084 	movi	r2,2
 100f608:	d8800015 	stw	r2,0(sp)
 100f60c:	d809883a 	mov	r4,sp
 100f610:	100fa580 	call	100fa58 <__pack_d>
 100f614:	dfc00d17 	ldw	ra,52(sp)
 100f618:	ddc00c17 	ldw	r23,48(sp)
 100f61c:	dd800b17 	ldw	r22,44(sp)
 100f620:	dd400a17 	ldw	r21,40(sp)
 100f624:	dd000917 	ldw	r20,36(sp)
 100f628:	dcc00817 	ldw	r19,32(sp)
 100f62c:	dc800717 	ldw	r18,28(sp)
 100f630:	dc400617 	ldw	r17,24(sp)
 100f634:	dc000517 	ldw	r16,20(sp)
 100f638:	dec00e04 	addi	sp,sp,56
 100f63c:	f800283a 	ret
 100f640:	008000c4 	movi	r2,3
 100f644:	00c00f04 	movi	r3,60
 100f648:	002f883a 	mov	r23,zero
 100f64c:	202d883a 	mov	r22,r4
 100f650:	d8800015 	stw	r2,0(sp)
 100f654:	d8c00215 	stw	r3,8(sp)
 100f658:	d9000315 	stw	r4,12(sp)
 100f65c:	ddc00415 	stw	r23,16(sp)
 100f660:	100f9d80 	call	100f9d8 <__clzsi2>
 100f664:	12400744 	addi	r9,r2,29
 100f668:	48000b16 	blt	r9,zero,100f698 <__floatunsidf+0xc4>
 100f66c:	483fe726 	beq	r9,zero,100f60c <__floatunsidf+0x38>
 100f670:	10bfff44 	addi	r2,r2,-3
 100f674:	10002e16 	blt	r2,zero,100f730 <__floatunsidf+0x15c>
 100f678:	b0a2983a 	sll	r17,r22,r2
 100f67c:	0021883a 	mov	r16,zero
 100f680:	d8800217 	ldw	r2,8(sp)
 100f684:	dc400415 	stw	r17,16(sp)
 100f688:	dc000315 	stw	r16,12(sp)
 100f68c:	1245c83a 	sub	r2,r2,r9
 100f690:	d8800215 	stw	r2,8(sp)
 100f694:	003fdd06 	br	100f60c <__floatunsidf+0x38>
 100f698:	0255c83a 	sub	r10,zero,r9
 100f69c:	51bff804 	addi	r6,r10,-32
 100f6a0:	30001b16 	blt	r6,zero,100f710 <__floatunsidf+0x13c>
 100f6a4:	b9a8d83a 	srl	r20,r23,r6
 100f6a8:	002b883a 	mov	r21,zero
 100f6ac:	000f883a 	mov	r7,zero
 100f6b0:	01000044 	movi	r4,1
 100f6b4:	0011883a 	mov	r8,zero
 100f6b8:	30002516 	blt	r6,zero,100f750 <__floatunsidf+0x17c>
 100f6bc:	21a6983a 	sll	r19,r4,r6
 100f6c0:	0025883a 	mov	r18,zero
 100f6c4:	00bfffc4 	movi	r2,-1
 100f6c8:	9089883a 	add	r4,r18,r2
 100f6cc:	988b883a 	add	r5,r19,r2
 100f6d0:	248d803a 	cmpltu	r6,r4,r18
 100f6d4:	314b883a 	add	r5,r6,r5
 100f6d8:	b104703a 	and	r2,r22,r4
 100f6dc:	b946703a 	and	r3,r23,r5
 100f6e0:	10c4b03a 	or	r2,r2,r3
 100f6e4:	10000226 	beq	r2,zero,100f6f0 <__floatunsidf+0x11c>
 100f6e8:	01c00044 	movi	r7,1
 100f6ec:	0011883a 	mov	r8,zero
 100f6f0:	d9000217 	ldw	r4,8(sp)
 100f6f4:	a1c4b03a 	or	r2,r20,r7
 100f6f8:	aa06b03a 	or	r3,r21,r8
 100f6fc:	2249c83a 	sub	r4,r4,r9
 100f700:	d8c00415 	stw	r3,16(sp)
 100f704:	d9000215 	stw	r4,8(sp)
 100f708:	d8800315 	stw	r2,12(sp)
 100f70c:	003fbf06 	br	100f60c <__floatunsidf+0x38>
 100f710:	bdc7883a 	add	r3,r23,r23
 100f714:	008007c4 	movi	r2,31
 100f718:	1285c83a 	sub	r2,r2,r10
 100f71c:	1886983a 	sll	r3,r3,r2
 100f720:	b2a8d83a 	srl	r20,r22,r10
 100f724:	baaad83a 	srl	r21,r23,r10
 100f728:	1d28b03a 	or	r20,r3,r20
 100f72c:	003fdf06 	br	100f6ac <__floatunsidf+0xd8>
 100f730:	b006d07a 	srli	r3,r22,1
 100f734:	008007c4 	movi	r2,31
 100f738:	1245c83a 	sub	r2,r2,r9
 100f73c:	1886d83a 	srl	r3,r3,r2
 100f740:	ba62983a 	sll	r17,r23,r9
 100f744:	b260983a 	sll	r16,r22,r9
 100f748:	1c62b03a 	or	r17,r3,r17
 100f74c:	003fcc06 	br	100f680 <__floatunsidf+0xac>
 100f750:	2006d07a 	srli	r3,r4,1
 100f754:	008007c4 	movi	r2,31
 100f758:	1285c83a 	sub	r2,r2,r10
 100f75c:	18a6d83a 	srl	r19,r3,r2
 100f760:	22a4983a 	sll	r18,r4,r10
 100f764:	003fd706 	br	100f6c4 <__floatunsidf+0xf0>

0100f768 <udivmodsi4>:
 100f768:	29001b2e 	bgeu	r5,r4,100f7d8 <udivmodsi4+0x70>
 100f76c:	28001a16 	blt	r5,zero,100f7d8 <udivmodsi4+0x70>
 100f770:	00800044 	movi	r2,1
 100f774:	0007883a 	mov	r3,zero
 100f778:	01c007c4 	movi	r7,31
 100f77c:	00000306 	br	100f78c <udivmodsi4+0x24>
 100f780:	19c01326 	beq	r3,r7,100f7d0 <udivmodsi4+0x68>
 100f784:	18c00044 	addi	r3,r3,1
 100f788:	28000416 	blt	r5,zero,100f79c <udivmodsi4+0x34>
 100f78c:	294b883a 	add	r5,r5,r5
 100f790:	1085883a 	add	r2,r2,r2
 100f794:	293ffa36 	bltu	r5,r4,100f780 <udivmodsi4+0x18>
 100f798:	10000d26 	beq	r2,zero,100f7d0 <udivmodsi4+0x68>
 100f79c:	0007883a 	mov	r3,zero
 100f7a0:	21400236 	bltu	r4,r5,100f7ac <udivmodsi4+0x44>
 100f7a4:	2149c83a 	sub	r4,r4,r5
 100f7a8:	1886b03a 	or	r3,r3,r2
 100f7ac:	1004d07a 	srli	r2,r2,1
 100f7b0:	280ad07a 	srli	r5,r5,1
 100f7b4:	103ffa1e 	bne	r2,zero,100f7a0 <udivmodsi4+0x38>
 100f7b8:	30000226 	beq	r6,zero,100f7c4 <udivmodsi4+0x5c>
 100f7bc:	2005883a 	mov	r2,r4
 100f7c0:	f800283a 	ret
 100f7c4:	1809883a 	mov	r4,r3
 100f7c8:	2005883a 	mov	r2,r4
 100f7cc:	f800283a 	ret
 100f7d0:	0007883a 	mov	r3,zero
 100f7d4:	003ff806 	br	100f7b8 <udivmodsi4+0x50>
 100f7d8:	00800044 	movi	r2,1
 100f7dc:	0007883a 	mov	r3,zero
 100f7e0:	003fef06 	br	100f7a0 <udivmodsi4+0x38>

0100f7e4 <__divsi3>:
 100f7e4:	defffe04 	addi	sp,sp,-8
 100f7e8:	dc000015 	stw	r16,0(sp)
 100f7ec:	dfc00115 	stw	ra,4(sp)
 100f7f0:	0021883a 	mov	r16,zero
 100f7f4:	20000c16 	blt	r4,zero,100f828 <__divsi3+0x44>
 100f7f8:	000d883a 	mov	r6,zero
 100f7fc:	28000e16 	blt	r5,zero,100f838 <__divsi3+0x54>
 100f800:	100f7680 	call	100f768 <udivmodsi4>
 100f804:	1007883a 	mov	r3,r2
 100f808:	8005003a 	cmpeq	r2,r16,zero
 100f80c:	1000011e 	bne	r2,zero,100f814 <__divsi3+0x30>
 100f810:	00c7c83a 	sub	r3,zero,r3
 100f814:	1805883a 	mov	r2,r3
 100f818:	dfc00117 	ldw	ra,4(sp)
 100f81c:	dc000017 	ldw	r16,0(sp)
 100f820:	dec00204 	addi	sp,sp,8
 100f824:	f800283a 	ret
 100f828:	0109c83a 	sub	r4,zero,r4
 100f82c:	04000044 	movi	r16,1
 100f830:	000d883a 	mov	r6,zero
 100f834:	283ff20e 	bge	r5,zero,100f800 <__divsi3+0x1c>
 100f838:	014bc83a 	sub	r5,zero,r5
 100f83c:	8021003a 	cmpeq	r16,r16,zero
 100f840:	003fef06 	br	100f800 <__divsi3+0x1c>

0100f844 <__modsi3>:
 100f844:	deffff04 	addi	sp,sp,-4
 100f848:	dfc00015 	stw	ra,0(sp)
 100f84c:	01800044 	movi	r6,1
 100f850:	2807883a 	mov	r3,r5
 100f854:	20000416 	blt	r4,zero,100f868 <__modsi3+0x24>
 100f858:	28000c16 	blt	r5,zero,100f88c <__modsi3+0x48>
 100f85c:	dfc00017 	ldw	ra,0(sp)
 100f860:	dec00104 	addi	sp,sp,4
 100f864:	100f7681 	jmpi	100f768 <udivmodsi4>
 100f868:	0109c83a 	sub	r4,zero,r4
 100f86c:	28000b16 	blt	r5,zero,100f89c <__modsi3+0x58>
 100f870:	180b883a 	mov	r5,r3
 100f874:	01800044 	movi	r6,1
 100f878:	100f7680 	call	100f768 <udivmodsi4>
 100f87c:	0085c83a 	sub	r2,zero,r2
 100f880:	dfc00017 	ldw	ra,0(sp)
 100f884:	dec00104 	addi	sp,sp,4
 100f888:	f800283a 	ret
 100f88c:	014bc83a 	sub	r5,zero,r5
 100f890:	dfc00017 	ldw	ra,0(sp)
 100f894:	dec00104 	addi	sp,sp,4
 100f898:	100f7681 	jmpi	100f768 <udivmodsi4>
 100f89c:	0147c83a 	sub	r3,zero,r5
 100f8a0:	003ff306 	br	100f870 <__modsi3+0x2c>

0100f8a4 <__udivsi3>:
 100f8a4:	000d883a 	mov	r6,zero
 100f8a8:	100f7681 	jmpi	100f768 <udivmodsi4>

0100f8ac <__umodsi3>:
 100f8ac:	01800044 	movi	r6,1
 100f8b0:	100f7681 	jmpi	100f768 <udivmodsi4>

0100f8b4 <__muldi3>:
 100f8b4:	defff204 	addi	sp,sp,-56
 100f8b8:	df000c15 	stw	fp,48(sp)
 100f8bc:	3038d43a 	srli	fp,r6,16
 100f8c0:	dd000815 	stw	r20,32(sp)
 100f8c4:	dc400515 	stw	r17,20(sp)
 100f8c8:	2028d43a 	srli	r20,r4,16
 100f8cc:	247fffcc 	andi	r17,r4,65535
 100f8d0:	dc000415 	stw	r16,16(sp)
 100f8d4:	343fffcc 	andi	r16,r6,65535
 100f8d8:	dcc00715 	stw	r19,28(sp)
 100f8dc:	d9000015 	stw	r4,0(sp)
 100f8e0:	2827883a 	mov	r19,r5
 100f8e4:	8809883a 	mov	r4,r17
 100f8e8:	d9400115 	stw	r5,4(sp)
 100f8ec:	800b883a 	mov	r5,r16
 100f8f0:	d9800215 	stw	r6,8(sp)
 100f8f4:	dfc00d15 	stw	ra,52(sp)
 100f8f8:	d9c00315 	stw	r7,12(sp)
 100f8fc:	dd800a15 	stw	r22,40(sp)
 100f900:	dd400915 	stw	r21,36(sp)
 100f904:	302d883a 	mov	r22,r6
 100f908:	ddc00b15 	stw	r23,44(sp)
 100f90c:	dc800615 	stw	r18,24(sp)
 100f910:	1002c3c0 	call	1002c3c <__mulsi3>
 100f914:	8809883a 	mov	r4,r17
 100f918:	e00b883a 	mov	r5,fp
 100f91c:	102b883a 	mov	r21,r2
 100f920:	1002c3c0 	call	1002c3c <__mulsi3>
 100f924:	800b883a 	mov	r5,r16
 100f928:	a009883a 	mov	r4,r20
 100f92c:	1023883a 	mov	r17,r2
 100f930:	1002c3c0 	call	1002c3c <__mulsi3>
 100f934:	a009883a 	mov	r4,r20
 100f938:	e00b883a 	mov	r5,fp
 100f93c:	1021883a 	mov	r16,r2
 100f940:	1002c3c0 	call	1002c3c <__mulsi3>
 100f944:	a8ffffcc 	andi	r3,r21,65535
 100f948:	a82ad43a 	srli	r21,r21,16
 100f94c:	8c23883a 	add	r17,r17,r16
 100f950:	1011883a 	mov	r8,r2
 100f954:	ac6b883a 	add	r21,r21,r17
 100f958:	a804943a 	slli	r2,r21,16
 100f95c:	b009883a 	mov	r4,r22
 100f960:	980b883a 	mov	r5,r19
 100f964:	10c7883a 	add	r3,r2,r3
 100f968:	a812d43a 	srli	r9,r21,16
 100f96c:	180d883a 	mov	r6,r3
 100f970:	ac00022e 	bgeu	r21,r16,100f97c <__muldi3+0xc8>
 100f974:	00800074 	movhi	r2,1
 100f978:	4091883a 	add	r8,r8,r2
 100f97c:	4267883a 	add	r19,r8,r9
 100f980:	302d883a 	mov	r22,r6
 100f984:	1002c3c0 	call	1002c3c <__mulsi3>
 100f988:	d9400317 	ldw	r5,12(sp)
 100f98c:	d9000017 	ldw	r4,0(sp)
 100f990:	1023883a 	mov	r17,r2
 100f994:	1002c3c0 	call	1002c3c <__mulsi3>
 100f998:	14cb883a 	add	r5,r2,r19
 100f99c:	894b883a 	add	r5,r17,r5
 100f9a0:	b005883a 	mov	r2,r22
 100f9a4:	2807883a 	mov	r3,r5
 100f9a8:	dfc00d17 	ldw	ra,52(sp)
 100f9ac:	df000c17 	ldw	fp,48(sp)
 100f9b0:	ddc00b17 	ldw	r23,44(sp)
 100f9b4:	dd800a17 	ldw	r22,40(sp)
 100f9b8:	dd400917 	ldw	r21,36(sp)
 100f9bc:	dd000817 	ldw	r20,32(sp)
 100f9c0:	dcc00717 	ldw	r19,28(sp)
 100f9c4:	dc800617 	ldw	r18,24(sp)
 100f9c8:	dc400517 	ldw	r17,20(sp)
 100f9cc:	dc000417 	ldw	r16,16(sp)
 100f9d0:	dec00e04 	addi	sp,sp,56
 100f9d4:	f800283a 	ret

0100f9d8 <__clzsi2>:
 100f9d8:	00bfffd4 	movui	r2,65535
 100f9dc:	11000e36 	bltu	r2,r4,100fa18 <__clzsi2+0x40>
 100f9e0:	00803fc4 	movi	r2,255
 100f9e4:	01400204 	movi	r5,8
 100f9e8:	0007883a 	mov	r3,zero
 100f9ec:	11001036 	bltu	r2,r4,100fa30 <__clzsi2+0x58>
 100f9f0:	000b883a 	mov	r5,zero
 100f9f4:	20c6d83a 	srl	r3,r4,r3
 100f9f8:	00804074 	movhi	r2,257
 100f9fc:	10807e04 	addi	r2,r2,504
 100fa00:	1887883a 	add	r3,r3,r2
 100fa04:	18800003 	ldbu	r2,0(r3)
 100fa08:	00c00804 	movi	r3,32
 100fa0c:	2885883a 	add	r2,r5,r2
 100fa10:	1885c83a 	sub	r2,r3,r2
 100fa14:	f800283a 	ret
 100fa18:	01400404 	movi	r5,16
 100fa1c:	00804034 	movhi	r2,256
 100fa20:	10bfffc4 	addi	r2,r2,-1
 100fa24:	2807883a 	mov	r3,r5
 100fa28:	113ff22e 	bgeu	r2,r4,100f9f4 <__clzsi2+0x1c>
 100fa2c:	01400604 	movi	r5,24
 100fa30:	2807883a 	mov	r3,r5
 100fa34:	20c6d83a 	srl	r3,r4,r3
 100fa38:	00804074 	movhi	r2,257
 100fa3c:	10807e04 	addi	r2,r2,504
 100fa40:	1887883a 	add	r3,r3,r2
 100fa44:	18800003 	ldbu	r2,0(r3)
 100fa48:	00c00804 	movi	r3,32
 100fa4c:	2885883a 	add	r2,r5,r2
 100fa50:	1885c83a 	sub	r2,r3,r2
 100fa54:	f800283a 	ret

0100fa58 <__pack_d>:
 100fa58:	20c00017 	ldw	r3,0(r4)
 100fa5c:	defffd04 	addi	sp,sp,-12
 100fa60:	dc000015 	stw	r16,0(sp)
 100fa64:	dc800215 	stw	r18,8(sp)
 100fa68:	dc400115 	stw	r17,4(sp)
 100fa6c:	00800044 	movi	r2,1
 100fa70:	22000317 	ldw	r8,12(r4)
 100fa74:	001f883a 	mov	r15,zero
 100fa78:	22400417 	ldw	r9,16(r4)
 100fa7c:	24000117 	ldw	r16,4(r4)
 100fa80:	10c0552e 	bgeu	r2,r3,100fbd8 <__pack_d+0x180>
 100fa84:	00800104 	movi	r2,4
 100fa88:	18804f26 	beq	r3,r2,100fbc8 <__pack_d+0x170>
 100fa8c:	00800084 	movi	r2,2
 100fa90:	18800226 	beq	r3,r2,100fa9c <__pack_d+0x44>
 100fa94:	4244b03a 	or	r2,r8,r9
 100fa98:	10001a1e 	bne	r2,zero,100fb04 <__pack_d+0xac>
 100fa9c:	000d883a 	mov	r6,zero
 100faa0:	000f883a 	mov	r7,zero
 100faa4:	0011883a 	mov	r8,zero
 100faa8:	00800434 	movhi	r2,16
 100faac:	10bfffc4 	addi	r2,r2,-1
 100fab0:	301d883a 	mov	r14,r6
 100fab4:	3884703a 	and	r2,r7,r2
 100fab8:	400a953a 	slli	r5,r8,20
 100fabc:	79bffc2c 	andhi	r6,r15,65520
 100fac0:	308cb03a 	or	r6,r6,r2
 100fac4:	00e00434 	movhi	r3,32784
 100fac8:	18ffffc4 	addi	r3,r3,-1
 100facc:	800497fa 	slli	r2,r16,31
 100fad0:	30c6703a 	and	r3,r6,r3
 100fad4:	1946b03a 	or	r3,r3,r5
 100fad8:	01600034 	movhi	r5,32768
 100fadc:	297fffc4 	addi	r5,r5,-1
 100fae0:	194a703a 	and	r5,r3,r5
 100fae4:	288ab03a 	or	r5,r5,r2
 100fae8:	2807883a 	mov	r3,r5
 100faec:	7005883a 	mov	r2,r14
 100faf0:	dc800217 	ldw	r18,8(sp)
 100faf4:	dc400117 	ldw	r17,4(sp)
 100faf8:	dc000017 	ldw	r16,0(sp)
 100fafc:	dec00304 	addi	sp,sp,12
 100fb00:	f800283a 	ret
 100fb04:	21000217 	ldw	r4,8(r4)
 100fb08:	00bf0084 	movi	r2,-1022
 100fb0c:	20803f16 	blt	r4,r2,100fc0c <__pack_d+0x1b4>
 100fb10:	0080ffc4 	movi	r2,1023
 100fb14:	11002c16 	blt	r2,r4,100fbc8 <__pack_d+0x170>
 100fb18:	00803fc4 	movi	r2,255
 100fb1c:	408c703a 	and	r6,r8,r2
 100fb20:	00802004 	movi	r2,128
 100fb24:	0007883a 	mov	r3,zero
 100fb28:	000f883a 	mov	r7,zero
 100fb2c:	2280ffc4 	addi	r10,r4,1023
 100fb30:	30801e26 	beq	r6,r2,100fbac <__pack_d+0x154>
 100fb34:	00801fc4 	movi	r2,127
 100fb38:	4089883a 	add	r4,r8,r2
 100fb3c:	220d803a 	cmpltu	r6,r4,r8
 100fb40:	324d883a 	add	r6,r6,r9
 100fb44:	2011883a 	mov	r8,r4
 100fb48:	3013883a 	mov	r9,r6
 100fb4c:	00880034 	movhi	r2,8192
 100fb50:	10bfffc4 	addi	r2,r2,-1
 100fb54:	12400d36 	bltu	r2,r9,100fb8c <__pack_d+0x134>
 100fb58:	4804963a 	slli	r2,r9,24
 100fb5c:	400cd23a 	srli	r6,r8,8
 100fb60:	480ed23a 	srli	r7,r9,8
 100fb64:	013fffc4 	movi	r4,-1
 100fb68:	118cb03a 	or	r6,r2,r6
 100fb6c:	01400434 	movhi	r5,16
 100fb70:	297fffc4 	addi	r5,r5,-1
 100fb74:	3104703a 	and	r2,r6,r4
 100fb78:	3946703a 	and	r3,r7,r5
 100fb7c:	5201ffcc 	andi	r8,r10,2047
 100fb80:	100d883a 	mov	r6,r2
 100fb84:	180f883a 	mov	r7,r3
 100fb88:	003fc706 	br	100faa8 <__pack_d+0x50>
 100fb8c:	480897fa 	slli	r4,r9,31
 100fb90:	4004d07a 	srli	r2,r8,1
 100fb94:	4806d07a 	srli	r3,r9,1
 100fb98:	52800044 	addi	r10,r10,1
 100fb9c:	2084b03a 	or	r2,r4,r2
 100fba0:	1011883a 	mov	r8,r2
 100fba4:	1813883a 	mov	r9,r3
 100fba8:	003feb06 	br	100fb58 <__pack_d+0x100>
 100fbac:	383fe11e 	bne	r7,zero,100fb34 <__pack_d+0xdc>
 100fbb0:	01004004 	movi	r4,256
 100fbb4:	4104703a 	and	r2,r8,r4
 100fbb8:	10c4b03a 	or	r2,r2,r3
 100fbbc:	103fe326 	beq	r2,zero,100fb4c <__pack_d+0xf4>
 100fbc0:	3005883a 	mov	r2,r6
 100fbc4:	003fdc06 	br	100fb38 <__pack_d+0xe0>
 100fbc8:	000d883a 	mov	r6,zero
 100fbcc:	000f883a 	mov	r7,zero
 100fbd0:	0201ffc4 	movi	r8,2047
 100fbd4:	003fb406 	br	100faa8 <__pack_d+0x50>
 100fbd8:	0005883a 	mov	r2,zero
 100fbdc:	00c00234 	movhi	r3,8
 100fbe0:	408cb03a 	or	r6,r8,r2
 100fbe4:	48ceb03a 	or	r7,r9,r3
 100fbe8:	013fffc4 	movi	r4,-1
 100fbec:	01400434 	movhi	r5,16
 100fbf0:	297fffc4 	addi	r5,r5,-1
 100fbf4:	3104703a 	and	r2,r6,r4
 100fbf8:	3946703a 	and	r3,r7,r5
 100fbfc:	100d883a 	mov	r6,r2
 100fc00:	180f883a 	mov	r7,r3
 100fc04:	0201ffc4 	movi	r8,2047
 100fc08:	003fa706 	br	100faa8 <__pack_d+0x50>
 100fc0c:	1109c83a 	sub	r4,r2,r4
 100fc10:	00800e04 	movi	r2,56
 100fc14:	11004316 	blt	r2,r4,100fd24 <__pack_d+0x2cc>
 100fc18:	21fff804 	addi	r7,r4,-32
 100fc1c:	38004516 	blt	r7,zero,100fd34 <__pack_d+0x2dc>
 100fc20:	49d8d83a 	srl	r12,r9,r7
 100fc24:	001b883a 	mov	r13,zero
 100fc28:	0023883a 	mov	r17,zero
 100fc2c:	01400044 	movi	r5,1
 100fc30:	0025883a 	mov	r18,zero
 100fc34:	38004716 	blt	r7,zero,100fd54 <__pack_d+0x2fc>
 100fc38:	29d6983a 	sll	r11,r5,r7
 100fc3c:	0015883a 	mov	r10,zero
 100fc40:	00bfffc4 	movi	r2,-1
 100fc44:	5089883a 	add	r4,r10,r2
 100fc48:	588b883a 	add	r5,r11,r2
 100fc4c:	228d803a 	cmpltu	r6,r4,r10
 100fc50:	314b883a 	add	r5,r6,r5
 100fc54:	4104703a 	and	r2,r8,r4
 100fc58:	4946703a 	and	r3,r9,r5
 100fc5c:	10c4b03a 	or	r2,r2,r3
 100fc60:	10000226 	beq	r2,zero,100fc6c <__pack_d+0x214>
 100fc64:	04400044 	movi	r17,1
 100fc68:	0025883a 	mov	r18,zero
 100fc6c:	00803fc4 	movi	r2,255
 100fc70:	644eb03a 	or	r7,r12,r17
 100fc74:	3892703a 	and	r9,r7,r2
 100fc78:	00802004 	movi	r2,128
 100fc7c:	6c90b03a 	or	r8,r13,r18
 100fc80:	0015883a 	mov	r10,zero
 100fc84:	48801626 	beq	r9,r2,100fce0 <__pack_d+0x288>
 100fc88:	01001fc4 	movi	r4,127
 100fc8c:	3905883a 	add	r2,r7,r4
 100fc90:	11cd803a 	cmpltu	r6,r2,r7
 100fc94:	320d883a 	add	r6,r6,r8
 100fc98:	100f883a 	mov	r7,r2
 100fc9c:	00840034 	movhi	r2,4096
 100fca0:	10bfffc4 	addi	r2,r2,-1
 100fca4:	3011883a 	mov	r8,r6
 100fca8:	0007883a 	mov	r3,zero
 100fcac:	11801b36 	bltu	r2,r6,100fd1c <__pack_d+0x2c4>
 100fcb0:	4004963a 	slli	r2,r8,24
 100fcb4:	3808d23a 	srli	r4,r7,8
 100fcb8:	400ad23a 	srli	r5,r8,8
 100fcbc:	1813883a 	mov	r9,r3
 100fcc0:	1108b03a 	or	r4,r2,r4
 100fcc4:	00bfffc4 	movi	r2,-1
 100fcc8:	00c00434 	movhi	r3,16
 100fccc:	18ffffc4 	addi	r3,r3,-1
 100fcd0:	208c703a 	and	r6,r4,r2
 100fcd4:	28ce703a 	and	r7,r5,r3
 100fcd8:	4a01ffcc 	andi	r8,r9,2047
 100fcdc:	003f7206 	br	100faa8 <__pack_d+0x50>
 100fce0:	503fe91e 	bne	r10,zero,100fc88 <__pack_d+0x230>
 100fce4:	01004004 	movi	r4,256
 100fce8:	3904703a 	and	r2,r7,r4
 100fcec:	0007883a 	mov	r3,zero
 100fcf0:	10c4b03a 	or	r2,r2,r3
 100fcf4:	10000626 	beq	r2,zero,100fd10 <__pack_d+0x2b8>
 100fcf8:	3a45883a 	add	r2,r7,r9
 100fcfc:	11cd803a 	cmpltu	r6,r2,r7
 100fd00:	320d883a 	add	r6,r6,r8
 100fd04:	100f883a 	mov	r7,r2
 100fd08:	3011883a 	mov	r8,r6
 100fd0c:	0007883a 	mov	r3,zero
 100fd10:	00840034 	movhi	r2,4096
 100fd14:	10bfffc4 	addi	r2,r2,-1
 100fd18:	123fe52e 	bgeu	r2,r8,100fcb0 <__pack_d+0x258>
 100fd1c:	00c00044 	movi	r3,1
 100fd20:	003fe306 	br	100fcb0 <__pack_d+0x258>
 100fd24:	0009883a 	mov	r4,zero
 100fd28:	0013883a 	mov	r9,zero
 100fd2c:	000b883a 	mov	r5,zero
 100fd30:	003fe406 	br	100fcc4 <__pack_d+0x26c>
 100fd34:	4a47883a 	add	r3,r9,r9
 100fd38:	008007c4 	movi	r2,31
 100fd3c:	1105c83a 	sub	r2,r2,r4
 100fd40:	1886983a 	sll	r3,r3,r2
 100fd44:	4118d83a 	srl	r12,r8,r4
 100fd48:	491ad83a 	srl	r13,r9,r4
 100fd4c:	1b18b03a 	or	r12,r3,r12
 100fd50:	003fb506 	br	100fc28 <__pack_d+0x1d0>
 100fd54:	2806d07a 	srli	r3,r5,1
 100fd58:	008007c4 	movi	r2,31
 100fd5c:	1105c83a 	sub	r2,r2,r4
 100fd60:	1896d83a 	srl	r11,r3,r2
 100fd64:	2914983a 	sll	r10,r5,r4
 100fd68:	003fb506 	br	100fc40 <__pack_d+0x1e8>

0100fd6c <__unpack_d>:
 100fd6c:	20c00117 	ldw	r3,4(r4)
 100fd70:	22400017 	ldw	r9,0(r4)
 100fd74:	00800434 	movhi	r2,16
 100fd78:	10bfffc4 	addi	r2,r2,-1
 100fd7c:	1808d53a 	srli	r4,r3,20
 100fd80:	180cd7fa 	srli	r6,r3,31
 100fd84:	1894703a 	and	r10,r3,r2
 100fd88:	2201ffcc 	andi	r8,r4,2047
 100fd8c:	281b883a 	mov	r13,r5
 100fd90:	4817883a 	mov	r11,r9
 100fd94:	29800115 	stw	r6,4(r5)
 100fd98:	5019883a 	mov	r12,r10
 100fd9c:	40001e1e 	bne	r8,zero,100fe18 <__unpack_d+0xac>
 100fda0:	4a84b03a 	or	r2,r9,r10
 100fda4:	10001926 	beq	r2,zero,100fe0c <__unpack_d+0xa0>
 100fda8:	4804d63a 	srli	r2,r9,24
 100fdac:	500c923a 	slli	r6,r10,8
 100fdb0:	013f0084 	movi	r4,-1022
 100fdb4:	00c40034 	movhi	r3,4096
 100fdb8:	18ffffc4 	addi	r3,r3,-1
 100fdbc:	118cb03a 	or	r6,r2,r6
 100fdc0:	008000c4 	movi	r2,3
 100fdc4:	480a923a 	slli	r5,r9,8
 100fdc8:	68800015 	stw	r2,0(r13)
 100fdcc:	69000215 	stw	r4,8(r13)
 100fdd0:	19800b36 	bltu	r3,r6,100fe00 <__unpack_d+0x94>
 100fdd4:	200f883a 	mov	r7,r4
 100fdd8:	1811883a 	mov	r8,r3
 100fddc:	2945883a 	add	r2,r5,r5
 100fde0:	1149803a 	cmpltu	r4,r2,r5
 100fde4:	3187883a 	add	r3,r6,r6
 100fde8:	20c9883a 	add	r4,r4,r3
 100fdec:	100b883a 	mov	r5,r2
 100fdf0:	200d883a 	mov	r6,r4
 100fdf4:	39ffffc4 	addi	r7,r7,-1
 100fdf8:	413ff82e 	bgeu	r8,r4,100fddc <__unpack_d+0x70>
 100fdfc:	69c00215 	stw	r7,8(r13)
 100fe00:	69800415 	stw	r6,16(r13)
 100fe04:	69400315 	stw	r5,12(r13)
 100fe08:	f800283a 	ret
 100fe0c:	00800084 	movi	r2,2
 100fe10:	28800015 	stw	r2,0(r5)
 100fe14:	f800283a 	ret
 100fe18:	0081ffc4 	movi	r2,2047
 100fe1c:	40800f26 	beq	r8,r2,100fe5c <__unpack_d+0xf0>
 100fe20:	480cd63a 	srli	r6,r9,24
 100fe24:	5006923a 	slli	r3,r10,8
 100fe28:	4804923a 	slli	r2,r9,8
 100fe2c:	0009883a 	mov	r4,zero
 100fe30:	30c6b03a 	or	r3,r6,r3
 100fe34:	01440034 	movhi	r5,4096
 100fe38:	110cb03a 	or	r6,r2,r4
 100fe3c:	423f0044 	addi	r8,r8,-1023
 100fe40:	194eb03a 	or	r7,r3,r5
 100fe44:	008000c4 	movi	r2,3
 100fe48:	69c00415 	stw	r7,16(r13)
 100fe4c:	6a000215 	stw	r8,8(r13)
 100fe50:	68800015 	stw	r2,0(r13)
 100fe54:	69800315 	stw	r6,12(r13)
 100fe58:	f800283a 	ret
 100fe5c:	4a84b03a 	or	r2,r9,r10
 100fe60:	1000031e 	bne	r2,zero,100fe70 <__unpack_d+0x104>
 100fe64:	00800104 	movi	r2,4
 100fe68:	28800015 	stw	r2,0(r5)
 100fe6c:	f800283a 	ret
 100fe70:	0009883a 	mov	r4,zero
 100fe74:	01400234 	movhi	r5,8
 100fe78:	4904703a 	and	r2,r9,r4
 100fe7c:	5146703a 	and	r3,r10,r5
 100fe80:	10c4b03a 	or	r2,r2,r3
 100fe84:	10000526 	beq	r2,zero,100fe9c <__unpack_d+0x130>
 100fe88:	00800044 	movi	r2,1
 100fe8c:	68800015 	stw	r2,0(r13)
 100fe90:	6b000415 	stw	r12,16(r13)
 100fe94:	6ac00315 	stw	r11,12(r13)
 100fe98:	f800283a 	ret
 100fe9c:	68000015 	stw	zero,0(r13)
 100fea0:	003ffb06 	br	100fe90 <__unpack_d+0x124>

0100fea4 <__fpcmp_parts_d>:
 100fea4:	21800017 	ldw	r6,0(r4)
 100fea8:	00c00044 	movi	r3,1
 100feac:	19800a2e 	bgeu	r3,r6,100fed8 <__fpcmp_parts_d+0x34>
 100feb0:	28800017 	ldw	r2,0(r5)
 100feb4:	1880082e 	bgeu	r3,r2,100fed8 <__fpcmp_parts_d+0x34>
 100feb8:	00c00104 	movi	r3,4
 100febc:	30c02626 	beq	r6,r3,100ff58 <__fpcmp_parts_d+0xb4>
 100fec0:	10c02226 	beq	r2,r3,100ff4c <__fpcmp_parts_d+0xa8>
 100fec4:	00c00084 	movi	r3,2
 100fec8:	30c00526 	beq	r6,r3,100fee0 <__fpcmp_parts_d+0x3c>
 100fecc:	10c0071e 	bne	r2,r3,100feec <__fpcmp_parts_d+0x48>
 100fed0:	20800117 	ldw	r2,4(r4)
 100fed4:	1000091e 	bne	r2,zero,100fefc <__fpcmp_parts_d+0x58>
 100fed8:	00800044 	movi	r2,1
 100fedc:	f800283a 	ret
 100fee0:	10c01a1e 	bne	r2,r3,100ff4c <__fpcmp_parts_d+0xa8>
 100fee4:	0005883a 	mov	r2,zero
 100fee8:	f800283a 	ret
 100feec:	22000117 	ldw	r8,4(r4)
 100fef0:	28800117 	ldw	r2,4(r5)
 100fef4:	40800326 	beq	r8,r2,100ff04 <__fpcmp_parts_d+0x60>
 100fef8:	403ff726 	beq	r8,zero,100fed8 <__fpcmp_parts_d+0x34>
 100fefc:	00bfffc4 	movi	r2,-1
 100ff00:	f800283a 	ret
 100ff04:	20c00217 	ldw	r3,8(r4)
 100ff08:	28800217 	ldw	r2,8(r5)
 100ff0c:	10fffa16 	blt	r2,r3,100fef8 <__fpcmp_parts_d+0x54>
 100ff10:	18800916 	blt	r3,r2,100ff38 <__fpcmp_parts_d+0x94>
 100ff14:	21c00417 	ldw	r7,16(r4)
 100ff18:	28c00417 	ldw	r3,16(r5)
 100ff1c:	21800317 	ldw	r6,12(r4)
 100ff20:	28800317 	ldw	r2,12(r5)
 100ff24:	19fff436 	bltu	r3,r7,100fef8 <__fpcmp_parts_d+0x54>
 100ff28:	38c00526 	beq	r7,r3,100ff40 <__fpcmp_parts_d+0x9c>
 100ff2c:	38c00236 	bltu	r7,r3,100ff38 <__fpcmp_parts_d+0x94>
 100ff30:	19ffec1e 	bne	r3,r7,100fee4 <__fpcmp_parts_d+0x40>
 100ff34:	30bfeb2e 	bgeu	r6,r2,100fee4 <__fpcmp_parts_d+0x40>
 100ff38:	403fe71e 	bne	r8,zero,100fed8 <__fpcmp_parts_d+0x34>
 100ff3c:	003fef06 	br	100fefc <__fpcmp_parts_d+0x58>
 100ff40:	11bffa2e 	bgeu	r2,r6,100ff2c <__fpcmp_parts_d+0x88>
 100ff44:	403fe426 	beq	r8,zero,100fed8 <__fpcmp_parts_d+0x34>
 100ff48:	003fec06 	br	100fefc <__fpcmp_parts_d+0x58>
 100ff4c:	28800117 	ldw	r2,4(r5)
 100ff50:	103fe11e 	bne	r2,zero,100fed8 <__fpcmp_parts_d+0x34>
 100ff54:	003fe906 	br	100fefc <__fpcmp_parts_d+0x58>
 100ff58:	11bfdd1e 	bne	r2,r6,100fed0 <__fpcmp_parts_d+0x2c>
 100ff5c:	28c00117 	ldw	r3,4(r5)
 100ff60:	20800117 	ldw	r2,4(r4)
 100ff64:	1885c83a 	sub	r2,r3,r2
 100ff68:	f800283a 	ret

0100ff6c <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 100ff6c:	defffd04 	addi	sp,sp,-12
 100ff70:	df000215 	stw	fp,8(sp)
 100ff74:	df000204 	addi	fp,sp,8
 100ff78:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 100ff7c:	e0bfff17 	ldw	r2,-4(fp)
 100ff80:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 100ff84:	e0bffe17 	ldw	r2,-8(fp)
 100ff88:	1005003a 	cmpeq	r2,r2,zero
 100ff8c:	1000021e 	bne	r2,zero,100ff98 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 100ff90:	002af070 	cmpltui	zero,zero,43969
 100ff94:	00000106 	br	100ff9c <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 100ff98:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 100ff9c:	e037883a 	mov	sp,fp
 100ffa0:	df000017 	ldw	fp,0(sp)
 100ffa4:	dec00104 	addi	sp,sp,4
 100ffa8:	f800283a 	ret

0100ffac <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 100ffac:	defffd04 	addi	sp,sp,-12
 100ffb0:	dfc00215 	stw	ra,8(sp)
 100ffb4:	df000115 	stw	fp,4(sp)
 100ffb8:	df000104 	addi	fp,sp,4
 100ffbc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 100ffc0:	00804074 	movhi	r2,257
 100ffc4:	108eaa44 	addi	r2,r2,15017
 100ffc8:	10000005 	stb	zero,0(r2)

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 100ffcc:	e13fff17 	ldw	r4,-4(fp)
 100ffd0:	100ff6c0 	call	100ff6c <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 100ffd4:	003fff06 	br	100ffd4 <_exit+0x28>
 100ffd8:	0100e6fc 	xorhi	r4,zero,923
