
il2212-rtos.elf:     file format elf32-littlenios2
il2212-rtos.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x010001ac

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x01000000 align 2**12
         filesz 0x000001ac memsz 0x000001ac flags r-x
    LOAD off    0x000021ac vaddr 0x010001ac paddr 0x010001ac align 2**12
         filesz 0x0001a30c memsz 0x0001a30c flags r-x
    LOAD off    0x0001c4b8 vaddr 0x0101a4b8 paddr 0x010280ec align 2**12
         filesz 0x0000dc34 memsz 0x0000dc34 flags rw-
    LOAD off    0x0002ad20 vaddr 0x01035d20 paddr 0x01035d20 align 2**12
         filesz 0x00000000 memsz 0x00014254 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001ac  00080020  01000000  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00019c1c  010001ac  010001ac  000021ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000006f0  01019dc8  01019dc8  0001bdc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000dc34  0101a4b8  010280ec  0001c4b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00014254  01035d20  01035d20  0002ad20  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  0002a0ec  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000f18  00000000  00000000  0002a118  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000269a  00000000  00000000  0002b030  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00034f56  00000000  00000000  0002d6ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009f27  00000000  00000000  00062620  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001e08e  00000000  00000000  0006c547  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002b68  00000000  00000000  0008a5d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000271d  00000000  00000000  0008d140  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000dc53  00000000  00000000  0008f85d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0009d4b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009c8  00000000  00000000  0009d4c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  000a34fa  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  000a3500  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000a3505  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000a3506  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000a3507  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000a350b  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000a350f  2**0
                  CONTENTS, READONLY
 24 .profiling_enabled 00000001  00000000  00000000  000a3513  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  000a3514  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  000a351f  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  000a352a  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  000a3535  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000040  00000000  00000000  000a3540  2**0
                  CONTENTS, READONLY
 30 .jdi          000175b7  00000000  00000000  000a3580  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00157894  00000000  00000000  000bab37  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
010001ac l    d  .text	00000000 .text
01019dc8 l    d  .rodata	00000000 .rodata
0101a4b8 l    d  .rwdata	00000000 .rwdata
01035d20 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
010001e4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 cpu_0.c
01035e18 l     O .bss	00000018 alarm.3490
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
010017e4 l     F .text	0000041c _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
010024e0 l     F .text	00000088 udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
01002ee4 l     F .text	00000064 __sprint_r
0101a01e l     O .rodata	00000010 blanks.3452
0101a00e l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
01004f90 l     F .text	00000250 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
010069e8 l     F .text	00000064 std
01006b3c l     F .text	00000014 __fp_lock
01006b50 l     F .text	00000014 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
010264e4 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
01028028 l     O .rwdata	00000004 charset
0101a054 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0101a19c l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0100bd64 l     F .text	0000006c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0100bdd0 l     F .text	00000038 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0100beec l     F .text	0000006c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0100c028 l     F .text	0000006c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0100c120 l     F .text	00000078 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0100c298 l     F .text	0000006c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
0100c5a4 l     F .text	0000006c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0102804c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
0100ca40 l     F .text	0000006c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
01028058 l     O .rwdata	00000004 lockid
01035d84 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0102805c l     O .rwdata	00000004 lockid
01035d8c l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
0100e5a8 l     F .text	00000050 OS_InitMisc
0100e5f8 l     F .text	00000078 OS_InitRdyList
0100e780 l     F .text	000000ec OS_InitTCBList
0100e4c0 l     F .text	000000e8 OS_InitEventList
0100e670 l     F .text	00000088 OS_InitTaskIdle
0100e6f8 l     F .text	00000088 OS_InitTaskStat
0100ea24 l     F .text	0000007c OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
01010a88 l     F .text	0000011c OS_FlagTaskRdy
010107c8 l     F .text	000001d0 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 os_tmr.c
0101687c l     F .text	00000048 OSTmr_Lock
0101622c l     F .text	000000c8 OSTmr_Alloc
010168c4 l     F .text	00000040 OSTmr_Unlock
01016774 l     F .text	00000108 OSTmr_Unlink
010162f4 l     F .text	000000dc OSTmr_Free
01016604 l     F .text	00000170 OSTmr_Link
0101657c l     F .text	00000088 OSTmr_InitTask
01016904 l     F .text	0000013c OSTmr_Task
00000000 l    df *ABS*	00000000 alt_sys_init.c
01026ea0 l     O .rwdata	0000106c jtag_uart_0
01027f0c l     O .rwdata	00000014 mutex_0
01027f20 l     O .rwdata	00000014 mutex_1
01027f34 l     O .rwdata	00000014 mutex_2
01027f48 l     O .rwdata	00000014 mutex_3
01027f5c l     O .rwdata	00000014 mutex_4
01027f70 l     O .rwdata	0000002c Buttons
01027f9c l     O .rwdata	0000002c HEX3_HEX0
01027fc8 l     O .rwdata	0000002c HEX7_HEX4
01016cac l     F .text	00000044 alt_dev_reg
01016b80 l     F .text	000000c0 alt_avalon_mutex_reg
01016c40 l     F .text	0000006c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
01016fa4 l     F .text	000002d4 altera_avalon_jtag_uart_irq
01017278 l     F .text	00000120 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
01017acc l     F .text	00000088 alt_mutex_trylock
01017bb8 l     F .text	0000006c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_performance_counter.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
01018070 l     F .text	00000080 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 perf_print_formatted_report.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0101850c l     F .text	0000006c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_gmon.c
010280dc l     O .rwdata	00000004 pcsample_need_init
01035e04 l     O .bss	00000004 s_pcsamples
010280e0 l     O .rwdata	00000004 s_low_pc
010280e4 l     O .rwdata	00000004 s_high_pc
01035e08 l     O .bss	00000004 mcount_slab_ptr
01035e0c l     O .bss	00000004 mcount_slab_size
01018878 l     F .text	000000e4 nios2_pcsample_init
010187fc l     F .text	0000007c mcount_allocate
01035e58 l     O .bss	00000018 s_nios2_pcsample_alarm
0101895c l     F .text	00000084 nios2_pcsample
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
01018a08 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
01018d3c l     F .text	00000104 alt_file_locked
01018fd8 l     F .text	0000006c alt_get_errno
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
01035e14 l     O .bss	00000002 OSTmrCtr
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
01019a84 l     F .text	00000010 register_fini
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_exit.c
01019d00 l     F .text	0000008c alt_sim_halt
01002d5c g     F .text	00000028 putchar
01008994 g     F .text	000000a0 _mprec_log10
0100127c g     F .text	00000050 PosMaxTask
010280aa g     O .rwdata	00000002 OSTaskNameSize
01008a98 g     F .text	00000098 __any_on
0100a6e8 g     F .text	0000007c _isatty_r
0101a174 g     O .rodata	00000028 __mprec_tinytens
0100c304 g     F .text	000000d4 alt_main
01002d98 g     F .text	000000ac _puts_r
01035d94 g     O .bss	00000004 OSTmrFreeList
01049ce4 g     O .bss	00000100 alt_irq
0100a764 g     F .text	00000084 _lseek_r
010204ce g     O .rwdata	00003003 test_ppm_3
010113dc g     F .text	000000e0 OS_MemInit
010280ec g       *ABS*	00000000 __flash_rwdata_start
010155b4 g     F .text	00000070 OSTimeSet
0100b550 g     F .text	00000094 __eqdf2
01045e70 g     O .bss	00000010 OSTmrWheelTbl
0100d048 g     F .text	000006c0 OSEventPendMulti
01049f74 g       *ABS*	00000000 __alt_heap_start
0101945c g     F .text	0000002c OSTaskCreateHook
01035e70 g     O .bss	00002000 task1_stk
01002ccc g     F .text	00000050 printf
01028082 g     O .rwdata	00000002 OSMboxEn
0100d76c g     F .text	00000088 OSIntEnter
00080000 g       *ABS*	00000000 __alt_mem_sram
01009fc4 g     F .text	00000074 __sseek
01006a8c g     F .text	000000b0 __sinit
01018040 g     F .text	00000030 alt_get_cpu_freq
0100a1f4 g     F .text	0000013c __swbuf_r
01028092 g     O .rwdata	00000002 OSQEn
01007864 g     F .text	00000090 _setlocale_r
01006be0 g     F .text	000000a8 __sfmoreglue
0100cce0 g     F .text	000000dc __malloc_unlock
010194dc g     F .text	00000028 OSTaskStatHook
01035d98 g     O .bss	00000001 OSLockNesting
01035d9c g     O .bss	00000004 OSTmrSemSignal
01035d28 g     O .bss	00000004 PosMaxSem
010280d0 g     O .rwdata	00000002 OSDataSize
01035da0 g     O .bss	00000001 OSRunning
01035e00 g     O .bss	00000004 altera_avalon_timer_ts_freq
010083a4 g     F .text	000000ec memmove
0101957c g     F .text	0000002c OSInitHookBegin
01018184 g     F .text	000002a0 perf_print_formatted_report
010280c8 g     O .rwdata	00000002 OSTmrSize
01006bc4 g     F .text	0000001c _cleanup
01017cbc g     F .text	00000084 altera_avalon_mutex_trylock
01008b30 g     F .text	000000c8 _Balloc
01035da4 g     O .bss	00000004 OSIdleCtr
0100b678 g     F .text	00000094 __gtdf2
0101911c g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
0100eda0 g     F .text	000002ec OS_TCBInit
01028019 g     O .rwdata	00000001 sequence_length
00080000 g     F .entry	0000000c __reset
01035da8 g     O .bss	00000002 OSTmrUsed
010280ce g     O .rwdata	00000002 OSTmrWheelTblSize
01017dbc g     F .text	00000088 altera_avalon_mutex_is_mine
01000000 g       *ABS*	00000000 __flash_exceptions_start
0102806e g     O .rwdata	00000002 OSEventSize
01035daa g     O .bss	00000001 OSPrioHighRdy
0100a668 g     F .text	00000080 _fstat_r
01019488 g     F .text	0000002c OSTaskDelHook
01035d68 g     O .bss	00000004 errno
010190fc g       .text	00000000 OSStartHighRdy
01013bfc g     F .text	0000020c OSTaskCreateExt
010012cc g     F .text	00000084 objectPos
010102c0 g     F .text	00000074 OSFlagPendGetFlagsRdy
010280ae g     O .rwdata	00000002 OSTaskStatStkSize
0100f284 g     F .text	00000340 OSFlagAccept
01011b48 g     F .text	000000d4 OSQFlush
010114bc g     F .text	00000160 OSQAccept
01035d74 g     O .bss	00000004 alt_argv
01030018 g       *ABS*	00000000 _gp
01013a1c g     F .text	000001e0 OSTaskCreate
0101349c g     F .text	00000580 OSTaskChangePrio
01035d90 g     O .bss	00000004 alt_heapsem
0100f08c g     F .text	000001f8 OSDebugInit
01013e08 g     F .text	00000418 OSTaskDel
01026d20 g     O .rwdata	00000180 alt_fd_list
01045e80 g     O .bss	00000370 OSFlagTbl
01002d84 g     F .text	00000014 _putchar_r
0100e278 g     F .text	000000c4 OS_EventTaskRemove
01018658 g     F .text	000000a0 alt_find_dev
010082f8 g     F .text	000000ac memcpy
01028098 g     O .rwdata	00000002 OSRdyTblSize
010461f0 g     O .bss	00000340 OSTmrTbl
01006bac g     F .text	00000018 _cleanup_r
0100b834 g     F .text	00000104 __floatsidf
01018aec g     F .text	00000084 alt_io_redirect
0100b7a0 g     F .text	00000094 __ltdf2
01019dc8 g       *ABS*	00000000 __DTOR_END__
01002e44 g     F .text	00000020 puts
0100cdbc g     F .text	0000013c OSEventNameGet
0102807c g     O .rwdata	00000002 OSFlagMax
01028018 g     O .rwdata	00000001 NR_ASCII_CHARS
010088d8 g     F .text	000000bc __ratio
0100d7f4 g     F .text	0000010c OSIntExit
010280b6 g     O .rwdata	00000002 OSTCBSize
010264d4 g     O .rwdata	00000010 image_sequence
01035dab g     O .bss	00000001 OSPrioCur
01017518 g     F .text	000002cc altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
01002d1c g     F .text	00000040 _printf_r
01002640 g     F .text	00000014 __udivsi3
0100bf58 g     F .text	000000d0 isatty
0102809c g     O .rwdata	00000002 OSStkWidth
0101a084 g     O .rodata	000000c8 __mprec_tens
01028090 g     O .rwdata	00000002 OSPtrSize
0100781c g     F .text	00000014 __locale_charset
01028070 g     O .rwdata	00000002 OSEventTblSize
01019c50 g     F .text	000000b0 __fixunsdfsi
01019070 g       .text	00000000 OSCtxSw
01035d5c g     O .bss	00000004 __malloc_top_pad
01035dac g     O .bss	00000004 OSTCBList
010161e4 g     F .text	00000048 OSTmrSignal
01017fc4 g     F .text	0000004c perf_get_num_starts
01035d6c g     O .bss	00000004 alt_fd_list_lock
01028024 g     O .rwdata	00000004 __mb_cur_max
01007830 g     F .text	00000018 _localeconv_r
010092d0 g     F .text	00000048 __i2b
010071dc g     F .text	000004a8 __sfvwrite_r
01046530 g     O .bss	00000c30 OSMemTbl
01035db0 g     O .bss	00000001 OSTickStepState
01009f34 g     F .text	0000007c _sbrk_r
01028094 g     O .rwdata	00000002 OSQMax
01047160 g     O .bss	00000800 OSTaskStatStk
010010e0 g     F .text	0000019c posMax
01010f94 g     F .text	00000118 OSMemNameGet
01028074 g     O .rwdata	00000002 OSFlagEn
0100a7e8 g     F .text	00000084 _read_r
010280ba g     O .rwdata	00000002 OSTimeTickHookEn
01035d2c g     O .bss	00000004 CalcCoordSem
010120d0 g     F .text	0000018c OSQPost
01010ba4 g     F .text	000000b8 OS_FlagUnlink
010268e4 g     O .rwdata	0000000c __lc_ctype
01028044 g     O .rwdata	00000004 alt_max_fd
0100e8cc g     F .text	00000078 OS_MemCopy
01035d30 g     O .bss	00000004 objectPosSem
0100e944 g     F .text	000000e0 OS_Sched
01002b88 g     F .text	00000144 __unpack_d
0100a52c g     F .text	0000011c _fclose_r
01010e84 g     F .text	00000110 OSMemGet
01014560 g     F .text	000001d0 OSTaskNameSet
010069a8 g     F .text	00000040 fflush
01035d60 g     O .bss	00000004 __malloc_max_sbrked_mem
01035db4 g     O .bss	00000004 OSCtxSwCtr
01019504 g     F .text	00000078 OSTimeTickHook
01018b70 g     F .text	000001cc alt_irq_register
0102807e g     O .rwdata	00000002 OSFlagNameSize
0100e33c g     F .text	00000110 OS_EventTaskRemoveMulti
01001c8c g     F .text	00000080 __adddf3
0100e118 g     F .text	00000160 OS_EventTaskWaitMulti
010087ac g     F .text	0000012c __b2d
01028096 g     O .rwdata	00000002 OSQSize
0100aee4 g     F .text	0000066c __umoddi3
0100c198 g     F .text	00000100 lseek
010002fc g     F .text	000001c8 printAsciiHidden
01017e44 g     F .text	00000064 altera_avalon_mutex_first_lock
01012d0c g     F .text	00000288 OSSemPend
01028020 g     O .rwdata	00000004 _global_impure_ptr
010098ac g     F .text	00000600 _realloc_r
01028080 g     O .rwdata	00000002 OSLowestPrio
01049f74 g       *ABS*	00000000 __bss_end
010195f8 g     F .text	0000002c OSTCBInitHook
010280c6 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0100c7f4 g     F .text	0000011c alt_tick
01001090 g     F .text	00000050 xCorr2Task
0100a86c g     F .text	00000678 __udivdi3
01028068 g     O .rwdata	00000002 OSEventEn
0101a14c g     O .rodata	00000028 __mprec_bigtens
0100957c g     F .text	0000012c __s2b
010280c2 g     O .rwdata	00000002 OSTmrCfgNameSize
01002340 g     F .text	000001a0 __floatunsidf
010086b4 g     F .text	0000006c __mcmp
01006b88 g     F .text	00000024 __fp_lock_all
0102801b g     O .rwdata	00000001 cropSIZE
01035db8 g     O .bss	00000002 OSTmrFree
01010998 g     F .text	000000f0 OS_FlagInit
0100c750 g     F .text	000000a4 alt_alarm_stop
01015814 g     F .text	00000184 OSTmrDel
010280a4 g     O .rwdata	00000002 OSTaskIdleStkSize
01035e10 g     O .bss	00000004 alt_irq_active
01012874 g     F .text	000000cc OSSemAccept
010111d8 g     F .text	000000fc OSMemPut
01010c5c g     F .text	00000228 OSMemCreate
01035dbc g     O .bss	00000004 OSIdleCtrMax
000800ec g     F .exceptions	000000e0 alt_irq_handler
01026cf8 g     O .rwdata	00000028 alt_dev_null
010280b8 g     O .rwdata	00000002 OSTicksPerSec
01017b54 g     F .text	00000064 altera_avalon_mutex_open
0101d4cb g     O .rwdata	00003003 test_ppm_2
01037e70 g     O .bss	00002000 xCorr2Task_stk
01019070 g       .text	00000000 OSIntCtxSw
01018424 g     F .text	00000028 alt_dcache_flush_all
01008568 g     F .text	0000007c __hi0bits
0100b938 g     F .text	000000e4 __fixdfsi
010001ac g       *ABS*	00000000 stext
01039e70 g     O .bss	00002000 GrayTask_stk
010186f8 g     F .text	00000104 __mcount_record
010234d1 g     O .rwdata	00003003 test_ppm_4
01035dc0 g     O .bss	00000004 OSTCBFreeList
010280ec g       *ABS*	00000000 __ram_rwdata_end
01012f94 g     F .text	00000188 OSSemPendAbort
0102803c g     O .rwdata	00000008 alt_dev_list
0100c910 g     F .text	00000130 write
01035d34 g     O .bss	00000004 xCorr2Sem
010097b8 g     F .text	000000f4 _putc_r
010280bc g     O .rwdata	00000002 OSVersionNbr
010280d4 g     O .rwdata	00000008 alt_mutex_list
0101a4b8 g       *ABS*	00000000 __ram_rodata_end
0100be08 g     F .text	000000e4 fstat
01015b10 g     F .text	00000208 OSTmrRemainGet
01028064 g     O .rwdata	00000004 OSEndiannessTest
01009450 g     F .text	0000012c __pow5mult
01035d50 g     O .bss	00000004 __nlocale_changed
01002654 g     F .text	00000014 __umodsi3
01028076 g     O .rwdata	00000002 OSFlagGrpSize
01015d18 g     F .text	00000108 OSTmrStateGet
01049f74 g       *ABS*	00000000 end
01016e68 g     F .text	0000013c altera_avalon_jtag_uart_init
0100ebf8 g     F .text	000000d4 OS_TaskStat
01019dc4 g       *ABS*	00000000 __CTOR_LIST__
01800000 g       *ABS*	00000000 __alt_stack_pointer
010180f0 g     F .text	00000094 alt_avalon_timer_sc_init
010027dc g     F .text	0000008c __clzsi2
010177e4 g     F .text	000002e8 altera_avalon_jtag_uart_write
010163d0 g     F .text	000001ac OSTmr_Init
01006a4c g     F .text	00000010 __sfp_lock_acquire
01019dc4 g       *ABS*	00000000 etext
01008208 g     F .text	000000f0 memchr
0100e86c g     F .text	00000060 OS_MemClr
01002f48 g     F .text	00001ed0 ___vfprintf_internal_r
01019140 g     F .text	0000031c OSTaskStkInit
01000500 g     F .text	0000010c task1
01000f3c g     F .text	00000154 xCorr2
01006ebc g     F .text	00000320 _free_r
0100de5c g     F .text	000001a0 OS_EventTaskRdy
01019a94 g     F .text	000001bc __call_exitprocs
01035dc4 g     O .bss	00000001 OSCPUUsage
01035d54 g     O .bss	00000004 __mlocale_changed
01028030 g     O .rwdata	00000004 __malloc_sbrk_base
010001ac g     F .text	0000003c _start
01035d7c g     O .bss	00000004 _alt_tick_rate
01011c1c g     F .text	0000032c OSQPend
01014f6c g     F .text	00000158 OSTimeDly
01001750 g     F .text	00000094 __floatundidf
01008f18 g     F .text	00000158 __lshift
01035d80 g     O .bss	00000004 _alt_nticks
0100c474 g     F .text	00000130 read
01016a80 g     F .text	00000100 alt_sys_init
01035d38 g     O .bss	00000004 CropSem
01019944 g     F .text	00000140 __register_exitproc
01035dc5 g     O .bss	00000001 OSTaskCtr
01027ff4 g     O .rwdata	00000024 alt_gmon_data
01017d40 g     F .text	0000007c altera_avalon_mutex_unlock
010150c4 g     F .text	00000264 OSTimeDlyHMSM
01009070 g     F .text	00000260 __multiply
0100c3d8 g       .text	00000000 mcount
01017398 g     F .text	00000080 altera_avalon_jtag_uart_close
01002668 g     F .text	00000044 __mulsi3
0101a4b8 g       *ABS*	00000000 __ram_rwdata_start
01019dc8 g       *ABS*	00000000 __ram_rodata_start
01035e30 g     O .bss	00000028 __malloc_current_mallinfo
0102806a g     O .rwdata	00000002 OSEventMax
01008bf8 g     F .text	00000188 __d2b
0101311c g     F .text	00000134 OSSemPost
0100d998 g     F .text	000000f0 OSSchedUnlock
01016cf0 g     F .text	00000064 altera_avalon_jtag_uart_read_fd
01019750 g     F .text	00000110 alt_get_fd
01035dc8 g     O .bss	00000004 OSMemFreeList
0100db04 g     F .text	000000b8 OSStatInit
010106e8 g     F .text	000000e0 OSFlagQuery
0100ba1c g     F .text	000000dc __fpcmp_parts_d
010280a0 g     O .rwdata	00000002 OSTaskCreateExtEn
0100a4b0 g     F .text	0000007c _close_r
01017ea8 g     F .text	000000bc perf_get_section_time
010198c4 g     F .text	00000080 memcmp
0100de34 g     F .text	00000028 OS_Dummy
01016db8 g     F .text	00000054 altera_avalon_jtag_uart_close_fd
01049f74 g       *ABS*	00000000 __alt_stack_base
01016e0c g     F .text	0000005c altera_avalon_jtag_uart_ioctl_fd
01000bac g     F .text	0000011c crop
01004e48 g     F .text	00000148 __swsetup_r
01047960 g     O .bss	000001e0 OSQTbl
010020dc g     F .text	00000264 __divdf3
0103be70 g     O .bss	00002000 CropTask_stk
01006c88 g     F .text	000000fc __sfp
01008a34 g     F .text	00000064 __copybits
01017f64 g     F .text	00000060 perf_get_total_time
010268f0 g     O .rwdata	00000408 __malloc_av_
01006a7c g     F .text	00000010 __sinit_lock_release
01035dcc g     O .bss	00000004 OSTCBHighRdy
01001d0c g     F .text	000003d0 __muldf3
0100a0c0 g     F .text	0000006c __sread
01035d24 g     O .bss	00000004 counter
01035dd0 g     O .bss	00000004 OSQFreeList
01019624 g     F .text	0000012c alt_find_file
0101844c g     F .text	000000c0 alt_dev_llist_insert
0100cbcc g     F .text	00000114 __malloc_lock
0100c694 g     F .text	000000bc sbrk
0100cef8 g     F .text	00000150 OSEventNameSet
010067a0 g     F .text	00000208 _fflush_r
0100a3dc g     F .text	000000d4 _calloc_r
01035dd4 g     O .bss	00000001 OSRdyGrp
01015e20 g     F .text	0000018c OSTmrStart
01035d20 g       *ABS*	00000000 __bss_start
01000b2c g     F .text	00000080 CalcCoordTask
01008490 g     F .text	000000a4 memset
01035d3c g     O .bss	00000001 err
01001688 g     F .text	000000c8 main
01035d78 g     O .bss	00000004 alt_envp
01035d64 g     O .bss	00000004 __malloc_max_total_mem
01016d54 g     F .text	00000064 altera_avalon_jtag_uart_write_fd
0100a330 g     F .text	00000028 __swbuf
0101a1c8 g     O .rodata	00000100 OSUnMapTbl
0102809a g     O .rwdata	00000002 OSSemEn
01010334 g     F .text	000003b4 OSFlagPost
01009fb0 g     F .text	00000014 __sclose
01800000 g       *ABS*	00000000 __alt_heap_limit
0100a648 g     F .text	00000020 fclose
0100dffc g     F .text	0000011c OS_EventTaskWait
0100eccc g     F .text	000000d4 OS_TaskStatStkChk
01049de4 g     O .bss	00000190 _atexit0
01017c50 g     F .text	0000006c altera_avalon_mutex_lock
01014220 g     F .text	0000017c OSTaskDelReq
010051e0 g     F .text	000015c0 _dtoa_r
01007abc g     F .text	0000074c _malloc_r
01028048 g     O .rwdata	00000004 alt_errno
0100da88 g     F .text	0000007c OSStart
0100cb64 g     F .text	00000068 __env_unlock
01007758 g     F .text	000000c4 _fwalk
0103de70 g     O .bss	00002000 StartTask_Stack
01014730 g     F .text	00000224 OSTaskResume
010112d4 g     F .text	00000108 OSMemQuery
010280ac g     O .rwdata	00000002 OSTaskStatEn
01028086 g     O .rwdata	00000002 OSMemMax
0101225c g     F .text	00000194 OSQPostFront
010096a8 g     F .text	00000110 putc
01002568 g     F .text	0000006c __divsi3
01035dd5 g     O .bss	00000003 OSRdyTbl
01028060 g     O .rwdata	00000002 OSDebugEn
01019e98 g     O .rodata	00000014 __thenan_df
01006d84 g     F .text	00000138 _malloc_trim_r
01019dc8 g       *ABS*	00000000 __CTOR_END__
01028078 g     O .rwdata	00000002 OSFlagNodeSize
010280c0 g     O .rwdata	00000002 OSTmrCfgMax
0100a12c g     F .text	000000c8 strcmp
0101161c g     F .text	00000220 OSQCreate
0101439c g     F .text	000001c4 OSTaskNameGet
0103fe70 g     O .bss	00002000 ObjectPosTask_stk
01019dc8 g       *ABS*	00000000 __flash_rodata_start
010123f0 g     F .text	00000240 OSQPostOpt
0100dbbc g     F .text	0000024c OSTimeTick
010280a8 g     O .rwdata	00000002 OSTaskMax
01019dc8 g       *ABS*	00000000 __DTOR_LIST__
01012940 g     F .text	00000120 OSSemCreate
010280cc g     O .rwdata	00000002 OSTmrWheelSize
01035d40 g     O .bss	00000004 delay
0100b5e4 g     F .text	00000094 __nedf2
010280a2 g     O .rwdata	00000002 OSTaskDelEn
0101a4c8 g     O .rwdata	00003003 test_ppm_1
01013250 g     F .text	0000013c OSSemQuery
0101183c g     F .text	0000030c OSQDel
01011f48 g     F .text	00000188 OSQPendAbort
01016a40 g     F .text	00000040 alt_irq_init
0100c610 g     F .text	00000084 alt_release_fd
00102000 g       *ABS*	00000000 __alt_mem_shared_onchip
01019eac g     O .rodata	00000100 __clz_tab
010001e8 g     F .text	00000114 printAscii
01035d58 g     O .bss	00000004 _PathLocale
01015fac g     F .text	00000238 OSTmrStop
01019860 g     F .text	00000020 atexit
0100a358 g     F .text	00000084 _write_r
0100d900 g     F .text	00000098 OSSchedLock
010078f4 g     F .text	00000028 setlocale
01047b40 g     O .bss	00000800 OSTmrTaskStk
0100f5c4 g     F .text	00000148 OSFlagCreate
01035d44 g     O .bss	00000004 Task1TmrSem
010009cc g     F .text	00000160 CalcCoord
0102801c g     O .rwdata	00000004 _impure_ptr
01035d48 g     O .bss	00000004 GrayedSem
01035d70 g     O .bss	00000004 alt_argc
01035dfc g     O .bss	00000004 altera_avalon_timer_ts_base
010185e8 g     F .text	00000070 _do_dtors
01028072 g     O .rwdata	00000002 OSEventMultiEn
01015624 g     F .text	000001f0 OSTmrCreate
0100f70c g     F .text	000002b4 OSFlagDel
01035dd8 g     O .bss	00000004 OSEventFreeList
00080020 g       .exceptions	00000000 alt_irq_entry
01008720 g     F .text	0000008c __ulp
01009eac g     F .text	0000004c __isinfd
0100fc70 g     F .text	00000650 OSFlagPend
010280be g     O .rwdata	00000002 OSTmrEn
01006b64 g     F .text	00000024 __fp_unlock_all
01041e70 g     O .bss	00002000 PosMaxTask_stk
01028034 g     O .rwdata	00000008 alt_fs_list
01015998 g     F .text	00000178 OSTmrNameGet
0100eaa0 g     F .text	0000008c OS_StrCopy
01028088 g     O .rwdata	00000002 OSMemNameSize
010195a8 g     F .text	00000028 OSInitHookEnd
00080020 g       *ABS*	00000000 __ram_exceptions_start
010280b4 g     O .rwdata	00000002 OSTCBPrioTblMax
01007848 g     F .text	0000001c localeconv
010280b0 g     O .rwdata	00000002 OSTaskStatStkChkEn
010004c4 g     F .text	0000003c alarm_handler
01028084 g     O .rwdata	00000002 OSMemEn
0102808e g     O .rwdata	00000002 OSMutexEn
010280ec g       *ABS*	00000000 _edata
01049f74 g       *ABS*	00000000 _end
01035ddc g     O .bss	00000001 OSIntNesting
000801cc g       *ABS*	00000000 __ram_exceptions_end
01017418 g     F .text	00000100 altera_avalon_jtag_uart_ioctl
01015328 g     F .text	0000021c OSTimeDlyResume
0100fb10 g     F .text	00000160 OSFlagNameSet
01014954 g     F .text	00000208 OSTaskStkChk
0102808a g     O .rwdata	00000002 OSMemSize
0100a038 g     F .text	00000088 __swrite
0102802c g     O .rwdata	00000004 __malloc_trim_threshold
01018010 g     F .text	00000030 alt_get_performance_counter_base
01019044 g     F .text	0000002c altera_nios2_qsys_irq_init
01035de0 g     O .bss	00000004 OSTCBCur
01019880 g     F .text	00000044 exit
0102808c g     O .rwdata	00000002 OSMemTblSize
01007684 g     F .text	000000d4 _fwalk_reent
01008d80 g     F .text	00000198 __mdiff
010025d4 g     F .text	0000006c __modsi3
0102801a g     O .rwdata	00000001 dSPAN
01035d20 g     O .bss	00000004 current_image
01800000 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
01006a5c g     F .text	00000010 __sfp_lock_release
0100d708 g     F .text	00000064 OSInit
01035de4 g     O .bss	00000004 OSTmrTime
01000000 g       *ABS*	00000000 __alt_mem_sdram
01014d94 g     F .text	00000150 OSTaskQuery
010127bc g     F .text	000000b8 OS_QInit
0100eb2c g     F .text	00000064 OS_StrLen
010110ac g     F .text	0000012c OSMemNameSet
010280a6 g     O .rwdata	00000002 OSTaskProfileEn
01035de8 g     O .bss	00000004 OSTime
01035dec g     O .bss	00000004 OSTmrSem
01048340 g     O .bss	00000800 OSTaskIdleStk
01019d8c g     F .text	00000038 _exit
01009ef8 g     F .text	0000003c __isnand
01043e70 g     O .bss	00002000 CalcCoordTask_stk
0100f9c0 g     F .text	00000150 OSFlagNameGet
0100baf8 g     F .text	00000160 alt_alarm_start
01015544 g     F .text	00000070 OSTimeGet
010026ac g     F .text	00000130 __muldi3
01049be4 g     O .bss	00000100 __mcount_fn_head
0100791c g     F .text	000001a0 __smakebuf_r
0100060c g     F .text	000001cc Grayscale
01002e64 g     F .text	00000080 strlen
010194b4 g     F .text	00000028 OSTaskSwHook
01018e40 g     F .text	00000198 open
01048b40 g     O .bss	00000b40 OSEventTbl
0100b70c g     F .text	00000094 __gedf2
01049680 g     O .bss	00000510 OSTCBTbl
0101338c g     F .text	00000110 OSSemSet
01000cc8 g     F .text	00000074 CropTask
010013e0 g     F .text	000002a8 StartTask
010189e0 g     F .text	00000028 alt_icache_flush_all
010007d8 g     F .text	000001f4 GrayTask
010280e8 g     O .rwdata	00000004 alt_priority_mask
01001350 g     F .text	00000090 ObjectPosTask
01012a60 g     F .text	000002ac OSSemDel
01035df0 g     O .bss	00000004 OSFlagFreeList
0102806c g     O .rwdata	00000002 OSEventNameSize
01004e18 g     F .text	00000030 __vfprintf_internal
01035df4 g     O .bss	00000001 OSStatRdy
01017c24 g     F .text	0000002c altera_avalon_mutex_close
01049b90 g     O .bss	00000054 OSTCBPrioTbl
0100caac g     F .text	000000b8 __env_lock
010280b2 g     O .rwdata	00000002 OSTaskSwHookEn
01001c00 g     F .text	0000008c __subdf3
010085e4 g     F .text	000000d0 __lo0bits
0100c3d8 g       .text	00000000 _mcount
01028050 g     O .rwdata	00000008 alt_alarm_list
0102807a g     O .rwdata	00000002 OSFlagWidth
01018578 g     F .text	00000070 _do_ctors
01000d3c g     F .text	00000200 stencilmat
0100bc58 g     F .text	0000010c close
01035d88 g     O .bss	00000004 alt_envsem
01035df8 g     O .bss	00000004 OSIdleCtrRun
0100de08 g     F .text	0000002c OSVersion
010280c4 g     O .rwdata	00000002 OSTmrCfgWheelSize
0100c094 g     F .text	0000008c alt_load
01014ee4 g     F .text	00000088 OS_TaskStkClr
01002868 g     F .text	00000320 __pack_d
0102809e g     O .rwdata	00000002 OSTaskCreateEn
01035d4c g     O .bss	00000004 Task1Sem
0100e44c g     F .text	00000074 OS_EventWaitListInit
0101a4b8 g     O .rwdata	00000010 asciiChars
010195d0 g     F .text	00000028 OSTaskIdleHook
00000000  w      *UND*	00000000 free
01006a6c g     F .text	00000010 __sinit_lock_acquire
01009318 g     F .text	00000138 __multadd
01014b5c g     F .text	00000238 OSTaskSuspend
01008534 g     F .text	00000034 _Bfree
0100eb90 g     F .text	00000068 OS_TaskIdle
010280ca g     O .rwdata	00000002 OSTmrTblSize
01012630 g     F .text	0000018c OSQQuery



Disassembly of section .entry:

00080000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80000:	00404034 	movhi	at,256
    ori r1, r1, %lo(_start)
   80004:	08406b14 	ori	at,at,428
    jmp r1
   80008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00080020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   80044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800ec0 	call	800ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000306 	br	80098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   8008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   80094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   80098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   8009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   800c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   800e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800e8:	ef80083a 	eret

000800ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800ec:	f811883a 	mov	r8,ra
   800f0:	100c3d80 	call	100c3d8 <_mcount>
   800f4:	403f883a 	mov	ra,r8
   800f8:	defff904 	addi	sp,sp,-28
   800fc:	dfc00615 	stw	ra,24(sp)
   80100:	df000515 	stw	fp,20(sp)
   80104:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   80108:	100d76c0 	call	100d76c <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   8010c:	0005313a 	rdctl	r2,ipending
   80110:	e0bffc15 	stw	r2,-16(fp)

  return active;
   80114:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   80118:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   8011c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   80120:	00800044 	movi	r2,1
   80124:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   80128:	e0ffff17 	ldw	r3,-4(fp)
   8012c:	e0bffe17 	ldw	r2,-8(fp)
   80130:	1884703a 	and	r2,r3,r2
   80134:	1005003a 	cmpeq	r2,r2,zero
   80138:	1000171e 	bne	r2,zero,80198 <alt_irq_handler+0xac>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   8013c:	e0bffd17 	ldw	r2,-12(fp)
   80140:	00c04174 	movhi	r3,261
   80144:	18e73904 	addi	r3,r3,-25372
   80148:	100490fa 	slli	r2,r2,3
   8014c:	10c5883a 	add	r2,r2,r3
   80150:	11800017 	ldw	r6,0(r2)
   80154:	e0bffd17 	ldw	r2,-12(fp)
   80158:	00c04174 	movhi	r3,261
   8015c:	18e73904 	addi	r3,r3,-25372
   80160:	100490fa 	slli	r2,r2,3
   80164:	10c5883a 	add	r2,r2,r3
   80168:	10800104 	addi	r2,r2,4
   8016c:	11000017 	ldw	r4,0(r2)
   80170:	e17ffd17 	ldw	r5,-12(fp)
   80174:	303ee83a 	callr	r6
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80178:	0005313a 	rdctl	r2,ipending
   8017c:	e0bffb15 	stw	r2,-20(fp)

  return active;
   80180:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   80184:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   80188:	e0bfff17 	ldw	r2,-4(fp)
   8018c:	1004c03a 	cmpne	r2,r2,zero
   80190:	103fe21e 	bne	r2,zero,8011c <alt_irq_handler+0x30>
   80194:	00000706 	br	801b4 <alt_irq_handler+0xc8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   80198:	e0bffe17 	ldw	r2,-8(fp)
   8019c:	1085883a 	add	r2,r2,r2
   801a0:	e0bffe15 	stw	r2,-8(fp)
      i++;
   801a4:	e0bffd17 	ldw	r2,-12(fp)
   801a8:	10800044 	addi	r2,r2,1
   801ac:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   801b0:	003fdd06 	br	80128 <alt_irq_handler+0x3c>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   801b4:	100d7f40 	call	100d7f4 <OSIntExit>
}
   801b8:	e037883a 	mov	sp,fp
   801bc:	dfc00117 	ldw	ra,4(sp)
   801c0:	df000017 	ldw	fp,0(sp)
   801c4:	dec00204 	addi	sp,sp,8
   801c8:	f800283a 	ret

Disassembly of section .text:

010001ac <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 10001ac:	06c06034 	movhi	sp,384
    ori sp, sp, %lo(__alt_stack_pointer)
 10001b0:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 10001b4:	068040f4 	movhi	gp,259
    ori gp, gp, %lo(_gp)
 10001b8:	d6800614 	ori	gp,gp,24
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 10001bc:	008040f4 	movhi	r2,259
    ori r2, r2, %lo(__bss_start)
 10001c0:	10974814 	ori	r2,r2,23840

    movhi r3, %hi(__bss_end)
 10001c4:	00c04134 	movhi	r3,260
    ori r3, r3, %lo(__bss_end)
 10001c8:	18e7dd14 	ori	r3,r3,40820

    beq r2, r3, 1f
 10001cc:	10c00326 	beq	r2,r3,10001dc <_start+0x30>

0:
    stw zero, (r2)
 10001d0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 10001d4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 10001d8:	10fffd36 	bltu	r2,r3,10001d0 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 10001dc:	100c0940 	call	100c094 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 10001e0:	100c3040 	call	100c304 <alt_main>

010001e4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 10001e4:	003fff06 	br	10001e4 <alt_after_alt_main>

010001e8 <printAscii>:
 * @brief Prints out an image of gray values into ASCII art format
 * @param image pointer to an image
 * @param x_dim image X dimention
 * @param y_dim image Y dimention
 */
void printAscii(unsigned int* image, int x_dim, int y_dim) {
 10001e8:	f811883a 	mov	r8,ra
 10001ec:	100c3d80 	call	100c3d8 <_mcount>
 10001f0:	403f883a 	mov	ra,r8
 10001f4:	defff804 	addi	sp,sp,-32
 10001f8:	dfc00715 	stw	ra,28(sp)
 10001fc:	df000615 	stw	fp,24(sp)
 1000200:	df000604 	addi	fp,sp,24
 1000204:	e13ffd15 	stw	r4,-12(fp)
 1000208:	e17ffe15 	stw	r5,-8(fp)
 100020c:	e1bfff15 	stw	r6,-4(fp)
  int k = 0;
 1000210:	e03ffc15 	stw	zero,-16(fp)
  int l = 0;
 1000214:	e03ffb15 	stw	zero,-20(fp)
  for(k = 0; k < y_dim; k++) {
 1000218:	e03ffc15 	stw	zero,-16(fp)
 100021c:	00002f06 	br	10002dc <printAscii+0xf4>
    for(l = 0; l < x_dim; l++) {
 1000220:	e03ffb15 	stw	zero,-20(fp)
 1000224:	00002506 	br	10002bc <printAscii+0xd4>
      unsigned char pixel = image[k * y_dim + l];
 1000228:	e13ffc17 	ldw	r4,-16(fp)
 100022c:	e17fff17 	ldw	r5,-4(fp)
 1000230:	10026680 	call	1002668 <__mulsi3>
 1000234:	1007883a 	mov	r3,r2
 1000238:	e0bffb17 	ldw	r2,-20(fp)
 100023c:	1885883a 	add	r2,r3,r2
 1000240:	1085883a 	add	r2,r2,r2
 1000244:	1085883a 	add	r2,r2,r2
 1000248:	1007883a 	mov	r3,r2
 100024c:	e0bffd17 	ldw	r2,-12(fp)
 1000250:	1885883a 	add	r2,r3,r2
 1000254:	10800017 	ldw	r2,0(r2)
 1000258:	e0bffa45 	stb	r2,-23(fp)
      // Clamp pixel value to 255
      unsigned char c_pixel = pixel > 255 ? 255 : pixel;
 100025c:	e0bffa43 	ldbu	r2,-23(fp)
 1000260:	e0bffa05 	stb	r2,-24(fp)
      // Print normalized value as ASCII character
      printf("%4c", asciiChars[((NR_ASCII_CHARS - 1) * c_pixel) / 255]);
 1000264:	d0a00003 	ldbu	r2,-32768(gp)
 1000268:	10803fcc 	andi	r2,r2,255
 100026c:	113fffc4 	addi	r4,r2,-1
 1000270:	e17ffa03 	ldbu	r5,-24(fp)
 1000274:	10026680 	call	1002668 <__mulsi3>
 1000278:	1009883a 	mov	r4,r2
 100027c:	01403fc4 	movi	r5,255
 1000280:	10025680 	call	1002568 <__divsi3>
 1000284:	1007883a 	mov	r3,r2
 1000288:	008040b4 	movhi	r2,258
 100028c:	10a92e04 	addi	r2,r2,-23368
 1000290:	10c5883a 	add	r2,r2,r3
 1000294:	10800003 	ldbu	r2,0(r2)
 1000298:	11403fcc 	andi	r5,r2,255
 100029c:	2940201c 	xori	r5,r5,128
 10002a0:	297fe004 	addi	r5,r5,-128
 10002a4:	010040b4 	movhi	r4,258
 10002a8:	21277204 	addi	r4,r4,-25144
 10002ac:	1002ccc0 	call	1002ccc <printf>
 */
void printAscii(unsigned int* image, int x_dim, int y_dim) {
  int k = 0;
  int l = 0;
  for(k = 0; k < y_dim; k++) {
    for(l = 0; l < x_dim; l++) {
 10002b0:	e0bffb17 	ldw	r2,-20(fp)
 10002b4:	10800044 	addi	r2,r2,1
 10002b8:	e0bffb15 	stw	r2,-20(fp)
 10002bc:	e0fffb17 	ldw	r3,-20(fp)
 10002c0:	e0bffe17 	ldw	r2,-8(fp)
 10002c4:	18bfd816 	blt	r3,r2,1000228 <printAscii+0x40>
      // Clamp pixel value to 255
      unsigned char c_pixel = pixel > 255 ? 255 : pixel;
      // Print normalized value as ASCII character
      printf("%4c", asciiChars[((NR_ASCII_CHARS - 1) * c_pixel) / 255]);
    }
    printf("\n");
 10002c8:	01000284 	movi	r4,10
 10002cc:	1002d5c0 	call	1002d5c <putchar>
 * @param y_dim image Y dimention
 */
void printAscii(unsigned int* image, int x_dim, int y_dim) {
  int k = 0;
  int l = 0;
  for(k = 0; k < y_dim; k++) {
 10002d0:	e0bffc17 	ldw	r2,-16(fp)
 10002d4:	10800044 	addi	r2,r2,1
 10002d8:	e0bffc15 	stw	r2,-16(fp)
 10002dc:	e0fffc17 	ldw	r3,-16(fp)
 10002e0:	e0bfff17 	ldw	r2,-4(fp)
 10002e4:	18bfce16 	blt	r3,r2,1000220 <printAscii+0x38>
      // Print normalized value as ASCII character
      printf("%4c", asciiChars[((NR_ASCII_CHARS - 1) * c_pixel) / 255]);
    }
    printf("\n");
  }
}
 10002e8:	e037883a 	mov	sp,fp
 10002ec:	dfc00117 	ldw	ra,4(sp)
 10002f0:	df000017 	ldw	fp,0(sp)
 10002f4:	dec00204 	addi	sp,sp,8
 10002f8:	f800283a 	ret

010002fc <printAsciiHidden>:
 * @param size radius of hidden patch
 * @param gray_value gray value of the hiding patch
 */
void printAsciiHidden(unsigned int* image, int x_dim, int y_dim,
		      int x_pos, int y_pos,
		      int size, unsigned int gray_value) {
 10002fc:	f811883a 	mov	r8,ra
 1000300:	100c3d80 	call	100c3d8 <_mcount>
 1000304:	403f883a 	mov	ra,r8
 1000308:	defff704 	addi	sp,sp,-36
 100030c:	dfc00815 	stw	ra,32(sp)
 1000310:	df000715 	stw	fp,28(sp)
 1000314:	df000704 	addi	fp,sp,28
 1000318:	e13ffc15 	stw	r4,-16(fp)
 100031c:	e17ffd15 	stw	r5,-12(fp)
 1000320:	e1bffe15 	stw	r6,-8(fp)
 1000324:	e1ffff15 	stw	r7,-4(fp)
  int k = 0;
 1000328:	e03ffb15 	stw	zero,-20(fp)
  int l = 0;
 100032c:	e03ffa15 	stw	zero,-24(fp)
  for(k = 0; k < y_dim; k++) {
 1000330:	e03ffb15 	stw	zero,-20(fp)
 1000334:	00005b06 	br	10004a4 <printAsciiHidden+0x1a8>
    for(l = 0; l < x_dim; l++) {	
 1000338:	e03ffa15 	stw	zero,-24(fp)
 100033c:	00005106 	br	1000484 <printAsciiHidden+0x188>
      if ((k >= y_pos - size) && (k < y_pos + size) && (l >= x_pos - size) && (l < x_pos + size)) {
 1000340:	e0c00217 	ldw	r3,8(fp)
 1000344:	e0800317 	ldw	r2,12(fp)
 1000348:	1887c83a 	sub	r3,r3,r2
 100034c:	e0bffb17 	ldw	r2,-20(fp)
 1000350:	10c02716 	blt	r2,r3,10003f0 <printAsciiHidden+0xf4>
 1000354:	e0c00217 	ldw	r3,8(fp)
 1000358:	e0800317 	ldw	r2,12(fp)
 100035c:	1887883a 	add	r3,r3,r2
 1000360:	e0bffb17 	ldw	r2,-20(fp)
 1000364:	10c0220e 	bge	r2,r3,10003f0 <printAsciiHidden+0xf4>
 1000368:	e0ffff17 	ldw	r3,-4(fp)
 100036c:	e0800317 	ldw	r2,12(fp)
 1000370:	1887c83a 	sub	r3,r3,r2
 1000374:	e0bffa17 	ldw	r2,-24(fp)
 1000378:	10c01d16 	blt	r2,r3,10003f0 <printAsciiHidden+0xf4>
 100037c:	e0ffff17 	ldw	r3,-4(fp)
 1000380:	e0800317 	ldw	r2,12(fp)
 1000384:	1887883a 	add	r3,r3,r2
 1000388:	e0bffa17 	ldw	r2,-24(fp)
 100038c:	10c0180e 	bge	r2,r3,10003f0 <printAsciiHidden+0xf4>
	unsigned char pixel = gray_value;
 1000390:	e0800417 	ldw	r2,16(fp)
 1000394:	e0bff9c5 	stb	r2,-25(fp)
	unsigned char c_pixel = pixel > 255 ? 255 : pixel;
 1000398:	e0bff9c3 	ldbu	r2,-25(fp)
 100039c:	e0bff985 	stb	r2,-26(fp)
	printf("%4c", asciiChars[((NR_ASCII_CHARS - 1) * c_pixel) / 255]);
 10003a0:	d0a00003 	ldbu	r2,-32768(gp)
 10003a4:	10803fcc 	andi	r2,r2,255
 10003a8:	113fffc4 	addi	r4,r2,-1
 10003ac:	e17ff983 	ldbu	r5,-26(fp)
 10003b0:	10026680 	call	1002668 <__mulsi3>
 10003b4:	1009883a 	mov	r4,r2
 10003b8:	01403fc4 	movi	r5,255
 10003bc:	10025680 	call	1002568 <__divsi3>
 10003c0:	1007883a 	mov	r3,r2
 10003c4:	008040b4 	movhi	r2,258
 10003c8:	10a92e04 	addi	r2,r2,-23368
 10003cc:	10c5883a 	add	r2,r2,r3
 10003d0:	10800003 	ldbu	r2,0(r2)
 10003d4:	11403fcc 	andi	r5,r2,255
 10003d8:	2940201c 	xori	r5,r5,128
 10003dc:	297fe004 	addi	r5,r5,-128
 10003e0:	010040b4 	movhi	r4,258
 10003e4:	21277204 	addi	r4,r4,-25144
 10003e8:	1002ccc0 	call	1002ccc <printf>
		      int size, unsigned int gray_value) {
  int k = 0;
  int l = 0;
  for(k = 0; k < y_dim; k++) {
    for(l = 0; l < x_dim; l++) {	
      if ((k >= y_pos - size) && (k < y_pos + size) && (l >= x_pos - size) && (l < x_pos + size)) {
 10003ec:	00002206 	br	1000478 <printAsciiHidden+0x17c>
	unsigned char pixel = gray_value;
	unsigned char c_pixel = pixel > 255 ? 255 : pixel;
	printf("%4c", asciiChars[((NR_ASCII_CHARS - 1) * c_pixel) / 255]);
      } else {
	unsigned char pixel = image[k * y_dim + l];
 10003f0:	e13ffb17 	ldw	r4,-20(fp)
 10003f4:	e17ffe17 	ldw	r5,-8(fp)
 10003f8:	10026680 	call	1002668 <__mulsi3>
 10003fc:	1007883a 	mov	r3,r2
 1000400:	e0bffa17 	ldw	r2,-24(fp)
 1000404:	1885883a 	add	r2,r3,r2
 1000408:	1085883a 	add	r2,r2,r2
 100040c:	1085883a 	add	r2,r2,r2
 1000410:	1007883a 	mov	r3,r2
 1000414:	e0bffc17 	ldw	r2,-16(fp)
 1000418:	1885883a 	add	r2,r3,r2
 100041c:	10800017 	ldw	r2,0(r2)
 1000420:	e0bff945 	stb	r2,-27(fp)
	unsigned char c_pixel = pixel > 255 ? 255 : pixel;
 1000424:	e0bff943 	ldbu	r2,-27(fp)
 1000428:	e0bff905 	stb	r2,-28(fp)
	printf("%4c", asciiChars[((NR_ASCII_CHARS - 1) * c_pixel) / 255]);	  
 100042c:	d0a00003 	ldbu	r2,-32768(gp)
 1000430:	10803fcc 	andi	r2,r2,255
 1000434:	113fffc4 	addi	r4,r2,-1
 1000438:	e17ff903 	ldbu	r5,-28(fp)
 100043c:	10026680 	call	1002668 <__mulsi3>
 1000440:	1009883a 	mov	r4,r2
 1000444:	01403fc4 	movi	r5,255
 1000448:	10025680 	call	1002568 <__divsi3>
 100044c:	1007883a 	mov	r3,r2
 1000450:	008040b4 	movhi	r2,258
 1000454:	10a92e04 	addi	r2,r2,-23368
 1000458:	10c5883a 	add	r2,r2,r3
 100045c:	10800003 	ldbu	r2,0(r2)
 1000460:	11403fcc 	andi	r5,r2,255
 1000464:	2940201c 	xori	r5,r5,128
 1000468:	297fe004 	addi	r5,r5,-128
 100046c:	010040b4 	movhi	r4,258
 1000470:	21277204 	addi	r4,r4,-25144
 1000474:	1002ccc0 	call	1002ccc <printf>
		      int x_pos, int y_pos,
		      int size, unsigned int gray_value) {
  int k = 0;
  int l = 0;
  for(k = 0; k < y_dim; k++) {
    for(l = 0; l < x_dim; l++) {	
 1000478:	e0bffa17 	ldw	r2,-24(fp)
 100047c:	10800044 	addi	r2,r2,1
 1000480:	e0bffa15 	stw	r2,-24(fp)
 1000484:	e0fffa17 	ldw	r3,-24(fp)
 1000488:	e0bffd17 	ldw	r2,-12(fp)
 100048c:	18bfac16 	blt	r3,r2,1000340 <printAsciiHidden+0x44>
	unsigned char pixel = image[k * y_dim + l];
	unsigned char c_pixel = pixel > 255 ? 255 : pixel;
	printf("%4c", asciiChars[((NR_ASCII_CHARS - 1) * c_pixel) / 255]);	  
      }
    }
    printf("\n");
 1000490:	01000284 	movi	r4,10
 1000494:	1002d5c0 	call	1002d5c <putchar>
void printAsciiHidden(unsigned int* image, int x_dim, int y_dim,
		      int x_pos, int y_pos,
		      int size, unsigned int gray_value) {
  int k = 0;
  int l = 0;
  for(k = 0; k < y_dim; k++) {
 1000498:	e0bffb17 	ldw	r2,-20(fp)
 100049c:	10800044 	addi	r2,r2,1
 10004a0:	e0bffb15 	stw	r2,-20(fp)
 10004a4:	e0fffb17 	ldw	r3,-20(fp)
 10004a8:	e0bffe17 	ldw	r2,-8(fp)
 10004ac:	18bfa216 	blt	r3,r2,1000338 <printAsciiHidden+0x3c>
	printf("%4c", asciiChars[((NR_ASCII_CHARS - 1) * c_pixel) / 255]);	  
      }
    }
    printf("\n");
  }
}
 10004b0:	e037883a 	mov	sp,fp
 10004b4:	dfc00117 	ldw	ra,4(sp)
 10004b8:	df000017 	ldw	fp,0(sp)
 10004bc:	dec00204 	addi	sp,sp,8
 10004c0:	f800283a 	ret

010004c4 <alarm_handler>:

/*
 * ISR for HW Timer
 */
alt_u32 alarm_handler(void* context)
{
 10004c4:	f811883a 	mov	r8,ra
 10004c8:	100c3d80 	call	100c3d8 <_mcount>
 10004cc:	403f883a 	mov	ra,r8
 10004d0:	defffd04 	addi	sp,sp,-12
 10004d4:	dfc00215 	stw	ra,8(sp)
 10004d8:	df000115 	stw	fp,4(sp)
 10004dc:	df000104 	addi	fp,sp,4
 10004e0:	e13fff15 	stw	r4,-4(fp)
  OSTmrSignal(); /* Signals a 'tick' to the SW timers */
 10004e4:	10161e40 	call	10161e4 <OSTmrSignal>

  return delay;
 10004e8:	d0974a17 	ldw	r2,23848(gp)
}
 10004ec:	e037883a 	mov	sp,fp
 10004f0:	dfc00117 	ldw	ra,4(sp)
 10004f4:	df000017 	ldw	fp,0(sp)
 10004f8:	dec00204 	addi	sp,sp,8
 10004fc:	f800283a 	ret

01000500 <task1>:
Every task at the beginning block itself thanks to the utilization of semaphores
and once that the function has finished they increase the value of the semaphore
of the next task.
*/
void task1(void* pdata)
{
 1000500:	f811883a 	mov	r8,ra
 1000504:	100c3d80 	call	100c3d8 <_mcount>
 1000508:	403f883a 	mov	ra,r8
 100050c:	defff804 	addi	sp,sp,-32
 1000510:	dfc00715 	stw	ra,28(sp)
 1000514:	df000615 	stw	fp,24(sp)
 1000518:	df000604 	addi	fp,sp,24
 100051c:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	INT8U value=0;
 1000520:	e03ffb05 	stb	zero,-20(fp)
	char current_image=0;
 1000524:	e03ffac5 	stb	zero,-21(fp)
	char sequence_length = 4;
	unsigned char* image_sequence[4] = {test_ppm_1, test_ppm_2, test_ppm_3, test_ppm_4};

	#else
	/* Sequence of images for measuring performance */
	char sequence_length=3;
 1000528:	008000c4 	movi	r2,3
 100052c:	e0bffa85 	stb	r2,-22(fp)
	unsigned char* image_sequence[3] = {test_ppm_1, test_ppm_2, test_ppm_3};
 1000530:	008040b4 	movhi	r2,258
 1000534:	10a93204 	addi	r2,r2,-23352
 1000538:	e0bffc15 	stw	r2,-16(fp)
 100053c:	008040b4 	movhi	r2,258
 1000540:	10b532c4 	addi	r2,r2,-11061
 1000544:	e0bffd15 	stw	r2,-12(fp)
 1000548:	008040b4 	movhi	r2,258
 100054c:	10813384 	addi	r2,r2,1230
 1000550:	e0bffe15 	stw	r2,-8(fp)
	#endif

	while (1)
	{
		/* Extract the x and y dimensions of the picture */
		unsigned char i = *image_sequence[current_image];
 1000554:	e0bffac7 	ldb	r2,-21(fp)
 1000558:	1085883a 	add	r2,r2,r2
 100055c:	1085883a 	add	r2,r2,r2
 1000560:	e0fffa04 	addi	r3,fp,-24
 1000564:	10c5883a 	add	r2,r2,r3
 1000568:	10800204 	addi	r2,r2,8
 100056c:	10800017 	ldw	r2,0(r2)
 1000570:	10800003 	ldbu	r2,0(r2)
 1000574:	e0bffa45 	stb	r2,-23(fp)
		unsigned char j = *(image_sequence[current_image]+1);
 1000578:	e0bffac7 	ldb	r2,-21(fp)
 100057c:	1085883a 	add	r2,r2,r2
 1000580:	1085883a 	add	r2,r2,r2
 1000584:	e0fffa04 	addi	r3,fp,-24
 1000588:	10c5883a 	add	r2,r2,r3
 100058c:	10800204 	addi	r2,r2,8
 1000590:	10800017 	ldw	r2,0(r2)
 1000594:	10800044 	addi	r2,r2,1
 1000598:	10800003 	ldbu	r2,0(r2)
 100059c:	e0bffa05 	stb	r2,-24(fp)
		OSSemPend(Task1Sem, 0, &err);
 10005a0:	d1174d17 	ldw	r4,23860(gp)
 10005a4:	e1bffb44 	addi	r6,fp,-19
 10005a8:	000b883a 	mov	r5,zero
 10005ac:	1012d0c0 	call	1012d0c <OSSemPend>

		PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
 10005b0:	00c00434 	movhi	r3,16
 10005b4:	18d40004 	addi	r3,r3,20480
 10005b8:	00800044 	movi	r2,1
 10005bc:	18800035 	stwio	r2,0(r3)
		PERF_START_MEASURING (PERFORMANCE_COUNTER_0_BASE);
 10005c0:	00800434 	movhi	r2,16
 10005c4:	10940104 	addi	r2,r2,20484
 10005c8:	10000035 	stwio	zero,0(r2)
//		PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, SECTION_1);

		/* Measurement here */
   	Grayscale(image_sequence[current_image]);
 10005cc:	e0bffac7 	ldb	r2,-21(fp)
 10005d0:	1085883a 	add	r2,r2,r2
 10005d4:	1085883a 	add	r2,r2,r2
 10005d8:	e0fffa04 	addi	r3,fp,-24
 10005dc:	10c5883a 	add	r2,r2,r3
 10005e0:	10800204 	addi	r2,r2,8
 10005e4:	11000017 	ldw	r4,0(r2)
 10005e8:	100060c0 	call	100060c <Grayscale>

		//IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE,value++);

		OSSemPost(GrayedSem);
 10005ec:	d1174c17 	ldw	r4,23856(gp)
 10005f0:	101311c0 	call	101311c <OSSemPost>


		/* Increment the image pointer */
		current_image=(current_image+1) % sequence_length;
 10005f4:	e0bffac7 	ldb	r2,-21(fp)
 10005f8:	11000044 	addi	r4,r2,1
 10005fc:	e17ffa87 	ldb	r5,-22(fp)
 1000600:	10025d40 	call	10025d4 <__modsi3>
 1000604:	e0bffac5 	stb	r2,-21(fp)

	}
 1000608:	003fd206 	br	1000554 <task1+0x54>

0100060c <Grayscale>:
}
void Grayscale(unsigned char* img){
 100060c:	f811883a 	mov	r8,ra
 1000610:	100c3d80 	call	100c3d8 <_mcount>
 1000614:	403f883a 	mov	ra,r8
 1000618:	defff704 	addi	sp,sp,-36
 100061c:	dfc00815 	stw	ra,32(sp)
 1000620:	df000715 	stw	fp,28(sp)
 1000624:	df000704 	addi	fp,sp,28
 1000628:	e13fff15 	stw	r4,-4(fp)
	int maxX=img[0];
 100062c:	e0bfff17 	ldw	r2,-4(fp)
 1000630:	10800003 	ldbu	r2,0(r2)
 1000634:	10803fcc 	andi	r2,r2,255
 1000638:	e0bffe15 	stw	r2,-8(fp)
	int maxY=img[1];
 100063c:	e0bfff17 	ldw	r2,-4(fp)
 1000640:	10800044 	addi	r2,r2,1
 1000644:	10800003 	ldbu	r2,0(r2)
 1000648:	10803fcc 	andi	r2,r2,255
 100064c:	e0bffd15 	stw	r2,-12(fp)
	int total= maxY*maxX*3;
 1000650:	e13ffd17 	ldw	r4,-12(fp)
 1000654:	e17ffe17 	ldw	r5,-8(fp)
 1000658:	10026680 	call	1002668 <__mulsi3>
 100065c:	1007883a 	mov	r3,r2
 1000660:	1805883a 	mov	r2,r3
 1000664:	1085883a 	add	r2,r2,r2
 1000668:	10c5883a 	add	r2,r2,r3
 100066c:	e0bffc15 	stw	r2,-16(fp)
	int moving_index=3;
 1000670:	008000c4 	movi	r2,3
 1000674:	e0bffb15 	stw	r2,-20(fp)
	int basic_index=0;
 1000678:	e03ffa15 	stw	zero,-24(fp)
	unsigned char* shared = (unsigned char)SHARED_ONCHIP_BASE;
 100067c:	e03ff915 	stw	zero,-28(fp)
	*shared++=img[0];
 1000680:	e0bfff17 	ldw	r2,-4(fp)
 1000684:	10c00003 	ldbu	r3,0(r2)
 1000688:	e0bff917 	ldw	r2,-28(fp)
 100068c:	10c00005 	stb	r3,0(r2)
 1000690:	e0bff917 	ldw	r2,-28(fp)
 1000694:	10800044 	addi	r2,r2,1
 1000698:	e0bff915 	stw	r2,-28(fp)
	*shared++=img[1];
 100069c:	e0bfff17 	ldw	r2,-4(fp)
 10006a0:	10800044 	addi	r2,r2,1
 10006a4:	10c00003 	ldbu	r3,0(r2)
 10006a8:	e0bff917 	ldw	r2,-28(fp)
 10006ac:	10c00005 	stb	r3,0(r2)
 10006b0:	e0bff917 	ldw	r2,-28(fp)
 10006b4:	10800044 	addi	r2,r2,1
 10006b8:	e0bff915 	stw	r2,-28(fp)
	*shared++=img[2];
 10006bc:	e0bfff17 	ldw	r2,-4(fp)
 10006c0:	10800084 	addi	r2,r2,2
 10006c4:	10c00003 	ldbu	r3,0(r2)
 10006c8:	e0bff917 	ldw	r2,-28(fp)
 10006cc:	10c00005 	stb	r3,0(r2)
 10006d0:	e0bff917 	ldw	r2,-28(fp)
 10006d4:	10800044 	addi	r2,r2,1
 10006d8:	e0bff915 	stw	r2,-28(fp)

	while(moving_index<total){
 10006dc:	00003606 	br	10007b8 <Grayscale+0x1ac>

		shared[basic_index]=(unsigned char)(((img[moving_index])>>2)+((img[moving_index])>>4)+((img[moving_index+1])>>1)+((img[moving_index+1])>>4)+((img[moving_index+2])>>3));
 10006e0:	e0bffa17 	ldw	r2,-24(fp)
 10006e4:	1007883a 	mov	r3,r2
 10006e8:	e0bff917 	ldw	r2,-28(fp)
 10006ec:	188b883a 	add	r5,r3,r2
 10006f0:	e0bffb17 	ldw	r2,-20(fp)
 10006f4:	1007883a 	mov	r3,r2
 10006f8:	e0bfff17 	ldw	r2,-4(fp)
 10006fc:	1885883a 	add	r2,r3,r2
 1000700:	10800003 	ldbu	r2,0(r2)
 1000704:	10803fcc 	andi	r2,r2,255
 1000708:	1004d0ba 	srli	r2,r2,2
 100070c:	1009883a 	mov	r4,r2
 1000710:	e0bffb17 	ldw	r2,-20(fp)
 1000714:	1007883a 	mov	r3,r2
 1000718:	e0bfff17 	ldw	r2,-4(fp)
 100071c:	1885883a 	add	r2,r3,r2
 1000720:	10800003 	ldbu	r2,0(r2)
 1000724:	10803fcc 	andi	r2,r2,255
 1000728:	1004d13a 	srli	r2,r2,4
 100072c:	2085883a 	add	r2,r4,r2
 1000730:	1009883a 	mov	r4,r2
 1000734:	e0fffb17 	ldw	r3,-20(fp)
 1000738:	e0bfff17 	ldw	r2,-4(fp)
 100073c:	1885883a 	add	r2,r3,r2
 1000740:	10800044 	addi	r2,r2,1
 1000744:	10800003 	ldbu	r2,0(r2)
 1000748:	10803fcc 	andi	r2,r2,255
 100074c:	1004d07a 	srli	r2,r2,1
 1000750:	2085883a 	add	r2,r4,r2
 1000754:	1009883a 	mov	r4,r2
 1000758:	e0fffb17 	ldw	r3,-20(fp)
 100075c:	e0bfff17 	ldw	r2,-4(fp)
 1000760:	1885883a 	add	r2,r3,r2
 1000764:	10800044 	addi	r2,r2,1
 1000768:	10800003 	ldbu	r2,0(r2)
 100076c:	10803fcc 	andi	r2,r2,255
 1000770:	1004d13a 	srli	r2,r2,4
 1000774:	2085883a 	add	r2,r4,r2
 1000778:	1009883a 	mov	r4,r2
 100077c:	e0fffb17 	ldw	r3,-20(fp)
 1000780:	e0bfff17 	ldw	r2,-4(fp)
 1000784:	1885883a 	add	r2,r3,r2
 1000788:	10800084 	addi	r2,r2,2
 100078c:	10800003 	ldbu	r2,0(r2)
 1000790:	10803fcc 	andi	r2,r2,255
 1000794:	1004d0fa 	srli	r2,r2,3
 1000798:	2085883a 	add	r2,r4,r2
 100079c:	28800005 	stb	r2,0(r5)
		basic_index++;
 10007a0:	e0bffa17 	ldw	r2,-24(fp)
 10007a4:	10800044 	addi	r2,r2,1
 10007a8:	e0bffa15 	stw	r2,-24(fp)
		moving_index+=3;
 10007ac:	e0bffb17 	ldw	r2,-20(fp)
 10007b0:	108000c4 	addi	r2,r2,3
 10007b4:	e0bffb15 	stw	r2,-20(fp)
	unsigned char* shared = (unsigned char)SHARED_ONCHIP_BASE;
	*shared++=img[0];
	*shared++=img[1];
	*shared++=img[2];

	while(moving_index<total){
 10007b8:	e0fffb17 	ldw	r3,-20(fp)
 10007bc:	e0bffc17 	ldw	r2,-16(fp)
 10007c0:	18bfc716 	blt	r3,r2,10006e0 <Grayscale+0xd4>
		moving_index+=3;

	}

	if(DEBUG) {printf("\n INPUT \n");printAscii(shared, maxX,maxY); OSTimeDly(3000);}
}
 10007c4:	e037883a 	mov	sp,fp
 10007c8:	dfc00117 	ldw	ra,4(sp)
 10007cc:	df000017 	ldw	fp,0(sp)
 10007d0:	dec00204 	addi	sp,sp,8
 10007d4:	f800283a 	ret

010007d8 <GrayTask>:


void GrayTask(void* pdata){
 10007d8:	f811883a 	mov	r8,ra
 10007dc:	100c3d80 	call	100c3d8 <_mcount>
 10007e0:	403f883a 	mov	ra,r8
 10007e4:	defff204 	addi	sp,sp,-56
 10007e8:	dfc00d15 	stw	ra,52(sp)
 10007ec:	df000c15 	stw	fp,48(sp)
 10007f0:	dc400b15 	stw	r17,44(sp)
 10007f4:	dc000a15 	stw	r16,40(sp)
 10007f8:	df000a04 	addi	fp,sp,40
 10007fc:	e13fff15 	stw	r4,-4(fp)

		PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
 1000800:	00c00434 	movhi	r3,16
 1000804:	18d40004 	addi	r3,r3,20480
 1000808:	00800044 	movi	r2,1
 100080c:	18800035 	stwio	r2,0(r3)
		PERF_START_MEASURING (PERFORMANCE_COUNTER_0_BASE);
 1000810:	00800434 	movhi	r2,16
 1000814:	10940104 	addi	r2,r2,20484
 1000818:	10000035 	stwio	zero,0(r2)
		PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, SECTION_1);
 100081c:	00800434 	movhi	r2,16
 1000820:	10940504 	addi	r2,r2,20500
 1000824:	10000035 	stwio	zero,0(r2)

		if(PERFORMANCE){
			while(counter++<100){
 1000828:	00001406 	br	100087c <GrayTask+0xa4>
					if(counter==0)PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, SECTION_2);
 100082c:	d0974317 	ldw	r2,23820(gp)
 1000830:	1004c03a 	cmpne	r2,r2,zero
 1000834:	1000031e 	bne	r2,zero,1000844 <GrayTask+0x6c>
 1000838:	00800434 	movhi	r2,16
 100083c:	10940904 	addi	r2,r2,20516
 1000840:	10000035 	stwio	zero,0(r2)
					Grayscale(image_sequence[current_image]);
 1000844:	d0974217 	ldw	r2,23816(gp)
 1000848:	00c040b4 	movhi	r3,258
 100084c:	18d93504 	addi	r3,r3,25812
 1000850:	1085883a 	add	r2,r2,r2
 1000854:	1085883a 	add	r2,r2,r2
 1000858:	10c5883a 	add	r2,r2,r3
 100085c:	11000017 	ldw	r4,0(r2)
 1000860:	100060c0 	call	100060c <Grayscale>
					OSSemPost(CalcCoordSem);
 1000864:	d1174517 	ldw	r4,23828(gp)
 1000868:	101311c0 	call	101311c <OSSemPost>
					OSSemPend(GrayedSem,0,&err);
 100086c:	d1174c17 	ldw	r4,23856(gp)
 1000870:	000b883a 	mov	r5,zero
 1000874:	d1974904 	addi	r6,gp,23844
 1000878:	1012d0c0 	call	1012d0c <OSSemPend>
		PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
		PERF_START_MEASURING (PERFORMANCE_COUNTER_0_BASE);
		PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, SECTION_1);

		if(PERFORMANCE){
			while(counter++<100){
 100087c:	d0d74317 	ldw	r3,23820(gp)
 1000880:	18801910 	cmplti	r2,r3,100
 1000884:	1009883a 	mov	r4,r2
 1000888:	18800044 	addi	r2,r3,1
 100088c:	d0974315 	stw	r2,23820(gp)
 1000890:	20803fcc 	andi	r2,r4,255
 1000894:	1004c03a 	cmpne	r2,r2,zero
 1000898:	103fe41e 	bne	r2,zero,100082c <GrayTask+0x54>
					if(counter==0)PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, SECTION_2);
					Grayscale(image_sequence[current_image]);
					OSSemPost(CalcCoordSem);
					OSSemPend(GrayedSem,0,&err);
				}
			PERF_END(PERFORMANCE_COUNTER_0_BASE, SECTION_1);
 100089c:	00800434 	movhi	r2,16
 10008a0:	10940404 	addi	r2,r2,20496
 10008a4:	10000035 	stwio	zero,0(r2)

			/* Print report */
			perf_print_formatted_report
 10008a8:	008040b4 	movhi	r2,258
 10008ac:	10a77604 	addi	r2,r2,-25128
 10008b0:	d8800015 	stw	r2,0(sp)
 10008b4:	01000434 	movhi	r4,16
 10008b8:	21140004 	addi	r4,r4,20480
 10008bc:	0140bef4 	movhi	r5,763
 10008c0:	297c2004 	addi	r5,r5,-3968
 10008c4:	01800084 	movi	r6,2
 10008c8:	01c040b4 	movhi	r7,258
 10008cc:	39e77304 	addi	r7,r7,-25140
 10008d0:	10181840 	call	1018184 <perf_print_formatted_report>
			ALT_CPU_FREQ,        // defined in "system.h"
			2,                   // How many sections to print
			"Total time", "Time per iteration"        // Display-name of section(s).
			);

			double total_time =  (double)perf_get_section_time(PERFORMANCE_COUNTER_0_BASE, SECTION_1)/(double)alt_get_cpu_freq();
 10008d4:	01000434 	movhi	r4,16
 10008d8:	21140004 	addi	r4,r4,20480
 10008dc:	01400044 	movi	r5,1
 10008e0:	1017ea80 	call	1017ea8 <perf_get_section_time>
 10008e4:	100b883a 	mov	r5,r2
 10008e8:	180d883a 	mov	r6,r3
 10008ec:	2809883a 	mov	r4,r5
 10008f0:	300b883a 	mov	r5,r6
 10008f4:	10017500 	call	1001750 <__floatundidf>
 10008f8:	1021883a 	mov	r16,r2
 10008fc:	1823883a 	mov	r17,r3
 1000900:	10180400 	call	1018040 <alt_get_cpu_freq>
 1000904:	1009883a 	mov	r4,r2
 1000908:	10023400 	call	1002340 <__floatunsidf>
 100090c:	100f883a 	mov	r7,r2
 1000910:	1811883a 	mov	r8,r3
 1000914:	8009883a 	mov	r4,r16
 1000918:	880b883a 	mov	r5,r17
 100091c:	380d883a 	mov	r6,r7
 1000920:	400f883a 	mov	r7,r8
 1000924:	10020dc0 	call	10020dc <__divdf3>
 1000928:	1009883a 	mov	r4,r2
 100092c:	180b883a 	mov	r5,r3
 1000930:	e13ffd15 	stw	r4,-12(fp)
 1000934:	e17ffe15 	stw	r5,-8(fp)
			    double normalized_time = total_time/4;
 1000938:	e13ffd17 	ldw	r4,-12(fp)
 100093c:	e17ffe17 	ldw	r5,-8(fp)
 1000940:	000d883a 	mov	r6,zero
 1000944:	01d00434 	movhi	r7,16400
 1000948:	10020dc0 	call	10020dc <__divdf3>
 100094c:	1009883a 	mov	r4,r2
 1000950:	180b883a 	mov	r5,r3
 1000954:	e13ffb15 	stw	r4,-20(fp)
 1000958:	e17ffc15 	stw	r5,-16(fp)
			    double throughput = 1/normalized_time;
 100095c:	0009883a 	mov	r4,zero
 1000960:	014ffc34 	movhi	r5,16368
 1000964:	e1bffb17 	ldw	r6,-20(fp)
 1000968:	e1fffc17 	ldw	r7,-16(fp)
 100096c:	10020dc0 	call	10020dc <__divdf3>
 1000970:	1009883a 	mov	r4,r2
 1000974:	180b883a 	mov	r5,r3
 1000978:	e13ff915 	stw	r4,-28(fp)
 100097c:	e17ffa15 	stw	r5,-24(fp)
			    printf("execution time: %f\nnormalized time: %f\nthroughput: %f\n", total_time, normalized_time, throughput);
 1000980:	e0bff917 	ldw	r2,-28(fp)
 1000984:	d8800115 	stw	r2,4(sp)
 1000988:	e0bffa17 	ldw	r2,-24(fp)
 100098c:	d8800215 	stw	r2,8(sp)
 1000990:	e0bffc17 	ldw	r2,-16(fp)
 1000994:	d8800015 	stw	r2,0(sp)
 1000998:	e1fffb17 	ldw	r7,-20(fp)
 100099c:	010040b4 	movhi	r4,258
 10009a0:	21277b04 	addi	r4,r4,-25108
 10009a4:	e17ffd17 	ldw	r5,-12(fp)
 10009a8:	e1bffe17 	ldw	r6,-8(fp)
 10009ac:	1002ccc0 	call	1002ccc <printf>
					Grayscale(image_sequence[current_image]);
					OSSemPost(CalcCoordSem);
					OSSemPend(GrayedSem,0,&err);
				}
		}
}
 10009b0:	e037883a 	mov	sp,fp
 10009b4:	dfc00317 	ldw	ra,12(sp)
 10009b8:	df000217 	ldw	fp,8(sp)
 10009bc:	dc400117 	ldw	r17,4(sp)
 10009c0:	dc000017 	ldw	r16,0(sp)
 10009c4:	dec00404 	addi	sp,sp,16
 10009c8:	f800283a 	ret

010009cc <CalcCoord>:


void CalcCoord(){
 10009cc:	f811883a 	mov	r8,ra
 10009d0:	100c3d80 	call	100c3d8 <_mcount>
 10009d4:	403f883a 	mov	ra,r8
 10009d8:	defff804 	addi	sp,sp,-32
 10009dc:	df000715 	stw	fp,28(sp)
 10009e0:	df000704 	addi	fp,sp,28

	unsigned char* shared = (unsigned char)SHARED_ONCHIP_BASE;
 10009e4:	e03ffd15 	stw	zero,-12(fp)
	int imgW=(int)shared[0];	  	//pic size
 10009e8:	e0bffd17 	ldw	r2,-12(fp)
 10009ec:	10800003 	ldbu	r2,0(r2)
 10009f0:	10803fcc 	andi	r2,r2,255
 10009f4:	e0bffc15 	stw	r2,-16(fp)
	int imgH=(int)shared[1];
 10009f8:	e0bffd17 	ldw	r2,-12(fp)
 10009fc:	10800044 	addi	r2,r2,1
 1000a00:	10800003 	ldbu	r2,0(r2)
 1000a04:	10803fcc 	andi	r2,r2,255
 1000a08:	e0bffb15 	stw	r2,-20(fp)
	int Globcoords[2];
	int coordX= shared[FinalResultLocation];
 1000a0c:	e0bffd17 	ldw	r2,-12(fp)
 1000a10:	108400c4 	addi	r2,r2,4099
 1000a14:	10800003 	ldbu	r2,0(r2)
 1000a18:	10803fcc 	andi	r2,r2,255
 1000a1c:	e0bffa15 	stw	r2,-24(fp)
	int coordY=shared[FinalResultLocation+1];
 1000a20:	e0bffd17 	ldw	r2,-12(fp)
 1000a24:	10840104 	addi	r2,r2,4100
 1000a28:	10800003 	ldbu	r2,0(r2)
 1000a2c:	10803fcc 	andi	r2,r2,255
 1000a30:	e0bff915 	stw	r2,-28(fp)
	//equation used by the program below
	//printf("imgW=%d, imgH=%d, xvalue=%d, yvalue=%d\n",imgW,imgH,coordX,coordY);
	//OSTimeDly(2000);
	if(coordX <= dSPAN ){
 1000a34:	d0a00083 	ldbu	r2,-32766(gp)
 1000a38:	10c03fcc 	andi	r3,r2,255
 1000a3c:	e0bffa17 	ldw	r2,-24(fp)
 1000a40:	18800216 	blt	r3,r2,1000a4c <CalcCoord+0x80>
		Globcoords[0] = 0;
 1000a44:	e03ffe15 	stw	zero,-8(fp)
 1000a48:	00001306 	br	1000a98 <CalcCoord+0xcc>
	}
	else if ( coordX > imgW-dSPAN){
 1000a4c:	d0a00083 	ldbu	r2,-32766(gp)
 1000a50:	10c03fcc 	andi	r3,r2,255
 1000a54:	e0bffc17 	ldw	r2,-16(fp)
 1000a58:	10c7c83a 	sub	r3,r2,r3
 1000a5c:	e0bffa17 	ldw	r2,-24(fp)
 1000a60:	1880070e 	bge	r3,r2,1000a80 <CalcCoord+0xb4>
			Globcoords[0] =(imgW-cropSIZE-1);
 1000a64:	d0a000c3 	ldbu	r2,-32765(gp)
 1000a68:	10c03fcc 	andi	r3,r2,255
 1000a6c:	e0bffc17 	ldw	r2,-16(fp)
 1000a70:	10c5c83a 	sub	r2,r2,r3
 1000a74:	10bfffc4 	addi	r2,r2,-1
 1000a78:	e0bffe15 	stw	r2,-8(fp)
 1000a7c:	00000606 	br	1000a98 <CalcCoord+0xcc>
		}
	else Globcoords[0] =(coordX-dSPAN-1);
 1000a80:	d0a00083 	ldbu	r2,-32766(gp)
 1000a84:	10c03fcc 	andi	r3,r2,255
 1000a88:	e0bffa17 	ldw	r2,-24(fp)
 1000a8c:	10c5c83a 	sub	r2,r2,r3
 1000a90:	10bfffc4 	addi	r2,r2,-1
 1000a94:	e0bffe15 	stw	r2,-8(fp)



	if( coordY <= dSPAN ){
 1000a98:	d0a00083 	ldbu	r2,-32766(gp)
 1000a9c:	10c03fcc 	andi	r3,r2,255
 1000aa0:	e0bff917 	ldw	r2,-28(fp)
 1000aa4:	18800216 	blt	r3,r2,1000ab0 <CalcCoord+0xe4>
		Globcoords[1] = 0;
 1000aa8:	e03fff15 	stw	zero,-4(fp)
 1000aac:	00001306 	br	1000afc <CalcCoord+0x130>
	}
	else if ( coordY > imgH-dSPAN){
 1000ab0:	d0a00083 	ldbu	r2,-32766(gp)
 1000ab4:	10c03fcc 	andi	r3,r2,255
 1000ab8:	e0bffb17 	ldw	r2,-20(fp)
 1000abc:	10c7c83a 	sub	r3,r2,r3
 1000ac0:	e0bff917 	ldw	r2,-28(fp)
 1000ac4:	1880070e 	bge	r3,r2,1000ae4 <CalcCoord+0x118>
			Globcoords[1] =(imgH - cropSIZE -1);
 1000ac8:	d0a000c3 	ldbu	r2,-32765(gp)
 1000acc:	10c03fcc 	andi	r3,r2,255
 1000ad0:	e0bffb17 	ldw	r2,-20(fp)
 1000ad4:	10c5c83a 	sub	r2,r2,r3
 1000ad8:	10bfffc4 	addi	r2,r2,-1
 1000adc:	e0bfff15 	stw	r2,-4(fp)
 1000ae0:	00000606 	br	1000afc <CalcCoord+0x130>
		}
	else {
		Globcoords[1]=(coordY - dSPAN - 1);
 1000ae4:	d0a00083 	ldbu	r2,-32766(gp)
 1000ae8:	10c03fcc 	andi	r3,r2,255
 1000aec:	e0bff917 	ldw	r2,-28(fp)
 1000af0:	10c5c83a 	sub	r2,r2,r3
 1000af4:	10bfffc4 	addi	r2,r2,-1
 1000af8:	e0bfff15 	stw	r2,-4(fp)
	}
    shared[FinalResultLocation]=(unsigned char)Globcoords[0];
 1000afc:	e0bffd17 	ldw	r2,-12(fp)
 1000b00:	10c400c4 	addi	r3,r2,4099
 1000b04:	e0bffe17 	ldw	r2,-8(fp)
 1000b08:	18800005 	stb	r2,0(r3)
	shared[FinalResultLocation+1]=(unsigned char)Globcoords[1];
 1000b0c:	e0bffd17 	ldw	r2,-12(fp)
 1000b10:	10c40104 	addi	r3,r2,4100
 1000b14:	e0bfff17 	ldw	r2,-4(fp)
 1000b18:	18800005 	stb	r2,0(r3)
	//printf("\nCoords: %d,%d\n", Globcoords[0], Globcoords[1]); OSTimeDly(2000);
}
 1000b1c:	e037883a 	mov	sp,fp
 1000b20:	df000017 	ldw	fp,0(sp)
 1000b24:	dec00104 	addi	sp,sp,4
 1000b28:	f800283a 	ret

01000b2c <CalcCoordTask>:

void CalcCoordTask(void *pdata){
 1000b2c:	f811883a 	mov	r8,ra
 1000b30:	100c3d80 	call	100c3d8 <_mcount>
 1000b34:	403f883a 	mov	ra,r8
 1000b38:	defffc04 	addi	sp,sp,-16
 1000b3c:	dfc00315 	stw	ra,12(sp)
 1000b40:	df000215 	stw	fp,8(sp)
 1000b44:	df000204 	addi	fp,sp,8
 1000b48:	e13fff15 	stw	r4,-4(fp)


	OSSemPend(CalcCoordSem,0,&err);
 1000b4c:	d1174517 	ldw	r4,23828(gp)
 1000b50:	000b883a 	mov	r5,zero
 1000b54:	d1974904 	addi	r6,gp,23844
 1000b58:	1012d0c0 	call	1012d0c <OSSemPend>
	unsigned char* shared = (unsigned char)SHARED_ONCHIP_BASE;
 1000b5c:	e03ffe15 	stw	zero,-8(fp)
	if((current_image)==0){
 1000b60:	d0974217 	ldw	r2,23816(gp)
 1000b64:	1004c03a 	cmpne	r2,r2,zero
 1000b68:	1000081e 	bne	r2,zero,1000b8c <CalcCoordTask+0x60>
		shared[FinalResultLocation]=dSPAN;
 1000b6c:	e0bffe17 	ldw	r2,-8(fp)
 1000b70:	10c400c4 	addi	r3,r2,4099
 1000b74:	d0a00083 	ldbu	r2,-32766(gp)
 1000b78:	18800005 	stb	r2,0(r3)
		shared[FinalResultLocation+1]=dSPAN;
 1000b7c:	e0bffe17 	ldw	r2,-8(fp)
 1000b80:	10c40104 	addi	r3,r2,4100
 1000b84:	d0a00083 	ldbu	r2,-32766(gp)
 1000b88:	18800005 	stb	r2,0(r3)
	}
	while(1){
		CalcCoord();
 1000b8c:	10009cc0 	call	10009cc <CalcCoord>
		OSSemPost(CropSem);
 1000b90:	d1174817 	ldw	r4,23840(gp)
 1000b94:	101311c0 	call	101311c <OSSemPost>
		OSSemPend(CalcCoordSem,0,&err);
 1000b98:	d1174517 	ldw	r4,23828(gp)
 1000b9c:	000b883a 	mov	r5,zero
 1000ba0:	d1974904 	addi	r6,gp,23844
 1000ba4:	1012d0c0 	call	1012d0c <OSSemPend>
	}
 1000ba8:	003ff806 	br	1000b8c <CalcCoordTask+0x60>

01000bac <crop>:
}

void crop (int coordX,int coordY){
 1000bac:	f811883a 	mov	r8,ra
 1000bb0:	100c3d80 	call	100c3d8 <_mcount>
 1000bb4:	403f883a 	mov	ra,r8
 1000bb8:	defff604 	addi	sp,sp,-40
 1000bbc:	dfc00915 	stw	ra,36(sp)
 1000bc0:	df000815 	stw	fp,32(sp)
 1000bc4:	df000804 	addi	fp,sp,32
 1000bc8:	e13ffe15 	stw	r4,-8(fp)
 1000bcc:	e17fff15 	stw	r5,-4(fp)

	unsigned char* shared = (unsigned char)SHARED_ONCHIP_BASE;
 1000bd0:	e03ffd15 	stw	zero,-12(fp)
	int head;		//head to use as reference
	int jump;
	head=(shared[0]*coordY)+coordX+3;
 1000bd4:	e0bffd17 	ldw	r2,-12(fp)
 1000bd8:	10800003 	ldbu	r2,0(r2)
 1000bdc:	11003fcc 	andi	r4,r2,255
 1000be0:	e17fff17 	ldw	r5,-4(fp)
 1000be4:	10026680 	call	1002668 <__mulsi3>
 1000be8:	1007883a 	mov	r3,r2
 1000bec:	e0bffe17 	ldw	r2,-8(fp)
 1000bf0:	1885883a 	add	r2,r3,r2
 1000bf4:	108000c4 	addi	r2,r2,3
 1000bf8:	e0bffc15 	stw	r2,-16(fp)
		//Goes directly to the coords given (+3 because the first three values are x,y and maxvalue)
		//defines how many values we need to skip once that the cropsize is over
		//Jump defines the gap between values to skip to have a perfect cropping
	jump=shared[0]-cropSIZE;
 1000bfc:	e0bffd17 	ldw	r2,-12(fp)
 1000c00:	10800003 	ldbu	r2,0(r2)
 1000c04:	10c03fcc 	andi	r3,r2,255
 1000c08:	d0a000c3 	ldbu	r2,-32765(gp)
 1000c0c:	10803fcc 	andi	r2,r2,255
 1000c10:	1885c83a 	sub	r2,r3,r2
 1000c14:	e0bffb15 	stw	r2,-20(fp)
	//printf("head: %d\njump:%d\n",head,jump); OSTimeDly(1000);
	int i,j;
	int following=0;
 1000c18:	e03ff815 	stw	zero,-32(fp)
	for(i=0;i<cropSIZE;i++){
 1000c1c:	e03ffa15 	stw	zero,-24(fp)
 1000c20:	00002006 	br	1000ca4 <crop+0xf8>
		for(j=0;j<cropSIZE;j++){
 1000c24:	e03ff915 	stw	zero,-28(fp)
 1000c28:	00001306 	br	1000c78 <crop+0xcc>
			shared[following]=(unsigned char)shared[head];
 1000c2c:	e0bff817 	ldw	r2,-32(fp)
 1000c30:	1007883a 	mov	r3,r2
 1000c34:	e0bffd17 	ldw	r2,-12(fp)
 1000c38:	1889883a 	add	r4,r3,r2
 1000c3c:	e0bffc17 	ldw	r2,-16(fp)
 1000c40:	1007883a 	mov	r3,r2
 1000c44:	e0bffd17 	ldw	r2,-12(fp)
 1000c48:	1885883a 	add	r2,r3,r2
 1000c4c:	10800003 	ldbu	r2,0(r2)
 1000c50:	20800005 	stb	r2,0(r4)
			//printf("%d,", shared[head]);
			head++; following++;
 1000c54:	e0bffc17 	ldw	r2,-16(fp)
 1000c58:	10800044 	addi	r2,r2,1
 1000c5c:	e0bffc15 	stw	r2,-16(fp)
 1000c60:	e0bff817 	ldw	r2,-32(fp)
 1000c64:	10800044 	addi	r2,r2,1
 1000c68:	e0bff815 	stw	r2,-32(fp)
	jump=shared[0]-cropSIZE;
	//printf("head: %d\njump:%d\n",head,jump); OSTimeDly(1000);
	int i,j;
	int following=0;
	for(i=0;i<cropSIZE;i++){
		for(j=0;j<cropSIZE;j++){
 1000c6c:	e0bff917 	ldw	r2,-28(fp)
 1000c70:	10800044 	addi	r2,r2,1
 1000c74:	e0bff915 	stw	r2,-28(fp)
 1000c78:	d0a000c3 	ldbu	r2,-32765(gp)
 1000c7c:	10c03fcc 	andi	r3,r2,255
 1000c80:	e0bff917 	ldw	r2,-28(fp)
 1000c84:	10ffe916 	blt	r2,r3,1000c2c <crop+0x80>
			shared[following]=(unsigned char)shared[head];
			//printf("%d,", shared[head]);
			head++; following++;
		}
		//printf("\n");
		head+=jump;		//when we reach the border of the matrix we goes to the next line
 1000c88:	e0fffc17 	ldw	r3,-16(fp)
 1000c8c:	e0bffb17 	ldw	r2,-20(fp)
 1000c90:	1885883a 	add	r2,r3,r2
 1000c94:	e0bffc15 	stw	r2,-16(fp)
		//Jump defines the gap between values to skip to have a perfect cropping
	jump=shared[0]-cropSIZE;
	//printf("head: %d\njump:%d\n",head,jump); OSTimeDly(1000);
	int i,j;
	int following=0;
	for(i=0;i<cropSIZE;i++){
 1000c98:	e0bffa17 	ldw	r2,-24(fp)
 1000c9c:	10800044 	addi	r2,r2,1
 1000ca0:	e0bffa15 	stw	r2,-24(fp)
 1000ca4:	d0a000c3 	ldbu	r2,-32765(gp)
 1000ca8:	10c03fcc 	andi	r3,r2,255
 1000cac:	e0bffa17 	ldw	r2,-24(fp)
 1000cb0:	10ffdc16 	blt	r2,r3,1000c24 <crop+0x78>
		}
		//printf("\n");
		head+=jump;		//when we reach the border of the matrix we goes to the next line
	}
	//OSTimeDly(5000);
}
 1000cb4:	e037883a 	mov	sp,fp
 1000cb8:	dfc00117 	ldw	ra,4(sp)
 1000cbc:	df000017 	ldw	fp,0(sp)
 1000cc0:	dec00204 	addi	sp,sp,8
 1000cc4:	f800283a 	ret

01000cc8 <CropTask>:

void CropTask(void *pdata){
 1000cc8:	f811883a 	mov	r8,ra
 1000ccc:	100c3d80 	call	100c3d8 <_mcount>
 1000cd0:	403f883a 	mov	ra,r8
 1000cd4:	defffc04 	addi	sp,sp,-16
 1000cd8:	dfc00315 	stw	ra,12(sp)
 1000cdc:	df000215 	stw	fp,8(sp)
 1000ce0:	df000204 	addi	fp,sp,8
 1000ce4:	e13fff15 	stw	r4,-4(fp)

	OSSemPend(CropSem,0,&err);
 1000ce8:	d1174817 	ldw	r4,23840(gp)
 1000cec:	000b883a 	mov	r5,zero
 1000cf0:	d1974904 	addi	r6,gp,23844
 1000cf4:	1012d0c0 	call	1012d0c <OSSemPend>
	unsigned char* shared = (unsigned char)SHARED_ONCHIP_BASE;
 1000cf8:	e03ffe15 	stw	zero,-8(fp)
	while(1){

		crop(shared[FinalResultLocation],shared[FinalResultLocation+1]);
 1000cfc:	e0bffe17 	ldw	r2,-8(fp)
 1000d00:	108400c4 	addi	r2,r2,4099
 1000d04:	10800003 	ldbu	r2,0(r2)
 1000d08:	11003fcc 	andi	r4,r2,255
 1000d0c:	e0bffe17 	ldw	r2,-8(fp)
 1000d10:	10840104 	addi	r2,r2,4100
 1000d14:	10800003 	ldbu	r2,0(r2)
 1000d18:	11403fcc 	andi	r5,r2,255
 1000d1c:	1000bac0 	call	1000bac <crop>
		OSSemPost(xCorr2Sem);
 1000d20:	d1174717 	ldw	r4,23836(gp)
 1000d24:	101311c0 	call	101311c <OSSemPost>
		OSSemPend(CropSem,0,&err);
 1000d28:	d1174817 	ldw	r4,23840(gp)
 1000d2c:	000b883a 	mov	r5,zero
 1000d30:	d1974904 	addi	r6,gp,23844
 1000d34:	1012d0c0 	call	1012d0c <OSSemPend>
	}
 1000d38:	003ff006 	br	1000cfc <CropTask+0x34>

01000d3c <stencilmat>:
}


unsigned int stencilmat(int i, int j,unsigned int cropped_matrix[31][31]){ //x,y,mat
 1000d3c:	f811883a 	mov	r8,ra
 1000d40:	100c3d80 	call	100c3d8 <_mcount>
 1000d44:	403f883a 	mov	ra,r8
 1000d48:	defff904 	addi	sp,sp,-28
 1000d4c:	dfc00615 	stw	ra,24(sp)
 1000d50:	df000515 	stw	fp,20(sp)
 1000d54:	dc000415 	stw	r16,16(sp)
 1000d58:	df000404 	addi	fp,sp,16
 1000d5c:	e13ffd15 	stw	r4,-12(fp)
 1000d60:	e17ffe15 	stw	r5,-8(fp)
 1000d64:	e1bfff15 	stw	r6,-4(fp)
	unsigned int sum;
	sum=(cropped_matrix[j][i+2] + cropped_matrix[j+1][i+1] + cropped_matrix[j+1][i+3] + cropped_matrix[j+2][i] + cropped_matrix[j+2][i+4] + cropped_matrix[j+3][i+1] + cropped_matrix[j+3][i+3] + cropped_matrix[j+4][i+2]);
 1000d68:	e13ffe17 	ldw	r4,-8(fp)
 1000d6c:	01401f04 	movi	r5,124
 1000d70:	10026680 	call	1002668 <__mulsi3>
 1000d74:	1007883a 	mov	r3,r2
 1000d78:	e0bfff17 	ldw	r2,-4(fp)
 1000d7c:	1887883a 	add	r3,r3,r2
 1000d80:	e0bffd17 	ldw	r2,-12(fp)
 1000d84:	10800084 	addi	r2,r2,2
 1000d88:	1085883a 	add	r2,r2,r2
 1000d8c:	1085883a 	add	r2,r2,r2
 1000d90:	10c5883a 	add	r2,r2,r3
 1000d94:	14000017 	ldw	r16,0(r2)
 1000d98:	e13ffe17 	ldw	r4,-8(fp)
 1000d9c:	01401f04 	movi	r5,124
 1000da0:	10026680 	call	1002668 <__mulsi3>
 1000da4:	1007883a 	mov	r3,r2
 1000da8:	e0bfff17 	ldw	r2,-4(fp)
 1000dac:	1885883a 	add	r2,r3,r2
 1000db0:	10c01f04 	addi	r3,r2,124
 1000db4:	e0bffd17 	ldw	r2,-12(fp)
 1000db8:	10800044 	addi	r2,r2,1
 1000dbc:	1085883a 	add	r2,r2,r2
 1000dc0:	1085883a 	add	r2,r2,r2
 1000dc4:	10c5883a 	add	r2,r2,r3
 1000dc8:	10800017 	ldw	r2,0(r2)
 1000dcc:	80a1883a 	add	r16,r16,r2
 1000dd0:	e13ffe17 	ldw	r4,-8(fp)
 1000dd4:	01401f04 	movi	r5,124
 1000dd8:	10026680 	call	1002668 <__mulsi3>
 1000ddc:	1007883a 	mov	r3,r2
 1000de0:	e0bfff17 	ldw	r2,-4(fp)
 1000de4:	1885883a 	add	r2,r3,r2
 1000de8:	10c01f04 	addi	r3,r2,124
 1000dec:	e0bffd17 	ldw	r2,-12(fp)
 1000df0:	108000c4 	addi	r2,r2,3
 1000df4:	1085883a 	add	r2,r2,r2
 1000df8:	1085883a 	add	r2,r2,r2
 1000dfc:	10c5883a 	add	r2,r2,r3
 1000e00:	10800017 	ldw	r2,0(r2)
 1000e04:	80a1883a 	add	r16,r16,r2
 1000e08:	e13ffe17 	ldw	r4,-8(fp)
 1000e0c:	01401f04 	movi	r5,124
 1000e10:	10026680 	call	1002668 <__mulsi3>
 1000e14:	1007883a 	mov	r3,r2
 1000e18:	e0bfff17 	ldw	r2,-4(fp)
 1000e1c:	1885883a 	add	r2,r3,r2
 1000e20:	10c03e04 	addi	r3,r2,248
 1000e24:	e0bffd17 	ldw	r2,-12(fp)
 1000e28:	1085883a 	add	r2,r2,r2
 1000e2c:	1085883a 	add	r2,r2,r2
 1000e30:	10c5883a 	add	r2,r2,r3
 1000e34:	10800017 	ldw	r2,0(r2)
 1000e38:	80a1883a 	add	r16,r16,r2
 1000e3c:	e13ffe17 	ldw	r4,-8(fp)
 1000e40:	01401f04 	movi	r5,124
 1000e44:	10026680 	call	1002668 <__mulsi3>
 1000e48:	1007883a 	mov	r3,r2
 1000e4c:	e0bfff17 	ldw	r2,-4(fp)
 1000e50:	1885883a 	add	r2,r3,r2
 1000e54:	10c03e04 	addi	r3,r2,248
 1000e58:	e0bffd17 	ldw	r2,-12(fp)
 1000e5c:	10800104 	addi	r2,r2,4
 1000e60:	1085883a 	add	r2,r2,r2
 1000e64:	1085883a 	add	r2,r2,r2
 1000e68:	10c5883a 	add	r2,r2,r3
 1000e6c:	10800017 	ldw	r2,0(r2)
 1000e70:	80a1883a 	add	r16,r16,r2
 1000e74:	e13ffe17 	ldw	r4,-8(fp)
 1000e78:	01401f04 	movi	r5,124
 1000e7c:	10026680 	call	1002668 <__mulsi3>
 1000e80:	1007883a 	mov	r3,r2
 1000e84:	e0bfff17 	ldw	r2,-4(fp)
 1000e88:	1885883a 	add	r2,r3,r2
 1000e8c:	10c05d04 	addi	r3,r2,372
 1000e90:	e0bffd17 	ldw	r2,-12(fp)
 1000e94:	10800044 	addi	r2,r2,1
 1000e98:	1085883a 	add	r2,r2,r2
 1000e9c:	1085883a 	add	r2,r2,r2
 1000ea0:	10c5883a 	add	r2,r2,r3
 1000ea4:	10800017 	ldw	r2,0(r2)
 1000ea8:	80a1883a 	add	r16,r16,r2
 1000eac:	e13ffe17 	ldw	r4,-8(fp)
 1000eb0:	01401f04 	movi	r5,124
 1000eb4:	10026680 	call	1002668 <__mulsi3>
 1000eb8:	1007883a 	mov	r3,r2
 1000ebc:	e0bfff17 	ldw	r2,-4(fp)
 1000ec0:	1885883a 	add	r2,r3,r2
 1000ec4:	10c05d04 	addi	r3,r2,372
 1000ec8:	e0bffd17 	ldw	r2,-12(fp)
 1000ecc:	108000c4 	addi	r2,r2,3
 1000ed0:	1085883a 	add	r2,r2,r2
 1000ed4:	1085883a 	add	r2,r2,r2
 1000ed8:	10c5883a 	add	r2,r2,r3
 1000edc:	10800017 	ldw	r2,0(r2)
 1000ee0:	80a1883a 	add	r16,r16,r2
 1000ee4:	e13ffe17 	ldw	r4,-8(fp)
 1000ee8:	01401f04 	movi	r5,124
 1000eec:	10026680 	call	1002668 <__mulsi3>
 1000ef0:	1007883a 	mov	r3,r2
 1000ef4:	e0bfff17 	ldw	r2,-4(fp)
 1000ef8:	1885883a 	add	r2,r3,r2
 1000efc:	10c07c04 	addi	r3,r2,496
 1000f00:	e0bffd17 	ldw	r2,-12(fp)
 1000f04:	10800084 	addi	r2,r2,2
 1000f08:	1085883a 	add	r2,r2,r2
 1000f0c:	1085883a 	add	r2,r2,r2
 1000f10:	10c5883a 	add	r2,r2,r3
 1000f14:	10800017 	ldw	r2,0(r2)
 1000f18:	8085883a 	add	r2,r16,r2
 1000f1c:	e0bffc15 	stw	r2,-16(fp)

	return sum;
 1000f20:	e0bffc17 	ldw	r2,-16(fp)

}
 1000f24:	e037883a 	mov	sp,fp
 1000f28:	dfc00217 	ldw	ra,8(sp)
 1000f2c:	df000117 	ldw	fp,4(sp)
 1000f30:	dc000017 	ldw	r16,0(sp)
 1000f34:	dec00304 	addi	sp,sp,12
 1000f38:	f800283a 	ret

01000f3c <xCorr2>:

void xCorr2(){
 1000f3c:	f811883a 	mov	r8,ra
 1000f40:	100c3d80 	call	100c3d8 <_mcount>
 1000f44:	403f883a 	mov	ra,r8
 1000f48:	defc3704 	addi	sp,sp,-3876
 1000f4c:	dfc3c815 	stw	ra,3872(sp)
 1000f50:	df03c715 	stw	fp,3868(sp)
 1000f54:	dc43c615 	stw	r17,3864(sp)
 1000f58:	dc03c515 	stw	r16,3860(sp)
 1000f5c:	df03c504 	addi	fp,sp,3860

	int i,j;
	unsigned int matrix[31][31];
	unsigned char* shared = (unsigned char)SHARED_ONCHIP_BASE;
 1000f60:	e03c3c15 	stw	zero,-3856(fp)
	for(i=0;i<cropSIZE;i++){
 1000f64:	e03c3e15 	stw	zero,-3848(fp)
 1000f68:	00001d06 	br	1000fe0 <xCorr2+0xa4>
		for(j=0;j<cropSIZE;j++){
 1000f6c:	e03c3d15 	stw	zero,-3852(fp)
 1000f70:	00001406 	br	1000fc4 <xCorr2+0x88>
			matrix[i][j]=(unsigned int)*shared;
 1000f74:	e13c3e17 	ldw	r4,-3848(fp)
 1000f78:	e43c3d17 	ldw	r16,-3852(fp)
 1000f7c:	e0bc3c17 	ldw	r2,-3856(fp)
 1000f80:	10800003 	ldbu	r2,0(r2)
 1000f84:	14403fcc 	andi	r17,r2,255
 1000f88:	014007c4 	movi	r5,31
 1000f8c:	10026680 	call	1002668 <__mulsi3>
 1000f90:	1405883a 	add	r2,r2,r16
 1000f94:	1085883a 	add	r2,r2,r2
 1000f98:	1085883a 	add	r2,r2,r2
 1000f9c:	e0fc3b04 	addi	r3,fp,-3860
 1000fa0:	10c5883a 	add	r2,r2,r3
 1000fa4:	10800404 	addi	r2,r2,16
 1000fa8:	14400015 	stw	r17,0(r2)
			shared++;
 1000fac:	e0bc3c17 	ldw	r2,-3856(fp)
 1000fb0:	10800044 	addi	r2,r2,1
 1000fb4:	e0bc3c15 	stw	r2,-3856(fp)

	int i,j;
	unsigned int matrix[31][31];
	unsigned char* shared = (unsigned char)SHARED_ONCHIP_BASE;
	for(i=0;i<cropSIZE;i++){
		for(j=0;j<cropSIZE;j++){
 1000fb8:	e0bc3d17 	ldw	r2,-3852(fp)
 1000fbc:	10800044 	addi	r2,r2,1
 1000fc0:	e0bc3d15 	stw	r2,-3852(fp)
 1000fc4:	d0a000c3 	ldbu	r2,-32765(gp)
 1000fc8:	10c03fcc 	andi	r3,r2,255
 1000fcc:	e0bc3d17 	ldw	r2,-3852(fp)
 1000fd0:	10ffe816 	blt	r2,r3,1000f74 <xCorr2+0x38>
void xCorr2(){

	int i,j;
	unsigned int matrix[31][31];
	unsigned char* shared = (unsigned char)SHARED_ONCHIP_BASE;
	for(i=0;i<cropSIZE;i++){
 1000fd4:	e0bc3e17 	ldw	r2,-3848(fp)
 1000fd8:	10800044 	addi	r2,r2,1
 1000fdc:	e0bc3e15 	stw	r2,-3848(fp)
 1000fe0:	d0a000c3 	ldbu	r2,-32765(gp)
 1000fe4:	10c03fcc 	andi	r3,r2,255
 1000fe8:	e0bc3e17 	ldw	r2,-3848(fp)
 1000fec:	10ffdf16 	blt	r2,r3,1000f6c <xCorr2+0x30>
			shared++;

			}

	}
 	unsigned int* intshared = (unsigned int)SHARED_ONCHIP_BASE;
 1000ff0:	00800434 	movhi	r2,16
 1000ff4:	10880004 	addi	r2,r2,8192
 1000ff8:	e0bc3b15 	stw	r2,-3860(fp)
	for(i=0; i<cropSIZE-4;i++){
 1000ffc:	e03c3e15 	stw	zero,-3848(fp)
 1001000:	00001706 	br	1001060 <xCorr2+0x124>
		for(j=0; j<cropSIZE-4;j++){
 1001004:	e03c3d15 	stw	zero,-3852(fp)
 1001008:	00000d06 	br	1001040 <xCorr2+0x104>
			*intshared++= stencilmat(j,i,matrix);
 100100c:	e1bc3f04 	addi	r6,fp,-3844
 1001010:	e13c3d17 	ldw	r4,-3852(fp)
 1001014:	e17c3e17 	ldw	r5,-3848(fp)
 1001018:	1000d3c0 	call	1000d3c <stencilmat>
 100101c:	1007883a 	mov	r3,r2
 1001020:	e0bc3b17 	ldw	r2,-3860(fp)
 1001024:	10c00015 	stw	r3,0(r2)
 1001028:	e0bc3b17 	ldw	r2,-3860(fp)
 100102c:	10800104 	addi	r2,r2,4
 1001030:	e0bc3b15 	stw	r2,-3860(fp)
			}

	}
 	unsigned int* intshared = (unsigned int)SHARED_ONCHIP_BASE;
	for(i=0; i<cropSIZE-4;i++){
		for(j=0; j<cropSIZE-4;j++){
 1001034:	e0bc3d17 	ldw	r2,-3852(fp)
 1001038:	10800044 	addi	r2,r2,1
 100103c:	e0bc3d15 	stw	r2,-3852(fp)
 1001040:	d0a000c3 	ldbu	r2,-32765(gp)
 1001044:	10803fcc 	andi	r2,r2,255
 1001048:	10ffff04 	addi	r3,r2,-4
 100104c:	e0bc3d17 	ldw	r2,-3852(fp)
 1001050:	10ffee16 	blt	r2,r3,100100c <xCorr2+0xd0>

			}

	}
 	unsigned int* intshared = (unsigned int)SHARED_ONCHIP_BASE;
	for(i=0; i<cropSIZE-4;i++){
 1001054:	e0bc3e17 	ldw	r2,-3848(fp)
 1001058:	10800044 	addi	r2,r2,1
 100105c:	e0bc3e15 	stw	r2,-3848(fp)
 1001060:	d0a000c3 	ldbu	r2,-32765(gp)
 1001064:	10803fcc 	andi	r2,r2,255
 1001068:	10ffff04 	addi	r3,r2,-4
 100106c:	e0bc3e17 	ldw	r2,-3848(fp)
 1001070:	10ffe416 	blt	r2,r3,1001004 <xCorr2+0xc8>

		}

	}

}
 1001074:	e037883a 	mov	sp,fp
 1001078:	dfc00317 	ldw	ra,12(sp)
 100107c:	df000217 	ldw	fp,8(sp)
 1001080:	dc400117 	ldw	r17,4(sp)
 1001084:	dc000017 	ldw	r16,0(sp)
 1001088:	dec00404 	addi	sp,sp,16
 100108c:	f800283a 	ret

01001090 <xCorr2Task>:


void xCorr2Task(void *pdata){
 1001090:	f811883a 	mov	r8,ra
 1001094:	100c3d80 	call	100c3d8 <_mcount>
 1001098:	403f883a 	mov	ra,r8
 100109c:	defffd04 	addi	sp,sp,-12
 10010a0:	dfc00215 	stw	ra,8(sp)
 10010a4:	df000115 	stw	fp,4(sp)
 10010a8:	df000104 	addi	fp,sp,4
 10010ac:	e13fff15 	stw	r4,-4(fp)

		OSSemPend(xCorr2Sem,0,&err);
 10010b0:	d1174717 	ldw	r4,23836(gp)
 10010b4:	000b883a 	mov	r5,zero
 10010b8:	d1974904 	addi	r6,gp,23844
 10010bc:	1012d0c0 	call	1012d0c <OSSemPend>
		while(1){
			xCorr2();
 10010c0:	1000f3c0 	call	1000f3c <xCorr2>
			OSSemPost(PosMaxSem);
 10010c4:	d1174417 	ldw	r4,23824(gp)
 10010c8:	101311c0 	call	101311c <OSSemPost>
			OSSemPend(xCorr2Sem,0,&err);
 10010cc:	d1174717 	ldw	r4,23836(gp)
 10010d0:	000b883a 	mov	r5,zero
 10010d4:	d1974904 	addi	r6,gp,23844
 10010d8:	1012d0c0 	call	1012d0c <OSSemPend>
		}
 10010dc:	003ff806 	br	10010c0 <xCorr2Task+0x30>

010010e0 <posMax>:

}

void posMax(){
 10010e0:	f811883a 	mov	r8,ra
 10010e4:	100c3d80 	call	100c3d8 <_mcount>
 10010e8:	403f883a 	mov	ra,r8
 10010ec:	defd1d04 	addi	sp,sp,-2956
 10010f0:	dfc2e215 	stw	ra,2952(sp)
 10010f4:	df02e115 	stw	fp,2948(sp)
 10010f8:	dc42e015 	stw	r17,2944(sp)
 10010fc:	dc02df15 	stw	r16,2940(sp)
 1001100:	df02df04 	addi	fp,sp,2940
	unsigned int max=0;		//Variable used for the max
 1001104:	e03d2615 	stw	zero,-2920(fp)
	unsigned int maybemax;		//Variable that is a max of it's own matrix but not the biggest

	//The following finds the highest value between all the different matrix
	int i,j;
	unsigned int* shared = (unsigned int)SHARED_ONCHIP_BASE;
 1001108:	00800434 	movhi	r2,16
 100110c:	10880004 	addi	r2,r2,8192
 1001110:	e0bd2215 	stw	r2,-2936(fp)
	int matrix[27][27];
	for(i=0;i<cropSIZE-4;i++){
 1001114:	e03d2415 	stw	zero,-2928(fp)
 1001118:	00001e06 	br	1001194 <posMax+0xb4>
		for(j=0;j<cropSIZE-4;j++){
 100111c:	e03d2315 	stw	zero,-2932(fp)
 1001120:	00001406 	br	1001174 <posMax+0x94>
			matrix[i][j]=*shared++;
 1001124:	e13d2417 	ldw	r4,-2928(fp)
 1001128:	e43d2317 	ldw	r16,-2932(fp)
 100112c:	e0bd2217 	ldw	r2,-2936(fp)
 1001130:	10800017 	ldw	r2,0(r2)
 1001134:	1023883a 	mov	r17,r2
 1001138:	014006c4 	movi	r5,27
 100113c:	10026680 	call	1002668 <__mulsi3>
 1001140:	1405883a 	add	r2,r2,r16
 1001144:	1085883a 	add	r2,r2,r2
 1001148:	1085883a 	add	r2,r2,r2
 100114c:	e0fd2104 	addi	r3,fp,-2940
 1001150:	10c5883a 	add	r2,r2,r3
 1001154:	10800604 	addi	r2,r2,24
 1001158:	14400015 	stw	r17,0(r2)
 100115c:	e0bd2217 	ldw	r2,-2936(fp)
 1001160:	10800104 	addi	r2,r2,4
 1001164:	e0bd2215 	stw	r2,-2936(fp)
	//The following finds the highest value between all the different matrix
	int i,j;
	unsigned int* shared = (unsigned int)SHARED_ONCHIP_BASE;
	int matrix[27][27];
	for(i=0;i<cropSIZE-4;i++){
		for(j=0;j<cropSIZE-4;j++){
 1001168:	e0bd2317 	ldw	r2,-2932(fp)
 100116c:	10800044 	addi	r2,r2,1
 1001170:	e0bd2315 	stw	r2,-2932(fp)
 1001174:	d0a000c3 	ldbu	r2,-32765(gp)
 1001178:	10803fcc 	andi	r2,r2,255
 100117c:	10ffff04 	addi	r3,r2,-4
 1001180:	e0bd2317 	ldw	r2,-2932(fp)
 1001184:	10ffe716 	blt	r2,r3,1001124 <posMax+0x44>

	//The following finds the highest value between all the different matrix
	int i,j;
	unsigned int* shared = (unsigned int)SHARED_ONCHIP_BASE;
	int matrix[27][27];
	for(i=0;i<cropSIZE-4;i++){
 1001188:	e0bd2417 	ldw	r2,-2928(fp)
 100118c:	10800044 	addi	r2,r2,1
 1001190:	e0bd2415 	stw	r2,-2928(fp)
 1001194:	d0a000c3 	ldbu	r2,-32765(gp)
 1001198:	10803fcc 	andi	r2,r2,255
 100119c:	10ffff04 	addi	r3,r2,-4
 10011a0:	e0bd2417 	ldw	r2,-2928(fp)
 10011a4:	10ffdd16 	blt	r2,r3,100111c <posMax+0x3c>
		for(j=0;j<cropSIZE-4;j++){
			matrix[i][j]=*shared++;
			//shared++;
		}
	}
	unsigned char* charshared = (unsigned char)SHARED_ONCHIP_BASE;
 10011a8:	e03d2115 	stw	zero,-2940(fp)
	for(i=0; i<cropSIZE-4;i++){
 10011ac:	e03d2415 	stw	zero,-2928(fp)
 10011b0:	00002606 	br	100124c <posMax+0x16c>
		for(j=0; j<cropSIZE-4;j++){
 10011b4:	e03d2315 	stw	zero,-2932(fp)
 10011b8:	00001c06 	br	100122c <posMax+0x14c>
			maybemax=matrix[i][j];
 10011bc:	e13d2417 	ldw	r4,-2928(fp)
 10011c0:	e43d2317 	ldw	r16,-2932(fp)
 10011c4:	014006c4 	movi	r5,27
 10011c8:	10026680 	call	1002668 <__mulsi3>
 10011cc:	1405883a 	add	r2,r2,r16
 10011d0:	1085883a 	add	r2,r2,r2
 10011d4:	1085883a 	add	r2,r2,r2
 10011d8:	e0fd2104 	addi	r3,fp,-2940
 10011dc:	10c5883a 	add	r2,r2,r3
 10011e0:	10800604 	addi	r2,r2,24
 10011e4:	10800017 	ldw	r2,0(r2)
 10011e8:	e0bd2515 	stw	r2,-2924(fp)

			if(maybemax> max){
 10011ec:	e0fd2517 	ldw	r3,-2924(fp)
 10011f0:	e0bd2617 	ldw	r2,-2920(fp)
 10011f4:	10c00a2e 	bgeu	r2,r3,1001220 <posMax+0x140>
				 max=maybemax;
 10011f8:	e0bd2517 	ldw	r2,-2924(fp)
 10011fc:	e0bd2615 	stw	r2,-2920(fp)
				 charshared[ObjectLocation]=j;
 1001200:	e0bd2117 	ldw	r2,-2940(fp)
 1001204:	10c40144 	addi	r3,r2,4101
 1001208:	e0bd2317 	ldw	r2,-2932(fp)
 100120c:	18800005 	stb	r2,0(r3)
				 charshared[ObjectLocation+1]=i;
 1001210:	e0bd2117 	ldw	r2,-2940(fp)
 1001214:	10c40184 	addi	r3,r2,4102
 1001218:	e0bd2417 	ldw	r2,-2928(fp)
 100121c:	18800005 	stb	r2,0(r3)
			//shared++;
		}
	}
	unsigned char* charshared = (unsigned char)SHARED_ONCHIP_BASE;
	for(i=0; i<cropSIZE-4;i++){
		for(j=0; j<cropSIZE-4;j++){
 1001220:	e0bd2317 	ldw	r2,-2932(fp)
 1001224:	10800044 	addi	r2,r2,1
 1001228:	e0bd2315 	stw	r2,-2932(fp)
 100122c:	d0a000c3 	ldbu	r2,-32765(gp)
 1001230:	10803fcc 	andi	r2,r2,255
 1001234:	10ffff04 	addi	r3,r2,-4
 1001238:	e0bd2317 	ldw	r2,-2932(fp)
 100123c:	10ffdf16 	blt	r2,r3,10011bc <posMax+0xdc>
			matrix[i][j]=*shared++;
			//shared++;
		}
	}
	unsigned char* charshared = (unsigned char)SHARED_ONCHIP_BASE;
	for(i=0; i<cropSIZE-4;i++){
 1001240:	e0bd2417 	ldw	r2,-2928(fp)
 1001244:	10800044 	addi	r2,r2,1
 1001248:	e0bd2415 	stw	r2,-2928(fp)
 100124c:	d0a000c3 	ldbu	r2,-32765(gp)
 1001250:	10803fcc 	andi	r2,r2,255
 1001254:	10ffff04 	addi	r3,r2,-4
 1001258:	e0bd2417 	ldw	r2,-2928(fp)
 100125c:	10ffd516 	blt	r2,r3,10011b4 <posMax+0xd4>
			}
		}

	}
	if(DEBUG){printf("\nCROPPED OUTPUT\n");printAsciiHidden(charshared,cropSIZE-4,cropSIZE-4,charshared[ObjectLocation],charshared[ObjectLocation+1],3,max); OSTimeDly(3000);}
}
 1001260:	e037883a 	mov	sp,fp
 1001264:	dfc00317 	ldw	ra,12(sp)
 1001268:	df000217 	ldw	fp,8(sp)
 100126c:	dc400117 	ldw	r17,4(sp)
 1001270:	dc000017 	ldw	r16,0(sp)
 1001274:	dec00404 	addi	sp,sp,16
 1001278:	f800283a 	ret

0100127c <PosMaxTask>:


void PosMaxTask(void *pdata){
 100127c:	f811883a 	mov	r8,ra
 1001280:	100c3d80 	call	100c3d8 <_mcount>
 1001284:	403f883a 	mov	ra,r8
 1001288:	defffd04 	addi	sp,sp,-12
 100128c:	dfc00215 	stw	ra,8(sp)
 1001290:	df000115 	stw	fp,4(sp)
 1001294:	df000104 	addi	fp,sp,4
 1001298:	e13fff15 	stw	r4,-4(fp)
	OSSemPend(PosMaxSem,0,&err);
 100129c:	d1174417 	ldw	r4,23824(gp)
 10012a0:	000b883a 	mov	r5,zero
 10012a4:	d1974904 	addi	r6,gp,23844
 10012a8:	1012d0c0 	call	1012d0c <OSSemPend>
	while(1){
	posMax();
 10012ac:	10010e00 	call	10010e0 <posMax>
	OSSemPost(objectPosSem);
 10012b0:	d1174617 	ldw	r4,23832(gp)
 10012b4:	101311c0 	call	101311c <OSSemPost>
	OSSemPend(PosMaxSem,0,&err);
 10012b8:	d1174417 	ldw	r4,23824(gp)
 10012bc:	000b883a 	mov	r5,zero
 10012c0:	d1974904 	addi	r6,gp,23844
 10012c4:	1012d0c0 	call	1012d0c <OSSemPend>
	}
 10012c8:	003ff806 	br	10012ac <PosMaxTask+0x30>

010012cc <objectPos>:
}

void objectPos(){
 10012cc:	f811883a 	mov	r8,ra
 10012d0:	100c3d80 	call	100c3d8 <_mcount>
 10012d4:	403f883a 	mov	ra,r8
 10012d8:	defffe04 	addi	sp,sp,-8
 10012dc:	df000115 	stw	fp,4(sp)
 10012e0:	df000104 	addi	fp,sp,4
	unsigned char* shared = (unsigned char)SHARED_ONCHIP_BASE;
 10012e4:	e03fff15 	stw	zero,-4(fp)
	//Equation given by the haskell code
	shared[FinalResultLocation]= shared[FinalResultLocation]+shared[ObjectLocation]+2;
 10012e8:	e0bfff17 	ldw	r2,-4(fp)
 10012ec:	110400c4 	addi	r4,r2,4099
 10012f0:	e0bfff17 	ldw	r2,-4(fp)
 10012f4:	108400c4 	addi	r2,r2,4099
 10012f8:	10c00003 	ldbu	r3,0(r2)
 10012fc:	e0bfff17 	ldw	r2,-4(fp)
 1001300:	10840144 	addi	r2,r2,4101
 1001304:	10800003 	ldbu	r2,0(r2)
 1001308:	1885883a 	add	r2,r3,r2
 100130c:	10800084 	addi	r2,r2,2
 1001310:	20800005 	stb	r2,0(r4)
	shared[FinalResultLocation+1]= shared[FinalResultLocation+1]+shared[ObjectLocation+1]+2;
 1001314:	e0bfff17 	ldw	r2,-4(fp)
 1001318:	11040104 	addi	r4,r2,4100
 100131c:	e0bfff17 	ldw	r2,-4(fp)
 1001320:	10840104 	addi	r2,r2,4100
 1001324:	10c00003 	ldbu	r3,0(r2)
 1001328:	e0bfff17 	ldw	r2,-4(fp)
 100132c:	10840184 	addi	r2,r2,4102
 1001330:	10800003 	ldbu	r2,0(r2)
 1001334:	1885883a 	add	r2,r3,r2
 1001338:	10800084 	addi	r2,r2,2
 100133c:	20800005 	stb	r2,0(r4)
	if(!PERFORMANCE) printf("\n[%d,%d]\n", shared[FinalResultLocation], shared[FinalResultLocation+1]);

}
 1001340:	e037883a 	mov	sp,fp
 1001344:	df000017 	ldw	fp,0(sp)
 1001348:	dec00104 	addi	sp,sp,4
 100134c:	f800283a 	ret

01001350 <ObjectPosTask>:

void ObjectPosTask(void *pdata){
 1001350:	f811883a 	mov	r8,ra
 1001354:	100c3d80 	call	100c3d8 <_mcount>
 1001358:	403f883a 	mov	ra,r8
 100135c:	defffd04 	addi	sp,sp,-12
 1001360:	dfc00215 	stw	ra,8(sp)
 1001364:	df000115 	stw	fp,4(sp)
 1001368:	df000104 	addi	fp,sp,4
 100136c:	e13fff15 	stw	r4,-4(fp)

	OSSemPend(objectPosSem,0,&err);
 1001370:	d1174617 	ldw	r4,23832(gp)
 1001374:	000b883a 	mov	r5,zero
 1001378:	d1974904 	addi	r6,gp,23844
 100137c:	1012d0c0 	call	1012d0c <OSSemPend>
	while(1){
		objectPos();
 1001380:	10012cc0 	call	10012cc <objectPos>
		current_image++;
 1001384:	d0974217 	ldw	r2,23816(gp)
 1001388:	10800044 	addi	r2,r2,1
 100138c:	d0974215 	stw	r2,23816(gp)
		if(PERFORMANCE){
			 current_image%=sequence_length;
 1001390:	d1174217 	ldw	r4,23816(gp)
 1001394:	d0a00043 	ldbu	r2,-32767(gp)
 1001398:	11403fcc 	andi	r5,r2,255
 100139c:	2940201c 	xori	r5,r5,128
 10013a0:	297fe004 	addi	r5,r5,-128
 10013a4:	10025d40 	call	10025d4 <__modsi3>
 10013a8:	d0974215 	stw	r2,23816(gp)
			 if(counter==0)PERF_END(PERFORMANCE_COUNTER_0_BASE, SECTION_2);
 10013ac:	d0974317 	ldw	r2,23820(gp)
 10013b0:	1004c03a 	cmpne	r2,r2,zero
 10013b4:	1000031e 	bne	r2,zero,10013c4 <ObjectPosTask+0x74>
 10013b8:	00800434 	movhi	r2,16
 10013bc:	10940804 	addi	r2,r2,20512
 10013c0:	10000035 	stwio	zero,0(r2)
			ALT_CPU_FREQ,        // defined in "system.h"
			1,                   // How many sections to print
			"Section 1"        // Display-name of section(s).
			);
		}
		OSSemPost(GrayedSem);
 10013c4:	d1174c17 	ldw	r4,23856(gp)
 10013c8:	101311c0 	call	101311c <OSSemPost>
		OSSemPend(objectPosSem,0,&err);
 10013cc:	d1174617 	ldw	r4,23832(gp)
 10013d0:	000b883a 	mov	r5,zero
 10013d4:	d1974904 	addi	r6,gp,23844
 10013d8:	1012d0c0 	call	1012d0c <OSSemPend>
	}
 10013dc:	003fe806 	br	1001380 <ObjectPosTask+0x30>

010013e0 <StartTask>:
}


void StartTask(void* pdata)
{
 10013e0:	f811883a 	mov	r8,ra
 10013e4:	100c3d80 	call	100c3d8 <_mcount>
 10013e8:	403f883a 	mov	ra,r8
 10013ec:	defff704 	addi	sp,sp,-36
 10013f0:	dfc00815 	stw	ra,32(sp)
 10013f4:	df000715 	stw	fp,28(sp)
 10013f8:	df000704 	addi	fp,sp,28
 10013fc:	e13fff15 	stw	r4,-4(fp)

  void* context=0;
 1001400:	e03ffe15 	stw	zero,-8(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 1001404:	008040f4 	movhi	r2,259
 1001408:	10975f04 	addi	r2,r2,23932
 100140c:	10800017 	ldw	r2,0(r2)
 1001410:	1009883a 	mov	r4,r2

  static alt_alarm alarm;     /* Is needed for timer ISR function */

  /* Base resolution for SW timer : HW_TIMER_PERIOD ms */
  delay = alt_ticks_per_second() * HW_TIMER_PERIOD / 1000;
 1001414:	01401904 	movi	r5,100
 1001418:	10026680 	call	1002668 <__mulsi3>
 100141c:	1009883a 	mov	r4,r2
 1001420:	0140fa04 	movi	r5,1000
 1001424:	10026400 	call	1002640 <__udivsi3>
 1001428:	d0974a15 	stw	r2,23848(gp)
  printf("delay in ticks %d\n", delay);
 100142c:	d1574a17 	ldw	r5,23848(gp)
 1001430:	010040b4 	movhi	r4,258
 1001434:	21278904 	addi	r4,r4,-25052
 1001438:	1002ccc0 	call	1002ccc <printf>

  /*
   * Create Hardware Timer with a period of 'delay'
   */
  if (alt_alarm_start (&alarm,
 100143c:	d0974a17 	ldw	r2,23848(gp)
 1001440:	100b883a 	mov	r5,r2
 1001444:	010040f4 	movhi	r4,259
 1001448:	21178604 	addi	r4,r4,24088
 100144c:	01804034 	movhi	r6,256
 1001450:	31813104 	addi	r6,r6,1220
 1001454:	e1fffe17 	ldw	r7,-8(fp)
 1001458:	100baf80 	call	100baf8 <alt_alarm_start>
 100145c:	1004403a 	cmpge	r2,r2,zero
 1001460:	1000031e 	bne	r2,zero,1001470 <StartTask+0x90>
      delay,
      alarm_handler,
      context) < 0)
      {
          printf("No system clock available!n");
 1001464:	010040b4 	movhi	r4,258
 1001468:	21278e04 	addi	r4,r4,-25032
 100146c:	1002ccc0 	call	1002ccc <printf>
      }

   /*
   * Creation of Kernel Objects
   */
  Task1Sem = OSSemCreate(1);
 1001470:	01000044 	movi	r4,1
 1001474:	10129400 	call	1012940 <OSSemCreate>
 1001478:	d0974d15 	stw	r2,23860(gp)
  GrayedSem= OSSemCreate(0);
 100147c:	0009883a 	mov	r4,zero
 1001480:	10129400 	call	1012940 <OSSemCreate>
 1001484:	d0974c15 	stw	r2,23856(gp)
  CalcCoordSem= OSSemCreate(0);
 1001488:	0009883a 	mov	r4,zero
 100148c:	10129400 	call	1012940 <OSSemCreate>
 1001490:	d0974515 	stw	r2,23828(gp)
  CropSem= OSSemCreate(0);
 1001494:	0009883a 	mov	r4,zero
 1001498:	10129400 	call	1012940 <OSSemCreate>
 100149c:	d0974815 	stw	r2,23840(gp)
  xCorr2Sem = OSSemCreate(0);
 10014a0:	0009883a 	mov	r4,zero
 10014a4:	10129400 	call	1012940 <OSSemCreate>
 10014a8:	d0974715 	stw	r2,23836(gp)
  PosMaxSem = OSSemCreate(0);
 10014ac:	0009883a 	mov	r4,zero
 10014b0:	10129400 	call	1012940 <OSSemCreate>
 10014b4:	d0974415 	stw	r2,23824(gp)
  objectPosSem = OSSemCreate(0);
 10014b8:	0009883a 	mov	r4,zero
 10014bc:	10129400 	call	1012940 <OSSemCreate>
 10014c0:	d0974615 	stw	r2,23832(gp)
  /*
   * Create statistics task
   */

  OSStatInit();
 10014c4:	100db040 	call	100db04 <OSStatInit>
  /*
   * Creating Tasks in the system
   */


	err=OSTaskCreateExt(CalcCoordTask,
 10014c8:	01804134 	movhi	r6,260
 10014cc:	31979b04 	addi	r6,r6,24172
 10014d0:	008002c4 	movi	r2,11
 10014d4:	d8800015 	stw	r2,0(sp)
 10014d8:	00804134 	movhi	r2,260
 10014dc:	108f9c04 	addi	r2,r2,15984
 10014e0:	d8800115 	stw	r2,4(sp)
 10014e4:	00820004 	movi	r2,2048
 10014e8:	d8800215 	stw	r2,8(sp)
 10014ec:	d8000315 	stw	zero,12(sp)
 10014f0:	d8000415 	stw	zero,16(sp)
 10014f4:	01004034 	movhi	r4,256
 10014f8:	2102cb04 	addi	r4,r4,2860
 10014fc:	000b883a 	mov	r5,zero
 1001500:	01c002c4 	movi	r7,11
 1001504:	1013bfc0 	call	1013bfc <OSTaskCreateExt>
 1001508:	d0974905 	stb	r2,23844(gp)
	 if (DEBUG) {
     if (err == OS_ERR_NONE) { //if start successful
      printf("CalcCoordTask created\n");
    }}

	err=OSTaskCreateExt(xCorr2Task,
 100150c:	01804134 	movhi	r6,260
 1001510:	31a79b04 	addi	r6,r6,-24980
 1001514:	00800344 	movi	r2,13
 1001518:	d8800015 	stw	r2,0(sp)
 100151c:	008040f4 	movhi	r2,259
 1001520:	109f9c04 	addi	r2,r2,32368
 1001524:	d8800115 	stw	r2,4(sp)
 1001528:	00820004 	movi	r2,2048
 100152c:	d8800215 	stw	r2,8(sp)
 1001530:	d8000315 	stw	zero,12(sp)
 1001534:	d8000415 	stw	zero,16(sp)
 1001538:	01004034 	movhi	r4,256
 100153c:	21042404 	addi	r4,r4,4240
 1001540:	000b883a 	mov	r5,zero
 1001544:	01c00344 	movi	r7,13
 1001548:	1013bfc0 	call	1013bfc <OSTaskCreateExt>
 100154c:	d0974905 	stb	r2,23844(gp)
	 if (DEBUG) {
     if (err == OS_ERR_NONE) { //if start successful
      printf("xCorr2Task created\n");
    }}

	err=OSTaskCreateExt(CropTask,
 1001550:	01804134 	movhi	r6,260
 1001554:	31b79b04 	addi	r6,r6,-8596
 1001558:	00800304 	movi	r2,12
 100155c:	d8800015 	stw	r2,0(sp)
 1001560:	00804134 	movhi	r2,260
 1001564:	10af9c04 	addi	r2,r2,-16784
 1001568:	d8800115 	stw	r2,4(sp)
 100156c:	00820004 	movi	r2,2048
 1001570:	d8800215 	stw	r2,8(sp)
 1001574:	d8000315 	stw	zero,12(sp)
 1001578:	d8000415 	stw	zero,16(sp)
 100157c:	01004034 	movhi	r4,256
 1001580:	21033204 	addi	r4,r4,3272
 1001584:	000b883a 	mov	r5,zero
 1001588:	01c00304 	movi	r7,12
 100158c:	1013bfc0 	call	1013bfc <OSTaskCreateExt>
 1001590:	d0974905 	stb	r2,23844(gp)
		 if (err == OS_ERR_NONE) { //if start successful
		  printf("CropTask created\n");
   		 }
	}

	err=OSTaskCreateExt(PosMaxTask,
 1001594:	01804134 	movhi	r6,260
 1001598:	318f9b04 	addi	r6,r6,15980
 100159c:	00800384 	movi	r2,14
 10015a0:	d8800015 	stw	r2,0(sp)
 10015a4:	00804134 	movhi	r2,260
 10015a8:	10879c04 	addi	r2,r2,7792
 10015ac:	d8800115 	stw	r2,4(sp)
 10015b0:	00820004 	movi	r2,2048
 10015b4:	d8800215 	stw	r2,8(sp)
 10015b8:	d8000315 	stw	zero,12(sp)
 10015bc:	d8000415 	stw	zero,16(sp)
 10015c0:	01004034 	movhi	r4,256
 10015c4:	21049f04 	addi	r4,r4,4732
 10015c8:	000b883a 	mov	r5,zero
 10015cc:	01c00384 	movi	r7,14
 10015d0:	1013bfc0 	call	1013bfc <OSTaskCreateExt>
 10015d4:	d0974905 	stb	r2,23844(gp)
     if (err == OS_ERR_NONE) { //if start successful
      printf("PosMaxTask created\n");
    }else printf("\n%d\n",err);}


	err=OSTaskCreateExt(GrayTask,
 10015d8:	01804134 	movhi	r6,260
 10015dc:	31af9b04 	addi	r6,r6,-16788
 10015e0:	00800284 	movi	r2,10
 10015e4:	d8800015 	stw	r2,0(sp)
 10015e8:	00804134 	movhi	r2,260
 10015ec:	10a79c04 	addi	r2,r2,-24976
 10015f0:	d8800115 	stw	r2,4(sp)
 10015f4:	00820004 	movi	r2,2048
 10015f8:	d8800215 	stw	r2,8(sp)
 10015fc:	d8000315 	stw	zero,12(sp)
 1001600:	d8000415 	stw	zero,16(sp)
 1001604:	01004034 	movhi	r4,256
 1001608:	2101f604 	addi	r4,r4,2008
 100160c:	000b883a 	mov	r5,zero
 1001610:	01c00284 	movi	r7,10
 1001614:	1013bfc0 	call	1013bfc <OSTaskCreateExt>
 1001618:	d0974905 	stb	r2,23844(gp)

	 if (DEBUG) {
     if (err == OS_ERR_NONE) { //if start successful
      printf("GrayTask created\n");
    }}
	err=OSTaskCreateExt(ObjectPosTask,
 100161c:	01804134 	movhi	r6,260
 1001620:	31879b04 	addi	r6,r6,7788
 1001624:	008003c4 	movi	r2,15
 1001628:	d8800015 	stw	r2,0(sp)
 100162c:	00804134 	movhi	r2,260
 1001630:	10bf9c04 	addi	r2,r2,-400
 1001634:	d8800115 	stw	r2,4(sp)
 1001638:	00820004 	movi	r2,2048
 100163c:	d8800215 	stw	r2,8(sp)
 1001640:	d8000315 	stw	zero,12(sp)
 1001644:	d8000415 	stw	zero,16(sp)
 1001648:	01004034 	movhi	r4,256
 100164c:	2104d404 	addi	r4,r4,4944
 1001650:	000b883a 	mov	r5,zero
 1001654:	01c003c4 	movi	r7,15
 1001658:	1013bfc0 	call	1013bfc <OSTaskCreateExt>
 100165c:	d0974905 	stb	r2,23844(gp)
	 if (DEBUG) {
     if (err == OS_ERR_NONE) { //if start successful
      printf("ObjectPosTask created\n");
    }}

  printf("All Tasks and Kernel Objects generated!\n");
 1001660:	010040b4 	movhi	r4,258
 1001664:	21279504 	addi	r4,r4,-25004
 1001668:	1002e440 	call	1002e44 <puts>

  /* Task deletes itself */

  OSTaskDel(OS_PRIO_SELF);
 100166c:	01003fc4 	movi	r4,255
 1001670:	1013e080 	call	1013e08 <OSTaskDel>
}
 1001674:	e037883a 	mov	sp,fp
 1001678:	dfc00117 	ldw	ra,4(sp)
 100167c:	df000017 	ldw	fp,0(sp)
 1001680:	dec00204 	addi	sp,sp,8
 1001684:	f800283a 	ret

01001688 <main>:


int main(void) {
 1001688:	f811883a 	mov	r8,ra
 100168c:	100c3d80 	call	100c3d8 <_mcount>
 1001690:	403f883a 	mov	ra,r8
 1001694:	defff904 	addi	sp,sp,-28
 1001698:	dfc00615 	stw	ra,24(sp)
 100169c:	df000515 	stw	fp,20(sp)
 10016a0:	df000504 	addi	fp,sp,20

  printf("MicroC/OS-II-Vesion: %1.2f\n", (double) OSVersion()/100.0);
 10016a4:	100de080 	call	100de08 <OSVersion>
 10016a8:	113fffcc 	andi	r4,r2,65535
 10016ac:	10023400 	call	1002340 <__floatunsidf>
 10016b0:	100b883a 	mov	r5,r2
 10016b4:	180d883a 	mov	r6,r3
 10016b8:	2809883a 	mov	r4,r5
 10016bc:	300b883a 	mov	r5,r6
 10016c0:	000d883a 	mov	r6,zero
 10016c4:	01d01674 	movhi	r7,16473
 10016c8:	10020dc0 	call	10020dc <__divdf3>
 10016cc:	1009883a 	mov	r4,r2
 10016d0:	180b883a 	mov	r5,r3
 10016d4:	2005883a 	mov	r2,r4
 10016d8:	2807883a 	mov	r3,r5
 10016dc:	010040b4 	movhi	r4,258
 10016e0:	21279f04 	addi	r4,r4,-24964
 10016e4:	100b883a 	mov	r5,r2
 10016e8:	180d883a 	mov	r6,r3
 10016ec:	1002ccc0 	call	1002ccc <printf>

  OSTaskCreateExt(
 10016f0:	01804134 	movhi	r6,260
 10016f4:	31bf9b04 	addi	r6,r6,-404
 10016f8:	00800044 	movi	r2,1
 10016fc:	d8800015 	stw	r2,0(sp)
 1001700:	00804134 	movhi	r2,260
 1001704:	10b79c04 	addi	r2,r2,-8592
 1001708:	d8800115 	stw	r2,4(sp)
 100170c:	00820004 	movi	r2,2048
 1001710:	d8800215 	stw	r2,8(sp)
 1001714:	d8000315 	stw	zero,12(sp)
 1001718:	008000c4 	movi	r2,3
 100171c:	d8800415 	stw	r2,16(sp)
 1001720:	01004034 	movhi	r4,256
 1001724:	2104f804 	addi	r4,r4,5088
 1001728:	000b883a 	mov	r5,zero
 100172c:	01c00044 	movi	r7,1
 1001730:	1013bfc0 	call	1013bfc <OSTaskCreateExt>
         (void *)&StartTask_Stack[0],
         TASK_STACKSIZE,
         (void *) 0,
         OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);

  OSStart();
 1001734:	100da880 	call	100da88 <OSStart>

  return 0;
 1001738:	0005883a 	mov	r2,zero
}
 100173c:	e037883a 	mov	sp,fp
 1001740:	dfc00117 	ldw	ra,4(sp)
 1001744:	df000017 	ldw	fp,0(sp)
 1001748:	dec00204 	addi	sp,sp,8
 100174c:	f800283a 	ret

01001750 <__floatundidf>:
 1001750:	f811883a 	mov	r8,ra
 1001754:	100c3d80 	call	100c3d8 <_mcount>
 1001758:	403f883a 	mov	ra,r8
 100175c:	defffb04 	addi	sp,sp,-20
 1001760:	dfc00415 	stw	ra,16(sp)
 1001764:	dcc00315 	stw	r19,12(sp)
 1001768:	dc800215 	stw	r18,8(sp)
 100176c:	dc400115 	stw	r17,4(sp)
 1001770:	dc000015 	stw	r16,0(sp)
 1001774:	2025883a 	mov	r18,r4
 1001778:	2809883a 	mov	r4,r5
 100177c:	10023400 	call	1002340 <__floatunsidf>
 1001780:	100d883a 	mov	r6,r2
 1001784:	180f883a 	mov	r7,r3
 1001788:	0005883a 	mov	r2,zero
 100178c:	00d07c34 	movhi	r3,16880
 1001790:	380b883a 	mov	r5,r7
 1001794:	3009883a 	mov	r4,r6
 1001798:	180f883a 	mov	r7,r3
 100179c:	100d883a 	mov	r6,r2
 10017a0:	1001d0c0 	call	1001d0c <__muldf3>
 10017a4:	9009883a 	mov	r4,r18
 10017a8:	1021883a 	mov	r16,r2
 10017ac:	1823883a 	mov	r17,r3
 10017b0:	10023400 	call	1002340 <__floatunsidf>
 10017b4:	880b883a 	mov	r5,r17
 10017b8:	8009883a 	mov	r4,r16
 10017bc:	180f883a 	mov	r7,r3
 10017c0:	100d883a 	mov	r6,r2
 10017c4:	1001c8c0 	call	1001c8c <__adddf3>
 10017c8:	dfc00417 	ldw	ra,16(sp)
 10017cc:	dcc00317 	ldw	r19,12(sp)
 10017d0:	dc800217 	ldw	r18,8(sp)
 10017d4:	dc400117 	ldw	r17,4(sp)
 10017d8:	dc000017 	ldw	r16,0(sp)
 10017dc:	dec00504 	addi	sp,sp,20
 10017e0:	f800283a 	ret

010017e4 <_fpadd_parts>:
 10017e4:	f811883a 	mov	r8,ra
 10017e8:	100c3d80 	call	100c3d8 <_mcount>
 10017ec:	403f883a 	mov	ra,r8
 10017f0:	defff804 	addi	sp,sp,-32
 10017f4:	ddc00715 	stw	r23,28(sp)
 10017f8:	dd800615 	stw	r22,24(sp)
 10017fc:	dd400515 	stw	r21,20(sp)
 1001800:	dd000415 	stw	r20,16(sp)
 1001804:	dcc00315 	stw	r19,12(sp)
 1001808:	dc800215 	stw	r18,8(sp)
 100180c:	dc400115 	stw	r17,4(sp)
 1001810:	dc000015 	stw	r16,0(sp)
 1001814:	2027883a 	mov	r19,r4
 1001818:	21000017 	ldw	r4,0(r4)
 100181c:	00c00044 	movi	r3,1
 1001820:	282b883a 	mov	r21,r5
 1001824:	3029883a 	mov	r20,r6
 1001828:	1900632e 	bgeu	r3,r4,10019b8 <_fpadd_parts+0x1d4>
 100182c:	28800017 	ldw	r2,0(r5)
 1001830:	1880812e 	bgeu	r3,r2,1001a38 <_fpadd_parts+0x254>
 1001834:	00c00104 	movi	r3,4
 1001838:	20c0dc26 	beq	r4,r3,1001bac <_fpadd_parts+0x3c8>
 100183c:	10c07e26 	beq	r2,r3,1001a38 <_fpadd_parts+0x254>
 1001840:	00c00084 	movi	r3,2
 1001844:	10c06726 	beq	r2,r3,10019e4 <_fpadd_parts+0x200>
 1001848:	20c07b26 	beq	r4,r3,1001a38 <_fpadd_parts+0x254>
 100184c:	9dc00217 	ldw	r23,8(r19)
 1001850:	28c00217 	ldw	r3,8(r5)
 1001854:	9c400317 	ldw	r17,12(r19)
 1001858:	2bc00317 	ldw	r15,12(r5)
 100185c:	b8cdc83a 	sub	r6,r23,r3
 1001860:	9c800417 	ldw	r18,16(r19)
 1001864:	2c000417 	ldw	r16,16(r5)
 1001868:	3009883a 	mov	r4,r6
 100186c:	30009716 	blt	r6,zero,1001acc <_fpadd_parts+0x2e8>
 1001870:	00800fc4 	movi	r2,63
 1001874:	11806b16 	blt	r2,r6,1001a24 <_fpadd_parts+0x240>
 1001878:	0100a40e 	bge	zero,r4,1001b0c <_fpadd_parts+0x328>
 100187c:	35bff804 	addi	r22,r6,-32
 1001880:	b000bc16 	blt	r22,zero,1001b74 <_fpadd_parts+0x390>
 1001884:	8596d83a 	srl	r11,r16,r22
 1001888:	0019883a 	mov	r12,zero
 100188c:	0013883a 	mov	r9,zero
 1001890:	01000044 	movi	r4,1
 1001894:	0015883a 	mov	r10,zero
 1001898:	b000be16 	blt	r22,zero,1001b94 <_fpadd_parts+0x3b0>
 100189c:	2590983a 	sll	r8,r4,r22
 10018a0:	000f883a 	mov	r7,zero
 10018a4:	00bfffc4 	movi	r2,-1
 10018a8:	3889883a 	add	r4,r7,r2
 10018ac:	408b883a 	add	r5,r8,r2
 10018b0:	21cd803a 	cmpltu	r6,r4,r7
 10018b4:	314b883a 	add	r5,r6,r5
 10018b8:	7904703a 	and	r2,r15,r4
 10018bc:	8146703a 	and	r3,r16,r5
 10018c0:	10c4b03a 	or	r2,r2,r3
 10018c4:	10000226 	beq	r2,zero,10018d0 <_fpadd_parts+0xec>
 10018c8:	02400044 	movi	r9,1
 10018cc:	0015883a 	mov	r10,zero
 10018d0:	5a5eb03a 	or	r15,r11,r9
 10018d4:	62a0b03a 	or	r16,r12,r10
 10018d8:	99400117 	ldw	r5,4(r19)
 10018dc:	a8800117 	ldw	r2,4(r21)
 10018e0:	28806e26 	beq	r5,r2,1001a9c <_fpadd_parts+0x2b8>
 10018e4:	28006626 	beq	r5,zero,1001a80 <_fpadd_parts+0x29c>
 10018e8:	7c45c83a 	sub	r2,r15,r17
 10018ec:	7889803a 	cmpltu	r4,r15,r2
 10018f0:	8487c83a 	sub	r3,r16,r18
 10018f4:	1909c83a 	sub	r4,r3,r4
 10018f8:	100d883a 	mov	r6,r2
 10018fc:	200f883a 	mov	r7,r4
 1001900:	38007716 	blt	r7,zero,1001ae0 <_fpadd_parts+0x2fc>
 1001904:	a5c00215 	stw	r23,8(r20)
 1001908:	a1c00415 	stw	r7,16(r20)
 100190c:	a0000115 	stw	zero,4(r20)
 1001910:	a1800315 	stw	r6,12(r20)
 1001914:	a2000317 	ldw	r8,12(r20)
 1001918:	a2400417 	ldw	r9,16(r20)
 100191c:	00bfffc4 	movi	r2,-1
 1001920:	408b883a 	add	r5,r8,r2
 1001924:	2a09803a 	cmpltu	r4,r5,r8
 1001928:	488d883a 	add	r6,r9,r2
 100192c:	01c40034 	movhi	r7,4096
 1001930:	39ffffc4 	addi	r7,r7,-1
 1001934:	218d883a 	add	r6,r4,r6
 1001938:	39801736 	bltu	r7,r6,1001998 <_fpadd_parts+0x1b4>
 100193c:	31c06526 	beq	r6,r7,1001ad4 <_fpadd_parts+0x2f0>
 1001940:	a3000217 	ldw	r12,8(r20)
 1001944:	4209883a 	add	r4,r8,r8
 1001948:	00bfffc4 	movi	r2,-1
 100194c:	220f803a 	cmpltu	r7,r4,r8
 1001950:	4a4b883a 	add	r5,r9,r9
 1001954:	394f883a 	add	r7,r7,r5
 1001958:	2095883a 	add	r10,r4,r2
 100195c:	3897883a 	add	r11,r7,r2
 1001960:	510d803a 	cmpltu	r6,r10,r4
 1001964:	6099883a 	add	r12,r12,r2
 1001968:	32d7883a 	add	r11,r6,r11
 100196c:	00840034 	movhi	r2,4096
 1001970:	10bfffc4 	addi	r2,r2,-1
 1001974:	2011883a 	mov	r8,r4
 1001978:	3813883a 	mov	r9,r7
 100197c:	a1000315 	stw	r4,12(r20)
 1001980:	a1c00415 	stw	r7,16(r20)
 1001984:	a3000215 	stw	r12,8(r20)
 1001988:	12c00336 	bltu	r2,r11,1001998 <_fpadd_parts+0x1b4>
 100198c:	58bfed1e 	bne	r11,r2,1001944 <_fpadd_parts+0x160>
 1001990:	00bfff84 	movi	r2,-2
 1001994:	12bfeb2e 	bgeu	r2,r10,1001944 <_fpadd_parts+0x160>
 1001998:	a2800417 	ldw	r10,16(r20)
 100199c:	008000c4 	movi	r2,3
 10019a0:	00c80034 	movhi	r3,8192
 10019a4:	18ffffc4 	addi	r3,r3,-1
 10019a8:	a2400317 	ldw	r9,12(r20)
 10019ac:	a0800015 	stw	r2,0(r20)
 10019b0:	1a802336 	bltu	r3,r10,1001a40 <_fpadd_parts+0x25c>
 10019b4:	a027883a 	mov	r19,r20
 10019b8:	9805883a 	mov	r2,r19
 10019bc:	ddc00717 	ldw	r23,28(sp)
 10019c0:	dd800617 	ldw	r22,24(sp)
 10019c4:	dd400517 	ldw	r21,20(sp)
 10019c8:	dd000417 	ldw	r20,16(sp)
 10019cc:	dcc00317 	ldw	r19,12(sp)
 10019d0:	dc800217 	ldw	r18,8(sp)
 10019d4:	dc400117 	ldw	r17,4(sp)
 10019d8:	dc000017 	ldw	r16,0(sp)
 10019dc:	dec00804 	addi	sp,sp,32
 10019e0:	f800283a 	ret
 10019e4:	20fff41e 	bne	r4,r3,10019b8 <_fpadd_parts+0x1d4>
 10019e8:	31000015 	stw	r4,0(r6)
 10019ec:	98800117 	ldw	r2,4(r19)
 10019f0:	30800115 	stw	r2,4(r6)
 10019f4:	98c00217 	ldw	r3,8(r19)
 10019f8:	30c00215 	stw	r3,8(r6)
 10019fc:	98800317 	ldw	r2,12(r19)
 1001a00:	30800315 	stw	r2,12(r6)
 1001a04:	98c00417 	ldw	r3,16(r19)
 1001a08:	30c00415 	stw	r3,16(r6)
 1001a0c:	98800117 	ldw	r2,4(r19)
 1001a10:	28c00117 	ldw	r3,4(r5)
 1001a14:	3027883a 	mov	r19,r6
 1001a18:	10c4703a 	and	r2,r2,r3
 1001a1c:	30800115 	stw	r2,4(r6)
 1001a20:	003fe506 	br	10019b8 <_fpadd_parts+0x1d4>
 1001a24:	1dc02616 	blt	r3,r23,1001ac0 <_fpadd_parts+0x2dc>
 1001a28:	0023883a 	mov	r17,zero
 1001a2c:	182f883a 	mov	r23,r3
 1001a30:	0025883a 	mov	r18,zero
 1001a34:	003fa806 	br	10018d8 <_fpadd_parts+0xf4>
 1001a38:	a827883a 	mov	r19,r21
 1001a3c:	003fde06 	br	10019b8 <_fpadd_parts+0x1d4>
 1001a40:	01800044 	movi	r6,1
 1001a44:	500497fa 	slli	r2,r10,31
 1001a48:	4808d07a 	srli	r4,r9,1
 1001a4c:	518ad83a 	srl	r5,r10,r6
 1001a50:	a2000217 	ldw	r8,8(r20)
 1001a54:	1108b03a 	or	r4,r2,r4
 1001a58:	0007883a 	mov	r3,zero
 1001a5c:	4984703a 	and	r2,r9,r6
 1001a60:	208cb03a 	or	r6,r4,r2
 1001a64:	28ceb03a 	or	r7,r5,r3
 1001a68:	42000044 	addi	r8,r8,1
 1001a6c:	a027883a 	mov	r19,r20
 1001a70:	a1c00415 	stw	r7,16(r20)
 1001a74:	a2000215 	stw	r8,8(r20)
 1001a78:	a1800315 	stw	r6,12(r20)
 1001a7c:	003fce06 	br	10019b8 <_fpadd_parts+0x1d4>
 1001a80:	8bc5c83a 	sub	r2,r17,r15
 1001a84:	8889803a 	cmpltu	r4,r17,r2
 1001a88:	9407c83a 	sub	r3,r18,r16
 1001a8c:	1909c83a 	sub	r4,r3,r4
 1001a90:	100d883a 	mov	r6,r2
 1001a94:	200f883a 	mov	r7,r4
 1001a98:	003f9906 	br	1001900 <_fpadd_parts+0x11c>
 1001a9c:	7c45883a 	add	r2,r15,r17
 1001aa0:	13c9803a 	cmpltu	r4,r2,r15
 1001aa4:	8487883a 	add	r3,r16,r18
 1001aa8:	20c9883a 	add	r4,r4,r3
 1001aac:	a1400115 	stw	r5,4(r20)
 1001ab0:	a5c00215 	stw	r23,8(r20)
 1001ab4:	a0800315 	stw	r2,12(r20)
 1001ab8:	a1000415 	stw	r4,16(r20)
 1001abc:	003fb606 	br	1001998 <_fpadd_parts+0x1b4>
 1001ac0:	001f883a 	mov	r15,zero
 1001ac4:	0021883a 	mov	r16,zero
 1001ac8:	003f8306 	br	10018d8 <_fpadd_parts+0xf4>
 1001acc:	018dc83a 	sub	r6,zero,r6
 1001ad0:	003f6706 	br	1001870 <_fpadd_parts+0x8c>
 1001ad4:	00bfff84 	movi	r2,-2
 1001ad8:	117faf36 	bltu	r2,r5,1001998 <_fpadd_parts+0x1b4>
 1001adc:	003f9806 	br	1001940 <_fpadd_parts+0x15c>
 1001ae0:	0005883a 	mov	r2,zero
 1001ae4:	1189c83a 	sub	r4,r2,r6
 1001ae8:	1105803a 	cmpltu	r2,r2,r4
 1001aec:	01cbc83a 	sub	r5,zero,r7
 1001af0:	2885c83a 	sub	r2,r5,r2
 1001af4:	01800044 	movi	r6,1
 1001af8:	a1800115 	stw	r6,4(r20)
 1001afc:	a5c00215 	stw	r23,8(r20)
 1001b00:	a1000315 	stw	r4,12(r20)
 1001b04:	a0800415 	stw	r2,16(r20)
 1001b08:	003f8206 	br	1001914 <_fpadd_parts+0x130>
 1001b0c:	203f7226 	beq	r4,zero,10018d8 <_fpadd_parts+0xf4>
 1001b10:	35bff804 	addi	r22,r6,-32
 1001b14:	b9af883a 	add	r23,r23,r6
 1001b18:	b0003116 	blt	r22,zero,1001be0 <_fpadd_parts+0x3fc>
 1001b1c:	959ad83a 	srl	r13,r18,r22
 1001b20:	001d883a 	mov	r14,zero
 1001b24:	000f883a 	mov	r7,zero
 1001b28:	01000044 	movi	r4,1
 1001b2c:	0011883a 	mov	r8,zero
 1001b30:	b0002516 	blt	r22,zero,1001bc8 <_fpadd_parts+0x3e4>
 1001b34:	2594983a 	sll	r10,r4,r22
 1001b38:	0013883a 	mov	r9,zero
 1001b3c:	00bfffc4 	movi	r2,-1
 1001b40:	4889883a 	add	r4,r9,r2
 1001b44:	508b883a 	add	r5,r10,r2
 1001b48:	224d803a 	cmpltu	r6,r4,r9
 1001b4c:	314b883a 	add	r5,r6,r5
 1001b50:	8904703a 	and	r2,r17,r4
 1001b54:	9146703a 	and	r3,r18,r5
 1001b58:	10c4b03a 	or	r2,r2,r3
 1001b5c:	10000226 	beq	r2,zero,1001b68 <_fpadd_parts+0x384>
 1001b60:	01c00044 	movi	r7,1
 1001b64:	0011883a 	mov	r8,zero
 1001b68:	69e2b03a 	or	r17,r13,r7
 1001b6c:	7224b03a 	or	r18,r14,r8
 1001b70:	003f5906 	br	10018d8 <_fpadd_parts+0xf4>
 1001b74:	8407883a 	add	r3,r16,r16
 1001b78:	008007c4 	movi	r2,31
 1001b7c:	1185c83a 	sub	r2,r2,r6
 1001b80:	1886983a 	sll	r3,r3,r2
 1001b84:	7996d83a 	srl	r11,r15,r6
 1001b88:	8198d83a 	srl	r12,r16,r6
 1001b8c:	1ad6b03a 	or	r11,r3,r11
 1001b90:	003f3e06 	br	100188c <_fpadd_parts+0xa8>
 1001b94:	2006d07a 	srli	r3,r4,1
 1001b98:	008007c4 	movi	r2,31
 1001b9c:	1185c83a 	sub	r2,r2,r6
 1001ba0:	1890d83a 	srl	r8,r3,r2
 1001ba4:	218e983a 	sll	r7,r4,r6
 1001ba8:	003f3e06 	br	10018a4 <_fpadd_parts+0xc0>
 1001bac:	113f821e 	bne	r2,r4,10019b8 <_fpadd_parts+0x1d4>
 1001bb0:	28c00117 	ldw	r3,4(r5)
 1001bb4:	98800117 	ldw	r2,4(r19)
 1001bb8:	10ff7f26 	beq	r2,r3,10019b8 <_fpadd_parts+0x1d4>
 1001bbc:	04c040b4 	movhi	r19,258
 1001bc0:	9ce7a604 	addi	r19,r19,-24936
 1001bc4:	003f7c06 	br	10019b8 <_fpadd_parts+0x1d4>
 1001bc8:	2006d07a 	srli	r3,r4,1
 1001bcc:	008007c4 	movi	r2,31
 1001bd0:	1185c83a 	sub	r2,r2,r6
 1001bd4:	1894d83a 	srl	r10,r3,r2
 1001bd8:	2192983a 	sll	r9,r4,r6
 1001bdc:	003fd706 	br	1001b3c <_fpadd_parts+0x358>
 1001be0:	9487883a 	add	r3,r18,r18
 1001be4:	008007c4 	movi	r2,31
 1001be8:	1185c83a 	sub	r2,r2,r6
 1001bec:	1886983a 	sll	r3,r3,r2
 1001bf0:	899ad83a 	srl	r13,r17,r6
 1001bf4:	919cd83a 	srl	r14,r18,r6
 1001bf8:	1b5ab03a 	or	r13,r3,r13
 1001bfc:	003fc906 	br	1001b24 <_fpadd_parts+0x340>

01001c00 <__subdf3>:
 1001c00:	f811883a 	mov	r8,ra
 1001c04:	100c3d80 	call	100c3d8 <_mcount>
 1001c08:	403f883a 	mov	ra,r8
 1001c0c:	deffea04 	addi	sp,sp,-88
 1001c10:	dfc01515 	stw	ra,84(sp)
 1001c14:	dcc01415 	stw	r19,80(sp)
 1001c18:	dc401315 	stw	r17,76(sp)
 1001c1c:	dcc00404 	addi	r19,sp,16
 1001c20:	2011883a 	mov	r8,r4
 1001c24:	2813883a 	mov	r9,r5
 1001c28:	d809883a 	mov	r4,sp
 1001c2c:	980b883a 	mov	r5,r19
 1001c30:	dc400904 	addi	r17,sp,36
 1001c34:	da400115 	stw	r9,4(sp)
 1001c38:	d9c00315 	stw	r7,12(sp)
 1001c3c:	da000015 	stw	r8,0(sp)
 1001c40:	d9800215 	stw	r6,8(sp)
 1001c44:	1002b880 	call	1002b88 <__unpack_d>
 1001c48:	d9000204 	addi	r4,sp,8
 1001c4c:	880b883a 	mov	r5,r17
 1001c50:	1002b880 	call	1002b88 <__unpack_d>
 1001c54:	d8800a17 	ldw	r2,40(sp)
 1001c58:	880b883a 	mov	r5,r17
 1001c5c:	9809883a 	mov	r4,r19
 1001c60:	d9800e04 	addi	r6,sp,56
 1001c64:	1080005c 	xori	r2,r2,1
 1001c68:	d8800a15 	stw	r2,40(sp)
 1001c6c:	10017e40 	call	10017e4 <_fpadd_parts>
 1001c70:	1009883a 	mov	r4,r2
 1001c74:	10028680 	call	1002868 <__pack_d>
 1001c78:	dfc01517 	ldw	ra,84(sp)
 1001c7c:	dcc01417 	ldw	r19,80(sp)
 1001c80:	dc401317 	ldw	r17,76(sp)
 1001c84:	dec01604 	addi	sp,sp,88
 1001c88:	f800283a 	ret

01001c8c <__adddf3>:
 1001c8c:	f811883a 	mov	r8,ra
 1001c90:	100c3d80 	call	100c3d8 <_mcount>
 1001c94:	403f883a 	mov	ra,r8
 1001c98:	deffea04 	addi	sp,sp,-88
 1001c9c:	dfc01515 	stw	ra,84(sp)
 1001ca0:	dcc01415 	stw	r19,80(sp)
 1001ca4:	dc401315 	stw	r17,76(sp)
 1001ca8:	dcc00404 	addi	r19,sp,16
 1001cac:	2011883a 	mov	r8,r4
 1001cb0:	2813883a 	mov	r9,r5
 1001cb4:	d809883a 	mov	r4,sp
 1001cb8:	980b883a 	mov	r5,r19
 1001cbc:	dc400904 	addi	r17,sp,36
 1001cc0:	da400115 	stw	r9,4(sp)
 1001cc4:	d9c00315 	stw	r7,12(sp)
 1001cc8:	da000015 	stw	r8,0(sp)
 1001ccc:	d9800215 	stw	r6,8(sp)
 1001cd0:	1002b880 	call	1002b88 <__unpack_d>
 1001cd4:	d9000204 	addi	r4,sp,8
 1001cd8:	880b883a 	mov	r5,r17
 1001cdc:	1002b880 	call	1002b88 <__unpack_d>
 1001ce0:	d9800e04 	addi	r6,sp,56
 1001ce4:	9809883a 	mov	r4,r19
 1001ce8:	880b883a 	mov	r5,r17
 1001cec:	10017e40 	call	10017e4 <_fpadd_parts>
 1001cf0:	1009883a 	mov	r4,r2
 1001cf4:	10028680 	call	1002868 <__pack_d>
 1001cf8:	dfc01517 	ldw	ra,84(sp)
 1001cfc:	dcc01417 	ldw	r19,80(sp)
 1001d00:	dc401317 	ldw	r17,76(sp)
 1001d04:	dec01604 	addi	sp,sp,88
 1001d08:	f800283a 	ret

01001d0c <__muldf3>:
 1001d0c:	f811883a 	mov	r8,ra
 1001d10:	100c3d80 	call	100c3d8 <_mcount>
 1001d14:	403f883a 	mov	ra,r8
 1001d18:	deffe004 	addi	sp,sp,-128
 1001d1c:	dfc01f15 	stw	ra,124(sp)
 1001d20:	ddc01e15 	stw	r23,120(sp)
 1001d24:	dd801d15 	stw	r22,116(sp)
 1001d28:	dd401c15 	stw	r21,112(sp)
 1001d2c:	dd001b15 	stw	r20,108(sp)
 1001d30:	dcc01a15 	stw	r19,104(sp)
 1001d34:	dc801915 	stw	r18,100(sp)
 1001d38:	dc401815 	stw	r17,96(sp)
 1001d3c:	dc001715 	stw	r16,92(sp)
 1001d40:	dc400404 	addi	r17,sp,16
 1001d44:	2011883a 	mov	r8,r4
 1001d48:	2813883a 	mov	r9,r5
 1001d4c:	d809883a 	mov	r4,sp
 1001d50:	880b883a 	mov	r5,r17
 1001d54:	dc000904 	addi	r16,sp,36
 1001d58:	da400115 	stw	r9,4(sp)
 1001d5c:	d9c00315 	stw	r7,12(sp)
 1001d60:	da000015 	stw	r8,0(sp)
 1001d64:	d9800215 	stw	r6,8(sp)
 1001d68:	1002b880 	call	1002b88 <__unpack_d>
 1001d6c:	d9000204 	addi	r4,sp,8
 1001d70:	800b883a 	mov	r5,r16
 1001d74:	1002b880 	call	1002b88 <__unpack_d>
 1001d78:	d9000417 	ldw	r4,16(sp)
 1001d7c:	00800044 	movi	r2,1
 1001d80:	1100102e 	bgeu	r2,r4,1001dc4 <__muldf3+0xb8>
 1001d84:	d8c00917 	ldw	r3,36(sp)
 1001d88:	10c0062e 	bgeu	r2,r3,1001da4 <__muldf3+0x98>
 1001d8c:	00800104 	movi	r2,4
 1001d90:	20800a26 	beq	r4,r2,1001dbc <__muldf3+0xb0>
 1001d94:	1880cc26 	beq	r3,r2,10020c8 <__muldf3+0x3bc>
 1001d98:	00800084 	movi	r2,2
 1001d9c:	20800926 	beq	r4,r2,1001dc4 <__muldf3+0xb8>
 1001da0:	1880191e 	bne	r3,r2,1001e08 <__muldf3+0xfc>
 1001da4:	d8c00a17 	ldw	r3,40(sp)
 1001da8:	d8800517 	ldw	r2,20(sp)
 1001dac:	8009883a 	mov	r4,r16
 1001db0:	10c4c03a 	cmpne	r2,r2,r3
 1001db4:	d8800a15 	stw	r2,40(sp)
 1001db8:	00000706 	br	1001dd8 <__muldf3+0xcc>
 1001dbc:	00800084 	movi	r2,2
 1001dc0:	1880c326 	beq	r3,r2,10020d0 <__muldf3+0x3c4>
 1001dc4:	d8800517 	ldw	r2,20(sp)
 1001dc8:	d8c00a17 	ldw	r3,40(sp)
 1001dcc:	8809883a 	mov	r4,r17
 1001dd0:	10c4c03a 	cmpne	r2,r2,r3
 1001dd4:	d8800515 	stw	r2,20(sp)
 1001dd8:	10028680 	call	1002868 <__pack_d>
 1001ddc:	dfc01f17 	ldw	ra,124(sp)
 1001de0:	ddc01e17 	ldw	r23,120(sp)
 1001de4:	dd801d17 	ldw	r22,116(sp)
 1001de8:	dd401c17 	ldw	r21,112(sp)
 1001dec:	dd001b17 	ldw	r20,108(sp)
 1001df0:	dcc01a17 	ldw	r19,104(sp)
 1001df4:	dc801917 	ldw	r18,100(sp)
 1001df8:	dc401817 	ldw	r17,96(sp)
 1001dfc:	dc001717 	ldw	r16,92(sp)
 1001e00:	dec02004 	addi	sp,sp,128
 1001e04:	f800283a 	ret
 1001e08:	dd800717 	ldw	r22,28(sp)
 1001e0c:	dc800c17 	ldw	r18,48(sp)
 1001e10:	002b883a 	mov	r21,zero
 1001e14:	0023883a 	mov	r17,zero
 1001e18:	a80b883a 	mov	r5,r21
 1001e1c:	b00d883a 	mov	r6,r22
 1001e20:	880f883a 	mov	r7,r17
 1001e24:	ddc00817 	ldw	r23,32(sp)
 1001e28:	dcc00d17 	ldw	r19,52(sp)
 1001e2c:	9009883a 	mov	r4,r18
 1001e30:	10026ac0 	call	10026ac <__muldi3>
 1001e34:	001b883a 	mov	r13,zero
 1001e38:	680f883a 	mov	r7,r13
 1001e3c:	b009883a 	mov	r4,r22
 1001e40:	000b883a 	mov	r5,zero
 1001e44:	980d883a 	mov	r6,r19
 1001e48:	b82d883a 	mov	r22,r23
 1001e4c:	002f883a 	mov	r23,zero
 1001e50:	db401615 	stw	r13,88(sp)
 1001e54:	d8801315 	stw	r2,76(sp)
 1001e58:	d8c01415 	stw	r3,80(sp)
 1001e5c:	dcc01515 	stw	r19,84(sp)
 1001e60:	10026ac0 	call	10026ac <__muldi3>
 1001e64:	b00d883a 	mov	r6,r22
 1001e68:	000b883a 	mov	r5,zero
 1001e6c:	9009883a 	mov	r4,r18
 1001e70:	b80f883a 	mov	r7,r23
 1001e74:	1021883a 	mov	r16,r2
 1001e78:	1823883a 	mov	r17,r3
 1001e7c:	10026ac0 	call	10026ac <__muldi3>
 1001e80:	8085883a 	add	r2,r16,r2
 1001e84:	140d803a 	cmpltu	r6,r2,r16
 1001e88:	88c7883a 	add	r3,r17,r3
 1001e8c:	30cd883a 	add	r6,r6,r3
 1001e90:	1029883a 	mov	r20,r2
 1001e94:	302b883a 	mov	r21,r6
 1001e98:	da801317 	ldw	r10,76(sp)
 1001e9c:	dac01417 	ldw	r11,80(sp)
 1001ea0:	db001517 	ldw	r12,84(sp)
 1001ea4:	db401617 	ldw	r13,88(sp)
 1001ea8:	3440612e 	bgeu	r6,r17,1002030 <__muldf3+0x324>
 1001eac:	0009883a 	mov	r4,zero
 1001eb0:	5105883a 	add	r2,r10,r4
 1001eb4:	128d803a 	cmpltu	r6,r2,r10
 1001eb8:	5d07883a 	add	r3,r11,r20
 1001ebc:	30cd883a 	add	r6,r6,r3
 1001ec0:	0021883a 	mov	r16,zero
 1001ec4:	04400044 	movi	r17,1
 1001ec8:	1025883a 	mov	r18,r2
 1001ecc:	3027883a 	mov	r19,r6
 1001ed0:	32c06236 	bltu	r6,r11,100205c <__muldf3+0x350>
 1001ed4:	59807a26 	beq	r11,r6,10020c0 <__muldf3+0x3b4>
 1001ed8:	680b883a 	mov	r5,r13
 1001edc:	b80f883a 	mov	r7,r23
 1001ee0:	6009883a 	mov	r4,r12
 1001ee4:	b00d883a 	mov	r6,r22
 1001ee8:	10026ac0 	call	10026ac <__muldi3>
 1001eec:	1009883a 	mov	r4,r2
 1001ef0:	000f883a 	mov	r7,zero
 1001ef4:	1545883a 	add	r2,r2,r21
 1001ef8:	1111803a 	cmpltu	r8,r2,r4
 1001efc:	19c7883a 	add	r3,r3,r7
 1001f00:	40c7883a 	add	r3,r8,r3
 1001f04:	88cb883a 	add	r5,r17,r3
 1001f08:	d8c00617 	ldw	r3,24(sp)
 1001f0c:	8089883a 	add	r4,r16,r2
 1001f10:	d8800b17 	ldw	r2,44(sp)
 1001f14:	18c00104 	addi	r3,r3,4
 1001f18:	240d803a 	cmpltu	r6,r4,r16
 1001f1c:	10c7883a 	add	r3,r2,r3
 1001f20:	2013883a 	mov	r9,r4
 1001f24:	d8800a17 	ldw	r2,40(sp)
 1001f28:	d9000517 	ldw	r4,20(sp)
 1001f2c:	314d883a 	add	r6,r6,r5
 1001f30:	3015883a 	mov	r10,r6
 1001f34:	2088c03a 	cmpne	r4,r4,r2
 1001f38:	00880034 	movhi	r2,8192
 1001f3c:	10bfffc4 	addi	r2,r2,-1
 1001f40:	d9000f15 	stw	r4,60(sp)
 1001f44:	d8c01015 	stw	r3,64(sp)
 1001f48:	1180162e 	bgeu	r2,r6,1001fa4 <__muldf3+0x298>
 1001f4c:	1811883a 	mov	r8,r3
 1001f50:	101f883a 	mov	r15,r2
 1001f54:	980497fa 	slli	r2,r19,31
 1001f58:	9016d07a 	srli	r11,r18,1
 1001f5c:	500697fa 	slli	r3,r10,31
 1001f60:	480cd07a 	srli	r6,r9,1
 1001f64:	500ed07a 	srli	r7,r10,1
 1001f68:	12d6b03a 	or	r11,r2,r11
 1001f6c:	00800044 	movi	r2,1
 1001f70:	198cb03a 	or	r6,r3,r6
 1001f74:	4888703a 	and	r4,r9,r2
 1001f78:	9818d07a 	srli	r12,r19,1
 1001f7c:	001b883a 	mov	r13,zero
 1001f80:	03a00034 	movhi	r14,32768
 1001f84:	3013883a 	mov	r9,r6
 1001f88:	3815883a 	mov	r10,r7
 1001f8c:	4091883a 	add	r8,r8,r2
 1001f90:	20000226 	beq	r4,zero,1001f9c <__muldf3+0x290>
 1001f94:	5b64b03a 	or	r18,r11,r13
 1001f98:	63a6b03a 	or	r19,r12,r14
 1001f9c:	7abfed36 	bltu	r15,r10,1001f54 <__muldf3+0x248>
 1001fa0:	da001015 	stw	r8,64(sp)
 1001fa4:	00840034 	movhi	r2,4096
 1001fa8:	10bfffc4 	addi	r2,r2,-1
 1001fac:	12801436 	bltu	r2,r10,1002000 <__muldf3+0x2f4>
 1001fb0:	da001017 	ldw	r8,64(sp)
 1001fb4:	101f883a 	mov	r15,r2
 1001fb8:	4a45883a 	add	r2,r9,r9
 1001fbc:	124d803a 	cmpltu	r6,r2,r9
 1001fc0:	5287883a 	add	r3,r10,r10
 1001fc4:	9497883a 	add	r11,r18,r18
 1001fc8:	5c8f803a 	cmpltu	r7,r11,r18
 1001fcc:	9cd9883a 	add	r12,r19,r19
 1001fd0:	01000044 	movi	r4,1
 1001fd4:	30cd883a 	add	r6,r6,r3
 1001fd8:	3b0f883a 	add	r7,r7,r12
 1001fdc:	423fffc4 	addi	r8,r8,-1
 1001fe0:	1013883a 	mov	r9,r2
 1001fe4:	3015883a 	mov	r10,r6
 1001fe8:	111ab03a 	or	r13,r2,r4
 1001fec:	98003016 	blt	r19,zero,10020b0 <__muldf3+0x3a4>
 1001ff0:	5825883a 	mov	r18,r11
 1001ff4:	3827883a 	mov	r19,r7
 1001ff8:	7abfef2e 	bgeu	r15,r10,1001fb8 <__muldf3+0x2ac>
 1001ffc:	da001015 	stw	r8,64(sp)
 1002000:	00803fc4 	movi	r2,255
 1002004:	488e703a 	and	r7,r9,r2
 1002008:	00802004 	movi	r2,128
 100200c:	0007883a 	mov	r3,zero
 1002010:	0011883a 	mov	r8,zero
 1002014:	38801826 	beq	r7,r2,1002078 <__muldf3+0x36c>
 1002018:	008000c4 	movi	r2,3
 100201c:	d9000e04 	addi	r4,sp,56
 1002020:	da801215 	stw	r10,72(sp)
 1002024:	d8800e15 	stw	r2,56(sp)
 1002028:	da401115 	stw	r9,68(sp)
 100202c:	003f6a06 	br	1001dd8 <__muldf3+0xcc>
 1002030:	89802126 	beq	r17,r6,10020b8 <__muldf3+0x3ac>
 1002034:	0009883a 	mov	r4,zero
 1002038:	5105883a 	add	r2,r10,r4
 100203c:	128d803a 	cmpltu	r6,r2,r10
 1002040:	5d07883a 	add	r3,r11,r20
 1002044:	30cd883a 	add	r6,r6,r3
 1002048:	0021883a 	mov	r16,zero
 100204c:	0023883a 	mov	r17,zero
 1002050:	1025883a 	mov	r18,r2
 1002054:	3027883a 	mov	r19,r6
 1002058:	32ff9e2e 	bgeu	r6,r11,1001ed4 <__muldf3+0x1c8>
 100205c:	00800044 	movi	r2,1
 1002060:	8089883a 	add	r4,r16,r2
 1002064:	240d803a 	cmpltu	r6,r4,r16
 1002068:	344d883a 	add	r6,r6,r17
 100206c:	2021883a 	mov	r16,r4
 1002070:	3023883a 	mov	r17,r6
 1002074:	003f9806 	br	1001ed8 <__muldf3+0x1cc>
 1002078:	403fe71e 	bne	r8,zero,1002018 <__muldf3+0x30c>
 100207c:	01004004 	movi	r4,256
 1002080:	4904703a 	and	r2,r9,r4
 1002084:	10c4b03a 	or	r2,r2,r3
 1002088:	103fe31e 	bne	r2,zero,1002018 <__muldf3+0x30c>
 100208c:	94c4b03a 	or	r2,r18,r19
 1002090:	103fe126 	beq	r2,zero,1002018 <__muldf3+0x30c>
 1002094:	49c5883a 	add	r2,r9,r7
 1002098:	1251803a 	cmpltu	r8,r2,r9
 100209c:	4291883a 	add	r8,r8,r10
 10020a0:	013fc004 	movi	r4,-256
 10020a4:	1112703a 	and	r9,r2,r4
 10020a8:	4015883a 	mov	r10,r8
 10020ac:	003fda06 	br	1002018 <__muldf3+0x30c>
 10020b0:	6813883a 	mov	r9,r13
 10020b4:	003fce06 	br	1001ff0 <__muldf3+0x2e4>
 10020b8:	143f7c36 	bltu	r2,r16,1001eac <__muldf3+0x1a0>
 10020bc:	003fdd06 	br	1002034 <__muldf3+0x328>
 10020c0:	12bf852e 	bgeu	r2,r10,1001ed8 <__muldf3+0x1cc>
 10020c4:	003fe506 	br	100205c <__muldf3+0x350>
 10020c8:	00800084 	movi	r2,2
 10020cc:	20bf351e 	bne	r4,r2,1001da4 <__muldf3+0x98>
 10020d0:	010040b4 	movhi	r4,258
 10020d4:	2127a604 	addi	r4,r4,-24936
 10020d8:	003f3f06 	br	1001dd8 <__muldf3+0xcc>

010020dc <__divdf3>:
 10020dc:	f811883a 	mov	r8,ra
 10020e0:	100c3d80 	call	100c3d8 <_mcount>
 10020e4:	403f883a 	mov	ra,r8
 10020e8:	deffed04 	addi	sp,sp,-76
 10020ec:	dfc01215 	stw	ra,72(sp)
 10020f0:	dcc01115 	stw	r19,68(sp)
 10020f4:	dc801015 	stw	r18,64(sp)
 10020f8:	dc400f15 	stw	r17,60(sp)
 10020fc:	dc000e15 	stw	r16,56(sp)
 1002100:	dcc00404 	addi	r19,sp,16
 1002104:	2011883a 	mov	r8,r4
 1002108:	2813883a 	mov	r9,r5
 100210c:	d809883a 	mov	r4,sp
 1002110:	980b883a 	mov	r5,r19
 1002114:	dc000904 	addi	r16,sp,36
 1002118:	da400115 	stw	r9,4(sp)
 100211c:	d9c00315 	stw	r7,12(sp)
 1002120:	da000015 	stw	r8,0(sp)
 1002124:	d9800215 	stw	r6,8(sp)
 1002128:	1002b880 	call	1002b88 <__unpack_d>
 100212c:	d9000204 	addi	r4,sp,8
 1002130:	800b883a 	mov	r5,r16
 1002134:	1002b880 	call	1002b88 <__unpack_d>
 1002138:	d9000417 	ldw	r4,16(sp)
 100213c:	00800044 	movi	r2,1
 1002140:	11000b2e 	bgeu	r2,r4,1002170 <__divdf3+0x94>
 1002144:	d9400917 	ldw	r5,36(sp)
 1002148:	1140762e 	bgeu	r2,r5,1002324 <__divdf3+0x248>
 100214c:	d8800517 	ldw	r2,20(sp)
 1002150:	d8c00a17 	ldw	r3,40(sp)
 1002154:	01800104 	movi	r6,4
 1002158:	10c4f03a 	xor	r2,r2,r3
 100215c:	d8800515 	stw	r2,20(sp)
 1002160:	21800226 	beq	r4,r6,100216c <__divdf3+0x90>
 1002164:	00800084 	movi	r2,2
 1002168:	2080141e 	bne	r4,r2,10021bc <__divdf3+0xe0>
 100216c:	29000926 	beq	r5,r4,1002194 <__divdf3+0xb8>
 1002170:	9809883a 	mov	r4,r19
 1002174:	10028680 	call	1002868 <__pack_d>
 1002178:	dfc01217 	ldw	ra,72(sp)
 100217c:	dcc01117 	ldw	r19,68(sp)
 1002180:	dc801017 	ldw	r18,64(sp)
 1002184:	dc400f17 	ldw	r17,60(sp)
 1002188:	dc000e17 	ldw	r16,56(sp)
 100218c:	dec01304 	addi	sp,sp,76
 1002190:	f800283a 	ret
 1002194:	010040b4 	movhi	r4,258
 1002198:	2127a604 	addi	r4,r4,-24936
 100219c:	10028680 	call	1002868 <__pack_d>
 10021a0:	dfc01217 	ldw	ra,72(sp)
 10021a4:	dcc01117 	ldw	r19,68(sp)
 10021a8:	dc801017 	ldw	r18,64(sp)
 10021ac:	dc400f17 	ldw	r17,60(sp)
 10021b0:	dc000e17 	ldw	r16,56(sp)
 10021b4:	dec01304 	addi	sp,sp,76
 10021b8:	f800283a 	ret
 10021bc:	29805b26 	beq	r5,r6,100232c <__divdf3+0x250>
 10021c0:	28802d26 	beq	r5,r2,1002278 <__divdf3+0x19c>
 10021c4:	d8c00617 	ldw	r3,24(sp)
 10021c8:	d8800b17 	ldw	r2,44(sp)
 10021cc:	d9c00817 	ldw	r7,32(sp)
 10021d0:	dc400d17 	ldw	r17,52(sp)
 10021d4:	188bc83a 	sub	r5,r3,r2
 10021d8:	d9800717 	ldw	r6,28(sp)
 10021dc:	dc000c17 	ldw	r16,48(sp)
 10021e0:	d9400615 	stw	r5,24(sp)
 10021e4:	3c403836 	bltu	r7,r17,10022c8 <__divdf3+0x1ec>
 10021e8:	89c03626 	beq	r17,r7,10022c4 <__divdf3+0x1e8>
 10021ec:	0015883a 	mov	r10,zero
 10021f0:	001d883a 	mov	r14,zero
 10021f4:	02c40034 	movhi	r11,4096
 10021f8:	001f883a 	mov	r15,zero
 10021fc:	003f883a 	mov	ra,zero
 1002200:	04800f44 	movi	r18,61
 1002204:	00000f06 	br	1002244 <__divdf3+0x168>
 1002208:	601d883a 	mov	r14,r12
 100220c:	681f883a 	mov	r15,r13
 1002210:	400d883a 	mov	r6,r8
 1002214:	100f883a 	mov	r7,r2
 1002218:	3191883a 	add	r8,r6,r6
 100221c:	5808d07a 	srli	r4,r11,1
 1002220:	4185803a 	cmpltu	r2,r8,r6
 1002224:	39d3883a 	add	r9,r7,r7
 1002228:	28c6b03a 	or	r3,r5,r3
 100222c:	1245883a 	add	r2,r2,r9
 1002230:	1815883a 	mov	r10,r3
 1002234:	2017883a 	mov	r11,r4
 1002238:	400d883a 	mov	r6,r8
 100223c:	100f883a 	mov	r7,r2
 1002240:	fc801726 	beq	ra,r18,10022a0 <__divdf3+0x1c4>
 1002244:	580a97fa 	slli	r5,r11,31
 1002248:	5006d07a 	srli	r3,r10,1
 100224c:	ffc00044 	addi	ra,ra,1
 1002250:	3c7ff136 	bltu	r7,r17,1002218 <__divdf3+0x13c>
 1002254:	3411c83a 	sub	r8,r6,r16
 1002258:	3205803a 	cmpltu	r2,r6,r8
 100225c:	3c53c83a 	sub	r9,r7,r17
 1002260:	7298b03a 	or	r12,r14,r10
 1002264:	7adab03a 	or	r13,r15,r11
 1002268:	4885c83a 	sub	r2,r9,r2
 100226c:	89ffe61e 	bne	r17,r7,1002208 <__divdf3+0x12c>
 1002270:	343fe936 	bltu	r6,r16,1002218 <__divdf3+0x13c>
 1002274:	003fe406 	br	1002208 <__divdf3+0x12c>
 1002278:	9809883a 	mov	r4,r19
 100227c:	d9800415 	stw	r6,16(sp)
 1002280:	10028680 	call	1002868 <__pack_d>
 1002284:	dfc01217 	ldw	ra,72(sp)
 1002288:	dcc01117 	ldw	r19,68(sp)
 100228c:	dc801017 	ldw	r18,64(sp)
 1002290:	dc400f17 	ldw	r17,60(sp)
 1002294:	dc000e17 	ldw	r16,56(sp)
 1002298:	dec01304 	addi	sp,sp,76
 100229c:	f800283a 	ret
 10022a0:	00803fc4 	movi	r2,255
 10022a4:	7090703a 	and	r8,r14,r2
 10022a8:	00802004 	movi	r2,128
 10022ac:	0007883a 	mov	r3,zero
 10022b0:	0013883a 	mov	r9,zero
 10022b4:	40800d26 	beq	r8,r2,10022ec <__divdf3+0x210>
 10022b8:	dbc00815 	stw	r15,32(sp)
 10022bc:	db800715 	stw	r14,28(sp)
 10022c0:	003fab06 	br	1002170 <__divdf3+0x94>
 10022c4:	343fc92e 	bgeu	r6,r16,10021ec <__divdf3+0x110>
 10022c8:	3185883a 	add	r2,r6,r6
 10022cc:	1189803a 	cmpltu	r4,r2,r6
 10022d0:	39c7883a 	add	r3,r7,r7
 10022d4:	20c9883a 	add	r4,r4,r3
 10022d8:	297fffc4 	addi	r5,r5,-1
 10022dc:	100d883a 	mov	r6,r2
 10022e0:	200f883a 	mov	r7,r4
 10022e4:	d9400615 	stw	r5,24(sp)
 10022e8:	003fc006 	br	10021ec <__divdf3+0x110>
 10022ec:	483ff21e 	bne	r9,zero,10022b8 <__divdf3+0x1dc>
 10022f0:	01004004 	movi	r4,256
 10022f4:	7104703a 	and	r2,r14,r4
 10022f8:	10c4b03a 	or	r2,r2,r3
 10022fc:	103fee1e 	bne	r2,zero,10022b8 <__divdf3+0x1dc>
 1002300:	31c4b03a 	or	r2,r6,r7
 1002304:	103fec26 	beq	r2,zero,10022b8 <__divdf3+0x1dc>
 1002308:	7205883a 	add	r2,r14,r8
 100230c:	1391803a 	cmpltu	r8,r2,r14
 1002310:	43d1883a 	add	r8,r8,r15
 1002314:	013fc004 	movi	r4,-256
 1002318:	111c703a 	and	r14,r2,r4
 100231c:	401f883a 	mov	r15,r8
 1002320:	003fe506 	br	10022b8 <__divdf3+0x1dc>
 1002324:	8009883a 	mov	r4,r16
 1002328:	003f9206 	br	1002174 <__divdf3+0x98>
 100232c:	9809883a 	mov	r4,r19
 1002330:	d8000715 	stw	zero,28(sp)
 1002334:	d8000815 	stw	zero,32(sp)
 1002338:	d8000615 	stw	zero,24(sp)
 100233c:	003f8d06 	br	1002174 <__divdf3+0x98>

01002340 <__floatunsidf>:
 1002340:	f811883a 	mov	r8,ra
 1002344:	100c3d80 	call	100c3d8 <_mcount>
 1002348:	403f883a 	mov	ra,r8
 100234c:	defff204 	addi	sp,sp,-56
 1002350:	dfc00d15 	stw	ra,52(sp)
 1002354:	ddc00c15 	stw	r23,48(sp)
 1002358:	dd800b15 	stw	r22,44(sp)
 100235c:	dd400a15 	stw	r21,40(sp)
 1002360:	dd000915 	stw	r20,36(sp)
 1002364:	dcc00815 	stw	r19,32(sp)
 1002368:	dc800715 	stw	r18,28(sp)
 100236c:	dc400615 	stw	r17,24(sp)
 1002370:	dc000515 	stw	r16,20(sp)
 1002374:	d8000115 	stw	zero,4(sp)
 1002378:	20000f1e 	bne	r4,zero,10023b8 <__floatunsidf+0x78>
 100237c:	00800084 	movi	r2,2
 1002380:	d8800015 	stw	r2,0(sp)
 1002384:	d809883a 	mov	r4,sp
 1002388:	10028680 	call	1002868 <__pack_d>
 100238c:	dfc00d17 	ldw	ra,52(sp)
 1002390:	ddc00c17 	ldw	r23,48(sp)
 1002394:	dd800b17 	ldw	r22,44(sp)
 1002398:	dd400a17 	ldw	r21,40(sp)
 100239c:	dd000917 	ldw	r20,36(sp)
 10023a0:	dcc00817 	ldw	r19,32(sp)
 10023a4:	dc800717 	ldw	r18,28(sp)
 10023a8:	dc400617 	ldw	r17,24(sp)
 10023ac:	dc000517 	ldw	r16,20(sp)
 10023b0:	dec00e04 	addi	sp,sp,56
 10023b4:	f800283a 	ret
 10023b8:	008000c4 	movi	r2,3
 10023bc:	00c00f04 	movi	r3,60
 10023c0:	002f883a 	mov	r23,zero
 10023c4:	202d883a 	mov	r22,r4
 10023c8:	d8800015 	stw	r2,0(sp)
 10023cc:	d8c00215 	stw	r3,8(sp)
 10023d0:	d9000315 	stw	r4,12(sp)
 10023d4:	ddc00415 	stw	r23,16(sp)
 10023d8:	10027dc0 	call	10027dc <__clzsi2>
 10023dc:	12400744 	addi	r9,r2,29
 10023e0:	48000b16 	blt	r9,zero,1002410 <__floatunsidf+0xd0>
 10023e4:	483fe726 	beq	r9,zero,1002384 <__floatunsidf+0x44>
 10023e8:	10bfff44 	addi	r2,r2,-3
 10023ec:	10002e16 	blt	r2,zero,10024a8 <__floatunsidf+0x168>
 10023f0:	b0a2983a 	sll	r17,r22,r2
 10023f4:	0021883a 	mov	r16,zero
 10023f8:	d8800217 	ldw	r2,8(sp)
 10023fc:	dc400415 	stw	r17,16(sp)
 1002400:	dc000315 	stw	r16,12(sp)
 1002404:	1245c83a 	sub	r2,r2,r9
 1002408:	d8800215 	stw	r2,8(sp)
 100240c:	003fdd06 	br	1002384 <__floatunsidf+0x44>
 1002410:	0255c83a 	sub	r10,zero,r9
 1002414:	51bff804 	addi	r6,r10,-32
 1002418:	30001b16 	blt	r6,zero,1002488 <__floatunsidf+0x148>
 100241c:	b9a8d83a 	srl	r20,r23,r6
 1002420:	002b883a 	mov	r21,zero
 1002424:	000f883a 	mov	r7,zero
 1002428:	01000044 	movi	r4,1
 100242c:	0011883a 	mov	r8,zero
 1002430:	30002516 	blt	r6,zero,10024c8 <__floatunsidf+0x188>
 1002434:	21a6983a 	sll	r19,r4,r6
 1002438:	0025883a 	mov	r18,zero
 100243c:	00bfffc4 	movi	r2,-1
 1002440:	9089883a 	add	r4,r18,r2
 1002444:	988b883a 	add	r5,r19,r2
 1002448:	248d803a 	cmpltu	r6,r4,r18
 100244c:	314b883a 	add	r5,r6,r5
 1002450:	b104703a 	and	r2,r22,r4
 1002454:	b946703a 	and	r3,r23,r5
 1002458:	10c4b03a 	or	r2,r2,r3
 100245c:	10000226 	beq	r2,zero,1002468 <__floatunsidf+0x128>
 1002460:	01c00044 	movi	r7,1
 1002464:	0011883a 	mov	r8,zero
 1002468:	d9000217 	ldw	r4,8(sp)
 100246c:	a1c4b03a 	or	r2,r20,r7
 1002470:	aa06b03a 	or	r3,r21,r8
 1002474:	2249c83a 	sub	r4,r4,r9
 1002478:	d8c00415 	stw	r3,16(sp)
 100247c:	d9000215 	stw	r4,8(sp)
 1002480:	d8800315 	stw	r2,12(sp)
 1002484:	003fbf06 	br	1002384 <__floatunsidf+0x44>
 1002488:	bdc7883a 	add	r3,r23,r23
 100248c:	008007c4 	movi	r2,31
 1002490:	1285c83a 	sub	r2,r2,r10
 1002494:	1886983a 	sll	r3,r3,r2
 1002498:	b2a8d83a 	srl	r20,r22,r10
 100249c:	baaad83a 	srl	r21,r23,r10
 10024a0:	1d28b03a 	or	r20,r3,r20
 10024a4:	003fdf06 	br	1002424 <__floatunsidf+0xe4>
 10024a8:	b006d07a 	srli	r3,r22,1
 10024ac:	008007c4 	movi	r2,31
 10024b0:	1245c83a 	sub	r2,r2,r9
 10024b4:	1886d83a 	srl	r3,r3,r2
 10024b8:	ba62983a 	sll	r17,r23,r9
 10024bc:	b260983a 	sll	r16,r22,r9
 10024c0:	1c62b03a 	or	r17,r3,r17
 10024c4:	003fcc06 	br	10023f8 <__floatunsidf+0xb8>
 10024c8:	2006d07a 	srli	r3,r4,1
 10024cc:	008007c4 	movi	r2,31
 10024d0:	1285c83a 	sub	r2,r2,r10
 10024d4:	18a6d83a 	srl	r19,r3,r2
 10024d8:	22a4983a 	sll	r18,r4,r10
 10024dc:	003fd706 	br	100243c <__floatunsidf+0xfc>

010024e0 <udivmodsi4>:
 10024e0:	f811883a 	mov	r8,ra
 10024e4:	100c3d80 	call	100c3d8 <_mcount>
 10024e8:	403f883a 	mov	ra,r8
 10024ec:	29001b2e 	bgeu	r5,r4,100255c <udivmodsi4+0x7c>
 10024f0:	28001a16 	blt	r5,zero,100255c <udivmodsi4+0x7c>
 10024f4:	00800044 	movi	r2,1
 10024f8:	0007883a 	mov	r3,zero
 10024fc:	01c007c4 	movi	r7,31
 1002500:	00000306 	br	1002510 <udivmodsi4+0x30>
 1002504:	19c01326 	beq	r3,r7,1002554 <udivmodsi4+0x74>
 1002508:	18c00044 	addi	r3,r3,1
 100250c:	28000416 	blt	r5,zero,1002520 <udivmodsi4+0x40>
 1002510:	294b883a 	add	r5,r5,r5
 1002514:	1085883a 	add	r2,r2,r2
 1002518:	293ffa36 	bltu	r5,r4,1002504 <udivmodsi4+0x24>
 100251c:	10000d26 	beq	r2,zero,1002554 <udivmodsi4+0x74>
 1002520:	0007883a 	mov	r3,zero
 1002524:	21400236 	bltu	r4,r5,1002530 <udivmodsi4+0x50>
 1002528:	2149c83a 	sub	r4,r4,r5
 100252c:	1886b03a 	or	r3,r3,r2
 1002530:	1004d07a 	srli	r2,r2,1
 1002534:	280ad07a 	srli	r5,r5,1
 1002538:	103ffa1e 	bne	r2,zero,1002524 <udivmodsi4+0x44>
 100253c:	30000226 	beq	r6,zero,1002548 <udivmodsi4+0x68>
 1002540:	2005883a 	mov	r2,r4
 1002544:	f800283a 	ret
 1002548:	1809883a 	mov	r4,r3
 100254c:	2005883a 	mov	r2,r4
 1002550:	f800283a 	ret
 1002554:	0007883a 	mov	r3,zero
 1002558:	003ff806 	br	100253c <udivmodsi4+0x5c>
 100255c:	00800044 	movi	r2,1
 1002560:	0007883a 	mov	r3,zero
 1002564:	003fef06 	br	1002524 <udivmodsi4+0x44>

01002568 <__divsi3>:
 1002568:	f811883a 	mov	r8,ra
 100256c:	100c3d80 	call	100c3d8 <_mcount>
 1002570:	403f883a 	mov	ra,r8
 1002574:	defffe04 	addi	sp,sp,-8
 1002578:	dfc00115 	stw	ra,4(sp)
 100257c:	dc000015 	stw	r16,0(sp)
 1002580:	0021883a 	mov	r16,zero
 1002584:	20000c16 	blt	r4,zero,10025b8 <__divsi3+0x50>
 1002588:	000d883a 	mov	r6,zero
 100258c:	28000e16 	blt	r5,zero,10025c8 <__divsi3+0x60>
 1002590:	10024e00 	call	10024e0 <udivmodsi4>
 1002594:	1007883a 	mov	r3,r2
 1002598:	8005003a 	cmpeq	r2,r16,zero
 100259c:	1000011e 	bne	r2,zero,10025a4 <__divsi3+0x3c>
 10025a0:	00c7c83a 	sub	r3,zero,r3
 10025a4:	1805883a 	mov	r2,r3
 10025a8:	dfc00117 	ldw	ra,4(sp)
 10025ac:	dc000017 	ldw	r16,0(sp)
 10025b0:	dec00204 	addi	sp,sp,8
 10025b4:	f800283a 	ret
 10025b8:	0109c83a 	sub	r4,zero,r4
 10025bc:	04000044 	movi	r16,1
 10025c0:	000d883a 	mov	r6,zero
 10025c4:	283ff20e 	bge	r5,zero,1002590 <__divsi3+0x28>
 10025c8:	014bc83a 	sub	r5,zero,r5
 10025cc:	8021003a 	cmpeq	r16,r16,zero
 10025d0:	003fef06 	br	1002590 <__divsi3+0x28>

010025d4 <__modsi3>:
 10025d4:	f811883a 	mov	r8,ra
 10025d8:	100c3d80 	call	100c3d8 <_mcount>
 10025dc:	403f883a 	mov	ra,r8
 10025e0:	deffff04 	addi	sp,sp,-4
 10025e4:	dfc00015 	stw	ra,0(sp)
 10025e8:	01800044 	movi	r6,1
 10025ec:	2807883a 	mov	r3,r5
 10025f0:	20000416 	blt	r4,zero,1002604 <__modsi3+0x30>
 10025f4:	28000c16 	blt	r5,zero,1002628 <__modsi3+0x54>
 10025f8:	dfc00017 	ldw	ra,0(sp)
 10025fc:	dec00104 	addi	sp,sp,4
 1002600:	10024e01 	jmpi	10024e0 <udivmodsi4>
 1002604:	0109c83a 	sub	r4,zero,r4
 1002608:	28000b16 	blt	r5,zero,1002638 <__modsi3+0x64>
 100260c:	180b883a 	mov	r5,r3
 1002610:	01800044 	movi	r6,1
 1002614:	10024e00 	call	10024e0 <udivmodsi4>
 1002618:	0085c83a 	sub	r2,zero,r2
 100261c:	dfc00017 	ldw	ra,0(sp)
 1002620:	dec00104 	addi	sp,sp,4
 1002624:	f800283a 	ret
 1002628:	014bc83a 	sub	r5,zero,r5
 100262c:	dfc00017 	ldw	ra,0(sp)
 1002630:	dec00104 	addi	sp,sp,4
 1002634:	10024e01 	jmpi	10024e0 <udivmodsi4>
 1002638:	0147c83a 	sub	r3,zero,r5
 100263c:	003ff306 	br	100260c <__modsi3+0x38>

01002640 <__udivsi3>:
 1002640:	f811883a 	mov	r8,ra
 1002644:	100c3d80 	call	100c3d8 <_mcount>
 1002648:	403f883a 	mov	ra,r8
 100264c:	000d883a 	mov	r6,zero
 1002650:	10024e01 	jmpi	10024e0 <udivmodsi4>

01002654 <__umodsi3>:
 1002654:	f811883a 	mov	r8,ra
 1002658:	100c3d80 	call	100c3d8 <_mcount>
 100265c:	403f883a 	mov	ra,r8
 1002660:	01800044 	movi	r6,1
 1002664:	10024e01 	jmpi	10024e0 <udivmodsi4>

01002668 <__mulsi3>:
 1002668:	f811883a 	mov	r8,ra
 100266c:	100c3d80 	call	100c3d8 <_mcount>
 1002670:	403f883a 	mov	ra,r8
 1002674:	20000a26 	beq	r4,zero,10026a0 <__mulsi3+0x38>
 1002678:	0007883a 	mov	r3,zero
 100267c:	2080004c 	andi	r2,r4,1
 1002680:	1005003a 	cmpeq	r2,r2,zero
 1002684:	2008d07a 	srli	r4,r4,1
 1002688:	1000011e 	bne	r2,zero,1002690 <__mulsi3+0x28>
 100268c:	1947883a 	add	r3,r3,r5
 1002690:	294b883a 	add	r5,r5,r5
 1002694:	203ff91e 	bne	r4,zero,100267c <__mulsi3+0x14>
 1002698:	1805883a 	mov	r2,r3
 100269c:	f800283a 	ret
 10026a0:	0007883a 	mov	r3,zero
 10026a4:	1805883a 	mov	r2,r3
 10026a8:	f800283a 	ret

010026ac <__muldi3>:
 10026ac:	f811883a 	mov	r8,ra
 10026b0:	100c3d80 	call	100c3d8 <_mcount>
 10026b4:	403f883a 	mov	ra,r8
 10026b8:	defff204 	addi	sp,sp,-56
 10026bc:	dfc00d15 	stw	ra,52(sp)
 10026c0:	df000c15 	stw	fp,48(sp)
 10026c4:	ddc00b15 	stw	r23,44(sp)
 10026c8:	dd800a15 	stw	r22,40(sp)
 10026cc:	dd400915 	stw	r21,36(sp)
 10026d0:	dd000815 	stw	r20,32(sp)
 10026d4:	dcc00715 	stw	r19,28(sp)
 10026d8:	dc800615 	stw	r18,24(sp)
 10026dc:	dc400515 	stw	r17,20(sp)
 10026e0:	dc000415 	stw	r16,16(sp)
 10026e4:	3038d43a 	srli	fp,r6,16
 10026e8:	343fffcc 	andi	r16,r6,65535
 10026ec:	2028d43a 	srli	r20,r4,16
 10026f0:	247fffcc 	andi	r17,r4,65535
 10026f4:	2827883a 	mov	r19,r5
 10026f8:	d9000015 	stw	r4,0(sp)
 10026fc:	d9400115 	stw	r5,4(sp)
 1002700:	8809883a 	mov	r4,r17
 1002704:	800b883a 	mov	r5,r16
 1002708:	302d883a 	mov	r22,r6
 100270c:	d9800215 	stw	r6,8(sp)
 1002710:	d9c00315 	stw	r7,12(sp)
 1002714:	10026680 	call	1002668 <__mulsi3>
 1002718:	8809883a 	mov	r4,r17
 100271c:	e00b883a 	mov	r5,fp
 1002720:	102b883a 	mov	r21,r2
 1002724:	10026680 	call	1002668 <__mulsi3>
 1002728:	800b883a 	mov	r5,r16
 100272c:	a009883a 	mov	r4,r20
 1002730:	1023883a 	mov	r17,r2
 1002734:	10026680 	call	1002668 <__mulsi3>
 1002738:	a009883a 	mov	r4,r20
 100273c:	e00b883a 	mov	r5,fp
 1002740:	1021883a 	mov	r16,r2
 1002744:	10026680 	call	1002668 <__mulsi3>
 1002748:	a8ffffcc 	andi	r3,r21,65535
 100274c:	a82ad43a 	srli	r21,r21,16
 1002750:	8c23883a 	add	r17,r17,r16
 1002754:	1011883a 	mov	r8,r2
 1002758:	ac6b883a 	add	r21,r21,r17
 100275c:	a804943a 	slli	r2,r21,16
 1002760:	b009883a 	mov	r4,r22
 1002764:	980b883a 	mov	r5,r19
 1002768:	10c7883a 	add	r3,r2,r3
 100276c:	a812d43a 	srli	r9,r21,16
 1002770:	180d883a 	mov	r6,r3
 1002774:	ac00022e 	bgeu	r21,r16,1002780 <__muldi3+0xd4>
 1002778:	00800074 	movhi	r2,1
 100277c:	4091883a 	add	r8,r8,r2
 1002780:	4267883a 	add	r19,r8,r9
 1002784:	302d883a 	mov	r22,r6
 1002788:	10026680 	call	1002668 <__mulsi3>
 100278c:	d9400317 	ldw	r5,12(sp)
 1002790:	d9000017 	ldw	r4,0(sp)
 1002794:	1023883a 	mov	r17,r2
 1002798:	10026680 	call	1002668 <__mulsi3>
 100279c:	14cb883a 	add	r5,r2,r19
 10027a0:	894b883a 	add	r5,r17,r5
 10027a4:	b005883a 	mov	r2,r22
 10027a8:	2807883a 	mov	r3,r5
 10027ac:	dfc00d17 	ldw	ra,52(sp)
 10027b0:	df000c17 	ldw	fp,48(sp)
 10027b4:	ddc00b17 	ldw	r23,44(sp)
 10027b8:	dd800a17 	ldw	r22,40(sp)
 10027bc:	dd400917 	ldw	r21,36(sp)
 10027c0:	dd000817 	ldw	r20,32(sp)
 10027c4:	dcc00717 	ldw	r19,28(sp)
 10027c8:	dc800617 	ldw	r18,24(sp)
 10027cc:	dc400517 	ldw	r17,20(sp)
 10027d0:	dc000417 	ldw	r16,16(sp)
 10027d4:	dec00e04 	addi	sp,sp,56
 10027d8:	f800283a 	ret

010027dc <__clzsi2>:
 10027dc:	f811883a 	mov	r8,ra
 10027e0:	100c3d80 	call	100c3d8 <_mcount>
 10027e4:	403f883a 	mov	ra,r8
 10027e8:	00bfffd4 	movui	r2,65535
 10027ec:	11000e36 	bltu	r2,r4,1002828 <__clzsi2+0x4c>
 10027f0:	00803fc4 	movi	r2,255
 10027f4:	01400204 	movi	r5,8
 10027f8:	0007883a 	mov	r3,zero
 10027fc:	11001036 	bltu	r2,r4,1002840 <__clzsi2+0x64>
 1002800:	000b883a 	mov	r5,zero
 1002804:	20c6d83a 	srl	r3,r4,r3
 1002808:	008040b4 	movhi	r2,258
 100280c:	10a7ab04 	addi	r2,r2,-24916
 1002810:	1887883a 	add	r3,r3,r2
 1002814:	18800003 	ldbu	r2,0(r3)
 1002818:	00c00804 	movi	r3,32
 100281c:	2885883a 	add	r2,r5,r2
 1002820:	1885c83a 	sub	r2,r3,r2
 1002824:	f800283a 	ret
 1002828:	01400404 	movi	r5,16
 100282c:	00804034 	movhi	r2,256
 1002830:	10bfffc4 	addi	r2,r2,-1
 1002834:	2807883a 	mov	r3,r5
 1002838:	113ff22e 	bgeu	r2,r4,1002804 <__clzsi2+0x28>
 100283c:	01400604 	movi	r5,24
 1002840:	2807883a 	mov	r3,r5
 1002844:	20c6d83a 	srl	r3,r4,r3
 1002848:	008040b4 	movhi	r2,258
 100284c:	10a7ab04 	addi	r2,r2,-24916
 1002850:	1887883a 	add	r3,r3,r2
 1002854:	18800003 	ldbu	r2,0(r3)
 1002858:	00c00804 	movi	r3,32
 100285c:	2885883a 	add	r2,r5,r2
 1002860:	1885c83a 	sub	r2,r3,r2
 1002864:	f800283a 	ret

01002868 <__pack_d>:
 1002868:	f811883a 	mov	r8,ra
 100286c:	100c3d80 	call	100c3d8 <_mcount>
 1002870:	403f883a 	mov	ra,r8
 1002874:	defffd04 	addi	sp,sp,-12
 1002878:	dc800215 	stw	r18,8(sp)
 100287c:	dc400115 	stw	r17,4(sp)
 1002880:	dc000015 	stw	r16,0(sp)
 1002884:	20c00017 	ldw	r3,0(r4)
 1002888:	00800044 	movi	r2,1
 100288c:	22000317 	ldw	r8,12(r4)
 1002890:	001f883a 	mov	r15,zero
 1002894:	22400417 	ldw	r9,16(r4)
 1002898:	24000117 	ldw	r16,4(r4)
 100289c:	10c0552e 	bgeu	r2,r3,10029f4 <__pack_d+0x18c>
 10028a0:	00800104 	movi	r2,4
 10028a4:	18804f26 	beq	r3,r2,10029e4 <__pack_d+0x17c>
 10028a8:	00800084 	movi	r2,2
 10028ac:	18800226 	beq	r3,r2,10028b8 <__pack_d+0x50>
 10028b0:	4244b03a 	or	r2,r8,r9
 10028b4:	10001a1e 	bne	r2,zero,1002920 <__pack_d+0xb8>
 10028b8:	000d883a 	mov	r6,zero
 10028bc:	000f883a 	mov	r7,zero
 10028c0:	0011883a 	mov	r8,zero
 10028c4:	00800434 	movhi	r2,16
 10028c8:	10bfffc4 	addi	r2,r2,-1
 10028cc:	301d883a 	mov	r14,r6
 10028d0:	3884703a 	and	r2,r7,r2
 10028d4:	400a953a 	slli	r5,r8,20
 10028d8:	79bffc2c 	andhi	r6,r15,65520
 10028dc:	308cb03a 	or	r6,r6,r2
 10028e0:	00e00434 	movhi	r3,32784
 10028e4:	18ffffc4 	addi	r3,r3,-1
 10028e8:	800497fa 	slli	r2,r16,31
 10028ec:	30c6703a 	and	r3,r6,r3
 10028f0:	1946b03a 	or	r3,r3,r5
 10028f4:	01600034 	movhi	r5,32768
 10028f8:	297fffc4 	addi	r5,r5,-1
 10028fc:	194a703a 	and	r5,r3,r5
 1002900:	288ab03a 	or	r5,r5,r2
 1002904:	2807883a 	mov	r3,r5
 1002908:	7005883a 	mov	r2,r14
 100290c:	dc800217 	ldw	r18,8(sp)
 1002910:	dc400117 	ldw	r17,4(sp)
 1002914:	dc000017 	ldw	r16,0(sp)
 1002918:	dec00304 	addi	sp,sp,12
 100291c:	f800283a 	ret
 1002920:	21000217 	ldw	r4,8(r4)
 1002924:	00bf0084 	movi	r2,-1022
 1002928:	20803f16 	blt	r4,r2,1002a28 <__pack_d+0x1c0>
 100292c:	0080ffc4 	movi	r2,1023
 1002930:	11002c16 	blt	r2,r4,10029e4 <__pack_d+0x17c>
 1002934:	00803fc4 	movi	r2,255
 1002938:	408c703a 	and	r6,r8,r2
 100293c:	00802004 	movi	r2,128
 1002940:	0007883a 	mov	r3,zero
 1002944:	000f883a 	mov	r7,zero
 1002948:	2280ffc4 	addi	r10,r4,1023
 100294c:	30801e26 	beq	r6,r2,10029c8 <__pack_d+0x160>
 1002950:	00801fc4 	movi	r2,127
 1002954:	4089883a 	add	r4,r8,r2
 1002958:	220d803a 	cmpltu	r6,r4,r8
 100295c:	324d883a 	add	r6,r6,r9
 1002960:	2011883a 	mov	r8,r4
 1002964:	3013883a 	mov	r9,r6
 1002968:	00880034 	movhi	r2,8192
 100296c:	10bfffc4 	addi	r2,r2,-1
 1002970:	12400d36 	bltu	r2,r9,10029a8 <__pack_d+0x140>
 1002974:	4804963a 	slli	r2,r9,24
 1002978:	400cd23a 	srli	r6,r8,8
 100297c:	480ed23a 	srli	r7,r9,8
 1002980:	013fffc4 	movi	r4,-1
 1002984:	118cb03a 	or	r6,r2,r6
 1002988:	01400434 	movhi	r5,16
 100298c:	297fffc4 	addi	r5,r5,-1
 1002990:	3104703a 	and	r2,r6,r4
 1002994:	3946703a 	and	r3,r7,r5
 1002998:	5201ffcc 	andi	r8,r10,2047
 100299c:	100d883a 	mov	r6,r2
 10029a0:	180f883a 	mov	r7,r3
 10029a4:	003fc706 	br	10028c4 <__pack_d+0x5c>
 10029a8:	480897fa 	slli	r4,r9,31
 10029ac:	4004d07a 	srli	r2,r8,1
 10029b0:	4806d07a 	srli	r3,r9,1
 10029b4:	52800044 	addi	r10,r10,1
 10029b8:	2084b03a 	or	r2,r4,r2
 10029bc:	1011883a 	mov	r8,r2
 10029c0:	1813883a 	mov	r9,r3
 10029c4:	003feb06 	br	1002974 <__pack_d+0x10c>
 10029c8:	383fe11e 	bne	r7,zero,1002950 <__pack_d+0xe8>
 10029cc:	01004004 	movi	r4,256
 10029d0:	4104703a 	and	r2,r8,r4
 10029d4:	10c4b03a 	or	r2,r2,r3
 10029d8:	103fe326 	beq	r2,zero,1002968 <__pack_d+0x100>
 10029dc:	3005883a 	mov	r2,r6
 10029e0:	003fdc06 	br	1002954 <__pack_d+0xec>
 10029e4:	000d883a 	mov	r6,zero
 10029e8:	000f883a 	mov	r7,zero
 10029ec:	0201ffc4 	movi	r8,2047
 10029f0:	003fb406 	br	10028c4 <__pack_d+0x5c>
 10029f4:	0005883a 	mov	r2,zero
 10029f8:	00c00234 	movhi	r3,8
 10029fc:	408cb03a 	or	r6,r8,r2
 1002a00:	48ceb03a 	or	r7,r9,r3
 1002a04:	013fffc4 	movi	r4,-1
 1002a08:	01400434 	movhi	r5,16
 1002a0c:	297fffc4 	addi	r5,r5,-1
 1002a10:	3104703a 	and	r2,r6,r4
 1002a14:	3946703a 	and	r3,r7,r5
 1002a18:	100d883a 	mov	r6,r2
 1002a1c:	180f883a 	mov	r7,r3
 1002a20:	0201ffc4 	movi	r8,2047
 1002a24:	003fa706 	br	10028c4 <__pack_d+0x5c>
 1002a28:	1109c83a 	sub	r4,r2,r4
 1002a2c:	00800e04 	movi	r2,56
 1002a30:	11004316 	blt	r2,r4,1002b40 <__pack_d+0x2d8>
 1002a34:	21fff804 	addi	r7,r4,-32
 1002a38:	38004516 	blt	r7,zero,1002b50 <__pack_d+0x2e8>
 1002a3c:	49d8d83a 	srl	r12,r9,r7
 1002a40:	001b883a 	mov	r13,zero
 1002a44:	0023883a 	mov	r17,zero
 1002a48:	01400044 	movi	r5,1
 1002a4c:	0025883a 	mov	r18,zero
 1002a50:	38004716 	blt	r7,zero,1002b70 <__pack_d+0x308>
 1002a54:	29d6983a 	sll	r11,r5,r7
 1002a58:	0015883a 	mov	r10,zero
 1002a5c:	00bfffc4 	movi	r2,-1
 1002a60:	5089883a 	add	r4,r10,r2
 1002a64:	588b883a 	add	r5,r11,r2
 1002a68:	228d803a 	cmpltu	r6,r4,r10
 1002a6c:	314b883a 	add	r5,r6,r5
 1002a70:	4104703a 	and	r2,r8,r4
 1002a74:	4946703a 	and	r3,r9,r5
 1002a78:	10c4b03a 	or	r2,r2,r3
 1002a7c:	10000226 	beq	r2,zero,1002a88 <__pack_d+0x220>
 1002a80:	04400044 	movi	r17,1
 1002a84:	0025883a 	mov	r18,zero
 1002a88:	00803fc4 	movi	r2,255
 1002a8c:	644eb03a 	or	r7,r12,r17
 1002a90:	3892703a 	and	r9,r7,r2
 1002a94:	00802004 	movi	r2,128
 1002a98:	6c90b03a 	or	r8,r13,r18
 1002a9c:	0015883a 	mov	r10,zero
 1002aa0:	48801626 	beq	r9,r2,1002afc <__pack_d+0x294>
 1002aa4:	01001fc4 	movi	r4,127
 1002aa8:	3905883a 	add	r2,r7,r4
 1002aac:	11cd803a 	cmpltu	r6,r2,r7
 1002ab0:	320d883a 	add	r6,r6,r8
 1002ab4:	100f883a 	mov	r7,r2
 1002ab8:	00840034 	movhi	r2,4096
 1002abc:	10bfffc4 	addi	r2,r2,-1
 1002ac0:	3011883a 	mov	r8,r6
 1002ac4:	0007883a 	mov	r3,zero
 1002ac8:	11801b36 	bltu	r2,r6,1002b38 <__pack_d+0x2d0>
 1002acc:	4004963a 	slli	r2,r8,24
 1002ad0:	3808d23a 	srli	r4,r7,8
 1002ad4:	400ad23a 	srli	r5,r8,8
 1002ad8:	1813883a 	mov	r9,r3
 1002adc:	1108b03a 	or	r4,r2,r4
 1002ae0:	00bfffc4 	movi	r2,-1
 1002ae4:	00c00434 	movhi	r3,16
 1002ae8:	18ffffc4 	addi	r3,r3,-1
 1002aec:	208c703a 	and	r6,r4,r2
 1002af0:	28ce703a 	and	r7,r5,r3
 1002af4:	4a01ffcc 	andi	r8,r9,2047
 1002af8:	003f7206 	br	10028c4 <__pack_d+0x5c>
 1002afc:	503fe91e 	bne	r10,zero,1002aa4 <__pack_d+0x23c>
 1002b00:	01004004 	movi	r4,256
 1002b04:	3904703a 	and	r2,r7,r4
 1002b08:	0007883a 	mov	r3,zero
 1002b0c:	10c4b03a 	or	r2,r2,r3
 1002b10:	10000626 	beq	r2,zero,1002b2c <__pack_d+0x2c4>
 1002b14:	3a45883a 	add	r2,r7,r9
 1002b18:	11cd803a 	cmpltu	r6,r2,r7
 1002b1c:	320d883a 	add	r6,r6,r8
 1002b20:	100f883a 	mov	r7,r2
 1002b24:	3011883a 	mov	r8,r6
 1002b28:	0007883a 	mov	r3,zero
 1002b2c:	00840034 	movhi	r2,4096
 1002b30:	10bfffc4 	addi	r2,r2,-1
 1002b34:	123fe52e 	bgeu	r2,r8,1002acc <__pack_d+0x264>
 1002b38:	00c00044 	movi	r3,1
 1002b3c:	003fe306 	br	1002acc <__pack_d+0x264>
 1002b40:	0009883a 	mov	r4,zero
 1002b44:	0013883a 	mov	r9,zero
 1002b48:	000b883a 	mov	r5,zero
 1002b4c:	003fe406 	br	1002ae0 <__pack_d+0x278>
 1002b50:	4a47883a 	add	r3,r9,r9
 1002b54:	008007c4 	movi	r2,31
 1002b58:	1105c83a 	sub	r2,r2,r4
 1002b5c:	1886983a 	sll	r3,r3,r2
 1002b60:	4118d83a 	srl	r12,r8,r4
 1002b64:	491ad83a 	srl	r13,r9,r4
 1002b68:	1b18b03a 	or	r12,r3,r12
 1002b6c:	003fb506 	br	1002a44 <__pack_d+0x1dc>
 1002b70:	2806d07a 	srli	r3,r5,1
 1002b74:	008007c4 	movi	r2,31
 1002b78:	1105c83a 	sub	r2,r2,r4
 1002b7c:	1896d83a 	srl	r11,r3,r2
 1002b80:	2914983a 	sll	r10,r5,r4
 1002b84:	003fb506 	br	1002a5c <__pack_d+0x1f4>

01002b88 <__unpack_d>:
 1002b88:	f811883a 	mov	r8,ra
 1002b8c:	100c3d80 	call	100c3d8 <_mcount>
 1002b90:	403f883a 	mov	ra,r8
 1002b94:	20c00117 	ldw	r3,4(r4)
 1002b98:	22400017 	ldw	r9,0(r4)
 1002b9c:	00800434 	movhi	r2,16
 1002ba0:	10bfffc4 	addi	r2,r2,-1
 1002ba4:	1808d53a 	srli	r4,r3,20
 1002ba8:	180cd7fa 	srli	r6,r3,31
 1002bac:	1894703a 	and	r10,r3,r2
 1002bb0:	2201ffcc 	andi	r8,r4,2047
 1002bb4:	281b883a 	mov	r13,r5
 1002bb8:	4817883a 	mov	r11,r9
 1002bbc:	29800115 	stw	r6,4(r5)
 1002bc0:	5019883a 	mov	r12,r10
 1002bc4:	40001e1e 	bne	r8,zero,1002c40 <__unpack_d+0xb8>
 1002bc8:	4a84b03a 	or	r2,r9,r10
 1002bcc:	10001926 	beq	r2,zero,1002c34 <__unpack_d+0xac>
 1002bd0:	4804d63a 	srli	r2,r9,24
 1002bd4:	500c923a 	slli	r6,r10,8
 1002bd8:	013f0084 	movi	r4,-1022
 1002bdc:	00c40034 	movhi	r3,4096
 1002be0:	18ffffc4 	addi	r3,r3,-1
 1002be4:	118cb03a 	or	r6,r2,r6
 1002be8:	008000c4 	movi	r2,3
 1002bec:	480a923a 	slli	r5,r9,8
 1002bf0:	68800015 	stw	r2,0(r13)
 1002bf4:	69000215 	stw	r4,8(r13)
 1002bf8:	19800b36 	bltu	r3,r6,1002c28 <__unpack_d+0xa0>
 1002bfc:	200f883a 	mov	r7,r4
 1002c00:	1811883a 	mov	r8,r3
 1002c04:	2945883a 	add	r2,r5,r5
 1002c08:	1149803a 	cmpltu	r4,r2,r5
 1002c0c:	3187883a 	add	r3,r6,r6
 1002c10:	20c9883a 	add	r4,r4,r3
 1002c14:	100b883a 	mov	r5,r2
 1002c18:	200d883a 	mov	r6,r4
 1002c1c:	39ffffc4 	addi	r7,r7,-1
 1002c20:	413ff82e 	bgeu	r8,r4,1002c04 <__unpack_d+0x7c>
 1002c24:	69c00215 	stw	r7,8(r13)
 1002c28:	69800415 	stw	r6,16(r13)
 1002c2c:	69400315 	stw	r5,12(r13)
 1002c30:	f800283a 	ret
 1002c34:	00800084 	movi	r2,2
 1002c38:	28800015 	stw	r2,0(r5)
 1002c3c:	f800283a 	ret
 1002c40:	0081ffc4 	movi	r2,2047
 1002c44:	40800f26 	beq	r8,r2,1002c84 <__unpack_d+0xfc>
 1002c48:	480cd63a 	srli	r6,r9,24
 1002c4c:	5006923a 	slli	r3,r10,8
 1002c50:	4804923a 	slli	r2,r9,8
 1002c54:	0009883a 	mov	r4,zero
 1002c58:	30c6b03a 	or	r3,r6,r3
 1002c5c:	01440034 	movhi	r5,4096
 1002c60:	110cb03a 	or	r6,r2,r4
 1002c64:	423f0044 	addi	r8,r8,-1023
 1002c68:	194eb03a 	or	r7,r3,r5
 1002c6c:	008000c4 	movi	r2,3
 1002c70:	69c00415 	stw	r7,16(r13)
 1002c74:	6a000215 	stw	r8,8(r13)
 1002c78:	68800015 	stw	r2,0(r13)
 1002c7c:	69800315 	stw	r6,12(r13)
 1002c80:	f800283a 	ret
 1002c84:	4a84b03a 	or	r2,r9,r10
 1002c88:	1000031e 	bne	r2,zero,1002c98 <__unpack_d+0x110>
 1002c8c:	00800104 	movi	r2,4
 1002c90:	28800015 	stw	r2,0(r5)
 1002c94:	f800283a 	ret
 1002c98:	0009883a 	mov	r4,zero
 1002c9c:	01400234 	movhi	r5,8
 1002ca0:	4904703a 	and	r2,r9,r4
 1002ca4:	5146703a 	and	r3,r10,r5
 1002ca8:	10c4b03a 	or	r2,r2,r3
 1002cac:	10000526 	beq	r2,zero,1002cc4 <__unpack_d+0x13c>
 1002cb0:	00800044 	movi	r2,1
 1002cb4:	68800015 	stw	r2,0(r13)
 1002cb8:	6b000415 	stw	r12,16(r13)
 1002cbc:	6ac00315 	stw	r11,12(r13)
 1002cc0:	f800283a 	ret
 1002cc4:	68000015 	stw	zero,0(r13)
 1002cc8:	003ffb06 	br	1002cb8 <__unpack_d+0x130>

01002ccc <printf>:
 1002ccc:	f811883a 	mov	r8,ra
 1002cd0:	100c3d80 	call	100c3d8 <_mcount>
 1002cd4:	403f883a 	mov	ra,r8
 1002cd8:	defffb04 	addi	sp,sp,-20
 1002cdc:	dfc00115 	stw	ra,4(sp)
 1002ce0:	d9400215 	stw	r5,8(sp)
 1002ce4:	d9800315 	stw	r6,12(sp)
 1002ce8:	d9c00415 	stw	r7,16(sp)
 1002cec:	008040f4 	movhi	r2,259
 1002cf0:	10a00704 	addi	r2,r2,-32740
 1002cf4:	10c00017 	ldw	r3,0(r2)
 1002cf8:	200b883a 	mov	r5,r4
 1002cfc:	d8800204 	addi	r2,sp,8
 1002d00:	19000217 	ldw	r4,8(r3)
 1002d04:	100d883a 	mov	r6,r2
 1002d08:	d8800015 	stw	r2,0(sp)
 1002d0c:	1004e180 	call	1004e18 <__vfprintf_internal>
 1002d10:	dfc00117 	ldw	ra,4(sp)
 1002d14:	dec00504 	addi	sp,sp,20
 1002d18:	f800283a 	ret

01002d1c <_printf_r>:
 1002d1c:	f811883a 	mov	r8,ra
 1002d20:	100c3d80 	call	100c3d8 <_mcount>
 1002d24:	403f883a 	mov	ra,r8
 1002d28:	defffc04 	addi	sp,sp,-16
 1002d2c:	dfc00115 	stw	ra,4(sp)
 1002d30:	d9800215 	stw	r6,8(sp)
 1002d34:	d9c00315 	stw	r7,12(sp)
 1002d38:	280d883a 	mov	r6,r5
 1002d3c:	21400217 	ldw	r5,8(r4)
 1002d40:	d8c00204 	addi	r3,sp,8
 1002d44:	180f883a 	mov	r7,r3
 1002d48:	d8c00015 	stw	r3,0(sp)
 1002d4c:	1002f480 	call	1002f48 <___vfprintf_internal_r>
 1002d50:	dfc00117 	ldw	ra,4(sp)
 1002d54:	dec00404 	addi	sp,sp,16
 1002d58:	f800283a 	ret

01002d5c <putchar>:
 1002d5c:	f811883a 	mov	r8,ra
 1002d60:	100c3d80 	call	100c3d8 <_mcount>
 1002d64:	403f883a 	mov	ra,r8
 1002d68:	008040f4 	movhi	r2,259
 1002d6c:	10a00704 	addi	r2,r2,-32740
 1002d70:	11800017 	ldw	r6,0(r2)
 1002d74:	200b883a 	mov	r5,r4
 1002d78:	3009883a 	mov	r4,r6
 1002d7c:	31800217 	ldw	r6,8(r6)
 1002d80:	10097b81 	jmpi	10097b8 <_putc_r>

01002d84 <_putchar_r>:
 1002d84:	f811883a 	mov	r8,ra
 1002d88:	100c3d80 	call	100c3d8 <_mcount>
 1002d8c:	403f883a 	mov	ra,r8
 1002d90:	21800217 	ldw	r6,8(r4)
 1002d94:	10097b81 	jmpi	10097b8 <_putc_r>

01002d98 <_puts_r>:
 1002d98:	f811883a 	mov	r8,ra
 1002d9c:	100c3d80 	call	100c3d8 <_mcount>
 1002da0:	403f883a 	mov	ra,r8
 1002da4:	defff604 	addi	sp,sp,-40
 1002da8:	dfc00915 	stw	ra,36(sp)
 1002dac:	dcc00815 	stw	r19,32(sp)
 1002db0:	dc400715 	stw	r17,28(sp)
 1002db4:	2023883a 	mov	r17,r4
 1002db8:	2809883a 	mov	r4,r5
 1002dbc:	2827883a 	mov	r19,r5
 1002dc0:	1002e640 	call	1002e64 <strlen>
 1002dc4:	89400217 	ldw	r5,8(r17)
 1002dc8:	00c040b4 	movhi	r3,258
 1002dcc:	18e7eb04 	addi	r3,r3,-24660
 1002dd0:	01c00044 	movi	r7,1
 1002dd4:	12000044 	addi	r8,r2,1
 1002dd8:	d8c00515 	stw	r3,20(sp)
 1002ddc:	d9c00615 	stw	r7,24(sp)
 1002de0:	d8c00304 	addi	r3,sp,12
 1002de4:	01c00084 	movi	r7,2
 1002de8:	8809883a 	mov	r4,r17
 1002dec:	d80d883a 	mov	r6,sp
 1002df0:	d8c00015 	stw	r3,0(sp)
 1002df4:	dcc00315 	stw	r19,12(sp)
 1002df8:	da000215 	stw	r8,8(sp)
 1002dfc:	d9c00115 	stw	r7,4(sp)
 1002e00:	d8800415 	stw	r2,16(sp)
 1002e04:	10071dc0 	call	10071dc <__sfvwrite_r>
 1002e08:	00ffffc4 	movi	r3,-1
 1002e0c:	10000626 	beq	r2,zero,1002e28 <_puts_r+0x90>
 1002e10:	1805883a 	mov	r2,r3
 1002e14:	dfc00917 	ldw	ra,36(sp)
 1002e18:	dcc00817 	ldw	r19,32(sp)
 1002e1c:	dc400717 	ldw	r17,28(sp)
 1002e20:	dec00a04 	addi	sp,sp,40
 1002e24:	f800283a 	ret
 1002e28:	00c00284 	movi	r3,10
 1002e2c:	1805883a 	mov	r2,r3
 1002e30:	dfc00917 	ldw	ra,36(sp)
 1002e34:	dcc00817 	ldw	r19,32(sp)
 1002e38:	dc400717 	ldw	r17,28(sp)
 1002e3c:	dec00a04 	addi	sp,sp,40
 1002e40:	f800283a 	ret

01002e44 <puts>:
 1002e44:	f811883a 	mov	r8,ra
 1002e48:	100c3d80 	call	100c3d8 <_mcount>
 1002e4c:	403f883a 	mov	ra,r8
 1002e50:	008040f4 	movhi	r2,259
 1002e54:	10a00704 	addi	r2,r2,-32740
 1002e58:	200b883a 	mov	r5,r4
 1002e5c:	11000017 	ldw	r4,0(r2)
 1002e60:	1002d981 	jmpi	1002d98 <_puts_r>

01002e64 <strlen>:
 1002e64:	f811883a 	mov	r8,ra
 1002e68:	100c3d80 	call	100c3d8 <_mcount>
 1002e6c:	403f883a 	mov	ra,r8
 1002e70:	208000cc 	andi	r2,r4,3
 1002e74:	2011883a 	mov	r8,r4
 1002e78:	1000161e 	bne	r2,zero,1002ed4 <strlen+0x70>
 1002e7c:	20c00017 	ldw	r3,0(r4)
 1002e80:	017fbff4 	movhi	r5,65279
 1002e84:	297fbfc4 	addi	r5,r5,-257
 1002e88:	01e02074 	movhi	r7,32897
 1002e8c:	39e02004 	addi	r7,r7,-32640
 1002e90:	1945883a 	add	r2,r3,r5
 1002e94:	11c4703a 	and	r2,r2,r7
 1002e98:	00c6303a 	nor	r3,zero,r3
 1002e9c:	1886703a 	and	r3,r3,r2
 1002ea0:	18000c1e 	bne	r3,zero,1002ed4 <strlen+0x70>
 1002ea4:	280d883a 	mov	r6,r5
 1002ea8:	380b883a 	mov	r5,r7
 1002eac:	21000104 	addi	r4,r4,4
 1002eb0:	20800017 	ldw	r2,0(r4)
 1002eb4:	1187883a 	add	r3,r2,r6
 1002eb8:	1946703a 	and	r3,r3,r5
 1002ebc:	0084303a 	nor	r2,zero,r2
 1002ec0:	10c4703a 	and	r2,r2,r3
 1002ec4:	103ff926 	beq	r2,zero,1002eac <strlen+0x48>
 1002ec8:	20800007 	ldb	r2,0(r4)
 1002ecc:	10000326 	beq	r2,zero,1002edc <strlen+0x78>
 1002ed0:	21000044 	addi	r4,r4,1
 1002ed4:	20800007 	ldb	r2,0(r4)
 1002ed8:	103ffd1e 	bne	r2,zero,1002ed0 <strlen+0x6c>
 1002edc:	2205c83a 	sub	r2,r4,r8
 1002ee0:	f800283a 	ret

01002ee4 <__sprint_r>:
 1002ee4:	f811883a 	mov	r8,ra
 1002ee8:	100c3d80 	call	100c3d8 <_mcount>
 1002eec:	403f883a 	mov	ra,r8
 1002ef0:	defffe04 	addi	sp,sp,-8
 1002ef4:	dfc00115 	stw	ra,4(sp)
 1002ef8:	dc000015 	stw	r16,0(sp)
 1002efc:	30800217 	ldw	r2,8(r6)
 1002f00:	3021883a 	mov	r16,r6
 1002f04:	0007883a 	mov	r3,zero
 1002f08:	1000061e 	bne	r2,zero,1002f24 <__sprint_r+0x40>
 1002f0c:	1805883a 	mov	r2,r3
 1002f10:	30000115 	stw	zero,4(r6)
 1002f14:	dfc00117 	ldw	ra,4(sp)
 1002f18:	dc000017 	ldw	r16,0(sp)
 1002f1c:	dec00204 	addi	sp,sp,8
 1002f20:	f800283a 	ret
 1002f24:	10071dc0 	call	10071dc <__sfvwrite_r>
 1002f28:	1007883a 	mov	r3,r2
 1002f2c:	1805883a 	mov	r2,r3
 1002f30:	80000115 	stw	zero,4(r16)
 1002f34:	80000215 	stw	zero,8(r16)
 1002f38:	dfc00117 	ldw	ra,4(sp)
 1002f3c:	dc000017 	ldw	r16,0(sp)
 1002f40:	dec00204 	addi	sp,sp,8
 1002f44:	f800283a 	ret

01002f48 <___vfprintf_internal_r>:
 1002f48:	f811883a 	mov	r8,ra
 1002f4c:	100c3d80 	call	100c3d8 <_mcount>
 1002f50:	403f883a 	mov	ra,r8
 1002f54:	defea404 	addi	sp,sp,-1392
 1002f58:	dfc15b15 	stw	ra,1388(sp)
 1002f5c:	df015a15 	stw	fp,1384(sp)
 1002f60:	ddc15915 	stw	r23,1380(sp)
 1002f64:	dd815815 	stw	r22,1376(sp)
 1002f68:	dd415715 	stw	r21,1372(sp)
 1002f6c:	dd015615 	stw	r20,1368(sp)
 1002f70:	dcc15515 	stw	r19,1364(sp)
 1002f74:	dc815415 	stw	r18,1360(sp)
 1002f78:	dc415315 	stw	r17,1356(sp)
 1002f7c:	dc015215 	stw	r16,1352(sp)
 1002f80:	d9c15115 	stw	r7,1348(sp)
 1002f84:	282d883a 	mov	r22,r5
 1002f88:	3021883a 	mov	r16,r6
 1002f8c:	d9014f15 	stw	r4,1340(sp)
 1002f90:	10078300 	call	1007830 <_localeconv_r>
 1002f94:	10800017 	ldw	r2,0(r2)
 1002f98:	d9c15117 	ldw	r7,1348(sp)
 1002f9c:	d8814915 	stw	r2,1316(sp)
 1002fa0:	d8814f17 	ldw	r2,1340(sp)
 1002fa4:	10000226 	beq	r2,zero,1002fb0 <___vfprintf_internal_r+0x68>
 1002fa8:	10800e17 	ldw	r2,56(r2)
 1002fac:	10020d26 	beq	r2,zero,10037e4 <___vfprintf_internal_r+0x89c>
 1002fb0:	b080030b 	ldhu	r2,12(r22)
 1002fb4:	1080020c 	andi	r2,r2,8
 1002fb8:	10020e26 	beq	r2,zero,10037f4 <___vfprintf_internal_r+0x8ac>
 1002fbc:	b0800417 	ldw	r2,16(r22)
 1002fc0:	10020c26 	beq	r2,zero,10037f4 <___vfprintf_internal_r+0x8ac>
 1002fc4:	b200030b 	ldhu	r8,12(r22)
 1002fc8:	00800284 	movi	r2,10
 1002fcc:	40c0068c 	andi	r3,r8,26
 1002fd0:	18802f1e 	bne	r3,r2,1003090 <___vfprintf_internal_r+0x148>
 1002fd4:	b080038f 	ldh	r2,14(r22)
 1002fd8:	10002d16 	blt	r2,zero,1003090 <___vfprintf_internal_r+0x148>
 1002fdc:	b240038b 	ldhu	r9,14(r22)
 1002fe0:	b2800717 	ldw	r10,28(r22)
 1002fe4:	b2c00917 	ldw	r11,36(r22)
 1002fe8:	d9014f17 	ldw	r4,1340(sp)
 1002fec:	dc402904 	addi	r17,sp,164
 1002ff0:	d8804004 	addi	r2,sp,256
 1002ff4:	00c10004 	movi	r3,1024
 1002ff8:	423fff4c 	andi	r8,r8,65533
 1002ffc:	800d883a 	mov	r6,r16
 1003000:	880b883a 	mov	r5,r17
 1003004:	da002c0d 	sth	r8,176(sp)
 1003008:	da402c8d 	sth	r9,178(sp)
 100300c:	da803015 	stw	r10,192(sp)
 1003010:	dac03215 	stw	r11,200(sp)
 1003014:	d8802d15 	stw	r2,180(sp)
 1003018:	d8c02e15 	stw	r3,184(sp)
 100301c:	d8802915 	stw	r2,164(sp)
 1003020:	d8c02b15 	stw	r3,172(sp)
 1003024:	d8002f15 	stw	zero,188(sp)
 1003028:	1002f480 	call	1002f48 <___vfprintf_internal_r>
 100302c:	d8814b15 	stw	r2,1324(sp)
 1003030:	10000416 	blt	r2,zero,1003044 <___vfprintf_internal_r+0xfc>
 1003034:	d9014f17 	ldw	r4,1340(sp)
 1003038:	880b883a 	mov	r5,r17
 100303c:	10067a00 	call	10067a0 <_fflush_r>
 1003040:	1002321e 	bne	r2,zero,100390c <___vfprintf_internal_r+0x9c4>
 1003044:	d8802c0b 	ldhu	r2,176(sp)
 1003048:	1080100c 	andi	r2,r2,64
 100304c:	10000326 	beq	r2,zero,100305c <___vfprintf_internal_r+0x114>
 1003050:	b080030b 	ldhu	r2,12(r22)
 1003054:	10801014 	ori	r2,r2,64
 1003058:	b080030d 	sth	r2,12(r22)
 100305c:	d8814b17 	ldw	r2,1324(sp)
 1003060:	dfc15b17 	ldw	ra,1388(sp)
 1003064:	df015a17 	ldw	fp,1384(sp)
 1003068:	ddc15917 	ldw	r23,1380(sp)
 100306c:	dd815817 	ldw	r22,1376(sp)
 1003070:	dd415717 	ldw	r21,1372(sp)
 1003074:	dd015617 	ldw	r20,1368(sp)
 1003078:	dcc15517 	ldw	r19,1364(sp)
 100307c:	dc815417 	ldw	r18,1360(sp)
 1003080:	dc415317 	ldw	r17,1356(sp)
 1003084:	dc015217 	ldw	r16,1352(sp)
 1003088:	dec15c04 	addi	sp,sp,1392
 100308c:	f800283a 	ret
 1003090:	0005883a 	mov	r2,zero
 1003094:	0007883a 	mov	r3,zero
 1003098:	dd401904 	addi	r21,sp,100
 100309c:	d8814215 	stw	r2,1288(sp)
 10030a0:	802f883a 	mov	r23,r16
 10030a4:	d8c14315 	stw	r3,1292(sp)
 10030a8:	d8014b15 	stw	zero,1324(sp)
 10030ac:	d8014815 	stw	zero,1312(sp)
 10030b0:	d8014415 	stw	zero,1296(sp)
 10030b4:	d8014715 	stw	zero,1308(sp)
 10030b8:	dd400c15 	stw	r21,48(sp)
 10030bc:	d8000e15 	stw	zero,56(sp)
 10030c0:	d8000d15 	stw	zero,52(sp)
 10030c4:	b8800007 	ldb	r2,0(r23)
 10030c8:	10001926 	beq	r2,zero,1003130 <___vfprintf_internal_r+0x1e8>
 10030cc:	00c00944 	movi	r3,37
 10030d0:	10c01726 	beq	r2,r3,1003130 <___vfprintf_internal_r+0x1e8>
 10030d4:	b821883a 	mov	r16,r23
 10030d8:	00000106 	br	10030e0 <___vfprintf_internal_r+0x198>
 10030dc:	10c00326 	beq	r2,r3,10030ec <___vfprintf_internal_r+0x1a4>
 10030e0:	84000044 	addi	r16,r16,1
 10030e4:	80800007 	ldb	r2,0(r16)
 10030e8:	103ffc1e 	bne	r2,zero,10030dc <___vfprintf_internal_r+0x194>
 10030ec:	85e7c83a 	sub	r19,r16,r23
 10030f0:	98000e26 	beq	r19,zero,100312c <___vfprintf_internal_r+0x1e4>
 10030f4:	dc800e17 	ldw	r18,56(sp)
 10030f8:	dc400d17 	ldw	r17,52(sp)
 10030fc:	008001c4 	movi	r2,7
 1003100:	94e5883a 	add	r18,r18,r19
 1003104:	8c400044 	addi	r17,r17,1
 1003108:	adc00015 	stw	r23,0(r21)
 100310c:	dc800e15 	stw	r18,56(sp)
 1003110:	acc00115 	stw	r19,4(r21)
 1003114:	dc400d15 	stw	r17,52(sp)
 1003118:	14428b16 	blt	r2,r17,1003b48 <___vfprintf_internal_r+0xc00>
 100311c:	ad400204 	addi	r21,r21,8
 1003120:	d9014b17 	ldw	r4,1324(sp)
 1003124:	24c9883a 	add	r4,r4,r19
 1003128:	d9014b15 	stw	r4,1324(sp)
 100312c:	802f883a 	mov	r23,r16
 1003130:	b8800007 	ldb	r2,0(r23)
 1003134:	10013c26 	beq	r2,zero,1003628 <___vfprintf_internal_r+0x6e0>
 1003138:	bdc00044 	addi	r23,r23,1
 100313c:	d8000405 	stb	zero,16(sp)
 1003140:	b8c00007 	ldb	r3,0(r23)
 1003144:	04ffffc4 	movi	r19,-1
 1003148:	d8014c15 	stw	zero,1328(sp)
 100314c:	d8014a15 	stw	zero,1320(sp)
 1003150:	d8c14d15 	stw	r3,1332(sp)
 1003154:	bdc00044 	addi	r23,r23,1
 1003158:	d9414d17 	ldw	r5,1332(sp)
 100315c:	00801604 	movi	r2,88
 1003160:	28fff804 	addi	r3,r5,-32
 1003164:	10c06036 	bltu	r2,r3,10032e8 <___vfprintf_internal_r+0x3a0>
 1003168:	18c5883a 	add	r2,r3,r3
 100316c:	1085883a 	add	r2,r2,r2
 1003170:	00c04034 	movhi	r3,256
 1003174:	18cc6104 	addi	r3,r3,12676
 1003178:	10c5883a 	add	r2,r2,r3
 100317c:	11000017 	ldw	r4,0(r2)
 1003180:	2000683a 	jmp	r4
 1003184:	010040f8 	rdprs	r4,zero,259
 1003188:	010032e8 	cmpgeui	r4,zero,203
 100318c:	010032e8 	cmpgeui	r4,zero,203
 1003190:	010040e4 	muli	r4,zero,259
 1003194:	010032e8 	cmpgeui	r4,zero,203
 1003198:	010032e8 	cmpgeui	r4,zero,203
 100319c:	010032e8 	cmpgeui	r4,zero,203
 10031a0:	010032e8 	cmpgeui	r4,zero,203
 10031a4:	010032e8 	cmpgeui	r4,zero,203
 10031a8:	010032e8 	cmpgeui	r4,zero,203
 10031ac:	01003ec4 	movi	r4,251
 10031b0:	010040d4 	movui	r4,259
 10031b4:	010032e8 	cmpgeui	r4,zero,203
 10031b8:	01003edc 	xori	r4,zero,251
 10031bc:	0100417c 	xorhi	r4,zero,261
 10031c0:	010032e8 	cmpgeui	r4,zero,203
 10031c4:	01004168 	cmpgeui	r4,zero,261
 10031c8:	01004124 	muli	r4,zero,260
 10031cc:	01004124 	muli	r4,zero,260
 10031d0:	01004124 	muli	r4,zero,260
 10031d4:	01004124 	muli	r4,zero,260
 10031d8:	01004124 	muli	r4,zero,260
 10031dc:	01004124 	muli	r4,zero,260
 10031e0:	01004124 	muli	r4,zero,260
 10031e4:	01004124 	muli	r4,zero,260
 10031e8:	01004124 	muli	r4,zero,260
 10031ec:	010032e8 	cmpgeui	r4,zero,203
 10031f0:	010032e8 	cmpgeui	r4,zero,203
 10031f4:	010032e8 	cmpgeui	r4,zero,203
 10031f8:	010032e8 	cmpgeui	r4,zero,203
 10031fc:	010032e8 	cmpgeui	r4,zero,203
 1003200:	010032e8 	cmpgeui	r4,zero,203
 1003204:	010032e8 	cmpgeui	r4,zero,203
 1003208:	010032e8 	cmpgeui	r4,zero,203
 100320c:	010032e8 	cmpgeui	r4,zero,203
 1003210:	010032e8 	cmpgeui	r4,zero,203
 1003214:	01003940 	call	100394 <__ram_exceptions_end+0x801c8>
 1003218:	01003fac 	andhi	r4,zero,254
 100321c:	010032e8 	cmpgeui	r4,zero,203
 1003220:	01003fac 	andhi	r4,zero,254
 1003224:	010032e8 	cmpgeui	r4,zero,203
 1003228:	010032e8 	cmpgeui	r4,zero,203
 100322c:	010032e8 	cmpgeui	r4,zero,203
 1003230:	010032e8 	cmpgeui	r4,zero,203
 1003234:	01004110 	cmplti	r4,zero,260
 1003238:	010032e8 	cmpgeui	r4,zero,203
 100323c:	010032e8 	cmpgeui	r4,zero,203
 1003240:	010039f4 	movhi	r4,231
 1003244:	010032e8 	cmpgeui	r4,zero,203
 1003248:	010032e8 	cmpgeui	r4,zero,203
 100324c:	010032e8 	cmpgeui	r4,zero,203
 1003250:	010032e8 	cmpgeui	r4,zero,203
 1003254:	010032e8 	cmpgeui	r4,zero,203
 1003258:	01003a40 	call	1003a4 <__ram_exceptions_end+0x801d8>
 100325c:	010032e8 	cmpgeui	r4,zero,203
 1003260:	010032e8 	cmpgeui	r4,zero,203
 1003264:	01004060 	cmpeqi	r4,zero,257
 1003268:	010032e8 	cmpgeui	r4,zero,203
 100326c:	010032e8 	cmpgeui	r4,zero,203
 1003270:	010032e8 	cmpgeui	r4,zero,203
 1003274:	010032e8 	cmpgeui	r4,zero,203
 1003278:	010032e8 	cmpgeui	r4,zero,203
 100327c:	010032e8 	cmpgeui	r4,zero,203
 1003280:	010032e8 	cmpgeui	r4,zero,203
 1003284:	010032e8 	cmpgeui	r4,zero,203
 1003288:	010032e8 	cmpgeui	r4,zero,203
 100328c:	010032e8 	cmpgeui	r4,zero,203
 1003290:	01004034 	movhi	r4,256
 1003294:	0100394c 	andi	r4,zero,229
 1003298:	01003fac 	andhi	r4,zero,254
 100329c:	01003fac 	andhi	r4,zero,254
 10032a0:	01003fac 	andhi	r4,zero,254
 10032a4:	01003f98 	cmpnei	r4,zero,254
 10032a8:	0100394c 	andi	r4,zero,229
 10032ac:	010032e8 	cmpgeui	r4,zero,203
 10032b0:	010032e8 	cmpgeui	r4,zero,203
 10032b4:	01003f20 	cmpeqi	r4,zero,252
 10032b8:	010032e8 	cmpgeui	r4,zero,203
 10032bc:	01003ef0 	cmpltui	r4,zero,251
 10032c0:	01003a00 	call	1003a0 <__ram_exceptions_end+0x801d4>
 10032c4:	01003f50 	cmplti	r4,zero,253
 10032c8:	01003f3c 	xorhi	r4,zero,252
 10032cc:	010032e8 	cmpgeui	r4,zero,203
 10032d0:	010041e4 	muli	r4,zero,263
 10032d4:	010032e8 	cmpgeui	r4,zero,203
 10032d8:	01003a4c 	andi	r4,zero,233
 10032dc:	010032e8 	cmpgeui	r4,zero,203
 10032e0:	010032e8 	cmpgeui	r4,zero,203
 10032e4:	010040c4 	movi	r4,259
 10032e8:	d9014d17 	ldw	r4,1332(sp)
 10032ec:	2000ce26 	beq	r4,zero,1003628 <___vfprintf_internal_r+0x6e0>
 10032f0:	01400044 	movi	r5,1
 10032f4:	d9800f04 	addi	r6,sp,60
 10032f8:	d9c14015 	stw	r7,1280(sp)
 10032fc:	d9414515 	stw	r5,1300(sp)
 1003300:	d9814115 	stw	r6,1284(sp)
 1003304:	280f883a 	mov	r7,r5
 1003308:	d9000f05 	stb	r4,60(sp)
 100330c:	d8000405 	stb	zero,16(sp)
 1003310:	d8014615 	stw	zero,1304(sp)
 1003314:	d8c14c17 	ldw	r3,1328(sp)
 1003318:	1880008c 	andi	r2,r3,2
 100331c:	1005003a 	cmpeq	r2,r2,zero
 1003320:	d8815015 	stw	r2,1344(sp)
 1003324:	1000031e 	bne	r2,zero,1003334 <___vfprintf_internal_r+0x3ec>
 1003328:	d9014517 	ldw	r4,1300(sp)
 100332c:	21000084 	addi	r4,r4,2
 1003330:	d9014515 	stw	r4,1300(sp)
 1003334:	d9414c17 	ldw	r5,1328(sp)
 1003338:	2940210c 	andi	r5,r5,132
 100333c:	d9414e15 	stw	r5,1336(sp)
 1003340:	28002d1e 	bne	r5,zero,10033f8 <___vfprintf_internal_r+0x4b0>
 1003344:	d9814a17 	ldw	r6,1320(sp)
 1003348:	d8814517 	ldw	r2,1300(sp)
 100334c:	30a1c83a 	sub	r16,r6,r2
 1003350:	0400290e 	bge	zero,r16,10033f8 <___vfprintf_internal_r+0x4b0>
 1003354:	00800404 	movi	r2,16
 1003358:	14045e0e 	bge	r2,r16,10044d4 <___vfprintf_internal_r+0x158c>
 100335c:	dc800e17 	ldw	r18,56(sp)
 1003360:	dc400d17 	ldw	r17,52(sp)
 1003364:	1027883a 	mov	r19,r2
 1003368:	070040b4 	movhi	fp,258
 100336c:	e7280784 	addi	fp,fp,-24546
 1003370:	050001c4 	movi	r20,7
 1003374:	00000306 	br	1003384 <___vfprintf_internal_r+0x43c>
 1003378:	843ffc04 	addi	r16,r16,-16
 100337c:	ad400204 	addi	r21,r21,8
 1003380:	9c00130e 	bge	r19,r16,10033d0 <___vfprintf_internal_r+0x488>
 1003384:	94800404 	addi	r18,r18,16
 1003388:	8c400044 	addi	r17,r17,1
 100338c:	af000015 	stw	fp,0(r21)
 1003390:	acc00115 	stw	r19,4(r21)
 1003394:	dc800e15 	stw	r18,56(sp)
 1003398:	dc400d15 	stw	r17,52(sp)
 100339c:	a47ff60e 	bge	r20,r17,1003378 <___vfprintf_internal_r+0x430>
 10033a0:	d9014f17 	ldw	r4,1340(sp)
 10033a4:	b00b883a 	mov	r5,r22
 10033a8:	d9800c04 	addi	r6,sp,48
 10033ac:	d9c15115 	stw	r7,1348(sp)
 10033b0:	1002ee40 	call	1002ee4 <__sprint_r>
 10033b4:	d9c15117 	ldw	r7,1348(sp)
 10033b8:	10009e1e 	bne	r2,zero,1003634 <___vfprintf_internal_r+0x6ec>
 10033bc:	843ffc04 	addi	r16,r16,-16
 10033c0:	dc800e17 	ldw	r18,56(sp)
 10033c4:	dc400d17 	ldw	r17,52(sp)
 10033c8:	dd401904 	addi	r21,sp,100
 10033cc:	9c3fed16 	blt	r19,r16,1003384 <___vfprintf_internal_r+0x43c>
 10033d0:	9425883a 	add	r18,r18,r16
 10033d4:	8c400044 	addi	r17,r17,1
 10033d8:	008001c4 	movi	r2,7
 10033dc:	af000015 	stw	fp,0(r21)
 10033e0:	ac000115 	stw	r16,4(r21)
 10033e4:	dc800e15 	stw	r18,56(sp)
 10033e8:	dc400d15 	stw	r17,52(sp)
 10033ec:	1441f516 	blt	r2,r17,1003bc4 <___vfprintf_internal_r+0xc7c>
 10033f0:	ad400204 	addi	r21,r21,8
 10033f4:	00000206 	br	1003400 <___vfprintf_internal_r+0x4b8>
 10033f8:	dc800e17 	ldw	r18,56(sp)
 10033fc:	dc400d17 	ldw	r17,52(sp)
 1003400:	d8800407 	ldb	r2,16(sp)
 1003404:	10000b26 	beq	r2,zero,1003434 <___vfprintf_internal_r+0x4ec>
 1003408:	00800044 	movi	r2,1
 100340c:	94800044 	addi	r18,r18,1
 1003410:	8c400044 	addi	r17,r17,1
 1003414:	a8800115 	stw	r2,4(r21)
 1003418:	d8c00404 	addi	r3,sp,16
 100341c:	008001c4 	movi	r2,7
 1003420:	a8c00015 	stw	r3,0(r21)
 1003424:	dc800e15 	stw	r18,56(sp)
 1003428:	dc400d15 	stw	r17,52(sp)
 100342c:	1441da16 	blt	r2,r17,1003b98 <___vfprintf_internal_r+0xc50>
 1003430:	ad400204 	addi	r21,r21,8
 1003434:	d9015017 	ldw	r4,1344(sp)
 1003438:	20000b1e 	bne	r4,zero,1003468 <___vfprintf_internal_r+0x520>
 100343c:	d8800444 	addi	r2,sp,17
 1003440:	94800084 	addi	r18,r18,2
 1003444:	8c400044 	addi	r17,r17,1
 1003448:	a8800015 	stw	r2,0(r21)
 100344c:	00c00084 	movi	r3,2
 1003450:	008001c4 	movi	r2,7
 1003454:	a8c00115 	stw	r3,4(r21)
 1003458:	dc800e15 	stw	r18,56(sp)
 100345c:	dc400d15 	stw	r17,52(sp)
 1003460:	1441c216 	blt	r2,r17,1003b6c <___vfprintf_internal_r+0xc24>
 1003464:	ad400204 	addi	r21,r21,8
 1003468:	d9414e17 	ldw	r5,1336(sp)
 100346c:	00802004 	movi	r2,128
 1003470:	2880b126 	beq	r5,r2,1003738 <___vfprintf_internal_r+0x7f0>
 1003474:	d8c14617 	ldw	r3,1304(sp)
 1003478:	19e1c83a 	sub	r16,r3,r7
 100347c:	0400260e 	bge	zero,r16,1003518 <___vfprintf_internal_r+0x5d0>
 1003480:	00800404 	movi	r2,16
 1003484:	1403cf0e 	bge	r2,r16,10043c4 <___vfprintf_internal_r+0x147c>
 1003488:	1027883a 	mov	r19,r2
 100348c:	070040b4 	movhi	fp,258
 1003490:	e7280384 	addi	fp,fp,-24562
 1003494:	050001c4 	movi	r20,7
 1003498:	00000306 	br	10034a8 <___vfprintf_internal_r+0x560>
 100349c:	843ffc04 	addi	r16,r16,-16
 10034a0:	ad400204 	addi	r21,r21,8
 10034a4:	9c00130e 	bge	r19,r16,10034f4 <___vfprintf_internal_r+0x5ac>
 10034a8:	94800404 	addi	r18,r18,16
 10034ac:	8c400044 	addi	r17,r17,1
 10034b0:	af000015 	stw	fp,0(r21)
 10034b4:	acc00115 	stw	r19,4(r21)
 10034b8:	dc800e15 	stw	r18,56(sp)
 10034bc:	dc400d15 	stw	r17,52(sp)
 10034c0:	a47ff60e 	bge	r20,r17,100349c <___vfprintf_internal_r+0x554>
 10034c4:	d9014f17 	ldw	r4,1340(sp)
 10034c8:	b00b883a 	mov	r5,r22
 10034cc:	d9800c04 	addi	r6,sp,48
 10034d0:	d9c15115 	stw	r7,1348(sp)
 10034d4:	1002ee40 	call	1002ee4 <__sprint_r>
 10034d8:	d9c15117 	ldw	r7,1348(sp)
 10034dc:	1000551e 	bne	r2,zero,1003634 <___vfprintf_internal_r+0x6ec>
 10034e0:	843ffc04 	addi	r16,r16,-16
 10034e4:	dc800e17 	ldw	r18,56(sp)
 10034e8:	dc400d17 	ldw	r17,52(sp)
 10034ec:	dd401904 	addi	r21,sp,100
 10034f0:	9c3fed16 	blt	r19,r16,10034a8 <___vfprintf_internal_r+0x560>
 10034f4:	9425883a 	add	r18,r18,r16
 10034f8:	8c400044 	addi	r17,r17,1
 10034fc:	008001c4 	movi	r2,7
 1003500:	af000015 	stw	fp,0(r21)
 1003504:	ac000115 	stw	r16,4(r21)
 1003508:	dc800e15 	stw	r18,56(sp)
 100350c:	dc400d15 	stw	r17,52(sp)
 1003510:	14418216 	blt	r2,r17,1003b1c <___vfprintf_internal_r+0xbd4>
 1003514:	ad400204 	addi	r21,r21,8
 1003518:	d9014c17 	ldw	r4,1328(sp)
 100351c:	2080400c 	andi	r2,r4,256
 1003520:	10004a1e 	bne	r2,zero,100364c <___vfprintf_internal_r+0x704>
 1003524:	d9414117 	ldw	r5,1284(sp)
 1003528:	91e5883a 	add	r18,r18,r7
 100352c:	8c400044 	addi	r17,r17,1
 1003530:	008001c4 	movi	r2,7
 1003534:	a9400015 	stw	r5,0(r21)
 1003538:	a9c00115 	stw	r7,4(r21)
 100353c:	dc800e15 	stw	r18,56(sp)
 1003540:	dc400d15 	stw	r17,52(sp)
 1003544:	14416716 	blt	r2,r17,1003ae4 <___vfprintf_internal_r+0xb9c>
 1003548:	a8c00204 	addi	r3,r21,8
 100354c:	d9814c17 	ldw	r6,1328(sp)
 1003550:	3080010c 	andi	r2,r6,4
 1003554:	10002826 	beq	r2,zero,10035f8 <___vfprintf_internal_r+0x6b0>
 1003558:	d8814a17 	ldw	r2,1320(sp)
 100355c:	d9014517 	ldw	r4,1300(sp)
 1003560:	1121c83a 	sub	r16,r2,r4
 1003564:	0400240e 	bge	zero,r16,10035f8 <___vfprintf_internal_r+0x6b0>
 1003568:	00800404 	movi	r2,16
 100356c:	1404550e 	bge	r2,r16,10046c4 <___vfprintf_internal_r+0x177c>
 1003570:	dc400d17 	ldw	r17,52(sp)
 1003574:	1027883a 	mov	r19,r2
 1003578:	070040b4 	movhi	fp,258
 100357c:	e7280784 	addi	fp,fp,-24546
 1003580:	050001c4 	movi	r20,7
 1003584:	00000306 	br	1003594 <___vfprintf_internal_r+0x64c>
 1003588:	843ffc04 	addi	r16,r16,-16
 100358c:	18c00204 	addi	r3,r3,8
 1003590:	9c00110e 	bge	r19,r16,10035d8 <___vfprintf_internal_r+0x690>
 1003594:	94800404 	addi	r18,r18,16
 1003598:	8c400044 	addi	r17,r17,1
 100359c:	1f000015 	stw	fp,0(r3)
 10035a0:	1cc00115 	stw	r19,4(r3)
 10035a4:	dc800e15 	stw	r18,56(sp)
 10035a8:	dc400d15 	stw	r17,52(sp)
 10035ac:	a47ff60e 	bge	r20,r17,1003588 <___vfprintf_internal_r+0x640>
 10035b0:	d9014f17 	ldw	r4,1340(sp)
 10035b4:	b00b883a 	mov	r5,r22
 10035b8:	d9800c04 	addi	r6,sp,48
 10035bc:	1002ee40 	call	1002ee4 <__sprint_r>
 10035c0:	10001c1e 	bne	r2,zero,1003634 <___vfprintf_internal_r+0x6ec>
 10035c4:	843ffc04 	addi	r16,r16,-16
 10035c8:	dc800e17 	ldw	r18,56(sp)
 10035cc:	dc400d17 	ldw	r17,52(sp)
 10035d0:	d8c01904 	addi	r3,sp,100
 10035d4:	9c3fef16 	blt	r19,r16,1003594 <___vfprintf_internal_r+0x64c>
 10035d8:	9425883a 	add	r18,r18,r16
 10035dc:	8c400044 	addi	r17,r17,1
 10035e0:	008001c4 	movi	r2,7
 10035e4:	1f000015 	stw	fp,0(r3)
 10035e8:	1c000115 	stw	r16,4(r3)
 10035ec:	dc800e15 	stw	r18,56(sp)
 10035f0:	dc400d15 	stw	r17,52(sp)
 10035f4:	1440cb16 	blt	r2,r17,1003924 <___vfprintf_internal_r+0x9dc>
 10035f8:	d8814a17 	ldw	r2,1320(sp)
 10035fc:	d9414517 	ldw	r5,1300(sp)
 1003600:	1140010e 	bge	r2,r5,1003608 <___vfprintf_internal_r+0x6c0>
 1003604:	2805883a 	mov	r2,r5
 1003608:	d9814b17 	ldw	r6,1324(sp)
 100360c:	308d883a 	add	r6,r6,r2
 1003610:	d9814b15 	stw	r6,1324(sp)
 1003614:	90013b1e 	bne	r18,zero,1003b04 <___vfprintf_internal_r+0xbbc>
 1003618:	d9c14017 	ldw	r7,1280(sp)
 100361c:	dd401904 	addi	r21,sp,100
 1003620:	d8000d15 	stw	zero,52(sp)
 1003624:	003ea706 	br	10030c4 <___vfprintf_internal_r+0x17c>
 1003628:	d8800e17 	ldw	r2,56(sp)
 100362c:	1005451e 	bne	r2,zero,1004b44 <___vfprintf_internal_r+0x1bfc>
 1003630:	d8000d15 	stw	zero,52(sp)
 1003634:	b080030b 	ldhu	r2,12(r22)
 1003638:	1080100c 	andi	r2,r2,64
 100363c:	103e8726 	beq	r2,zero,100305c <___vfprintf_internal_r+0x114>
 1003640:	00bfffc4 	movi	r2,-1
 1003644:	d8814b15 	stw	r2,1324(sp)
 1003648:	003e8406 	br	100305c <___vfprintf_internal_r+0x114>
 100364c:	d9814d17 	ldw	r6,1332(sp)
 1003650:	00801944 	movi	r2,101
 1003654:	11806e16 	blt	r2,r6,1003810 <___vfprintf_internal_r+0x8c8>
 1003658:	d9414717 	ldw	r5,1308(sp)
 100365c:	00c00044 	movi	r3,1
 1003660:	1943490e 	bge	r3,r5,1004388 <___vfprintf_internal_r+0x1440>
 1003664:	d8814117 	ldw	r2,1284(sp)
 1003668:	94800044 	addi	r18,r18,1
 100366c:	8c400044 	addi	r17,r17,1
 1003670:	a8800015 	stw	r2,0(r21)
 1003674:	008001c4 	movi	r2,7
 1003678:	a8c00115 	stw	r3,4(r21)
 100367c:	dc800e15 	stw	r18,56(sp)
 1003680:	dc400d15 	stw	r17,52(sp)
 1003684:	1441ca16 	blt	r2,r17,1003db0 <___vfprintf_internal_r+0xe68>
 1003688:	a8c00204 	addi	r3,r21,8
 100368c:	d9014917 	ldw	r4,1316(sp)
 1003690:	00800044 	movi	r2,1
 1003694:	94800044 	addi	r18,r18,1
 1003698:	8c400044 	addi	r17,r17,1
 100369c:	18800115 	stw	r2,4(r3)
 10036a0:	008001c4 	movi	r2,7
 10036a4:	19000015 	stw	r4,0(r3)
 10036a8:	dc800e15 	stw	r18,56(sp)
 10036ac:	dc400d15 	stw	r17,52(sp)
 10036b0:	1441b616 	blt	r2,r17,1003d8c <___vfprintf_internal_r+0xe44>
 10036b4:	1cc00204 	addi	r19,r3,8
 10036b8:	d9014217 	ldw	r4,1288(sp)
 10036bc:	d9414317 	ldw	r5,1292(sp)
 10036c0:	000d883a 	mov	r6,zero
 10036c4:	000f883a 	mov	r7,zero
 10036c8:	100b5e40 	call	100b5e4 <__nedf2>
 10036cc:	10017426 	beq	r2,zero,1003ca0 <___vfprintf_internal_r+0xd58>
 10036d0:	d9414717 	ldw	r5,1308(sp)
 10036d4:	d9814117 	ldw	r6,1284(sp)
 10036d8:	8c400044 	addi	r17,r17,1
 10036dc:	2c85883a 	add	r2,r5,r18
 10036e0:	14bfffc4 	addi	r18,r2,-1
 10036e4:	28bfffc4 	addi	r2,r5,-1
 10036e8:	30c00044 	addi	r3,r6,1
 10036ec:	98800115 	stw	r2,4(r19)
 10036f0:	008001c4 	movi	r2,7
 10036f4:	98c00015 	stw	r3,0(r19)
 10036f8:	dc800e15 	stw	r18,56(sp)
 10036fc:	dc400d15 	stw	r17,52(sp)
 1003700:	14418e16 	blt	r2,r17,1003d3c <___vfprintf_internal_r+0xdf4>
 1003704:	9cc00204 	addi	r19,r19,8
 1003708:	d9414817 	ldw	r5,1312(sp)
 100370c:	d8800804 	addi	r2,sp,32
 1003710:	8c400044 	addi	r17,r17,1
 1003714:	9165883a 	add	r18,r18,r5
 1003718:	98800015 	stw	r2,0(r19)
 100371c:	008001c4 	movi	r2,7
 1003720:	99400115 	stw	r5,4(r19)
 1003724:	dc800e15 	stw	r18,56(sp)
 1003728:	dc400d15 	stw	r17,52(sp)
 100372c:	1440ed16 	blt	r2,r17,1003ae4 <___vfprintf_internal_r+0xb9c>
 1003730:	98c00204 	addi	r3,r19,8
 1003734:	003f8506 	br	100354c <___vfprintf_internal_r+0x604>
 1003738:	d9814a17 	ldw	r6,1320(sp)
 100373c:	d8814517 	ldw	r2,1300(sp)
 1003740:	30a1c83a 	sub	r16,r6,r2
 1003744:	043f4b0e 	bge	zero,r16,1003474 <___vfprintf_internal_r+0x52c>
 1003748:	00800404 	movi	r2,16
 100374c:	14043a0e 	bge	r2,r16,1004838 <___vfprintf_internal_r+0x18f0>
 1003750:	1027883a 	mov	r19,r2
 1003754:	070040b4 	movhi	fp,258
 1003758:	e7280384 	addi	fp,fp,-24562
 100375c:	050001c4 	movi	r20,7
 1003760:	00000306 	br	1003770 <___vfprintf_internal_r+0x828>
 1003764:	843ffc04 	addi	r16,r16,-16
 1003768:	ad400204 	addi	r21,r21,8
 100376c:	9c00130e 	bge	r19,r16,10037bc <___vfprintf_internal_r+0x874>
 1003770:	94800404 	addi	r18,r18,16
 1003774:	8c400044 	addi	r17,r17,1
 1003778:	af000015 	stw	fp,0(r21)
 100377c:	acc00115 	stw	r19,4(r21)
 1003780:	dc800e15 	stw	r18,56(sp)
 1003784:	dc400d15 	stw	r17,52(sp)
 1003788:	a47ff60e 	bge	r20,r17,1003764 <___vfprintf_internal_r+0x81c>
 100378c:	d9014f17 	ldw	r4,1340(sp)
 1003790:	b00b883a 	mov	r5,r22
 1003794:	d9800c04 	addi	r6,sp,48
 1003798:	d9c15115 	stw	r7,1348(sp)
 100379c:	1002ee40 	call	1002ee4 <__sprint_r>
 10037a0:	d9c15117 	ldw	r7,1348(sp)
 10037a4:	103fa31e 	bne	r2,zero,1003634 <___vfprintf_internal_r+0x6ec>
 10037a8:	843ffc04 	addi	r16,r16,-16
 10037ac:	dc800e17 	ldw	r18,56(sp)
 10037b0:	dc400d17 	ldw	r17,52(sp)
 10037b4:	dd401904 	addi	r21,sp,100
 10037b8:	9c3fed16 	blt	r19,r16,1003770 <___vfprintf_internal_r+0x828>
 10037bc:	9425883a 	add	r18,r18,r16
 10037c0:	8c400044 	addi	r17,r17,1
 10037c4:	008001c4 	movi	r2,7
 10037c8:	af000015 	stw	fp,0(r21)
 10037cc:	ac000115 	stw	r16,4(r21)
 10037d0:	dc800e15 	stw	r18,56(sp)
 10037d4:	dc400d15 	stw	r17,52(sp)
 10037d8:	14416116 	blt	r2,r17,1003d60 <___vfprintf_internal_r+0xe18>
 10037dc:	ad400204 	addi	r21,r21,8
 10037e0:	003f2406 	br	1003474 <___vfprintf_internal_r+0x52c>
 10037e4:	d9014f17 	ldw	r4,1340(sp)
 10037e8:	1006a8c0 	call	1006a8c <__sinit>
 10037ec:	d9c15117 	ldw	r7,1348(sp)
 10037f0:	003def06 	br	1002fb0 <___vfprintf_internal_r+0x68>
 10037f4:	d9014f17 	ldw	r4,1340(sp)
 10037f8:	b00b883a 	mov	r5,r22
 10037fc:	d9c15115 	stw	r7,1348(sp)
 1003800:	1004e480 	call	1004e48 <__swsetup_r>
 1003804:	d9c15117 	ldw	r7,1348(sp)
 1003808:	103dee26 	beq	r2,zero,1002fc4 <___vfprintf_internal_r+0x7c>
 100380c:	003f8c06 	br	1003640 <___vfprintf_internal_r+0x6f8>
 1003810:	d9014217 	ldw	r4,1288(sp)
 1003814:	d9414317 	ldw	r5,1292(sp)
 1003818:	000d883a 	mov	r6,zero
 100381c:	000f883a 	mov	r7,zero
 1003820:	100b5500 	call	100b550 <__eqdf2>
 1003824:	1000f21e 	bne	r2,zero,1003bf0 <___vfprintf_internal_r+0xca8>
 1003828:	008040b4 	movhi	r2,258
 100382c:	10a80304 	addi	r2,r2,-24564
 1003830:	94800044 	addi	r18,r18,1
 1003834:	8c400044 	addi	r17,r17,1
 1003838:	a8800015 	stw	r2,0(r21)
 100383c:	00c00044 	movi	r3,1
 1003840:	008001c4 	movi	r2,7
 1003844:	a8c00115 	stw	r3,4(r21)
 1003848:	dc800e15 	stw	r18,56(sp)
 100384c:	dc400d15 	stw	r17,52(sp)
 1003850:	14430016 	blt	r2,r17,1004454 <___vfprintf_internal_r+0x150c>
 1003854:	a8c00204 	addi	r3,r21,8
 1003858:	d8800517 	ldw	r2,20(sp)
 100385c:	d9014717 	ldw	r4,1308(sp)
 1003860:	11015c0e 	bge	r2,r4,1003dd4 <___vfprintf_internal_r+0xe8c>
 1003864:	dc400d17 	ldw	r17,52(sp)
 1003868:	d9814917 	ldw	r6,1316(sp)
 100386c:	00800044 	movi	r2,1
 1003870:	94800044 	addi	r18,r18,1
 1003874:	8c400044 	addi	r17,r17,1
 1003878:	18800115 	stw	r2,4(r3)
 100387c:	008001c4 	movi	r2,7
 1003880:	19800015 	stw	r6,0(r3)
 1003884:	dc800e15 	stw	r18,56(sp)
 1003888:	dc400d15 	stw	r17,52(sp)
 100388c:	14431616 	blt	r2,r17,10044e8 <___vfprintf_internal_r+0x15a0>
 1003890:	18c00204 	addi	r3,r3,8
 1003894:	d8814717 	ldw	r2,1308(sp)
 1003898:	143fffc4 	addi	r16,r2,-1
 100389c:	043f2b0e 	bge	zero,r16,100354c <___vfprintf_internal_r+0x604>
 10038a0:	00800404 	movi	r2,16
 10038a4:	1402a80e 	bge	r2,r16,1004348 <___vfprintf_internal_r+0x1400>
 10038a8:	dc400d17 	ldw	r17,52(sp)
 10038ac:	1027883a 	mov	r19,r2
 10038b0:	070040b4 	movhi	fp,258
 10038b4:	e7280384 	addi	fp,fp,-24562
 10038b8:	050001c4 	movi	r20,7
 10038bc:	00000306 	br	10038cc <___vfprintf_internal_r+0x984>
 10038c0:	18c00204 	addi	r3,r3,8
 10038c4:	843ffc04 	addi	r16,r16,-16
 10038c8:	9c02a20e 	bge	r19,r16,1004354 <___vfprintf_internal_r+0x140c>
 10038cc:	94800404 	addi	r18,r18,16
 10038d0:	8c400044 	addi	r17,r17,1
 10038d4:	1f000015 	stw	fp,0(r3)
 10038d8:	1cc00115 	stw	r19,4(r3)
 10038dc:	dc800e15 	stw	r18,56(sp)
 10038e0:	dc400d15 	stw	r17,52(sp)
 10038e4:	a47ff60e 	bge	r20,r17,10038c0 <___vfprintf_internal_r+0x978>
 10038e8:	d9014f17 	ldw	r4,1340(sp)
 10038ec:	b00b883a 	mov	r5,r22
 10038f0:	d9800c04 	addi	r6,sp,48
 10038f4:	1002ee40 	call	1002ee4 <__sprint_r>
 10038f8:	103f4e1e 	bne	r2,zero,1003634 <___vfprintf_internal_r+0x6ec>
 10038fc:	dc800e17 	ldw	r18,56(sp)
 1003900:	dc400d17 	ldw	r17,52(sp)
 1003904:	d8c01904 	addi	r3,sp,100
 1003908:	003fee06 	br	10038c4 <___vfprintf_internal_r+0x97c>
 100390c:	d8802c0b 	ldhu	r2,176(sp)
 1003910:	00ffffc4 	movi	r3,-1
 1003914:	d8c14b15 	stw	r3,1324(sp)
 1003918:	1080100c 	andi	r2,r2,64
 100391c:	103dcc1e 	bne	r2,zero,1003050 <___vfprintf_internal_r+0x108>
 1003920:	003dce06 	br	100305c <___vfprintf_internal_r+0x114>
 1003924:	d9014f17 	ldw	r4,1340(sp)
 1003928:	b00b883a 	mov	r5,r22
 100392c:	d9800c04 	addi	r6,sp,48
 1003930:	1002ee40 	call	1002ee4 <__sprint_r>
 1003934:	103f3f1e 	bne	r2,zero,1003634 <___vfprintf_internal_r+0x6ec>
 1003938:	dc800e17 	ldw	r18,56(sp)
 100393c:	003f2e06 	br	10035f8 <___vfprintf_internal_r+0x6b0>
 1003940:	d9414c17 	ldw	r5,1328(sp)
 1003944:	29400414 	ori	r5,r5,16
 1003948:	d9414c15 	stw	r5,1328(sp)
 100394c:	d9814c17 	ldw	r6,1328(sp)
 1003950:	3080080c 	andi	r2,r6,32
 1003954:	10014f1e 	bne	r2,zero,1003e94 <___vfprintf_internal_r+0xf4c>
 1003958:	d8c14c17 	ldw	r3,1328(sp)
 100395c:	1880040c 	andi	r2,r3,16
 1003960:	1002f01e 	bne	r2,zero,1004524 <___vfprintf_internal_r+0x15dc>
 1003964:	d9014c17 	ldw	r4,1328(sp)
 1003968:	2080100c 	andi	r2,r4,64
 100396c:	1002ed26 	beq	r2,zero,1004524 <___vfprintf_internal_r+0x15dc>
 1003970:	3880000f 	ldh	r2,0(r7)
 1003974:	39c00104 	addi	r7,r7,4
 1003978:	d9c14015 	stw	r7,1280(sp)
 100397c:	1023d7fa 	srai	r17,r2,31
 1003980:	1021883a 	mov	r16,r2
 1003984:	88037816 	blt	r17,zero,1004768 <___vfprintf_internal_r+0x1820>
 1003988:	01000044 	movi	r4,1
 100398c:	98000416 	blt	r19,zero,10039a0 <___vfprintf_internal_r+0xa58>
 1003990:	d8c14c17 	ldw	r3,1328(sp)
 1003994:	00bfdfc4 	movi	r2,-129
 1003998:	1886703a 	and	r3,r3,r2
 100399c:	d8c14c15 	stw	r3,1328(sp)
 10039a0:	8444b03a 	or	r2,r16,r17
 10039a4:	10022c1e 	bne	r2,zero,1004258 <___vfprintf_internal_r+0x1310>
 10039a8:	98022b1e 	bne	r19,zero,1004258 <___vfprintf_internal_r+0x1310>
 10039ac:	20803fcc 	andi	r2,r4,255
 10039b0:	1002a126 	beq	r2,zero,1004438 <___vfprintf_internal_r+0x14f0>
 10039b4:	d8c01904 	addi	r3,sp,100
 10039b8:	dd000f04 	addi	r20,sp,60
 10039bc:	d8c14115 	stw	r3,1284(sp)
 10039c0:	d8c14117 	ldw	r3,1284(sp)
 10039c4:	dcc14515 	stw	r19,1300(sp)
 10039c8:	a0c5c83a 	sub	r2,r20,r3
 10039cc:	11c00a04 	addi	r7,r2,40
 10039d0:	99c0010e 	bge	r19,r7,10039d8 <___vfprintf_internal_r+0xa90>
 10039d4:	d9c14515 	stw	r7,1300(sp)
 10039d8:	dcc14615 	stw	r19,1304(sp)
 10039dc:	d8800407 	ldb	r2,16(sp)
 10039e0:	103e4c26 	beq	r2,zero,1003314 <___vfprintf_internal_r+0x3cc>
 10039e4:	d8814517 	ldw	r2,1300(sp)
 10039e8:	10800044 	addi	r2,r2,1
 10039ec:	d8814515 	stw	r2,1300(sp)
 10039f0:	003e4806 	br	1003314 <___vfprintf_internal_r+0x3cc>
 10039f4:	d9814c17 	ldw	r6,1328(sp)
 10039f8:	31800414 	ori	r6,r6,16
 10039fc:	d9814c15 	stw	r6,1328(sp)
 1003a00:	d8c14c17 	ldw	r3,1328(sp)
 1003a04:	1880080c 	andi	r2,r3,32
 1003a08:	1001271e 	bne	r2,zero,1003ea8 <___vfprintf_internal_r+0xf60>
 1003a0c:	d9414c17 	ldw	r5,1328(sp)
 1003a10:	2880040c 	andi	r2,r5,16
 1003a14:	1002bc1e 	bne	r2,zero,1004508 <___vfprintf_internal_r+0x15c0>
 1003a18:	d9814c17 	ldw	r6,1328(sp)
 1003a1c:	3080100c 	andi	r2,r6,64
 1003a20:	1002b926 	beq	r2,zero,1004508 <___vfprintf_internal_r+0x15c0>
 1003a24:	3c00000b 	ldhu	r16,0(r7)
 1003a28:	0009883a 	mov	r4,zero
 1003a2c:	39c00104 	addi	r7,r7,4
 1003a30:	0023883a 	mov	r17,zero
 1003a34:	d9c14015 	stw	r7,1280(sp)
 1003a38:	d8000405 	stb	zero,16(sp)
 1003a3c:	003fd306 	br	100398c <___vfprintf_internal_r+0xa44>
 1003a40:	d9014c17 	ldw	r4,1328(sp)
 1003a44:	21000414 	ori	r4,r4,16
 1003a48:	d9014c15 	stw	r4,1328(sp)
 1003a4c:	d9414c17 	ldw	r5,1328(sp)
 1003a50:	2880080c 	andi	r2,r5,32
 1003a54:	1001081e 	bne	r2,zero,1003e78 <___vfprintf_internal_r+0xf30>
 1003a58:	d8c14c17 	ldw	r3,1328(sp)
 1003a5c:	1880040c 	andi	r2,r3,16
 1003a60:	1002b61e 	bne	r2,zero,100453c <___vfprintf_internal_r+0x15f4>
 1003a64:	d9014c17 	ldw	r4,1328(sp)
 1003a68:	2080100c 	andi	r2,r4,64
 1003a6c:	1002b326 	beq	r2,zero,100453c <___vfprintf_internal_r+0x15f4>
 1003a70:	3c00000b 	ldhu	r16,0(r7)
 1003a74:	01000044 	movi	r4,1
 1003a78:	39c00104 	addi	r7,r7,4
 1003a7c:	0023883a 	mov	r17,zero
 1003a80:	d9c14015 	stw	r7,1280(sp)
 1003a84:	d8000405 	stb	zero,16(sp)
 1003a88:	003fc006 	br	100398c <___vfprintf_internal_r+0xa44>
 1003a8c:	d9014f17 	ldw	r4,1340(sp)
 1003a90:	b00b883a 	mov	r5,r22
 1003a94:	d9800c04 	addi	r6,sp,48
 1003a98:	1002ee40 	call	1002ee4 <__sprint_r>
 1003a9c:	103ee51e 	bne	r2,zero,1003634 <___vfprintf_internal_r+0x6ec>
 1003aa0:	dc800e17 	ldw	r18,56(sp)
 1003aa4:	d8c01904 	addi	r3,sp,100
 1003aa8:	d9814c17 	ldw	r6,1328(sp)
 1003aac:	3080004c 	andi	r2,r6,1
 1003ab0:	1005003a 	cmpeq	r2,r2,zero
 1003ab4:	103ea51e 	bne	r2,zero,100354c <___vfprintf_internal_r+0x604>
 1003ab8:	00800044 	movi	r2,1
 1003abc:	dc400d17 	ldw	r17,52(sp)
 1003ac0:	18800115 	stw	r2,4(r3)
 1003ac4:	d8814917 	ldw	r2,1316(sp)
 1003ac8:	94800044 	addi	r18,r18,1
 1003acc:	8c400044 	addi	r17,r17,1
 1003ad0:	18800015 	stw	r2,0(r3)
 1003ad4:	008001c4 	movi	r2,7
 1003ad8:	dc800e15 	stw	r18,56(sp)
 1003adc:	dc400d15 	stw	r17,52(sp)
 1003ae0:	1442240e 	bge	r2,r17,1004374 <___vfprintf_internal_r+0x142c>
 1003ae4:	d9014f17 	ldw	r4,1340(sp)
 1003ae8:	b00b883a 	mov	r5,r22
 1003aec:	d9800c04 	addi	r6,sp,48
 1003af0:	1002ee40 	call	1002ee4 <__sprint_r>
 1003af4:	103ecf1e 	bne	r2,zero,1003634 <___vfprintf_internal_r+0x6ec>
 1003af8:	dc800e17 	ldw	r18,56(sp)
 1003afc:	d8c01904 	addi	r3,sp,100
 1003b00:	003e9206 	br	100354c <___vfprintf_internal_r+0x604>
 1003b04:	d9014f17 	ldw	r4,1340(sp)
 1003b08:	b00b883a 	mov	r5,r22
 1003b0c:	d9800c04 	addi	r6,sp,48
 1003b10:	1002ee40 	call	1002ee4 <__sprint_r>
 1003b14:	103ec026 	beq	r2,zero,1003618 <___vfprintf_internal_r+0x6d0>
 1003b18:	003ec606 	br	1003634 <___vfprintf_internal_r+0x6ec>
 1003b1c:	d9014f17 	ldw	r4,1340(sp)
 1003b20:	b00b883a 	mov	r5,r22
 1003b24:	d9800c04 	addi	r6,sp,48
 1003b28:	d9c15115 	stw	r7,1348(sp)
 1003b2c:	1002ee40 	call	1002ee4 <__sprint_r>
 1003b30:	d9c15117 	ldw	r7,1348(sp)
 1003b34:	103ebf1e 	bne	r2,zero,1003634 <___vfprintf_internal_r+0x6ec>
 1003b38:	dc800e17 	ldw	r18,56(sp)
 1003b3c:	dc400d17 	ldw	r17,52(sp)
 1003b40:	dd401904 	addi	r21,sp,100
 1003b44:	003e7406 	br	1003518 <___vfprintf_internal_r+0x5d0>
 1003b48:	d9014f17 	ldw	r4,1340(sp)
 1003b4c:	b00b883a 	mov	r5,r22
 1003b50:	d9800c04 	addi	r6,sp,48
 1003b54:	d9c15115 	stw	r7,1348(sp)
 1003b58:	1002ee40 	call	1002ee4 <__sprint_r>
 1003b5c:	d9c15117 	ldw	r7,1348(sp)
 1003b60:	103eb41e 	bne	r2,zero,1003634 <___vfprintf_internal_r+0x6ec>
 1003b64:	dd401904 	addi	r21,sp,100
 1003b68:	003d6d06 	br	1003120 <___vfprintf_internal_r+0x1d8>
 1003b6c:	d9014f17 	ldw	r4,1340(sp)
 1003b70:	b00b883a 	mov	r5,r22
 1003b74:	d9800c04 	addi	r6,sp,48
 1003b78:	d9c15115 	stw	r7,1348(sp)
 1003b7c:	1002ee40 	call	1002ee4 <__sprint_r>
 1003b80:	d9c15117 	ldw	r7,1348(sp)
 1003b84:	103eab1e 	bne	r2,zero,1003634 <___vfprintf_internal_r+0x6ec>
 1003b88:	dc800e17 	ldw	r18,56(sp)
 1003b8c:	dc400d17 	ldw	r17,52(sp)
 1003b90:	dd401904 	addi	r21,sp,100
 1003b94:	003e3406 	br	1003468 <___vfprintf_internal_r+0x520>
 1003b98:	d9014f17 	ldw	r4,1340(sp)
 1003b9c:	b00b883a 	mov	r5,r22
 1003ba0:	d9800c04 	addi	r6,sp,48
 1003ba4:	d9c15115 	stw	r7,1348(sp)
 1003ba8:	1002ee40 	call	1002ee4 <__sprint_r>
 1003bac:	d9c15117 	ldw	r7,1348(sp)
 1003bb0:	103ea01e 	bne	r2,zero,1003634 <___vfprintf_internal_r+0x6ec>
 1003bb4:	dc800e17 	ldw	r18,56(sp)
 1003bb8:	dc400d17 	ldw	r17,52(sp)
 1003bbc:	dd401904 	addi	r21,sp,100
 1003bc0:	003e1c06 	br	1003434 <___vfprintf_internal_r+0x4ec>
 1003bc4:	d9014f17 	ldw	r4,1340(sp)
 1003bc8:	b00b883a 	mov	r5,r22
 1003bcc:	d9800c04 	addi	r6,sp,48
 1003bd0:	d9c15115 	stw	r7,1348(sp)
 1003bd4:	1002ee40 	call	1002ee4 <__sprint_r>
 1003bd8:	d9c15117 	ldw	r7,1348(sp)
 1003bdc:	103e951e 	bne	r2,zero,1003634 <___vfprintf_internal_r+0x6ec>
 1003be0:	dc800e17 	ldw	r18,56(sp)
 1003be4:	dc400d17 	ldw	r17,52(sp)
 1003be8:	dd401904 	addi	r21,sp,100
 1003bec:	003e0406 	br	1003400 <___vfprintf_internal_r+0x4b8>
 1003bf0:	d9000517 	ldw	r4,20(sp)
 1003bf4:	0102580e 	bge	zero,r4,1004558 <___vfprintf_internal_r+0x1610>
 1003bf8:	d9814717 	ldw	r6,1308(sp)
 1003bfc:	21807a16 	blt	r4,r6,1003de8 <___vfprintf_internal_r+0xea0>
 1003c00:	d8814117 	ldw	r2,1284(sp)
 1003c04:	91a5883a 	add	r18,r18,r6
 1003c08:	8c400044 	addi	r17,r17,1
 1003c0c:	a8800015 	stw	r2,0(r21)
 1003c10:	008001c4 	movi	r2,7
 1003c14:	a9800115 	stw	r6,4(r21)
 1003c18:	dc800e15 	stw	r18,56(sp)
 1003c1c:	dc400d15 	stw	r17,52(sp)
 1003c20:	1442fc16 	blt	r2,r17,1004814 <___vfprintf_internal_r+0x18cc>
 1003c24:	a8c00204 	addi	r3,r21,8
 1003c28:	d9414717 	ldw	r5,1308(sp)
 1003c2c:	2161c83a 	sub	r16,r4,r5
 1003c30:	043f9d0e 	bge	zero,r16,1003aa8 <___vfprintf_internal_r+0xb60>
 1003c34:	00800404 	movi	r2,16
 1003c38:	1402190e 	bge	r2,r16,10044a0 <___vfprintf_internal_r+0x1558>
 1003c3c:	dc400d17 	ldw	r17,52(sp)
 1003c40:	1027883a 	mov	r19,r2
 1003c44:	070040b4 	movhi	fp,258
 1003c48:	e7280384 	addi	fp,fp,-24562
 1003c4c:	050001c4 	movi	r20,7
 1003c50:	00000306 	br	1003c60 <___vfprintf_internal_r+0xd18>
 1003c54:	18c00204 	addi	r3,r3,8
 1003c58:	843ffc04 	addi	r16,r16,-16
 1003c5c:	9c02130e 	bge	r19,r16,10044ac <___vfprintf_internal_r+0x1564>
 1003c60:	94800404 	addi	r18,r18,16
 1003c64:	8c400044 	addi	r17,r17,1
 1003c68:	1f000015 	stw	fp,0(r3)
 1003c6c:	1cc00115 	stw	r19,4(r3)
 1003c70:	dc800e15 	stw	r18,56(sp)
 1003c74:	dc400d15 	stw	r17,52(sp)
 1003c78:	a47ff60e 	bge	r20,r17,1003c54 <___vfprintf_internal_r+0xd0c>
 1003c7c:	d9014f17 	ldw	r4,1340(sp)
 1003c80:	b00b883a 	mov	r5,r22
 1003c84:	d9800c04 	addi	r6,sp,48
 1003c88:	1002ee40 	call	1002ee4 <__sprint_r>
 1003c8c:	103e691e 	bne	r2,zero,1003634 <___vfprintf_internal_r+0x6ec>
 1003c90:	dc800e17 	ldw	r18,56(sp)
 1003c94:	dc400d17 	ldw	r17,52(sp)
 1003c98:	d8c01904 	addi	r3,sp,100
 1003c9c:	003fee06 	br	1003c58 <___vfprintf_internal_r+0xd10>
 1003ca0:	d8814717 	ldw	r2,1308(sp)
 1003ca4:	143fffc4 	addi	r16,r2,-1
 1003ca8:	043e970e 	bge	zero,r16,1003708 <___vfprintf_internal_r+0x7c0>
 1003cac:	00800404 	movi	r2,16
 1003cb0:	1400180e 	bge	r2,r16,1003d14 <___vfprintf_internal_r+0xdcc>
 1003cb4:	1029883a 	mov	r20,r2
 1003cb8:	070040b4 	movhi	fp,258
 1003cbc:	e7280384 	addi	fp,fp,-24562
 1003cc0:	054001c4 	movi	r21,7
 1003cc4:	00000306 	br	1003cd4 <___vfprintf_internal_r+0xd8c>
 1003cc8:	9cc00204 	addi	r19,r19,8
 1003ccc:	843ffc04 	addi	r16,r16,-16
 1003cd0:	a400120e 	bge	r20,r16,1003d1c <___vfprintf_internal_r+0xdd4>
 1003cd4:	94800404 	addi	r18,r18,16
 1003cd8:	8c400044 	addi	r17,r17,1
 1003cdc:	9f000015 	stw	fp,0(r19)
 1003ce0:	9d000115 	stw	r20,4(r19)
 1003ce4:	dc800e15 	stw	r18,56(sp)
 1003ce8:	dc400d15 	stw	r17,52(sp)
 1003cec:	ac7ff60e 	bge	r21,r17,1003cc8 <___vfprintf_internal_r+0xd80>
 1003cf0:	d9014f17 	ldw	r4,1340(sp)
 1003cf4:	b00b883a 	mov	r5,r22
 1003cf8:	d9800c04 	addi	r6,sp,48
 1003cfc:	1002ee40 	call	1002ee4 <__sprint_r>
 1003d00:	103e4c1e 	bne	r2,zero,1003634 <___vfprintf_internal_r+0x6ec>
 1003d04:	dc800e17 	ldw	r18,56(sp)
 1003d08:	dc400d17 	ldw	r17,52(sp)
 1003d0c:	dcc01904 	addi	r19,sp,100
 1003d10:	003fee06 	br	1003ccc <___vfprintf_internal_r+0xd84>
 1003d14:	070040b4 	movhi	fp,258
 1003d18:	e7280384 	addi	fp,fp,-24562
 1003d1c:	9425883a 	add	r18,r18,r16
 1003d20:	8c400044 	addi	r17,r17,1
 1003d24:	008001c4 	movi	r2,7
 1003d28:	9f000015 	stw	fp,0(r19)
 1003d2c:	9c000115 	stw	r16,4(r19)
 1003d30:	dc800e15 	stw	r18,56(sp)
 1003d34:	dc400d15 	stw	r17,52(sp)
 1003d38:	147e720e 	bge	r2,r17,1003704 <___vfprintf_internal_r+0x7bc>
 1003d3c:	d9014f17 	ldw	r4,1340(sp)
 1003d40:	b00b883a 	mov	r5,r22
 1003d44:	d9800c04 	addi	r6,sp,48
 1003d48:	1002ee40 	call	1002ee4 <__sprint_r>
 1003d4c:	103e391e 	bne	r2,zero,1003634 <___vfprintf_internal_r+0x6ec>
 1003d50:	dc800e17 	ldw	r18,56(sp)
 1003d54:	dc400d17 	ldw	r17,52(sp)
 1003d58:	dcc01904 	addi	r19,sp,100
 1003d5c:	003e6a06 	br	1003708 <___vfprintf_internal_r+0x7c0>
 1003d60:	d9014f17 	ldw	r4,1340(sp)
 1003d64:	b00b883a 	mov	r5,r22
 1003d68:	d9800c04 	addi	r6,sp,48
 1003d6c:	d9c15115 	stw	r7,1348(sp)
 1003d70:	1002ee40 	call	1002ee4 <__sprint_r>
 1003d74:	d9c15117 	ldw	r7,1348(sp)
 1003d78:	103e2e1e 	bne	r2,zero,1003634 <___vfprintf_internal_r+0x6ec>
 1003d7c:	dc800e17 	ldw	r18,56(sp)
 1003d80:	dc400d17 	ldw	r17,52(sp)
 1003d84:	dd401904 	addi	r21,sp,100
 1003d88:	003dba06 	br	1003474 <___vfprintf_internal_r+0x52c>
 1003d8c:	d9014f17 	ldw	r4,1340(sp)
 1003d90:	b00b883a 	mov	r5,r22
 1003d94:	d9800c04 	addi	r6,sp,48
 1003d98:	1002ee40 	call	1002ee4 <__sprint_r>
 1003d9c:	103e251e 	bne	r2,zero,1003634 <___vfprintf_internal_r+0x6ec>
 1003da0:	dc800e17 	ldw	r18,56(sp)
 1003da4:	dc400d17 	ldw	r17,52(sp)
 1003da8:	dcc01904 	addi	r19,sp,100
 1003dac:	003e4206 	br	10036b8 <___vfprintf_internal_r+0x770>
 1003db0:	d9014f17 	ldw	r4,1340(sp)
 1003db4:	b00b883a 	mov	r5,r22
 1003db8:	d9800c04 	addi	r6,sp,48
 1003dbc:	1002ee40 	call	1002ee4 <__sprint_r>
 1003dc0:	103e1c1e 	bne	r2,zero,1003634 <___vfprintf_internal_r+0x6ec>
 1003dc4:	dc800e17 	ldw	r18,56(sp)
 1003dc8:	dc400d17 	ldw	r17,52(sp)
 1003dcc:	d8c01904 	addi	r3,sp,100
 1003dd0:	003e2e06 	br	100368c <___vfprintf_internal_r+0x744>
 1003dd4:	d9414c17 	ldw	r5,1328(sp)
 1003dd8:	2880004c 	andi	r2,r5,1
 1003ddc:	1005003a 	cmpeq	r2,r2,zero
 1003de0:	103dda1e 	bne	r2,zero,100354c <___vfprintf_internal_r+0x604>
 1003de4:	003e9f06 	br	1003864 <___vfprintf_internal_r+0x91c>
 1003de8:	d8c14117 	ldw	r3,1284(sp)
 1003dec:	9125883a 	add	r18,r18,r4
 1003df0:	8c400044 	addi	r17,r17,1
 1003df4:	008001c4 	movi	r2,7
 1003df8:	a8c00015 	stw	r3,0(r21)
 1003dfc:	a9000115 	stw	r4,4(r21)
 1003e00:	dc800e15 	stw	r18,56(sp)
 1003e04:	dc400d15 	stw	r17,52(sp)
 1003e08:	14426c16 	blt	r2,r17,10047bc <___vfprintf_internal_r+0x1874>
 1003e0c:	a8c00204 	addi	r3,r21,8
 1003e10:	d9414917 	ldw	r5,1316(sp)
 1003e14:	00800044 	movi	r2,1
 1003e18:	94800044 	addi	r18,r18,1
 1003e1c:	8c400044 	addi	r17,r17,1
 1003e20:	18800115 	stw	r2,4(r3)
 1003e24:	008001c4 	movi	r2,7
 1003e28:	19400015 	stw	r5,0(r3)
 1003e2c:	dc800e15 	stw	r18,56(sp)
 1003e30:	dc400d15 	stw	r17,52(sp)
 1003e34:	2021883a 	mov	r16,r4
 1003e38:	14425616 	blt	r2,r17,1004794 <___vfprintf_internal_r+0x184c>
 1003e3c:	19400204 	addi	r5,r3,8
 1003e40:	d9814717 	ldw	r6,1308(sp)
 1003e44:	8c400044 	addi	r17,r17,1
 1003e48:	dc400d15 	stw	r17,52(sp)
 1003e4c:	3107c83a 	sub	r3,r6,r4
 1003e50:	d9014117 	ldw	r4,1284(sp)
 1003e54:	90e5883a 	add	r18,r18,r3
 1003e58:	28c00115 	stw	r3,4(r5)
 1003e5c:	8105883a 	add	r2,r16,r4
 1003e60:	28800015 	stw	r2,0(r5)
 1003e64:	008001c4 	movi	r2,7
 1003e68:	dc800e15 	stw	r18,56(sp)
 1003e6c:	147f1d16 	blt	r2,r17,1003ae4 <___vfprintf_internal_r+0xb9c>
 1003e70:	28c00204 	addi	r3,r5,8
 1003e74:	003db506 	br	100354c <___vfprintf_internal_r+0x604>
 1003e78:	3c000017 	ldw	r16,0(r7)
 1003e7c:	3c400117 	ldw	r17,4(r7)
 1003e80:	39800204 	addi	r6,r7,8
 1003e84:	01000044 	movi	r4,1
 1003e88:	d9814015 	stw	r6,1280(sp)
 1003e8c:	d8000405 	stb	zero,16(sp)
 1003e90:	003ebe06 	br	100398c <___vfprintf_internal_r+0xa44>
 1003e94:	3c000017 	ldw	r16,0(r7)
 1003e98:	3c400117 	ldw	r17,4(r7)
 1003e9c:	38800204 	addi	r2,r7,8
 1003ea0:	d8814015 	stw	r2,1280(sp)
 1003ea4:	003eb706 	br	1003984 <___vfprintf_internal_r+0xa3c>
 1003ea8:	3c000017 	ldw	r16,0(r7)
 1003eac:	3c400117 	ldw	r17,4(r7)
 1003eb0:	39000204 	addi	r4,r7,8
 1003eb4:	d9014015 	stw	r4,1280(sp)
 1003eb8:	0009883a 	mov	r4,zero
 1003ebc:	d8000405 	stb	zero,16(sp)
 1003ec0:	003eb206 	br	100398c <___vfprintf_internal_r+0xa44>
 1003ec4:	38c00017 	ldw	r3,0(r7)
 1003ec8:	39c00104 	addi	r7,r7,4
 1003ecc:	d8c14a15 	stw	r3,1320(sp)
 1003ed0:	1800d70e 	bge	r3,zero,1004230 <___vfprintf_internal_r+0x12e8>
 1003ed4:	00c7c83a 	sub	r3,zero,r3
 1003ed8:	d8c14a15 	stw	r3,1320(sp)
 1003edc:	d9014c17 	ldw	r4,1328(sp)
 1003ee0:	b8c00007 	ldb	r3,0(r23)
 1003ee4:	21000114 	ori	r4,r4,4
 1003ee8:	d9014c15 	stw	r4,1328(sp)
 1003eec:	003c9806 	br	1003150 <___vfprintf_internal_r+0x208>
 1003ef0:	d9814c17 	ldw	r6,1328(sp)
 1003ef4:	3080080c 	andi	r2,r6,32
 1003ef8:	1001f626 	beq	r2,zero,10046d4 <___vfprintf_internal_r+0x178c>
 1003efc:	d9014b17 	ldw	r4,1324(sp)
 1003f00:	38800017 	ldw	r2,0(r7)
 1003f04:	39c00104 	addi	r7,r7,4
 1003f08:	d9c14015 	stw	r7,1280(sp)
 1003f0c:	2007d7fa 	srai	r3,r4,31
 1003f10:	d9c14017 	ldw	r7,1280(sp)
 1003f14:	11000015 	stw	r4,0(r2)
 1003f18:	10c00115 	stw	r3,4(r2)
 1003f1c:	003c6906 	br	10030c4 <___vfprintf_internal_r+0x17c>
 1003f20:	b8c00007 	ldb	r3,0(r23)
 1003f24:	00801b04 	movi	r2,108
 1003f28:	18825526 	beq	r3,r2,1004880 <___vfprintf_internal_r+0x1938>
 1003f2c:	d9414c17 	ldw	r5,1328(sp)
 1003f30:	29400414 	ori	r5,r5,16
 1003f34:	d9414c15 	stw	r5,1328(sp)
 1003f38:	003c8506 	br	1003150 <___vfprintf_internal_r+0x208>
 1003f3c:	d9814c17 	ldw	r6,1328(sp)
 1003f40:	b8c00007 	ldb	r3,0(r23)
 1003f44:	31800814 	ori	r6,r6,32
 1003f48:	d9814c15 	stw	r6,1328(sp)
 1003f4c:	003c8006 	br	1003150 <___vfprintf_internal_r+0x208>
 1003f50:	d8814c17 	ldw	r2,1328(sp)
 1003f54:	3c000017 	ldw	r16,0(r7)
 1003f58:	00c01e04 	movi	r3,120
 1003f5c:	10800094 	ori	r2,r2,2
 1003f60:	d8814c15 	stw	r2,1328(sp)
 1003f64:	39c00104 	addi	r7,r7,4
 1003f68:	014040b4 	movhi	r5,258
 1003f6c:	2967ec04 	addi	r5,r5,-24656
 1003f70:	00800c04 	movi	r2,48
 1003f74:	0023883a 	mov	r17,zero
 1003f78:	01000084 	movi	r4,2
 1003f7c:	d9c14015 	stw	r7,1280(sp)
 1003f80:	d8c14d15 	stw	r3,1332(sp)
 1003f84:	d9414415 	stw	r5,1296(sp)
 1003f88:	d8800445 	stb	r2,17(sp)
 1003f8c:	d8c00485 	stb	r3,18(sp)
 1003f90:	d8000405 	stb	zero,16(sp)
 1003f94:	003e7d06 	br	100398c <___vfprintf_internal_r+0xa44>
 1003f98:	d8814c17 	ldw	r2,1328(sp)
 1003f9c:	b8c00007 	ldb	r3,0(r23)
 1003fa0:	10801014 	ori	r2,r2,64
 1003fa4:	d8814c15 	stw	r2,1328(sp)
 1003fa8:	003c6906 	br	1003150 <___vfprintf_internal_r+0x208>
 1003fac:	d9414c17 	ldw	r5,1328(sp)
 1003fb0:	2880020c 	andi	r2,r5,8
 1003fb4:	1001e526 	beq	r2,zero,100474c <___vfprintf_internal_r+0x1804>
 1003fb8:	39800017 	ldw	r6,0(r7)
 1003fbc:	38800204 	addi	r2,r7,8
 1003fc0:	d8814015 	stw	r2,1280(sp)
 1003fc4:	d9814215 	stw	r6,1288(sp)
 1003fc8:	39c00117 	ldw	r7,4(r7)
 1003fcc:	d9c14315 	stw	r7,1292(sp)
 1003fd0:	d9014217 	ldw	r4,1288(sp)
 1003fd4:	d9414317 	ldw	r5,1292(sp)
 1003fd8:	1009eac0 	call	1009eac <__isinfd>
 1003fdc:	10021d26 	beq	r2,zero,1004854 <___vfprintf_internal_r+0x190c>
 1003fe0:	d9014217 	ldw	r4,1288(sp)
 1003fe4:	d9414317 	ldw	r5,1292(sp)
 1003fe8:	000d883a 	mov	r6,zero
 1003fec:	000f883a 	mov	r7,zero
 1003ff0:	100b7a00 	call	100b7a0 <__ltdf2>
 1003ff4:	1002d016 	blt	r2,zero,1004b38 <___vfprintf_internal_r+0x1bf0>
 1003ff8:	d9414d17 	ldw	r5,1332(sp)
 1003ffc:	008011c4 	movi	r2,71
 1004000:	11421016 	blt	r2,r5,1004844 <___vfprintf_internal_r+0x18fc>
 1004004:	018040b4 	movhi	r6,258
 1004008:	31a7f104 	addi	r6,r6,-24636
 100400c:	d9814115 	stw	r6,1284(sp)
 1004010:	d9014c17 	ldw	r4,1328(sp)
 1004014:	00c000c4 	movi	r3,3
 1004018:	00bfdfc4 	movi	r2,-129
 100401c:	2088703a 	and	r4,r4,r2
 1004020:	180f883a 	mov	r7,r3
 1004024:	d8c14515 	stw	r3,1300(sp)
 1004028:	d9014c15 	stw	r4,1328(sp)
 100402c:	d8014615 	stw	zero,1304(sp)
 1004030:	003e6a06 	br	10039dc <___vfprintf_internal_r+0xa94>
 1004034:	38800017 	ldw	r2,0(r7)
 1004038:	00c00044 	movi	r3,1
 100403c:	39c00104 	addi	r7,r7,4
 1004040:	d9c14015 	stw	r7,1280(sp)
 1004044:	d9000f04 	addi	r4,sp,60
 1004048:	180f883a 	mov	r7,r3
 100404c:	d8c14515 	stw	r3,1300(sp)
 1004050:	d9014115 	stw	r4,1284(sp)
 1004054:	d8800f05 	stb	r2,60(sp)
 1004058:	d8000405 	stb	zero,16(sp)
 100405c:	003cac06 	br	1003310 <___vfprintf_internal_r+0x3c8>
 1004060:	014040b4 	movhi	r5,258
 1004064:	2967f704 	addi	r5,r5,-24612
 1004068:	d9414415 	stw	r5,1296(sp)
 100406c:	d9814c17 	ldw	r6,1328(sp)
 1004070:	3080080c 	andi	r2,r6,32
 1004074:	1000ff26 	beq	r2,zero,1004474 <___vfprintf_internal_r+0x152c>
 1004078:	3c000017 	ldw	r16,0(r7)
 100407c:	3c400117 	ldw	r17,4(r7)
 1004080:	38800204 	addi	r2,r7,8
 1004084:	d8814015 	stw	r2,1280(sp)
 1004088:	d9414c17 	ldw	r5,1328(sp)
 100408c:	2880004c 	andi	r2,r5,1
 1004090:	1005003a 	cmpeq	r2,r2,zero
 1004094:	1000b91e 	bne	r2,zero,100437c <___vfprintf_internal_r+0x1434>
 1004098:	8444b03a 	or	r2,r16,r17
 100409c:	1000b726 	beq	r2,zero,100437c <___vfprintf_internal_r+0x1434>
 10040a0:	d9814d17 	ldw	r6,1332(sp)
 10040a4:	29400094 	ori	r5,r5,2
 10040a8:	00800c04 	movi	r2,48
 10040ac:	01000084 	movi	r4,2
 10040b0:	d9414c15 	stw	r5,1328(sp)
 10040b4:	d8800445 	stb	r2,17(sp)
 10040b8:	d9800485 	stb	r6,18(sp)
 10040bc:	d8000405 	stb	zero,16(sp)
 10040c0:	003e3206 	br	100398c <___vfprintf_internal_r+0xa44>
 10040c4:	018040b4 	movhi	r6,258
 10040c8:	31a7ec04 	addi	r6,r6,-24656
 10040cc:	d9814415 	stw	r6,1296(sp)
 10040d0:	003fe606 	br	100406c <___vfprintf_internal_r+0x1124>
 10040d4:	00800ac4 	movi	r2,43
 10040d8:	d8800405 	stb	r2,16(sp)
 10040dc:	b8c00007 	ldb	r3,0(r23)
 10040e0:	003c1b06 	br	1003150 <___vfprintf_internal_r+0x208>
 10040e4:	d8814c17 	ldw	r2,1328(sp)
 10040e8:	b8c00007 	ldb	r3,0(r23)
 10040ec:	10800054 	ori	r2,r2,1
 10040f0:	d8814c15 	stw	r2,1328(sp)
 10040f4:	003c1606 	br	1003150 <___vfprintf_internal_r+0x208>
 10040f8:	d8800407 	ldb	r2,16(sp)
 10040fc:	10004c1e 	bne	r2,zero,1004230 <___vfprintf_internal_r+0x12e8>
 1004100:	00800804 	movi	r2,32
 1004104:	d8800405 	stb	r2,16(sp)
 1004108:	b8c00007 	ldb	r3,0(r23)
 100410c:	003c1006 	br	1003150 <___vfprintf_internal_r+0x208>
 1004110:	d9814c17 	ldw	r6,1328(sp)
 1004114:	b8c00007 	ldb	r3,0(r23)
 1004118:	31800214 	ori	r6,r6,8
 100411c:	d9814c15 	stw	r6,1328(sp)
 1004120:	003c0b06 	br	1003150 <___vfprintf_internal_r+0x208>
 1004124:	0009883a 	mov	r4,zero
 1004128:	04000244 	movi	r16,9
 100412c:	01400284 	movi	r5,10
 1004130:	d9c15115 	stw	r7,1348(sp)
 1004134:	10026680 	call	1002668 <__mulsi3>
 1004138:	b9000007 	ldb	r4,0(r23)
 100413c:	d8c14d17 	ldw	r3,1332(sp)
 1004140:	bdc00044 	addi	r23,r23,1
 1004144:	d9014d15 	stw	r4,1332(sp)
 1004148:	d9414d17 	ldw	r5,1332(sp)
 100414c:	1885883a 	add	r2,r3,r2
 1004150:	113ff404 	addi	r4,r2,-48
 1004154:	28bff404 	addi	r2,r5,-48
 1004158:	d9c15117 	ldw	r7,1348(sp)
 100415c:	80bff32e 	bgeu	r16,r2,100412c <___vfprintf_internal_r+0x11e4>
 1004160:	d9014a15 	stw	r4,1320(sp)
 1004164:	003bfc06 	br	1003158 <___vfprintf_internal_r+0x210>
 1004168:	d8814c17 	ldw	r2,1328(sp)
 100416c:	b8c00007 	ldb	r3,0(r23)
 1004170:	10802014 	ori	r2,r2,128
 1004174:	d8814c15 	stw	r2,1328(sp)
 1004178:	003bf506 	br	1003150 <___vfprintf_internal_r+0x208>
 100417c:	b8c00007 	ldb	r3,0(r23)
 1004180:	00800a84 	movi	r2,42
 1004184:	bdc00044 	addi	r23,r23,1
 1004188:	18831826 	beq	r3,r2,1004dec <___vfprintf_internal_r+0x1ea4>
 100418c:	d8c14d15 	stw	r3,1332(sp)
 1004190:	18bff404 	addi	r2,r3,-48
 1004194:	00c00244 	movi	r3,9
 1004198:	18827b36 	bltu	r3,r2,1004b88 <___vfprintf_internal_r+0x1c40>
 100419c:	1821883a 	mov	r16,r3
 10041a0:	0009883a 	mov	r4,zero
 10041a4:	01400284 	movi	r5,10
 10041a8:	d9c15115 	stw	r7,1348(sp)
 10041ac:	10026680 	call	1002668 <__mulsi3>
 10041b0:	d9414d17 	ldw	r5,1332(sp)
 10041b4:	b9800007 	ldb	r6,0(r23)
 10041b8:	d9c15117 	ldw	r7,1348(sp)
 10041bc:	1145883a 	add	r2,r2,r5
 10041c0:	113ff404 	addi	r4,r2,-48
 10041c4:	30bff404 	addi	r2,r6,-48
 10041c8:	d9814d15 	stw	r6,1332(sp)
 10041cc:	bdc00044 	addi	r23,r23,1
 10041d0:	80bff42e 	bgeu	r16,r2,10041a4 <___vfprintf_internal_r+0x125c>
 10041d4:	2027883a 	mov	r19,r4
 10041d8:	203bdf0e 	bge	r4,zero,1003158 <___vfprintf_internal_r+0x210>
 10041dc:	04ffffc4 	movi	r19,-1
 10041e0:	003bdd06 	br	1003158 <___vfprintf_internal_r+0x210>
 10041e4:	d8000405 	stb	zero,16(sp)
 10041e8:	39800017 	ldw	r6,0(r7)
 10041ec:	39c00104 	addi	r7,r7,4
 10041f0:	d9c14015 	stw	r7,1280(sp)
 10041f4:	d9814115 	stw	r6,1284(sp)
 10041f8:	3001c926 	beq	r6,zero,1004920 <___vfprintf_internal_r+0x19d8>
 10041fc:	98000e16 	blt	r19,zero,1004238 <___vfprintf_internal_r+0x12f0>
 1004200:	d9014117 	ldw	r4,1284(sp)
 1004204:	000b883a 	mov	r5,zero
 1004208:	980d883a 	mov	r6,r19
 100420c:	10082080 	call	1008208 <memchr>
 1004210:	10025926 	beq	r2,zero,1004b78 <___vfprintf_internal_r+0x1c30>
 1004214:	d8c14117 	ldw	r3,1284(sp)
 1004218:	10cfc83a 	sub	r7,r2,r3
 100421c:	99c19e16 	blt	r19,r7,1004898 <___vfprintf_internal_r+0x1950>
 1004220:	d9c14515 	stw	r7,1300(sp)
 1004224:	38000916 	blt	r7,zero,100424c <___vfprintf_internal_r+0x1304>
 1004228:	d8014615 	stw	zero,1304(sp)
 100422c:	003deb06 	br	10039dc <___vfprintf_internal_r+0xa94>
 1004230:	b8c00007 	ldb	r3,0(r23)
 1004234:	003bc606 	br	1003150 <___vfprintf_internal_r+0x208>
 1004238:	d9014117 	ldw	r4,1284(sp)
 100423c:	1002e640 	call	1002e64 <strlen>
 1004240:	d8814515 	stw	r2,1300(sp)
 1004244:	100f883a 	mov	r7,r2
 1004248:	103ff70e 	bge	r2,zero,1004228 <___vfprintf_internal_r+0x12e0>
 100424c:	d8014515 	stw	zero,1300(sp)
 1004250:	d8014615 	stw	zero,1304(sp)
 1004254:	003de106 	br	10039dc <___vfprintf_internal_r+0xa94>
 1004258:	20c03fcc 	andi	r3,r4,255
 100425c:	00800044 	movi	r2,1
 1004260:	18802d26 	beq	r3,r2,1004318 <___vfprintf_internal_r+0x13d0>
 1004264:	18800e36 	bltu	r3,r2,10042a0 <___vfprintf_internal_r+0x1358>
 1004268:	00800084 	movi	r2,2
 100426c:	1880fa26 	beq	r3,r2,1004658 <___vfprintf_internal_r+0x1710>
 1004270:	010040b4 	movhi	r4,258
 1004274:	2127fc04 	addi	r4,r4,-24592
 1004278:	1002e640 	call	1002e64 <strlen>
 100427c:	100f883a 	mov	r7,r2
 1004280:	dcc14515 	stw	r19,1300(sp)
 1004284:	9880010e 	bge	r19,r2,100428c <___vfprintf_internal_r+0x1344>
 1004288:	d8814515 	stw	r2,1300(sp)
 100428c:	008040b4 	movhi	r2,258
 1004290:	10a7fc04 	addi	r2,r2,-24592
 1004294:	dcc14615 	stw	r19,1304(sp)
 1004298:	d8814115 	stw	r2,1284(sp)
 100429c:	003dcf06 	br	10039dc <___vfprintf_internal_r+0xa94>
 10042a0:	d9401904 	addi	r5,sp,100
 10042a4:	dd000f04 	addi	r20,sp,60
 10042a8:	d9414115 	stw	r5,1284(sp)
 10042ac:	880a977a 	slli	r5,r17,29
 10042b0:	d9814117 	ldw	r6,1284(sp)
 10042b4:	8004d0fa 	srli	r2,r16,3
 10042b8:	8806d0fa 	srli	r3,r17,3
 10042bc:	810001cc 	andi	r4,r16,7
 10042c0:	2884b03a 	or	r2,r5,r2
 10042c4:	31bfffc4 	addi	r6,r6,-1
 10042c8:	21000c04 	addi	r4,r4,48
 10042cc:	d9814115 	stw	r6,1284(sp)
 10042d0:	10cab03a 	or	r5,r2,r3
 10042d4:	31000005 	stb	r4,0(r6)
 10042d8:	1021883a 	mov	r16,r2
 10042dc:	1823883a 	mov	r17,r3
 10042e0:	283ff21e 	bne	r5,zero,10042ac <___vfprintf_internal_r+0x1364>
 10042e4:	d8c14c17 	ldw	r3,1328(sp)
 10042e8:	1880004c 	andi	r2,r3,1
 10042ec:	1005003a 	cmpeq	r2,r2,zero
 10042f0:	103db31e 	bne	r2,zero,10039c0 <___vfprintf_internal_r+0xa78>
 10042f4:	20803fcc 	andi	r2,r4,255
 10042f8:	1080201c 	xori	r2,r2,128
 10042fc:	10bfe004 	addi	r2,r2,-128
 1004300:	00c00c04 	movi	r3,48
 1004304:	10fdae26 	beq	r2,r3,10039c0 <___vfprintf_internal_r+0xa78>
 1004308:	31bfffc4 	addi	r6,r6,-1
 100430c:	d9814115 	stw	r6,1284(sp)
 1004310:	30c00005 	stb	r3,0(r6)
 1004314:	003daa06 	br	10039c0 <___vfprintf_internal_r+0xa78>
 1004318:	88800068 	cmpgeui	r2,r17,1
 100431c:	10002c1e 	bne	r2,zero,10043d0 <___vfprintf_internal_r+0x1488>
 1004320:	8800021e 	bne	r17,zero,100432c <___vfprintf_internal_r+0x13e4>
 1004324:	00800244 	movi	r2,9
 1004328:	14002936 	bltu	r2,r16,10043d0 <___vfprintf_internal_r+0x1488>
 100432c:	d90018c4 	addi	r4,sp,99
 1004330:	dd000f04 	addi	r20,sp,60
 1004334:	d9014115 	stw	r4,1284(sp)
 1004338:	d9014117 	ldw	r4,1284(sp)
 100433c:	80800c04 	addi	r2,r16,48
 1004340:	20800005 	stb	r2,0(r4)
 1004344:	003d9e06 	br	10039c0 <___vfprintf_internal_r+0xa78>
 1004348:	dc400d17 	ldw	r17,52(sp)
 100434c:	070040b4 	movhi	fp,258
 1004350:	e7280384 	addi	fp,fp,-24562
 1004354:	9425883a 	add	r18,r18,r16
 1004358:	8c400044 	addi	r17,r17,1
 100435c:	008001c4 	movi	r2,7
 1004360:	1f000015 	stw	fp,0(r3)
 1004364:	1c000115 	stw	r16,4(r3)
 1004368:	dc800e15 	stw	r18,56(sp)
 100436c:	dc400d15 	stw	r17,52(sp)
 1004370:	147ddc16 	blt	r2,r17,1003ae4 <___vfprintf_internal_r+0xb9c>
 1004374:	18c00204 	addi	r3,r3,8
 1004378:	003c7406 	br	100354c <___vfprintf_internal_r+0x604>
 100437c:	01000084 	movi	r4,2
 1004380:	d8000405 	stb	zero,16(sp)
 1004384:	003d8106 	br	100398c <___vfprintf_internal_r+0xa44>
 1004388:	d9814c17 	ldw	r6,1328(sp)
 100438c:	30c4703a 	and	r2,r6,r3
 1004390:	1005003a 	cmpeq	r2,r2,zero
 1004394:	103cb326 	beq	r2,zero,1003664 <___vfprintf_internal_r+0x71c>
 1004398:	d9014117 	ldw	r4,1284(sp)
 100439c:	94800044 	addi	r18,r18,1
 10043a0:	8c400044 	addi	r17,r17,1
 10043a4:	008001c4 	movi	r2,7
 10043a8:	a9000015 	stw	r4,0(r21)
 10043ac:	a8c00115 	stw	r3,4(r21)
 10043b0:	dc800e15 	stw	r18,56(sp)
 10043b4:	dc400d15 	stw	r17,52(sp)
 10043b8:	147e6016 	blt	r2,r17,1003d3c <___vfprintf_internal_r+0xdf4>
 10043bc:	acc00204 	addi	r19,r21,8
 10043c0:	003cd106 	br	1003708 <___vfprintf_internal_r+0x7c0>
 10043c4:	070040b4 	movhi	fp,258
 10043c8:	e7280384 	addi	fp,fp,-24562
 10043cc:	003c4906 	br	10034f4 <___vfprintf_internal_r+0x5ac>
 10043d0:	dd000f04 	addi	r20,sp,60
 10043d4:	dc801904 	addi	r18,sp,100
 10043d8:	8009883a 	mov	r4,r16
 10043dc:	880b883a 	mov	r5,r17
 10043e0:	01800284 	movi	r6,10
 10043e4:	000f883a 	mov	r7,zero
 10043e8:	100aee40 	call	100aee4 <__umoddi3>
 10043ec:	12000c04 	addi	r8,r2,48
 10043f0:	94bfffc4 	addi	r18,r18,-1
 10043f4:	8009883a 	mov	r4,r16
 10043f8:	880b883a 	mov	r5,r17
 10043fc:	01800284 	movi	r6,10
 1004400:	000f883a 	mov	r7,zero
 1004404:	92000005 	stb	r8,0(r18)
 1004408:	100a86c0 	call	100a86c <__udivdi3>
 100440c:	1009883a 	mov	r4,r2
 1004410:	1021883a 	mov	r16,r2
 1004414:	18800068 	cmpgeui	r2,r3,1
 1004418:	1823883a 	mov	r17,r3
 100441c:	103fee1e 	bne	r2,zero,10043d8 <___vfprintf_internal_r+0x1490>
 1004420:	1800021e 	bne	r3,zero,100442c <___vfprintf_internal_r+0x14e4>
 1004424:	00800244 	movi	r2,9
 1004428:	113feb36 	bltu	r2,r4,10043d8 <___vfprintf_internal_r+0x1490>
 100442c:	94bfffc4 	addi	r18,r18,-1
 1004430:	dc814115 	stw	r18,1284(sp)
 1004434:	003fc006 	br	1004338 <___vfprintf_internal_r+0x13f0>
 1004438:	d9014c17 	ldw	r4,1328(sp)
 100443c:	2080004c 	andi	r2,r4,1
 1004440:	10009a1e 	bne	r2,zero,10046ac <___vfprintf_internal_r+0x1764>
 1004444:	d9401904 	addi	r5,sp,100
 1004448:	dd000f04 	addi	r20,sp,60
 100444c:	d9414115 	stw	r5,1284(sp)
 1004450:	003d5b06 	br	10039c0 <___vfprintf_internal_r+0xa78>
 1004454:	d9014f17 	ldw	r4,1340(sp)
 1004458:	b00b883a 	mov	r5,r22
 100445c:	d9800c04 	addi	r6,sp,48
 1004460:	1002ee40 	call	1002ee4 <__sprint_r>
 1004464:	103c731e 	bne	r2,zero,1003634 <___vfprintf_internal_r+0x6ec>
 1004468:	dc800e17 	ldw	r18,56(sp)
 100446c:	d8c01904 	addi	r3,sp,100
 1004470:	003cf906 	br	1003858 <___vfprintf_internal_r+0x910>
 1004474:	d8c14c17 	ldw	r3,1328(sp)
 1004478:	1880040c 	andi	r2,r3,16
 100447c:	1000711e 	bne	r2,zero,1004644 <___vfprintf_internal_r+0x16fc>
 1004480:	d9014c17 	ldw	r4,1328(sp)
 1004484:	2080100c 	andi	r2,r4,64
 1004488:	10006e26 	beq	r2,zero,1004644 <___vfprintf_internal_r+0x16fc>
 100448c:	3c00000b 	ldhu	r16,0(r7)
 1004490:	0023883a 	mov	r17,zero
 1004494:	39c00104 	addi	r7,r7,4
 1004498:	d9c14015 	stw	r7,1280(sp)
 100449c:	003efa06 	br	1004088 <___vfprintf_internal_r+0x1140>
 10044a0:	dc400d17 	ldw	r17,52(sp)
 10044a4:	070040b4 	movhi	fp,258
 10044a8:	e7280384 	addi	fp,fp,-24562
 10044ac:	9425883a 	add	r18,r18,r16
 10044b0:	8c400044 	addi	r17,r17,1
 10044b4:	008001c4 	movi	r2,7
 10044b8:	1f000015 	stw	fp,0(r3)
 10044bc:	1c000115 	stw	r16,4(r3)
 10044c0:	dc800e15 	stw	r18,56(sp)
 10044c4:	dc400d15 	stw	r17,52(sp)
 10044c8:	147d7016 	blt	r2,r17,1003a8c <___vfprintf_internal_r+0xb44>
 10044cc:	18c00204 	addi	r3,r3,8
 10044d0:	003d7506 	br	1003aa8 <___vfprintf_internal_r+0xb60>
 10044d4:	dc800e17 	ldw	r18,56(sp)
 10044d8:	dc400d17 	ldw	r17,52(sp)
 10044dc:	070040b4 	movhi	fp,258
 10044e0:	e7280784 	addi	fp,fp,-24546
 10044e4:	003bba06 	br	10033d0 <___vfprintf_internal_r+0x488>
 10044e8:	d9014f17 	ldw	r4,1340(sp)
 10044ec:	b00b883a 	mov	r5,r22
 10044f0:	d9800c04 	addi	r6,sp,48
 10044f4:	1002ee40 	call	1002ee4 <__sprint_r>
 10044f8:	103c4e1e 	bne	r2,zero,1003634 <___vfprintf_internal_r+0x6ec>
 10044fc:	dc800e17 	ldw	r18,56(sp)
 1004500:	d8c01904 	addi	r3,sp,100
 1004504:	003ce306 	br	1003894 <___vfprintf_internal_r+0x94c>
 1004508:	3c000017 	ldw	r16,0(r7)
 100450c:	0009883a 	mov	r4,zero
 1004510:	39c00104 	addi	r7,r7,4
 1004514:	0023883a 	mov	r17,zero
 1004518:	d9c14015 	stw	r7,1280(sp)
 100451c:	d8000405 	stb	zero,16(sp)
 1004520:	003d1a06 	br	100398c <___vfprintf_internal_r+0xa44>
 1004524:	38800017 	ldw	r2,0(r7)
 1004528:	39c00104 	addi	r7,r7,4
 100452c:	d9c14015 	stw	r7,1280(sp)
 1004530:	1023d7fa 	srai	r17,r2,31
 1004534:	1021883a 	mov	r16,r2
 1004538:	003d1206 	br	1003984 <___vfprintf_internal_r+0xa3c>
 100453c:	3c000017 	ldw	r16,0(r7)
 1004540:	01000044 	movi	r4,1
 1004544:	39c00104 	addi	r7,r7,4
 1004548:	0023883a 	mov	r17,zero
 100454c:	d9c14015 	stw	r7,1280(sp)
 1004550:	d8000405 	stb	zero,16(sp)
 1004554:	003d0d06 	br	100398c <___vfprintf_internal_r+0xa44>
 1004558:	008040b4 	movhi	r2,258
 100455c:	10a80304 	addi	r2,r2,-24564
 1004560:	94800044 	addi	r18,r18,1
 1004564:	8c400044 	addi	r17,r17,1
 1004568:	a8800015 	stw	r2,0(r21)
 100456c:	00c00044 	movi	r3,1
 1004570:	008001c4 	movi	r2,7
 1004574:	a8c00115 	stw	r3,4(r21)
 1004578:	dc800e15 	stw	r18,56(sp)
 100457c:	dc400d15 	stw	r17,52(sp)
 1004580:	1440ca16 	blt	r2,r17,10048ac <___vfprintf_internal_r+0x1964>
 1004584:	a8c00204 	addi	r3,r21,8
 1004588:	2000061e 	bne	r4,zero,10045a4 <___vfprintf_internal_r+0x165c>
 100458c:	d9414717 	ldw	r5,1308(sp)
 1004590:	2800041e 	bne	r5,zero,10045a4 <___vfprintf_internal_r+0x165c>
 1004594:	d9814c17 	ldw	r6,1328(sp)
 1004598:	3080004c 	andi	r2,r6,1
 100459c:	1005003a 	cmpeq	r2,r2,zero
 10045a0:	103bea1e 	bne	r2,zero,100354c <___vfprintf_internal_r+0x604>
 10045a4:	00800044 	movi	r2,1
 10045a8:	dc400d17 	ldw	r17,52(sp)
 10045ac:	18800115 	stw	r2,4(r3)
 10045b0:	d8814917 	ldw	r2,1316(sp)
 10045b4:	94800044 	addi	r18,r18,1
 10045b8:	8c400044 	addi	r17,r17,1
 10045bc:	18800015 	stw	r2,0(r3)
 10045c0:	008001c4 	movi	r2,7
 10045c4:	dc800e15 	stw	r18,56(sp)
 10045c8:	dc400d15 	stw	r17,52(sp)
 10045cc:	1440ca16 	blt	r2,r17,10048f8 <___vfprintf_internal_r+0x19b0>
 10045d0:	18c00204 	addi	r3,r3,8
 10045d4:	0121c83a 	sub	r16,zero,r4
 10045d8:	0400500e 	bge	zero,r16,100471c <___vfprintf_internal_r+0x17d4>
 10045dc:	00800404 	movi	r2,16
 10045e0:	1400800e 	bge	r2,r16,10047e4 <___vfprintf_internal_r+0x189c>
 10045e4:	1027883a 	mov	r19,r2
 10045e8:	070040b4 	movhi	fp,258
 10045ec:	e7280384 	addi	fp,fp,-24562
 10045f0:	050001c4 	movi	r20,7
 10045f4:	00000306 	br	1004604 <___vfprintf_internal_r+0x16bc>
 10045f8:	18c00204 	addi	r3,r3,8
 10045fc:	843ffc04 	addi	r16,r16,-16
 1004600:	9c007a0e 	bge	r19,r16,10047ec <___vfprintf_internal_r+0x18a4>
 1004604:	94800404 	addi	r18,r18,16
 1004608:	8c400044 	addi	r17,r17,1
 100460c:	1f000015 	stw	fp,0(r3)
 1004610:	1cc00115 	stw	r19,4(r3)
 1004614:	dc800e15 	stw	r18,56(sp)
 1004618:	dc400d15 	stw	r17,52(sp)
 100461c:	a47ff60e 	bge	r20,r17,10045f8 <___vfprintf_internal_r+0x16b0>
 1004620:	d9014f17 	ldw	r4,1340(sp)
 1004624:	b00b883a 	mov	r5,r22
 1004628:	d9800c04 	addi	r6,sp,48
 100462c:	1002ee40 	call	1002ee4 <__sprint_r>
 1004630:	103c001e 	bne	r2,zero,1003634 <___vfprintf_internal_r+0x6ec>
 1004634:	dc800e17 	ldw	r18,56(sp)
 1004638:	dc400d17 	ldw	r17,52(sp)
 100463c:	d8c01904 	addi	r3,sp,100
 1004640:	003fee06 	br	10045fc <___vfprintf_internal_r+0x16b4>
 1004644:	3c000017 	ldw	r16,0(r7)
 1004648:	0023883a 	mov	r17,zero
 100464c:	39c00104 	addi	r7,r7,4
 1004650:	d9c14015 	stw	r7,1280(sp)
 1004654:	003e8c06 	br	1004088 <___vfprintf_internal_r+0x1140>
 1004658:	d9401904 	addi	r5,sp,100
 100465c:	dd000f04 	addi	r20,sp,60
 1004660:	d9414115 	stw	r5,1284(sp)
 1004664:	d9814417 	ldw	r6,1296(sp)
 1004668:	880a973a 	slli	r5,r17,28
 100466c:	8004d13a 	srli	r2,r16,4
 1004670:	810003cc 	andi	r4,r16,15
 1004674:	3109883a 	add	r4,r6,r4
 1004678:	2884b03a 	or	r2,r5,r2
 100467c:	21400003 	ldbu	r5,0(r4)
 1004680:	d9014117 	ldw	r4,1284(sp)
 1004684:	8806d13a 	srli	r3,r17,4
 1004688:	1021883a 	mov	r16,r2
 100468c:	213fffc4 	addi	r4,r4,-1
 1004690:	d9014115 	stw	r4,1284(sp)
 1004694:	d9814117 	ldw	r6,1284(sp)
 1004698:	10c8b03a 	or	r4,r2,r3
 100469c:	1823883a 	mov	r17,r3
 10046a0:	31400005 	stb	r5,0(r6)
 10046a4:	203fef1e 	bne	r4,zero,1004664 <___vfprintf_internal_r+0x171c>
 10046a8:	003cc506 	br	10039c0 <___vfprintf_internal_r+0xa78>
 10046ac:	00800c04 	movi	r2,48
 10046b0:	d98018c4 	addi	r6,sp,99
 10046b4:	dd000f04 	addi	r20,sp,60
 10046b8:	d88018c5 	stb	r2,99(sp)
 10046bc:	d9814115 	stw	r6,1284(sp)
 10046c0:	003cbf06 	br	10039c0 <___vfprintf_internal_r+0xa78>
 10046c4:	dc400d17 	ldw	r17,52(sp)
 10046c8:	070040b4 	movhi	fp,258
 10046cc:	e7280784 	addi	fp,fp,-24546
 10046d0:	003bc106 	br	10035d8 <___vfprintf_internal_r+0x690>
 10046d4:	d9414c17 	ldw	r5,1328(sp)
 10046d8:	2880040c 	andi	r2,r5,16
 10046dc:	10007c26 	beq	r2,zero,10048d0 <___vfprintf_internal_r+0x1988>
 10046e0:	38800017 	ldw	r2,0(r7)
 10046e4:	39c00104 	addi	r7,r7,4
 10046e8:	d9c14015 	stw	r7,1280(sp)
 10046ec:	d9814b17 	ldw	r6,1324(sp)
 10046f0:	d9c14017 	ldw	r7,1280(sp)
 10046f4:	11800015 	stw	r6,0(r2)
 10046f8:	003a7206 	br	10030c4 <___vfprintf_internal_r+0x17c>
 10046fc:	d9014f17 	ldw	r4,1340(sp)
 1004700:	b00b883a 	mov	r5,r22
 1004704:	d9800c04 	addi	r6,sp,48
 1004708:	1002ee40 	call	1002ee4 <__sprint_r>
 100470c:	103bc91e 	bne	r2,zero,1003634 <___vfprintf_internal_r+0x6ec>
 1004710:	dc800e17 	ldw	r18,56(sp)
 1004714:	dc400d17 	ldw	r17,52(sp)
 1004718:	d8c01904 	addi	r3,sp,100
 100471c:	d9014717 	ldw	r4,1308(sp)
 1004720:	d9414117 	ldw	r5,1284(sp)
 1004724:	8c400044 	addi	r17,r17,1
 1004728:	9125883a 	add	r18,r18,r4
 100472c:	008001c4 	movi	r2,7
 1004730:	19400015 	stw	r5,0(r3)
 1004734:	19000115 	stw	r4,4(r3)
 1004738:	dc800e15 	stw	r18,56(sp)
 100473c:	dc400d15 	stw	r17,52(sp)
 1004740:	147ce816 	blt	r2,r17,1003ae4 <___vfprintf_internal_r+0xb9c>
 1004744:	18c00204 	addi	r3,r3,8
 1004748:	003b8006 	br	100354c <___vfprintf_internal_r+0x604>
 100474c:	38c00017 	ldw	r3,0(r7)
 1004750:	39000204 	addi	r4,r7,8
 1004754:	d9014015 	stw	r4,1280(sp)
 1004758:	d8c14215 	stw	r3,1288(sp)
 100475c:	39c00117 	ldw	r7,4(r7)
 1004760:	d9c14315 	stw	r7,1292(sp)
 1004764:	003e1a06 	br	1003fd0 <___vfprintf_internal_r+0x1088>
 1004768:	0005883a 	mov	r2,zero
 100476c:	1409c83a 	sub	r4,r2,r16
 1004770:	1105803a 	cmpltu	r2,r2,r4
 1004774:	044bc83a 	sub	r5,zero,r17
 1004778:	2885c83a 	sub	r2,r5,r2
 100477c:	2021883a 	mov	r16,r4
 1004780:	1023883a 	mov	r17,r2
 1004784:	01000044 	movi	r4,1
 1004788:	00800b44 	movi	r2,45
 100478c:	d8800405 	stb	r2,16(sp)
 1004790:	003c7e06 	br	100398c <___vfprintf_internal_r+0xa44>
 1004794:	d9014f17 	ldw	r4,1340(sp)
 1004798:	b00b883a 	mov	r5,r22
 100479c:	d9800c04 	addi	r6,sp,48
 10047a0:	1002ee40 	call	1002ee4 <__sprint_r>
 10047a4:	103ba31e 	bne	r2,zero,1003634 <___vfprintf_internal_r+0x6ec>
 10047a8:	dc800e17 	ldw	r18,56(sp)
 10047ac:	dc400d17 	ldw	r17,52(sp)
 10047b0:	d9000517 	ldw	r4,20(sp)
 10047b4:	d9401904 	addi	r5,sp,100
 10047b8:	003da106 	br	1003e40 <___vfprintf_internal_r+0xef8>
 10047bc:	d9014f17 	ldw	r4,1340(sp)
 10047c0:	b00b883a 	mov	r5,r22
 10047c4:	d9800c04 	addi	r6,sp,48
 10047c8:	1002ee40 	call	1002ee4 <__sprint_r>
 10047cc:	103b991e 	bne	r2,zero,1003634 <___vfprintf_internal_r+0x6ec>
 10047d0:	dc800e17 	ldw	r18,56(sp)
 10047d4:	dc400d17 	ldw	r17,52(sp)
 10047d8:	d9000517 	ldw	r4,20(sp)
 10047dc:	d8c01904 	addi	r3,sp,100
 10047e0:	003d8b06 	br	1003e10 <___vfprintf_internal_r+0xec8>
 10047e4:	070040b4 	movhi	fp,258
 10047e8:	e7280384 	addi	fp,fp,-24562
 10047ec:	9425883a 	add	r18,r18,r16
 10047f0:	8c400044 	addi	r17,r17,1
 10047f4:	008001c4 	movi	r2,7
 10047f8:	1f000015 	stw	fp,0(r3)
 10047fc:	1c000115 	stw	r16,4(r3)
 1004800:	dc800e15 	stw	r18,56(sp)
 1004804:	dc400d15 	stw	r17,52(sp)
 1004808:	147fbc16 	blt	r2,r17,10046fc <___vfprintf_internal_r+0x17b4>
 100480c:	18c00204 	addi	r3,r3,8
 1004810:	003fc206 	br	100471c <___vfprintf_internal_r+0x17d4>
 1004814:	d9014f17 	ldw	r4,1340(sp)
 1004818:	b00b883a 	mov	r5,r22
 100481c:	d9800c04 	addi	r6,sp,48
 1004820:	1002ee40 	call	1002ee4 <__sprint_r>
 1004824:	103b831e 	bne	r2,zero,1003634 <___vfprintf_internal_r+0x6ec>
 1004828:	dc800e17 	ldw	r18,56(sp)
 100482c:	d9000517 	ldw	r4,20(sp)
 1004830:	d8c01904 	addi	r3,sp,100
 1004834:	003cfc06 	br	1003c28 <___vfprintf_internal_r+0xce0>
 1004838:	070040b4 	movhi	fp,258
 100483c:	e7280384 	addi	fp,fp,-24562
 1004840:	003bde06 	br	10037bc <___vfprintf_internal_r+0x874>
 1004844:	008040b4 	movhi	r2,258
 1004848:	10a7f204 	addi	r2,r2,-24632
 100484c:	d8814115 	stw	r2,1284(sp)
 1004850:	003def06 	br	1004010 <___vfprintf_internal_r+0x10c8>
 1004854:	d9014217 	ldw	r4,1288(sp)
 1004858:	d9414317 	ldw	r5,1292(sp)
 100485c:	1009ef80 	call	1009ef8 <__isnand>
 1004860:	10003926 	beq	r2,zero,1004948 <___vfprintf_internal_r+0x1a00>
 1004864:	d9414d17 	ldw	r5,1332(sp)
 1004868:	008011c4 	movi	r2,71
 100486c:	1140ce16 	blt	r2,r5,1004ba8 <___vfprintf_internal_r+0x1c60>
 1004870:	018040b4 	movhi	r6,258
 1004874:	31a7f304 	addi	r6,r6,-24628
 1004878:	d9814115 	stw	r6,1284(sp)
 100487c:	003de406 	br	1004010 <___vfprintf_internal_r+0x10c8>
 1004880:	d9014c17 	ldw	r4,1328(sp)
 1004884:	bdc00044 	addi	r23,r23,1
 1004888:	b8c00007 	ldb	r3,0(r23)
 100488c:	21000814 	ori	r4,r4,32
 1004890:	d9014c15 	stw	r4,1328(sp)
 1004894:	003a2e06 	br	1003150 <___vfprintf_internal_r+0x208>
 1004898:	dcc14515 	stw	r19,1300(sp)
 100489c:	98011016 	blt	r19,zero,1004ce0 <___vfprintf_internal_r+0x1d98>
 10048a0:	980f883a 	mov	r7,r19
 10048a4:	d8014615 	stw	zero,1304(sp)
 10048a8:	003c4c06 	br	10039dc <___vfprintf_internal_r+0xa94>
 10048ac:	d9014f17 	ldw	r4,1340(sp)
 10048b0:	b00b883a 	mov	r5,r22
 10048b4:	d9800c04 	addi	r6,sp,48
 10048b8:	1002ee40 	call	1002ee4 <__sprint_r>
 10048bc:	103b5d1e 	bne	r2,zero,1003634 <___vfprintf_internal_r+0x6ec>
 10048c0:	dc800e17 	ldw	r18,56(sp)
 10048c4:	d9000517 	ldw	r4,20(sp)
 10048c8:	d8c01904 	addi	r3,sp,100
 10048cc:	003f2e06 	br	1004588 <___vfprintf_internal_r+0x1640>
 10048d0:	d8c14c17 	ldw	r3,1328(sp)
 10048d4:	1880100c 	andi	r2,r3,64
 10048d8:	1000a026 	beq	r2,zero,1004b5c <___vfprintf_internal_r+0x1c14>
 10048dc:	38800017 	ldw	r2,0(r7)
 10048e0:	39c00104 	addi	r7,r7,4
 10048e4:	d9c14015 	stw	r7,1280(sp)
 10048e8:	d9014b17 	ldw	r4,1324(sp)
 10048ec:	d9c14017 	ldw	r7,1280(sp)
 10048f0:	1100000d 	sth	r4,0(r2)
 10048f4:	0039f306 	br	10030c4 <___vfprintf_internal_r+0x17c>
 10048f8:	d9014f17 	ldw	r4,1340(sp)
 10048fc:	b00b883a 	mov	r5,r22
 1004900:	d9800c04 	addi	r6,sp,48
 1004904:	1002ee40 	call	1002ee4 <__sprint_r>
 1004908:	103b4a1e 	bne	r2,zero,1003634 <___vfprintf_internal_r+0x6ec>
 100490c:	dc800e17 	ldw	r18,56(sp)
 1004910:	dc400d17 	ldw	r17,52(sp)
 1004914:	d9000517 	ldw	r4,20(sp)
 1004918:	d8c01904 	addi	r3,sp,100
 100491c:	003f2d06 	br	10045d4 <___vfprintf_internal_r+0x168c>
 1004920:	00800184 	movi	r2,6
 1004924:	14c09a36 	bltu	r2,r19,1004b90 <___vfprintf_internal_r+0x1c48>
 1004928:	dcc14515 	stw	r19,1300(sp)
 100492c:	9800010e 	bge	r19,zero,1004934 <___vfprintf_internal_r+0x19ec>
 1004930:	d8014515 	stw	zero,1300(sp)
 1004934:	008040b4 	movhi	r2,258
 1004938:	10a7f504 	addi	r2,r2,-24620
 100493c:	980f883a 	mov	r7,r19
 1004940:	d8814115 	stw	r2,1284(sp)
 1004944:	003a7206 	br	1003310 <___vfprintf_internal_r+0x3c8>
 1004948:	00bfffc4 	movi	r2,-1
 100494c:	9880e226 	beq	r19,r2,1004cd8 <___vfprintf_internal_r+0x1d90>
 1004950:	d9414d17 	ldw	r5,1332(sp)
 1004954:	008019c4 	movi	r2,103
 1004958:	2880dc26 	beq	r5,r2,1004ccc <___vfprintf_internal_r+0x1d84>
 100495c:	008011c4 	movi	r2,71
 1004960:	2880da26 	beq	r5,r2,1004ccc <___vfprintf_internal_r+0x1d84>
 1004964:	d9414c17 	ldw	r5,1328(sp)
 1004968:	d9014317 	ldw	r4,1292(sp)
 100496c:	d9814217 	ldw	r6,1288(sp)
 1004970:	29404014 	ori	r5,r5,256
 1004974:	d9414c15 	stw	r5,1328(sp)
 1004978:	2000cc16 	blt	r4,zero,1004cac <___vfprintf_internal_r+0x1d64>
 100497c:	3021883a 	mov	r16,r6
 1004980:	2023883a 	mov	r17,r4
 1004984:	0039883a 	mov	fp,zero
 1004988:	d9414d17 	ldw	r5,1332(sp)
 100498c:	00801984 	movi	r2,102
 1004990:	2880b726 	beq	r5,r2,1004c70 <___vfprintf_internal_r+0x1d28>
 1004994:	00801184 	movi	r2,70
 1004998:	2880b526 	beq	r5,r2,1004c70 <___vfprintf_internal_r+0x1d28>
 100499c:	00801944 	movi	r2,101
 10049a0:	2880c826 	beq	r5,r2,1004cc4 <___vfprintf_internal_r+0x1d7c>
 10049a4:	00801144 	movi	r2,69
 10049a8:	2880c626 	beq	r5,r2,1004cc4 <___vfprintf_internal_r+0x1d7c>
 10049ac:	9829883a 	mov	r20,r19
 10049b0:	d9014f17 	ldw	r4,1340(sp)
 10049b4:	d8800504 	addi	r2,sp,20
 10049b8:	880d883a 	mov	r6,r17
 10049bc:	d8800115 	stw	r2,4(sp)
 10049c0:	d8c00604 	addi	r3,sp,24
 10049c4:	d8800704 	addi	r2,sp,28
 10049c8:	800b883a 	mov	r5,r16
 10049cc:	01c00084 	movi	r7,2
 10049d0:	d8c00215 	stw	r3,8(sp)
 10049d4:	d8800315 	stw	r2,12(sp)
 10049d8:	dd000015 	stw	r20,0(sp)
 10049dc:	10051e00 	call	10051e0 <_dtoa_r>
 10049e0:	d9814d17 	ldw	r6,1332(sp)
 10049e4:	d8814115 	stw	r2,1284(sp)
 10049e8:	008019c4 	movi	r2,103
 10049ec:	30809526 	beq	r6,r2,1004c44 <___vfprintf_internal_r+0x1cfc>
 10049f0:	d8c14d17 	ldw	r3,1332(sp)
 10049f4:	008011c4 	movi	r2,71
 10049f8:	18809226 	beq	r3,r2,1004c44 <___vfprintf_internal_r+0x1cfc>
 10049fc:	d9414117 	ldw	r5,1284(sp)
 1004a00:	d9814d17 	ldw	r6,1332(sp)
 1004a04:	00801984 	movi	r2,102
 1004a08:	2d25883a 	add	r18,r5,r20
 1004a0c:	30808626 	beq	r6,r2,1004c28 <___vfprintf_internal_r+0x1ce0>
 1004a10:	00801184 	movi	r2,70
 1004a14:	30808426 	beq	r6,r2,1004c28 <___vfprintf_internal_r+0x1ce0>
 1004a18:	000d883a 	mov	r6,zero
 1004a1c:	000f883a 	mov	r7,zero
 1004a20:	880b883a 	mov	r5,r17
 1004a24:	8009883a 	mov	r4,r16
 1004a28:	100b5500 	call	100b550 <__eqdf2>
 1004a2c:	1000751e 	bne	r2,zero,1004c04 <___vfprintf_internal_r+0x1cbc>
 1004a30:	9005883a 	mov	r2,r18
 1004a34:	dc800715 	stw	r18,28(sp)
 1004a38:	d9014117 	ldw	r4,1284(sp)
 1004a3c:	d9414d17 	ldw	r5,1332(sp)
 1004a40:	00c019c4 	movi	r3,103
 1004a44:	1125c83a 	sub	r18,r2,r4
 1004a48:	28c06826 	beq	r5,r3,1004bec <___vfprintf_internal_r+0x1ca4>
 1004a4c:	008011c4 	movi	r2,71
 1004a50:	28806626 	beq	r5,r2,1004bec <___vfprintf_internal_r+0x1ca4>
 1004a54:	d9000517 	ldw	r4,20(sp)
 1004a58:	d8c14d17 	ldw	r3,1332(sp)
 1004a5c:	00801944 	movi	r2,101
 1004a60:	10c05516 	blt	r2,r3,1004bb8 <___vfprintf_internal_r+0x1c70>
 1004a64:	213fffc4 	addi	r4,r4,-1
 1004a68:	d9000515 	stw	r4,20(sp)
 1004a6c:	d8c00805 	stb	r3,32(sp)
 1004a70:	2021883a 	mov	r16,r4
 1004a74:	2000c116 	blt	r4,zero,1004d7c <___vfprintf_internal_r+0x1e34>
 1004a78:	00800ac4 	movi	r2,43
 1004a7c:	d8800845 	stb	r2,33(sp)
 1004a80:	00800244 	movi	r2,9
 1004a84:	1400af0e 	bge	r2,r16,1004d44 <___vfprintf_internal_r+0x1dfc>
 1004a88:	1027883a 	mov	r19,r2
 1004a8c:	dc400b84 	addi	r17,sp,46
 1004a90:	8009883a 	mov	r4,r16
 1004a94:	01400284 	movi	r5,10
 1004a98:	10025d40 	call	10025d4 <__modsi3>
 1004a9c:	10800c04 	addi	r2,r2,48
 1004aa0:	8c7fffc4 	addi	r17,r17,-1
 1004aa4:	8009883a 	mov	r4,r16
 1004aa8:	01400284 	movi	r5,10
 1004aac:	88800005 	stb	r2,0(r17)
 1004ab0:	10025680 	call	1002568 <__divsi3>
 1004ab4:	1021883a 	mov	r16,r2
 1004ab8:	98bff516 	blt	r19,r2,1004a90 <___vfprintf_internal_r+0x1b48>
 1004abc:	10c00c04 	addi	r3,r2,48
 1004ac0:	d88009c4 	addi	r2,sp,39
 1004ac4:	108001c4 	addi	r2,r2,7
 1004ac8:	897fffc4 	addi	r5,r17,-1
 1004acc:	88ffffc5 	stb	r3,-1(r17)
 1004ad0:	2880a72e 	bgeu	r5,r2,1004d70 <___vfprintf_internal_r+0x1e28>
 1004ad4:	1009883a 	mov	r4,r2
 1004ad8:	d9800804 	addi	r6,sp,32
 1004adc:	d8c00884 	addi	r3,sp,34
 1004ae0:	28800003 	ldbu	r2,0(r5)
 1004ae4:	29400044 	addi	r5,r5,1
 1004ae8:	18800005 	stb	r2,0(r3)
 1004aec:	18c00044 	addi	r3,r3,1
 1004af0:	293ffb36 	bltu	r5,r4,1004ae0 <___vfprintf_internal_r+0x1b98>
 1004af4:	1987c83a 	sub	r3,r3,r6
 1004af8:	00800044 	movi	r2,1
 1004afc:	d8c14815 	stw	r3,1312(sp)
 1004b00:	90cf883a 	add	r7,r18,r3
 1004b04:	1480960e 	bge	r2,r18,1004d60 <___vfprintf_internal_r+0x1e18>
 1004b08:	39c00044 	addi	r7,r7,1
 1004b0c:	d9c14515 	stw	r7,1300(sp)
 1004b10:	38003416 	blt	r7,zero,1004be4 <___vfprintf_internal_r+0x1c9c>
 1004b14:	e0803fcc 	andi	r2,fp,255
 1004b18:	1080201c 	xori	r2,r2,128
 1004b1c:	10bfe004 	addi	r2,r2,-128
 1004b20:	10004e26 	beq	r2,zero,1004c5c <___vfprintf_internal_r+0x1d14>
 1004b24:	00800b44 	movi	r2,45
 1004b28:	dc814715 	stw	r18,1308(sp)
 1004b2c:	d8014615 	stw	zero,1304(sp)
 1004b30:	d8800405 	stb	r2,16(sp)
 1004b34:	003bab06 	br	10039e4 <___vfprintf_internal_r+0xa9c>
 1004b38:	00800b44 	movi	r2,45
 1004b3c:	d8800405 	stb	r2,16(sp)
 1004b40:	003d2d06 	br	1003ff8 <___vfprintf_internal_r+0x10b0>
 1004b44:	d9014f17 	ldw	r4,1340(sp)
 1004b48:	b00b883a 	mov	r5,r22
 1004b4c:	d9800c04 	addi	r6,sp,48
 1004b50:	1002ee40 	call	1002ee4 <__sprint_r>
 1004b54:	103ab71e 	bne	r2,zero,1003634 <___vfprintf_internal_r+0x6ec>
 1004b58:	003ab506 	br	1003630 <___vfprintf_internal_r+0x6e8>
 1004b5c:	38800017 	ldw	r2,0(r7)
 1004b60:	39c00104 	addi	r7,r7,4
 1004b64:	d9c14015 	stw	r7,1280(sp)
 1004b68:	d9414b17 	ldw	r5,1324(sp)
 1004b6c:	d9c14017 	ldw	r7,1280(sp)
 1004b70:	11400015 	stw	r5,0(r2)
 1004b74:	00395306 	br	10030c4 <___vfprintf_internal_r+0x17c>
 1004b78:	980f883a 	mov	r7,r19
 1004b7c:	dcc14515 	stw	r19,1300(sp)
 1004b80:	d8014615 	stw	zero,1304(sp)
 1004b84:	003b9506 	br	10039dc <___vfprintf_internal_r+0xa94>
 1004b88:	0027883a 	mov	r19,zero
 1004b8c:	00397206 	br	1003158 <___vfprintf_internal_r+0x210>
 1004b90:	00c040b4 	movhi	r3,258
 1004b94:	18e7f504 	addi	r3,r3,-24620
 1004b98:	100f883a 	mov	r7,r2
 1004b9c:	d8814515 	stw	r2,1300(sp)
 1004ba0:	d8c14115 	stw	r3,1284(sp)
 1004ba4:	0039da06 	br	1003310 <___vfprintf_internal_r+0x3c8>
 1004ba8:	008040b4 	movhi	r2,258
 1004bac:	10a7f404 	addi	r2,r2,-24624
 1004bb0:	d8814115 	stw	r2,1284(sp)
 1004bb4:	003d1606 	br	1004010 <___vfprintf_internal_r+0x10c8>
 1004bb8:	d9414d17 	ldw	r5,1332(sp)
 1004bbc:	00801984 	movi	r2,102
 1004bc0:	28804926 	beq	r5,r2,1004ce8 <___vfprintf_internal_r+0x1da0>
 1004bc4:	200f883a 	mov	r7,r4
 1004bc8:	24805716 	blt	r4,r18,1004d28 <___vfprintf_internal_r+0x1de0>
 1004bcc:	d9414c17 	ldw	r5,1328(sp)
 1004bd0:	2880004c 	andi	r2,r5,1
 1004bd4:	10000126 	beq	r2,zero,1004bdc <___vfprintf_internal_r+0x1c94>
 1004bd8:	21c00044 	addi	r7,r4,1
 1004bdc:	d9c14515 	stw	r7,1300(sp)
 1004be0:	383fcc0e 	bge	r7,zero,1004b14 <___vfprintf_internal_r+0x1bcc>
 1004be4:	d8014515 	stw	zero,1300(sp)
 1004be8:	003fca06 	br	1004b14 <___vfprintf_internal_r+0x1bcc>
 1004bec:	d9000517 	ldw	r4,20(sp)
 1004bf0:	00bfff04 	movi	r2,-4
 1004bf4:	1100480e 	bge	r2,r4,1004d18 <___vfprintf_internal_r+0x1dd0>
 1004bf8:	99004716 	blt	r19,r4,1004d18 <___vfprintf_internal_r+0x1dd0>
 1004bfc:	d8c14d15 	stw	r3,1332(sp)
 1004c00:	003ff006 	br	1004bc4 <___vfprintf_internal_r+0x1c7c>
 1004c04:	d8800717 	ldw	r2,28(sp)
 1004c08:	14bf8b2e 	bgeu	r2,r18,1004a38 <___vfprintf_internal_r+0x1af0>
 1004c0c:	9007883a 	mov	r3,r18
 1004c10:	01000c04 	movi	r4,48
 1004c14:	11000005 	stb	r4,0(r2)
 1004c18:	10800044 	addi	r2,r2,1
 1004c1c:	d8800715 	stw	r2,28(sp)
 1004c20:	18bffc1e 	bne	r3,r2,1004c14 <___vfprintf_internal_r+0x1ccc>
 1004c24:	003f8406 	br	1004a38 <___vfprintf_internal_r+0x1af0>
 1004c28:	d8814117 	ldw	r2,1284(sp)
 1004c2c:	10c00007 	ldb	r3,0(r2)
 1004c30:	00800c04 	movi	r2,48
 1004c34:	18805b26 	beq	r3,r2,1004da4 <___vfprintf_internal_r+0x1e5c>
 1004c38:	d9000517 	ldw	r4,20(sp)
 1004c3c:	9125883a 	add	r18,r18,r4
 1004c40:	003f7506 	br	1004a18 <___vfprintf_internal_r+0x1ad0>
 1004c44:	d9014c17 	ldw	r4,1328(sp)
 1004c48:	2080004c 	andi	r2,r4,1
 1004c4c:	1005003a 	cmpeq	r2,r2,zero
 1004c50:	103f6a26 	beq	r2,zero,10049fc <___vfprintf_internal_r+0x1ab4>
 1004c54:	d8800717 	ldw	r2,28(sp)
 1004c58:	003f7706 	br	1004a38 <___vfprintf_internal_r+0x1af0>
 1004c5c:	d9c14515 	stw	r7,1300(sp)
 1004c60:	38004d16 	blt	r7,zero,1004d98 <___vfprintf_internal_r+0x1e50>
 1004c64:	dc814715 	stw	r18,1308(sp)
 1004c68:	d8014615 	stw	zero,1304(sp)
 1004c6c:	003b5b06 	br	10039dc <___vfprintf_internal_r+0xa94>
 1004c70:	d9014f17 	ldw	r4,1340(sp)
 1004c74:	d8800504 	addi	r2,sp,20
 1004c78:	d8800115 	stw	r2,4(sp)
 1004c7c:	d8c00604 	addi	r3,sp,24
 1004c80:	d8800704 	addi	r2,sp,28
 1004c84:	800b883a 	mov	r5,r16
 1004c88:	880d883a 	mov	r6,r17
 1004c8c:	01c000c4 	movi	r7,3
 1004c90:	d8c00215 	stw	r3,8(sp)
 1004c94:	d8800315 	stw	r2,12(sp)
 1004c98:	dcc00015 	stw	r19,0(sp)
 1004c9c:	9829883a 	mov	r20,r19
 1004ca0:	10051e00 	call	10051e0 <_dtoa_r>
 1004ca4:	d8814115 	stw	r2,1284(sp)
 1004ca8:	003f5106 	br	10049f0 <___vfprintf_internal_r+0x1aa8>
 1004cac:	d8c14217 	ldw	r3,1288(sp)
 1004cb0:	d9014317 	ldw	r4,1292(sp)
 1004cb4:	07000b44 	movi	fp,45
 1004cb8:	1821883a 	mov	r16,r3
 1004cbc:	2460003c 	xorhi	r17,r4,32768
 1004cc0:	003f3106 	br	1004988 <___vfprintf_internal_r+0x1a40>
 1004cc4:	9d000044 	addi	r20,r19,1
 1004cc8:	003f3906 	br	10049b0 <___vfprintf_internal_r+0x1a68>
 1004ccc:	983f251e 	bne	r19,zero,1004964 <___vfprintf_internal_r+0x1a1c>
 1004cd0:	04c00044 	movi	r19,1
 1004cd4:	003f2306 	br	1004964 <___vfprintf_internal_r+0x1a1c>
 1004cd8:	04c00184 	movi	r19,6
 1004cdc:	003f2106 	br	1004964 <___vfprintf_internal_r+0x1a1c>
 1004ce0:	d8014515 	stw	zero,1300(sp)
 1004ce4:	003eee06 	br	10048a0 <___vfprintf_internal_r+0x1958>
 1004ce8:	200f883a 	mov	r7,r4
 1004cec:	0100370e 	bge	zero,r4,1004dcc <___vfprintf_internal_r+0x1e84>
 1004cf0:	9800031e 	bne	r19,zero,1004d00 <___vfprintf_internal_r+0x1db8>
 1004cf4:	d9814c17 	ldw	r6,1328(sp)
 1004cf8:	3080004c 	andi	r2,r6,1
 1004cfc:	103fb726 	beq	r2,zero,1004bdc <___vfprintf_internal_r+0x1c94>
 1004d00:	20800044 	addi	r2,r4,1
 1004d04:	98a7883a 	add	r19,r19,r2
 1004d08:	dcc14515 	stw	r19,1300(sp)
 1004d0c:	980f883a 	mov	r7,r19
 1004d10:	983f800e 	bge	r19,zero,1004b14 <___vfprintf_internal_r+0x1bcc>
 1004d14:	003fb306 	br	1004be4 <___vfprintf_internal_r+0x1c9c>
 1004d18:	d9814d17 	ldw	r6,1332(sp)
 1004d1c:	31bfff84 	addi	r6,r6,-2
 1004d20:	d9814d15 	stw	r6,1332(sp)
 1004d24:	003f4c06 	br	1004a58 <___vfprintf_internal_r+0x1b10>
 1004d28:	0100180e 	bge	zero,r4,1004d8c <___vfprintf_internal_r+0x1e44>
 1004d2c:	00800044 	movi	r2,1
 1004d30:	1485883a 	add	r2,r2,r18
 1004d34:	d8814515 	stw	r2,1300(sp)
 1004d38:	100f883a 	mov	r7,r2
 1004d3c:	103f750e 	bge	r2,zero,1004b14 <___vfprintf_internal_r+0x1bcc>
 1004d40:	003fa806 	br	1004be4 <___vfprintf_internal_r+0x1c9c>
 1004d44:	80c00c04 	addi	r3,r16,48
 1004d48:	00800c04 	movi	r2,48
 1004d4c:	d8c008c5 	stb	r3,35(sp)
 1004d50:	d9800804 	addi	r6,sp,32
 1004d54:	d8c00904 	addi	r3,sp,36
 1004d58:	d8800885 	stb	r2,34(sp)
 1004d5c:	003f6506 	br	1004af4 <___vfprintf_internal_r+0x1bac>
 1004d60:	d9014c17 	ldw	r4,1328(sp)
 1004d64:	2084703a 	and	r2,r4,r2
 1004d68:	103f9c26 	beq	r2,zero,1004bdc <___vfprintf_internal_r+0x1c94>
 1004d6c:	003f6606 	br	1004b08 <___vfprintf_internal_r+0x1bc0>
 1004d70:	d9800804 	addi	r6,sp,32
 1004d74:	d8c00884 	addi	r3,sp,34
 1004d78:	003f5e06 	br	1004af4 <___vfprintf_internal_r+0x1bac>
 1004d7c:	00800b44 	movi	r2,45
 1004d80:	0121c83a 	sub	r16,zero,r4
 1004d84:	d8800845 	stb	r2,33(sp)
 1004d88:	003f3d06 	br	1004a80 <___vfprintf_internal_r+0x1b38>
 1004d8c:	00800084 	movi	r2,2
 1004d90:	1105c83a 	sub	r2,r2,r4
 1004d94:	003fe606 	br	1004d30 <___vfprintf_internal_r+0x1de8>
 1004d98:	d8014515 	stw	zero,1300(sp)
 1004d9c:	dc814715 	stw	r18,1308(sp)
 1004da0:	003fb106 	br	1004c68 <___vfprintf_internal_r+0x1d20>
 1004da4:	000d883a 	mov	r6,zero
 1004da8:	000f883a 	mov	r7,zero
 1004dac:	8009883a 	mov	r4,r16
 1004db0:	880b883a 	mov	r5,r17
 1004db4:	100b5e40 	call	100b5e4 <__nedf2>
 1004db8:	103f9f26 	beq	r2,zero,1004c38 <___vfprintf_internal_r+0x1cf0>
 1004dbc:	00800044 	movi	r2,1
 1004dc0:	1509c83a 	sub	r4,r2,r20
 1004dc4:	d9000515 	stw	r4,20(sp)
 1004dc8:	003f9b06 	br	1004c38 <___vfprintf_internal_r+0x1cf0>
 1004dcc:	98000d1e 	bne	r19,zero,1004e04 <___vfprintf_internal_r+0x1ebc>
 1004dd0:	d8c14c17 	ldw	r3,1328(sp)
 1004dd4:	1880004c 	andi	r2,r3,1
 1004dd8:	10000a1e 	bne	r2,zero,1004e04 <___vfprintf_internal_r+0x1ebc>
 1004ddc:	01000044 	movi	r4,1
 1004de0:	200f883a 	mov	r7,r4
 1004de4:	d9014515 	stw	r4,1300(sp)
 1004de8:	003f4a06 	br	1004b14 <___vfprintf_internal_r+0x1bcc>
 1004dec:	3cc00017 	ldw	r19,0(r7)
 1004df0:	39c00104 	addi	r7,r7,4
 1004df4:	983d0e0e 	bge	r19,zero,1004230 <___vfprintf_internal_r+0x12e8>
 1004df8:	b8c00007 	ldb	r3,0(r23)
 1004dfc:	04ffffc4 	movi	r19,-1
 1004e00:	0038d306 	br	1003150 <___vfprintf_internal_r+0x208>
 1004e04:	9cc00084 	addi	r19,r19,2
 1004e08:	dcc14515 	stw	r19,1300(sp)
 1004e0c:	980f883a 	mov	r7,r19
 1004e10:	983f400e 	bge	r19,zero,1004b14 <___vfprintf_internal_r+0x1bcc>
 1004e14:	003f7306 	br	1004be4 <___vfprintf_internal_r+0x1c9c>

01004e18 <__vfprintf_internal>:
 1004e18:	f811883a 	mov	r8,ra
 1004e1c:	100c3d80 	call	100c3d8 <_mcount>
 1004e20:	403f883a 	mov	ra,r8
 1004e24:	008040f4 	movhi	r2,259
 1004e28:	10a00704 	addi	r2,r2,-32740
 1004e2c:	2013883a 	mov	r9,r4
 1004e30:	11000017 	ldw	r4,0(r2)
 1004e34:	2805883a 	mov	r2,r5
 1004e38:	300f883a 	mov	r7,r6
 1004e3c:	480b883a 	mov	r5,r9
 1004e40:	100d883a 	mov	r6,r2
 1004e44:	1002f481 	jmpi	1002f48 <___vfprintf_internal_r>

01004e48 <__swsetup_r>:
 1004e48:	f811883a 	mov	r8,ra
 1004e4c:	100c3d80 	call	100c3d8 <_mcount>
 1004e50:	403f883a 	mov	ra,r8
 1004e54:	defffd04 	addi	sp,sp,-12
 1004e58:	dfc00215 	stw	ra,8(sp)
 1004e5c:	dc400115 	stw	r17,4(sp)
 1004e60:	dc000015 	stw	r16,0(sp)
 1004e64:	008040f4 	movhi	r2,259
 1004e68:	10a00704 	addi	r2,r2,-32740
 1004e6c:	10c00017 	ldw	r3,0(r2)
 1004e70:	2023883a 	mov	r17,r4
 1004e74:	2821883a 	mov	r16,r5
 1004e78:	18000226 	beq	r3,zero,1004e84 <__swsetup_r+0x3c>
 1004e7c:	18800e17 	ldw	r2,56(r3)
 1004e80:	10001f26 	beq	r2,zero,1004f00 <__swsetup_r+0xb8>
 1004e84:	8100030b 	ldhu	r4,12(r16)
 1004e88:	2080020c 	andi	r2,r4,8
 1004e8c:	10002826 	beq	r2,zero,1004f30 <__swsetup_r+0xe8>
 1004e90:	81400417 	ldw	r5,16(r16)
 1004e94:	28001d26 	beq	r5,zero,1004f0c <__swsetup_r+0xc4>
 1004e98:	2080004c 	andi	r2,r4,1
 1004e9c:	1005003a 	cmpeq	r2,r2,zero
 1004ea0:	10000b26 	beq	r2,zero,1004ed0 <__swsetup_r+0x88>
 1004ea4:	2080008c 	andi	r2,r4,2
 1004ea8:	10001226 	beq	r2,zero,1004ef4 <__swsetup_r+0xac>
 1004eac:	0005883a 	mov	r2,zero
 1004eb0:	80800215 	stw	r2,8(r16)
 1004eb4:	28000b26 	beq	r5,zero,1004ee4 <__swsetup_r+0x9c>
 1004eb8:	0005883a 	mov	r2,zero
 1004ebc:	dfc00217 	ldw	ra,8(sp)
 1004ec0:	dc400117 	ldw	r17,4(sp)
 1004ec4:	dc000017 	ldw	r16,0(sp)
 1004ec8:	dec00304 	addi	sp,sp,12
 1004ecc:	f800283a 	ret
 1004ed0:	80800517 	ldw	r2,20(r16)
 1004ed4:	80000215 	stw	zero,8(r16)
 1004ed8:	0085c83a 	sub	r2,zero,r2
 1004edc:	80800615 	stw	r2,24(r16)
 1004ee0:	283ff51e 	bne	r5,zero,1004eb8 <__swsetup_r+0x70>
 1004ee4:	2080200c 	andi	r2,r4,128
 1004ee8:	103ff326 	beq	r2,zero,1004eb8 <__swsetup_r+0x70>
 1004eec:	00bfffc4 	movi	r2,-1
 1004ef0:	003ff206 	br	1004ebc <__swsetup_r+0x74>
 1004ef4:	80800517 	ldw	r2,20(r16)
 1004ef8:	80800215 	stw	r2,8(r16)
 1004efc:	003fed06 	br	1004eb4 <__swsetup_r+0x6c>
 1004f00:	1809883a 	mov	r4,r3
 1004f04:	1006a8c0 	call	1006a8c <__sinit>
 1004f08:	003fde06 	br	1004e84 <__swsetup_r+0x3c>
 1004f0c:	20c0a00c 	andi	r3,r4,640
 1004f10:	00808004 	movi	r2,512
 1004f14:	18bfe026 	beq	r3,r2,1004e98 <__swsetup_r+0x50>
 1004f18:	8809883a 	mov	r4,r17
 1004f1c:	800b883a 	mov	r5,r16
 1004f20:	100791c0 	call	100791c <__smakebuf_r>
 1004f24:	8100030b 	ldhu	r4,12(r16)
 1004f28:	81400417 	ldw	r5,16(r16)
 1004f2c:	003fda06 	br	1004e98 <__swsetup_r+0x50>
 1004f30:	2080040c 	andi	r2,r4,16
 1004f34:	103fed26 	beq	r2,zero,1004eec <__swsetup_r+0xa4>
 1004f38:	2080010c 	andi	r2,r4,4
 1004f3c:	10001226 	beq	r2,zero,1004f88 <__swsetup_r+0x140>
 1004f40:	81400c17 	ldw	r5,48(r16)
 1004f44:	28000526 	beq	r5,zero,1004f5c <__swsetup_r+0x114>
 1004f48:	80801004 	addi	r2,r16,64
 1004f4c:	28800226 	beq	r5,r2,1004f58 <__swsetup_r+0x110>
 1004f50:	8809883a 	mov	r4,r17
 1004f54:	1006ebc0 	call	1006ebc <_free_r>
 1004f58:	80000c15 	stw	zero,48(r16)
 1004f5c:	8080030b 	ldhu	r2,12(r16)
 1004f60:	81400417 	ldw	r5,16(r16)
 1004f64:	80000115 	stw	zero,4(r16)
 1004f68:	10bff6cc 	andi	r2,r2,65499
 1004f6c:	8080030d 	sth	r2,12(r16)
 1004f70:	81400015 	stw	r5,0(r16)
 1004f74:	8080030b 	ldhu	r2,12(r16)
 1004f78:	10800214 	ori	r2,r2,8
 1004f7c:	113fffcc 	andi	r4,r2,65535
 1004f80:	8080030d 	sth	r2,12(r16)
 1004f84:	003fc306 	br	1004e94 <__swsetup_r+0x4c>
 1004f88:	81400417 	ldw	r5,16(r16)
 1004f8c:	003ff906 	br	1004f74 <__swsetup_r+0x12c>

01004f90 <quorem>:
 1004f90:	f811883a 	mov	r8,ra
 1004f94:	100c3d80 	call	100c3d8 <_mcount>
 1004f98:	403f883a 	mov	ra,r8
 1004f9c:	defff104 	addi	sp,sp,-60
 1004fa0:	dfc00e15 	stw	ra,56(sp)
 1004fa4:	df000d15 	stw	fp,52(sp)
 1004fa8:	ddc00c15 	stw	r23,48(sp)
 1004fac:	dd800b15 	stw	r22,44(sp)
 1004fb0:	dd400a15 	stw	r21,40(sp)
 1004fb4:	dd000915 	stw	r20,36(sp)
 1004fb8:	dcc00815 	stw	r19,32(sp)
 1004fbc:	dc800715 	stw	r18,28(sp)
 1004fc0:	dc400615 	stw	r17,24(sp)
 1004fc4:	dc000515 	stw	r16,20(sp)
 1004fc8:	28c00417 	ldw	r3,16(r5)
 1004fcc:	20800417 	ldw	r2,16(r4)
 1004fd0:	d9000315 	stw	r4,12(sp)
 1004fd4:	d9400415 	stw	r5,16(sp)
 1004fd8:	10c07f16 	blt	r2,r3,10051d8 <quorem+0x248>
 1004fdc:	1d3fffc4 	addi	r20,r3,-1
 1004fe0:	d8c00417 	ldw	r3,16(sp)
 1004fe4:	d9000317 	ldw	r4,12(sp)
 1004fe8:	a505883a 	add	r2,r20,r20
 1004fec:	1085883a 	add	r2,r2,r2
 1004ff0:	1cc00504 	addi	r19,r3,20
 1004ff4:	25c00504 	addi	r23,r4,20
 1004ff8:	98ad883a 	add	r22,r19,r2
 1004ffc:	15c7883a 	add	r3,r2,r23
 1005000:	b1400017 	ldw	r5,0(r22)
 1005004:	19000017 	ldw	r4,0(r3)
 1005008:	d8c00015 	stw	r3,0(sp)
 100500c:	29400044 	addi	r5,r5,1
 1005010:	d9000215 	stw	r4,8(sp)
 1005014:	10026400 	call	1002640 <__udivsi3>
 1005018:	1039883a 	mov	fp,r2
 100501c:	10003d1e 	bne	r2,zero,1005114 <quorem+0x184>
 1005020:	d9400417 	ldw	r5,16(sp)
 1005024:	d9000317 	ldw	r4,12(sp)
 1005028:	10086b40 	call	10086b4 <__mcmp>
 100502c:	10002c16 	blt	r2,zero,10050e0 <quorem+0x150>
 1005030:	e7000044 	addi	fp,fp,1
 1005034:	b80f883a 	mov	r7,r23
 1005038:	0011883a 	mov	r8,zero
 100503c:	0009883a 	mov	r4,zero
 1005040:	99400017 	ldw	r5,0(r19)
 1005044:	38c00017 	ldw	r3,0(r7)
 1005048:	9cc00104 	addi	r19,r19,4
 100504c:	28bfffcc 	andi	r2,r5,65535
 1005050:	2085883a 	add	r2,r4,r2
 1005054:	11bfffcc 	andi	r6,r2,65535
 1005058:	193fffcc 	andi	r4,r3,65535
 100505c:	1004d43a 	srli	r2,r2,16
 1005060:	280ad43a 	srli	r5,r5,16
 1005064:	2189c83a 	sub	r4,r4,r6
 1005068:	2209883a 	add	r4,r4,r8
 100506c:	1806d43a 	srli	r3,r3,16
 1005070:	288b883a 	add	r5,r5,r2
 1005074:	200dd43a 	srai	r6,r4,16
 1005078:	28bfffcc 	andi	r2,r5,65535
 100507c:	1887c83a 	sub	r3,r3,r2
 1005080:	1987883a 	add	r3,r3,r6
 1005084:	3900000d 	sth	r4,0(r7)
 1005088:	38c0008d 	sth	r3,2(r7)
 100508c:	2808d43a 	srli	r4,r5,16
 1005090:	39c00104 	addi	r7,r7,4
 1005094:	1811d43a 	srai	r8,r3,16
 1005098:	b4ffe92e 	bgeu	r22,r19,1005040 <quorem+0xb0>
 100509c:	a505883a 	add	r2,r20,r20
 10050a0:	1085883a 	add	r2,r2,r2
 10050a4:	b885883a 	add	r2,r23,r2
 10050a8:	10c00017 	ldw	r3,0(r2)
 10050ac:	18000c1e 	bne	r3,zero,10050e0 <quorem+0x150>
 10050b0:	113fff04 	addi	r4,r2,-4
 10050b4:	b900082e 	bgeu	r23,r4,10050d8 <quorem+0x148>
 10050b8:	10bfff17 	ldw	r2,-4(r2)
 10050bc:	10000326 	beq	r2,zero,10050cc <quorem+0x13c>
 10050c0:	00000506 	br	10050d8 <quorem+0x148>
 10050c4:	20800017 	ldw	r2,0(r4)
 10050c8:	1000031e 	bne	r2,zero,10050d8 <quorem+0x148>
 10050cc:	213fff04 	addi	r4,r4,-4
 10050d0:	a53fffc4 	addi	r20,r20,-1
 10050d4:	b93ffb36 	bltu	r23,r4,10050c4 <quorem+0x134>
 10050d8:	d9000317 	ldw	r4,12(sp)
 10050dc:	25000415 	stw	r20,16(r4)
 10050e0:	e005883a 	mov	r2,fp
 10050e4:	dfc00e17 	ldw	ra,56(sp)
 10050e8:	df000d17 	ldw	fp,52(sp)
 10050ec:	ddc00c17 	ldw	r23,48(sp)
 10050f0:	dd800b17 	ldw	r22,44(sp)
 10050f4:	dd400a17 	ldw	r21,40(sp)
 10050f8:	dd000917 	ldw	r20,36(sp)
 10050fc:	dcc00817 	ldw	r19,32(sp)
 1005100:	dc800717 	ldw	r18,28(sp)
 1005104:	dc400617 	ldw	r17,24(sp)
 1005108:	dc000517 	ldw	r16,20(sp)
 100510c:	dec00f04 	addi	sp,sp,60
 1005110:	f800283a 	ret
 1005114:	b823883a 	mov	r17,r23
 1005118:	9825883a 	mov	r18,r19
 100511c:	d8000115 	stw	zero,4(sp)
 1005120:	002b883a 	mov	r21,zero
 1005124:	94000017 	ldw	r16,0(r18)
 1005128:	e009883a 	mov	r4,fp
 100512c:	94800104 	addi	r18,r18,4
 1005130:	817fffcc 	andi	r5,r16,65535
 1005134:	10026680 	call	1002668 <__mulsi3>
 1005138:	800ad43a 	srli	r5,r16,16
 100513c:	e009883a 	mov	r4,fp
 1005140:	a8a1883a 	add	r16,r21,r2
 1005144:	10026680 	call	1002668 <__mulsi3>
 1005148:	89000017 	ldw	r4,0(r17)
 100514c:	80ffffcc 	andi	r3,r16,65535
 1005150:	8020d43a 	srli	r16,r16,16
 1005154:	217fffcc 	andi	r5,r4,65535
 1005158:	28cbc83a 	sub	r5,r5,r3
 100515c:	d8c00117 	ldw	r3,4(sp)
 1005160:	2008d43a 	srli	r4,r4,16
 1005164:	1405883a 	add	r2,r2,r16
 1005168:	28cb883a 	add	r5,r5,r3
 100516c:	280dd43a 	srai	r6,r5,16
 1005170:	10ffffcc 	andi	r3,r2,65535
 1005174:	20c9c83a 	sub	r4,r4,r3
 1005178:	2189883a 	add	r4,r4,r6
 100517c:	8900008d 	sth	r4,2(r17)
 1005180:	2009d43a 	srai	r4,r4,16
 1005184:	8940000d 	sth	r5,0(r17)
 1005188:	102ad43a 	srli	r21,r2,16
 100518c:	8c400104 	addi	r17,r17,4
 1005190:	d9000115 	stw	r4,4(sp)
 1005194:	b4bfe32e 	bgeu	r22,r18,1005124 <quorem+0x194>
 1005198:	d9000217 	ldw	r4,8(sp)
 100519c:	203fa01e 	bne	r4,zero,1005020 <quorem+0x90>
 10051a0:	d8800017 	ldw	r2,0(sp)
 10051a4:	10ffff04 	addi	r3,r2,-4
 10051a8:	b8c0082e 	bgeu	r23,r3,10051cc <quorem+0x23c>
 10051ac:	10bfff17 	ldw	r2,-4(r2)
 10051b0:	10000326 	beq	r2,zero,10051c0 <quorem+0x230>
 10051b4:	00000506 	br	10051cc <quorem+0x23c>
 10051b8:	18800017 	ldw	r2,0(r3)
 10051bc:	1000031e 	bne	r2,zero,10051cc <quorem+0x23c>
 10051c0:	18ffff04 	addi	r3,r3,-4
 10051c4:	a53fffc4 	addi	r20,r20,-1
 10051c8:	b8fffb36 	bltu	r23,r3,10051b8 <quorem+0x228>
 10051cc:	d8c00317 	ldw	r3,12(sp)
 10051d0:	1d000415 	stw	r20,16(r3)
 10051d4:	003f9206 	br	1005020 <quorem+0x90>
 10051d8:	0005883a 	mov	r2,zero
 10051dc:	003fc106 	br	10050e4 <quorem+0x154>

010051e0 <_dtoa_r>:
 10051e0:	f811883a 	mov	r8,ra
 10051e4:	100c3d80 	call	100c3d8 <_mcount>
 10051e8:	403f883a 	mov	ra,r8
 10051ec:	deffda04 	addi	sp,sp,-152
 10051f0:	dfc02515 	stw	ra,148(sp)
 10051f4:	df002415 	stw	fp,144(sp)
 10051f8:	ddc02315 	stw	r23,140(sp)
 10051fc:	dd802215 	stw	r22,136(sp)
 1005200:	dd402115 	stw	r21,132(sp)
 1005204:	dd002015 	stw	r20,128(sp)
 1005208:	dcc01f15 	stw	r19,124(sp)
 100520c:	dc801e15 	stw	r18,120(sp)
 1005210:	dc401d15 	stw	r17,116(sp)
 1005214:	dc001c15 	stw	r16,112(sp)
 1005218:	22001017 	ldw	r8,64(r4)
 100521c:	d9001615 	stw	r4,88(sp)
 1005220:	3023883a 	mov	r17,r6
 1005224:	2829883a 	mov	r20,r5
 1005228:	d9c01715 	stw	r7,92(sp)
 100522c:	dc802817 	ldw	r18,160(sp)
 1005230:	302b883a 	mov	r21,r6
 1005234:	40000a26 	beq	r8,zero,1005260 <_dtoa_r+0x80>
 1005238:	20801117 	ldw	r2,68(r4)
 100523c:	400b883a 	mov	r5,r8
 1005240:	40800115 	stw	r2,4(r8)
 1005244:	20c01117 	ldw	r3,68(r4)
 1005248:	00800044 	movi	r2,1
 100524c:	10c4983a 	sll	r2,r2,r3
 1005250:	40800215 	stw	r2,8(r8)
 1005254:	10085340 	call	1008534 <_Bfree>
 1005258:	d8c01617 	ldw	r3,88(sp)
 100525c:	18001015 	stw	zero,64(r3)
 1005260:	8800a316 	blt	r17,zero,10054f0 <_dtoa_r+0x310>
 1005264:	90000015 	stw	zero,0(r18)
 1005268:	a8dffc2c 	andhi	r3,r21,32752
 100526c:	009ffc34 	movhi	r2,32752
 1005270:	18809126 	beq	r3,r2,10054b8 <_dtoa_r+0x2d8>
 1005274:	000d883a 	mov	r6,zero
 1005278:	000f883a 	mov	r7,zero
 100527c:	a009883a 	mov	r4,r20
 1005280:	a80b883a 	mov	r5,r21
 1005284:	dd001215 	stw	r20,72(sp)
 1005288:	dd401315 	stw	r21,76(sp)
 100528c:	100b5e40 	call	100b5e4 <__nedf2>
 1005290:	1000171e 	bne	r2,zero,10052f0 <_dtoa_r+0x110>
 1005294:	d9802717 	ldw	r6,156(sp)
 1005298:	00800044 	movi	r2,1
 100529c:	30800015 	stw	r2,0(r6)
 10052a0:	d8802917 	ldw	r2,164(sp)
 10052a4:	10029b26 	beq	r2,zero,1005d14 <_dtoa_r+0xb34>
 10052a8:	d9002917 	ldw	r4,164(sp)
 10052ac:	008040b4 	movhi	r2,258
 10052b0:	10a80344 	addi	r2,r2,-24563
 10052b4:	10ffffc4 	addi	r3,r2,-1
 10052b8:	20800015 	stw	r2,0(r4)
 10052bc:	1805883a 	mov	r2,r3
 10052c0:	dfc02517 	ldw	ra,148(sp)
 10052c4:	df002417 	ldw	fp,144(sp)
 10052c8:	ddc02317 	ldw	r23,140(sp)
 10052cc:	dd802217 	ldw	r22,136(sp)
 10052d0:	dd402117 	ldw	r21,132(sp)
 10052d4:	dd002017 	ldw	r20,128(sp)
 10052d8:	dcc01f17 	ldw	r19,124(sp)
 10052dc:	dc801e17 	ldw	r18,120(sp)
 10052e0:	dc401d17 	ldw	r17,116(sp)
 10052e4:	dc001c17 	ldw	r16,112(sp)
 10052e8:	dec02604 	addi	sp,sp,152
 10052ec:	f800283a 	ret
 10052f0:	d9001617 	ldw	r4,88(sp)
 10052f4:	d9401217 	ldw	r5,72(sp)
 10052f8:	d8800104 	addi	r2,sp,4
 10052fc:	a80d883a 	mov	r6,r21
 1005300:	d9c00204 	addi	r7,sp,8
 1005304:	d8800015 	stw	r2,0(sp)
 1005308:	1008bf80 	call	1008bf8 <__d2b>
 100530c:	d8800715 	stw	r2,28(sp)
 1005310:	a804d53a 	srli	r2,r21,20
 1005314:	1101ffcc 	andi	r4,r2,2047
 1005318:	20008626 	beq	r4,zero,1005534 <_dtoa_r+0x354>
 100531c:	d8c01217 	ldw	r3,72(sp)
 1005320:	00800434 	movhi	r2,16
 1005324:	10bfffc4 	addi	r2,r2,-1
 1005328:	ddc00117 	ldw	r23,4(sp)
 100532c:	a884703a 	and	r2,r21,r2
 1005330:	1811883a 	mov	r8,r3
 1005334:	124ffc34 	orhi	r9,r2,16368
 1005338:	25bf0044 	addi	r22,r4,-1023
 100533c:	d8000815 	stw	zero,32(sp)
 1005340:	0005883a 	mov	r2,zero
 1005344:	00cffe34 	movhi	r3,16376
 1005348:	480b883a 	mov	r5,r9
 100534c:	4009883a 	mov	r4,r8
 1005350:	180f883a 	mov	r7,r3
 1005354:	100d883a 	mov	r6,r2
 1005358:	1001c000 	call	1001c00 <__subdf3>
 100535c:	0218dbf4 	movhi	r8,25455
 1005360:	4210d844 	addi	r8,r8,17249
 1005364:	024ff4f4 	movhi	r9,16339
 1005368:	4a61e9c4 	addi	r9,r9,-30809
 100536c:	480f883a 	mov	r7,r9
 1005370:	400d883a 	mov	r6,r8
 1005374:	180b883a 	mov	r5,r3
 1005378:	1009883a 	mov	r4,r2
 100537c:	1001d0c0 	call	1001d0c <__muldf3>
 1005380:	0222d874 	movhi	r8,35681
 1005384:	42322cc4 	addi	r8,r8,-14157
 1005388:	024ff1f4 	movhi	r9,16327
 100538c:	4a628a04 	addi	r9,r9,-30168
 1005390:	480f883a 	mov	r7,r9
 1005394:	400d883a 	mov	r6,r8
 1005398:	180b883a 	mov	r5,r3
 100539c:	1009883a 	mov	r4,r2
 10053a0:	1001c8c0 	call	1001c8c <__adddf3>
 10053a4:	b009883a 	mov	r4,r22
 10053a8:	1021883a 	mov	r16,r2
 10053ac:	1823883a 	mov	r17,r3
 10053b0:	100b8340 	call	100b834 <__floatsidf>
 10053b4:	021427f4 	movhi	r8,20639
 10053b8:	421e7ec4 	addi	r8,r8,31227
 10053bc:	024ff4f4 	movhi	r9,16339
 10053c0:	4a5104c4 	addi	r9,r9,17427
 10053c4:	480f883a 	mov	r7,r9
 10053c8:	400d883a 	mov	r6,r8
 10053cc:	180b883a 	mov	r5,r3
 10053d0:	1009883a 	mov	r4,r2
 10053d4:	1001d0c0 	call	1001d0c <__muldf3>
 10053d8:	180f883a 	mov	r7,r3
 10053dc:	880b883a 	mov	r5,r17
 10053e0:	100d883a 	mov	r6,r2
 10053e4:	8009883a 	mov	r4,r16
 10053e8:	1001c8c0 	call	1001c8c <__adddf3>
 10053ec:	1009883a 	mov	r4,r2
 10053f0:	180b883a 	mov	r5,r3
 10053f4:	1021883a 	mov	r16,r2
 10053f8:	1823883a 	mov	r17,r3
 10053fc:	100b9380 	call	100b938 <__fixdfsi>
 1005400:	000d883a 	mov	r6,zero
 1005404:	000f883a 	mov	r7,zero
 1005408:	8009883a 	mov	r4,r16
 100540c:	880b883a 	mov	r5,r17
 1005410:	d8800d15 	stw	r2,52(sp)
 1005414:	100b7a00 	call	100b7a0 <__ltdf2>
 1005418:	10031716 	blt	r2,zero,1006078 <_dtoa_r+0xe98>
 100541c:	d8c00d17 	ldw	r3,52(sp)
 1005420:	00800584 	movi	r2,22
 1005424:	10c1482e 	bgeu	r2,r3,1005948 <_dtoa_r+0x768>
 1005428:	01000044 	movi	r4,1
 100542c:	d9000c15 	stw	r4,48(sp)
 1005430:	bd85c83a 	sub	r2,r23,r22
 1005434:	11bfffc4 	addi	r6,r2,-1
 1005438:	30030b16 	blt	r6,zero,1006068 <_dtoa_r+0xe88>
 100543c:	d9800a15 	stw	r6,40(sp)
 1005440:	d8001115 	stw	zero,68(sp)
 1005444:	d8c00d17 	ldw	r3,52(sp)
 1005448:	1802ff16 	blt	r3,zero,1006048 <_dtoa_r+0xe68>
 100544c:	d9000a17 	ldw	r4,40(sp)
 1005450:	d8c00915 	stw	r3,36(sp)
 1005454:	d8001015 	stw	zero,64(sp)
 1005458:	20c9883a 	add	r4,r4,r3
 100545c:	d9000a15 	stw	r4,40(sp)
 1005460:	d9001717 	ldw	r4,92(sp)
 1005464:	00800244 	movi	r2,9
 1005468:	11004636 	bltu	r2,r4,1005584 <_dtoa_r+0x3a4>
 100546c:	00800144 	movi	r2,5
 1005470:	11020416 	blt	r2,r4,1005c84 <_dtoa_r+0xaa4>
 1005474:	04400044 	movi	r17,1
 1005478:	d8c01717 	ldw	r3,92(sp)
 100547c:	00800144 	movi	r2,5
 1005480:	10c1ed36 	bltu	r2,r3,1005c38 <_dtoa_r+0xa58>
 1005484:	18c5883a 	add	r2,r3,r3
 1005488:	1085883a 	add	r2,r2,r2
 100548c:	00c04034 	movhi	r3,256
 1005490:	18d52804 	addi	r3,r3,21664
 1005494:	10c5883a 	add	r2,r2,r3
 1005498:	11000017 	ldw	r4,0(r2)
 100549c:	2000683a 	jmp	r4
 10054a0:	0100558c 	andi	r4,zero,342
 10054a4:	0100558c 	andi	r4,zero,342
 10054a8:	01005f8c 	andi	r4,zero,382
 10054ac:	01005f64 	muli	r4,zero,381
 10054b0:	01005fa8 	cmpgeui	r4,zero,382
 10054b4:	01005fb4 	movhi	r4,382
 10054b8:	d9002717 	ldw	r4,156(sp)
 10054bc:	0089c3c4 	movi	r2,9999
 10054c0:	20800015 	stw	r2,0(r4)
 10054c4:	a0001026 	beq	r20,zero,1005508 <_dtoa_r+0x328>
 10054c8:	00c040b4 	movhi	r3,258
 10054cc:	18e80f04 	addi	r3,r3,-24516
 10054d0:	d9802917 	ldw	r6,164(sp)
 10054d4:	303f7926 	beq	r6,zero,10052bc <_dtoa_r+0xdc>
 10054d8:	188000c7 	ldb	r2,3(r3)
 10054dc:	190000c4 	addi	r4,r3,3
 10054e0:	1000101e 	bne	r2,zero,1005524 <_dtoa_r+0x344>
 10054e4:	d8802917 	ldw	r2,164(sp)
 10054e8:	11000015 	stw	r4,0(r2)
 10054ec:	003f7306 	br	10052bc <_dtoa_r+0xdc>
 10054f0:	00a00034 	movhi	r2,32768
 10054f4:	10bfffc4 	addi	r2,r2,-1
 10054f8:	00c00044 	movi	r3,1
 10054fc:	88aa703a 	and	r21,r17,r2
 1005500:	90c00015 	stw	r3,0(r18)
 1005504:	003f5806 	br	1005268 <_dtoa_r+0x88>
 1005508:	00800434 	movhi	r2,16
 100550c:	10bfffc4 	addi	r2,r2,-1
 1005510:	a884703a 	and	r2,r21,r2
 1005514:	103fec1e 	bne	r2,zero,10054c8 <_dtoa_r+0x2e8>
 1005518:	00c040b4 	movhi	r3,258
 100551c:	18e80c04 	addi	r3,r3,-24528
 1005520:	003feb06 	br	10054d0 <_dtoa_r+0x2f0>
 1005524:	d8802917 	ldw	r2,164(sp)
 1005528:	19000204 	addi	r4,r3,8
 100552c:	11000015 	stw	r4,0(r2)
 1005530:	003f6206 	br	10052bc <_dtoa_r+0xdc>
 1005534:	ddc00117 	ldw	r23,4(sp)
 1005538:	d8800217 	ldw	r2,8(sp)
 100553c:	01000804 	movi	r4,32
 1005540:	b8c10c84 	addi	r3,r23,1074
 1005544:	18a3883a 	add	r17,r3,r2
 1005548:	2441b80e 	bge	r4,r17,1005c2c <_dtoa_r+0xa4c>
 100554c:	00c01004 	movi	r3,64
 1005550:	1c47c83a 	sub	r3,r3,r17
 1005554:	88bff804 	addi	r2,r17,-32
 1005558:	a8c6983a 	sll	r3,r21,r3
 100555c:	a084d83a 	srl	r2,r20,r2
 1005560:	1888b03a 	or	r4,r3,r2
 1005564:	10023400 	call	1002340 <__floatunsidf>
 1005568:	1011883a 	mov	r8,r2
 100556c:	00bf8434 	movhi	r2,65040
 1005570:	01000044 	movi	r4,1
 1005574:	10d3883a 	add	r9,r2,r3
 1005578:	8dbef344 	addi	r22,r17,-1075
 100557c:	d9000815 	stw	r4,32(sp)
 1005580:	003f6f06 	br	1005340 <_dtoa_r+0x160>
 1005584:	d8001715 	stw	zero,92(sp)
 1005588:	04400044 	movi	r17,1
 100558c:	00bfffc4 	movi	r2,-1
 1005590:	00c00044 	movi	r3,1
 1005594:	d8800e15 	stw	r2,56(sp)
 1005598:	d8002615 	stw	zero,152(sp)
 100559c:	d8800f15 	stw	r2,60(sp)
 10055a0:	d8c00b15 	stw	r3,44(sp)
 10055a4:	1021883a 	mov	r16,r2
 10055a8:	d8801617 	ldw	r2,88(sp)
 10055ac:	10001115 	stw	zero,68(r2)
 10055b0:	d8801617 	ldw	r2,88(sp)
 10055b4:	11401117 	ldw	r5,68(r2)
 10055b8:	1009883a 	mov	r4,r2
 10055bc:	1008b300 	call	1008b30 <_Balloc>
 10055c0:	d8c01617 	ldw	r3,88(sp)
 10055c4:	d8800515 	stw	r2,20(sp)
 10055c8:	18801015 	stw	r2,64(r3)
 10055cc:	00800384 	movi	r2,14
 10055d0:	14006836 	bltu	r2,r16,1005774 <_dtoa_r+0x594>
 10055d4:	8805003a 	cmpeq	r2,r17,zero
 10055d8:	1000661e 	bne	r2,zero,1005774 <_dtoa_r+0x594>
 10055dc:	d9000d17 	ldw	r4,52(sp)
 10055e0:	0102300e 	bge	zero,r4,1005ea4 <_dtoa_r+0xcc4>
 10055e4:	208003cc 	andi	r2,r4,15
 10055e8:	100490fa 	slli	r2,r2,3
 10055ec:	2025d13a 	srai	r18,r4,4
 10055f0:	00c040b4 	movhi	r3,258
 10055f4:	18e82104 	addi	r3,r3,-24444
 10055f8:	10c5883a 	add	r2,r2,r3
 10055fc:	90c0040c 	andi	r3,r18,16
 1005600:	14000017 	ldw	r16,0(r2)
 1005604:	14400117 	ldw	r17,4(r2)
 1005608:	18036a1e 	bne	r3,zero,10063b4 <_dtoa_r+0x11d4>
 100560c:	05800084 	movi	r22,2
 1005610:	90001026 	beq	r18,zero,1005654 <_dtoa_r+0x474>
 1005614:	04c040b4 	movhi	r19,258
 1005618:	9ce85304 	addi	r19,r19,-24244
 100561c:	9080004c 	andi	r2,r18,1
 1005620:	1005003a 	cmpeq	r2,r2,zero
 1005624:	1000081e 	bne	r2,zero,1005648 <_dtoa_r+0x468>
 1005628:	99800017 	ldw	r6,0(r19)
 100562c:	99c00117 	ldw	r7,4(r19)
 1005630:	880b883a 	mov	r5,r17
 1005634:	8009883a 	mov	r4,r16
 1005638:	1001d0c0 	call	1001d0c <__muldf3>
 100563c:	1021883a 	mov	r16,r2
 1005640:	b5800044 	addi	r22,r22,1
 1005644:	1823883a 	mov	r17,r3
 1005648:	9025d07a 	srai	r18,r18,1
 100564c:	9cc00204 	addi	r19,r19,8
 1005650:	903ff21e 	bne	r18,zero,100561c <_dtoa_r+0x43c>
 1005654:	a80b883a 	mov	r5,r21
 1005658:	a009883a 	mov	r4,r20
 100565c:	880f883a 	mov	r7,r17
 1005660:	800d883a 	mov	r6,r16
 1005664:	10020dc0 	call	10020dc <__divdf3>
 1005668:	1029883a 	mov	r20,r2
 100566c:	182b883a 	mov	r21,r3
 1005670:	d8c00c17 	ldw	r3,48(sp)
 1005674:	1805003a 	cmpeq	r2,r3,zero
 1005678:	1000081e 	bne	r2,zero,100569c <_dtoa_r+0x4bc>
 100567c:	0005883a 	mov	r2,zero
 1005680:	00cffc34 	movhi	r3,16368
 1005684:	180f883a 	mov	r7,r3
 1005688:	a009883a 	mov	r4,r20
 100568c:	a80b883a 	mov	r5,r21
 1005690:	100d883a 	mov	r6,r2
 1005694:	100b7a00 	call	100b7a0 <__ltdf2>
 1005698:	1003fe16 	blt	r2,zero,1006694 <_dtoa_r+0x14b4>
 100569c:	b009883a 	mov	r4,r22
 10056a0:	100b8340 	call	100b834 <__floatsidf>
 10056a4:	180b883a 	mov	r5,r3
 10056a8:	1009883a 	mov	r4,r2
 10056ac:	a00d883a 	mov	r6,r20
 10056b0:	a80f883a 	mov	r7,r21
 10056b4:	1001d0c0 	call	1001d0c <__muldf3>
 10056b8:	0011883a 	mov	r8,zero
 10056bc:	02500734 	movhi	r9,16412
 10056c0:	1009883a 	mov	r4,r2
 10056c4:	180b883a 	mov	r5,r3
 10056c8:	480f883a 	mov	r7,r9
 10056cc:	400d883a 	mov	r6,r8
 10056d0:	1001c8c0 	call	1001c8c <__adddf3>
 10056d4:	d9000f17 	ldw	r4,60(sp)
 10056d8:	102d883a 	mov	r22,r2
 10056dc:	00bf3034 	movhi	r2,64704
 10056e0:	18b9883a 	add	fp,r3,r2
 10056e4:	e02f883a 	mov	r23,fp
 10056e8:	20028f1e 	bne	r4,zero,1006128 <_dtoa_r+0xf48>
 10056ec:	0005883a 	mov	r2,zero
 10056f0:	00d00534 	movhi	r3,16404
 10056f4:	a009883a 	mov	r4,r20
 10056f8:	a80b883a 	mov	r5,r21
 10056fc:	180f883a 	mov	r7,r3
 1005700:	100d883a 	mov	r6,r2
 1005704:	1001c000 	call	1001c00 <__subdf3>
 1005708:	1009883a 	mov	r4,r2
 100570c:	e00f883a 	mov	r7,fp
 1005710:	180b883a 	mov	r5,r3
 1005714:	b00d883a 	mov	r6,r22
 1005718:	1025883a 	mov	r18,r2
 100571c:	1827883a 	mov	r19,r3
 1005720:	100b6780 	call	100b678 <__gtdf2>
 1005724:	00834f16 	blt	zero,r2,1006464 <_dtoa_r+0x1284>
 1005728:	e0e0003c 	xorhi	r3,fp,32768
 100572c:	9009883a 	mov	r4,r18
 1005730:	980b883a 	mov	r5,r19
 1005734:	180f883a 	mov	r7,r3
 1005738:	b00d883a 	mov	r6,r22
 100573c:	100b7a00 	call	100b7a0 <__ltdf2>
 1005740:	1000080e 	bge	r2,zero,1005764 <_dtoa_r+0x584>
 1005744:	0027883a 	mov	r19,zero
 1005748:	0025883a 	mov	r18,zero
 100574c:	d8802617 	ldw	r2,152(sp)
 1005750:	df000517 	ldw	fp,20(sp)
 1005754:	d8000615 	stw	zero,24(sp)
 1005758:	0084303a 	nor	r2,zero,r2
 100575c:	d8800d15 	stw	r2,52(sp)
 1005760:	00019b06 	br	1005dd0 <_dtoa_r+0xbf0>
 1005764:	d9801217 	ldw	r6,72(sp)
 1005768:	d8801317 	ldw	r2,76(sp)
 100576c:	3029883a 	mov	r20,r6
 1005770:	102b883a 	mov	r21,r2
 1005774:	d8c00217 	ldw	r3,8(sp)
 1005778:	18008516 	blt	r3,zero,1005990 <_dtoa_r+0x7b0>
 100577c:	d9000d17 	ldw	r4,52(sp)
 1005780:	00800384 	movi	r2,14
 1005784:	11008216 	blt	r2,r4,1005990 <_dtoa_r+0x7b0>
 1005788:	200490fa 	slli	r2,r4,3
 100578c:	d9802617 	ldw	r6,152(sp)
 1005790:	00c040b4 	movhi	r3,258
 1005794:	18e82104 	addi	r3,r3,-24444
 1005798:	10c5883a 	add	r2,r2,r3
 100579c:	14800017 	ldw	r18,0(r2)
 10057a0:	14c00117 	ldw	r19,4(r2)
 10057a4:	30031e16 	blt	r6,zero,1006420 <_dtoa_r+0x1240>
 10057a8:	d9000517 	ldw	r4,20(sp)
 10057ac:	d8c00f17 	ldw	r3,60(sp)
 10057b0:	a823883a 	mov	r17,r21
 10057b4:	a021883a 	mov	r16,r20
 10057b8:	192b883a 	add	r21,r3,r4
 10057bc:	2039883a 	mov	fp,r4
 10057c0:	00000f06 	br	1005800 <_dtoa_r+0x620>
 10057c4:	0005883a 	mov	r2,zero
 10057c8:	00d00934 	movhi	r3,16420
 10057cc:	5009883a 	mov	r4,r10
 10057d0:	580b883a 	mov	r5,r11
 10057d4:	180f883a 	mov	r7,r3
 10057d8:	100d883a 	mov	r6,r2
 10057dc:	1001d0c0 	call	1001d0c <__muldf3>
 10057e0:	180b883a 	mov	r5,r3
 10057e4:	000d883a 	mov	r6,zero
 10057e8:	000f883a 	mov	r7,zero
 10057ec:	1009883a 	mov	r4,r2
 10057f0:	1021883a 	mov	r16,r2
 10057f4:	1823883a 	mov	r17,r3
 10057f8:	100b5e40 	call	100b5e4 <__nedf2>
 10057fc:	10004526 	beq	r2,zero,1005914 <_dtoa_r+0x734>
 1005800:	900d883a 	mov	r6,r18
 1005804:	980f883a 	mov	r7,r19
 1005808:	8009883a 	mov	r4,r16
 100580c:	880b883a 	mov	r5,r17
 1005810:	10020dc0 	call	10020dc <__divdf3>
 1005814:	180b883a 	mov	r5,r3
 1005818:	1009883a 	mov	r4,r2
 100581c:	100b9380 	call	100b938 <__fixdfsi>
 1005820:	1009883a 	mov	r4,r2
 1005824:	1029883a 	mov	r20,r2
 1005828:	100b8340 	call	100b834 <__floatsidf>
 100582c:	180f883a 	mov	r7,r3
 1005830:	9009883a 	mov	r4,r18
 1005834:	980b883a 	mov	r5,r19
 1005838:	100d883a 	mov	r6,r2
 100583c:	1001d0c0 	call	1001d0c <__muldf3>
 1005840:	180f883a 	mov	r7,r3
 1005844:	880b883a 	mov	r5,r17
 1005848:	8009883a 	mov	r4,r16
 100584c:	100d883a 	mov	r6,r2
 1005850:	1001c000 	call	1001c00 <__subdf3>
 1005854:	1015883a 	mov	r10,r2
 1005858:	a0800c04 	addi	r2,r20,48
 100585c:	e0800005 	stb	r2,0(fp)
 1005860:	e7000044 	addi	fp,fp,1
 1005864:	1817883a 	mov	r11,r3
 1005868:	e57fd61e 	bne	fp,r21,10057c4 <_dtoa_r+0x5e4>
 100586c:	500d883a 	mov	r6,r10
 1005870:	180f883a 	mov	r7,r3
 1005874:	5009883a 	mov	r4,r10
 1005878:	180b883a 	mov	r5,r3
 100587c:	1001c8c0 	call	1001c8c <__adddf3>
 1005880:	100d883a 	mov	r6,r2
 1005884:	9009883a 	mov	r4,r18
 1005888:	980b883a 	mov	r5,r19
 100588c:	180f883a 	mov	r7,r3
 1005890:	1021883a 	mov	r16,r2
 1005894:	1823883a 	mov	r17,r3
 1005898:	100b7a00 	call	100b7a0 <__ltdf2>
 100589c:	10000816 	blt	r2,zero,10058c0 <_dtoa_r+0x6e0>
 10058a0:	980b883a 	mov	r5,r19
 10058a4:	800d883a 	mov	r6,r16
 10058a8:	880f883a 	mov	r7,r17
 10058ac:	9009883a 	mov	r4,r18
 10058b0:	100b5500 	call	100b550 <__eqdf2>
 10058b4:	1000171e 	bne	r2,zero,1005914 <_dtoa_r+0x734>
 10058b8:	a080004c 	andi	r2,r20,1
 10058bc:	10001526 	beq	r2,zero,1005914 <_dtoa_r+0x734>
 10058c0:	d8800d17 	ldw	r2,52(sp)
 10058c4:	d8800415 	stw	r2,16(sp)
 10058c8:	e009883a 	mov	r4,fp
 10058cc:	213fffc4 	addi	r4,r4,-1
 10058d0:	20c00007 	ldb	r3,0(r4)
 10058d4:	00800e44 	movi	r2,57
 10058d8:	1880081e 	bne	r3,r2,10058fc <_dtoa_r+0x71c>
 10058dc:	d8800517 	ldw	r2,20(sp)
 10058e0:	113ffa1e 	bne	r2,r4,10058cc <_dtoa_r+0x6ec>
 10058e4:	d8c00417 	ldw	r3,16(sp)
 10058e8:	d9800517 	ldw	r6,20(sp)
 10058ec:	00800c04 	movi	r2,48
 10058f0:	18c00044 	addi	r3,r3,1
 10058f4:	d8c00415 	stw	r3,16(sp)
 10058f8:	30800005 	stb	r2,0(r6)
 10058fc:	20800003 	ldbu	r2,0(r4)
 1005900:	d8c00417 	ldw	r3,16(sp)
 1005904:	27000044 	addi	fp,r4,1
 1005908:	10800044 	addi	r2,r2,1
 100590c:	d8c00d15 	stw	r3,52(sp)
 1005910:	20800005 	stb	r2,0(r4)
 1005914:	d9001617 	ldw	r4,88(sp)
 1005918:	d9400717 	ldw	r5,28(sp)
 100591c:	10085340 	call	1008534 <_Bfree>
 1005920:	e0000005 	stb	zero,0(fp)
 1005924:	d9800d17 	ldw	r6,52(sp)
 1005928:	d8c02717 	ldw	r3,156(sp)
 100592c:	d9002917 	ldw	r4,164(sp)
 1005930:	30800044 	addi	r2,r6,1
 1005934:	18800015 	stw	r2,0(r3)
 1005938:	20029c26 	beq	r4,zero,10063ac <_dtoa_r+0x11cc>
 100593c:	d8c00517 	ldw	r3,20(sp)
 1005940:	27000015 	stw	fp,0(r4)
 1005944:	003e5d06 	br	10052bc <_dtoa_r+0xdc>
 1005948:	d9800d17 	ldw	r6,52(sp)
 100594c:	00c040b4 	movhi	r3,258
 1005950:	18e82104 	addi	r3,r3,-24444
 1005954:	d9001217 	ldw	r4,72(sp)
 1005958:	300490fa 	slli	r2,r6,3
 100595c:	d9401317 	ldw	r5,76(sp)
 1005960:	10c5883a 	add	r2,r2,r3
 1005964:	12000017 	ldw	r8,0(r2)
 1005968:	12400117 	ldw	r9,4(r2)
 100596c:	400d883a 	mov	r6,r8
 1005970:	480f883a 	mov	r7,r9
 1005974:	100b7a00 	call	100b7a0 <__ltdf2>
 1005978:	1000030e 	bge	r2,zero,1005988 <_dtoa_r+0x7a8>
 100597c:	d8800d17 	ldw	r2,52(sp)
 1005980:	10bfffc4 	addi	r2,r2,-1
 1005984:	d8800d15 	stw	r2,52(sp)
 1005988:	d8000c15 	stw	zero,48(sp)
 100598c:	003ea806 	br	1005430 <_dtoa_r+0x250>
 1005990:	d9000b17 	ldw	r4,44(sp)
 1005994:	202cc03a 	cmpne	r22,r4,zero
 1005998:	b000c71e 	bne	r22,zero,1005cb8 <_dtoa_r+0xad8>
 100599c:	dc001117 	ldw	r16,68(sp)
 10059a0:	dc801017 	ldw	r18,64(sp)
 10059a4:	0027883a 	mov	r19,zero
 10059a8:	04000b0e 	bge	zero,r16,10059d8 <_dtoa_r+0x7f8>
 10059ac:	d8c00a17 	ldw	r3,40(sp)
 10059b0:	00c0090e 	bge	zero,r3,10059d8 <_dtoa_r+0x7f8>
 10059b4:	8005883a 	mov	r2,r16
 10059b8:	1c011316 	blt	r3,r16,1005e08 <_dtoa_r+0xc28>
 10059bc:	d9000a17 	ldw	r4,40(sp)
 10059c0:	d9801117 	ldw	r6,68(sp)
 10059c4:	80a1c83a 	sub	r16,r16,r2
 10059c8:	2089c83a 	sub	r4,r4,r2
 10059cc:	308dc83a 	sub	r6,r6,r2
 10059d0:	d9000a15 	stw	r4,40(sp)
 10059d4:	d9801115 	stw	r6,68(sp)
 10059d8:	d8801017 	ldw	r2,64(sp)
 10059dc:	0080150e 	bge	zero,r2,1005a34 <_dtoa_r+0x854>
 10059e0:	d8c00b17 	ldw	r3,44(sp)
 10059e4:	1805003a 	cmpeq	r2,r3,zero
 10059e8:	1001c91e 	bne	r2,zero,1006110 <_dtoa_r+0xf30>
 10059ec:	04800e0e 	bge	zero,r18,1005a28 <_dtoa_r+0x848>
 10059f0:	d9001617 	ldw	r4,88(sp)
 10059f4:	980b883a 	mov	r5,r19
 10059f8:	900d883a 	mov	r6,r18
 10059fc:	10094500 	call	1009450 <__pow5mult>
 1005a00:	d9001617 	ldw	r4,88(sp)
 1005a04:	d9800717 	ldw	r6,28(sp)
 1005a08:	100b883a 	mov	r5,r2
 1005a0c:	1027883a 	mov	r19,r2
 1005a10:	10090700 	call	1009070 <__multiply>
 1005a14:	d9001617 	ldw	r4,88(sp)
 1005a18:	d9400717 	ldw	r5,28(sp)
 1005a1c:	1023883a 	mov	r17,r2
 1005a20:	10085340 	call	1008534 <_Bfree>
 1005a24:	dc400715 	stw	r17,28(sp)
 1005a28:	d9001017 	ldw	r4,64(sp)
 1005a2c:	248dc83a 	sub	r6,r4,r18
 1005a30:	30010e1e 	bne	r6,zero,1005e6c <_dtoa_r+0xc8c>
 1005a34:	d9001617 	ldw	r4,88(sp)
 1005a38:	04400044 	movi	r17,1
 1005a3c:	880b883a 	mov	r5,r17
 1005a40:	10092d00 	call	10092d0 <__i2b>
 1005a44:	d9800917 	ldw	r6,36(sp)
 1005a48:	1025883a 	mov	r18,r2
 1005a4c:	0180040e 	bge	zero,r6,1005a60 <_dtoa_r+0x880>
 1005a50:	d9001617 	ldw	r4,88(sp)
 1005a54:	100b883a 	mov	r5,r2
 1005a58:	10094500 	call	1009450 <__pow5mult>
 1005a5c:	1025883a 	mov	r18,r2
 1005a60:	d8801717 	ldw	r2,92(sp)
 1005a64:	8880f30e 	bge	r17,r2,1005e34 <_dtoa_r+0xc54>
 1005a68:	0023883a 	mov	r17,zero
 1005a6c:	d9800917 	ldw	r6,36(sp)
 1005a70:	30019e1e 	bne	r6,zero,10060ec <_dtoa_r+0xf0c>
 1005a74:	00c00044 	movi	r3,1
 1005a78:	d9000a17 	ldw	r4,40(sp)
 1005a7c:	20c5883a 	add	r2,r4,r3
 1005a80:	10c007cc 	andi	r3,r2,31
 1005a84:	1800841e 	bne	r3,zero,1005c98 <_dtoa_r+0xab8>
 1005a88:	00800704 	movi	r2,28
 1005a8c:	d9000a17 	ldw	r4,40(sp)
 1005a90:	d9801117 	ldw	r6,68(sp)
 1005a94:	80a1883a 	add	r16,r16,r2
 1005a98:	2089883a 	add	r4,r4,r2
 1005a9c:	308d883a 	add	r6,r6,r2
 1005aa0:	d9000a15 	stw	r4,40(sp)
 1005aa4:	d9801115 	stw	r6,68(sp)
 1005aa8:	d8801117 	ldw	r2,68(sp)
 1005aac:	0080050e 	bge	zero,r2,1005ac4 <_dtoa_r+0x8e4>
 1005ab0:	d9400717 	ldw	r5,28(sp)
 1005ab4:	d9001617 	ldw	r4,88(sp)
 1005ab8:	100d883a 	mov	r6,r2
 1005abc:	1008f180 	call	1008f18 <__lshift>
 1005ac0:	d8800715 	stw	r2,28(sp)
 1005ac4:	d8c00a17 	ldw	r3,40(sp)
 1005ac8:	00c0050e 	bge	zero,r3,1005ae0 <_dtoa_r+0x900>
 1005acc:	d9001617 	ldw	r4,88(sp)
 1005ad0:	900b883a 	mov	r5,r18
 1005ad4:	180d883a 	mov	r6,r3
 1005ad8:	1008f180 	call	1008f18 <__lshift>
 1005adc:	1025883a 	mov	r18,r2
 1005ae0:	d9000c17 	ldw	r4,48(sp)
 1005ae4:	2005003a 	cmpeq	r2,r4,zero
 1005ae8:	10016f26 	beq	r2,zero,10060a8 <_dtoa_r+0xec8>
 1005aec:	d9000f17 	ldw	r4,60(sp)
 1005af0:	0102170e 	bge	zero,r4,1006350 <_dtoa_r+0x1170>
 1005af4:	d9800b17 	ldw	r6,44(sp)
 1005af8:	3005003a 	cmpeq	r2,r6,zero
 1005afc:	1000881e 	bne	r2,zero,1005d20 <_dtoa_r+0xb40>
 1005b00:	0400050e 	bge	zero,r16,1005b18 <_dtoa_r+0x938>
 1005b04:	d9001617 	ldw	r4,88(sp)
 1005b08:	980b883a 	mov	r5,r19
 1005b0c:	800d883a 	mov	r6,r16
 1005b10:	1008f180 	call	1008f18 <__lshift>
 1005b14:	1027883a 	mov	r19,r2
 1005b18:	8804c03a 	cmpne	r2,r17,zero
 1005b1c:	1002541e 	bne	r2,zero,1006470 <_dtoa_r+0x1290>
 1005b20:	980b883a 	mov	r5,r19
 1005b24:	dd800517 	ldw	r22,20(sp)
 1005b28:	dcc00615 	stw	r19,24(sp)
 1005b2c:	a700004c 	andi	fp,r20,1
 1005b30:	2827883a 	mov	r19,r5
 1005b34:	d9000717 	ldw	r4,28(sp)
 1005b38:	900b883a 	mov	r5,r18
 1005b3c:	1004f900 	call	1004f90 <quorem>
 1005b40:	d9000717 	ldw	r4,28(sp)
 1005b44:	d9400617 	ldw	r5,24(sp)
 1005b48:	1023883a 	mov	r17,r2
 1005b4c:	8dc00c04 	addi	r23,r17,48
 1005b50:	10086b40 	call	10086b4 <__mcmp>
 1005b54:	d9001617 	ldw	r4,88(sp)
 1005b58:	900b883a 	mov	r5,r18
 1005b5c:	980d883a 	mov	r6,r19
 1005b60:	1029883a 	mov	r20,r2
 1005b64:	1008d800 	call	1008d80 <__mdiff>
 1005b68:	102b883a 	mov	r21,r2
 1005b6c:	10800317 	ldw	r2,12(r2)
 1005b70:	1001281e 	bne	r2,zero,1006014 <_dtoa_r+0xe34>
 1005b74:	d9000717 	ldw	r4,28(sp)
 1005b78:	a80b883a 	mov	r5,r21
 1005b7c:	10086b40 	call	10086b4 <__mcmp>
 1005b80:	d9001617 	ldw	r4,88(sp)
 1005b84:	1021883a 	mov	r16,r2
 1005b88:	a80b883a 	mov	r5,r21
 1005b8c:	10085340 	call	1008534 <_Bfree>
 1005b90:	8000041e 	bne	r16,zero,1005ba4 <_dtoa_r+0x9c4>
 1005b94:	d8801717 	ldw	r2,92(sp)
 1005b98:	1000021e 	bne	r2,zero,1005ba4 <_dtoa_r+0x9c4>
 1005b9c:	e004c03a 	cmpne	r2,fp,zero
 1005ba0:	10011726 	beq	r2,zero,1006000 <_dtoa_r+0xe20>
 1005ba4:	a0010616 	blt	r20,zero,1005fc0 <_dtoa_r+0xde0>
 1005ba8:	a000041e 	bne	r20,zero,1005bbc <_dtoa_r+0x9dc>
 1005bac:	d8c01717 	ldw	r3,92(sp)
 1005bb0:	1800021e 	bne	r3,zero,1005bbc <_dtoa_r+0x9dc>
 1005bb4:	e004c03a 	cmpne	r2,fp,zero
 1005bb8:	10010126 	beq	r2,zero,1005fc0 <_dtoa_r+0xde0>
 1005bbc:	04023d16 	blt	zero,r16,10064b4 <_dtoa_r+0x12d4>
 1005bc0:	b5c00005 	stb	r23,0(r22)
 1005bc4:	d9800517 	ldw	r6,20(sp)
 1005bc8:	d9000f17 	ldw	r4,60(sp)
 1005bcc:	b5800044 	addi	r22,r22,1
 1005bd0:	3105883a 	add	r2,r6,r4
 1005bd4:	b0806526 	beq	r22,r2,1005d6c <_dtoa_r+0xb8c>
 1005bd8:	d9400717 	ldw	r5,28(sp)
 1005bdc:	d9001617 	ldw	r4,88(sp)
 1005be0:	01800284 	movi	r6,10
 1005be4:	000f883a 	mov	r7,zero
 1005be8:	10093180 	call	1009318 <__multadd>
 1005bec:	d8800715 	stw	r2,28(sp)
 1005bf0:	d8800617 	ldw	r2,24(sp)
 1005bf4:	14c10c26 	beq	r2,r19,1006028 <_dtoa_r+0xe48>
 1005bf8:	d9400617 	ldw	r5,24(sp)
 1005bfc:	d9001617 	ldw	r4,88(sp)
 1005c00:	01800284 	movi	r6,10
 1005c04:	000f883a 	mov	r7,zero
 1005c08:	10093180 	call	1009318 <__multadd>
 1005c0c:	d9001617 	ldw	r4,88(sp)
 1005c10:	980b883a 	mov	r5,r19
 1005c14:	01800284 	movi	r6,10
 1005c18:	000f883a 	mov	r7,zero
 1005c1c:	d8800615 	stw	r2,24(sp)
 1005c20:	10093180 	call	1009318 <__multadd>
 1005c24:	1027883a 	mov	r19,r2
 1005c28:	003fc206 	br	1005b34 <_dtoa_r+0x954>
 1005c2c:	2445c83a 	sub	r2,r4,r17
 1005c30:	a088983a 	sll	r4,r20,r2
 1005c34:	003e4b06 	br	1005564 <_dtoa_r+0x384>
 1005c38:	01bfffc4 	movi	r6,-1
 1005c3c:	00800044 	movi	r2,1
 1005c40:	d9800e15 	stw	r6,56(sp)
 1005c44:	d9800f15 	stw	r6,60(sp)
 1005c48:	d8800b15 	stw	r2,44(sp)
 1005c4c:	d8c01617 	ldw	r3,88(sp)
 1005c50:	008005c4 	movi	r2,23
 1005c54:	18001115 	stw	zero,68(r3)
 1005c58:	1580082e 	bgeu	r2,r22,1005c7c <_dtoa_r+0xa9c>
 1005c5c:	00c00104 	movi	r3,4
 1005c60:	0009883a 	mov	r4,zero
 1005c64:	18c7883a 	add	r3,r3,r3
 1005c68:	18800504 	addi	r2,r3,20
 1005c6c:	21000044 	addi	r4,r4,1
 1005c70:	b0bffc2e 	bgeu	r22,r2,1005c64 <_dtoa_r+0xa84>
 1005c74:	d9801617 	ldw	r6,88(sp)
 1005c78:	31001115 	stw	r4,68(r6)
 1005c7c:	dc000f17 	ldw	r16,60(sp)
 1005c80:	003e4b06 	br	10055b0 <_dtoa_r+0x3d0>
 1005c84:	d9801717 	ldw	r6,92(sp)
 1005c88:	0023883a 	mov	r17,zero
 1005c8c:	31bfff04 	addi	r6,r6,-4
 1005c90:	d9801715 	stw	r6,92(sp)
 1005c94:	003df806 	br	1005478 <_dtoa_r+0x298>
 1005c98:	00800804 	movi	r2,32
 1005c9c:	10c9c83a 	sub	r4,r2,r3
 1005ca0:	00c00104 	movi	r3,4
 1005ca4:	19005a16 	blt	r3,r4,1005e10 <_dtoa_r+0xc30>
 1005ca8:	008000c4 	movi	r2,3
 1005cac:	113f7e16 	blt	r2,r4,1005aa8 <_dtoa_r+0x8c8>
 1005cb0:	20800704 	addi	r2,r4,28
 1005cb4:	003f7506 	br	1005a8c <_dtoa_r+0x8ac>
 1005cb8:	d9801717 	ldw	r6,92(sp)
 1005cbc:	00800044 	movi	r2,1
 1005cc0:	1180a10e 	bge	r2,r6,1005f48 <_dtoa_r+0xd68>
 1005cc4:	d9800f17 	ldw	r6,60(sp)
 1005cc8:	d8c01017 	ldw	r3,64(sp)
 1005ccc:	30bfffc4 	addi	r2,r6,-1
 1005cd0:	1881c616 	blt	r3,r2,10063ec <_dtoa_r+0x120c>
 1005cd4:	18a5c83a 	sub	r18,r3,r2
 1005cd8:	d8800f17 	ldw	r2,60(sp)
 1005cdc:	10026216 	blt	r2,zero,1006668 <_dtoa_r+0x1488>
 1005ce0:	dc001117 	ldw	r16,68(sp)
 1005ce4:	1007883a 	mov	r3,r2
 1005ce8:	d9800a17 	ldw	r6,40(sp)
 1005cec:	d8801117 	ldw	r2,68(sp)
 1005cf0:	d9001617 	ldw	r4,88(sp)
 1005cf4:	30cd883a 	add	r6,r6,r3
 1005cf8:	10c5883a 	add	r2,r2,r3
 1005cfc:	01400044 	movi	r5,1
 1005d00:	d9800a15 	stw	r6,40(sp)
 1005d04:	d8801115 	stw	r2,68(sp)
 1005d08:	10092d00 	call	10092d0 <__i2b>
 1005d0c:	1027883a 	mov	r19,r2
 1005d10:	003f2506 	br	10059a8 <_dtoa_r+0x7c8>
 1005d14:	00c040b4 	movhi	r3,258
 1005d18:	18e80304 	addi	r3,r3,-24564
 1005d1c:	003d6706 	br	10052bc <_dtoa_r+0xdc>
 1005d20:	dd800517 	ldw	r22,20(sp)
 1005d24:	04000044 	movi	r16,1
 1005d28:	00000706 	br	1005d48 <_dtoa_r+0xb68>
 1005d2c:	d9400717 	ldw	r5,28(sp)
 1005d30:	d9001617 	ldw	r4,88(sp)
 1005d34:	01800284 	movi	r6,10
 1005d38:	000f883a 	mov	r7,zero
 1005d3c:	10093180 	call	1009318 <__multadd>
 1005d40:	d8800715 	stw	r2,28(sp)
 1005d44:	84000044 	addi	r16,r16,1
 1005d48:	d9000717 	ldw	r4,28(sp)
 1005d4c:	900b883a 	mov	r5,r18
 1005d50:	1004f900 	call	1004f90 <quorem>
 1005d54:	15c00c04 	addi	r23,r2,48
 1005d58:	b5c00005 	stb	r23,0(r22)
 1005d5c:	d8c00f17 	ldw	r3,60(sp)
 1005d60:	b5800044 	addi	r22,r22,1
 1005d64:	80fff116 	blt	r16,r3,1005d2c <_dtoa_r+0xb4c>
 1005d68:	d8000615 	stw	zero,24(sp)
 1005d6c:	d9400717 	ldw	r5,28(sp)
 1005d70:	d9001617 	ldw	r4,88(sp)
 1005d74:	01800044 	movi	r6,1
 1005d78:	1008f180 	call	1008f18 <__lshift>
 1005d7c:	1009883a 	mov	r4,r2
 1005d80:	900b883a 	mov	r5,r18
 1005d84:	d8800715 	stw	r2,28(sp)
 1005d88:	10086b40 	call	10086b4 <__mcmp>
 1005d8c:	00803c0e 	bge	zero,r2,1005e80 <_dtoa_r+0xca0>
 1005d90:	b009883a 	mov	r4,r22
 1005d94:	213fffc4 	addi	r4,r4,-1
 1005d98:	21400003 	ldbu	r5,0(r4)
 1005d9c:	00800e44 	movi	r2,57
 1005da0:	28c03fcc 	andi	r3,r5,255
 1005da4:	18c0201c 	xori	r3,r3,128
 1005da8:	18ffe004 	addi	r3,r3,-128
 1005dac:	1881981e 	bne	r3,r2,1006410 <_dtoa_r+0x1230>
 1005db0:	d9800517 	ldw	r6,20(sp)
 1005db4:	21bff71e 	bne	r4,r6,1005d94 <_dtoa_r+0xbb4>
 1005db8:	d8800d17 	ldw	r2,52(sp)
 1005dbc:	37000044 	addi	fp,r6,1
 1005dc0:	10800044 	addi	r2,r2,1
 1005dc4:	d8800d15 	stw	r2,52(sp)
 1005dc8:	00800c44 	movi	r2,49
 1005dcc:	30800005 	stb	r2,0(r6)
 1005dd0:	d9001617 	ldw	r4,88(sp)
 1005dd4:	900b883a 	mov	r5,r18
 1005dd8:	10085340 	call	1008534 <_Bfree>
 1005ddc:	983ecd26 	beq	r19,zero,1005914 <_dtoa_r+0x734>
 1005de0:	d8c00617 	ldw	r3,24(sp)
 1005de4:	18000426 	beq	r3,zero,1005df8 <_dtoa_r+0xc18>
 1005de8:	1cc00326 	beq	r3,r19,1005df8 <_dtoa_r+0xc18>
 1005dec:	d9001617 	ldw	r4,88(sp)
 1005df0:	180b883a 	mov	r5,r3
 1005df4:	10085340 	call	1008534 <_Bfree>
 1005df8:	d9001617 	ldw	r4,88(sp)
 1005dfc:	980b883a 	mov	r5,r19
 1005e00:	10085340 	call	1008534 <_Bfree>
 1005e04:	003ec306 	br	1005914 <_dtoa_r+0x734>
 1005e08:	1805883a 	mov	r2,r3
 1005e0c:	003eeb06 	br	10059bc <_dtoa_r+0x7dc>
 1005e10:	d9800a17 	ldw	r6,40(sp)
 1005e14:	d8c01117 	ldw	r3,68(sp)
 1005e18:	20bfff04 	addi	r2,r4,-4
 1005e1c:	308d883a 	add	r6,r6,r2
 1005e20:	1887883a 	add	r3,r3,r2
 1005e24:	80a1883a 	add	r16,r16,r2
 1005e28:	d9800a15 	stw	r6,40(sp)
 1005e2c:	d8c01115 	stw	r3,68(sp)
 1005e30:	003f1d06 	br	1005aa8 <_dtoa_r+0x8c8>
 1005e34:	a03f0c1e 	bne	r20,zero,1005a68 <_dtoa_r+0x888>
 1005e38:	00800434 	movhi	r2,16
 1005e3c:	10bfffc4 	addi	r2,r2,-1
 1005e40:	a884703a 	and	r2,r21,r2
 1005e44:	103f081e 	bne	r2,zero,1005a68 <_dtoa_r+0x888>
 1005e48:	a89ffc2c 	andhi	r2,r21,32752
 1005e4c:	103f0626 	beq	r2,zero,1005a68 <_dtoa_r+0x888>
 1005e50:	d8c01117 	ldw	r3,68(sp)
 1005e54:	d9000a17 	ldw	r4,40(sp)
 1005e58:	18c00044 	addi	r3,r3,1
 1005e5c:	21000044 	addi	r4,r4,1
 1005e60:	d8c01115 	stw	r3,68(sp)
 1005e64:	d9000a15 	stw	r4,40(sp)
 1005e68:	003f0006 	br	1005a6c <_dtoa_r+0x88c>
 1005e6c:	d9400717 	ldw	r5,28(sp)
 1005e70:	d9001617 	ldw	r4,88(sp)
 1005e74:	10094500 	call	1009450 <__pow5mult>
 1005e78:	d8800715 	stw	r2,28(sp)
 1005e7c:	003eed06 	br	1005a34 <_dtoa_r+0x854>
 1005e80:	1000021e 	bne	r2,zero,1005e8c <_dtoa_r+0xcac>
 1005e84:	b880004c 	andi	r2,r23,1
 1005e88:	103fc11e 	bne	r2,zero,1005d90 <_dtoa_r+0xbb0>
 1005e8c:	b5bfffc4 	addi	r22,r22,-1
 1005e90:	b0c00007 	ldb	r3,0(r22)
 1005e94:	00800c04 	movi	r2,48
 1005e98:	18bffc26 	beq	r3,r2,1005e8c <_dtoa_r+0xcac>
 1005e9c:	b7000044 	addi	fp,r22,1
 1005ea0:	003fcb06 	br	1005dd0 <_dtoa_r+0xbf0>
 1005ea4:	d9800d17 	ldw	r6,52(sp)
 1005ea8:	018fc83a 	sub	r7,zero,r6
 1005eac:	3801f726 	beq	r7,zero,100668c <_dtoa_r+0x14ac>
 1005eb0:	398003cc 	andi	r6,r7,15
 1005eb4:	300c90fa 	slli	r6,r6,3
 1005eb8:	014040b4 	movhi	r5,258
 1005ebc:	29682104 	addi	r5,r5,-24444
 1005ec0:	d9001217 	ldw	r4,72(sp)
 1005ec4:	314d883a 	add	r6,r6,r5
 1005ec8:	30c00117 	ldw	r3,4(r6)
 1005ecc:	30800017 	ldw	r2,0(r6)
 1005ed0:	d9401317 	ldw	r5,76(sp)
 1005ed4:	3821d13a 	srai	r16,r7,4
 1005ed8:	100d883a 	mov	r6,r2
 1005edc:	180f883a 	mov	r7,r3
 1005ee0:	1001d0c0 	call	1001d0c <__muldf3>
 1005ee4:	1011883a 	mov	r8,r2
 1005ee8:	1813883a 	mov	r9,r3
 1005eec:	1029883a 	mov	r20,r2
 1005ef0:	182b883a 	mov	r21,r3
 1005ef4:	8001e526 	beq	r16,zero,100668c <_dtoa_r+0x14ac>
 1005ef8:	05800084 	movi	r22,2
 1005efc:	044040b4 	movhi	r17,258
 1005f00:	8c685304 	addi	r17,r17,-24244
 1005f04:	8080004c 	andi	r2,r16,1
 1005f08:	1005003a 	cmpeq	r2,r2,zero
 1005f0c:	1000081e 	bne	r2,zero,1005f30 <_dtoa_r+0xd50>
 1005f10:	89800017 	ldw	r6,0(r17)
 1005f14:	89c00117 	ldw	r7,4(r17)
 1005f18:	480b883a 	mov	r5,r9
 1005f1c:	4009883a 	mov	r4,r8
 1005f20:	1001d0c0 	call	1001d0c <__muldf3>
 1005f24:	1011883a 	mov	r8,r2
 1005f28:	b5800044 	addi	r22,r22,1
 1005f2c:	1813883a 	mov	r9,r3
 1005f30:	8021d07a 	srai	r16,r16,1
 1005f34:	8c400204 	addi	r17,r17,8
 1005f38:	803ff21e 	bne	r16,zero,1005f04 <_dtoa_r+0xd24>
 1005f3c:	4029883a 	mov	r20,r8
 1005f40:	482b883a 	mov	r21,r9
 1005f44:	003dca06 	br	1005670 <_dtoa_r+0x490>
 1005f48:	d9000817 	ldw	r4,32(sp)
 1005f4c:	2005003a 	cmpeq	r2,r4,zero
 1005f50:	1001f61e 	bne	r2,zero,100672c <_dtoa_r+0x154c>
 1005f54:	dc001117 	ldw	r16,68(sp)
 1005f58:	dc801017 	ldw	r18,64(sp)
 1005f5c:	18c10cc4 	addi	r3,r3,1075
 1005f60:	003f6106 	br	1005ce8 <_dtoa_r+0xb08>
 1005f64:	d8000b15 	stw	zero,44(sp)
 1005f68:	d9802617 	ldw	r6,152(sp)
 1005f6c:	d8c00d17 	ldw	r3,52(sp)
 1005f70:	30800044 	addi	r2,r6,1
 1005f74:	18ad883a 	add	r22,r3,r2
 1005f78:	b13fffc4 	addi	r4,r22,-1
 1005f7c:	d9000e15 	stw	r4,56(sp)
 1005f80:	0581f60e 	bge	zero,r22,100675c <_dtoa_r+0x157c>
 1005f84:	dd800f15 	stw	r22,60(sp)
 1005f88:	003f3006 	br	1005c4c <_dtoa_r+0xa6c>
 1005f8c:	d8000b15 	stw	zero,44(sp)
 1005f90:	d9002617 	ldw	r4,152(sp)
 1005f94:	0101eb0e 	bge	zero,r4,1006744 <_dtoa_r+0x1564>
 1005f98:	202d883a 	mov	r22,r4
 1005f9c:	d9000e15 	stw	r4,56(sp)
 1005fa0:	d9000f15 	stw	r4,60(sp)
 1005fa4:	003f2906 	br	1005c4c <_dtoa_r+0xa6c>
 1005fa8:	01800044 	movi	r6,1
 1005fac:	d9800b15 	stw	r6,44(sp)
 1005fb0:	003ff706 	br	1005f90 <_dtoa_r+0xdb0>
 1005fb4:	01000044 	movi	r4,1
 1005fb8:	d9000b15 	stw	r4,44(sp)
 1005fbc:	003fea06 	br	1005f68 <_dtoa_r+0xd88>
 1005fc0:	04000c0e 	bge	zero,r16,1005ff4 <_dtoa_r+0xe14>
 1005fc4:	d9400717 	ldw	r5,28(sp)
 1005fc8:	d9001617 	ldw	r4,88(sp)
 1005fcc:	01800044 	movi	r6,1
 1005fd0:	1008f180 	call	1008f18 <__lshift>
 1005fd4:	1009883a 	mov	r4,r2
 1005fd8:	900b883a 	mov	r5,r18
 1005fdc:	d8800715 	stw	r2,28(sp)
 1005fe0:	10086b40 	call	10086b4 <__mcmp>
 1005fe4:	0081e00e 	bge	zero,r2,1006768 <_dtoa_r+0x1588>
 1005fe8:	bdc00044 	addi	r23,r23,1
 1005fec:	00800e84 	movi	r2,58
 1005ff0:	b881a226 	beq	r23,r2,100667c <_dtoa_r+0x149c>
 1005ff4:	b7000044 	addi	fp,r22,1
 1005ff8:	b5c00005 	stb	r23,0(r22)
 1005ffc:	003f7406 	br	1005dd0 <_dtoa_r+0xbf0>
 1006000:	00800e44 	movi	r2,57
 1006004:	b8819d26 	beq	r23,r2,100667c <_dtoa_r+0x149c>
 1006008:	053ffa0e 	bge	zero,r20,1005ff4 <_dtoa_r+0xe14>
 100600c:	8dc00c44 	addi	r23,r17,49
 1006010:	003ff806 	br	1005ff4 <_dtoa_r+0xe14>
 1006014:	d9001617 	ldw	r4,88(sp)
 1006018:	a80b883a 	mov	r5,r21
 100601c:	04000044 	movi	r16,1
 1006020:	10085340 	call	1008534 <_Bfree>
 1006024:	003edf06 	br	1005ba4 <_dtoa_r+0x9c4>
 1006028:	d9001617 	ldw	r4,88(sp)
 100602c:	980b883a 	mov	r5,r19
 1006030:	01800284 	movi	r6,10
 1006034:	000f883a 	mov	r7,zero
 1006038:	10093180 	call	1009318 <__multadd>
 100603c:	1027883a 	mov	r19,r2
 1006040:	d8800615 	stw	r2,24(sp)
 1006044:	003ebb06 	br	1005b34 <_dtoa_r+0x954>
 1006048:	d9801117 	ldw	r6,68(sp)
 100604c:	d8800d17 	ldw	r2,52(sp)
 1006050:	d8000915 	stw	zero,36(sp)
 1006054:	308dc83a 	sub	r6,r6,r2
 1006058:	0087c83a 	sub	r3,zero,r2
 100605c:	d9801115 	stw	r6,68(sp)
 1006060:	d8c01015 	stw	r3,64(sp)
 1006064:	003cfe06 	br	1005460 <_dtoa_r+0x280>
 1006068:	018dc83a 	sub	r6,zero,r6
 100606c:	d9801115 	stw	r6,68(sp)
 1006070:	d8000a15 	stw	zero,40(sp)
 1006074:	003cf306 	br	1005444 <_dtoa_r+0x264>
 1006078:	d9000d17 	ldw	r4,52(sp)
 100607c:	100b8340 	call	100b834 <__floatsidf>
 1006080:	880b883a 	mov	r5,r17
 1006084:	8009883a 	mov	r4,r16
 1006088:	180f883a 	mov	r7,r3
 100608c:	100d883a 	mov	r6,r2
 1006090:	100b5e40 	call	100b5e4 <__nedf2>
 1006094:	103ce126 	beq	r2,zero,100541c <_dtoa_r+0x23c>
 1006098:	d9800d17 	ldw	r6,52(sp)
 100609c:	31bfffc4 	addi	r6,r6,-1
 10060a0:	d9800d15 	stw	r6,52(sp)
 10060a4:	003cdd06 	br	100541c <_dtoa_r+0x23c>
 10060a8:	d9000717 	ldw	r4,28(sp)
 10060ac:	900b883a 	mov	r5,r18
 10060b0:	10086b40 	call	10086b4 <__mcmp>
 10060b4:	103e8d0e 	bge	r2,zero,1005aec <_dtoa_r+0x90c>
 10060b8:	d9400717 	ldw	r5,28(sp)
 10060bc:	d9001617 	ldw	r4,88(sp)
 10060c0:	01800284 	movi	r6,10
 10060c4:	000f883a 	mov	r7,zero
 10060c8:	10093180 	call	1009318 <__multadd>
 10060cc:	d9800d17 	ldw	r6,52(sp)
 10060d0:	d8800715 	stw	r2,28(sp)
 10060d4:	31bfffc4 	addi	r6,r6,-1
 10060d8:	d9800d15 	stw	r6,52(sp)
 10060dc:	b001a71e 	bne	r22,zero,100677c <_dtoa_r+0x159c>
 10060e0:	d8800e17 	ldw	r2,56(sp)
 10060e4:	d8800f15 	stw	r2,60(sp)
 10060e8:	003e8006 	br	1005aec <_dtoa_r+0x90c>
 10060ec:	90800417 	ldw	r2,16(r18)
 10060f0:	1085883a 	add	r2,r2,r2
 10060f4:	1085883a 	add	r2,r2,r2
 10060f8:	1485883a 	add	r2,r2,r18
 10060fc:	11000417 	ldw	r4,16(r2)
 1006100:	10085680 	call	1008568 <__hi0bits>
 1006104:	00c00804 	movi	r3,32
 1006108:	1887c83a 	sub	r3,r3,r2
 100610c:	003e5a06 	br	1005a78 <_dtoa_r+0x898>
 1006110:	d9400717 	ldw	r5,28(sp)
 1006114:	d9801017 	ldw	r6,64(sp)
 1006118:	d9001617 	ldw	r4,88(sp)
 100611c:	10094500 	call	1009450 <__pow5mult>
 1006120:	d8800715 	stw	r2,28(sp)
 1006124:	003e4306 	br	1005a34 <_dtoa_r+0x854>
 1006128:	d9800f17 	ldw	r6,60(sp)
 100612c:	d8800d17 	ldw	r2,52(sp)
 1006130:	d9800315 	stw	r6,12(sp)
 1006134:	d8800415 	stw	r2,16(sp)
 1006138:	d8c00b17 	ldw	r3,44(sp)
 100613c:	1805003a 	cmpeq	r2,r3,zero
 1006140:	1000e21e 	bne	r2,zero,10064cc <_dtoa_r+0x12ec>
 1006144:	d9000317 	ldw	r4,12(sp)
 1006148:	0005883a 	mov	r2,zero
 100614c:	00cff834 	movhi	r3,16352
 1006150:	200c90fa 	slli	r6,r4,3
 1006154:	010040b4 	movhi	r4,258
 1006158:	21282104 	addi	r4,r4,-24444
 100615c:	180b883a 	mov	r5,r3
 1006160:	310d883a 	add	r6,r6,r4
 1006164:	327fff17 	ldw	r9,-4(r6)
 1006168:	323ffe17 	ldw	r8,-8(r6)
 100616c:	1009883a 	mov	r4,r2
 1006170:	480f883a 	mov	r7,r9
 1006174:	400d883a 	mov	r6,r8
 1006178:	10020dc0 	call	10020dc <__divdf3>
 100617c:	180b883a 	mov	r5,r3
 1006180:	b00d883a 	mov	r6,r22
 1006184:	b80f883a 	mov	r7,r23
 1006188:	1009883a 	mov	r4,r2
 100618c:	1001c000 	call	1001c00 <__subdf3>
 1006190:	a80b883a 	mov	r5,r21
 1006194:	a009883a 	mov	r4,r20
 1006198:	d8c01915 	stw	r3,100(sp)
 100619c:	d8801815 	stw	r2,96(sp)
 10061a0:	100b9380 	call	100b938 <__fixdfsi>
 10061a4:	1009883a 	mov	r4,r2
 10061a8:	1027883a 	mov	r19,r2
 10061ac:	100b8340 	call	100b834 <__floatsidf>
 10061b0:	a80b883a 	mov	r5,r21
 10061b4:	a009883a 	mov	r4,r20
 10061b8:	180f883a 	mov	r7,r3
 10061bc:	100d883a 	mov	r6,r2
 10061c0:	1001c000 	call	1001c00 <__subdf3>
 10061c4:	d9801817 	ldw	r6,96(sp)
 10061c8:	1823883a 	mov	r17,r3
 10061cc:	d8801415 	stw	r2,80(sp)
 10061d0:	302d883a 	mov	r22,r6
 10061d4:	d9800517 	ldw	r6,20(sp)
 10061d8:	9cc00c04 	addi	r19,r19,48
 10061dc:	dc401515 	stw	r17,84(sp)
 10061e0:	d8c01917 	ldw	r3,100(sp)
 10061e4:	34c00005 	stb	r19,0(r6)
 10061e8:	d8800517 	ldw	r2,20(sp)
 10061ec:	d9401917 	ldw	r5,100(sp)
 10061f0:	d9801417 	ldw	r6,80(sp)
 10061f4:	b009883a 	mov	r4,r22
 10061f8:	880f883a 	mov	r7,r17
 10061fc:	182f883a 	mov	r23,r3
 1006200:	17000044 	addi	fp,r2,1
 1006204:	100b6780 	call	100b678 <__gtdf2>
 1006208:	00804e16 	blt	zero,r2,1006344 <_dtoa_r+0x1164>
 100620c:	d9801417 	ldw	r6,80(sp)
 1006210:	0005883a 	mov	r2,zero
 1006214:	00cffc34 	movhi	r3,16368
 1006218:	180b883a 	mov	r5,r3
 100621c:	880f883a 	mov	r7,r17
 1006220:	1009883a 	mov	r4,r2
 1006224:	1001c000 	call	1001c00 <__subdf3>
 1006228:	d9401917 	ldw	r5,100(sp)
 100622c:	180f883a 	mov	r7,r3
 1006230:	b009883a 	mov	r4,r22
 1006234:	100d883a 	mov	r6,r2
 1006238:	100b6780 	call	100b678 <__gtdf2>
 100623c:	00bda216 	blt	zero,r2,10058c8 <_dtoa_r+0x6e8>
 1006240:	d8c00317 	ldw	r3,12(sp)
 1006244:	00800044 	movi	r2,1
 1006248:	10c01216 	blt	r2,r3,1006294 <_dtoa_r+0x10b4>
 100624c:	003d4506 	br	1005764 <_dtoa_r+0x584>
 1006250:	d9801417 	ldw	r6,80(sp)
 1006254:	0005883a 	mov	r2,zero
 1006258:	00cffc34 	movhi	r3,16368
 100625c:	180b883a 	mov	r5,r3
 1006260:	880f883a 	mov	r7,r17
 1006264:	1009883a 	mov	r4,r2
 1006268:	1001c000 	call	1001c00 <__subdf3>
 100626c:	d9c01b17 	ldw	r7,108(sp)
 1006270:	180b883a 	mov	r5,r3
 1006274:	1009883a 	mov	r4,r2
 1006278:	b00d883a 	mov	r6,r22
 100627c:	100b7a00 	call	100b7a0 <__ltdf2>
 1006280:	103d9116 	blt	r2,zero,10058c8 <_dtoa_r+0x6e8>
 1006284:	d9800517 	ldw	r6,20(sp)
 1006288:	d9000317 	ldw	r4,12(sp)
 100628c:	3105883a 	add	r2,r6,r4
 1006290:	e0bd3426 	beq	fp,r2,1005764 <_dtoa_r+0x584>
 1006294:	04500934 	movhi	r17,16420
 1006298:	0021883a 	mov	r16,zero
 100629c:	b80b883a 	mov	r5,r23
 10062a0:	b009883a 	mov	r4,r22
 10062a4:	800d883a 	mov	r6,r16
 10062a8:	880f883a 	mov	r7,r17
 10062ac:	1001d0c0 	call	1001d0c <__muldf3>
 10062b0:	d9401517 	ldw	r5,84(sp)
 10062b4:	d9001417 	ldw	r4,80(sp)
 10062b8:	880f883a 	mov	r7,r17
 10062bc:	000d883a 	mov	r6,zero
 10062c0:	d8801a15 	stw	r2,104(sp)
 10062c4:	d8c01b15 	stw	r3,108(sp)
 10062c8:	1001d0c0 	call	1001d0c <__muldf3>
 10062cc:	180b883a 	mov	r5,r3
 10062d0:	1009883a 	mov	r4,r2
 10062d4:	1823883a 	mov	r17,r3
 10062d8:	1021883a 	mov	r16,r2
 10062dc:	100b9380 	call	100b938 <__fixdfsi>
 10062e0:	1009883a 	mov	r4,r2
 10062e4:	102b883a 	mov	r21,r2
 10062e8:	100b8340 	call	100b834 <__floatsidf>
 10062ec:	880b883a 	mov	r5,r17
 10062f0:	8009883a 	mov	r4,r16
 10062f4:	180f883a 	mov	r7,r3
 10062f8:	100d883a 	mov	r6,r2
 10062fc:	1001c000 	call	1001c00 <__subdf3>
 1006300:	1021883a 	mov	r16,r2
 1006304:	d9001b17 	ldw	r4,108(sp)
 1006308:	1823883a 	mov	r17,r3
 100630c:	dc001415 	stw	r16,80(sp)
 1006310:	ad400c04 	addi	r21,r21,48
 1006314:	dc401515 	stw	r17,84(sp)
 1006318:	d8801a17 	ldw	r2,104(sp)
 100631c:	e5400005 	stb	r21,0(fp)
 1006320:	202f883a 	mov	r23,r4
 1006324:	d9c01b17 	ldw	r7,108(sp)
 1006328:	d9001417 	ldw	r4,80(sp)
 100632c:	880b883a 	mov	r5,r17
 1006330:	100d883a 	mov	r6,r2
 1006334:	102d883a 	mov	r22,r2
 1006338:	e7000044 	addi	fp,fp,1
 100633c:	100b7a00 	call	100b7a0 <__ltdf2>
 1006340:	103fc30e 	bge	r2,zero,1006250 <_dtoa_r+0x1070>
 1006344:	d9000417 	ldw	r4,16(sp)
 1006348:	d9000d15 	stw	r4,52(sp)
 100634c:	003d7106 	br	1005914 <_dtoa_r+0x734>
 1006350:	d9801717 	ldw	r6,92(sp)
 1006354:	00800084 	movi	r2,2
 1006358:	11bde60e 	bge	r2,r6,1005af4 <_dtoa_r+0x914>
 100635c:	203cfb1e 	bne	r4,zero,100574c <_dtoa_r+0x56c>
 1006360:	d9001617 	ldw	r4,88(sp)
 1006364:	900b883a 	mov	r5,r18
 1006368:	01800144 	movi	r6,5
 100636c:	000f883a 	mov	r7,zero
 1006370:	10093180 	call	1009318 <__multadd>
 1006374:	d9000717 	ldw	r4,28(sp)
 1006378:	100b883a 	mov	r5,r2
 100637c:	1025883a 	mov	r18,r2
 1006380:	10086b40 	call	10086b4 <__mcmp>
 1006384:	00bcf10e 	bge	zero,r2,100574c <_dtoa_r+0x56c>
 1006388:	d8c00d17 	ldw	r3,52(sp)
 100638c:	d9000517 	ldw	r4,20(sp)
 1006390:	d8000615 	stw	zero,24(sp)
 1006394:	18c00044 	addi	r3,r3,1
 1006398:	d8c00d15 	stw	r3,52(sp)
 100639c:	00800c44 	movi	r2,49
 10063a0:	27000044 	addi	fp,r4,1
 10063a4:	20800005 	stb	r2,0(r4)
 10063a8:	003e8906 	br	1005dd0 <_dtoa_r+0xbf0>
 10063ac:	d8c00517 	ldw	r3,20(sp)
 10063b0:	003bc206 	br	10052bc <_dtoa_r+0xdc>
 10063b4:	018040b4 	movhi	r6,258
 10063b8:	31a85304 	addi	r6,r6,-24244
 10063bc:	30c00917 	ldw	r3,36(r6)
 10063c0:	30800817 	ldw	r2,32(r6)
 10063c4:	d9001217 	ldw	r4,72(sp)
 10063c8:	d9401317 	ldw	r5,76(sp)
 10063cc:	180f883a 	mov	r7,r3
 10063d0:	100d883a 	mov	r6,r2
 10063d4:	10020dc0 	call	10020dc <__divdf3>
 10063d8:	948003cc 	andi	r18,r18,15
 10063dc:	058000c4 	movi	r22,3
 10063e0:	1029883a 	mov	r20,r2
 10063e4:	182b883a 	mov	r21,r3
 10063e8:	003c8906 	br	1005610 <_dtoa_r+0x430>
 10063ec:	d9001017 	ldw	r4,64(sp)
 10063f0:	d9800917 	ldw	r6,36(sp)
 10063f4:	0025883a 	mov	r18,zero
 10063f8:	1105c83a 	sub	r2,r2,r4
 10063fc:	2089883a 	add	r4,r4,r2
 1006400:	308d883a 	add	r6,r6,r2
 1006404:	d9001015 	stw	r4,64(sp)
 1006408:	d9800915 	stw	r6,36(sp)
 100640c:	003e3206 	br	1005cd8 <_dtoa_r+0xaf8>
 1006410:	28800044 	addi	r2,r5,1
 1006414:	27000044 	addi	fp,r4,1
 1006418:	20800005 	stb	r2,0(r4)
 100641c:	003e6c06 	br	1005dd0 <_dtoa_r+0xbf0>
 1006420:	d8800f17 	ldw	r2,60(sp)
 1006424:	00bce016 	blt	zero,r2,10057a8 <_dtoa_r+0x5c8>
 1006428:	d9800f17 	ldw	r6,60(sp)
 100642c:	303cc51e 	bne	r6,zero,1005744 <_dtoa_r+0x564>
 1006430:	0005883a 	mov	r2,zero
 1006434:	00d00534 	movhi	r3,16404
 1006438:	980b883a 	mov	r5,r19
 100643c:	180f883a 	mov	r7,r3
 1006440:	9009883a 	mov	r4,r18
 1006444:	100d883a 	mov	r6,r2
 1006448:	1001d0c0 	call	1001d0c <__muldf3>
 100644c:	180b883a 	mov	r5,r3
 1006450:	a80f883a 	mov	r7,r21
 1006454:	1009883a 	mov	r4,r2
 1006458:	a00d883a 	mov	r6,r20
 100645c:	100b70c0 	call	100b70c <__gedf2>
 1006460:	103cb80e 	bge	r2,zero,1005744 <_dtoa_r+0x564>
 1006464:	0027883a 	mov	r19,zero
 1006468:	0025883a 	mov	r18,zero
 100646c:	003fc606 	br	1006388 <_dtoa_r+0x11a8>
 1006470:	99400117 	ldw	r5,4(r19)
 1006474:	d9001617 	ldw	r4,88(sp)
 1006478:	1008b300 	call	1008b30 <_Balloc>
 100647c:	99800417 	ldw	r6,16(r19)
 1006480:	11000304 	addi	r4,r2,12
 1006484:	99400304 	addi	r5,r19,12
 1006488:	318d883a 	add	r6,r6,r6
 100648c:	318d883a 	add	r6,r6,r6
 1006490:	31800204 	addi	r6,r6,8
 1006494:	1023883a 	mov	r17,r2
 1006498:	10082f80 	call	10082f8 <memcpy>
 100649c:	d9001617 	ldw	r4,88(sp)
 10064a0:	880b883a 	mov	r5,r17
 10064a4:	01800044 	movi	r6,1
 10064a8:	1008f180 	call	1008f18 <__lshift>
 10064ac:	100b883a 	mov	r5,r2
 10064b0:	003d9c06 	br	1005b24 <_dtoa_r+0x944>
 10064b4:	00800e44 	movi	r2,57
 10064b8:	b8807026 	beq	r23,r2,100667c <_dtoa_r+0x149c>
 10064bc:	b8800044 	addi	r2,r23,1
 10064c0:	b7000044 	addi	fp,r22,1
 10064c4:	b0800005 	stb	r2,0(r22)
 10064c8:	003e4106 	br	1005dd0 <_dtoa_r+0xbf0>
 10064cc:	d8800317 	ldw	r2,12(sp)
 10064d0:	018040b4 	movhi	r6,258
 10064d4:	31a82104 	addi	r6,r6,-24444
 10064d8:	b009883a 	mov	r4,r22
 10064dc:	100e90fa 	slli	r7,r2,3
 10064e0:	b80b883a 	mov	r5,r23
 10064e4:	398f883a 	add	r7,r7,r6
 10064e8:	38bffe17 	ldw	r2,-8(r7)
 10064ec:	d9800517 	ldw	r6,20(sp)
 10064f0:	38ffff17 	ldw	r3,-4(r7)
 10064f4:	37000044 	addi	fp,r6,1
 10064f8:	180f883a 	mov	r7,r3
 10064fc:	100d883a 	mov	r6,r2
 1006500:	1001d0c0 	call	1001d0c <__muldf3>
 1006504:	a80b883a 	mov	r5,r21
 1006508:	a009883a 	mov	r4,r20
 100650c:	182f883a 	mov	r23,r3
 1006510:	102d883a 	mov	r22,r2
 1006514:	100b9380 	call	100b938 <__fixdfsi>
 1006518:	1009883a 	mov	r4,r2
 100651c:	1027883a 	mov	r19,r2
 1006520:	100b8340 	call	100b834 <__floatsidf>
 1006524:	a80b883a 	mov	r5,r21
 1006528:	a009883a 	mov	r4,r20
 100652c:	180f883a 	mov	r7,r3
 1006530:	100d883a 	mov	r6,r2
 1006534:	1001c000 	call	1001c00 <__subdf3>
 1006538:	180b883a 	mov	r5,r3
 100653c:	d8c00517 	ldw	r3,20(sp)
 1006540:	9cc00c04 	addi	r19,r19,48
 1006544:	1009883a 	mov	r4,r2
 1006548:	1cc00005 	stb	r19,0(r3)
 100654c:	2021883a 	mov	r16,r4
 1006550:	d9000317 	ldw	r4,12(sp)
 1006554:	00800044 	movi	r2,1
 1006558:	2823883a 	mov	r17,r5
 100655c:	20802226 	beq	r4,r2,10065e8 <_dtoa_r+0x1408>
 1006560:	1029883a 	mov	r20,r2
 1006564:	0005883a 	mov	r2,zero
 1006568:	00d00934 	movhi	r3,16420
 100656c:	180f883a 	mov	r7,r3
 1006570:	100d883a 	mov	r6,r2
 1006574:	880b883a 	mov	r5,r17
 1006578:	8009883a 	mov	r4,r16
 100657c:	1001d0c0 	call	1001d0c <__muldf3>
 1006580:	180b883a 	mov	r5,r3
 1006584:	1009883a 	mov	r4,r2
 1006588:	1823883a 	mov	r17,r3
 100658c:	1021883a 	mov	r16,r2
 1006590:	100b9380 	call	100b938 <__fixdfsi>
 1006594:	1009883a 	mov	r4,r2
 1006598:	102b883a 	mov	r21,r2
 100659c:	100b8340 	call	100b834 <__floatsidf>
 10065a0:	880b883a 	mov	r5,r17
 10065a4:	8009883a 	mov	r4,r16
 10065a8:	180f883a 	mov	r7,r3
 10065ac:	100d883a 	mov	r6,r2
 10065b0:	1001c000 	call	1001c00 <__subdf3>
 10065b4:	180b883a 	mov	r5,r3
 10065b8:	d8c00517 	ldw	r3,20(sp)
 10065bc:	1009883a 	mov	r4,r2
 10065c0:	ad400c04 	addi	r21,r21,48
 10065c4:	1d05883a 	add	r2,r3,r20
 10065c8:	15400005 	stb	r21,0(r2)
 10065cc:	2021883a 	mov	r16,r4
 10065d0:	d9000317 	ldw	r4,12(sp)
 10065d4:	a5000044 	addi	r20,r20,1
 10065d8:	2823883a 	mov	r17,r5
 10065dc:	a13fe11e 	bne	r20,r4,1006564 <_dtoa_r+0x1384>
 10065e0:	e505883a 	add	r2,fp,r20
 10065e4:	173fffc4 	addi	fp,r2,-1
 10065e8:	0025883a 	mov	r18,zero
 10065ec:	04cff834 	movhi	r19,16352
 10065f0:	b009883a 	mov	r4,r22
 10065f4:	b80b883a 	mov	r5,r23
 10065f8:	900d883a 	mov	r6,r18
 10065fc:	980f883a 	mov	r7,r19
 1006600:	1001c8c0 	call	1001c8c <__adddf3>
 1006604:	180b883a 	mov	r5,r3
 1006608:	1009883a 	mov	r4,r2
 100660c:	800d883a 	mov	r6,r16
 1006610:	880f883a 	mov	r7,r17
 1006614:	100b7a00 	call	100b7a0 <__ltdf2>
 1006618:	103cab16 	blt	r2,zero,10058c8 <_dtoa_r+0x6e8>
 100661c:	0009883a 	mov	r4,zero
 1006620:	980b883a 	mov	r5,r19
 1006624:	b80f883a 	mov	r7,r23
 1006628:	b00d883a 	mov	r6,r22
 100662c:	1001c000 	call	1001c00 <__subdf3>
 1006630:	180b883a 	mov	r5,r3
 1006634:	880f883a 	mov	r7,r17
 1006638:	1009883a 	mov	r4,r2
 100663c:	800d883a 	mov	r6,r16
 1006640:	100b6780 	call	100b678 <__gtdf2>
 1006644:	00bc470e 	bge	zero,r2,1005764 <_dtoa_r+0x584>
 1006648:	00c00c04 	movi	r3,48
 100664c:	e73fffc4 	addi	fp,fp,-1
 1006650:	e0800007 	ldb	r2,0(fp)
 1006654:	10fffd26 	beq	r2,r3,100664c <_dtoa_r+0x146c>
 1006658:	d9800417 	ldw	r6,16(sp)
 100665c:	e7000044 	addi	fp,fp,1
 1006660:	d9800d15 	stw	r6,52(sp)
 1006664:	003cab06 	br	1005914 <_dtoa_r+0x734>
 1006668:	d8c00f17 	ldw	r3,60(sp)
 100666c:	d9001117 	ldw	r4,68(sp)
 1006670:	20e1c83a 	sub	r16,r4,r3
 1006674:	0007883a 	mov	r3,zero
 1006678:	003d9b06 	br	1005ce8 <_dtoa_r+0xb08>
 100667c:	00800e44 	movi	r2,57
 1006680:	b0800005 	stb	r2,0(r22)
 1006684:	b5800044 	addi	r22,r22,1
 1006688:	003dc106 	br	1005d90 <_dtoa_r+0xbb0>
 100668c:	05800084 	movi	r22,2
 1006690:	003bf706 	br	1005670 <_dtoa_r+0x490>
 1006694:	d9000f17 	ldw	r4,60(sp)
 1006698:	013c000e 	bge	zero,r4,100569c <_dtoa_r+0x4bc>
 100669c:	d9800e17 	ldw	r6,56(sp)
 10066a0:	01bc300e 	bge	zero,r6,1005764 <_dtoa_r+0x584>
 10066a4:	0005883a 	mov	r2,zero
 10066a8:	00d00934 	movhi	r3,16420
 10066ac:	a80b883a 	mov	r5,r21
 10066b0:	180f883a 	mov	r7,r3
 10066b4:	a009883a 	mov	r4,r20
 10066b8:	100d883a 	mov	r6,r2
 10066bc:	1001d0c0 	call	1001d0c <__muldf3>
 10066c0:	b1000044 	addi	r4,r22,1
 10066c4:	1021883a 	mov	r16,r2
 10066c8:	1823883a 	mov	r17,r3
 10066cc:	100b8340 	call	100b834 <__floatsidf>
 10066d0:	880b883a 	mov	r5,r17
 10066d4:	8009883a 	mov	r4,r16
 10066d8:	180f883a 	mov	r7,r3
 10066dc:	100d883a 	mov	r6,r2
 10066e0:	1001d0c0 	call	1001d0c <__muldf3>
 10066e4:	0011883a 	mov	r8,zero
 10066e8:	02500734 	movhi	r9,16412
 10066ec:	180b883a 	mov	r5,r3
 10066f0:	480f883a 	mov	r7,r9
 10066f4:	1009883a 	mov	r4,r2
 10066f8:	400d883a 	mov	r6,r8
 10066fc:	1001c8c0 	call	1001c8c <__adddf3>
 1006700:	102d883a 	mov	r22,r2
 1006704:	00bf3034 	movhi	r2,64704
 1006708:	10ef883a 	add	r23,r2,r3
 100670c:	d8800d17 	ldw	r2,52(sp)
 1006710:	d8c00e17 	ldw	r3,56(sp)
 1006714:	8029883a 	mov	r20,r16
 1006718:	10bfffc4 	addi	r2,r2,-1
 100671c:	882b883a 	mov	r21,r17
 1006720:	d8800415 	stw	r2,16(sp)
 1006724:	d8c00315 	stw	r3,12(sp)
 1006728:	003e8306 	br	1006138 <_dtoa_r+0xf58>
 100672c:	d8800117 	ldw	r2,4(sp)
 1006730:	dc001117 	ldw	r16,68(sp)
 1006734:	dc801017 	ldw	r18,64(sp)
 1006738:	00c00d84 	movi	r3,54
 100673c:	1887c83a 	sub	r3,r3,r2
 1006740:	003d6906 	br	1005ce8 <_dtoa_r+0xb08>
 1006744:	01800044 	movi	r6,1
 1006748:	3021883a 	mov	r16,r6
 100674c:	d9800f15 	stw	r6,60(sp)
 1006750:	d9802615 	stw	r6,152(sp)
 1006754:	d9800e15 	stw	r6,56(sp)
 1006758:	003b9306 	br	10055a8 <_dtoa_r+0x3c8>
 100675c:	b021883a 	mov	r16,r22
 1006760:	dd800f15 	stw	r22,60(sp)
 1006764:	003b9006 	br	10055a8 <_dtoa_r+0x3c8>
 1006768:	103e221e 	bne	r2,zero,1005ff4 <_dtoa_r+0xe14>
 100676c:	b880004c 	andi	r2,r23,1
 1006770:	1005003a 	cmpeq	r2,r2,zero
 1006774:	103e1f1e 	bne	r2,zero,1005ff4 <_dtoa_r+0xe14>
 1006778:	003e1b06 	br	1005fe8 <_dtoa_r+0xe08>
 100677c:	d9001617 	ldw	r4,88(sp)
 1006780:	980b883a 	mov	r5,r19
 1006784:	01800284 	movi	r6,10
 1006788:	000f883a 	mov	r7,zero
 100678c:	10093180 	call	1009318 <__multadd>
 1006790:	d8c00e17 	ldw	r3,56(sp)
 1006794:	1027883a 	mov	r19,r2
 1006798:	d8c00f15 	stw	r3,60(sp)
 100679c:	003cd306 	br	1005aec <_dtoa_r+0x90c>

010067a0 <_fflush_r>:
 10067a0:	f811883a 	mov	r8,ra
 10067a4:	100c3d80 	call	100c3d8 <_mcount>
 10067a8:	403f883a 	mov	ra,r8
 10067ac:	defffb04 	addi	sp,sp,-20
 10067b0:	dfc00415 	stw	ra,16(sp)
 10067b4:	dcc00315 	stw	r19,12(sp)
 10067b8:	dc800215 	stw	r18,8(sp)
 10067bc:	dc400115 	stw	r17,4(sp)
 10067c0:	dc000015 	stw	r16,0(sp)
 10067c4:	2027883a 	mov	r19,r4
 10067c8:	2825883a 	mov	r18,r5
 10067cc:	20000226 	beq	r4,zero,10067d8 <_fflush_r+0x38>
 10067d0:	20800e17 	ldw	r2,56(r4)
 10067d4:	10005626 	beq	r2,zero,1006930 <_fflush_r+0x190>
 10067d8:	9100030b 	ldhu	r4,12(r18)
 10067dc:	20ffffcc 	andi	r3,r4,65535
 10067e0:	18e0001c 	xori	r3,r3,32768
 10067e4:	18e00004 	addi	r3,r3,-32768
 10067e8:	1880020c 	andi	r2,r3,8
 10067ec:	1000261e 	bne	r2,zero,1006888 <_fflush_r+0xe8>
 10067f0:	90c00117 	ldw	r3,4(r18)
 10067f4:	20820014 	ori	r2,r4,2048
 10067f8:	9080030d 	sth	r2,12(r18)
 10067fc:	1009883a 	mov	r4,r2
 1006800:	00c0400e 	bge	zero,r3,1006904 <_fflush_r+0x164>
 1006804:	92000a17 	ldw	r8,40(r18)
 1006808:	40004026 	beq	r8,zero,100690c <_fflush_r+0x16c>
 100680c:	2084000c 	andi	r2,r4,4096
 1006810:	10005326 	beq	r2,zero,1006960 <_fflush_r+0x1c0>
 1006814:	94001417 	ldw	r16,80(r18)
 1006818:	9080030b 	ldhu	r2,12(r18)
 100681c:	1080010c 	andi	r2,r2,4
 1006820:	1000481e 	bne	r2,zero,1006944 <_fflush_r+0x1a4>
 1006824:	91400717 	ldw	r5,28(r18)
 1006828:	9809883a 	mov	r4,r19
 100682c:	800d883a 	mov	r6,r16
 1006830:	000f883a 	mov	r7,zero
 1006834:	403ee83a 	callr	r8
 1006838:	8080261e 	bne	r16,r2,10068d4 <_fflush_r+0x134>
 100683c:	9080030b 	ldhu	r2,12(r18)
 1006840:	91000417 	ldw	r4,16(r18)
 1006844:	90000115 	stw	zero,4(r18)
 1006848:	10bdffcc 	andi	r2,r2,63487
 100684c:	10ffffcc 	andi	r3,r2,65535
 1006850:	18c4000c 	andi	r3,r3,4096
 1006854:	9080030d 	sth	r2,12(r18)
 1006858:	91000015 	stw	r4,0(r18)
 100685c:	18002b26 	beq	r3,zero,100690c <_fflush_r+0x16c>
 1006860:	0007883a 	mov	r3,zero
 1006864:	1805883a 	mov	r2,r3
 1006868:	94001415 	stw	r16,80(r18)
 100686c:	dfc00417 	ldw	ra,16(sp)
 1006870:	dcc00317 	ldw	r19,12(sp)
 1006874:	dc800217 	ldw	r18,8(sp)
 1006878:	dc400117 	ldw	r17,4(sp)
 100687c:	dc000017 	ldw	r16,0(sp)
 1006880:	dec00504 	addi	sp,sp,20
 1006884:	f800283a 	ret
 1006888:	94400417 	ldw	r17,16(r18)
 100688c:	88001f26 	beq	r17,zero,100690c <_fflush_r+0x16c>
 1006890:	90800017 	ldw	r2,0(r18)
 1006894:	18c000cc 	andi	r3,r3,3
 1006898:	94400015 	stw	r17,0(r18)
 100689c:	1461c83a 	sub	r16,r2,r17
 10068a0:	18002526 	beq	r3,zero,1006938 <_fflush_r+0x198>
 10068a4:	0005883a 	mov	r2,zero
 10068a8:	90800215 	stw	r2,8(r18)
 10068ac:	0400170e 	bge	zero,r16,100690c <_fflush_r+0x16c>
 10068b0:	90c00917 	ldw	r3,36(r18)
 10068b4:	91400717 	ldw	r5,28(r18)
 10068b8:	880d883a 	mov	r6,r17
 10068bc:	800f883a 	mov	r7,r16
 10068c0:	9809883a 	mov	r4,r19
 10068c4:	183ee83a 	callr	r3
 10068c8:	88a3883a 	add	r17,r17,r2
 10068cc:	80a1c83a 	sub	r16,r16,r2
 10068d0:	00bff616 	blt	zero,r2,10068ac <_fflush_r+0x10c>
 10068d4:	9080030b 	ldhu	r2,12(r18)
 10068d8:	00ffffc4 	movi	r3,-1
 10068dc:	10801014 	ori	r2,r2,64
 10068e0:	9080030d 	sth	r2,12(r18)
 10068e4:	1805883a 	mov	r2,r3
 10068e8:	dfc00417 	ldw	ra,16(sp)
 10068ec:	dcc00317 	ldw	r19,12(sp)
 10068f0:	dc800217 	ldw	r18,8(sp)
 10068f4:	dc400117 	ldw	r17,4(sp)
 10068f8:	dc000017 	ldw	r16,0(sp)
 10068fc:	dec00504 	addi	sp,sp,20
 1006900:	f800283a 	ret
 1006904:	90800f17 	ldw	r2,60(r18)
 1006908:	00bfbe16 	blt	zero,r2,1006804 <_fflush_r+0x64>
 100690c:	0007883a 	mov	r3,zero
 1006910:	1805883a 	mov	r2,r3
 1006914:	dfc00417 	ldw	ra,16(sp)
 1006918:	dcc00317 	ldw	r19,12(sp)
 100691c:	dc800217 	ldw	r18,8(sp)
 1006920:	dc400117 	ldw	r17,4(sp)
 1006924:	dc000017 	ldw	r16,0(sp)
 1006928:	dec00504 	addi	sp,sp,20
 100692c:	f800283a 	ret
 1006930:	1006a8c0 	call	1006a8c <__sinit>
 1006934:	003fa806 	br	10067d8 <_fflush_r+0x38>
 1006938:	90800517 	ldw	r2,20(r18)
 100693c:	90800215 	stw	r2,8(r18)
 1006940:	003fda06 	br	10068ac <_fflush_r+0x10c>
 1006944:	90800117 	ldw	r2,4(r18)
 1006948:	90c00c17 	ldw	r3,48(r18)
 100694c:	80a1c83a 	sub	r16,r16,r2
 1006950:	183fb426 	beq	r3,zero,1006824 <_fflush_r+0x84>
 1006954:	90800f17 	ldw	r2,60(r18)
 1006958:	80a1c83a 	sub	r16,r16,r2
 100695c:	003fb106 	br	1006824 <_fflush_r+0x84>
 1006960:	91400717 	ldw	r5,28(r18)
 1006964:	9809883a 	mov	r4,r19
 1006968:	000d883a 	mov	r6,zero
 100696c:	01c00044 	movi	r7,1
 1006970:	403ee83a 	callr	r8
 1006974:	1021883a 	mov	r16,r2
 1006978:	00bfffc4 	movi	r2,-1
 100697c:	80800226 	beq	r16,r2,1006988 <_fflush_r+0x1e8>
 1006980:	92000a17 	ldw	r8,40(r18)
 1006984:	003fa406 	br	1006818 <_fflush_r+0x78>
 1006988:	98c00017 	ldw	r3,0(r19)
 100698c:	00800744 	movi	r2,29
 1006990:	18bfde26 	beq	r3,r2,100690c <_fflush_r+0x16c>
 1006994:	9080030b 	ldhu	r2,12(r18)
 1006998:	8007883a 	mov	r3,r16
 100699c:	10801014 	ori	r2,r2,64
 10069a0:	9080030d 	sth	r2,12(r18)
 10069a4:	003fcf06 	br	10068e4 <_fflush_r+0x144>

010069a8 <fflush>:
 10069a8:	f811883a 	mov	r8,ra
 10069ac:	100c3d80 	call	100c3d8 <_mcount>
 10069b0:	403f883a 	mov	ra,r8
 10069b4:	01404034 	movhi	r5,256
 10069b8:	2959e804 	addi	r5,r5,26528
 10069bc:	2007883a 	mov	r3,r4
 10069c0:	20000526 	beq	r4,zero,10069d8 <fflush+0x30>
 10069c4:	008040f4 	movhi	r2,259
 10069c8:	10a00704 	addi	r2,r2,-32740
 10069cc:	11000017 	ldw	r4,0(r2)
 10069d0:	180b883a 	mov	r5,r3
 10069d4:	10067a01 	jmpi	10067a0 <_fflush_r>
 10069d8:	008040f4 	movhi	r2,259
 10069dc:	10a00804 	addi	r2,r2,-32736
 10069e0:	11000017 	ldw	r4,0(r2)
 10069e4:	10076841 	jmpi	1007684 <_fwalk_reent>

010069e8 <std>:
 10069e8:	f811883a 	mov	r8,ra
 10069ec:	100c3d80 	call	100c3d8 <_mcount>
 10069f0:	403f883a 	mov	ra,r8
 10069f4:	00804074 	movhi	r2,257
 10069f8:	10a7ec04 	addi	r2,r2,-24656
 10069fc:	20800b15 	stw	r2,44(r4)
 1006a00:	00804074 	movhi	r2,257
 1006a04:	10a83004 	addi	r2,r2,-24384
 1006a08:	20800815 	stw	r2,32(r4)
 1006a0c:	00c04074 	movhi	r3,257
 1006a10:	18e80e04 	addi	r3,r3,-24520
 1006a14:	00804074 	movhi	r2,257
 1006a18:	10a7f104 	addi	r2,r2,-24636
 1006a1c:	2140030d 	sth	r5,12(r4)
 1006a20:	2180038d 	sth	r6,14(r4)
 1006a24:	20c00915 	stw	r3,36(r4)
 1006a28:	20800a15 	stw	r2,40(r4)
 1006a2c:	20000015 	stw	zero,0(r4)
 1006a30:	20000115 	stw	zero,4(r4)
 1006a34:	20000215 	stw	zero,8(r4)
 1006a38:	20000415 	stw	zero,16(r4)
 1006a3c:	20000515 	stw	zero,20(r4)
 1006a40:	20000615 	stw	zero,24(r4)
 1006a44:	21000715 	stw	r4,28(r4)
 1006a48:	f800283a 	ret

01006a4c <__sfp_lock_acquire>:
 1006a4c:	f811883a 	mov	r8,ra
 1006a50:	100c3d80 	call	100c3d8 <_mcount>
 1006a54:	403f883a 	mov	ra,r8
 1006a58:	f800283a 	ret

01006a5c <__sfp_lock_release>:
 1006a5c:	f811883a 	mov	r8,ra
 1006a60:	100c3d80 	call	100c3d8 <_mcount>
 1006a64:	403f883a 	mov	ra,r8
 1006a68:	f800283a 	ret

01006a6c <__sinit_lock_acquire>:
 1006a6c:	f811883a 	mov	r8,ra
 1006a70:	100c3d80 	call	100c3d8 <_mcount>
 1006a74:	403f883a 	mov	ra,r8
 1006a78:	f800283a 	ret

01006a7c <__sinit_lock_release>:
 1006a7c:	f811883a 	mov	r8,ra
 1006a80:	100c3d80 	call	100c3d8 <_mcount>
 1006a84:	403f883a 	mov	ra,r8
 1006a88:	f800283a 	ret

01006a8c <__sinit>:
 1006a8c:	f811883a 	mov	r8,ra
 1006a90:	100c3d80 	call	100c3d8 <_mcount>
 1006a94:	403f883a 	mov	ra,r8
 1006a98:	defffd04 	addi	sp,sp,-12
 1006a9c:	dfc00215 	stw	ra,8(sp)
 1006aa0:	dc400115 	stw	r17,4(sp)
 1006aa4:	dc000015 	stw	r16,0(sp)
 1006aa8:	20800e17 	ldw	r2,56(r4)
 1006aac:	04400044 	movi	r17,1
 1006ab0:	01400104 	movi	r5,4
 1006ab4:	000d883a 	mov	r6,zero
 1006ab8:	2021883a 	mov	r16,r4
 1006abc:	2200bb04 	addi	r8,r4,748
 1006ac0:	200f883a 	mov	r7,r4
 1006ac4:	10000526 	beq	r2,zero,1006adc <__sinit+0x50>
 1006ac8:	dfc00217 	ldw	ra,8(sp)
 1006acc:	dc400117 	ldw	r17,4(sp)
 1006ad0:	dc000017 	ldw	r16,0(sp)
 1006ad4:	dec00304 	addi	sp,sp,12
 1006ad8:	f800283a 	ret
 1006adc:	21000117 	ldw	r4,4(r4)
 1006ae0:	00804034 	movhi	r2,256
 1006ae4:	109aeb04 	addi	r2,r2,27564
 1006ae8:	00c000c4 	movi	r3,3
 1006aec:	80800f15 	stw	r2,60(r16)
 1006af0:	80c0b915 	stw	r3,740(r16)
 1006af4:	8200ba15 	stw	r8,744(r16)
 1006af8:	84400e15 	stw	r17,56(r16)
 1006afc:	8000b815 	stw	zero,736(r16)
 1006b00:	10069e80 	call	10069e8 <std>
 1006b04:	81000217 	ldw	r4,8(r16)
 1006b08:	880d883a 	mov	r6,r17
 1006b0c:	800f883a 	mov	r7,r16
 1006b10:	01400284 	movi	r5,10
 1006b14:	10069e80 	call	10069e8 <std>
 1006b18:	81000317 	ldw	r4,12(r16)
 1006b1c:	800f883a 	mov	r7,r16
 1006b20:	01400484 	movi	r5,18
 1006b24:	01800084 	movi	r6,2
 1006b28:	dfc00217 	ldw	ra,8(sp)
 1006b2c:	dc400117 	ldw	r17,4(sp)
 1006b30:	dc000017 	ldw	r16,0(sp)
 1006b34:	dec00304 	addi	sp,sp,12
 1006b38:	10069e81 	jmpi	10069e8 <std>

01006b3c <__fp_lock>:
 1006b3c:	f811883a 	mov	r8,ra
 1006b40:	100c3d80 	call	100c3d8 <_mcount>
 1006b44:	403f883a 	mov	ra,r8
 1006b48:	0005883a 	mov	r2,zero
 1006b4c:	f800283a 	ret

01006b50 <__fp_unlock>:
 1006b50:	f811883a 	mov	r8,ra
 1006b54:	100c3d80 	call	100c3d8 <_mcount>
 1006b58:	403f883a 	mov	ra,r8
 1006b5c:	0005883a 	mov	r2,zero
 1006b60:	f800283a 	ret

01006b64 <__fp_unlock_all>:
 1006b64:	f811883a 	mov	r8,ra
 1006b68:	100c3d80 	call	100c3d8 <_mcount>
 1006b6c:	403f883a 	mov	ra,r8
 1006b70:	008040f4 	movhi	r2,259
 1006b74:	10a00704 	addi	r2,r2,-32740
 1006b78:	11000017 	ldw	r4,0(r2)
 1006b7c:	01404034 	movhi	r5,256
 1006b80:	295ad404 	addi	r5,r5,27472
 1006b84:	10077581 	jmpi	1007758 <_fwalk>

01006b88 <__fp_lock_all>:
 1006b88:	f811883a 	mov	r8,ra
 1006b8c:	100c3d80 	call	100c3d8 <_mcount>
 1006b90:	403f883a 	mov	ra,r8
 1006b94:	008040f4 	movhi	r2,259
 1006b98:	10a00704 	addi	r2,r2,-32740
 1006b9c:	11000017 	ldw	r4,0(r2)
 1006ba0:	01404034 	movhi	r5,256
 1006ba4:	295acf04 	addi	r5,r5,27452
 1006ba8:	10077581 	jmpi	1007758 <_fwalk>

01006bac <_cleanup_r>:
 1006bac:	f811883a 	mov	r8,ra
 1006bb0:	100c3d80 	call	100c3d8 <_mcount>
 1006bb4:	403f883a 	mov	ra,r8
 1006bb8:	01404074 	movhi	r5,257
 1006bbc:	29699204 	addi	r5,r5,-22968
 1006bc0:	10077581 	jmpi	1007758 <_fwalk>

01006bc4 <_cleanup>:
 1006bc4:	f811883a 	mov	r8,ra
 1006bc8:	100c3d80 	call	100c3d8 <_mcount>
 1006bcc:	403f883a 	mov	ra,r8
 1006bd0:	008040f4 	movhi	r2,259
 1006bd4:	10a00804 	addi	r2,r2,-32736
 1006bd8:	11000017 	ldw	r4,0(r2)
 1006bdc:	1006bac1 	jmpi	1006bac <_cleanup_r>

01006be0 <__sfmoreglue>:
 1006be0:	f811883a 	mov	r8,ra
 1006be4:	100c3d80 	call	100c3d8 <_mcount>
 1006be8:	403f883a 	mov	ra,r8
 1006bec:	defffc04 	addi	sp,sp,-16
 1006bf0:	dfc00315 	stw	ra,12(sp)
 1006bf4:	dcc00215 	stw	r19,8(sp)
 1006bf8:	dc400115 	stw	r17,4(sp)
 1006bfc:	dc000015 	stw	r16,0(sp)
 1006c00:	2821883a 	mov	r16,r5
 1006c04:	2023883a 	mov	r17,r4
 1006c08:	01401704 	movi	r5,92
 1006c0c:	8009883a 	mov	r4,r16
 1006c10:	10026680 	call	1002668 <__mulsi3>
 1006c14:	11400304 	addi	r5,r2,12
 1006c18:	8809883a 	mov	r4,r17
 1006c1c:	1027883a 	mov	r19,r2
 1006c20:	1007abc0 	call	1007abc <_malloc_r>
 1006c24:	10c00304 	addi	r3,r2,12
 1006c28:	1023883a 	mov	r17,r2
 1006c2c:	1809883a 	mov	r4,r3
 1006c30:	980d883a 	mov	r6,r19
 1006c34:	000b883a 	mov	r5,zero
 1006c38:	10000b26 	beq	r2,zero,1006c68 <__sfmoreglue+0x88>
 1006c3c:	14000115 	stw	r16,4(r2)
 1006c40:	10c00215 	stw	r3,8(r2)
 1006c44:	10000015 	stw	zero,0(r2)
 1006c48:	10084900 	call	1008490 <memset>
 1006c4c:	8805883a 	mov	r2,r17
 1006c50:	dfc00317 	ldw	ra,12(sp)
 1006c54:	dcc00217 	ldw	r19,8(sp)
 1006c58:	dc400117 	ldw	r17,4(sp)
 1006c5c:	dc000017 	ldw	r16,0(sp)
 1006c60:	dec00404 	addi	sp,sp,16
 1006c64:	f800283a 	ret
 1006c68:	0023883a 	mov	r17,zero
 1006c6c:	8805883a 	mov	r2,r17
 1006c70:	dfc00317 	ldw	ra,12(sp)
 1006c74:	dcc00217 	ldw	r19,8(sp)
 1006c78:	dc400117 	ldw	r17,4(sp)
 1006c7c:	dc000017 	ldw	r16,0(sp)
 1006c80:	dec00404 	addi	sp,sp,16
 1006c84:	f800283a 	ret

01006c88 <__sfp>:
 1006c88:	f811883a 	mov	r8,ra
 1006c8c:	100c3d80 	call	100c3d8 <_mcount>
 1006c90:	403f883a 	mov	ra,r8
 1006c94:	defffd04 	addi	sp,sp,-12
 1006c98:	dfc00215 	stw	ra,8(sp)
 1006c9c:	dc400115 	stw	r17,4(sp)
 1006ca0:	dc000015 	stw	r16,0(sp)
 1006ca4:	008040f4 	movhi	r2,259
 1006ca8:	10a00804 	addi	r2,r2,-32736
 1006cac:	14000017 	ldw	r16,0(r2)
 1006cb0:	2023883a 	mov	r17,r4
 1006cb4:	80800e17 	ldw	r2,56(r16)
 1006cb8:	10002626 	beq	r2,zero,1006d54 <__sfp+0xcc>
 1006cbc:	8400b804 	addi	r16,r16,736
 1006cc0:	80800117 	ldw	r2,4(r16)
 1006cc4:	81000217 	ldw	r4,8(r16)
 1006cc8:	10ffffc4 	addi	r3,r2,-1
 1006ccc:	18000916 	blt	r3,zero,1006cf4 <__sfp+0x6c>
 1006cd0:	2080030f 	ldh	r2,12(r4)
 1006cd4:	10000b26 	beq	r2,zero,1006d04 <__sfp+0x7c>
 1006cd8:	017fffc4 	movi	r5,-1
 1006cdc:	00000206 	br	1006ce8 <__sfp+0x60>
 1006ce0:	2080030f 	ldh	r2,12(r4)
 1006ce4:	10000726 	beq	r2,zero,1006d04 <__sfp+0x7c>
 1006ce8:	18ffffc4 	addi	r3,r3,-1
 1006cec:	21001704 	addi	r4,r4,92
 1006cf0:	197ffb1e 	bne	r3,r5,1006ce0 <__sfp+0x58>
 1006cf4:	80800017 	ldw	r2,0(r16)
 1006cf8:	10001926 	beq	r2,zero,1006d60 <__sfp+0xd8>
 1006cfc:	1021883a 	mov	r16,r2
 1006d00:	003fef06 	br	1006cc0 <__sfp+0x38>
 1006d04:	00bfffc4 	movi	r2,-1
 1006d08:	00c00044 	movi	r3,1
 1006d0c:	2080038d 	sth	r2,14(r4)
 1006d10:	20c0030d 	sth	r3,12(r4)
 1006d14:	20000015 	stw	zero,0(r4)
 1006d18:	20000215 	stw	zero,8(r4)
 1006d1c:	20000115 	stw	zero,4(r4)
 1006d20:	20000415 	stw	zero,16(r4)
 1006d24:	20000515 	stw	zero,20(r4)
 1006d28:	20000615 	stw	zero,24(r4)
 1006d2c:	20000c15 	stw	zero,48(r4)
 1006d30:	20000d15 	stw	zero,52(r4)
 1006d34:	20001115 	stw	zero,68(r4)
 1006d38:	20001215 	stw	zero,72(r4)
 1006d3c:	2005883a 	mov	r2,r4
 1006d40:	dfc00217 	ldw	ra,8(sp)
 1006d44:	dc400117 	ldw	r17,4(sp)
 1006d48:	dc000017 	ldw	r16,0(sp)
 1006d4c:	dec00304 	addi	sp,sp,12
 1006d50:	f800283a 	ret
 1006d54:	8009883a 	mov	r4,r16
 1006d58:	1006a8c0 	call	1006a8c <__sinit>
 1006d5c:	003fd706 	br	1006cbc <__sfp+0x34>
 1006d60:	8809883a 	mov	r4,r17
 1006d64:	01400104 	movi	r5,4
 1006d68:	1006be00 	call	1006be0 <__sfmoreglue>
 1006d6c:	80800015 	stw	r2,0(r16)
 1006d70:	103fe21e 	bne	r2,zero,1006cfc <__sfp+0x74>
 1006d74:	00800304 	movi	r2,12
 1006d78:	0009883a 	mov	r4,zero
 1006d7c:	88800015 	stw	r2,0(r17)
 1006d80:	003fee06 	br	1006d3c <__sfp+0xb4>

01006d84 <_malloc_trim_r>:
 1006d84:	f811883a 	mov	r8,ra
 1006d88:	100c3d80 	call	100c3d8 <_mcount>
 1006d8c:	403f883a 	mov	ra,r8
 1006d90:	defffb04 	addi	sp,sp,-20
 1006d94:	dfc00415 	stw	ra,16(sp)
 1006d98:	dcc00315 	stw	r19,12(sp)
 1006d9c:	dc800215 	stw	r18,8(sp)
 1006da0:	dc400115 	stw	r17,4(sp)
 1006da4:	dc000015 	stw	r16,0(sp)
 1006da8:	04c040b4 	movhi	r19,258
 1006dac:	9cda3c04 	addi	r19,r19,26864
 1006db0:	2823883a 	mov	r17,r5
 1006db4:	2025883a 	mov	r18,r4
 1006db8:	100cbcc0 	call	100cbcc <__malloc_lock>
 1006dbc:	98800217 	ldw	r2,8(r19)
 1006dc0:	9009883a 	mov	r4,r18
 1006dc4:	000b883a 	mov	r5,zero
 1006dc8:	10c00117 	ldw	r3,4(r2)
 1006dcc:	00bfff04 	movi	r2,-4
 1006dd0:	18a0703a 	and	r16,r3,r2
 1006dd4:	8463c83a 	sub	r17,r16,r17
 1006dd8:	8c43fbc4 	addi	r17,r17,4079
 1006ddc:	8822d33a 	srli	r17,r17,12
 1006de0:	0083ffc4 	movi	r2,4095
 1006de4:	8c7fffc4 	addi	r17,r17,-1
 1006de8:	8822933a 	slli	r17,r17,12
 1006dec:	1440060e 	bge	r2,r17,1006e08 <_malloc_trim_r+0x84>
 1006df0:	1009f340 	call	1009f34 <_sbrk_r>
 1006df4:	98c00217 	ldw	r3,8(r19)
 1006df8:	9009883a 	mov	r4,r18
 1006dfc:	044bc83a 	sub	r5,zero,r17
 1006e00:	80c7883a 	add	r3,r16,r3
 1006e04:	10c00926 	beq	r2,r3,1006e2c <_malloc_trim_r+0xa8>
 1006e08:	100cce00 	call	100cce0 <__malloc_unlock>
 1006e0c:	0005883a 	mov	r2,zero
 1006e10:	dfc00417 	ldw	ra,16(sp)
 1006e14:	dcc00317 	ldw	r19,12(sp)
 1006e18:	dc800217 	ldw	r18,8(sp)
 1006e1c:	dc400117 	ldw	r17,4(sp)
 1006e20:	dc000017 	ldw	r16,0(sp)
 1006e24:	dec00504 	addi	sp,sp,20
 1006e28:	f800283a 	ret
 1006e2c:	9009883a 	mov	r4,r18
 1006e30:	1009f340 	call	1009f34 <_sbrk_r>
 1006e34:	844dc83a 	sub	r6,r16,r17
 1006e38:	00ffffc4 	movi	r3,-1
 1006e3c:	9009883a 	mov	r4,r18
 1006e40:	000b883a 	mov	r5,zero
 1006e44:	01c040f4 	movhi	r7,259
 1006e48:	39d78c04 	addi	r7,r7,24112
 1006e4c:	31800054 	ori	r6,r6,1
 1006e50:	10c00926 	beq	r2,r3,1006e78 <_malloc_trim_r+0xf4>
 1006e54:	38800017 	ldw	r2,0(r7)
 1006e58:	98c00217 	ldw	r3,8(r19)
 1006e5c:	9009883a 	mov	r4,r18
 1006e60:	1445c83a 	sub	r2,r2,r17
 1006e64:	38800015 	stw	r2,0(r7)
 1006e68:	19800115 	stw	r6,4(r3)
 1006e6c:	100cce00 	call	100cce0 <__malloc_unlock>
 1006e70:	00800044 	movi	r2,1
 1006e74:	003fe606 	br	1006e10 <_malloc_trim_r+0x8c>
 1006e78:	1009f340 	call	1009f34 <_sbrk_r>
 1006e7c:	99800217 	ldw	r6,8(r19)
 1006e80:	100f883a 	mov	r7,r2
 1006e84:	9009883a 	mov	r4,r18
 1006e88:	1187c83a 	sub	r3,r2,r6
 1006e8c:	008003c4 	movi	r2,15
 1006e90:	19400054 	ori	r5,r3,1
 1006e94:	10ffdc0e 	bge	r2,r3,1006e08 <_malloc_trim_r+0x84>
 1006e98:	008040f4 	movhi	r2,259
 1006e9c:	10a00c04 	addi	r2,r2,-32720
 1006ea0:	10c00017 	ldw	r3,0(r2)
 1006ea4:	008040f4 	movhi	r2,259
 1006ea8:	10978c04 	addi	r2,r2,24112
 1006eac:	31400115 	stw	r5,4(r6)
 1006eb0:	38c7c83a 	sub	r3,r7,r3
 1006eb4:	10c00015 	stw	r3,0(r2)
 1006eb8:	003fd306 	br	1006e08 <_malloc_trim_r+0x84>

01006ebc <_free_r>:
 1006ebc:	f811883a 	mov	r8,ra
 1006ec0:	100c3d80 	call	100c3d8 <_mcount>
 1006ec4:	403f883a 	mov	ra,r8
 1006ec8:	defffd04 	addi	sp,sp,-12
 1006ecc:	dfc00215 	stw	ra,8(sp)
 1006ed0:	dc400115 	stw	r17,4(sp)
 1006ed4:	dc000015 	stw	r16,0(sp)
 1006ed8:	2821883a 	mov	r16,r5
 1006edc:	2023883a 	mov	r17,r4
 1006ee0:	28005a26 	beq	r5,zero,100704c <_free_r+0x190>
 1006ee4:	100cbcc0 	call	100cbcc <__malloc_lock>
 1006ee8:	823ffe04 	addi	r8,r16,-8
 1006eec:	41400117 	ldw	r5,4(r8)
 1006ef0:	00bfff84 	movi	r2,-2
 1006ef4:	028040b4 	movhi	r10,258
 1006ef8:	529a3c04 	addi	r10,r10,26864
 1006efc:	288e703a 	and	r7,r5,r2
 1006f00:	41cd883a 	add	r6,r8,r7
 1006f04:	30c00117 	ldw	r3,4(r6)
 1006f08:	51000217 	ldw	r4,8(r10)
 1006f0c:	00bfff04 	movi	r2,-4
 1006f10:	1892703a 	and	r9,r3,r2
 1006f14:	5017883a 	mov	r11,r10
 1006f18:	31006726 	beq	r6,r4,10070b8 <_free_r+0x1fc>
 1006f1c:	2880004c 	andi	r2,r5,1
 1006f20:	1005003a 	cmpeq	r2,r2,zero
 1006f24:	32400115 	stw	r9,4(r6)
 1006f28:	10001a1e 	bne	r2,zero,1006f94 <_free_r+0xd8>
 1006f2c:	000b883a 	mov	r5,zero
 1006f30:	3247883a 	add	r3,r6,r9
 1006f34:	18800117 	ldw	r2,4(r3)
 1006f38:	1080004c 	andi	r2,r2,1
 1006f3c:	1000231e 	bne	r2,zero,1006fcc <_free_r+0x110>
 1006f40:	280ac03a 	cmpne	r5,r5,zero
 1006f44:	3a4f883a 	add	r7,r7,r9
 1006f48:	2800451e 	bne	r5,zero,1007060 <_free_r+0x1a4>
 1006f4c:	31000217 	ldw	r4,8(r6)
 1006f50:	008040b4 	movhi	r2,258
 1006f54:	109a3e04 	addi	r2,r2,26872
 1006f58:	20807b26 	beq	r4,r2,1007148 <_free_r+0x28c>
 1006f5c:	30800317 	ldw	r2,12(r6)
 1006f60:	3a07883a 	add	r3,r7,r8
 1006f64:	19c00015 	stw	r7,0(r3)
 1006f68:	11000215 	stw	r4,8(r2)
 1006f6c:	20800315 	stw	r2,12(r4)
 1006f70:	38800054 	ori	r2,r7,1
 1006f74:	40800115 	stw	r2,4(r8)
 1006f78:	28001a26 	beq	r5,zero,1006fe4 <_free_r+0x128>
 1006f7c:	8809883a 	mov	r4,r17
 1006f80:	dfc00217 	ldw	ra,8(sp)
 1006f84:	dc400117 	ldw	r17,4(sp)
 1006f88:	dc000017 	ldw	r16,0(sp)
 1006f8c:	dec00304 	addi	sp,sp,12
 1006f90:	100cce01 	jmpi	100cce0 <__malloc_unlock>
 1006f94:	80bffe17 	ldw	r2,-8(r16)
 1006f98:	50c00204 	addi	r3,r10,8
 1006f9c:	4091c83a 	sub	r8,r8,r2
 1006fa0:	41000217 	ldw	r4,8(r8)
 1006fa4:	388f883a 	add	r7,r7,r2
 1006fa8:	20c06126 	beq	r4,r3,1007130 <_free_r+0x274>
 1006fac:	40800317 	ldw	r2,12(r8)
 1006fb0:	3247883a 	add	r3,r6,r9
 1006fb4:	000b883a 	mov	r5,zero
 1006fb8:	11000215 	stw	r4,8(r2)
 1006fbc:	20800315 	stw	r2,12(r4)
 1006fc0:	18800117 	ldw	r2,4(r3)
 1006fc4:	1080004c 	andi	r2,r2,1
 1006fc8:	103fdd26 	beq	r2,zero,1006f40 <_free_r+0x84>
 1006fcc:	38800054 	ori	r2,r7,1
 1006fd0:	3a07883a 	add	r3,r7,r8
 1006fd4:	280ac03a 	cmpne	r5,r5,zero
 1006fd8:	40800115 	stw	r2,4(r8)
 1006fdc:	19c00015 	stw	r7,0(r3)
 1006fe0:	283fe61e 	bne	r5,zero,1006f7c <_free_r+0xc0>
 1006fe4:	00807fc4 	movi	r2,511
 1006fe8:	11c01f2e 	bgeu	r2,r7,1007068 <_free_r+0x1ac>
 1006fec:	3806d27a 	srli	r3,r7,9
 1006ff0:	1800481e 	bne	r3,zero,1007114 <_free_r+0x258>
 1006ff4:	3804d0fa 	srli	r2,r7,3
 1006ff8:	100690fa 	slli	r3,r2,3
 1006ffc:	1acd883a 	add	r6,r3,r11
 1007000:	31400217 	ldw	r5,8(r6)
 1007004:	31405926 	beq	r6,r5,100716c <_free_r+0x2b0>
 1007008:	28800117 	ldw	r2,4(r5)
 100700c:	00ffff04 	movi	r3,-4
 1007010:	10c4703a 	and	r2,r2,r3
 1007014:	3880022e 	bgeu	r7,r2,1007020 <_free_r+0x164>
 1007018:	29400217 	ldw	r5,8(r5)
 100701c:	317ffa1e 	bne	r6,r5,1007008 <_free_r+0x14c>
 1007020:	29800317 	ldw	r6,12(r5)
 1007024:	41800315 	stw	r6,12(r8)
 1007028:	41400215 	stw	r5,8(r8)
 100702c:	8809883a 	mov	r4,r17
 1007030:	2a000315 	stw	r8,12(r5)
 1007034:	32000215 	stw	r8,8(r6)
 1007038:	dfc00217 	ldw	ra,8(sp)
 100703c:	dc400117 	ldw	r17,4(sp)
 1007040:	dc000017 	ldw	r16,0(sp)
 1007044:	dec00304 	addi	sp,sp,12
 1007048:	100cce01 	jmpi	100cce0 <__malloc_unlock>
 100704c:	dfc00217 	ldw	ra,8(sp)
 1007050:	dc400117 	ldw	r17,4(sp)
 1007054:	dc000017 	ldw	r16,0(sp)
 1007058:	dec00304 	addi	sp,sp,12
 100705c:	f800283a 	ret
 1007060:	31000217 	ldw	r4,8(r6)
 1007064:	003fbd06 	br	1006f5c <_free_r+0xa0>
 1007068:	3806d0fa 	srli	r3,r7,3
 100706c:	00800044 	movi	r2,1
 1007070:	51400117 	ldw	r5,4(r10)
 1007074:	180890fa 	slli	r4,r3,3
 1007078:	1807d0ba 	srai	r3,r3,2
 100707c:	22c9883a 	add	r4,r4,r11
 1007080:	21800217 	ldw	r6,8(r4)
 1007084:	10c4983a 	sll	r2,r2,r3
 1007088:	41000315 	stw	r4,12(r8)
 100708c:	41800215 	stw	r6,8(r8)
 1007090:	288ab03a 	or	r5,r5,r2
 1007094:	22000215 	stw	r8,8(r4)
 1007098:	8809883a 	mov	r4,r17
 100709c:	51400115 	stw	r5,4(r10)
 10070a0:	32000315 	stw	r8,12(r6)
 10070a4:	dfc00217 	ldw	ra,8(sp)
 10070a8:	dc400117 	ldw	r17,4(sp)
 10070ac:	dc000017 	ldw	r16,0(sp)
 10070b0:	dec00304 	addi	sp,sp,12
 10070b4:	100cce01 	jmpi	100cce0 <__malloc_unlock>
 10070b8:	2880004c 	andi	r2,r5,1
 10070bc:	3a4d883a 	add	r6,r7,r9
 10070c0:	1000071e 	bne	r2,zero,10070e0 <_free_r+0x224>
 10070c4:	80bffe17 	ldw	r2,-8(r16)
 10070c8:	4091c83a 	sub	r8,r8,r2
 10070cc:	41000317 	ldw	r4,12(r8)
 10070d0:	40c00217 	ldw	r3,8(r8)
 10070d4:	308d883a 	add	r6,r6,r2
 10070d8:	20c00215 	stw	r3,8(r4)
 10070dc:	19000315 	stw	r4,12(r3)
 10070e0:	008040f4 	movhi	r2,259
 10070e4:	10a00b04 	addi	r2,r2,-32724
 10070e8:	11000017 	ldw	r4,0(r2)
 10070ec:	30c00054 	ori	r3,r6,1
 10070f0:	52000215 	stw	r8,8(r10)
 10070f4:	40c00115 	stw	r3,4(r8)
 10070f8:	313fa036 	bltu	r6,r4,1006f7c <_free_r+0xc0>
 10070fc:	008040f4 	movhi	r2,259
 1007100:	10975704 	addi	r2,r2,23900
 1007104:	11400017 	ldw	r5,0(r2)
 1007108:	8809883a 	mov	r4,r17
 100710c:	1006d840 	call	1006d84 <_malloc_trim_r>
 1007110:	003f9a06 	br	1006f7c <_free_r+0xc0>
 1007114:	00800104 	movi	r2,4
 1007118:	10c0072e 	bgeu	r2,r3,1007138 <_free_r+0x27c>
 100711c:	00800504 	movi	r2,20
 1007120:	10c01936 	bltu	r2,r3,1007188 <_free_r+0x2cc>
 1007124:	188016c4 	addi	r2,r3,91
 1007128:	100690fa 	slli	r3,r2,3
 100712c:	003fb306 	br	1006ffc <_free_r+0x140>
 1007130:	01400044 	movi	r5,1
 1007134:	003f7e06 	br	1006f30 <_free_r+0x74>
 1007138:	3804d1ba 	srli	r2,r7,6
 100713c:	10800e04 	addi	r2,r2,56
 1007140:	100690fa 	slli	r3,r2,3
 1007144:	003fad06 	br	1006ffc <_free_r+0x140>
 1007148:	22000315 	stw	r8,12(r4)
 100714c:	22000215 	stw	r8,8(r4)
 1007150:	3a05883a 	add	r2,r7,r8
 1007154:	38c00054 	ori	r3,r7,1
 1007158:	11c00015 	stw	r7,0(r2)
 100715c:	41000215 	stw	r4,8(r8)
 1007160:	40c00115 	stw	r3,4(r8)
 1007164:	41000315 	stw	r4,12(r8)
 1007168:	003f8406 	br	1006f7c <_free_r+0xc0>
 100716c:	1005d0ba 	srai	r2,r2,2
 1007170:	00c00044 	movi	r3,1
 1007174:	51000117 	ldw	r4,4(r10)
 1007178:	1886983a 	sll	r3,r3,r2
 100717c:	20c8b03a 	or	r4,r4,r3
 1007180:	51000115 	stw	r4,4(r10)
 1007184:	003fa706 	br	1007024 <_free_r+0x168>
 1007188:	00801504 	movi	r2,84
 100718c:	10c00436 	bltu	r2,r3,10071a0 <_free_r+0x2e4>
 1007190:	3804d33a 	srli	r2,r7,12
 1007194:	10801b84 	addi	r2,r2,110
 1007198:	100690fa 	slli	r3,r2,3
 100719c:	003f9706 	br	1006ffc <_free_r+0x140>
 10071a0:	00805504 	movi	r2,340
 10071a4:	10c00436 	bltu	r2,r3,10071b8 <_free_r+0x2fc>
 10071a8:	3804d3fa 	srli	r2,r7,15
 10071ac:	10801dc4 	addi	r2,r2,119
 10071b0:	100690fa 	slli	r3,r2,3
 10071b4:	003f9106 	br	1006ffc <_free_r+0x140>
 10071b8:	00815504 	movi	r2,1364
 10071bc:	10c0032e 	bgeu	r2,r3,10071cc <_free_r+0x310>
 10071c0:	00801f84 	movi	r2,126
 10071c4:	00c0fc04 	movi	r3,1008
 10071c8:	003f8c06 	br	1006ffc <_free_r+0x140>
 10071cc:	3804d4ba 	srli	r2,r7,18
 10071d0:	10801f04 	addi	r2,r2,124
 10071d4:	100690fa 	slli	r3,r2,3
 10071d8:	003f8806 	br	1006ffc <_free_r+0x140>

010071dc <__sfvwrite_r>:
 10071dc:	f811883a 	mov	r8,ra
 10071e0:	100c3d80 	call	100c3d8 <_mcount>
 10071e4:	403f883a 	mov	ra,r8
 10071e8:	defff504 	addi	sp,sp,-44
 10071ec:	dfc00a15 	stw	ra,40(sp)
 10071f0:	df000915 	stw	fp,36(sp)
 10071f4:	ddc00815 	stw	r23,32(sp)
 10071f8:	dd800715 	stw	r22,28(sp)
 10071fc:	dd400615 	stw	r21,24(sp)
 1007200:	dd000515 	stw	r20,20(sp)
 1007204:	dcc00415 	stw	r19,16(sp)
 1007208:	dc800315 	stw	r18,12(sp)
 100720c:	dc400215 	stw	r17,8(sp)
 1007210:	dc000115 	stw	r16,4(sp)
 1007214:	30800217 	ldw	r2,8(r6)
 1007218:	302d883a 	mov	r22,r6
 100721c:	2039883a 	mov	fp,r4
 1007220:	2825883a 	mov	r18,r5
 1007224:	10001c26 	beq	r2,zero,1007298 <__sfvwrite_r+0xbc>
 1007228:	29c0030b 	ldhu	r7,12(r5)
 100722c:	3880020c 	andi	r2,r7,8
 1007230:	10002726 	beq	r2,zero,10072d0 <__sfvwrite_r+0xf4>
 1007234:	28800417 	ldw	r2,16(r5)
 1007238:	10002526 	beq	r2,zero,10072d0 <__sfvwrite_r+0xf4>
 100723c:	3880008c 	andi	r2,r7,2
 1007240:	b5400017 	ldw	r21,0(r22)
 1007244:	10002826 	beq	r2,zero,10072e8 <__sfvwrite_r+0x10c>
 1007248:	0021883a 	mov	r16,zero
 100724c:	0023883a 	mov	r17,zero
 1007250:	880d883a 	mov	r6,r17
 1007254:	e009883a 	mov	r4,fp
 1007258:	00810004 	movi	r2,1024
 100725c:	80006e26 	beq	r16,zero,1007418 <__sfvwrite_r+0x23c>
 1007260:	800f883a 	mov	r7,r16
 1007264:	91400717 	ldw	r5,28(r18)
 1007268:	1400012e 	bgeu	r2,r16,1007270 <__sfvwrite_r+0x94>
 100726c:	100f883a 	mov	r7,r2
 1007270:	90c00917 	ldw	r3,36(r18)
 1007274:	183ee83a 	callr	r3
 1007278:	1007883a 	mov	r3,r2
 100727c:	80a1c83a 	sub	r16,r16,r2
 1007280:	88a3883a 	add	r17,r17,r2
 1007284:	00806d0e 	bge	zero,r2,100743c <__sfvwrite_r+0x260>
 1007288:	b0800217 	ldw	r2,8(r22)
 100728c:	10c5c83a 	sub	r2,r2,r3
 1007290:	b0800215 	stw	r2,8(r22)
 1007294:	103fee1e 	bne	r2,zero,1007250 <__sfvwrite_r+0x74>
 1007298:	0009883a 	mov	r4,zero
 100729c:	2005883a 	mov	r2,r4
 10072a0:	dfc00a17 	ldw	ra,40(sp)
 10072a4:	df000917 	ldw	fp,36(sp)
 10072a8:	ddc00817 	ldw	r23,32(sp)
 10072ac:	dd800717 	ldw	r22,28(sp)
 10072b0:	dd400617 	ldw	r21,24(sp)
 10072b4:	dd000517 	ldw	r20,20(sp)
 10072b8:	dcc00417 	ldw	r19,16(sp)
 10072bc:	dc800317 	ldw	r18,12(sp)
 10072c0:	dc400217 	ldw	r17,8(sp)
 10072c4:	dc000117 	ldw	r16,4(sp)
 10072c8:	dec00b04 	addi	sp,sp,44
 10072cc:	f800283a 	ret
 10072d0:	1004e480 	call	1004e48 <__swsetup_r>
 10072d4:	1000e41e 	bne	r2,zero,1007668 <__sfvwrite_r+0x48c>
 10072d8:	91c0030b 	ldhu	r7,12(r18)
 10072dc:	b5400017 	ldw	r21,0(r22)
 10072e0:	3880008c 	andi	r2,r7,2
 10072e4:	103fd81e 	bne	r2,zero,1007248 <__sfvwrite_r+0x6c>
 10072e8:	3880004c 	andi	r2,r7,1
 10072ec:	1005003a 	cmpeq	r2,r2,zero
 10072f0:	10005726 	beq	r2,zero,1007450 <__sfvwrite_r+0x274>
 10072f4:	0029883a 	mov	r20,zero
 10072f8:	002f883a 	mov	r23,zero
 10072fc:	a0004226 	beq	r20,zero,1007408 <__sfvwrite_r+0x22c>
 1007300:	3880800c 	andi	r2,r7,512
 1007304:	94000217 	ldw	r16,8(r18)
 1007308:	10008b26 	beq	r2,zero,1007538 <__sfvwrite_r+0x35c>
 100730c:	800d883a 	mov	r6,r16
 1007310:	a400a536 	bltu	r20,r16,10075a8 <__sfvwrite_r+0x3cc>
 1007314:	3881200c 	andi	r2,r7,1152
 1007318:	10002726 	beq	r2,zero,10073b8 <__sfvwrite_r+0x1dc>
 100731c:	90800517 	ldw	r2,20(r18)
 1007320:	92000417 	ldw	r8,16(r18)
 1007324:	91400017 	ldw	r5,0(r18)
 1007328:	1087883a 	add	r3,r2,r2
 100732c:	1887883a 	add	r3,r3,r2
 1007330:	1808d7fa 	srli	r4,r3,31
 1007334:	2a21c83a 	sub	r16,r5,r8
 1007338:	80800044 	addi	r2,r16,1
 100733c:	20c9883a 	add	r4,r4,r3
 1007340:	2027d07a 	srai	r19,r4,1
 1007344:	a085883a 	add	r2,r20,r2
 1007348:	980d883a 	mov	r6,r19
 100734c:	9880022e 	bgeu	r19,r2,1007358 <__sfvwrite_r+0x17c>
 1007350:	1027883a 	mov	r19,r2
 1007354:	100d883a 	mov	r6,r2
 1007358:	3881000c 	andi	r2,r7,1024
 100735c:	1000b826 	beq	r2,zero,1007640 <__sfvwrite_r+0x464>
 1007360:	300b883a 	mov	r5,r6
 1007364:	e009883a 	mov	r4,fp
 1007368:	1007abc0 	call	1007abc <_malloc_r>
 100736c:	10003126 	beq	r2,zero,1007434 <__sfvwrite_r+0x258>
 1007370:	91400417 	ldw	r5,16(r18)
 1007374:	1009883a 	mov	r4,r2
 1007378:	800d883a 	mov	r6,r16
 100737c:	1023883a 	mov	r17,r2
 1007380:	10082f80 	call	10082f8 <memcpy>
 1007384:	90c0030b 	ldhu	r3,12(r18)
 1007388:	00beffc4 	movi	r2,-1025
 100738c:	1886703a 	and	r3,r3,r2
 1007390:	18c02014 	ori	r3,r3,128
 1007394:	90c0030d 	sth	r3,12(r18)
 1007398:	9c07c83a 	sub	r3,r19,r16
 100739c:	8c05883a 	add	r2,r17,r16
 10073a0:	a00d883a 	mov	r6,r20
 10073a4:	a021883a 	mov	r16,r20
 10073a8:	90800015 	stw	r2,0(r18)
 10073ac:	90c00215 	stw	r3,8(r18)
 10073b0:	94400415 	stw	r17,16(r18)
 10073b4:	94c00515 	stw	r19,20(r18)
 10073b8:	91000017 	ldw	r4,0(r18)
 10073bc:	b80b883a 	mov	r5,r23
 10073c0:	a023883a 	mov	r17,r20
 10073c4:	10083a40 	call	10083a4 <memmove>
 10073c8:	90c00217 	ldw	r3,8(r18)
 10073cc:	90800017 	ldw	r2,0(r18)
 10073d0:	a027883a 	mov	r19,r20
 10073d4:	1c07c83a 	sub	r3,r3,r16
 10073d8:	1405883a 	add	r2,r2,r16
 10073dc:	90c00215 	stw	r3,8(r18)
 10073e0:	a021883a 	mov	r16,r20
 10073e4:	90800015 	stw	r2,0(r18)
 10073e8:	b0800217 	ldw	r2,8(r22)
 10073ec:	1405c83a 	sub	r2,r2,r16
 10073f0:	b0800215 	stw	r2,8(r22)
 10073f4:	103fa826 	beq	r2,zero,1007298 <__sfvwrite_r+0xbc>
 10073f8:	a469c83a 	sub	r20,r20,r17
 10073fc:	91c0030b 	ldhu	r7,12(r18)
 1007400:	bcef883a 	add	r23,r23,r19
 1007404:	a03fbe1e 	bne	r20,zero,1007300 <__sfvwrite_r+0x124>
 1007408:	adc00017 	ldw	r23,0(r21)
 100740c:	ad000117 	ldw	r20,4(r21)
 1007410:	ad400204 	addi	r21,r21,8
 1007414:	003fb906 	br	10072fc <__sfvwrite_r+0x120>
 1007418:	ac400017 	ldw	r17,0(r21)
 100741c:	ac000117 	ldw	r16,4(r21)
 1007420:	ad400204 	addi	r21,r21,8
 1007424:	003f8a06 	br	1007250 <__sfvwrite_r+0x74>
 1007428:	91400417 	ldw	r5,16(r18)
 100742c:	e009883a 	mov	r4,fp
 1007430:	1006ebc0 	call	1006ebc <_free_r>
 1007434:	00800304 	movi	r2,12
 1007438:	e0800015 	stw	r2,0(fp)
 100743c:	9080030b 	ldhu	r2,12(r18)
 1007440:	013fffc4 	movi	r4,-1
 1007444:	10801014 	ori	r2,r2,64
 1007448:	9080030d 	sth	r2,12(r18)
 100744c:	003f9306 	br	100729c <__sfvwrite_r+0xc0>
 1007450:	0027883a 	mov	r19,zero
 1007454:	002f883a 	mov	r23,zero
 1007458:	d8000015 	stw	zero,0(sp)
 100745c:	0029883a 	mov	r20,zero
 1007460:	98001e26 	beq	r19,zero,10074dc <__sfvwrite_r+0x300>
 1007464:	d8c00017 	ldw	r3,0(sp)
 1007468:	1804c03a 	cmpne	r2,r3,zero
 100746c:	10005e26 	beq	r2,zero,10075e8 <__sfvwrite_r+0x40c>
 1007470:	9821883a 	mov	r16,r19
 1007474:	a4c0012e 	bgeu	r20,r19,100747c <__sfvwrite_r+0x2a0>
 1007478:	a021883a 	mov	r16,r20
 100747c:	91000017 	ldw	r4,0(r18)
 1007480:	90800417 	ldw	r2,16(r18)
 1007484:	91800217 	ldw	r6,8(r18)
 1007488:	91c00517 	ldw	r7,20(r18)
 100748c:	1100022e 	bgeu	r2,r4,1007498 <__sfvwrite_r+0x2bc>
 1007490:	31e3883a 	add	r17,r6,r7
 1007494:	8c001616 	blt	r17,r16,10074f0 <__sfvwrite_r+0x314>
 1007498:	81c03816 	blt	r16,r7,100757c <__sfvwrite_r+0x3a0>
 100749c:	90c00917 	ldw	r3,36(r18)
 10074a0:	91400717 	ldw	r5,28(r18)
 10074a4:	e009883a 	mov	r4,fp
 10074a8:	b80d883a 	mov	r6,r23
 10074ac:	183ee83a 	callr	r3
 10074b0:	1023883a 	mov	r17,r2
 10074b4:	00bfe10e 	bge	zero,r2,100743c <__sfvwrite_r+0x260>
 10074b8:	a469c83a 	sub	r20,r20,r17
 10074bc:	a0001826 	beq	r20,zero,1007520 <__sfvwrite_r+0x344>
 10074c0:	b0800217 	ldw	r2,8(r22)
 10074c4:	1445c83a 	sub	r2,r2,r17
 10074c8:	b0800215 	stw	r2,8(r22)
 10074cc:	103f7226 	beq	r2,zero,1007298 <__sfvwrite_r+0xbc>
 10074d0:	9c67c83a 	sub	r19,r19,r17
 10074d4:	bc6f883a 	add	r23,r23,r17
 10074d8:	983fe21e 	bne	r19,zero,1007464 <__sfvwrite_r+0x288>
 10074dc:	adc00017 	ldw	r23,0(r21)
 10074e0:	acc00117 	ldw	r19,4(r21)
 10074e4:	ad400204 	addi	r21,r21,8
 10074e8:	d8000015 	stw	zero,0(sp)
 10074ec:	003fdc06 	br	1007460 <__sfvwrite_r+0x284>
 10074f0:	b80b883a 	mov	r5,r23
 10074f4:	880d883a 	mov	r6,r17
 10074f8:	10083a40 	call	10083a4 <memmove>
 10074fc:	90c00017 	ldw	r3,0(r18)
 1007500:	e009883a 	mov	r4,fp
 1007504:	900b883a 	mov	r5,r18
 1007508:	1c47883a 	add	r3,r3,r17
 100750c:	90c00015 	stw	r3,0(r18)
 1007510:	10067a00 	call	10067a0 <_fflush_r>
 1007514:	103fc91e 	bne	r2,zero,100743c <__sfvwrite_r+0x260>
 1007518:	a469c83a 	sub	r20,r20,r17
 100751c:	a03fe81e 	bne	r20,zero,10074c0 <__sfvwrite_r+0x2e4>
 1007520:	e009883a 	mov	r4,fp
 1007524:	900b883a 	mov	r5,r18
 1007528:	10067a00 	call	10067a0 <_fflush_r>
 100752c:	103fc31e 	bne	r2,zero,100743c <__sfvwrite_r+0x260>
 1007530:	d8000015 	stw	zero,0(sp)
 1007534:	003fe206 	br	10074c0 <__sfvwrite_r+0x2e4>
 1007538:	91000017 	ldw	r4,0(r18)
 100753c:	90800417 	ldw	r2,16(r18)
 1007540:	1100022e 	bgeu	r2,r4,100754c <__sfvwrite_r+0x370>
 1007544:	8023883a 	mov	r17,r16
 1007548:	85003136 	bltu	r16,r20,1007610 <__sfvwrite_r+0x434>
 100754c:	91c00517 	ldw	r7,20(r18)
 1007550:	a1c01836 	bltu	r20,r7,10075b4 <__sfvwrite_r+0x3d8>
 1007554:	90c00917 	ldw	r3,36(r18)
 1007558:	91400717 	ldw	r5,28(r18)
 100755c:	e009883a 	mov	r4,fp
 1007560:	b80d883a 	mov	r6,r23
 1007564:	183ee83a 	callr	r3
 1007568:	1021883a 	mov	r16,r2
 100756c:	00bfb30e 	bge	zero,r2,100743c <__sfvwrite_r+0x260>
 1007570:	1023883a 	mov	r17,r2
 1007574:	1027883a 	mov	r19,r2
 1007578:	003f9b06 	br	10073e8 <__sfvwrite_r+0x20c>
 100757c:	b80b883a 	mov	r5,r23
 1007580:	800d883a 	mov	r6,r16
 1007584:	10083a40 	call	10083a4 <memmove>
 1007588:	90c00217 	ldw	r3,8(r18)
 100758c:	90800017 	ldw	r2,0(r18)
 1007590:	8023883a 	mov	r17,r16
 1007594:	1c07c83a 	sub	r3,r3,r16
 1007598:	1405883a 	add	r2,r2,r16
 100759c:	90c00215 	stw	r3,8(r18)
 10075a0:	90800015 	stw	r2,0(r18)
 10075a4:	003fc406 	br	10074b8 <__sfvwrite_r+0x2dc>
 10075a8:	a00d883a 	mov	r6,r20
 10075ac:	a021883a 	mov	r16,r20
 10075b0:	003f8106 	br	10073b8 <__sfvwrite_r+0x1dc>
 10075b4:	b80b883a 	mov	r5,r23
 10075b8:	a00d883a 	mov	r6,r20
 10075bc:	10083a40 	call	10083a4 <memmove>
 10075c0:	90c00217 	ldw	r3,8(r18)
 10075c4:	90800017 	ldw	r2,0(r18)
 10075c8:	a021883a 	mov	r16,r20
 10075cc:	1d07c83a 	sub	r3,r3,r20
 10075d0:	1505883a 	add	r2,r2,r20
 10075d4:	a023883a 	mov	r17,r20
 10075d8:	a027883a 	mov	r19,r20
 10075dc:	90c00215 	stw	r3,8(r18)
 10075e0:	90800015 	stw	r2,0(r18)
 10075e4:	003f8006 	br	10073e8 <__sfvwrite_r+0x20c>
 10075e8:	b809883a 	mov	r4,r23
 10075ec:	01400284 	movi	r5,10
 10075f0:	980d883a 	mov	r6,r19
 10075f4:	10082080 	call	1008208 <memchr>
 10075f8:	10001726 	beq	r2,zero,1007658 <__sfvwrite_r+0x47c>
 10075fc:	15c5c83a 	sub	r2,r2,r23
 1007600:	15000044 	addi	r20,r2,1
 1007604:	00800044 	movi	r2,1
 1007608:	d8800015 	stw	r2,0(sp)
 100760c:	003f9806 	br	1007470 <__sfvwrite_r+0x294>
 1007610:	b80b883a 	mov	r5,r23
 1007614:	800d883a 	mov	r6,r16
 1007618:	10083a40 	call	10083a4 <memmove>
 100761c:	90c00017 	ldw	r3,0(r18)
 1007620:	e009883a 	mov	r4,fp
 1007624:	900b883a 	mov	r5,r18
 1007628:	1c07883a 	add	r3,r3,r16
 100762c:	90c00015 	stw	r3,0(r18)
 1007630:	8027883a 	mov	r19,r16
 1007634:	10067a00 	call	10067a0 <_fflush_r>
 1007638:	103f6b26 	beq	r2,zero,10073e8 <__sfvwrite_r+0x20c>
 100763c:	003f7f06 	br	100743c <__sfvwrite_r+0x260>
 1007640:	400b883a 	mov	r5,r8
 1007644:	e009883a 	mov	r4,fp
 1007648:	10098ac0 	call	10098ac <_realloc_r>
 100764c:	103f7626 	beq	r2,zero,1007428 <__sfvwrite_r+0x24c>
 1007650:	1023883a 	mov	r17,r2
 1007654:	003f5006 	br	1007398 <__sfvwrite_r+0x1bc>
 1007658:	00c00044 	movi	r3,1
 100765c:	9d000044 	addi	r20,r19,1
 1007660:	d8c00015 	stw	r3,0(sp)
 1007664:	003f8206 	br	1007470 <__sfvwrite_r+0x294>
 1007668:	9080030b 	ldhu	r2,12(r18)
 100766c:	00c00244 	movi	r3,9
 1007670:	013fffc4 	movi	r4,-1
 1007674:	10801014 	ori	r2,r2,64
 1007678:	9080030d 	sth	r2,12(r18)
 100767c:	e0c00015 	stw	r3,0(fp)
 1007680:	003f0606 	br	100729c <__sfvwrite_r+0xc0>

01007684 <_fwalk_reent>:
 1007684:	f811883a 	mov	r8,ra
 1007688:	100c3d80 	call	100c3d8 <_mcount>
 100768c:	403f883a 	mov	ra,r8
 1007690:	defff704 	addi	sp,sp,-36
 1007694:	dfc00815 	stw	ra,32(sp)
 1007698:	ddc00715 	stw	r23,28(sp)
 100769c:	dd800615 	stw	r22,24(sp)
 10076a0:	dd400515 	stw	r21,20(sp)
 10076a4:	dd000415 	stw	r20,16(sp)
 10076a8:	dcc00315 	stw	r19,12(sp)
 10076ac:	dc800215 	stw	r18,8(sp)
 10076b0:	dc400115 	stw	r17,4(sp)
 10076b4:	dc000015 	stw	r16,0(sp)
 10076b8:	24c0b804 	addi	r19,r4,736
 10076bc:	202b883a 	mov	r21,r4
 10076c0:	282d883a 	mov	r22,r5
 10076c4:	1006a4c0 	call	1006a4c <__sfp_lock_acquire>
 10076c8:	98002126 	beq	r19,zero,1007750 <_fwalk_reent+0xcc>
 10076cc:	002f883a 	mov	r23,zero
 10076d0:	9c800117 	ldw	r18,4(r19)
 10076d4:	9c000217 	ldw	r16,8(r19)
 10076d8:	90bfffc4 	addi	r2,r18,-1
 10076dc:	10000d16 	blt	r2,zero,1007714 <_fwalk_reent+0x90>
 10076e0:	0023883a 	mov	r17,zero
 10076e4:	053fffc4 	movi	r20,-1
 10076e8:	8080030f 	ldh	r2,12(r16)
 10076ec:	8c400044 	addi	r17,r17,1
 10076f0:	10000626 	beq	r2,zero,100770c <_fwalk_reent+0x88>
 10076f4:	8080038f 	ldh	r2,14(r16)
 10076f8:	800b883a 	mov	r5,r16
 10076fc:	a809883a 	mov	r4,r21
 1007700:	15000226 	beq	r2,r20,100770c <_fwalk_reent+0x88>
 1007704:	b03ee83a 	callr	r22
 1007708:	b8aeb03a 	or	r23,r23,r2
 100770c:	84001704 	addi	r16,r16,92
 1007710:	947ff51e 	bne	r18,r17,10076e8 <_fwalk_reent+0x64>
 1007714:	9cc00017 	ldw	r19,0(r19)
 1007718:	983fed1e 	bne	r19,zero,10076d0 <_fwalk_reent+0x4c>
 100771c:	1006a5c0 	call	1006a5c <__sfp_lock_release>
 1007720:	b805883a 	mov	r2,r23
 1007724:	dfc00817 	ldw	ra,32(sp)
 1007728:	ddc00717 	ldw	r23,28(sp)
 100772c:	dd800617 	ldw	r22,24(sp)
 1007730:	dd400517 	ldw	r21,20(sp)
 1007734:	dd000417 	ldw	r20,16(sp)
 1007738:	dcc00317 	ldw	r19,12(sp)
 100773c:	dc800217 	ldw	r18,8(sp)
 1007740:	dc400117 	ldw	r17,4(sp)
 1007744:	dc000017 	ldw	r16,0(sp)
 1007748:	dec00904 	addi	sp,sp,36
 100774c:	f800283a 	ret
 1007750:	002f883a 	mov	r23,zero
 1007754:	003ff106 	br	100771c <_fwalk_reent+0x98>

01007758 <_fwalk>:
 1007758:	f811883a 	mov	r8,ra
 100775c:	100c3d80 	call	100c3d8 <_mcount>
 1007760:	403f883a 	mov	ra,r8
 1007764:	defff804 	addi	sp,sp,-32
 1007768:	dfc00715 	stw	ra,28(sp)
 100776c:	dd800615 	stw	r22,24(sp)
 1007770:	dd400515 	stw	r21,20(sp)
 1007774:	dd000415 	stw	r20,16(sp)
 1007778:	dcc00315 	stw	r19,12(sp)
 100777c:	dc800215 	stw	r18,8(sp)
 1007780:	dc400115 	stw	r17,4(sp)
 1007784:	dc000015 	stw	r16,0(sp)
 1007788:	24c0b804 	addi	r19,r4,736
 100778c:	282b883a 	mov	r21,r5
 1007790:	1006a4c0 	call	1006a4c <__sfp_lock_acquire>
 1007794:	98001f26 	beq	r19,zero,1007814 <_fwalk+0xbc>
 1007798:	002d883a 	mov	r22,zero
 100779c:	9c800117 	ldw	r18,4(r19)
 10077a0:	9c000217 	ldw	r16,8(r19)
 10077a4:	90bfffc4 	addi	r2,r18,-1
 10077a8:	10000c16 	blt	r2,zero,10077dc <_fwalk+0x84>
 10077ac:	0023883a 	mov	r17,zero
 10077b0:	053fffc4 	movi	r20,-1
 10077b4:	8080030f 	ldh	r2,12(r16)
 10077b8:	8c400044 	addi	r17,r17,1
 10077bc:	10000526 	beq	r2,zero,10077d4 <_fwalk+0x7c>
 10077c0:	8080038f 	ldh	r2,14(r16)
 10077c4:	8009883a 	mov	r4,r16
 10077c8:	15000226 	beq	r2,r20,10077d4 <_fwalk+0x7c>
 10077cc:	a83ee83a 	callr	r21
 10077d0:	b0acb03a 	or	r22,r22,r2
 10077d4:	84001704 	addi	r16,r16,92
 10077d8:	947ff61e 	bne	r18,r17,10077b4 <_fwalk+0x5c>
 10077dc:	9cc00017 	ldw	r19,0(r19)
 10077e0:	983fee1e 	bne	r19,zero,100779c <_fwalk+0x44>
 10077e4:	1006a5c0 	call	1006a5c <__sfp_lock_release>
 10077e8:	b005883a 	mov	r2,r22
 10077ec:	dfc00717 	ldw	ra,28(sp)
 10077f0:	dd800617 	ldw	r22,24(sp)
 10077f4:	dd400517 	ldw	r21,20(sp)
 10077f8:	dd000417 	ldw	r20,16(sp)
 10077fc:	dcc00317 	ldw	r19,12(sp)
 1007800:	dc800217 	ldw	r18,8(sp)
 1007804:	dc400117 	ldw	r17,4(sp)
 1007808:	dc000017 	ldw	r16,0(sp)
 100780c:	dec00804 	addi	sp,sp,32
 1007810:	f800283a 	ret
 1007814:	002d883a 	mov	r22,zero
 1007818:	003ff206 	br	10077e4 <_fwalk+0x8c>

0100781c <__locale_charset>:
 100781c:	f811883a 	mov	r8,ra
 1007820:	100c3d80 	call	100c3d8 <_mcount>
 1007824:	403f883a 	mov	ra,r8
 1007828:	d0a00417 	ldw	r2,-32752(gp)
 100782c:	f800283a 	ret

01007830 <_localeconv_r>:
 1007830:	f811883a 	mov	r8,ra
 1007834:	100c3d80 	call	100c3d8 <_mcount>
 1007838:	403f883a 	mov	ra,r8
 100783c:	008040b4 	movhi	r2,258
 1007840:	10a81504 	addi	r2,r2,-24492
 1007844:	f800283a 	ret

01007848 <localeconv>:
 1007848:	f811883a 	mov	r8,ra
 100784c:	100c3d80 	call	100c3d8 <_mcount>
 1007850:	403f883a 	mov	ra,r8
 1007854:	008040f4 	movhi	r2,259
 1007858:	10a00704 	addi	r2,r2,-32740
 100785c:	11000017 	ldw	r4,0(r2)
 1007860:	10078301 	jmpi	1007830 <_localeconv_r>

01007864 <_setlocale_r>:
 1007864:	f811883a 	mov	r8,ra
 1007868:	100c3d80 	call	100c3d8 <_mcount>
 100786c:	403f883a 	mov	ra,r8
 1007870:	defffc04 	addi	sp,sp,-16
 1007874:	dfc00315 	stw	ra,12(sp)
 1007878:	dc800215 	stw	r18,8(sp)
 100787c:	dc400115 	stw	r17,4(sp)
 1007880:	dc000015 	stw	r16,0(sp)
 1007884:	00c040b4 	movhi	r3,258
 1007888:	18e81004 	addi	r3,r3,-24512
 100788c:	2023883a 	mov	r17,r4
 1007890:	2825883a 	mov	r18,r5
 1007894:	3021883a 	mov	r16,r6
 1007898:	3009883a 	mov	r4,r6
 100789c:	180b883a 	mov	r5,r3
 10078a0:	30000926 	beq	r6,zero,10078c8 <_setlocale_r+0x64>
 10078a4:	100a12c0 	call	100a12c <strcmp>
 10078a8:	8009883a 	mov	r4,r16
 10078ac:	014040b4 	movhi	r5,258
 10078b0:	2967fb04 	addi	r5,r5,-24596
 10078b4:	10000b1e 	bne	r2,zero,10078e4 <_setlocale_r+0x80>
 10078b8:	8c000d15 	stw	r16,52(r17)
 10078bc:	8c800c15 	stw	r18,48(r17)
 10078c0:	00c040b4 	movhi	r3,258
 10078c4:	18e81004 	addi	r3,r3,-24512
 10078c8:	1805883a 	mov	r2,r3
 10078cc:	dfc00317 	ldw	ra,12(sp)
 10078d0:	dc800217 	ldw	r18,8(sp)
 10078d4:	dc400117 	ldw	r17,4(sp)
 10078d8:	dc000017 	ldw	r16,0(sp)
 10078dc:	dec00404 	addi	sp,sp,16
 10078e0:	f800283a 	ret
 10078e4:	100a12c0 	call	100a12c <strcmp>
 10078e8:	0007883a 	mov	r3,zero
 10078ec:	103ff226 	beq	r2,zero,10078b8 <_setlocale_r+0x54>
 10078f0:	003ff506 	br	10078c8 <_setlocale_r+0x64>

010078f4 <setlocale>:
 10078f4:	f811883a 	mov	r8,ra
 10078f8:	100c3d80 	call	100c3d8 <_mcount>
 10078fc:	403f883a 	mov	ra,r8
 1007900:	018040f4 	movhi	r6,259
 1007904:	31a00704 	addi	r6,r6,-32740
 1007908:	2007883a 	mov	r3,r4
 100790c:	31000017 	ldw	r4,0(r6)
 1007910:	280d883a 	mov	r6,r5
 1007914:	180b883a 	mov	r5,r3
 1007918:	10078641 	jmpi	1007864 <_setlocale_r>

0100791c <__smakebuf_r>:
 100791c:	f811883a 	mov	r8,ra
 1007920:	100c3d80 	call	100c3d8 <_mcount>
 1007924:	403f883a 	mov	ra,r8
 1007928:	deffed04 	addi	sp,sp,-76
 100792c:	dfc01215 	stw	ra,72(sp)
 1007930:	dc801115 	stw	r18,68(sp)
 1007934:	dc401015 	stw	r17,64(sp)
 1007938:	dc000f15 	stw	r16,60(sp)
 100793c:	2880030b 	ldhu	r2,12(r5)
 1007940:	2821883a 	mov	r16,r5
 1007944:	2023883a 	mov	r17,r4
 1007948:	1080008c 	andi	r2,r2,2
 100794c:	10000b26 	beq	r2,zero,100797c <__smakebuf_r+0x60>
 1007950:	28c010c4 	addi	r3,r5,67
 1007954:	00800044 	movi	r2,1
 1007958:	28800515 	stw	r2,20(r5)
 100795c:	28c00415 	stw	r3,16(r5)
 1007960:	28c00015 	stw	r3,0(r5)
 1007964:	dfc01217 	ldw	ra,72(sp)
 1007968:	dc801117 	ldw	r18,68(sp)
 100796c:	dc401017 	ldw	r17,64(sp)
 1007970:	dc000f17 	ldw	r16,60(sp)
 1007974:	dec01304 	addi	sp,sp,76
 1007978:	f800283a 	ret
 100797c:	2940038f 	ldh	r5,14(r5)
 1007980:	28002116 	blt	r5,zero,1007a08 <__smakebuf_r+0xec>
 1007984:	d80d883a 	mov	r6,sp
 1007988:	100a6680 	call	100a668 <_fstat_r>
 100798c:	10001e16 	blt	r2,zero,1007a08 <__smakebuf_r+0xec>
 1007990:	d8800117 	ldw	r2,4(sp)
 1007994:	00e00014 	movui	r3,32768
 1007998:	113c000c 	andi	r4,r2,61440
 100799c:	20c03126 	beq	r4,r3,1007a64 <__smakebuf_r+0x148>
 10079a0:	8080030b 	ldhu	r2,12(r16)
 10079a4:	00c80004 	movi	r3,8192
 10079a8:	10820014 	ori	r2,r2,2048
 10079ac:	8080030d 	sth	r2,12(r16)
 10079b0:	20c01e26 	beq	r4,r3,1007a2c <__smakebuf_r+0x110>
 10079b4:	04810004 	movi	r18,1024
 10079b8:	8809883a 	mov	r4,r17
 10079bc:	900b883a 	mov	r5,r18
 10079c0:	1007abc0 	call	1007abc <_malloc_r>
 10079c4:	1009883a 	mov	r4,r2
 10079c8:	10003126 	beq	r2,zero,1007a90 <__smakebuf_r+0x174>
 10079cc:	80c0030b 	ldhu	r3,12(r16)
 10079d0:	00804034 	movhi	r2,256
 10079d4:	109aeb04 	addi	r2,r2,27564
 10079d8:	88800f15 	stw	r2,60(r17)
 10079dc:	18c02014 	ori	r3,r3,128
 10079e0:	84800515 	stw	r18,20(r16)
 10079e4:	80c0030d 	sth	r3,12(r16)
 10079e8:	81000415 	stw	r4,16(r16)
 10079ec:	81000015 	stw	r4,0(r16)
 10079f0:	dfc01217 	ldw	ra,72(sp)
 10079f4:	dc801117 	ldw	r18,68(sp)
 10079f8:	dc401017 	ldw	r17,64(sp)
 10079fc:	dc000f17 	ldw	r16,60(sp)
 1007a00:	dec01304 	addi	sp,sp,76
 1007a04:	f800283a 	ret
 1007a08:	80c0030b 	ldhu	r3,12(r16)
 1007a0c:	1880200c 	andi	r2,r3,128
 1007a10:	10000426 	beq	r2,zero,1007a24 <__smakebuf_r+0x108>
 1007a14:	04801004 	movi	r18,64
 1007a18:	18820014 	ori	r2,r3,2048
 1007a1c:	8080030d 	sth	r2,12(r16)
 1007a20:	003fe506 	br	10079b8 <__smakebuf_r+0x9c>
 1007a24:	04810004 	movi	r18,1024
 1007a28:	003ffb06 	br	1007a18 <__smakebuf_r+0xfc>
 1007a2c:	8140038f 	ldh	r5,14(r16)
 1007a30:	8809883a 	mov	r4,r17
 1007a34:	100a6e80 	call	100a6e8 <_isatty_r>
 1007a38:	103fde26 	beq	r2,zero,10079b4 <__smakebuf_r+0x98>
 1007a3c:	8080030b 	ldhu	r2,12(r16)
 1007a40:	80c010c4 	addi	r3,r16,67
 1007a44:	04810004 	movi	r18,1024
 1007a48:	10800054 	ori	r2,r2,1
 1007a4c:	8080030d 	sth	r2,12(r16)
 1007a50:	00800044 	movi	r2,1
 1007a54:	80c00415 	stw	r3,16(r16)
 1007a58:	80800515 	stw	r2,20(r16)
 1007a5c:	80c00015 	stw	r3,0(r16)
 1007a60:	003fd506 	br	10079b8 <__smakebuf_r+0x9c>
 1007a64:	80c00a17 	ldw	r3,40(r16)
 1007a68:	00804074 	movhi	r2,257
 1007a6c:	10a7f104 	addi	r2,r2,-24636
 1007a70:	18bfcb1e 	bne	r3,r2,10079a0 <__smakebuf_r+0x84>
 1007a74:	8080030b 	ldhu	r2,12(r16)
 1007a78:	00c10004 	movi	r3,1024
 1007a7c:	1825883a 	mov	r18,r3
 1007a80:	10c4b03a 	or	r2,r2,r3
 1007a84:	8080030d 	sth	r2,12(r16)
 1007a88:	80c01315 	stw	r3,76(r16)
 1007a8c:	003fca06 	br	10079b8 <__smakebuf_r+0x9c>
 1007a90:	8100030b 	ldhu	r4,12(r16)
 1007a94:	2080800c 	andi	r2,r4,512
 1007a98:	103fb21e 	bne	r2,zero,1007964 <__smakebuf_r+0x48>
 1007a9c:	80c010c4 	addi	r3,r16,67
 1007aa0:	21000094 	ori	r4,r4,2
 1007aa4:	00800044 	movi	r2,1
 1007aa8:	80800515 	stw	r2,20(r16)
 1007aac:	8100030d 	sth	r4,12(r16)
 1007ab0:	80c00415 	stw	r3,16(r16)
 1007ab4:	80c00015 	stw	r3,0(r16)
 1007ab8:	003faa06 	br	1007964 <__smakebuf_r+0x48>

01007abc <_malloc_r>:
 1007abc:	f811883a 	mov	r8,ra
 1007ac0:	100c3d80 	call	100c3d8 <_mcount>
 1007ac4:	403f883a 	mov	ra,r8
 1007ac8:	defff604 	addi	sp,sp,-40
 1007acc:	dfc00915 	stw	ra,36(sp)
 1007ad0:	df000815 	stw	fp,32(sp)
 1007ad4:	ddc00715 	stw	r23,28(sp)
 1007ad8:	dd800615 	stw	r22,24(sp)
 1007adc:	dd400515 	stw	r21,20(sp)
 1007ae0:	dd000415 	stw	r20,16(sp)
 1007ae4:	dcc00315 	stw	r19,12(sp)
 1007ae8:	dc800215 	stw	r18,8(sp)
 1007aec:	dc400115 	stw	r17,4(sp)
 1007af0:	dc000015 	stw	r16,0(sp)
 1007af4:	00800584 	movi	r2,22
 1007af8:	28c002c4 	addi	r3,r5,11
 1007afc:	2025883a 	mov	r18,r4
 1007b00:	10c01236 	bltu	r2,r3,1007b4c <_malloc_r+0x90>
 1007b04:	04400404 	movi	r17,16
 1007b08:	8940142e 	bgeu	r17,r5,1007b5c <_malloc_r+0xa0>
 1007b0c:	00800304 	movi	r2,12
 1007b10:	0007883a 	mov	r3,zero
 1007b14:	90800015 	stw	r2,0(r18)
 1007b18:	1805883a 	mov	r2,r3
 1007b1c:	dfc00917 	ldw	ra,36(sp)
 1007b20:	df000817 	ldw	fp,32(sp)
 1007b24:	ddc00717 	ldw	r23,28(sp)
 1007b28:	dd800617 	ldw	r22,24(sp)
 1007b2c:	dd400517 	ldw	r21,20(sp)
 1007b30:	dd000417 	ldw	r20,16(sp)
 1007b34:	dcc00317 	ldw	r19,12(sp)
 1007b38:	dc800217 	ldw	r18,8(sp)
 1007b3c:	dc400117 	ldw	r17,4(sp)
 1007b40:	dc000017 	ldw	r16,0(sp)
 1007b44:	dec00a04 	addi	sp,sp,40
 1007b48:	f800283a 	ret
 1007b4c:	00bffe04 	movi	r2,-8
 1007b50:	18a2703a 	and	r17,r3,r2
 1007b54:	883fed16 	blt	r17,zero,1007b0c <_malloc_r+0x50>
 1007b58:	897fec36 	bltu	r17,r5,1007b0c <_malloc_r+0x50>
 1007b5c:	9009883a 	mov	r4,r18
 1007b60:	100cbcc0 	call	100cbcc <__malloc_lock>
 1007b64:	00807dc4 	movi	r2,503
 1007b68:	14402b2e 	bgeu	r2,r17,1007c18 <_malloc_r+0x15c>
 1007b6c:	8806d27a 	srli	r3,r17,9
 1007b70:	18003f1e 	bne	r3,zero,1007c70 <_malloc_r+0x1b4>
 1007b74:	880cd0fa 	srli	r6,r17,3
 1007b78:	300490fa 	slli	r2,r6,3
 1007b7c:	02c040b4 	movhi	r11,258
 1007b80:	5ada3c04 	addi	r11,r11,26864
 1007b84:	12cb883a 	add	r5,r2,r11
 1007b88:	2c000317 	ldw	r16,12(r5)
 1007b8c:	580f883a 	mov	r7,r11
 1007b90:	2c00041e 	bne	r5,r16,1007ba4 <_malloc_r+0xe8>
 1007b94:	00000a06 	br	1007bc0 <_malloc_r+0x104>
 1007b98:	1800860e 	bge	r3,zero,1007db4 <_malloc_r+0x2f8>
 1007b9c:	84000317 	ldw	r16,12(r16)
 1007ba0:	2c000726 	beq	r5,r16,1007bc0 <_malloc_r+0x104>
 1007ba4:	80800117 	ldw	r2,4(r16)
 1007ba8:	00ffff04 	movi	r3,-4
 1007bac:	10c8703a 	and	r4,r2,r3
 1007bb0:	2447c83a 	sub	r3,r4,r17
 1007bb4:	008003c4 	movi	r2,15
 1007bb8:	10fff70e 	bge	r2,r3,1007b98 <_malloc_r+0xdc>
 1007bbc:	31bfffc4 	addi	r6,r6,-1
 1007bc0:	32400044 	addi	r9,r6,1
 1007bc4:	028040b4 	movhi	r10,258
 1007bc8:	529a3e04 	addi	r10,r10,26872
 1007bcc:	54000217 	ldw	r16,8(r10)
 1007bd0:	8280a026 	beq	r16,r10,1007e54 <_malloc_r+0x398>
 1007bd4:	80800117 	ldw	r2,4(r16)
 1007bd8:	00ffff04 	movi	r3,-4
 1007bdc:	10ca703a 	and	r5,r2,r3
 1007be0:	2c4dc83a 	sub	r6,r5,r17
 1007be4:	008003c4 	movi	r2,15
 1007be8:	11808316 	blt	r2,r6,1007df8 <_malloc_r+0x33c>
 1007bec:	52800315 	stw	r10,12(r10)
 1007bf0:	52800215 	stw	r10,8(r10)
 1007bf4:	30002916 	blt	r6,zero,1007c9c <_malloc_r+0x1e0>
 1007bf8:	8147883a 	add	r3,r16,r5
 1007bfc:	18800117 	ldw	r2,4(r3)
 1007c00:	9009883a 	mov	r4,r18
 1007c04:	10800054 	ori	r2,r2,1
 1007c08:	18800115 	stw	r2,4(r3)
 1007c0c:	100cce00 	call	100cce0 <__malloc_unlock>
 1007c10:	80c00204 	addi	r3,r16,8
 1007c14:	003fc006 	br	1007b18 <_malloc_r+0x5c>
 1007c18:	02c040b4 	movhi	r11,258
 1007c1c:	5ada3c04 	addi	r11,r11,26864
 1007c20:	8ac5883a 	add	r2,r17,r11
 1007c24:	14000317 	ldw	r16,12(r2)
 1007c28:	580f883a 	mov	r7,r11
 1007c2c:	8806d0fa 	srli	r3,r17,3
 1007c30:	14006c26 	beq	r2,r16,1007de4 <_malloc_r+0x328>
 1007c34:	80c00117 	ldw	r3,4(r16)
 1007c38:	00bfff04 	movi	r2,-4
 1007c3c:	81800317 	ldw	r6,12(r16)
 1007c40:	1886703a 	and	r3,r3,r2
 1007c44:	80c7883a 	add	r3,r16,r3
 1007c48:	18800117 	ldw	r2,4(r3)
 1007c4c:	81400217 	ldw	r5,8(r16)
 1007c50:	9009883a 	mov	r4,r18
 1007c54:	10800054 	ori	r2,r2,1
 1007c58:	18800115 	stw	r2,4(r3)
 1007c5c:	31400215 	stw	r5,8(r6)
 1007c60:	29800315 	stw	r6,12(r5)
 1007c64:	100cce00 	call	100cce0 <__malloc_unlock>
 1007c68:	80c00204 	addi	r3,r16,8
 1007c6c:	003faa06 	br	1007b18 <_malloc_r+0x5c>
 1007c70:	00800104 	movi	r2,4
 1007c74:	10c0052e 	bgeu	r2,r3,1007c8c <_malloc_r+0x1d0>
 1007c78:	00800504 	movi	r2,20
 1007c7c:	10c07836 	bltu	r2,r3,1007e60 <_malloc_r+0x3a4>
 1007c80:	198016c4 	addi	r6,r3,91
 1007c84:	300490fa 	slli	r2,r6,3
 1007c88:	003fbc06 	br	1007b7c <_malloc_r+0xc0>
 1007c8c:	8804d1ba 	srli	r2,r17,6
 1007c90:	11800e04 	addi	r6,r2,56
 1007c94:	300490fa 	slli	r2,r6,3
 1007c98:	003fb806 	br	1007b7c <_malloc_r+0xc0>
 1007c9c:	00807fc4 	movi	r2,511
 1007ca0:	1140bb36 	bltu	r2,r5,1007f90 <_malloc_r+0x4d4>
 1007ca4:	2806d0fa 	srli	r3,r5,3
 1007ca8:	573ffe04 	addi	fp,r10,-8
 1007cac:	00800044 	movi	r2,1
 1007cb0:	180890fa 	slli	r4,r3,3
 1007cb4:	1807d0ba 	srai	r3,r3,2
 1007cb8:	e1c00117 	ldw	r7,4(fp)
 1007cbc:	5909883a 	add	r4,r11,r4
 1007cc0:	21400217 	ldw	r5,8(r4)
 1007cc4:	10c4983a 	sll	r2,r2,r3
 1007cc8:	81000315 	stw	r4,12(r16)
 1007ccc:	81400215 	stw	r5,8(r16)
 1007cd0:	388eb03a 	or	r7,r7,r2
 1007cd4:	2c000315 	stw	r16,12(r5)
 1007cd8:	24000215 	stw	r16,8(r4)
 1007cdc:	e1c00115 	stw	r7,4(fp)
 1007ce0:	4807883a 	mov	r3,r9
 1007ce4:	4800cd16 	blt	r9,zero,100801c <_malloc_r+0x560>
 1007ce8:	1807d0ba 	srai	r3,r3,2
 1007cec:	00800044 	movi	r2,1
 1007cf0:	10c8983a 	sll	r4,r2,r3
 1007cf4:	39004436 	bltu	r7,r4,1007e08 <_malloc_r+0x34c>
 1007cf8:	21c4703a 	and	r2,r4,r7
 1007cfc:	10000a1e 	bne	r2,zero,1007d28 <_malloc_r+0x26c>
 1007d00:	2109883a 	add	r4,r4,r4
 1007d04:	00bfff04 	movi	r2,-4
 1007d08:	4884703a 	and	r2,r9,r2
 1007d0c:	3906703a 	and	r3,r7,r4
 1007d10:	12400104 	addi	r9,r2,4
 1007d14:	1800041e 	bne	r3,zero,1007d28 <_malloc_r+0x26c>
 1007d18:	2109883a 	add	r4,r4,r4
 1007d1c:	3904703a 	and	r2,r7,r4
 1007d20:	4a400104 	addi	r9,r9,4
 1007d24:	103ffc26 	beq	r2,zero,1007d18 <_malloc_r+0x25c>
 1007d28:	480490fa 	slli	r2,r9,3
 1007d2c:	4819883a 	mov	r12,r9
 1007d30:	023fff04 	movi	r8,-4
 1007d34:	589b883a 	add	r13,r11,r2
 1007d38:	6807883a 	mov	r3,r13
 1007d3c:	014003c4 	movi	r5,15
 1007d40:	1c000317 	ldw	r16,12(r3)
 1007d44:	1c00041e 	bne	r3,r16,1007d58 <_malloc_r+0x29c>
 1007d48:	0000a706 	br	1007fe8 <_malloc_r+0x52c>
 1007d4c:	3000ab0e 	bge	r6,zero,1007ffc <_malloc_r+0x540>
 1007d50:	84000317 	ldw	r16,12(r16)
 1007d54:	1c00a426 	beq	r3,r16,1007fe8 <_malloc_r+0x52c>
 1007d58:	80800117 	ldw	r2,4(r16)
 1007d5c:	1204703a 	and	r2,r2,r8
 1007d60:	144dc83a 	sub	r6,r2,r17
 1007d64:	29bff90e 	bge	r5,r6,1007d4c <_malloc_r+0x290>
 1007d68:	81000317 	ldw	r4,12(r16)
 1007d6c:	80c00217 	ldw	r3,8(r16)
 1007d70:	89400054 	ori	r5,r17,1
 1007d74:	8445883a 	add	r2,r16,r17
 1007d78:	20c00215 	stw	r3,8(r4)
 1007d7c:	19000315 	stw	r4,12(r3)
 1007d80:	81400115 	stw	r5,4(r16)
 1007d84:	1187883a 	add	r3,r2,r6
 1007d88:	31000054 	ori	r4,r6,1
 1007d8c:	50800315 	stw	r2,12(r10)
 1007d90:	50800215 	stw	r2,8(r10)
 1007d94:	19800015 	stw	r6,0(r3)
 1007d98:	11000115 	stw	r4,4(r2)
 1007d9c:	12800215 	stw	r10,8(r2)
 1007da0:	12800315 	stw	r10,12(r2)
 1007da4:	9009883a 	mov	r4,r18
 1007da8:	100cce00 	call	100cce0 <__malloc_unlock>
 1007dac:	80c00204 	addi	r3,r16,8
 1007db0:	003f5906 	br	1007b18 <_malloc_r+0x5c>
 1007db4:	8109883a 	add	r4,r16,r4
 1007db8:	20800117 	ldw	r2,4(r4)
 1007dbc:	80c00217 	ldw	r3,8(r16)
 1007dc0:	81400317 	ldw	r5,12(r16)
 1007dc4:	10800054 	ori	r2,r2,1
 1007dc8:	20800115 	stw	r2,4(r4)
 1007dcc:	28c00215 	stw	r3,8(r5)
 1007dd0:	19400315 	stw	r5,12(r3)
 1007dd4:	9009883a 	mov	r4,r18
 1007dd8:	100cce00 	call	100cce0 <__malloc_unlock>
 1007ddc:	80c00204 	addi	r3,r16,8
 1007de0:	003f4d06 	br	1007b18 <_malloc_r+0x5c>
 1007de4:	80800204 	addi	r2,r16,8
 1007de8:	14000317 	ldw	r16,12(r2)
 1007dec:	143f911e 	bne	r2,r16,1007c34 <_malloc_r+0x178>
 1007df0:	1a400084 	addi	r9,r3,2
 1007df4:	003f7306 	br	1007bc4 <_malloc_r+0x108>
 1007df8:	88c00054 	ori	r3,r17,1
 1007dfc:	8445883a 	add	r2,r16,r17
 1007e00:	80c00115 	stw	r3,4(r16)
 1007e04:	003fdf06 	br	1007d84 <_malloc_r+0x2c8>
 1007e08:	e4000217 	ldw	r16,8(fp)
 1007e0c:	00bfff04 	movi	r2,-4
 1007e10:	80c00117 	ldw	r3,4(r16)
 1007e14:	802d883a 	mov	r22,r16
 1007e18:	18aa703a 	and	r21,r3,r2
 1007e1c:	ac401636 	bltu	r21,r17,1007e78 <_malloc_r+0x3bc>
 1007e20:	ac49c83a 	sub	r4,r21,r17
 1007e24:	008003c4 	movi	r2,15
 1007e28:	1100130e 	bge	r2,r4,1007e78 <_malloc_r+0x3bc>
 1007e2c:	88800054 	ori	r2,r17,1
 1007e30:	8447883a 	add	r3,r16,r17
 1007e34:	80800115 	stw	r2,4(r16)
 1007e38:	20800054 	ori	r2,r4,1
 1007e3c:	18800115 	stw	r2,4(r3)
 1007e40:	e0c00215 	stw	r3,8(fp)
 1007e44:	9009883a 	mov	r4,r18
 1007e48:	100cce00 	call	100cce0 <__malloc_unlock>
 1007e4c:	80c00204 	addi	r3,r16,8
 1007e50:	003f3106 	br	1007b18 <_malloc_r+0x5c>
 1007e54:	39c00117 	ldw	r7,4(r7)
 1007e58:	573ffe04 	addi	fp,r10,-8
 1007e5c:	003fa006 	br	1007ce0 <_malloc_r+0x224>
 1007e60:	00801504 	movi	r2,84
 1007e64:	10c06736 	bltu	r2,r3,1008004 <_malloc_r+0x548>
 1007e68:	8804d33a 	srli	r2,r17,12
 1007e6c:	11801b84 	addi	r6,r2,110
 1007e70:	300490fa 	slli	r2,r6,3
 1007e74:	003f4106 	br	1007b7c <_malloc_r+0xc0>
 1007e78:	d0975117 	ldw	r2,23876(gp)
 1007e7c:	d0e00617 	ldw	r3,-32744(gp)
 1007e80:	053fffc4 	movi	r20,-1
 1007e84:	10800404 	addi	r2,r2,16
 1007e88:	88a7883a 	add	r19,r17,r2
 1007e8c:	1d000326 	beq	r3,r20,1007e9c <_malloc_r+0x3e0>
 1007e90:	98c3ffc4 	addi	r3,r19,4095
 1007e94:	00bc0004 	movi	r2,-4096
 1007e98:	18a6703a 	and	r19,r3,r2
 1007e9c:	9009883a 	mov	r4,r18
 1007ea0:	980b883a 	mov	r5,r19
 1007ea4:	1009f340 	call	1009f34 <_sbrk_r>
 1007ea8:	1009883a 	mov	r4,r2
 1007eac:	15000426 	beq	r2,r20,1007ec0 <_malloc_r+0x404>
 1007eb0:	854b883a 	add	r5,r16,r21
 1007eb4:	1029883a 	mov	r20,r2
 1007eb8:	11405a2e 	bgeu	r2,r5,1008024 <_malloc_r+0x568>
 1007ebc:	87000c26 	beq	r16,fp,1007ef0 <_malloc_r+0x434>
 1007ec0:	e4000217 	ldw	r16,8(fp)
 1007ec4:	80c00117 	ldw	r3,4(r16)
 1007ec8:	00bfff04 	movi	r2,-4
 1007ecc:	1884703a 	and	r2,r3,r2
 1007ed0:	14400336 	bltu	r2,r17,1007ee0 <_malloc_r+0x424>
 1007ed4:	1449c83a 	sub	r4,r2,r17
 1007ed8:	008003c4 	movi	r2,15
 1007edc:	113fd316 	blt	r2,r4,1007e2c <_malloc_r+0x370>
 1007ee0:	9009883a 	mov	r4,r18
 1007ee4:	100cce00 	call	100cce0 <__malloc_unlock>
 1007ee8:	0007883a 	mov	r3,zero
 1007eec:	003f0a06 	br	1007b18 <_malloc_r+0x5c>
 1007ef0:	05c040f4 	movhi	r23,259
 1007ef4:	bdd78c04 	addi	r23,r23,24112
 1007ef8:	b8800017 	ldw	r2,0(r23)
 1007efc:	988d883a 	add	r6,r19,r2
 1007f00:	b9800015 	stw	r6,0(r23)
 1007f04:	d0e00617 	ldw	r3,-32744(gp)
 1007f08:	00bfffc4 	movi	r2,-1
 1007f0c:	18808e26 	beq	r3,r2,1008148 <_malloc_r+0x68c>
 1007f10:	2145c83a 	sub	r2,r4,r5
 1007f14:	3085883a 	add	r2,r6,r2
 1007f18:	b8800015 	stw	r2,0(r23)
 1007f1c:	20c001cc 	andi	r3,r4,7
 1007f20:	18005f1e 	bne	r3,zero,10080a0 <_malloc_r+0x5e4>
 1007f24:	000b883a 	mov	r5,zero
 1007f28:	a4c5883a 	add	r2,r20,r19
 1007f2c:	1083ffcc 	andi	r2,r2,4095
 1007f30:	00c40004 	movi	r3,4096
 1007f34:	1887c83a 	sub	r3,r3,r2
 1007f38:	28e7883a 	add	r19,r5,r3
 1007f3c:	9009883a 	mov	r4,r18
 1007f40:	980b883a 	mov	r5,r19
 1007f44:	1009f340 	call	1009f34 <_sbrk_r>
 1007f48:	1007883a 	mov	r3,r2
 1007f4c:	00bfffc4 	movi	r2,-1
 1007f50:	18807a26 	beq	r3,r2,100813c <_malloc_r+0x680>
 1007f54:	1d05c83a 	sub	r2,r3,r20
 1007f58:	9885883a 	add	r2,r19,r2
 1007f5c:	10c00054 	ori	r3,r2,1
 1007f60:	b8800017 	ldw	r2,0(r23)
 1007f64:	a021883a 	mov	r16,r20
 1007f68:	a0c00115 	stw	r3,4(r20)
 1007f6c:	9885883a 	add	r2,r19,r2
 1007f70:	b8800015 	stw	r2,0(r23)
 1007f74:	e5000215 	stw	r20,8(fp)
 1007f78:	b7003626 	beq	r22,fp,1008054 <_malloc_r+0x598>
 1007f7c:	018003c4 	movi	r6,15
 1007f80:	35404b36 	bltu	r6,r21,10080b0 <_malloc_r+0x5f4>
 1007f84:	00800044 	movi	r2,1
 1007f88:	a0800115 	stw	r2,4(r20)
 1007f8c:	003fcd06 	br	1007ec4 <_malloc_r+0x408>
 1007f90:	2808d27a 	srli	r4,r5,9
 1007f94:	2000371e 	bne	r4,zero,1008074 <_malloc_r+0x5b8>
 1007f98:	2808d0fa 	srli	r4,r5,3
 1007f9c:	200690fa 	slli	r3,r4,3
 1007fa0:	1ad1883a 	add	r8,r3,r11
 1007fa4:	41800217 	ldw	r6,8(r8)
 1007fa8:	41805b26 	beq	r8,r6,1008118 <_malloc_r+0x65c>
 1007fac:	30800117 	ldw	r2,4(r6)
 1007fb0:	00ffff04 	movi	r3,-4
 1007fb4:	10c4703a 	and	r2,r2,r3
 1007fb8:	2880022e 	bgeu	r5,r2,1007fc4 <_malloc_r+0x508>
 1007fbc:	31800217 	ldw	r6,8(r6)
 1007fc0:	41bffa1e 	bne	r8,r6,1007fac <_malloc_r+0x4f0>
 1007fc4:	32000317 	ldw	r8,12(r6)
 1007fc8:	39c00117 	ldw	r7,4(r7)
 1007fcc:	82000315 	stw	r8,12(r16)
 1007fd0:	81800215 	stw	r6,8(r16)
 1007fd4:	070040b4 	movhi	fp,258
 1007fd8:	e71a3c04 	addi	fp,fp,26864
 1007fdc:	34000315 	stw	r16,12(r6)
 1007fe0:	44000215 	stw	r16,8(r8)
 1007fe4:	003f3e06 	br	1007ce0 <_malloc_r+0x224>
 1007fe8:	63000044 	addi	r12,r12,1
 1007fec:	608000cc 	andi	r2,r12,3
 1007ff0:	10005d26 	beq	r2,zero,1008168 <_malloc_r+0x6ac>
 1007ff4:	18c00204 	addi	r3,r3,8
 1007ff8:	003f5106 	br	1007d40 <_malloc_r+0x284>
 1007ffc:	8089883a 	add	r4,r16,r2
 1008000:	003f6d06 	br	1007db8 <_malloc_r+0x2fc>
 1008004:	00805504 	movi	r2,340
 1008008:	10c02036 	bltu	r2,r3,100808c <_malloc_r+0x5d0>
 100800c:	8804d3fa 	srli	r2,r17,15
 1008010:	11801dc4 	addi	r6,r2,119
 1008014:	300490fa 	slli	r2,r6,3
 1008018:	003ed806 	br	1007b7c <_malloc_r+0xc0>
 100801c:	48c000c4 	addi	r3,r9,3
 1008020:	003f3106 	br	1007ce8 <_malloc_r+0x22c>
 1008024:	05c040f4 	movhi	r23,259
 1008028:	bdd78c04 	addi	r23,r23,24112
 100802c:	b8800017 	ldw	r2,0(r23)
 1008030:	988d883a 	add	r6,r19,r2
 1008034:	b9800015 	stw	r6,0(r23)
 1008038:	293fb21e 	bne	r5,r4,1007f04 <_malloc_r+0x448>
 100803c:	2083ffcc 	andi	r2,r4,4095
 1008040:	103fb01e 	bne	r2,zero,1007f04 <_malloc_r+0x448>
 1008044:	e4000217 	ldw	r16,8(fp)
 1008048:	9d45883a 	add	r2,r19,r21
 100804c:	10800054 	ori	r2,r2,1
 1008050:	80800115 	stw	r2,4(r16)
 1008054:	b8c00017 	ldw	r3,0(r23)
 1008058:	d0975217 	ldw	r2,23880(gp)
 100805c:	10c0012e 	bgeu	r2,r3,1008064 <_malloc_r+0x5a8>
 1008060:	d0d75215 	stw	r3,23880(gp)
 1008064:	d0975317 	ldw	r2,23884(gp)
 1008068:	10ff962e 	bgeu	r2,r3,1007ec4 <_malloc_r+0x408>
 100806c:	d0d75315 	stw	r3,23884(gp)
 1008070:	003f9406 	br	1007ec4 <_malloc_r+0x408>
 1008074:	00800104 	movi	r2,4
 1008078:	11001e36 	bltu	r2,r4,10080f4 <_malloc_r+0x638>
 100807c:	2804d1ba 	srli	r2,r5,6
 1008080:	11000e04 	addi	r4,r2,56
 1008084:	200690fa 	slli	r3,r4,3
 1008088:	003fc506 	br	1007fa0 <_malloc_r+0x4e4>
 100808c:	00815504 	movi	r2,1364
 1008090:	10c01d2e 	bgeu	r2,r3,1008108 <_malloc_r+0x64c>
 1008094:	01801f84 	movi	r6,126
 1008098:	0080fc04 	movi	r2,1008
 100809c:	003eb706 	br	1007b7c <_malloc_r+0xc0>
 10080a0:	00800204 	movi	r2,8
 10080a4:	10cbc83a 	sub	r5,r2,r3
 10080a8:	2169883a 	add	r20,r4,r5
 10080ac:	003f9e06 	br	1007f28 <_malloc_r+0x46c>
 10080b0:	00bffe04 	movi	r2,-8
 10080b4:	a93ffd04 	addi	r4,r21,-12
 10080b8:	2088703a 	and	r4,r4,r2
 10080bc:	b10b883a 	add	r5,r22,r4
 10080c0:	00c00144 	movi	r3,5
 10080c4:	28c00215 	stw	r3,8(r5)
 10080c8:	28c00115 	stw	r3,4(r5)
 10080cc:	b0800117 	ldw	r2,4(r22)
 10080d0:	1080004c 	andi	r2,r2,1
 10080d4:	2084b03a 	or	r2,r4,r2
 10080d8:	b0800115 	stw	r2,4(r22)
 10080dc:	313fdd2e 	bgeu	r6,r4,1008054 <_malloc_r+0x598>
 10080e0:	b1400204 	addi	r5,r22,8
 10080e4:	9009883a 	mov	r4,r18
 10080e8:	1006ebc0 	call	1006ebc <_free_r>
 10080ec:	e4000217 	ldw	r16,8(fp)
 10080f0:	003fd806 	br	1008054 <_malloc_r+0x598>
 10080f4:	00800504 	movi	r2,20
 10080f8:	11001536 	bltu	r2,r4,1008150 <_malloc_r+0x694>
 10080fc:	210016c4 	addi	r4,r4,91
 1008100:	200690fa 	slli	r3,r4,3
 1008104:	003fa606 	br	1007fa0 <_malloc_r+0x4e4>
 1008108:	8804d4ba 	srli	r2,r17,18
 100810c:	11801f04 	addi	r6,r2,124
 1008110:	300490fa 	slli	r2,r6,3
 1008114:	003e9906 	br	1007b7c <_malloc_r+0xc0>
 1008118:	2009d0ba 	srai	r4,r4,2
 100811c:	014040b4 	movhi	r5,258
 1008120:	295a3c04 	addi	r5,r5,26864
 1008124:	00c00044 	movi	r3,1
 1008128:	28800117 	ldw	r2,4(r5)
 100812c:	1906983a 	sll	r3,r3,r4
 1008130:	10c4b03a 	or	r2,r2,r3
 1008134:	28800115 	stw	r2,4(r5)
 1008138:	003fa306 	br	1007fc8 <_malloc_r+0x50c>
 100813c:	0027883a 	mov	r19,zero
 1008140:	00c00044 	movi	r3,1
 1008144:	003f8606 	br	1007f60 <_malloc_r+0x4a4>
 1008148:	d1200615 	stw	r4,-32744(gp)
 100814c:	003f7306 	br	1007f1c <_malloc_r+0x460>
 1008150:	00801504 	movi	r2,84
 1008154:	11001936 	bltu	r2,r4,10081bc <_malloc_r+0x700>
 1008158:	2804d33a 	srli	r2,r5,12
 100815c:	11001b84 	addi	r4,r2,110
 1008160:	200690fa 	slli	r3,r4,3
 1008164:	003f8e06 	br	1007fa0 <_malloc_r+0x4e4>
 1008168:	480b883a 	mov	r5,r9
 100816c:	6807883a 	mov	r3,r13
 1008170:	288000cc 	andi	r2,r5,3
 1008174:	18fffe04 	addi	r3,r3,-8
 1008178:	297fffc4 	addi	r5,r5,-1
 100817c:	10001526 	beq	r2,zero,10081d4 <_malloc_r+0x718>
 1008180:	18800217 	ldw	r2,8(r3)
 1008184:	10fffa26 	beq	r2,r3,1008170 <_malloc_r+0x6b4>
 1008188:	2109883a 	add	r4,r4,r4
 100818c:	393f1e36 	bltu	r7,r4,1007e08 <_malloc_r+0x34c>
 1008190:	203f1d26 	beq	r4,zero,1007e08 <_malloc_r+0x34c>
 1008194:	21c4703a 	and	r2,r4,r7
 1008198:	10000226 	beq	r2,zero,10081a4 <_malloc_r+0x6e8>
 100819c:	6013883a 	mov	r9,r12
 10081a0:	003ee106 	br	1007d28 <_malloc_r+0x26c>
 10081a4:	2109883a 	add	r4,r4,r4
 10081a8:	3904703a 	and	r2,r7,r4
 10081ac:	63000104 	addi	r12,r12,4
 10081b0:	103ffc26 	beq	r2,zero,10081a4 <_malloc_r+0x6e8>
 10081b4:	6013883a 	mov	r9,r12
 10081b8:	003edb06 	br	1007d28 <_malloc_r+0x26c>
 10081bc:	00805504 	movi	r2,340
 10081c0:	11000836 	bltu	r2,r4,10081e4 <_malloc_r+0x728>
 10081c4:	2804d3fa 	srli	r2,r5,15
 10081c8:	11001dc4 	addi	r4,r2,119
 10081cc:	200690fa 	slli	r3,r4,3
 10081d0:	003f7306 	br	1007fa0 <_malloc_r+0x4e4>
 10081d4:	0104303a 	nor	r2,zero,r4
 10081d8:	388e703a 	and	r7,r7,r2
 10081dc:	e1c00115 	stw	r7,4(fp)
 10081e0:	003fe906 	br	1008188 <_malloc_r+0x6cc>
 10081e4:	00815504 	movi	r2,1364
 10081e8:	1100032e 	bgeu	r2,r4,10081f8 <_malloc_r+0x73c>
 10081ec:	01001f84 	movi	r4,126
 10081f0:	00c0fc04 	movi	r3,1008
 10081f4:	003f6a06 	br	1007fa0 <_malloc_r+0x4e4>
 10081f8:	2804d4ba 	srli	r2,r5,18
 10081fc:	11001f04 	addi	r4,r2,124
 1008200:	200690fa 	slli	r3,r4,3
 1008204:	003f6606 	br	1007fa0 <_malloc_r+0x4e4>

01008208 <memchr>:
 1008208:	f811883a 	mov	r8,ra
 100820c:	100c3d80 	call	100c3d8 <_mcount>
 1008210:	403f883a 	mov	ra,r8
 1008214:	008000c4 	movi	r2,3
 1008218:	29403fcc 	andi	r5,r5,255
 100821c:	2007883a 	mov	r3,r4
 1008220:	1180022e 	bgeu	r2,r6,100822c <memchr+0x24>
 1008224:	2084703a 	and	r2,r4,r2
 1008228:	10000b26 	beq	r2,zero,1008258 <memchr+0x50>
 100822c:	313fffc4 	addi	r4,r6,-1
 1008230:	3000051e 	bne	r6,zero,1008248 <memchr+0x40>
 1008234:	00002c06 	br	10082e8 <memchr+0xe0>
 1008238:	213fffc4 	addi	r4,r4,-1
 100823c:	00bfffc4 	movi	r2,-1
 1008240:	18c00044 	addi	r3,r3,1
 1008244:	20802826 	beq	r4,r2,10082e8 <memchr+0xe0>
 1008248:	18800003 	ldbu	r2,0(r3)
 100824c:	28bffa1e 	bne	r5,r2,1008238 <memchr+0x30>
 1008250:	1805883a 	mov	r2,r3
 1008254:	f800283a 	ret
 1008258:	0011883a 	mov	r8,zero
 100825c:	0007883a 	mov	r3,zero
 1008260:	01c00104 	movi	r7,4
 1008264:	4004923a 	slli	r2,r8,8
 1008268:	18c00044 	addi	r3,r3,1
 100826c:	1151883a 	add	r8,r2,r5
 1008270:	19fffc1e 	bne	r3,r7,1008264 <memchr+0x5c>
 1008274:	02bfbff4 	movhi	r10,65279
 1008278:	52bfbfc4 	addi	r10,r10,-257
 100827c:	02602074 	movhi	r9,32897
 1008280:	4a602004 	addi	r9,r9,-32640
 1008284:	02c000c4 	movi	r11,3
 1008288:	20800017 	ldw	r2,0(r4)
 100828c:	31bfff04 	addi	r6,r6,-4
 1008290:	200f883a 	mov	r7,r4
 1008294:	1204f03a 	xor	r2,r2,r8
 1008298:	1287883a 	add	r3,r2,r10
 100829c:	1a46703a 	and	r3,r3,r9
 10082a0:	0084303a 	nor	r2,zero,r2
 10082a4:	10c4703a 	and	r2,r2,r3
 10082a8:	10000b26 	beq	r2,zero,10082d8 <memchr+0xd0>
 10082ac:	20800003 	ldbu	r2,0(r4)
 10082b0:	28800f26 	beq	r5,r2,10082f0 <memchr+0xe8>
 10082b4:	20800043 	ldbu	r2,1(r4)
 10082b8:	21c00044 	addi	r7,r4,1
 10082bc:	28800c26 	beq	r5,r2,10082f0 <memchr+0xe8>
 10082c0:	20800083 	ldbu	r2,2(r4)
 10082c4:	21c00084 	addi	r7,r4,2
 10082c8:	28800926 	beq	r5,r2,10082f0 <memchr+0xe8>
 10082cc:	208000c3 	ldbu	r2,3(r4)
 10082d0:	21c000c4 	addi	r7,r4,3
 10082d4:	28800626 	beq	r5,r2,10082f0 <memchr+0xe8>
 10082d8:	21000104 	addi	r4,r4,4
 10082dc:	59bfea36 	bltu	r11,r6,1008288 <memchr+0x80>
 10082e0:	2007883a 	mov	r3,r4
 10082e4:	003fd106 	br	100822c <memchr+0x24>
 10082e8:	0005883a 	mov	r2,zero
 10082ec:	f800283a 	ret
 10082f0:	3805883a 	mov	r2,r7
 10082f4:	f800283a 	ret

010082f8 <memcpy>:
 10082f8:	f811883a 	mov	r8,ra
 10082fc:	100c3d80 	call	100c3d8 <_mcount>
 1008300:	403f883a 	mov	ra,r8
 1008304:	01c003c4 	movi	r7,15
 1008308:	2007883a 	mov	r3,r4
 100830c:	3980032e 	bgeu	r7,r6,100831c <memcpy+0x24>
 1008310:	2904b03a 	or	r2,r5,r4
 1008314:	108000cc 	andi	r2,r2,3
 1008318:	10000926 	beq	r2,zero,1008340 <memcpy+0x48>
 100831c:	30000626 	beq	r6,zero,1008338 <memcpy+0x40>
 1008320:	30cd883a 	add	r6,r6,r3
 1008324:	28800003 	ldbu	r2,0(r5)
 1008328:	29400044 	addi	r5,r5,1
 100832c:	18800005 	stb	r2,0(r3)
 1008330:	18c00044 	addi	r3,r3,1
 1008334:	30fffb1e 	bne	r6,r3,1008324 <memcpy+0x2c>
 1008338:	2005883a 	mov	r2,r4
 100833c:	f800283a 	ret
 1008340:	3811883a 	mov	r8,r7
 1008344:	200f883a 	mov	r7,r4
 1008348:	28c00017 	ldw	r3,0(r5)
 100834c:	31bffc04 	addi	r6,r6,-16
 1008350:	38c00015 	stw	r3,0(r7)
 1008354:	28800117 	ldw	r2,4(r5)
 1008358:	38800115 	stw	r2,4(r7)
 100835c:	28c00217 	ldw	r3,8(r5)
 1008360:	38c00215 	stw	r3,8(r7)
 1008364:	28800317 	ldw	r2,12(r5)
 1008368:	29400404 	addi	r5,r5,16
 100836c:	38800315 	stw	r2,12(r7)
 1008370:	39c00404 	addi	r7,r7,16
 1008374:	41bff436 	bltu	r8,r6,1008348 <memcpy+0x50>
 1008378:	008000c4 	movi	r2,3
 100837c:	1180072e 	bgeu	r2,r6,100839c <memcpy+0xa4>
 1008380:	1007883a 	mov	r3,r2
 1008384:	28800017 	ldw	r2,0(r5)
 1008388:	31bfff04 	addi	r6,r6,-4
 100838c:	29400104 	addi	r5,r5,4
 1008390:	38800015 	stw	r2,0(r7)
 1008394:	39c00104 	addi	r7,r7,4
 1008398:	19bffa36 	bltu	r3,r6,1008384 <memcpy+0x8c>
 100839c:	3807883a 	mov	r3,r7
 10083a0:	003fde06 	br	100831c <memcpy+0x24>

010083a4 <memmove>:
 10083a4:	f811883a 	mov	r8,ra
 10083a8:	100c3d80 	call	100c3d8 <_mcount>
 10083ac:	403f883a 	mov	ra,r8
 10083b0:	2807883a 	mov	r3,r5
 10083b4:	2011883a 	mov	r8,r4
 10083b8:	29000c2e 	bgeu	r5,r4,10083ec <memmove+0x48>
 10083bc:	298f883a 	add	r7,r5,r6
 10083c0:	21c00a2e 	bgeu	r4,r7,10083ec <memmove+0x48>
 10083c4:	30000726 	beq	r6,zero,10083e4 <memmove+0x40>
 10083c8:	2187883a 	add	r3,r4,r6
 10083cc:	198dc83a 	sub	r6,r3,r6
 10083d0:	39ffffc4 	addi	r7,r7,-1
 10083d4:	38800003 	ldbu	r2,0(r7)
 10083d8:	18ffffc4 	addi	r3,r3,-1
 10083dc:	18800005 	stb	r2,0(r3)
 10083e0:	19bffb1e 	bne	r3,r6,10083d0 <memmove+0x2c>
 10083e4:	2005883a 	mov	r2,r4
 10083e8:	f800283a 	ret
 10083ec:	01c003c4 	movi	r7,15
 10083f0:	39800a36 	bltu	r7,r6,100841c <memmove+0x78>
 10083f4:	303ffb26 	beq	r6,zero,10083e4 <memmove+0x40>
 10083f8:	400f883a 	mov	r7,r8
 10083fc:	320d883a 	add	r6,r6,r8
 1008400:	28800003 	ldbu	r2,0(r5)
 1008404:	29400044 	addi	r5,r5,1
 1008408:	38800005 	stb	r2,0(r7)
 100840c:	39c00044 	addi	r7,r7,1
 1008410:	39bffb1e 	bne	r7,r6,1008400 <memmove+0x5c>
 1008414:	2005883a 	mov	r2,r4
 1008418:	f800283a 	ret
 100841c:	1904b03a 	or	r2,r3,r4
 1008420:	108000cc 	andi	r2,r2,3
 1008424:	103ff31e 	bne	r2,zero,10083f4 <memmove+0x50>
 1008428:	3811883a 	mov	r8,r7
 100842c:	180b883a 	mov	r5,r3
 1008430:	200f883a 	mov	r7,r4
 1008434:	28c00017 	ldw	r3,0(r5)
 1008438:	31bffc04 	addi	r6,r6,-16
 100843c:	38c00015 	stw	r3,0(r7)
 1008440:	28800117 	ldw	r2,4(r5)
 1008444:	38800115 	stw	r2,4(r7)
 1008448:	28c00217 	ldw	r3,8(r5)
 100844c:	38c00215 	stw	r3,8(r7)
 1008450:	28800317 	ldw	r2,12(r5)
 1008454:	29400404 	addi	r5,r5,16
 1008458:	38800315 	stw	r2,12(r7)
 100845c:	39c00404 	addi	r7,r7,16
 1008460:	41bff436 	bltu	r8,r6,1008434 <memmove+0x90>
 1008464:	008000c4 	movi	r2,3
 1008468:	1180072e 	bgeu	r2,r6,1008488 <memmove+0xe4>
 100846c:	1007883a 	mov	r3,r2
 1008470:	28800017 	ldw	r2,0(r5)
 1008474:	31bfff04 	addi	r6,r6,-4
 1008478:	29400104 	addi	r5,r5,4
 100847c:	38800015 	stw	r2,0(r7)
 1008480:	39c00104 	addi	r7,r7,4
 1008484:	19bffa36 	bltu	r3,r6,1008470 <memmove+0xcc>
 1008488:	3811883a 	mov	r8,r7
 100848c:	003fd906 	br	10083f4 <memmove+0x50>

01008490 <memset>:
 1008490:	f811883a 	mov	r8,ra
 1008494:	100c3d80 	call	100c3d8 <_mcount>
 1008498:	403f883a 	mov	ra,r8
 100849c:	008000c4 	movi	r2,3
 10084a0:	29403fcc 	andi	r5,r5,255
 10084a4:	2007883a 	mov	r3,r4
 10084a8:	1180022e 	bgeu	r2,r6,10084b4 <memset+0x24>
 10084ac:	2084703a 	and	r2,r4,r2
 10084b0:	10000826 	beq	r2,zero,10084d4 <memset+0x44>
 10084b4:	30000526 	beq	r6,zero,10084cc <memset+0x3c>
 10084b8:	2805883a 	mov	r2,r5
 10084bc:	30cd883a 	add	r6,r6,r3
 10084c0:	18800005 	stb	r2,0(r3)
 10084c4:	18c00044 	addi	r3,r3,1
 10084c8:	19bffd1e 	bne	r3,r6,10084c0 <memset+0x30>
 10084cc:	2005883a 	mov	r2,r4
 10084d0:	f800283a 	ret
 10084d4:	2804923a 	slli	r2,r5,8
 10084d8:	020003c4 	movi	r8,15
 10084dc:	200f883a 	mov	r7,r4
 10084e0:	2884b03a 	or	r2,r5,r2
 10084e4:	1006943a 	slli	r3,r2,16
 10084e8:	10c6b03a 	or	r3,r2,r3
 10084ec:	41800a2e 	bgeu	r8,r6,1008518 <memset+0x88>
 10084f0:	4005883a 	mov	r2,r8
 10084f4:	31bffc04 	addi	r6,r6,-16
 10084f8:	38c00015 	stw	r3,0(r7)
 10084fc:	38c00115 	stw	r3,4(r7)
 1008500:	38c00215 	stw	r3,8(r7)
 1008504:	38c00315 	stw	r3,12(r7)
 1008508:	39c00404 	addi	r7,r7,16
 100850c:	11bff936 	bltu	r2,r6,10084f4 <memset+0x64>
 1008510:	008000c4 	movi	r2,3
 1008514:	1180052e 	bgeu	r2,r6,100852c <memset+0x9c>
 1008518:	31bfff04 	addi	r6,r6,-4
 100851c:	008000c4 	movi	r2,3
 1008520:	38c00015 	stw	r3,0(r7)
 1008524:	39c00104 	addi	r7,r7,4
 1008528:	11bffb36 	bltu	r2,r6,1008518 <memset+0x88>
 100852c:	3807883a 	mov	r3,r7
 1008530:	003fe006 	br	10084b4 <memset+0x24>

01008534 <_Bfree>:
 1008534:	f811883a 	mov	r8,ra
 1008538:	100c3d80 	call	100c3d8 <_mcount>
 100853c:	403f883a 	mov	ra,r8
 1008540:	28000826 	beq	r5,zero,1008564 <_Bfree+0x30>
 1008544:	28800117 	ldw	r2,4(r5)
 1008548:	21001317 	ldw	r4,76(r4)
 100854c:	1085883a 	add	r2,r2,r2
 1008550:	1085883a 	add	r2,r2,r2
 1008554:	1105883a 	add	r2,r2,r4
 1008558:	10c00017 	ldw	r3,0(r2)
 100855c:	28c00015 	stw	r3,0(r5)
 1008560:	11400015 	stw	r5,0(r2)
 1008564:	f800283a 	ret

01008568 <__hi0bits>:
 1008568:	f811883a 	mov	r8,ra
 100856c:	100c3d80 	call	100c3d8 <_mcount>
 1008570:	403f883a 	mov	ra,r8
 1008574:	20bfffec 	andhi	r2,r4,65535
 1008578:	10001426 	beq	r2,zero,10085cc <__hi0bits+0x64>
 100857c:	0007883a 	mov	r3,zero
 1008580:	20bfc02c 	andhi	r2,r4,65280
 1008584:	1000021e 	bne	r2,zero,1008590 <__hi0bits+0x28>
 1008588:	2008923a 	slli	r4,r4,8
 100858c:	18c00204 	addi	r3,r3,8
 1008590:	20bc002c 	andhi	r2,r4,61440
 1008594:	1000021e 	bne	r2,zero,10085a0 <__hi0bits+0x38>
 1008598:	2008913a 	slli	r4,r4,4
 100859c:	18c00104 	addi	r3,r3,4
 10085a0:	20b0002c 	andhi	r2,r4,49152
 10085a4:	1000031e 	bne	r2,zero,10085b4 <__hi0bits+0x4c>
 10085a8:	2105883a 	add	r2,r4,r4
 10085ac:	18c00084 	addi	r3,r3,2
 10085b0:	1089883a 	add	r4,r2,r2
 10085b4:	20000316 	blt	r4,zero,10085c4 <__hi0bits+0x5c>
 10085b8:	2090002c 	andhi	r2,r4,16384
 10085bc:	10000626 	beq	r2,zero,10085d8 <__hi0bits+0x70>
 10085c0:	18c00044 	addi	r3,r3,1
 10085c4:	1805883a 	mov	r2,r3
 10085c8:	f800283a 	ret
 10085cc:	2008943a 	slli	r4,r4,16
 10085d0:	00c00404 	movi	r3,16
 10085d4:	003fea06 	br	1008580 <__hi0bits+0x18>
 10085d8:	00c00804 	movi	r3,32
 10085dc:	1805883a 	mov	r2,r3
 10085e0:	f800283a 	ret

010085e4 <__lo0bits>:
 10085e4:	f811883a 	mov	r8,ra
 10085e8:	100c3d80 	call	100c3d8 <_mcount>
 10085ec:	403f883a 	mov	ra,r8
 10085f0:	20c00017 	ldw	r3,0(r4)
 10085f4:	188001cc 	andi	r2,r3,7
 10085f8:	10000a26 	beq	r2,zero,1008624 <__lo0bits+0x40>
 10085fc:	1880004c 	andi	r2,r3,1
 1008600:	1005003a 	cmpeq	r2,r2,zero
 1008604:	10002126 	beq	r2,zero,100868c <__lo0bits+0xa8>
 1008608:	1880008c 	andi	r2,r3,2
 100860c:	1000251e 	bne	r2,zero,10086a4 <__lo0bits+0xc0>
 1008610:	1804d0ba 	srli	r2,r3,2
 1008614:	01400084 	movi	r5,2
 1008618:	20800015 	stw	r2,0(r4)
 100861c:	2805883a 	mov	r2,r5
 1008620:	f800283a 	ret
 1008624:	18bfffcc 	andi	r2,r3,65535
 1008628:	10001526 	beq	r2,zero,1008680 <__lo0bits+0x9c>
 100862c:	000b883a 	mov	r5,zero
 1008630:	18803fcc 	andi	r2,r3,255
 1008634:	1000021e 	bne	r2,zero,1008640 <__lo0bits+0x5c>
 1008638:	1806d23a 	srli	r3,r3,8
 100863c:	29400204 	addi	r5,r5,8
 1008640:	188003cc 	andi	r2,r3,15
 1008644:	1000021e 	bne	r2,zero,1008650 <__lo0bits+0x6c>
 1008648:	1806d13a 	srli	r3,r3,4
 100864c:	29400104 	addi	r5,r5,4
 1008650:	188000cc 	andi	r2,r3,3
 1008654:	1000021e 	bne	r2,zero,1008660 <__lo0bits+0x7c>
 1008658:	1806d0ba 	srli	r3,r3,2
 100865c:	29400084 	addi	r5,r5,2
 1008660:	1880004c 	andi	r2,r3,1
 1008664:	1000031e 	bne	r2,zero,1008674 <__lo0bits+0x90>
 1008668:	1806d07a 	srli	r3,r3,1
 100866c:	18000a26 	beq	r3,zero,1008698 <__lo0bits+0xb4>
 1008670:	29400044 	addi	r5,r5,1
 1008674:	2805883a 	mov	r2,r5
 1008678:	20c00015 	stw	r3,0(r4)
 100867c:	f800283a 	ret
 1008680:	1806d43a 	srli	r3,r3,16
 1008684:	01400404 	movi	r5,16
 1008688:	003fe906 	br	1008630 <__lo0bits+0x4c>
 100868c:	000b883a 	mov	r5,zero
 1008690:	2805883a 	mov	r2,r5
 1008694:	f800283a 	ret
 1008698:	01400804 	movi	r5,32
 100869c:	2805883a 	mov	r2,r5
 10086a0:	f800283a 	ret
 10086a4:	1804d07a 	srli	r2,r3,1
 10086a8:	01400044 	movi	r5,1
 10086ac:	20800015 	stw	r2,0(r4)
 10086b0:	003fda06 	br	100861c <__lo0bits+0x38>

010086b4 <__mcmp>:
 10086b4:	f811883a 	mov	r8,ra
 10086b8:	100c3d80 	call	100c3d8 <_mcount>
 10086bc:	403f883a 	mov	ra,r8
 10086c0:	20800417 	ldw	r2,16(r4)
 10086c4:	28c00417 	ldw	r3,16(r5)
 10086c8:	10cfc83a 	sub	r7,r2,r3
 10086cc:	38000c1e 	bne	r7,zero,1008700 <__mcmp+0x4c>
 10086d0:	18c5883a 	add	r2,r3,r3
 10086d4:	1085883a 	add	r2,r2,r2
 10086d8:	10c00504 	addi	r3,r2,20
 10086dc:	21000504 	addi	r4,r4,20
 10086e0:	28cb883a 	add	r5,r5,r3
 10086e4:	2085883a 	add	r2,r4,r2
 10086e8:	10bfff04 	addi	r2,r2,-4
 10086ec:	297fff04 	addi	r5,r5,-4
 10086f0:	11800017 	ldw	r6,0(r2)
 10086f4:	28c00017 	ldw	r3,0(r5)
 10086f8:	30c0031e 	bne	r6,r3,1008708 <__mcmp+0x54>
 10086fc:	20bffa36 	bltu	r4,r2,10086e8 <__mcmp+0x34>
 1008700:	3805883a 	mov	r2,r7
 1008704:	f800283a 	ret
 1008708:	30c00336 	bltu	r6,r3,1008718 <__mcmp+0x64>
 100870c:	01c00044 	movi	r7,1
 1008710:	3805883a 	mov	r2,r7
 1008714:	f800283a 	ret
 1008718:	01ffffc4 	movi	r7,-1
 100871c:	003ff806 	br	1008700 <__mcmp+0x4c>

01008720 <__ulp>:
 1008720:	f811883a 	mov	r8,ra
 1008724:	100c3d80 	call	100c3d8 <_mcount>
 1008728:	403f883a 	mov	ra,r8
 100872c:	013f3034 	movhi	r4,64704
 1008730:	295ffc2c 	andhi	r5,r5,32752
 1008734:	290b883a 	add	r5,r5,r4
 1008738:	0145c83a 	sub	r2,zero,r5
 100873c:	1007d53a 	srai	r3,r2,20
 1008740:	000d883a 	mov	r6,zero
 1008744:	0140040e 	bge	zero,r5,1008758 <__ulp+0x38>
 1008748:	280f883a 	mov	r7,r5
 100874c:	3807883a 	mov	r3,r7
 1008750:	3005883a 	mov	r2,r6
 1008754:	f800283a 	ret
 1008758:	008004c4 	movi	r2,19
 100875c:	193ffb04 	addi	r4,r3,-20
 1008760:	10c00c0e 	bge	r2,r3,1008794 <__ulp+0x74>
 1008764:	008007c4 	movi	r2,31
 1008768:	1107c83a 	sub	r3,r2,r4
 100876c:	00800784 	movi	r2,30
 1008770:	01400044 	movi	r5,1
 1008774:	11000216 	blt	r2,r4,1008780 <__ulp+0x60>
 1008778:	00800044 	movi	r2,1
 100877c:	10ca983a 	sll	r5,r2,r3
 1008780:	000f883a 	mov	r7,zero
 1008784:	280d883a 	mov	r6,r5
 1008788:	3807883a 	mov	r3,r7
 100878c:	3005883a 	mov	r2,r6
 1008790:	f800283a 	ret
 1008794:	00800234 	movhi	r2,8
 1008798:	10cfd83a 	sra	r7,r2,r3
 100879c:	000d883a 	mov	r6,zero
 10087a0:	3005883a 	mov	r2,r6
 10087a4:	3807883a 	mov	r3,r7
 10087a8:	f800283a 	ret

010087ac <__b2d>:
 10087ac:	f811883a 	mov	r8,ra
 10087b0:	100c3d80 	call	100c3d8 <_mcount>
 10087b4:	403f883a 	mov	ra,r8
 10087b8:	defff904 	addi	sp,sp,-28
 10087bc:	dfc00615 	stw	ra,24(sp)
 10087c0:	dd400515 	stw	r21,20(sp)
 10087c4:	dd000415 	stw	r20,16(sp)
 10087c8:	dcc00315 	stw	r19,12(sp)
 10087cc:	dc800215 	stw	r18,8(sp)
 10087d0:	dc400115 	stw	r17,4(sp)
 10087d4:	dc000015 	stw	r16,0(sp)
 10087d8:	20800417 	ldw	r2,16(r4)
 10087dc:	25000504 	addi	r20,r4,20
 10087e0:	2823883a 	mov	r17,r5
 10087e4:	1085883a 	add	r2,r2,r2
 10087e8:	1085883a 	add	r2,r2,r2
 10087ec:	a0a1883a 	add	r16,r20,r2
 10087f0:	857fff17 	ldw	r21,-4(r16)
 10087f4:	a809883a 	mov	r4,r21
 10087f8:	10085680 	call	1008568 <__hi0bits>
 10087fc:	100b883a 	mov	r5,r2
 1008800:	00800804 	movi	r2,32
 1008804:	1145c83a 	sub	r2,r2,r5
 1008808:	88800015 	stw	r2,0(r17)
 100880c:	00800284 	movi	r2,10
 1008810:	80ffff04 	addi	r3,r16,-4
 1008814:	11401416 	blt	r2,r5,1008868 <__b2d+0xbc>
 1008818:	008002c4 	movi	r2,11
 100881c:	1149c83a 	sub	r4,r2,r5
 1008820:	a0c02736 	bltu	r20,r3,10088c0 <__b2d+0x114>
 1008824:	000d883a 	mov	r6,zero
 1008828:	28800544 	addi	r2,r5,21
 100882c:	a906d83a 	srl	r3,r21,r4
 1008830:	a884983a 	sll	r2,r21,r2
 1008834:	1ccffc34 	orhi	r19,r3,16368
 1008838:	11a4b03a 	or	r18,r2,r6
 100883c:	9005883a 	mov	r2,r18
 1008840:	9807883a 	mov	r3,r19
 1008844:	dfc00617 	ldw	ra,24(sp)
 1008848:	dd400517 	ldw	r21,20(sp)
 100884c:	dd000417 	ldw	r20,16(sp)
 1008850:	dcc00317 	ldw	r19,12(sp)
 1008854:	dc800217 	ldw	r18,8(sp)
 1008858:	dc400117 	ldw	r17,4(sp)
 100885c:	dc000017 	ldw	r16,0(sp)
 1008860:	dec00704 	addi	sp,sp,28
 1008864:	f800283a 	ret
 1008868:	a0c00e36 	bltu	r20,r3,10088a4 <__b2d+0xf8>
 100886c:	293ffd44 	addi	r4,r5,-11
 1008870:	000d883a 	mov	r6,zero
 1008874:	20000f26 	beq	r4,zero,10088b4 <__b2d+0x108>
 1008878:	00800804 	movi	r2,32
 100887c:	110bc83a 	sub	r5,r2,r4
 1008880:	a0c01236 	bltu	r20,r3,10088cc <__b2d+0x120>
 1008884:	000f883a 	mov	r7,zero
 1008888:	a904983a 	sll	r2,r21,r4
 100888c:	3146d83a 	srl	r3,r6,r5
 1008890:	3108983a 	sll	r4,r6,r4
 1008894:	108ffc34 	orhi	r2,r2,16368
 1008898:	18a6b03a 	or	r19,r3,r2
 100889c:	3924b03a 	or	r18,r7,r4
 10088a0:	003fe606 	br	100883c <__b2d+0x90>
 10088a4:	293ffd44 	addi	r4,r5,-11
 10088a8:	81bffe17 	ldw	r6,-8(r16)
 10088ac:	80fffe04 	addi	r3,r16,-8
 10088b0:	203ff11e 	bne	r4,zero,1008878 <__b2d+0xcc>
 10088b4:	accffc34 	orhi	r19,r21,16368
 10088b8:	3025883a 	mov	r18,r6
 10088bc:	003fdf06 	br	100883c <__b2d+0x90>
 10088c0:	18bfff17 	ldw	r2,-4(r3)
 10088c4:	110cd83a 	srl	r6,r2,r4
 10088c8:	003fd706 	br	1008828 <__b2d+0x7c>
 10088cc:	18bfff17 	ldw	r2,-4(r3)
 10088d0:	114ed83a 	srl	r7,r2,r5
 10088d4:	003fec06 	br	1008888 <__b2d+0xdc>

010088d8 <__ratio>:
 10088d8:	f811883a 	mov	r8,ra
 10088dc:	100c3d80 	call	100c3d8 <_mcount>
 10088e0:	403f883a 	mov	ra,r8
 10088e4:	defff904 	addi	sp,sp,-28
 10088e8:	dfc00615 	stw	ra,24(sp)
 10088ec:	dd000515 	stw	r20,20(sp)
 10088f0:	dcc00415 	stw	r19,16(sp)
 10088f4:	dc800315 	stw	r18,12(sp)
 10088f8:	dc400215 	stw	r17,8(sp)
 10088fc:	2823883a 	mov	r17,r5
 1008900:	d80b883a 	mov	r5,sp
 1008904:	2025883a 	mov	r18,r4
 1008908:	10087ac0 	call	10087ac <__b2d>
 100890c:	8809883a 	mov	r4,r17
 1008910:	d9400104 	addi	r5,sp,4
 1008914:	1027883a 	mov	r19,r2
 1008918:	1829883a 	mov	r20,r3
 100891c:	10087ac0 	call	10087ac <__b2d>
 1008920:	89000417 	ldw	r4,16(r17)
 1008924:	91c00417 	ldw	r7,16(r18)
 1008928:	d9800117 	ldw	r6,4(sp)
 100892c:	180b883a 	mov	r5,r3
 1008930:	390fc83a 	sub	r7,r7,r4
 1008934:	1009883a 	mov	r4,r2
 1008938:	d8800017 	ldw	r2,0(sp)
 100893c:	380e917a 	slli	r7,r7,5
 1008940:	2011883a 	mov	r8,r4
 1008944:	1185c83a 	sub	r2,r2,r6
 1008948:	11c5883a 	add	r2,r2,r7
 100894c:	1006953a 	slli	r3,r2,20
 1008950:	2813883a 	mov	r9,r5
 1008954:	00800d0e 	bge	zero,r2,100898c <__ratio+0xb4>
 1008958:	1d29883a 	add	r20,r3,r20
 100895c:	a00b883a 	mov	r5,r20
 1008960:	480f883a 	mov	r7,r9
 1008964:	9809883a 	mov	r4,r19
 1008968:	400d883a 	mov	r6,r8
 100896c:	10020dc0 	call	10020dc <__divdf3>
 1008970:	dfc00617 	ldw	ra,24(sp)
 1008974:	dd000517 	ldw	r20,20(sp)
 1008978:	dcc00417 	ldw	r19,16(sp)
 100897c:	dc800317 	ldw	r18,12(sp)
 1008980:	dc400217 	ldw	r17,8(sp)
 1008984:	dec00704 	addi	sp,sp,28
 1008988:	f800283a 	ret
 100898c:	28d3c83a 	sub	r9,r5,r3
 1008990:	003ff206 	br	100895c <__ratio+0x84>

01008994 <_mprec_log10>:
 1008994:	f811883a 	mov	r8,ra
 1008998:	100c3d80 	call	100c3d8 <_mcount>
 100899c:	403f883a 	mov	ra,r8
 10089a0:	defffe04 	addi	sp,sp,-8
 10089a4:	dfc00115 	stw	ra,4(sp)
 10089a8:	dc000015 	stw	r16,0(sp)
 10089ac:	008005c4 	movi	r2,23
 10089b0:	2021883a 	mov	r16,r4
 10089b4:	11000c16 	blt	r2,r4,10089e8 <_mprec_log10+0x54>
 10089b8:	200490fa 	slli	r2,r4,3
 10089bc:	00c040b4 	movhi	r3,258
 10089c0:	18e82104 	addi	r3,r3,-24444
 10089c4:	10c5883a 	add	r2,r2,r3
 10089c8:	12400117 	ldw	r9,4(r2)
 10089cc:	12000017 	ldw	r8,0(r2)
 10089d0:	4807883a 	mov	r3,r9
 10089d4:	4005883a 	mov	r2,r8
 10089d8:	dfc00117 	ldw	ra,4(sp)
 10089dc:	dc000017 	ldw	r16,0(sp)
 10089e0:	dec00204 	addi	sp,sp,8
 10089e4:	f800283a 	ret
 10089e8:	0011883a 	mov	r8,zero
 10089ec:	024ffc34 	movhi	r9,16368
 10089f0:	0005883a 	mov	r2,zero
 10089f4:	00d00934 	movhi	r3,16420
 10089f8:	480b883a 	mov	r5,r9
 10089fc:	4009883a 	mov	r4,r8
 1008a00:	180f883a 	mov	r7,r3
 1008a04:	100d883a 	mov	r6,r2
 1008a08:	1001d0c0 	call	1001d0c <__muldf3>
 1008a0c:	843fffc4 	addi	r16,r16,-1
 1008a10:	1011883a 	mov	r8,r2
 1008a14:	1813883a 	mov	r9,r3
 1008a18:	803ff51e 	bne	r16,zero,10089f0 <_mprec_log10+0x5c>
 1008a1c:	4005883a 	mov	r2,r8
 1008a20:	4807883a 	mov	r3,r9
 1008a24:	dfc00117 	ldw	ra,4(sp)
 1008a28:	dc000017 	ldw	r16,0(sp)
 1008a2c:	dec00204 	addi	sp,sp,8
 1008a30:	f800283a 	ret

01008a34 <__copybits>:
 1008a34:	f811883a 	mov	r8,ra
 1008a38:	100c3d80 	call	100c3d8 <_mcount>
 1008a3c:	403f883a 	mov	ra,r8
 1008a40:	297fffc4 	addi	r5,r5,-1
 1008a44:	30800417 	ldw	r2,16(r6)
 1008a48:	280bd17a 	srai	r5,r5,5
 1008a4c:	31800504 	addi	r6,r6,20
 1008a50:	1085883a 	add	r2,r2,r2
 1008a54:	294b883a 	add	r5,r5,r5
 1008a58:	294b883a 	add	r5,r5,r5
 1008a5c:	1085883a 	add	r2,r2,r2
 1008a60:	290b883a 	add	r5,r5,r4
 1008a64:	3087883a 	add	r3,r6,r2
 1008a68:	29400104 	addi	r5,r5,4
 1008a6c:	30c0052e 	bgeu	r6,r3,1008a84 <__copybits+0x50>
 1008a70:	30800017 	ldw	r2,0(r6)
 1008a74:	31800104 	addi	r6,r6,4
 1008a78:	20800015 	stw	r2,0(r4)
 1008a7c:	21000104 	addi	r4,r4,4
 1008a80:	30fffb36 	bltu	r6,r3,1008a70 <__copybits+0x3c>
 1008a84:	2140032e 	bgeu	r4,r5,1008a94 <__copybits+0x60>
 1008a88:	20000015 	stw	zero,0(r4)
 1008a8c:	21000104 	addi	r4,r4,4
 1008a90:	217ffd36 	bltu	r4,r5,1008a88 <__copybits+0x54>
 1008a94:	f800283a 	ret

01008a98 <__any_on>:
 1008a98:	f811883a 	mov	r8,ra
 1008a9c:	100c3d80 	call	100c3d8 <_mcount>
 1008aa0:	403f883a 	mov	ra,r8
 1008aa4:	20800417 	ldw	r2,16(r4)
 1008aa8:	2807d17a 	srai	r3,r5,5
 1008aac:	21000504 	addi	r4,r4,20
 1008ab0:	10c00d0e 	bge	r2,r3,1008ae8 <__any_on+0x50>
 1008ab4:	1085883a 	add	r2,r2,r2
 1008ab8:	1085883a 	add	r2,r2,r2
 1008abc:	208d883a 	add	r6,r4,r2
 1008ac0:	2180192e 	bgeu	r4,r6,1008b28 <__any_on+0x90>
 1008ac4:	30bfff17 	ldw	r2,-4(r6)
 1008ac8:	30ffff04 	addi	r3,r6,-4
 1008acc:	1000041e 	bne	r2,zero,1008ae0 <__any_on+0x48>
 1008ad0:	20c0152e 	bgeu	r4,r3,1008b28 <__any_on+0x90>
 1008ad4:	18ffff04 	addi	r3,r3,-4
 1008ad8:	18800017 	ldw	r2,0(r3)
 1008adc:	103ffc26 	beq	r2,zero,1008ad0 <__any_on+0x38>
 1008ae0:	00800044 	movi	r2,1
 1008ae4:	f800283a 	ret
 1008ae8:	18800b0e 	bge	r3,r2,1008b18 <__any_on+0x80>
 1008aec:	294007cc 	andi	r5,r5,31
 1008af0:	28000926 	beq	r5,zero,1008b18 <__any_on+0x80>
 1008af4:	18c5883a 	add	r2,r3,r3
 1008af8:	1085883a 	add	r2,r2,r2
 1008afc:	208d883a 	add	r6,r4,r2
 1008b00:	30c00017 	ldw	r3,0(r6)
 1008b04:	1944d83a 	srl	r2,r3,r5
 1008b08:	1144983a 	sll	r2,r2,r5
 1008b0c:	18bfec26 	beq	r3,r2,1008ac0 <__any_on+0x28>
 1008b10:	00800044 	movi	r2,1
 1008b14:	003ff306 	br	1008ae4 <__any_on+0x4c>
 1008b18:	18c5883a 	add	r2,r3,r3
 1008b1c:	1085883a 	add	r2,r2,r2
 1008b20:	208d883a 	add	r6,r4,r2
 1008b24:	003fe606 	br	1008ac0 <__any_on+0x28>
 1008b28:	0005883a 	mov	r2,zero
 1008b2c:	f800283a 	ret

01008b30 <_Balloc>:
 1008b30:	f811883a 	mov	r8,ra
 1008b34:	100c3d80 	call	100c3d8 <_mcount>
 1008b38:	403f883a 	mov	ra,r8
 1008b3c:	defffb04 	addi	sp,sp,-20
 1008b40:	dfc00415 	stw	ra,16(sp)
 1008b44:	dcc00315 	stw	r19,12(sp)
 1008b48:	dc800215 	stw	r18,8(sp)
 1008b4c:	dc400115 	stw	r17,4(sp)
 1008b50:	dc000015 	stw	r16,0(sp)
 1008b54:	20c01317 	ldw	r3,76(r4)
 1008b58:	2825883a 	mov	r18,r5
 1008b5c:	2027883a 	mov	r19,r4
 1008b60:	01800404 	movi	r6,16
 1008b64:	01400104 	movi	r5,4
 1008b68:	18001726 	beq	r3,zero,1008bc8 <_Balloc+0x98>
 1008b6c:	01400044 	movi	r5,1
 1008b70:	9485883a 	add	r2,r18,r18
 1008b74:	2ca2983a 	sll	r17,r5,r18
 1008b78:	1085883a 	add	r2,r2,r2
 1008b7c:	10c7883a 	add	r3,r2,r3
 1008b80:	1c000017 	ldw	r16,0(r3)
 1008b84:	8c4d883a 	add	r6,r17,r17
 1008b88:	318d883a 	add	r6,r6,r6
 1008b8c:	9809883a 	mov	r4,r19
 1008b90:	31800504 	addi	r6,r6,20
 1008b94:	80001226 	beq	r16,zero,1008be0 <_Balloc+0xb0>
 1008b98:	80800017 	ldw	r2,0(r16)
 1008b9c:	18800015 	stw	r2,0(r3)
 1008ba0:	80000415 	stw	zero,16(r16)
 1008ba4:	80000315 	stw	zero,12(r16)
 1008ba8:	8005883a 	mov	r2,r16
 1008bac:	dfc00417 	ldw	ra,16(sp)
 1008bb0:	dcc00317 	ldw	r19,12(sp)
 1008bb4:	dc800217 	ldw	r18,8(sp)
 1008bb8:	dc400117 	ldw	r17,4(sp)
 1008bbc:	dc000017 	ldw	r16,0(sp)
 1008bc0:	dec00504 	addi	sp,sp,20
 1008bc4:	f800283a 	ret
 1008bc8:	100a3dc0 	call	100a3dc <_calloc_r>
 1008bcc:	1007883a 	mov	r3,r2
 1008bd0:	0021883a 	mov	r16,zero
 1008bd4:	98801315 	stw	r2,76(r19)
 1008bd8:	103fe41e 	bne	r2,zero,1008b6c <_Balloc+0x3c>
 1008bdc:	003ff206 	br	1008ba8 <_Balloc+0x78>
 1008be0:	100a3dc0 	call	100a3dc <_calloc_r>
 1008be4:	103ff026 	beq	r2,zero,1008ba8 <_Balloc+0x78>
 1008be8:	1021883a 	mov	r16,r2
 1008bec:	14800115 	stw	r18,4(r2)
 1008bf0:	14400215 	stw	r17,8(r2)
 1008bf4:	003fea06 	br	1008ba0 <_Balloc+0x70>

01008bf8 <__d2b>:
 1008bf8:	f811883a 	mov	r8,ra
 1008bfc:	100c3d80 	call	100c3d8 <_mcount>
 1008c00:	403f883a 	mov	ra,r8
 1008c04:	defff504 	addi	sp,sp,-44
 1008c08:	dfc00a15 	stw	ra,40(sp)
 1008c0c:	ddc00915 	stw	r23,36(sp)
 1008c10:	dd800815 	stw	r22,32(sp)
 1008c14:	dd400715 	stw	r21,28(sp)
 1008c18:	dd000615 	stw	r20,24(sp)
 1008c1c:	dcc00515 	stw	r19,20(sp)
 1008c20:	dc800415 	stw	r18,16(sp)
 1008c24:	dc400315 	stw	r17,12(sp)
 1008c28:	dc000215 	stw	r16,8(sp)
 1008c2c:	04c00044 	movi	r19,1
 1008c30:	2821883a 	mov	r16,r5
 1008c34:	980b883a 	mov	r5,r19
 1008c38:	3023883a 	mov	r17,r6
 1008c3c:	382d883a 	mov	r22,r7
 1008c40:	ddc00b17 	ldw	r23,44(sp)
 1008c44:	1008b300 	call	1008b30 <_Balloc>
 1008c48:	1025883a 	mov	r18,r2
 1008c4c:	00a00034 	movhi	r2,32768
 1008c50:	10bfffc4 	addi	r2,r2,-1
 1008c54:	8888703a 	and	r4,r17,r2
 1008c58:	202ad53a 	srli	r21,r4,20
 1008c5c:	00800434 	movhi	r2,16
 1008c60:	10bfffc4 	addi	r2,r2,-1
 1008c64:	8886703a 	and	r3,r17,r2
 1008c68:	a829003a 	cmpeq	r20,r21,zero
 1008c6c:	800b883a 	mov	r5,r16
 1008c70:	d8c00115 	stw	r3,4(sp)
 1008c74:	94000504 	addi	r16,r18,20
 1008c78:	a000021e 	bne	r20,zero,1008c84 <__d2b+0x8c>
 1008c7c:	18c00434 	orhi	r3,r3,16
 1008c80:	d8c00115 	stw	r3,4(sp)
 1008c84:	28002726 	beq	r5,zero,1008d24 <__d2b+0x12c>
 1008c88:	d809883a 	mov	r4,sp
 1008c8c:	d9400015 	stw	r5,0(sp)
 1008c90:	10085e40 	call	10085e4 <__lo0bits>
 1008c94:	100d883a 	mov	r6,r2
 1008c98:	10003526 	beq	r2,zero,1008d70 <__d2b+0x178>
 1008c9c:	d8c00117 	ldw	r3,4(sp)
 1008ca0:	00800804 	movi	r2,32
 1008ca4:	1185c83a 	sub	r2,r2,r6
 1008ca8:	d9000017 	ldw	r4,0(sp)
 1008cac:	1886983a 	sll	r3,r3,r2
 1008cb0:	1906b03a 	or	r3,r3,r4
 1008cb4:	90c00515 	stw	r3,20(r18)
 1008cb8:	d8c00117 	ldw	r3,4(sp)
 1008cbc:	1986d83a 	srl	r3,r3,r6
 1008cc0:	d8c00115 	stw	r3,4(sp)
 1008cc4:	180b003a 	cmpeq	r5,r3,zero
 1008cc8:	00800084 	movi	r2,2
 1008ccc:	114bc83a 	sub	r5,r2,r5
 1008cd0:	80c00115 	stw	r3,4(r16)
 1008cd4:	91400415 	stw	r5,16(r18)
 1008cd8:	a0001a1e 	bne	r20,zero,1008d44 <__d2b+0x14c>
 1008cdc:	3545883a 	add	r2,r6,r21
 1008ce0:	10bef344 	addi	r2,r2,-1075
 1008ce4:	00c00d44 	movi	r3,53
 1008ce8:	b0800015 	stw	r2,0(r22)
 1008cec:	1987c83a 	sub	r3,r3,r6
 1008cf0:	b8c00015 	stw	r3,0(r23)
 1008cf4:	9005883a 	mov	r2,r18
 1008cf8:	dfc00a17 	ldw	ra,40(sp)
 1008cfc:	ddc00917 	ldw	r23,36(sp)
 1008d00:	dd800817 	ldw	r22,32(sp)
 1008d04:	dd400717 	ldw	r21,28(sp)
 1008d08:	dd000617 	ldw	r20,24(sp)
 1008d0c:	dcc00517 	ldw	r19,20(sp)
 1008d10:	dc800417 	ldw	r18,16(sp)
 1008d14:	dc400317 	ldw	r17,12(sp)
 1008d18:	dc000217 	ldw	r16,8(sp)
 1008d1c:	dec00b04 	addi	sp,sp,44
 1008d20:	f800283a 	ret
 1008d24:	d9000104 	addi	r4,sp,4
 1008d28:	10085e40 	call	10085e4 <__lo0bits>
 1008d2c:	11800804 	addi	r6,r2,32
 1008d30:	d8800117 	ldw	r2,4(sp)
 1008d34:	94c00415 	stw	r19,16(r18)
 1008d38:	980b883a 	mov	r5,r19
 1008d3c:	90800515 	stw	r2,20(r18)
 1008d40:	a03fe626 	beq	r20,zero,1008cdc <__d2b+0xe4>
 1008d44:	2945883a 	add	r2,r5,r5
 1008d48:	1085883a 	add	r2,r2,r2
 1008d4c:	1405883a 	add	r2,r2,r16
 1008d50:	113fff17 	ldw	r4,-4(r2)
 1008d54:	30fef384 	addi	r3,r6,-1074
 1008d58:	2820917a 	slli	r16,r5,5
 1008d5c:	b0c00015 	stw	r3,0(r22)
 1008d60:	10085680 	call	1008568 <__hi0bits>
 1008d64:	80a1c83a 	sub	r16,r16,r2
 1008d68:	bc000015 	stw	r16,0(r23)
 1008d6c:	003fe106 	br	1008cf4 <__d2b+0xfc>
 1008d70:	d8800017 	ldw	r2,0(sp)
 1008d74:	90800515 	stw	r2,20(r18)
 1008d78:	d8c00117 	ldw	r3,4(sp)
 1008d7c:	003fd106 	br	1008cc4 <__d2b+0xcc>

01008d80 <__mdiff>:
 1008d80:	f811883a 	mov	r8,ra
 1008d84:	100c3d80 	call	100c3d8 <_mcount>
 1008d88:	403f883a 	mov	ra,r8
 1008d8c:	defffb04 	addi	sp,sp,-20
 1008d90:	dfc00415 	stw	ra,16(sp)
 1008d94:	dcc00315 	stw	r19,12(sp)
 1008d98:	dc800215 	stw	r18,8(sp)
 1008d9c:	dc400115 	stw	r17,4(sp)
 1008da0:	dc000015 	stw	r16,0(sp)
 1008da4:	2821883a 	mov	r16,r5
 1008da8:	2025883a 	mov	r18,r4
 1008dac:	300b883a 	mov	r5,r6
 1008db0:	8009883a 	mov	r4,r16
 1008db4:	3023883a 	mov	r17,r6
 1008db8:	10086b40 	call	10086b4 <__mcmp>
 1008dbc:	10004226 	beq	r2,zero,1008ec8 <__mdiff+0x148>
 1008dc0:	10005016 	blt	r2,zero,1008f04 <__mdiff+0x184>
 1008dc4:	0027883a 	mov	r19,zero
 1008dc8:	81400117 	ldw	r5,4(r16)
 1008dcc:	9009883a 	mov	r4,r18
 1008dd0:	1008b300 	call	1008b30 <_Balloc>
 1008dd4:	1019883a 	mov	r12,r2
 1008dd8:	82800417 	ldw	r10,16(r16)
 1008ddc:	88800417 	ldw	r2,16(r17)
 1008de0:	81800504 	addi	r6,r16,20
 1008de4:	5287883a 	add	r3,r10,r10
 1008de8:	1085883a 	add	r2,r2,r2
 1008dec:	18c7883a 	add	r3,r3,r3
 1008df0:	1085883a 	add	r2,r2,r2
 1008df4:	8a000504 	addi	r8,r17,20
 1008df8:	64c00315 	stw	r19,12(r12)
 1008dfc:	30db883a 	add	r13,r6,r3
 1008e00:	4097883a 	add	r11,r8,r2
 1008e04:	61c00504 	addi	r7,r12,20
 1008e08:	0013883a 	mov	r9,zero
 1008e0c:	31000017 	ldw	r4,0(r6)
 1008e10:	41400017 	ldw	r5,0(r8)
 1008e14:	42000104 	addi	r8,r8,4
 1008e18:	20bfffcc 	andi	r2,r4,65535
 1008e1c:	28ffffcc 	andi	r3,r5,65535
 1008e20:	10c5c83a 	sub	r2,r2,r3
 1008e24:	1245883a 	add	r2,r2,r9
 1008e28:	2008d43a 	srli	r4,r4,16
 1008e2c:	280ad43a 	srli	r5,r5,16
 1008e30:	1007d43a 	srai	r3,r2,16
 1008e34:	3880000d 	sth	r2,0(r7)
 1008e38:	2149c83a 	sub	r4,r4,r5
 1008e3c:	20c9883a 	add	r4,r4,r3
 1008e40:	3900008d 	sth	r4,2(r7)
 1008e44:	31800104 	addi	r6,r6,4
 1008e48:	39c00104 	addi	r7,r7,4
 1008e4c:	2013d43a 	srai	r9,r4,16
 1008e50:	42ffee36 	bltu	r8,r11,1008e0c <__mdiff+0x8c>
 1008e54:	33400c2e 	bgeu	r6,r13,1008e88 <__mdiff+0x108>
 1008e58:	30800017 	ldw	r2,0(r6)
 1008e5c:	31800104 	addi	r6,r6,4
 1008e60:	10ffffcc 	andi	r3,r2,65535
 1008e64:	1a47883a 	add	r3,r3,r9
 1008e68:	1004d43a 	srli	r2,r2,16
 1008e6c:	1809d43a 	srai	r4,r3,16
 1008e70:	38c0000d 	sth	r3,0(r7)
 1008e74:	1105883a 	add	r2,r2,r4
 1008e78:	3880008d 	sth	r2,2(r7)
 1008e7c:	1013d43a 	srai	r9,r2,16
 1008e80:	39c00104 	addi	r7,r7,4
 1008e84:	337ff436 	bltu	r6,r13,1008e58 <__mdiff+0xd8>
 1008e88:	38bfff17 	ldw	r2,-4(r7)
 1008e8c:	38ffff04 	addi	r3,r7,-4
 1008e90:	1000041e 	bne	r2,zero,1008ea4 <__mdiff+0x124>
 1008e94:	18ffff04 	addi	r3,r3,-4
 1008e98:	18800017 	ldw	r2,0(r3)
 1008e9c:	52bfffc4 	addi	r10,r10,-1
 1008ea0:	103ffc26 	beq	r2,zero,1008e94 <__mdiff+0x114>
 1008ea4:	6005883a 	mov	r2,r12
 1008ea8:	62800415 	stw	r10,16(r12)
 1008eac:	dfc00417 	ldw	ra,16(sp)
 1008eb0:	dcc00317 	ldw	r19,12(sp)
 1008eb4:	dc800217 	ldw	r18,8(sp)
 1008eb8:	dc400117 	ldw	r17,4(sp)
 1008ebc:	dc000017 	ldw	r16,0(sp)
 1008ec0:	dec00504 	addi	sp,sp,20
 1008ec4:	f800283a 	ret
 1008ec8:	9009883a 	mov	r4,r18
 1008ecc:	000b883a 	mov	r5,zero
 1008ed0:	1008b300 	call	1008b30 <_Balloc>
 1008ed4:	1019883a 	mov	r12,r2
 1008ed8:	00800044 	movi	r2,1
 1008edc:	60800415 	stw	r2,16(r12)
 1008ee0:	6005883a 	mov	r2,r12
 1008ee4:	60000515 	stw	zero,20(r12)
 1008ee8:	dfc00417 	ldw	ra,16(sp)
 1008eec:	dcc00317 	ldw	r19,12(sp)
 1008ef0:	dc800217 	ldw	r18,8(sp)
 1008ef4:	dc400117 	ldw	r17,4(sp)
 1008ef8:	dc000017 	ldw	r16,0(sp)
 1008efc:	dec00504 	addi	sp,sp,20
 1008f00:	f800283a 	ret
 1008f04:	880d883a 	mov	r6,r17
 1008f08:	04c00044 	movi	r19,1
 1008f0c:	8023883a 	mov	r17,r16
 1008f10:	3021883a 	mov	r16,r6
 1008f14:	003fac06 	br	1008dc8 <__mdiff+0x48>

01008f18 <__lshift>:
 1008f18:	f811883a 	mov	r8,ra
 1008f1c:	100c3d80 	call	100c3d8 <_mcount>
 1008f20:	403f883a 	mov	ra,r8
 1008f24:	defff904 	addi	sp,sp,-28
 1008f28:	dfc00615 	stw	ra,24(sp)
 1008f2c:	dd400515 	stw	r21,20(sp)
 1008f30:	dd000415 	stw	r20,16(sp)
 1008f34:	dcc00315 	stw	r19,12(sp)
 1008f38:	dc800215 	stw	r18,8(sp)
 1008f3c:	dc400115 	stw	r17,4(sp)
 1008f40:	dc000015 	stw	r16,0(sp)
 1008f44:	28800417 	ldw	r2,16(r5)
 1008f48:	3021d17a 	srai	r16,r6,5
 1008f4c:	28c00217 	ldw	r3,8(r5)
 1008f50:	10800044 	addi	r2,r2,1
 1008f54:	80a3883a 	add	r17,r16,r2
 1008f58:	2825883a 	mov	r18,r5
 1008f5c:	3029883a 	mov	r20,r6
 1008f60:	202b883a 	mov	r21,r4
 1008f64:	29400117 	ldw	r5,4(r5)
 1008f68:	1c40030e 	bge	r3,r17,1008f78 <__lshift+0x60>
 1008f6c:	18c7883a 	add	r3,r3,r3
 1008f70:	29400044 	addi	r5,r5,1
 1008f74:	1c7ffd16 	blt	r3,r17,1008f6c <__lshift+0x54>
 1008f78:	a809883a 	mov	r4,r21
 1008f7c:	1008b300 	call	1008b30 <_Balloc>
 1008f80:	1027883a 	mov	r19,r2
 1008f84:	11400504 	addi	r5,r2,20
 1008f88:	0400090e 	bge	zero,r16,1008fb0 <__lshift+0x98>
 1008f8c:	2805883a 	mov	r2,r5
 1008f90:	0007883a 	mov	r3,zero
 1008f94:	18c00044 	addi	r3,r3,1
 1008f98:	10000015 	stw	zero,0(r2)
 1008f9c:	10800104 	addi	r2,r2,4
 1008fa0:	80fffc1e 	bne	r16,r3,1008f94 <__lshift+0x7c>
 1008fa4:	8405883a 	add	r2,r16,r16
 1008fa8:	1085883a 	add	r2,r2,r2
 1008fac:	288b883a 	add	r5,r5,r2
 1008fb0:	90800417 	ldw	r2,16(r18)
 1008fb4:	91000504 	addi	r4,r18,20
 1008fb8:	a18007cc 	andi	r6,r20,31
 1008fbc:	1085883a 	add	r2,r2,r2
 1008fc0:	1085883a 	add	r2,r2,r2
 1008fc4:	208f883a 	add	r7,r4,r2
 1008fc8:	30001e26 	beq	r6,zero,1009044 <__lshift+0x12c>
 1008fcc:	00800804 	movi	r2,32
 1008fd0:	1191c83a 	sub	r8,r2,r6
 1008fd4:	0007883a 	mov	r3,zero
 1008fd8:	20800017 	ldw	r2,0(r4)
 1008fdc:	1184983a 	sll	r2,r2,r6
 1008fe0:	1884b03a 	or	r2,r3,r2
 1008fe4:	28800015 	stw	r2,0(r5)
 1008fe8:	20c00017 	ldw	r3,0(r4)
 1008fec:	21000104 	addi	r4,r4,4
 1008ff0:	29400104 	addi	r5,r5,4
 1008ff4:	1a06d83a 	srl	r3,r3,r8
 1008ff8:	21fff736 	bltu	r4,r7,1008fd8 <__lshift+0xc0>
 1008ffc:	28c00015 	stw	r3,0(r5)
 1009000:	18000126 	beq	r3,zero,1009008 <__lshift+0xf0>
 1009004:	8c400044 	addi	r17,r17,1
 1009008:	88bfffc4 	addi	r2,r17,-1
 100900c:	98800415 	stw	r2,16(r19)
 1009010:	a809883a 	mov	r4,r21
 1009014:	900b883a 	mov	r5,r18
 1009018:	10085340 	call	1008534 <_Bfree>
 100901c:	9805883a 	mov	r2,r19
 1009020:	dfc00617 	ldw	ra,24(sp)
 1009024:	dd400517 	ldw	r21,20(sp)
 1009028:	dd000417 	ldw	r20,16(sp)
 100902c:	dcc00317 	ldw	r19,12(sp)
 1009030:	dc800217 	ldw	r18,8(sp)
 1009034:	dc400117 	ldw	r17,4(sp)
 1009038:	dc000017 	ldw	r16,0(sp)
 100903c:	dec00704 	addi	sp,sp,28
 1009040:	f800283a 	ret
 1009044:	20800017 	ldw	r2,0(r4)
 1009048:	21000104 	addi	r4,r4,4
 100904c:	28800015 	stw	r2,0(r5)
 1009050:	29400104 	addi	r5,r5,4
 1009054:	21ffec2e 	bgeu	r4,r7,1009008 <__lshift+0xf0>
 1009058:	20800017 	ldw	r2,0(r4)
 100905c:	21000104 	addi	r4,r4,4
 1009060:	28800015 	stw	r2,0(r5)
 1009064:	29400104 	addi	r5,r5,4
 1009068:	21fff636 	bltu	r4,r7,1009044 <__lshift+0x12c>
 100906c:	003fe606 	br	1009008 <__lshift+0xf0>

01009070 <__multiply>:
 1009070:	f811883a 	mov	r8,ra
 1009074:	100c3d80 	call	100c3d8 <_mcount>
 1009078:	403f883a 	mov	ra,r8
 100907c:	defff004 	addi	sp,sp,-64
 1009080:	dfc00f15 	stw	ra,60(sp)
 1009084:	df000e15 	stw	fp,56(sp)
 1009088:	ddc00d15 	stw	r23,52(sp)
 100908c:	dd800c15 	stw	r22,48(sp)
 1009090:	dd400b15 	stw	r21,44(sp)
 1009094:	dd000a15 	stw	r20,40(sp)
 1009098:	dcc00915 	stw	r19,36(sp)
 100909c:	dc800815 	stw	r18,32(sp)
 10090a0:	dc400715 	stw	r17,28(sp)
 10090a4:	dc000615 	stw	r16,24(sp)
 10090a8:	2c800417 	ldw	r18,16(r5)
 10090ac:	34400417 	ldw	r17,16(r6)
 10090b0:	2821883a 	mov	r16,r5
 10090b4:	3027883a 	mov	r19,r6
 10090b8:	9440040e 	bge	r18,r17,10090cc <__multiply+0x5c>
 10090bc:	8825883a 	mov	r18,r17
 10090c0:	2c400417 	ldw	r17,16(r5)
 10090c4:	2827883a 	mov	r19,r5
 10090c8:	3021883a 	mov	r16,r6
 10090cc:	80800217 	ldw	r2,8(r16)
 10090d0:	9447883a 	add	r3,r18,r17
 10090d4:	d8c00415 	stw	r3,16(sp)
 10090d8:	81400117 	ldw	r5,4(r16)
 10090dc:	10c0010e 	bge	r2,r3,10090e4 <__multiply+0x74>
 10090e0:	29400044 	addi	r5,r5,1
 10090e4:	1008b300 	call	1008b30 <_Balloc>
 10090e8:	d8800515 	stw	r2,20(sp)
 10090ec:	d9000417 	ldw	r4,16(sp)
 10090f0:	d8c00517 	ldw	r3,20(sp)
 10090f4:	2105883a 	add	r2,r4,r4
 10090f8:	1085883a 	add	r2,r2,r2
 10090fc:	19000504 	addi	r4,r3,20
 1009100:	2085883a 	add	r2,r4,r2
 1009104:	d8800315 	stw	r2,12(sp)
 1009108:	2080052e 	bgeu	r4,r2,1009120 <__multiply+0xb0>
 100910c:	2005883a 	mov	r2,r4
 1009110:	d8c00317 	ldw	r3,12(sp)
 1009114:	10000015 	stw	zero,0(r2)
 1009118:	10800104 	addi	r2,r2,4
 100911c:	10fffc36 	bltu	r2,r3,1009110 <__multiply+0xa0>
 1009120:	8c45883a 	add	r2,r17,r17
 1009124:	9487883a 	add	r3,r18,r18
 1009128:	9dc00504 	addi	r23,r19,20
 100912c:	1085883a 	add	r2,r2,r2
 1009130:	84000504 	addi	r16,r16,20
 1009134:	18c7883a 	add	r3,r3,r3
 1009138:	b885883a 	add	r2,r23,r2
 100913c:	dc000015 	stw	r16,0(sp)
 1009140:	d8800215 	stw	r2,8(sp)
 1009144:	80f9883a 	add	fp,r16,r3
 1009148:	b880432e 	bgeu	r23,r2,1009258 <__multiply+0x1e8>
 100914c:	d9000115 	stw	r4,4(sp)
 1009150:	b9000017 	ldw	r4,0(r23)
 1009154:	253fffcc 	andi	r20,r4,65535
 1009158:	a0001a26 	beq	r20,zero,10091c4 <__multiply+0x154>
 100915c:	dcc00017 	ldw	r19,0(sp)
 1009160:	dc800117 	ldw	r18,4(sp)
 1009164:	002b883a 	mov	r21,zero
 1009168:	9c400017 	ldw	r17,0(r19)
 100916c:	94000017 	ldw	r16,0(r18)
 1009170:	a009883a 	mov	r4,r20
 1009174:	897fffcc 	andi	r5,r17,65535
 1009178:	10026680 	call	1002668 <__mulsi3>
 100917c:	880ad43a 	srli	r5,r17,16
 1009180:	80ffffcc 	andi	r3,r16,65535
 1009184:	a8c7883a 	add	r3,r21,r3
 1009188:	a009883a 	mov	r4,r20
 100918c:	10e3883a 	add	r17,r2,r3
 1009190:	8020d43a 	srli	r16,r16,16
 1009194:	10026680 	call	1002668 <__mulsi3>
 1009198:	8806d43a 	srli	r3,r17,16
 100919c:	1405883a 	add	r2,r2,r16
 10091a0:	9cc00104 	addi	r19,r19,4
 10091a4:	1887883a 	add	r3,r3,r2
 10091a8:	90c0008d 	sth	r3,2(r18)
 10091ac:	9440000d 	sth	r17,0(r18)
 10091b0:	182ad43a 	srli	r21,r3,16
 10091b4:	94800104 	addi	r18,r18,4
 10091b8:	9f3feb36 	bltu	r19,fp,1009168 <__multiply+0xf8>
 10091bc:	95400015 	stw	r21,0(r18)
 10091c0:	b9000017 	ldw	r4,0(r23)
 10091c4:	202ad43a 	srli	r21,r4,16
 10091c8:	a8001c26 	beq	r21,zero,100923c <__multiply+0x1cc>
 10091cc:	d9000117 	ldw	r4,4(sp)
 10091d0:	dd000017 	ldw	r20,0(sp)
 10091d4:	002d883a 	mov	r22,zero
 10091d8:	24c00017 	ldw	r19,0(r4)
 10091dc:	2025883a 	mov	r18,r4
 10091e0:	9823883a 	mov	r17,r19
 10091e4:	a4000017 	ldw	r16,0(r20)
 10091e8:	a809883a 	mov	r4,r21
 10091ec:	a5000104 	addi	r20,r20,4
 10091f0:	817fffcc 	andi	r5,r16,65535
 10091f4:	10026680 	call	1002668 <__mulsi3>
 10091f8:	8806d43a 	srli	r3,r17,16
 10091fc:	800ad43a 	srli	r5,r16,16
 1009200:	94c0000d 	sth	r19,0(r18)
 1009204:	b0c7883a 	add	r3,r22,r3
 1009208:	10e1883a 	add	r16,r2,r3
 100920c:	9400008d 	sth	r16,2(r18)
 1009210:	a809883a 	mov	r4,r21
 1009214:	94800104 	addi	r18,r18,4
 1009218:	10026680 	call	1002668 <__mulsi3>
 100921c:	94400017 	ldw	r17,0(r18)
 1009220:	8020d43a 	srli	r16,r16,16
 1009224:	88ffffcc 	andi	r3,r17,65535
 1009228:	10c5883a 	add	r2,r2,r3
 100922c:	80a7883a 	add	r19,r16,r2
 1009230:	982cd43a 	srli	r22,r19,16
 1009234:	a73feb36 	bltu	r20,fp,10091e4 <__multiply+0x174>
 1009238:	94c00015 	stw	r19,0(r18)
 100923c:	d8800217 	ldw	r2,8(sp)
 1009240:	bdc00104 	addi	r23,r23,4
 1009244:	b880042e 	bgeu	r23,r2,1009258 <__multiply+0x1e8>
 1009248:	d8c00117 	ldw	r3,4(sp)
 100924c:	18c00104 	addi	r3,r3,4
 1009250:	d8c00115 	stw	r3,4(sp)
 1009254:	003fbe06 	br	1009150 <__multiply+0xe0>
 1009258:	d9000417 	ldw	r4,16(sp)
 100925c:	01000c0e 	bge	zero,r4,1009290 <__multiply+0x220>
 1009260:	d8c00317 	ldw	r3,12(sp)
 1009264:	18bfff17 	ldw	r2,-4(r3)
 1009268:	18ffff04 	addi	r3,r3,-4
 100926c:	10000326 	beq	r2,zero,100927c <__multiply+0x20c>
 1009270:	00000706 	br	1009290 <__multiply+0x220>
 1009274:	18800017 	ldw	r2,0(r3)
 1009278:	1000051e 	bne	r2,zero,1009290 <__multiply+0x220>
 100927c:	d9000417 	ldw	r4,16(sp)
 1009280:	18ffff04 	addi	r3,r3,-4
 1009284:	213fffc4 	addi	r4,r4,-1
 1009288:	d9000415 	stw	r4,16(sp)
 100928c:	203ff91e 	bne	r4,zero,1009274 <__multiply+0x204>
 1009290:	d8800417 	ldw	r2,16(sp)
 1009294:	d8c00517 	ldw	r3,20(sp)
 1009298:	18800415 	stw	r2,16(r3)
 100929c:	1805883a 	mov	r2,r3
 10092a0:	dfc00f17 	ldw	ra,60(sp)
 10092a4:	df000e17 	ldw	fp,56(sp)
 10092a8:	ddc00d17 	ldw	r23,52(sp)
 10092ac:	dd800c17 	ldw	r22,48(sp)
 10092b0:	dd400b17 	ldw	r21,44(sp)
 10092b4:	dd000a17 	ldw	r20,40(sp)
 10092b8:	dcc00917 	ldw	r19,36(sp)
 10092bc:	dc800817 	ldw	r18,32(sp)
 10092c0:	dc400717 	ldw	r17,28(sp)
 10092c4:	dc000617 	ldw	r16,24(sp)
 10092c8:	dec01004 	addi	sp,sp,64
 10092cc:	f800283a 	ret

010092d0 <__i2b>:
 10092d0:	f811883a 	mov	r8,ra
 10092d4:	100c3d80 	call	100c3d8 <_mcount>
 10092d8:	403f883a 	mov	ra,r8
 10092dc:	defffd04 	addi	sp,sp,-12
 10092e0:	dfc00215 	stw	ra,8(sp)
 10092e4:	dc800115 	stw	r18,4(sp)
 10092e8:	dc000015 	stw	r16,0(sp)
 10092ec:	04000044 	movi	r16,1
 10092f0:	2825883a 	mov	r18,r5
 10092f4:	800b883a 	mov	r5,r16
 10092f8:	1008b300 	call	1008b30 <_Balloc>
 10092fc:	14000415 	stw	r16,16(r2)
 1009300:	14800515 	stw	r18,20(r2)
 1009304:	dfc00217 	ldw	ra,8(sp)
 1009308:	dc800117 	ldw	r18,4(sp)
 100930c:	dc000017 	ldw	r16,0(sp)
 1009310:	dec00304 	addi	sp,sp,12
 1009314:	f800283a 	ret

01009318 <__multadd>:
 1009318:	f811883a 	mov	r8,ra
 100931c:	100c3d80 	call	100c3d8 <_mcount>
 1009320:	403f883a 	mov	ra,r8
 1009324:	defff604 	addi	sp,sp,-40
 1009328:	dfc00915 	stw	ra,36(sp)
 100932c:	df000815 	stw	fp,32(sp)
 1009330:	ddc00715 	stw	r23,28(sp)
 1009334:	dd800615 	stw	r22,24(sp)
 1009338:	dd400515 	stw	r21,20(sp)
 100933c:	dd000415 	stw	r20,16(sp)
 1009340:	dcc00315 	stw	r19,12(sp)
 1009344:	dc800215 	stw	r18,8(sp)
 1009348:	dc400115 	stw	r17,4(sp)
 100934c:	dc000015 	stw	r16,0(sp)
 1009350:	2d800417 	ldw	r22,16(r5)
 1009354:	282f883a 	mov	r23,r5
 1009358:	2039883a 	mov	fp,r4
 100935c:	302b883a 	mov	r21,r6
 1009360:	3829883a 	mov	r20,r7
 1009364:	2c800504 	addi	r18,r5,20
 1009368:	0027883a 	mov	r19,zero
 100936c:	94400017 	ldw	r17,0(r18)
 1009370:	a80b883a 	mov	r5,r21
 1009374:	9cc00044 	addi	r19,r19,1
 1009378:	893fffcc 	andi	r4,r17,65535
 100937c:	10026680 	call	1002668 <__mulsi3>
 1009380:	8808d43a 	srli	r4,r17,16
 1009384:	1521883a 	add	r16,r2,r20
 1009388:	a80b883a 	mov	r5,r21
 100938c:	10026680 	call	1002668 <__mulsi3>
 1009390:	8008d43a 	srli	r4,r16,16
 1009394:	843fffcc 	andi	r16,r16,65535
 1009398:	1105883a 	add	r2,r2,r4
 100939c:	1006943a 	slli	r3,r2,16
 10093a0:	1028d43a 	srli	r20,r2,16
 10093a4:	1c07883a 	add	r3,r3,r16
 10093a8:	90c00015 	stw	r3,0(r18)
 10093ac:	94800104 	addi	r18,r18,4
 10093b0:	9dbfee16 	blt	r19,r22,100936c <__multadd+0x54>
 10093b4:	a0000826 	beq	r20,zero,10093d8 <__multadd+0xc0>
 10093b8:	b8800217 	ldw	r2,8(r23)
 10093bc:	b080130e 	bge	r22,r2,100940c <__multadd+0xf4>
 10093c0:	b585883a 	add	r2,r22,r22
 10093c4:	1085883a 	add	r2,r2,r2
 10093c8:	15c5883a 	add	r2,r2,r23
 10093cc:	b0c00044 	addi	r3,r22,1
 10093d0:	15000515 	stw	r20,20(r2)
 10093d4:	b8c00415 	stw	r3,16(r23)
 10093d8:	b805883a 	mov	r2,r23
 10093dc:	dfc00917 	ldw	ra,36(sp)
 10093e0:	df000817 	ldw	fp,32(sp)
 10093e4:	ddc00717 	ldw	r23,28(sp)
 10093e8:	dd800617 	ldw	r22,24(sp)
 10093ec:	dd400517 	ldw	r21,20(sp)
 10093f0:	dd000417 	ldw	r20,16(sp)
 10093f4:	dcc00317 	ldw	r19,12(sp)
 10093f8:	dc800217 	ldw	r18,8(sp)
 10093fc:	dc400117 	ldw	r17,4(sp)
 1009400:	dc000017 	ldw	r16,0(sp)
 1009404:	dec00a04 	addi	sp,sp,40
 1009408:	f800283a 	ret
 100940c:	b9400117 	ldw	r5,4(r23)
 1009410:	e009883a 	mov	r4,fp
 1009414:	29400044 	addi	r5,r5,1
 1009418:	1008b300 	call	1008b30 <_Balloc>
 100941c:	b9800417 	ldw	r6,16(r23)
 1009420:	b9400304 	addi	r5,r23,12
 1009424:	11000304 	addi	r4,r2,12
 1009428:	318d883a 	add	r6,r6,r6
 100942c:	318d883a 	add	r6,r6,r6
 1009430:	31800204 	addi	r6,r6,8
 1009434:	1023883a 	mov	r17,r2
 1009438:	10082f80 	call	10082f8 <memcpy>
 100943c:	b80b883a 	mov	r5,r23
 1009440:	e009883a 	mov	r4,fp
 1009444:	10085340 	call	1008534 <_Bfree>
 1009448:	882f883a 	mov	r23,r17
 100944c:	003fdc06 	br	10093c0 <__multadd+0xa8>

01009450 <__pow5mult>:
 1009450:	f811883a 	mov	r8,ra
 1009454:	100c3d80 	call	100c3d8 <_mcount>
 1009458:	403f883a 	mov	ra,r8
 100945c:	defffa04 	addi	sp,sp,-24
 1009460:	dfc00515 	stw	ra,20(sp)
 1009464:	dd000415 	stw	r20,16(sp)
 1009468:	dcc00315 	stw	r19,12(sp)
 100946c:	dc800215 	stw	r18,8(sp)
 1009470:	dc400115 	stw	r17,4(sp)
 1009474:	dc000015 	stw	r16,0(sp)
 1009478:	308000cc 	andi	r2,r6,3
 100947c:	3021883a 	mov	r16,r6
 1009480:	2027883a 	mov	r19,r4
 1009484:	2829883a 	mov	r20,r5
 1009488:	10002b1e 	bne	r2,zero,1009538 <__pow5mult+0xe8>
 100948c:	8025d0ba 	srai	r18,r16,2
 1009490:	90001b26 	beq	r18,zero,1009500 <__pow5mult+0xb0>
 1009494:	9c001217 	ldw	r16,72(r19)
 1009498:	8000081e 	bne	r16,zero,10094bc <__pow5mult+0x6c>
 100949c:	00003006 	br	1009560 <__pow5mult+0x110>
 10094a0:	800b883a 	mov	r5,r16
 10094a4:	800d883a 	mov	r6,r16
 10094a8:	9809883a 	mov	r4,r19
 10094ac:	90001426 	beq	r18,zero,1009500 <__pow5mult+0xb0>
 10094b0:	80800017 	ldw	r2,0(r16)
 10094b4:	10001b26 	beq	r2,zero,1009524 <__pow5mult+0xd4>
 10094b8:	1021883a 	mov	r16,r2
 10094bc:	9080004c 	andi	r2,r18,1
 10094c0:	1005003a 	cmpeq	r2,r2,zero
 10094c4:	9025d07a 	srai	r18,r18,1
 10094c8:	800d883a 	mov	r6,r16
 10094cc:	9809883a 	mov	r4,r19
 10094d0:	a00b883a 	mov	r5,r20
 10094d4:	103ff21e 	bne	r2,zero,10094a0 <__pow5mult+0x50>
 10094d8:	10090700 	call	1009070 <__multiply>
 10094dc:	a00b883a 	mov	r5,r20
 10094e0:	9809883a 	mov	r4,r19
 10094e4:	1023883a 	mov	r17,r2
 10094e8:	10085340 	call	1008534 <_Bfree>
 10094ec:	8829883a 	mov	r20,r17
 10094f0:	800b883a 	mov	r5,r16
 10094f4:	800d883a 	mov	r6,r16
 10094f8:	9809883a 	mov	r4,r19
 10094fc:	903fec1e 	bne	r18,zero,10094b0 <__pow5mult+0x60>
 1009500:	a005883a 	mov	r2,r20
 1009504:	dfc00517 	ldw	ra,20(sp)
 1009508:	dd000417 	ldw	r20,16(sp)
 100950c:	dcc00317 	ldw	r19,12(sp)
 1009510:	dc800217 	ldw	r18,8(sp)
 1009514:	dc400117 	ldw	r17,4(sp)
 1009518:	dc000017 	ldw	r16,0(sp)
 100951c:	dec00604 	addi	sp,sp,24
 1009520:	f800283a 	ret
 1009524:	10090700 	call	1009070 <__multiply>
 1009528:	80800015 	stw	r2,0(r16)
 100952c:	1021883a 	mov	r16,r2
 1009530:	10000015 	stw	zero,0(r2)
 1009534:	003fe106 	br	10094bc <__pow5mult+0x6c>
 1009538:	1085883a 	add	r2,r2,r2
 100953c:	00c040b4 	movhi	r3,258
 1009540:	18e86704 	addi	r3,r3,-24164
 1009544:	1085883a 	add	r2,r2,r2
 1009548:	10c5883a 	add	r2,r2,r3
 100954c:	11bfff17 	ldw	r6,-4(r2)
 1009550:	000f883a 	mov	r7,zero
 1009554:	10093180 	call	1009318 <__multadd>
 1009558:	1029883a 	mov	r20,r2
 100955c:	003fcb06 	br	100948c <__pow5mult+0x3c>
 1009560:	9809883a 	mov	r4,r19
 1009564:	01409c44 	movi	r5,625
 1009568:	10092d00 	call	10092d0 <__i2b>
 100956c:	98801215 	stw	r2,72(r19)
 1009570:	1021883a 	mov	r16,r2
 1009574:	10000015 	stw	zero,0(r2)
 1009578:	003fd006 	br	10094bc <__pow5mult+0x6c>

0100957c <__s2b>:
 100957c:	f811883a 	mov	r8,ra
 1009580:	100c3d80 	call	100c3d8 <_mcount>
 1009584:	403f883a 	mov	ra,r8
 1009588:	defff904 	addi	sp,sp,-28
 100958c:	dfc00615 	stw	ra,24(sp)
 1009590:	dd400515 	stw	r21,20(sp)
 1009594:	dd000415 	stw	r20,16(sp)
 1009598:	dcc00315 	stw	r19,12(sp)
 100959c:	dc800215 	stw	r18,8(sp)
 10095a0:	dc400115 	stw	r17,4(sp)
 10095a4:	dc000015 	stw	r16,0(sp)
 10095a8:	2025883a 	mov	r18,r4
 10095ac:	2827883a 	mov	r19,r5
 10095b0:	39000204 	addi	r4,r7,8
 10095b4:	01400244 	movi	r5,9
 10095b8:	3829883a 	mov	r20,r7
 10095bc:	3023883a 	mov	r17,r6
 10095c0:	10025680 	call	1002568 <__divsi3>
 10095c4:	00c00044 	movi	r3,1
 10095c8:	1880350e 	bge	r3,r2,10096a0 <__s2b+0x124>
 10095cc:	000b883a 	mov	r5,zero
 10095d0:	18c7883a 	add	r3,r3,r3
 10095d4:	29400044 	addi	r5,r5,1
 10095d8:	18bffd16 	blt	r3,r2,10095d0 <__s2b+0x54>
 10095dc:	9009883a 	mov	r4,r18
 10095e0:	1008b300 	call	1008b30 <_Balloc>
 10095e4:	1011883a 	mov	r8,r2
 10095e8:	d8800717 	ldw	r2,28(sp)
 10095ec:	00c00044 	movi	r3,1
 10095f0:	01800244 	movi	r6,9
 10095f4:	40800515 	stw	r2,20(r8)
 10095f8:	40c00415 	stw	r3,16(r8)
 10095fc:	3440260e 	bge	r6,r17,1009698 <__s2b+0x11c>
 1009600:	3021883a 	mov	r16,r6
 1009604:	99ab883a 	add	r21,r19,r6
 1009608:	9c05883a 	add	r2,r19,r16
 100960c:	11c00007 	ldb	r7,0(r2)
 1009610:	400b883a 	mov	r5,r8
 1009614:	9009883a 	mov	r4,r18
 1009618:	39fff404 	addi	r7,r7,-48
 100961c:	01800284 	movi	r6,10
 1009620:	10093180 	call	1009318 <__multadd>
 1009624:	84000044 	addi	r16,r16,1
 1009628:	1011883a 	mov	r8,r2
 100962c:	8c3ff61e 	bne	r17,r16,1009608 <__s2b+0x8c>
 1009630:	ac45883a 	add	r2,r21,r17
 1009634:	117ffe04 	addi	r5,r2,-8
 1009638:	880d883a 	mov	r6,r17
 100963c:	35000c0e 	bge	r6,r20,1009670 <__s2b+0xf4>
 1009640:	a185c83a 	sub	r2,r20,r6
 1009644:	2821883a 	mov	r16,r5
 1009648:	28a3883a 	add	r17,r5,r2
 100964c:	81c00007 	ldb	r7,0(r16)
 1009650:	400b883a 	mov	r5,r8
 1009654:	9009883a 	mov	r4,r18
 1009658:	39fff404 	addi	r7,r7,-48
 100965c:	01800284 	movi	r6,10
 1009660:	10093180 	call	1009318 <__multadd>
 1009664:	84000044 	addi	r16,r16,1
 1009668:	1011883a 	mov	r8,r2
 100966c:	847ff71e 	bne	r16,r17,100964c <__s2b+0xd0>
 1009670:	4005883a 	mov	r2,r8
 1009674:	dfc00617 	ldw	ra,24(sp)
 1009678:	dd400517 	ldw	r21,20(sp)
 100967c:	dd000417 	ldw	r20,16(sp)
 1009680:	dcc00317 	ldw	r19,12(sp)
 1009684:	dc800217 	ldw	r18,8(sp)
 1009688:	dc400117 	ldw	r17,4(sp)
 100968c:	dc000017 	ldw	r16,0(sp)
 1009690:	dec00704 	addi	sp,sp,28
 1009694:	f800283a 	ret
 1009698:	99400284 	addi	r5,r19,10
 100969c:	003fe706 	br	100963c <__s2b+0xc0>
 10096a0:	000b883a 	mov	r5,zero
 10096a4:	003fcd06 	br	10095dc <__s2b+0x60>

010096a8 <putc>:
 10096a8:	f811883a 	mov	r8,ra
 10096ac:	100c3d80 	call	100c3d8 <_mcount>
 10096b0:	403f883a 	mov	ra,r8
 10096b4:	defffc04 	addi	sp,sp,-16
 10096b8:	dfc00315 	stw	ra,12(sp)
 10096bc:	dc800215 	stw	r18,8(sp)
 10096c0:	dc400115 	stw	r17,4(sp)
 10096c4:	dc000015 	stw	r16,0(sp)
 10096c8:	048040f4 	movhi	r18,259
 10096cc:	94a00704 	addi	r18,r18,-32740
 10096d0:	90c00017 	ldw	r3,0(r18)
 10096d4:	2023883a 	mov	r17,r4
 10096d8:	2821883a 	mov	r16,r5
 10096dc:	18000226 	beq	r3,zero,10096e8 <putc+0x40>
 10096e0:	18800e17 	ldw	r2,56(r3)
 10096e4:	10001126 	beq	r2,zero,100972c <putc+0x84>
 10096e8:	80800217 	ldw	r2,8(r16)
 10096ec:	10ffffc4 	addi	r3,r2,-1
 10096f0:	80c00215 	stw	r3,8(r16)
 10096f4:	18001316 	blt	r3,zero,1009744 <putc+0x9c>
 10096f8:	80800017 	ldw	r2,0(r16)
 10096fc:	14400005 	stb	r17,0(r2)
 1009700:	80c00017 	ldw	r3,0(r16)
 1009704:	18800044 	addi	r2,r3,1
 1009708:	18c00003 	ldbu	r3,0(r3)
 100970c:	80800015 	stw	r2,0(r16)
 1009710:	1805883a 	mov	r2,r3
 1009714:	dfc00317 	ldw	ra,12(sp)
 1009718:	dc800217 	ldw	r18,8(sp)
 100971c:	dc400117 	ldw	r17,4(sp)
 1009720:	dc000017 	ldw	r16,0(sp)
 1009724:	dec00404 	addi	sp,sp,16
 1009728:	f800283a 	ret
 100972c:	1809883a 	mov	r4,r3
 1009730:	1006a8c0 	call	1006a8c <__sinit>
 1009734:	80800217 	ldw	r2,8(r16)
 1009738:	10ffffc4 	addi	r3,r2,-1
 100973c:	80c00215 	stw	r3,8(r16)
 1009740:	183fed0e 	bge	r3,zero,10096f8 <putc+0x50>
 1009744:	80800617 	ldw	r2,24(r16)
 1009748:	18800f16 	blt	r3,r2,1009788 <putc+0xe0>
 100974c:	80800017 	ldw	r2,0(r16)
 1009750:	14400005 	stb	r17,0(r2)
 1009754:	81000017 	ldw	r4,0(r16)
 1009758:	00800284 	movi	r2,10
 100975c:	20c00003 	ldbu	r3,0(r4)
 1009760:	18801226 	beq	r3,r2,10097ac <putc+0x104>
 1009764:	20800044 	addi	r2,r4,1
 1009768:	80800015 	stw	r2,0(r16)
 100976c:	1805883a 	mov	r2,r3
 1009770:	dfc00317 	ldw	ra,12(sp)
 1009774:	dc800217 	ldw	r18,8(sp)
 1009778:	dc400117 	ldw	r17,4(sp)
 100977c:	dc000017 	ldw	r16,0(sp)
 1009780:	dec00404 	addi	sp,sp,16
 1009784:	f800283a 	ret
 1009788:	91000017 	ldw	r4,0(r18)
 100978c:	880b883a 	mov	r5,r17
 1009790:	800d883a 	mov	r6,r16
 1009794:	dfc00317 	ldw	ra,12(sp)
 1009798:	dc800217 	ldw	r18,8(sp)
 100979c:	dc400117 	ldw	r17,4(sp)
 10097a0:	dc000017 	ldw	r16,0(sp)
 10097a4:	dec00404 	addi	sp,sp,16
 10097a8:	100a1f41 	jmpi	100a1f4 <__swbuf_r>
 10097ac:	91000017 	ldw	r4,0(r18)
 10097b0:	180b883a 	mov	r5,r3
 10097b4:	003ff606 	br	1009790 <putc+0xe8>

010097b8 <_putc_r>:
 10097b8:	f811883a 	mov	r8,ra
 10097bc:	100c3d80 	call	100c3d8 <_mcount>
 10097c0:	403f883a 	mov	ra,r8
 10097c4:	defffc04 	addi	sp,sp,-16
 10097c8:	dfc00315 	stw	ra,12(sp)
 10097cc:	dc400215 	stw	r17,8(sp)
 10097d0:	dc000115 	stw	r16,4(sp)
 10097d4:	2021883a 	mov	r16,r4
 10097d8:	2823883a 	mov	r17,r5
 10097dc:	20000226 	beq	r4,zero,10097e8 <_putc_r+0x30>
 10097e0:	20800e17 	ldw	r2,56(r4)
 10097e4:	10001026 	beq	r2,zero,1009828 <_putc_r+0x70>
 10097e8:	30800217 	ldw	r2,8(r6)
 10097ec:	10ffffc4 	addi	r3,r2,-1
 10097f0:	30c00215 	stw	r3,8(r6)
 10097f4:	18001316 	blt	r3,zero,1009844 <_putc_r+0x8c>
 10097f8:	30800017 	ldw	r2,0(r6)
 10097fc:	14400005 	stb	r17,0(r2)
 1009800:	30c00017 	ldw	r3,0(r6)
 1009804:	18800044 	addi	r2,r3,1
 1009808:	18c00003 	ldbu	r3,0(r3)
 100980c:	30800015 	stw	r2,0(r6)
 1009810:	1805883a 	mov	r2,r3
 1009814:	dfc00317 	ldw	ra,12(sp)
 1009818:	dc400217 	ldw	r17,8(sp)
 100981c:	dc000117 	ldw	r16,4(sp)
 1009820:	dec00404 	addi	sp,sp,16
 1009824:	f800283a 	ret
 1009828:	d9800015 	stw	r6,0(sp)
 100982c:	1006a8c0 	call	1006a8c <__sinit>
 1009830:	d9800017 	ldw	r6,0(sp)
 1009834:	30800217 	ldw	r2,8(r6)
 1009838:	10ffffc4 	addi	r3,r2,-1
 100983c:	30c00215 	stw	r3,8(r6)
 1009840:	183fed0e 	bge	r3,zero,10097f8 <_putc_r+0x40>
 1009844:	30800617 	ldw	r2,24(r6)
 1009848:	18800e16 	blt	r3,r2,1009884 <_putc_r+0xcc>
 100984c:	30800017 	ldw	r2,0(r6)
 1009850:	14400005 	stb	r17,0(r2)
 1009854:	31000017 	ldw	r4,0(r6)
 1009858:	00800284 	movi	r2,10
 100985c:	20c00003 	ldbu	r3,0(r4)
 1009860:	18800f26 	beq	r3,r2,10098a0 <_putc_r+0xe8>
 1009864:	20800044 	addi	r2,r4,1
 1009868:	30800015 	stw	r2,0(r6)
 100986c:	1805883a 	mov	r2,r3
 1009870:	dfc00317 	ldw	ra,12(sp)
 1009874:	dc400217 	ldw	r17,8(sp)
 1009878:	dc000117 	ldw	r16,4(sp)
 100987c:	dec00404 	addi	sp,sp,16
 1009880:	f800283a 	ret
 1009884:	8009883a 	mov	r4,r16
 1009888:	880b883a 	mov	r5,r17
 100988c:	dfc00317 	ldw	ra,12(sp)
 1009890:	dc400217 	ldw	r17,8(sp)
 1009894:	dc000117 	ldw	r16,4(sp)
 1009898:	dec00404 	addi	sp,sp,16
 100989c:	100a1f41 	jmpi	100a1f4 <__swbuf_r>
 10098a0:	8009883a 	mov	r4,r16
 10098a4:	180b883a 	mov	r5,r3
 10098a8:	003ff806 	br	100988c <_putc_r+0xd4>

010098ac <_realloc_r>:
 10098ac:	f811883a 	mov	r8,ra
 10098b0:	100c3d80 	call	100c3d8 <_mcount>
 10098b4:	403f883a 	mov	ra,r8
 10098b8:	defff404 	addi	sp,sp,-48
 10098bc:	dfc00b15 	stw	ra,44(sp)
 10098c0:	df000a15 	stw	fp,40(sp)
 10098c4:	ddc00915 	stw	r23,36(sp)
 10098c8:	dd800815 	stw	r22,32(sp)
 10098cc:	dd400715 	stw	r21,28(sp)
 10098d0:	dd000615 	stw	r20,24(sp)
 10098d4:	dcc00515 	stw	r19,20(sp)
 10098d8:	dc800415 	stw	r18,16(sp)
 10098dc:	dc400315 	stw	r17,12(sp)
 10098e0:	dc000215 	stw	r16,8(sp)
 10098e4:	2825883a 	mov	r18,r5
 10098e8:	3023883a 	mov	r17,r6
 10098ec:	202d883a 	mov	r22,r4
 10098f0:	2800c926 	beq	r5,zero,1009c18 <_realloc_r+0x36c>
 10098f4:	100cbcc0 	call	100cbcc <__malloc_lock>
 10098f8:	943ffe04 	addi	r16,r18,-8
 10098fc:	88c002c4 	addi	r3,r17,11
 1009900:	00800584 	movi	r2,22
 1009904:	82000117 	ldw	r8,4(r16)
 1009908:	10c01b2e 	bgeu	r2,r3,1009978 <_realloc_r+0xcc>
 100990c:	00bffe04 	movi	r2,-8
 1009910:	188e703a 	and	r7,r3,r2
 1009914:	3839883a 	mov	fp,r7
 1009918:	38001a16 	blt	r7,zero,1009984 <_realloc_r+0xd8>
 100991c:	e4401936 	bltu	fp,r17,1009984 <_realloc_r+0xd8>
 1009920:	013fff04 	movi	r4,-4
 1009924:	4126703a 	and	r19,r8,r4
 1009928:	99c02616 	blt	r19,r7,10099c4 <_realloc_r+0x118>
 100992c:	802b883a 	mov	r21,r16
 1009930:	9829883a 	mov	r20,r19
 1009934:	84000204 	addi	r16,r16,8
 1009938:	a80f883a 	mov	r7,r21
 100993c:	a70dc83a 	sub	r6,r20,fp
 1009940:	008003c4 	movi	r2,15
 1009944:	1180c136 	bltu	r2,r6,1009c4c <_realloc_r+0x3a0>
 1009948:	38800117 	ldw	r2,4(r7)
 100994c:	a549883a 	add	r4,r20,r21
 1009950:	1080004c 	andi	r2,r2,1
 1009954:	a084b03a 	or	r2,r20,r2
 1009958:	38800115 	stw	r2,4(r7)
 100995c:	20c00117 	ldw	r3,4(r4)
 1009960:	18c00054 	ori	r3,r3,1
 1009964:	20c00115 	stw	r3,4(r4)
 1009968:	b009883a 	mov	r4,r22
 100996c:	100cce00 	call	100cce0 <__malloc_unlock>
 1009970:	8023883a 	mov	r17,r16
 1009974:	00000606 	br	1009990 <_realloc_r+0xe4>
 1009978:	01c00404 	movi	r7,16
 100997c:	3839883a 	mov	fp,r7
 1009980:	e47fe72e 	bgeu	fp,r17,1009920 <_realloc_r+0x74>
 1009984:	00800304 	movi	r2,12
 1009988:	0023883a 	mov	r17,zero
 100998c:	b0800015 	stw	r2,0(r22)
 1009990:	8805883a 	mov	r2,r17
 1009994:	dfc00b17 	ldw	ra,44(sp)
 1009998:	df000a17 	ldw	fp,40(sp)
 100999c:	ddc00917 	ldw	r23,36(sp)
 10099a0:	dd800817 	ldw	r22,32(sp)
 10099a4:	dd400717 	ldw	r21,28(sp)
 10099a8:	dd000617 	ldw	r20,24(sp)
 10099ac:	dcc00517 	ldw	r19,20(sp)
 10099b0:	dc800417 	ldw	r18,16(sp)
 10099b4:	dc400317 	ldw	r17,12(sp)
 10099b8:	dc000217 	ldw	r16,8(sp)
 10099bc:	dec00c04 	addi	sp,sp,48
 10099c0:	f800283a 	ret
 10099c4:	008040b4 	movhi	r2,258
 10099c8:	109a3c04 	addi	r2,r2,26864
 10099cc:	12400217 	ldw	r9,8(r2)
 10099d0:	84cd883a 	add	r6,r16,r19
 10099d4:	802b883a 	mov	r21,r16
 10099d8:	3240b926 	beq	r6,r9,1009cc0 <_realloc_r+0x414>
 10099dc:	31400117 	ldw	r5,4(r6)
 10099e0:	00bfff84 	movi	r2,-2
 10099e4:	2884703a 	and	r2,r5,r2
 10099e8:	1185883a 	add	r2,r2,r6
 10099ec:	10c00117 	ldw	r3,4(r2)
 10099f0:	18c0004c 	andi	r3,r3,1
 10099f4:	1807003a 	cmpeq	r3,r3,zero
 10099f8:	1800a326 	beq	r3,zero,1009c88 <_realloc_r+0x3dc>
 10099fc:	2908703a 	and	r4,r5,r4
 1009a00:	9929883a 	add	r20,r19,r4
 1009a04:	a1c0a30e 	bge	r20,r7,1009c94 <_realloc_r+0x3e8>
 1009a08:	4080004c 	andi	r2,r8,1
 1009a0c:	1000551e 	bne	r2,zero,1009b64 <_realloc_r+0x2b8>
 1009a10:	80800017 	ldw	r2,0(r16)
 1009a14:	80afc83a 	sub	r23,r16,r2
 1009a18:	b8c00117 	ldw	r3,4(r23)
 1009a1c:	00bfff04 	movi	r2,-4
 1009a20:	1884703a 	and	r2,r3,r2
 1009a24:	30002e26 	beq	r6,zero,1009ae0 <_realloc_r+0x234>
 1009a28:	3240b926 	beq	r6,r9,1009d10 <_realloc_r+0x464>
 1009a2c:	98a9883a 	add	r20,r19,r2
 1009a30:	2509883a 	add	r4,r4,r20
 1009a34:	d9000015 	stw	r4,0(sp)
 1009a38:	21c02a16 	blt	r4,r7,1009ae4 <_realloc_r+0x238>
 1009a3c:	30800317 	ldw	r2,12(r6)
 1009a40:	30c00217 	ldw	r3,8(r6)
 1009a44:	01400904 	movi	r5,36
 1009a48:	99bfff04 	addi	r6,r19,-4
 1009a4c:	18800315 	stw	r2,12(r3)
 1009a50:	10c00215 	stw	r3,8(r2)
 1009a54:	b9000317 	ldw	r4,12(r23)
 1009a58:	b8800217 	ldw	r2,8(r23)
 1009a5c:	b82b883a 	mov	r21,r23
 1009a60:	bc000204 	addi	r16,r23,8
 1009a64:	20800215 	stw	r2,8(r4)
 1009a68:	11000315 	stw	r4,12(r2)
 1009a6c:	2980e436 	bltu	r5,r6,1009e00 <_realloc_r+0x554>
 1009a70:	008004c4 	movi	r2,19
 1009a74:	9009883a 	mov	r4,r18
 1009a78:	8011883a 	mov	r8,r16
 1009a7c:	11800f2e 	bgeu	r2,r6,1009abc <_realloc_r+0x210>
 1009a80:	90800017 	ldw	r2,0(r18)
 1009a84:	ba000404 	addi	r8,r23,16
 1009a88:	91000204 	addi	r4,r18,8
 1009a8c:	b8800215 	stw	r2,8(r23)
 1009a90:	90c00117 	ldw	r3,4(r18)
 1009a94:	008006c4 	movi	r2,27
 1009a98:	b8c00315 	stw	r3,12(r23)
 1009a9c:	1180072e 	bgeu	r2,r6,1009abc <_realloc_r+0x210>
 1009aa0:	90c00217 	ldw	r3,8(r18)
 1009aa4:	ba000604 	addi	r8,r23,24
 1009aa8:	91000404 	addi	r4,r18,16
 1009aac:	b8c00415 	stw	r3,16(r23)
 1009ab0:	90800317 	ldw	r2,12(r18)
 1009ab4:	b8800515 	stw	r2,20(r23)
 1009ab8:	3140e726 	beq	r6,r5,1009e58 <_realloc_r+0x5ac>
 1009abc:	20800017 	ldw	r2,0(r4)
 1009ac0:	dd000017 	ldw	r20,0(sp)
 1009ac4:	b80f883a 	mov	r7,r23
 1009ac8:	40800015 	stw	r2,0(r8)
 1009acc:	20c00117 	ldw	r3,4(r4)
 1009ad0:	40c00115 	stw	r3,4(r8)
 1009ad4:	20800217 	ldw	r2,8(r4)
 1009ad8:	40800215 	stw	r2,8(r8)
 1009adc:	003f9706 	br	100993c <_realloc_r+0x90>
 1009ae0:	98a9883a 	add	r20,r19,r2
 1009ae4:	a1c01f16 	blt	r20,r7,1009b64 <_realloc_r+0x2b8>
 1009ae8:	b8c00317 	ldw	r3,12(r23)
 1009aec:	b8800217 	ldw	r2,8(r23)
 1009af0:	99bfff04 	addi	r6,r19,-4
 1009af4:	01400904 	movi	r5,36
 1009af8:	b82b883a 	mov	r21,r23
 1009afc:	18800215 	stw	r2,8(r3)
 1009b00:	10c00315 	stw	r3,12(r2)
 1009b04:	bc000204 	addi	r16,r23,8
 1009b08:	2980c336 	bltu	r5,r6,1009e18 <_realloc_r+0x56c>
 1009b0c:	008004c4 	movi	r2,19
 1009b10:	9009883a 	mov	r4,r18
 1009b14:	8011883a 	mov	r8,r16
 1009b18:	11800f2e 	bgeu	r2,r6,1009b58 <_realloc_r+0x2ac>
 1009b1c:	90800017 	ldw	r2,0(r18)
 1009b20:	ba000404 	addi	r8,r23,16
 1009b24:	91000204 	addi	r4,r18,8
 1009b28:	b8800215 	stw	r2,8(r23)
 1009b2c:	90c00117 	ldw	r3,4(r18)
 1009b30:	008006c4 	movi	r2,27
 1009b34:	b8c00315 	stw	r3,12(r23)
 1009b38:	1180072e 	bgeu	r2,r6,1009b58 <_realloc_r+0x2ac>
 1009b3c:	90c00217 	ldw	r3,8(r18)
 1009b40:	ba000604 	addi	r8,r23,24
 1009b44:	91000404 	addi	r4,r18,16
 1009b48:	b8c00415 	stw	r3,16(r23)
 1009b4c:	90800317 	ldw	r2,12(r18)
 1009b50:	b8800515 	stw	r2,20(r23)
 1009b54:	3140c726 	beq	r6,r5,1009e74 <_realloc_r+0x5c8>
 1009b58:	20800017 	ldw	r2,0(r4)
 1009b5c:	b80f883a 	mov	r7,r23
 1009b60:	003fd906 	br	1009ac8 <_realloc_r+0x21c>
 1009b64:	880b883a 	mov	r5,r17
 1009b68:	b009883a 	mov	r4,r22
 1009b6c:	1007abc0 	call	1007abc <_malloc_r>
 1009b70:	1023883a 	mov	r17,r2
 1009b74:	10002526 	beq	r2,zero,1009c0c <_realloc_r+0x360>
 1009b78:	80800117 	ldw	r2,4(r16)
 1009b7c:	00ffff84 	movi	r3,-2
 1009b80:	893ffe04 	addi	r4,r17,-8
 1009b84:	10c4703a 	and	r2,r2,r3
 1009b88:	8085883a 	add	r2,r16,r2
 1009b8c:	20809526 	beq	r4,r2,1009de4 <_realloc_r+0x538>
 1009b90:	99bfff04 	addi	r6,r19,-4
 1009b94:	01c00904 	movi	r7,36
 1009b98:	39804536 	bltu	r7,r6,1009cb0 <_realloc_r+0x404>
 1009b9c:	008004c4 	movi	r2,19
 1009ba0:	9009883a 	mov	r4,r18
 1009ba4:	880b883a 	mov	r5,r17
 1009ba8:	11800f2e 	bgeu	r2,r6,1009be8 <_realloc_r+0x33c>
 1009bac:	90800017 	ldw	r2,0(r18)
 1009bb0:	89400204 	addi	r5,r17,8
 1009bb4:	91000204 	addi	r4,r18,8
 1009bb8:	88800015 	stw	r2,0(r17)
 1009bbc:	90c00117 	ldw	r3,4(r18)
 1009bc0:	008006c4 	movi	r2,27
 1009bc4:	88c00115 	stw	r3,4(r17)
 1009bc8:	1180072e 	bgeu	r2,r6,1009be8 <_realloc_r+0x33c>
 1009bcc:	90c00217 	ldw	r3,8(r18)
 1009bd0:	89400404 	addi	r5,r17,16
 1009bd4:	91000404 	addi	r4,r18,16
 1009bd8:	88c00215 	stw	r3,8(r17)
 1009bdc:	90800317 	ldw	r2,12(r18)
 1009be0:	88800315 	stw	r2,12(r17)
 1009be4:	31c09126 	beq	r6,r7,1009e2c <_realloc_r+0x580>
 1009be8:	20800017 	ldw	r2,0(r4)
 1009bec:	28800015 	stw	r2,0(r5)
 1009bf0:	20c00117 	ldw	r3,4(r4)
 1009bf4:	28c00115 	stw	r3,4(r5)
 1009bf8:	20800217 	ldw	r2,8(r4)
 1009bfc:	28800215 	stw	r2,8(r5)
 1009c00:	900b883a 	mov	r5,r18
 1009c04:	b009883a 	mov	r4,r22
 1009c08:	1006ebc0 	call	1006ebc <_free_r>
 1009c0c:	b009883a 	mov	r4,r22
 1009c10:	100cce00 	call	100cce0 <__malloc_unlock>
 1009c14:	003f5e06 	br	1009990 <_realloc_r+0xe4>
 1009c18:	300b883a 	mov	r5,r6
 1009c1c:	dfc00b17 	ldw	ra,44(sp)
 1009c20:	df000a17 	ldw	fp,40(sp)
 1009c24:	ddc00917 	ldw	r23,36(sp)
 1009c28:	dd800817 	ldw	r22,32(sp)
 1009c2c:	dd400717 	ldw	r21,28(sp)
 1009c30:	dd000617 	ldw	r20,24(sp)
 1009c34:	dcc00517 	ldw	r19,20(sp)
 1009c38:	dc800417 	ldw	r18,16(sp)
 1009c3c:	dc400317 	ldw	r17,12(sp)
 1009c40:	dc000217 	ldw	r16,8(sp)
 1009c44:	dec00c04 	addi	sp,sp,48
 1009c48:	1007abc1 	jmpi	1007abc <_malloc_r>
 1009c4c:	38800117 	ldw	r2,4(r7)
 1009c50:	e54b883a 	add	r5,fp,r21
 1009c54:	31000054 	ori	r4,r6,1
 1009c58:	1080004c 	andi	r2,r2,1
 1009c5c:	1704b03a 	or	r2,r2,fp
 1009c60:	38800115 	stw	r2,4(r7)
 1009c64:	29000115 	stw	r4,4(r5)
 1009c68:	2987883a 	add	r3,r5,r6
 1009c6c:	18800117 	ldw	r2,4(r3)
 1009c70:	29400204 	addi	r5,r5,8
 1009c74:	b009883a 	mov	r4,r22
 1009c78:	10800054 	ori	r2,r2,1
 1009c7c:	18800115 	stw	r2,4(r3)
 1009c80:	1006ebc0 	call	1006ebc <_free_r>
 1009c84:	003f3806 	br	1009968 <_realloc_r+0xbc>
 1009c88:	000d883a 	mov	r6,zero
 1009c8c:	0009883a 	mov	r4,zero
 1009c90:	003f5d06 	br	1009a08 <_realloc_r+0x15c>
 1009c94:	30c00217 	ldw	r3,8(r6)
 1009c98:	30800317 	ldw	r2,12(r6)
 1009c9c:	800f883a 	mov	r7,r16
 1009ca0:	84000204 	addi	r16,r16,8
 1009ca4:	10c00215 	stw	r3,8(r2)
 1009ca8:	18800315 	stw	r2,12(r3)
 1009cac:	003f2306 	br	100993c <_realloc_r+0x90>
 1009cb0:	8809883a 	mov	r4,r17
 1009cb4:	900b883a 	mov	r5,r18
 1009cb8:	10083a40 	call	10083a4 <memmove>
 1009cbc:	003fd006 	br	1009c00 <_realloc_r+0x354>
 1009cc0:	30800117 	ldw	r2,4(r6)
 1009cc4:	e0c00404 	addi	r3,fp,16
 1009cc8:	1108703a 	and	r4,r2,r4
 1009ccc:	9905883a 	add	r2,r19,r4
 1009cd0:	10ff4d16 	blt	r2,r3,1009a08 <_realloc_r+0x15c>
 1009cd4:	1705c83a 	sub	r2,r2,fp
 1009cd8:	870b883a 	add	r5,r16,fp
 1009cdc:	10800054 	ori	r2,r2,1
 1009ce0:	28800115 	stw	r2,4(r5)
 1009ce4:	80c00117 	ldw	r3,4(r16)
 1009ce8:	008040b4 	movhi	r2,258
 1009cec:	109a3c04 	addi	r2,r2,26864
 1009cf0:	b009883a 	mov	r4,r22
 1009cf4:	18c0004c 	andi	r3,r3,1
 1009cf8:	e0c6b03a 	or	r3,fp,r3
 1009cfc:	11400215 	stw	r5,8(r2)
 1009d00:	80c00115 	stw	r3,4(r16)
 1009d04:	100cce00 	call	100cce0 <__malloc_unlock>
 1009d08:	84400204 	addi	r17,r16,8
 1009d0c:	003f2006 	br	1009990 <_realloc_r+0xe4>
 1009d10:	98a9883a 	add	r20,r19,r2
 1009d14:	2509883a 	add	r4,r4,r20
 1009d18:	e0800404 	addi	r2,fp,16
 1009d1c:	d9000115 	stw	r4,4(sp)
 1009d20:	20bf7016 	blt	r4,r2,1009ae4 <_realloc_r+0x238>
 1009d24:	b8c00317 	ldw	r3,12(r23)
 1009d28:	b8800217 	ldw	r2,8(r23)
 1009d2c:	99bfff04 	addi	r6,r19,-4
 1009d30:	01400904 	movi	r5,36
 1009d34:	18800215 	stw	r2,8(r3)
 1009d38:	10c00315 	stw	r3,12(r2)
 1009d3c:	bc400204 	addi	r17,r23,8
 1009d40:	29804136 	bltu	r5,r6,1009e48 <_realloc_r+0x59c>
 1009d44:	008004c4 	movi	r2,19
 1009d48:	9009883a 	mov	r4,r18
 1009d4c:	880f883a 	mov	r7,r17
 1009d50:	11800f2e 	bgeu	r2,r6,1009d90 <_realloc_r+0x4e4>
 1009d54:	90800017 	ldw	r2,0(r18)
 1009d58:	b9c00404 	addi	r7,r23,16
 1009d5c:	91000204 	addi	r4,r18,8
 1009d60:	b8800215 	stw	r2,8(r23)
 1009d64:	90c00117 	ldw	r3,4(r18)
 1009d68:	008006c4 	movi	r2,27
 1009d6c:	b8c00315 	stw	r3,12(r23)
 1009d70:	1180072e 	bgeu	r2,r6,1009d90 <_realloc_r+0x4e4>
 1009d74:	90c00217 	ldw	r3,8(r18)
 1009d78:	b9c00604 	addi	r7,r23,24
 1009d7c:	91000404 	addi	r4,r18,16
 1009d80:	b8c00415 	stw	r3,16(r23)
 1009d84:	90800317 	ldw	r2,12(r18)
 1009d88:	b8800515 	stw	r2,20(r23)
 1009d8c:	31404026 	beq	r6,r5,1009e90 <_realloc_r+0x5e4>
 1009d90:	20800017 	ldw	r2,0(r4)
 1009d94:	38800015 	stw	r2,0(r7)
 1009d98:	20c00117 	ldw	r3,4(r4)
 1009d9c:	38c00115 	stw	r3,4(r7)
 1009da0:	20800217 	ldw	r2,8(r4)
 1009da4:	38800215 	stw	r2,8(r7)
 1009da8:	d8c00117 	ldw	r3,4(sp)
 1009dac:	bf0b883a 	add	r5,r23,fp
 1009db0:	b009883a 	mov	r4,r22
 1009db4:	1f05c83a 	sub	r2,r3,fp
 1009db8:	10800054 	ori	r2,r2,1
 1009dbc:	28800115 	stw	r2,4(r5)
 1009dc0:	b8c00117 	ldw	r3,4(r23)
 1009dc4:	008040b4 	movhi	r2,258
 1009dc8:	109a3c04 	addi	r2,r2,26864
 1009dcc:	11400215 	stw	r5,8(r2)
 1009dd0:	18c0004c 	andi	r3,r3,1
 1009dd4:	e0c6b03a 	or	r3,fp,r3
 1009dd8:	b8c00115 	stw	r3,4(r23)
 1009ddc:	100cce00 	call	100cce0 <__malloc_unlock>
 1009de0:	003eeb06 	br	1009990 <_realloc_r+0xe4>
 1009de4:	20800117 	ldw	r2,4(r4)
 1009de8:	00ffff04 	movi	r3,-4
 1009dec:	800f883a 	mov	r7,r16
 1009df0:	10c4703a 	and	r2,r2,r3
 1009df4:	98a9883a 	add	r20,r19,r2
 1009df8:	84000204 	addi	r16,r16,8
 1009dfc:	003ecf06 	br	100993c <_realloc_r+0x90>
 1009e00:	900b883a 	mov	r5,r18
 1009e04:	8009883a 	mov	r4,r16
 1009e08:	10083a40 	call	10083a4 <memmove>
 1009e0c:	dd000017 	ldw	r20,0(sp)
 1009e10:	b80f883a 	mov	r7,r23
 1009e14:	003ec906 	br	100993c <_realloc_r+0x90>
 1009e18:	900b883a 	mov	r5,r18
 1009e1c:	8009883a 	mov	r4,r16
 1009e20:	10083a40 	call	10083a4 <memmove>
 1009e24:	b80f883a 	mov	r7,r23
 1009e28:	003ec406 	br	100993c <_realloc_r+0x90>
 1009e2c:	90c00417 	ldw	r3,16(r18)
 1009e30:	89400604 	addi	r5,r17,24
 1009e34:	91000604 	addi	r4,r18,24
 1009e38:	88c00415 	stw	r3,16(r17)
 1009e3c:	90800517 	ldw	r2,20(r18)
 1009e40:	88800515 	stw	r2,20(r17)
 1009e44:	003f6806 	br	1009be8 <_realloc_r+0x33c>
 1009e48:	900b883a 	mov	r5,r18
 1009e4c:	8809883a 	mov	r4,r17
 1009e50:	10083a40 	call	10083a4 <memmove>
 1009e54:	003fd406 	br	1009da8 <_realloc_r+0x4fc>
 1009e58:	90c00417 	ldw	r3,16(r18)
 1009e5c:	91000604 	addi	r4,r18,24
 1009e60:	ba000804 	addi	r8,r23,32
 1009e64:	b8c00615 	stw	r3,24(r23)
 1009e68:	90800517 	ldw	r2,20(r18)
 1009e6c:	b8800715 	stw	r2,28(r23)
 1009e70:	003f1206 	br	1009abc <_realloc_r+0x210>
 1009e74:	90c00417 	ldw	r3,16(r18)
 1009e78:	91000604 	addi	r4,r18,24
 1009e7c:	ba000804 	addi	r8,r23,32
 1009e80:	b8c00615 	stw	r3,24(r23)
 1009e84:	90800517 	ldw	r2,20(r18)
 1009e88:	b8800715 	stw	r2,28(r23)
 1009e8c:	003f3206 	br	1009b58 <_realloc_r+0x2ac>
 1009e90:	90c00417 	ldw	r3,16(r18)
 1009e94:	91000604 	addi	r4,r18,24
 1009e98:	b9c00804 	addi	r7,r23,32
 1009e9c:	b8c00615 	stw	r3,24(r23)
 1009ea0:	90800517 	ldw	r2,20(r18)
 1009ea4:	b8800715 	stw	r2,28(r23)
 1009ea8:	003fb906 	br	1009d90 <_realloc_r+0x4e4>

01009eac <__isinfd>:
 1009eac:	f811883a 	mov	r8,ra
 1009eb0:	100c3d80 	call	100c3d8 <_mcount>
 1009eb4:	403f883a 	mov	ra,r8
 1009eb8:	200d883a 	mov	r6,r4
 1009ebc:	0109c83a 	sub	r4,zero,r4
 1009ec0:	2188b03a 	or	r4,r4,r6
 1009ec4:	2008d7fa 	srli	r4,r4,31
 1009ec8:	00a00034 	movhi	r2,32768
 1009ecc:	10bfffc4 	addi	r2,r2,-1
 1009ed0:	1144703a 	and	r2,r2,r5
 1009ed4:	2088b03a 	or	r4,r4,r2
 1009ed8:	009ffc34 	movhi	r2,32752
 1009edc:	1105c83a 	sub	r2,r2,r4
 1009ee0:	0087c83a 	sub	r3,zero,r2
 1009ee4:	10c4b03a 	or	r2,r2,r3
 1009ee8:	1004d7fa 	srli	r2,r2,31
 1009eec:	00c00044 	movi	r3,1
 1009ef0:	1885c83a 	sub	r2,r3,r2
 1009ef4:	f800283a 	ret

01009ef8 <__isnand>:
 1009ef8:	f811883a 	mov	r8,ra
 1009efc:	100c3d80 	call	100c3d8 <_mcount>
 1009f00:	403f883a 	mov	ra,r8
 1009f04:	200d883a 	mov	r6,r4
 1009f08:	0109c83a 	sub	r4,zero,r4
 1009f0c:	2188b03a 	or	r4,r4,r6
 1009f10:	2008d7fa 	srli	r4,r4,31
 1009f14:	00a00034 	movhi	r2,32768
 1009f18:	10bfffc4 	addi	r2,r2,-1
 1009f1c:	1144703a 	and	r2,r2,r5
 1009f20:	2088b03a 	or	r4,r4,r2
 1009f24:	009ffc34 	movhi	r2,32752
 1009f28:	1105c83a 	sub	r2,r2,r4
 1009f2c:	1004d7fa 	srli	r2,r2,31
 1009f30:	f800283a 	ret

01009f34 <_sbrk_r>:
 1009f34:	f811883a 	mov	r8,ra
 1009f38:	100c3d80 	call	100c3d8 <_mcount>
 1009f3c:	403f883a 	mov	ra,r8
 1009f40:	defffd04 	addi	sp,sp,-12
 1009f44:	dfc00215 	stw	ra,8(sp)
 1009f48:	dc400115 	stw	r17,4(sp)
 1009f4c:	dc000015 	stw	r16,0(sp)
 1009f50:	040040f4 	movhi	r16,259
 1009f54:	84175a04 	addi	r16,r16,23912
 1009f58:	2023883a 	mov	r17,r4
 1009f5c:	80000015 	stw	zero,0(r16)
 1009f60:	2809883a 	mov	r4,r5
 1009f64:	100c6940 	call	100c694 <sbrk>
 1009f68:	1007883a 	mov	r3,r2
 1009f6c:	00bfffc4 	movi	r2,-1
 1009f70:	18800626 	beq	r3,r2,1009f8c <_sbrk_r+0x58>
 1009f74:	1805883a 	mov	r2,r3
 1009f78:	dfc00217 	ldw	ra,8(sp)
 1009f7c:	dc400117 	ldw	r17,4(sp)
 1009f80:	dc000017 	ldw	r16,0(sp)
 1009f84:	dec00304 	addi	sp,sp,12
 1009f88:	f800283a 	ret
 1009f8c:	80800017 	ldw	r2,0(r16)
 1009f90:	103ff826 	beq	r2,zero,1009f74 <_sbrk_r+0x40>
 1009f94:	88800015 	stw	r2,0(r17)
 1009f98:	1805883a 	mov	r2,r3
 1009f9c:	dfc00217 	ldw	ra,8(sp)
 1009fa0:	dc400117 	ldw	r17,4(sp)
 1009fa4:	dc000017 	ldw	r16,0(sp)
 1009fa8:	dec00304 	addi	sp,sp,12
 1009fac:	f800283a 	ret

01009fb0 <__sclose>:
 1009fb0:	f811883a 	mov	r8,ra
 1009fb4:	100c3d80 	call	100c3d8 <_mcount>
 1009fb8:	403f883a 	mov	ra,r8
 1009fbc:	2940038f 	ldh	r5,14(r5)
 1009fc0:	100a4b01 	jmpi	100a4b0 <_close_r>

01009fc4 <__sseek>:
 1009fc4:	f811883a 	mov	r8,ra
 1009fc8:	100c3d80 	call	100c3d8 <_mcount>
 1009fcc:	403f883a 	mov	ra,r8
 1009fd0:	defffe04 	addi	sp,sp,-8
 1009fd4:	dfc00115 	stw	ra,4(sp)
 1009fd8:	dc000015 	stw	r16,0(sp)
 1009fdc:	2821883a 	mov	r16,r5
 1009fe0:	2940038f 	ldh	r5,14(r5)
 1009fe4:	100a7640 	call	100a764 <_lseek_r>
 1009fe8:	1007883a 	mov	r3,r2
 1009fec:	00bfffc4 	movi	r2,-1
 1009ff0:	18800926 	beq	r3,r2,100a018 <__sseek+0x54>
 1009ff4:	8080030b 	ldhu	r2,12(r16)
 1009ff8:	80c01415 	stw	r3,80(r16)
 1009ffc:	10840014 	ori	r2,r2,4096
 100a000:	8080030d 	sth	r2,12(r16)
 100a004:	1805883a 	mov	r2,r3
 100a008:	dfc00117 	ldw	ra,4(sp)
 100a00c:	dc000017 	ldw	r16,0(sp)
 100a010:	dec00204 	addi	sp,sp,8
 100a014:	f800283a 	ret
 100a018:	8080030b 	ldhu	r2,12(r16)
 100a01c:	10bbffcc 	andi	r2,r2,61439
 100a020:	8080030d 	sth	r2,12(r16)
 100a024:	1805883a 	mov	r2,r3
 100a028:	dfc00117 	ldw	ra,4(sp)
 100a02c:	dc000017 	ldw	r16,0(sp)
 100a030:	dec00204 	addi	sp,sp,8
 100a034:	f800283a 	ret

0100a038 <__swrite>:
 100a038:	f811883a 	mov	r8,ra
 100a03c:	100c3d80 	call	100c3d8 <_mcount>
 100a040:	403f883a 	mov	ra,r8
 100a044:	defffb04 	addi	sp,sp,-20
 100a048:	dfc00415 	stw	ra,16(sp)
 100a04c:	dcc00315 	stw	r19,12(sp)
 100a050:	dc800215 	stw	r18,8(sp)
 100a054:	dc400115 	stw	r17,4(sp)
 100a058:	dc000015 	stw	r16,0(sp)
 100a05c:	2880030b 	ldhu	r2,12(r5)
 100a060:	3027883a 	mov	r19,r6
 100a064:	3825883a 	mov	r18,r7
 100a068:	1080400c 	andi	r2,r2,256
 100a06c:	2821883a 	mov	r16,r5
 100a070:	000d883a 	mov	r6,zero
 100a074:	01c00084 	movi	r7,2
 100a078:	2023883a 	mov	r17,r4
 100a07c:	10000226 	beq	r2,zero,100a088 <__swrite+0x50>
 100a080:	2940038f 	ldh	r5,14(r5)
 100a084:	100a7640 	call	100a764 <_lseek_r>
 100a088:	8080030b 	ldhu	r2,12(r16)
 100a08c:	8140038f 	ldh	r5,14(r16)
 100a090:	8809883a 	mov	r4,r17
 100a094:	10bbffcc 	andi	r2,r2,61439
 100a098:	980d883a 	mov	r6,r19
 100a09c:	900f883a 	mov	r7,r18
 100a0a0:	8080030d 	sth	r2,12(r16)
 100a0a4:	dfc00417 	ldw	ra,16(sp)
 100a0a8:	dcc00317 	ldw	r19,12(sp)
 100a0ac:	dc800217 	ldw	r18,8(sp)
 100a0b0:	dc400117 	ldw	r17,4(sp)
 100a0b4:	dc000017 	ldw	r16,0(sp)
 100a0b8:	dec00504 	addi	sp,sp,20
 100a0bc:	100a3581 	jmpi	100a358 <_write_r>

0100a0c0 <__sread>:
 100a0c0:	f811883a 	mov	r8,ra
 100a0c4:	100c3d80 	call	100c3d8 <_mcount>
 100a0c8:	403f883a 	mov	ra,r8
 100a0cc:	defffe04 	addi	sp,sp,-8
 100a0d0:	dfc00115 	stw	ra,4(sp)
 100a0d4:	dc000015 	stw	r16,0(sp)
 100a0d8:	2821883a 	mov	r16,r5
 100a0dc:	2940038f 	ldh	r5,14(r5)
 100a0e0:	100a7e80 	call	100a7e8 <_read_r>
 100a0e4:	1007883a 	mov	r3,r2
 100a0e8:	10000816 	blt	r2,zero,100a10c <__sread+0x4c>
 100a0ec:	80801417 	ldw	r2,80(r16)
 100a0f0:	10c5883a 	add	r2,r2,r3
 100a0f4:	80801415 	stw	r2,80(r16)
 100a0f8:	1805883a 	mov	r2,r3
 100a0fc:	dfc00117 	ldw	ra,4(sp)
 100a100:	dc000017 	ldw	r16,0(sp)
 100a104:	dec00204 	addi	sp,sp,8
 100a108:	f800283a 	ret
 100a10c:	8080030b 	ldhu	r2,12(r16)
 100a110:	10bbffcc 	andi	r2,r2,61439
 100a114:	8080030d 	sth	r2,12(r16)
 100a118:	1805883a 	mov	r2,r3
 100a11c:	dfc00117 	ldw	ra,4(sp)
 100a120:	dc000017 	ldw	r16,0(sp)
 100a124:	dec00204 	addi	sp,sp,8
 100a128:	f800283a 	ret

0100a12c <strcmp>:
 100a12c:	f811883a 	mov	r8,ra
 100a130:	100c3d80 	call	100c3d8 <_mcount>
 100a134:	403f883a 	mov	ra,r8
 100a138:	2144b03a 	or	r2,r4,r5
 100a13c:	108000cc 	andi	r2,r2,3
 100a140:	10001d1e 	bne	r2,zero,100a1b8 <strcmp+0x8c>
 100a144:	200f883a 	mov	r7,r4
 100a148:	28800017 	ldw	r2,0(r5)
 100a14c:	21000017 	ldw	r4,0(r4)
 100a150:	280d883a 	mov	r6,r5
 100a154:	2080161e 	bne	r4,r2,100a1b0 <strcmp+0x84>
 100a158:	023fbff4 	movhi	r8,65279
 100a15c:	423fbfc4 	addi	r8,r8,-257
 100a160:	2207883a 	add	r3,r4,r8
 100a164:	01602074 	movhi	r5,32897
 100a168:	29602004 	addi	r5,r5,-32640
 100a16c:	1946703a 	and	r3,r3,r5
 100a170:	0104303a 	nor	r2,zero,r4
 100a174:	10c4703a 	and	r2,r2,r3
 100a178:	10001c1e 	bne	r2,zero,100a1ec <strcmp+0xc0>
 100a17c:	4013883a 	mov	r9,r8
 100a180:	2811883a 	mov	r8,r5
 100a184:	00000106 	br	100a18c <strcmp+0x60>
 100a188:	1800181e 	bne	r3,zero,100a1ec <strcmp+0xc0>
 100a18c:	39c00104 	addi	r7,r7,4
 100a190:	39000017 	ldw	r4,0(r7)
 100a194:	31800104 	addi	r6,r6,4
 100a198:	31400017 	ldw	r5,0(r6)
 100a19c:	2245883a 	add	r2,r4,r9
 100a1a0:	1204703a 	and	r2,r2,r8
 100a1a4:	0106303a 	nor	r3,zero,r4
 100a1a8:	1886703a 	and	r3,r3,r2
 100a1ac:	217ff626 	beq	r4,r5,100a188 <strcmp+0x5c>
 100a1b0:	3809883a 	mov	r4,r7
 100a1b4:	300b883a 	mov	r5,r6
 100a1b8:	20c00007 	ldb	r3,0(r4)
 100a1bc:	1800051e 	bne	r3,zero,100a1d4 <strcmp+0xa8>
 100a1c0:	00000606 	br	100a1dc <strcmp+0xb0>
 100a1c4:	21000044 	addi	r4,r4,1
 100a1c8:	20c00007 	ldb	r3,0(r4)
 100a1cc:	29400044 	addi	r5,r5,1
 100a1d0:	18000226 	beq	r3,zero,100a1dc <strcmp+0xb0>
 100a1d4:	28800007 	ldb	r2,0(r5)
 100a1d8:	18bffa26 	beq	r3,r2,100a1c4 <strcmp+0x98>
 100a1dc:	20c00003 	ldbu	r3,0(r4)
 100a1e0:	28800003 	ldbu	r2,0(r5)
 100a1e4:	1885c83a 	sub	r2,r3,r2
 100a1e8:	f800283a 	ret
 100a1ec:	0005883a 	mov	r2,zero
 100a1f0:	f800283a 	ret

0100a1f4 <__swbuf_r>:
 100a1f4:	f811883a 	mov	r8,ra
 100a1f8:	100c3d80 	call	100c3d8 <_mcount>
 100a1fc:	403f883a 	mov	ra,r8
 100a200:	defffc04 	addi	sp,sp,-16
 100a204:	dfc00315 	stw	ra,12(sp)
 100a208:	dc400215 	stw	r17,8(sp)
 100a20c:	dc000115 	stw	r16,4(sp)
 100a210:	2023883a 	mov	r17,r4
 100a214:	2821883a 	mov	r16,r5
 100a218:	20000226 	beq	r4,zero,100a224 <__swbuf_r+0x30>
 100a21c:	20800e17 	ldw	r2,56(r4)
 100a220:	10002f26 	beq	r2,zero,100a2e0 <__swbuf_r+0xec>
 100a224:	3080030b 	ldhu	r2,12(r6)
 100a228:	30c00617 	ldw	r3,24(r6)
 100a22c:	1080020c 	andi	r2,r2,8
 100a230:	30c00215 	stw	r3,8(r6)
 100a234:	10002226 	beq	r2,zero,100a2c0 <__swbuf_r+0xcc>
 100a238:	30c00417 	ldw	r3,16(r6)
 100a23c:	18002026 	beq	r3,zero,100a2c0 <__swbuf_r+0xcc>
 100a240:	31000017 	ldw	r4,0(r6)
 100a244:	30800517 	ldw	r2,20(r6)
 100a248:	20c7c83a 	sub	r3,r4,r3
 100a24c:	18802f0e 	bge	r3,r2,100a30c <__swbuf_r+0x118>
 100a250:	19400044 	addi	r5,r3,1
 100a254:	30800217 	ldw	r2,8(r6)
 100a258:	84003fcc 	andi	r16,r16,255
 100a25c:	20c00044 	addi	r3,r4,1
 100a260:	10bfffc4 	addi	r2,r2,-1
 100a264:	30800215 	stw	r2,8(r6)
 100a268:	24000005 	stb	r16,0(r4)
 100a26c:	30800517 	ldw	r2,20(r6)
 100a270:	30c00015 	stw	r3,0(r6)
 100a274:	11400c26 	beq	r2,r5,100a2a8 <__swbuf_r+0xb4>
 100a278:	3080030b 	ldhu	r2,12(r6)
 100a27c:	1080004c 	andi	r2,r2,1
 100a280:	1005003a 	cmpeq	r2,r2,zero
 100a284:	10000626 	beq	r2,zero,100a2a0 <__swbuf_r+0xac>
 100a288:	8005883a 	mov	r2,r16
 100a28c:	dfc00317 	ldw	ra,12(sp)
 100a290:	dc400217 	ldw	r17,8(sp)
 100a294:	dc000117 	ldw	r16,4(sp)
 100a298:	dec00404 	addi	sp,sp,16
 100a29c:	f800283a 	ret
 100a2a0:	00800284 	movi	r2,10
 100a2a4:	80bff81e 	bne	r16,r2,100a288 <__swbuf_r+0x94>
 100a2a8:	8809883a 	mov	r4,r17
 100a2ac:	300b883a 	mov	r5,r6
 100a2b0:	10067a00 	call	10067a0 <_fflush_r>
 100a2b4:	103ff426 	beq	r2,zero,100a288 <__swbuf_r+0x94>
 100a2b8:	043fffc4 	movi	r16,-1
 100a2bc:	003ff206 	br	100a288 <__swbuf_r+0x94>
 100a2c0:	300b883a 	mov	r5,r6
 100a2c4:	8809883a 	mov	r4,r17
 100a2c8:	d9800015 	stw	r6,0(sp)
 100a2cc:	1004e480 	call	1004e48 <__swsetup_r>
 100a2d0:	d9800017 	ldw	r6,0(sp)
 100a2d4:	1000061e 	bne	r2,zero,100a2f0 <__swbuf_r+0xfc>
 100a2d8:	30c00417 	ldw	r3,16(r6)
 100a2dc:	003fd806 	br	100a240 <__swbuf_r+0x4c>
 100a2e0:	d9800015 	stw	r6,0(sp)
 100a2e4:	1006a8c0 	call	1006a8c <__sinit>
 100a2e8:	d9800017 	ldw	r6,0(sp)
 100a2ec:	003fcd06 	br	100a224 <__swbuf_r+0x30>
 100a2f0:	3080030b 	ldhu	r2,12(r6)
 100a2f4:	00c00244 	movi	r3,9
 100a2f8:	043fffc4 	movi	r16,-1
 100a2fc:	10801014 	ori	r2,r2,64
 100a300:	3080030d 	sth	r2,12(r6)
 100a304:	88c00015 	stw	r3,0(r17)
 100a308:	003fdf06 	br	100a288 <__swbuf_r+0x94>
 100a30c:	300b883a 	mov	r5,r6
 100a310:	8809883a 	mov	r4,r17
 100a314:	d9800015 	stw	r6,0(sp)
 100a318:	10067a00 	call	10067a0 <_fflush_r>
 100a31c:	d9800017 	ldw	r6,0(sp)
 100a320:	103fe51e 	bne	r2,zero,100a2b8 <__swbuf_r+0xc4>
 100a324:	31000017 	ldw	r4,0(r6)
 100a328:	01400044 	movi	r5,1
 100a32c:	003fc906 	br	100a254 <__swbuf_r+0x60>

0100a330 <__swbuf>:
 100a330:	f811883a 	mov	r8,ra
 100a334:	100c3d80 	call	100c3d8 <_mcount>
 100a338:	403f883a 	mov	ra,r8
 100a33c:	018040f4 	movhi	r6,259
 100a340:	31a00704 	addi	r6,r6,-32740
 100a344:	2007883a 	mov	r3,r4
 100a348:	31000017 	ldw	r4,0(r6)
 100a34c:	280d883a 	mov	r6,r5
 100a350:	180b883a 	mov	r5,r3
 100a354:	100a1f41 	jmpi	100a1f4 <__swbuf_r>

0100a358 <_write_r>:
 100a358:	f811883a 	mov	r8,ra
 100a35c:	100c3d80 	call	100c3d8 <_mcount>
 100a360:	403f883a 	mov	ra,r8
 100a364:	defffd04 	addi	sp,sp,-12
 100a368:	dfc00215 	stw	ra,8(sp)
 100a36c:	dc400115 	stw	r17,4(sp)
 100a370:	dc000015 	stw	r16,0(sp)
 100a374:	040040f4 	movhi	r16,259
 100a378:	84175a04 	addi	r16,r16,23912
 100a37c:	2023883a 	mov	r17,r4
 100a380:	80000015 	stw	zero,0(r16)
 100a384:	2809883a 	mov	r4,r5
 100a388:	300b883a 	mov	r5,r6
 100a38c:	380d883a 	mov	r6,r7
 100a390:	100c9100 	call	100c910 <write>
 100a394:	1007883a 	mov	r3,r2
 100a398:	00bfffc4 	movi	r2,-1
 100a39c:	18800626 	beq	r3,r2,100a3b8 <_write_r+0x60>
 100a3a0:	1805883a 	mov	r2,r3
 100a3a4:	dfc00217 	ldw	ra,8(sp)
 100a3a8:	dc400117 	ldw	r17,4(sp)
 100a3ac:	dc000017 	ldw	r16,0(sp)
 100a3b0:	dec00304 	addi	sp,sp,12
 100a3b4:	f800283a 	ret
 100a3b8:	80800017 	ldw	r2,0(r16)
 100a3bc:	103ff826 	beq	r2,zero,100a3a0 <_write_r+0x48>
 100a3c0:	88800015 	stw	r2,0(r17)
 100a3c4:	1805883a 	mov	r2,r3
 100a3c8:	dfc00217 	ldw	ra,8(sp)
 100a3cc:	dc400117 	ldw	r17,4(sp)
 100a3d0:	dc000017 	ldw	r16,0(sp)
 100a3d4:	dec00304 	addi	sp,sp,12
 100a3d8:	f800283a 	ret

0100a3dc <_calloc_r>:
 100a3dc:	f811883a 	mov	r8,ra
 100a3e0:	100c3d80 	call	100c3d8 <_mcount>
 100a3e4:	403f883a 	mov	ra,r8
 100a3e8:	defffe04 	addi	sp,sp,-8
 100a3ec:	dfc00115 	stw	ra,4(sp)
 100a3f0:	dc400015 	stw	r17,0(sp)
 100a3f4:	2023883a 	mov	r17,r4
 100a3f8:	2809883a 	mov	r4,r5
 100a3fc:	300b883a 	mov	r5,r6
 100a400:	10026680 	call	1002668 <__mulsi3>
 100a404:	100b883a 	mov	r5,r2
 100a408:	8809883a 	mov	r4,r17
 100a40c:	1007abc0 	call	1007abc <_malloc_r>
 100a410:	1023883a 	mov	r17,r2
 100a414:	01c00904 	movi	r7,36
 100a418:	10000d26 	beq	r2,zero,100a450 <_calloc_r+0x74>
 100a41c:	10ffff17 	ldw	r3,-4(r2)
 100a420:	1009883a 	mov	r4,r2
 100a424:	00bfff04 	movi	r2,-4
 100a428:	1886703a 	and	r3,r3,r2
 100a42c:	1887883a 	add	r3,r3,r2
 100a430:	180d883a 	mov	r6,r3
 100a434:	000b883a 	mov	r5,zero
 100a438:	38c01736 	bltu	r7,r3,100a498 <_calloc_r+0xbc>
 100a43c:	008004c4 	movi	r2,19
 100a440:	10c00836 	bltu	r2,r3,100a464 <_calloc_r+0x88>
 100a444:	20000215 	stw	zero,8(r4)
 100a448:	20000015 	stw	zero,0(r4)
 100a44c:	20000115 	stw	zero,4(r4)
 100a450:	8805883a 	mov	r2,r17
 100a454:	dfc00117 	ldw	ra,4(sp)
 100a458:	dc400017 	ldw	r17,0(sp)
 100a45c:	dec00204 	addi	sp,sp,8
 100a460:	f800283a 	ret
 100a464:	008006c4 	movi	r2,27
 100a468:	88000015 	stw	zero,0(r17)
 100a46c:	88000115 	stw	zero,4(r17)
 100a470:	89000204 	addi	r4,r17,8
 100a474:	10fff32e 	bgeu	r2,r3,100a444 <_calloc_r+0x68>
 100a478:	88000215 	stw	zero,8(r17)
 100a47c:	88000315 	stw	zero,12(r17)
 100a480:	89000404 	addi	r4,r17,16
 100a484:	19ffef1e 	bne	r3,r7,100a444 <_calloc_r+0x68>
 100a488:	89000604 	addi	r4,r17,24
 100a48c:	88000415 	stw	zero,16(r17)
 100a490:	88000515 	stw	zero,20(r17)
 100a494:	003feb06 	br	100a444 <_calloc_r+0x68>
 100a498:	10084900 	call	1008490 <memset>
 100a49c:	8805883a 	mov	r2,r17
 100a4a0:	dfc00117 	ldw	ra,4(sp)
 100a4a4:	dc400017 	ldw	r17,0(sp)
 100a4a8:	dec00204 	addi	sp,sp,8
 100a4ac:	f800283a 	ret

0100a4b0 <_close_r>:
 100a4b0:	f811883a 	mov	r8,ra
 100a4b4:	100c3d80 	call	100c3d8 <_mcount>
 100a4b8:	403f883a 	mov	ra,r8
 100a4bc:	defffd04 	addi	sp,sp,-12
 100a4c0:	dfc00215 	stw	ra,8(sp)
 100a4c4:	dc400115 	stw	r17,4(sp)
 100a4c8:	dc000015 	stw	r16,0(sp)
 100a4cc:	040040f4 	movhi	r16,259
 100a4d0:	84175a04 	addi	r16,r16,23912
 100a4d4:	2023883a 	mov	r17,r4
 100a4d8:	80000015 	stw	zero,0(r16)
 100a4dc:	2809883a 	mov	r4,r5
 100a4e0:	100bc580 	call	100bc58 <close>
 100a4e4:	1007883a 	mov	r3,r2
 100a4e8:	00bfffc4 	movi	r2,-1
 100a4ec:	18800626 	beq	r3,r2,100a508 <_close_r+0x58>
 100a4f0:	1805883a 	mov	r2,r3
 100a4f4:	dfc00217 	ldw	ra,8(sp)
 100a4f8:	dc400117 	ldw	r17,4(sp)
 100a4fc:	dc000017 	ldw	r16,0(sp)
 100a500:	dec00304 	addi	sp,sp,12
 100a504:	f800283a 	ret
 100a508:	80800017 	ldw	r2,0(r16)
 100a50c:	103ff826 	beq	r2,zero,100a4f0 <_close_r+0x40>
 100a510:	88800015 	stw	r2,0(r17)
 100a514:	1805883a 	mov	r2,r3
 100a518:	dfc00217 	ldw	ra,8(sp)
 100a51c:	dc400117 	ldw	r17,4(sp)
 100a520:	dc000017 	ldw	r16,0(sp)
 100a524:	dec00304 	addi	sp,sp,12
 100a528:	f800283a 	ret

0100a52c <_fclose_r>:
 100a52c:	f811883a 	mov	r8,ra
 100a530:	100c3d80 	call	100c3d8 <_mcount>
 100a534:	403f883a 	mov	ra,r8
 100a538:	defffc04 	addi	sp,sp,-16
 100a53c:	dfc00315 	stw	ra,12(sp)
 100a540:	dc800215 	stw	r18,8(sp)
 100a544:	dc400115 	stw	r17,4(sp)
 100a548:	dc000015 	stw	r16,0(sp)
 100a54c:	2821883a 	mov	r16,r5
 100a550:	2023883a 	mov	r17,r4
 100a554:	28002926 	beq	r5,zero,100a5fc <_fclose_r+0xd0>
 100a558:	1006a4c0 	call	1006a4c <__sfp_lock_acquire>
 100a55c:	88000226 	beq	r17,zero,100a568 <_fclose_r+0x3c>
 100a560:	88800e17 	ldw	r2,56(r17)
 100a564:	10002d26 	beq	r2,zero,100a61c <_fclose_r+0xf0>
 100a568:	8080030f 	ldh	r2,12(r16)
 100a56c:	10002226 	beq	r2,zero,100a5f8 <_fclose_r+0xcc>
 100a570:	8809883a 	mov	r4,r17
 100a574:	800b883a 	mov	r5,r16
 100a578:	10067a00 	call	10067a0 <_fflush_r>
 100a57c:	1025883a 	mov	r18,r2
 100a580:	80800b17 	ldw	r2,44(r16)
 100a584:	10000426 	beq	r2,zero,100a598 <_fclose_r+0x6c>
 100a588:	81400717 	ldw	r5,28(r16)
 100a58c:	8809883a 	mov	r4,r17
 100a590:	103ee83a 	callr	r2
 100a594:	10002a16 	blt	r2,zero,100a640 <_fclose_r+0x114>
 100a598:	8080030b 	ldhu	r2,12(r16)
 100a59c:	1080200c 	andi	r2,r2,128
 100a5a0:	1000231e 	bne	r2,zero,100a630 <_fclose_r+0x104>
 100a5a4:	81400c17 	ldw	r5,48(r16)
 100a5a8:	28000526 	beq	r5,zero,100a5c0 <_fclose_r+0x94>
 100a5ac:	80801004 	addi	r2,r16,64
 100a5b0:	28800226 	beq	r5,r2,100a5bc <_fclose_r+0x90>
 100a5b4:	8809883a 	mov	r4,r17
 100a5b8:	1006ebc0 	call	1006ebc <_free_r>
 100a5bc:	80000c15 	stw	zero,48(r16)
 100a5c0:	81401117 	ldw	r5,68(r16)
 100a5c4:	28000326 	beq	r5,zero,100a5d4 <_fclose_r+0xa8>
 100a5c8:	8809883a 	mov	r4,r17
 100a5cc:	1006ebc0 	call	1006ebc <_free_r>
 100a5d0:	80001115 	stw	zero,68(r16)
 100a5d4:	8000030d 	sth	zero,12(r16)
 100a5d8:	1006a5c0 	call	1006a5c <__sfp_lock_release>
 100a5dc:	9005883a 	mov	r2,r18
 100a5e0:	dfc00317 	ldw	ra,12(sp)
 100a5e4:	dc800217 	ldw	r18,8(sp)
 100a5e8:	dc400117 	ldw	r17,4(sp)
 100a5ec:	dc000017 	ldw	r16,0(sp)
 100a5f0:	dec00404 	addi	sp,sp,16
 100a5f4:	f800283a 	ret
 100a5f8:	1006a5c0 	call	1006a5c <__sfp_lock_release>
 100a5fc:	0025883a 	mov	r18,zero
 100a600:	9005883a 	mov	r2,r18
 100a604:	dfc00317 	ldw	ra,12(sp)
 100a608:	dc800217 	ldw	r18,8(sp)
 100a60c:	dc400117 	ldw	r17,4(sp)
 100a610:	dc000017 	ldw	r16,0(sp)
 100a614:	dec00404 	addi	sp,sp,16
 100a618:	f800283a 	ret
 100a61c:	8809883a 	mov	r4,r17
 100a620:	1006a8c0 	call	1006a8c <__sinit>
 100a624:	8080030f 	ldh	r2,12(r16)
 100a628:	103fd11e 	bne	r2,zero,100a570 <_fclose_r+0x44>
 100a62c:	003ff206 	br	100a5f8 <_fclose_r+0xcc>
 100a630:	81400417 	ldw	r5,16(r16)
 100a634:	8809883a 	mov	r4,r17
 100a638:	1006ebc0 	call	1006ebc <_free_r>
 100a63c:	003fd906 	br	100a5a4 <_fclose_r+0x78>
 100a640:	04bfffc4 	movi	r18,-1
 100a644:	003fd406 	br	100a598 <_fclose_r+0x6c>

0100a648 <fclose>:
 100a648:	f811883a 	mov	r8,ra
 100a64c:	100c3d80 	call	100c3d8 <_mcount>
 100a650:	403f883a 	mov	ra,r8
 100a654:	008040f4 	movhi	r2,259
 100a658:	10a00704 	addi	r2,r2,-32740
 100a65c:	200b883a 	mov	r5,r4
 100a660:	11000017 	ldw	r4,0(r2)
 100a664:	100a52c1 	jmpi	100a52c <_fclose_r>

0100a668 <_fstat_r>:
 100a668:	f811883a 	mov	r8,ra
 100a66c:	100c3d80 	call	100c3d8 <_mcount>
 100a670:	403f883a 	mov	ra,r8
 100a674:	defffd04 	addi	sp,sp,-12
 100a678:	dfc00215 	stw	ra,8(sp)
 100a67c:	dc400115 	stw	r17,4(sp)
 100a680:	dc000015 	stw	r16,0(sp)
 100a684:	040040f4 	movhi	r16,259
 100a688:	84175a04 	addi	r16,r16,23912
 100a68c:	2023883a 	mov	r17,r4
 100a690:	80000015 	stw	zero,0(r16)
 100a694:	2809883a 	mov	r4,r5
 100a698:	300b883a 	mov	r5,r6
 100a69c:	100be080 	call	100be08 <fstat>
 100a6a0:	1007883a 	mov	r3,r2
 100a6a4:	00bfffc4 	movi	r2,-1
 100a6a8:	18800626 	beq	r3,r2,100a6c4 <_fstat_r+0x5c>
 100a6ac:	1805883a 	mov	r2,r3
 100a6b0:	dfc00217 	ldw	ra,8(sp)
 100a6b4:	dc400117 	ldw	r17,4(sp)
 100a6b8:	dc000017 	ldw	r16,0(sp)
 100a6bc:	dec00304 	addi	sp,sp,12
 100a6c0:	f800283a 	ret
 100a6c4:	80800017 	ldw	r2,0(r16)
 100a6c8:	103ff826 	beq	r2,zero,100a6ac <_fstat_r+0x44>
 100a6cc:	88800015 	stw	r2,0(r17)
 100a6d0:	1805883a 	mov	r2,r3
 100a6d4:	dfc00217 	ldw	ra,8(sp)
 100a6d8:	dc400117 	ldw	r17,4(sp)
 100a6dc:	dc000017 	ldw	r16,0(sp)
 100a6e0:	dec00304 	addi	sp,sp,12
 100a6e4:	f800283a 	ret

0100a6e8 <_isatty_r>:
 100a6e8:	f811883a 	mov	r8,ra
 100a6ec:	100c3d80 	call	100c3d8 <_mcount>
 100a6f0:	403f883a 	mov	ra,r8
 100a6f4:	defffd04 	addi	sp,sp,-12
 100a6f8:	dfc00215 	stw	ra,8(sp)
 100a6fc:	dc400115 	stw	r17,4(sp)
 100a700:	dc000015 	stw	r16,0(sp)
 100a704:	040040f4 	movhi	r16,259
 100a708:	84175a04 	addi	r16,r16,23912
 100a70c:	2023883a 	mov	r17,r4
 100a710:	80000015 	stw	zero,0(r16)
 100a714:	2809883a 	mov	r4,r5
 100a718:	100bf580 	call	100bf58 <isatty>
 100a71c:	1007883a 	mov	r3,r2
 100a720:	00bfffc4 	movi	r2,-1
 100a724:	18800626 	beq	r3,r2,100a740 <_isatty_r+0x58>
 100a728:	1805883a 	mov	r2,r3
 100a72c:	dfc00217 	ldw	ra,8(sp)
 100a730:	dc400117 	ldw	r17,4(sp)
 100a734:	dc000017 	ldw	r16,0(sp)
 100a738:	dec00304 	addi	sp,sp,12
 100a73c:	f800283a 	ret
 100a740:	80800017 	ldw	r2,0(r16)
 100a744:	103ff826 	beq	r2,zero,100a728 <_isatty_r+0x40>
 100a748:	88800015 	stw	r2,0(r17)
 100a74c:	1805883a 	mov	r2,r3
 100a750:	dfc00217 	ldw	ra,8(sp)
 100a754:	dc400117 	ldw	r17,4(sp)
 100a758:	dc000017 	ldw	r16,0(sp)
 100a75c:	dec00304 	addi	sp,sp,12
 100a760:	f800283a 	ret

0100a764 <_lseek_r>:
 100a764:	f811883a 	mov	r8,ra
 100a768:	100c3d80 	call	100c3d8 <_mcount>
 100a76c:	403f883a 	mov	ra,r8
 100a770:	defffd04 	addi	sp,sp,-12
 100a774:	dfc00215 	stw	ra,8(sp)
 100a778:	dc400115 	stw	r17,4(sp)
 100a77c:	dc000015 	stw	r16,0(sp)
 100a780:	040040f4 	movhi	r16,259
 100a784:	84175a04 	addi	r16,r16,23912
 100a788:	2023883a 	mov	r17,r4
 100a78c:	80000015 	stw	zero,0(r16)
 100a790:	2809883a 	mov	r4,r5
 100a794:	300b883a 	mov	r5,r6
 100a798:	380d883a 	mov	r6,r7
 100a79c:	100c1980 	call	100c198 <lseek>
 100a7a0:	1007883a 	mov	r3,r2
 100a7a4:	00bfffc4 	movi	r2,-1
 100a7a8:	18800626 	beq	r3,r2,100a7c4 <_lseek_r+0x60>
 100a7ac:	1805883a 	mov	r2,r3
 100a7b0:	dfc00217 	ldw	ra,8(sp)
 100a7b4:	dc400117 	ldw	r17,4(sp)
 100a7b8:	dc000017 	ldw	r16,0(sp)
 100a7bc:	dec00304 	addi	sp,sp,12
 100a7c0:	f800283a 	ret
 100a7c4:	80800017 	ldw	r2,0(r16)
 100a7c8:	103ff826 	beq	r2,zero,100a7ac <_lseek_r+0x48>
 100a7cc:	88800015 	stw	r2,0(r17)
 100a7d0:	1805883a 	mov	r2,r3
 100a7d4:	dfc00217 	ldw	ra,8(sp)
 100a7d8:	dc400117 	ldw	r17,4(sp)
 100a7dc:	dc000017 	ldw	r16,0(sp)
 100a7e0:	dec00304 	addi	sp,sp,12
 100a7e4:	f800283a 	ret

0100a7e8 <_read_r>:
 100a7e8:	f811883a 	mov	r8,ra
 100a7ec:	100c3d80 	call	100c3d8 <_mcount>
 100a7f0:	403f883a 	mov	ra,r8
 100a7f4:	defffd04 	addi	sp,sp,-12
 100a7f8:	dfc00215 	stw	ra,8(sp)
 100a7fc:	dc400115 	stw	r17,4(sp)
 100a800:	dc000015 	stw	r16,0(sp)
 100a804:	040040f4 	movhi	r16,259
 100a808:	84175a04 	addi	r16,r16,23912
 100a80c:	2023883a 	mov	r17,r4
 100a810:	80000015 	stw	zero,0(r16)
 100a814:	2809883a 	mov	r4,r5
 100a818:	300b883a 	mov	r5,r6
 100a81c:	380d883a 	mov	r6,r7
 100a820:	100c4740 	call	100c474 <read>
 100a824:	1007883a 	mov	r3,r2
 100a828:	00bfffc4 	movi	r2,-1
 100a82c:	18800626 	beq	r3,r2,100a848 <_read_r+0x60>
 100a830:	1805883a 	mov	r2,r3
 100a834:	dfc00217 	ldw	ra,8(sp)
 100a838:	dc400117 	ldw	r17,4(sp)
 100a83c:	dc000017 	ldw	r16,0(sp)
 100a840:	dec00304 	addi	sp,sp,12
 100a844:	f800283a 	ret
 100a848:	80800017 	ldw	r2,0(r16)
 100a84c:	103ff826 	beq	r2,zero,100a830 <_read_r+0x48>
 100a850:	88800015 	stw	r2,0(r17)
 100a854:	1805883a 	mov	r2,r3
 100a858:	dfc00217 	ldw	ra,8(sp)
 100a85c:	dc400117 	ldw	r17,4(sp)
 100a860:	dc000017 	ldw	r16,0(sp)
 100a864:	dec00304 	addi	sp,sp,12
 100a868:	f800283a 	ret

0100a86c <__udivdi3>:
 100a86c:	f811883a 	mov	r8,ra
 100a870:	100c3d80 	call	100c3d8 <_mcount>
 100a874:	403f883a 	mov	ra,r8
 100a878:	defff104 	addi	sp,sp,-60
 100a87c:	dfc00e15 	stw	ra,56(sp)
 100a880:	df000d15 	stw	fp,52(sp)
 100a884:	ddc00c15 	stw	r23,48(sp)
 100a888:	dd800b15 	stw	r22,44(sp)
 100a88c:	dd400a15 	stw	r21,40(sp)
 100a890:	dd000915 	stw	r20,36(sp)
 100a894:	dcc00815 	stw	r19,32(sp)
 100a898:	dc800715 	stw	r18,28(sp)
 100a89c:	dc400615 	stw	r17,24(sp)
 100a8a0:	dc000515 	stw	r16,20(sp)
 100a8a4:	0015883a 	mov	r10,zero
 100a8a8:	2005883a 	mov	r2,r4
 100a8ac:	3011883a 	mov	r8,r6
 100a8b0:	da800315 	stw	r10,12(sp)
 100a8b4:	4027883a 	mov	r19,r8
 100a8b8:	1039883a 	mov	fp,r2
 100a8bc:	282b883a 	mov	r21,r5
 100a8c0:	da800415 	stw	r10,16(sp)
 100a8c4:	3800401e 	bne	r7,zero,100a9c8 <__udivdi3+0x15c>
 100a8c8:	2a006536 	bltu	r5,r8,100aa60 <__udivdi3+0x1f4>
 100a8cc:	4000b526 	beq	r8,zero,100aba4 <__udivdi3+0x338>
 100a8d0:	00bfffd4 	movui	r2,65535
 100a8d4:	14c0ad36 	bltu	r2,r19,100ab8c <__udivdi3+0x320>
 100a8d8:	00803fc4 	movi	r2,255
 100a8dc:	14c15e36 	bltu	r2,r19,100ae58 <__udivdi3+0x5ec>
 100a8e0:	000b883a 	mov	r5,zero
 100a8e4:	0005883a 	mov	r2,zero
 100a8e8:	9884d83a 	srl	r2,r19,r2
 100a8ec:	010040b4 	movhi	r4,258
 100a8f0:	2127ab04 	addi	r4,r4,-24916
 100a8f4:	01800804 	movi	r6,32
 100a8f8:	1105883a 	add	r2,r2,r4
 100a8fc:	10c00003 	ldbu	r3,0(r2)
 100a900:	28c7883a 	add	r3,r5,r3
 100a904:	30e9c83a 	sub	r20,r6,r3
 100a908:	a0010a1e 	bne	r20,zero,100ad34 <__udivdi3+0x4c8>
 100a90c:	982ed43a 	srli	r23,r19,16
 100a910:	acebc83a 	sub	r21,r21,r19
 100a914:	9dbfffcc 	andi	r22,r19,65535
 100a918:	05000044 	movi	r20,1
 100a91c:	a809883a 	mov	r4,r21
 100a920:	b80b883a 	mov	r5,r23
 100a924:	10026400 	call	1002640 <__udivsi3>
 100a928:	100b883a 	mov	r5,r2
 100a92c:	b009883a 	mov	r4,r22
 100a930:	1021883a 	mov	r16,r2
 100a934:	10026680 	call	1002668 <__mulsi3>
 100a938:	a809883a 	mov	r4,r21
 100a93c:	b80b883a 	mov	r5,r23
 100a940:	1023883a 	mov	r17,r2
 100a944:	10026540 	call	1002654 <__umodsi3>
 100a948:	1004943a 	slli	r2,r2,16
 100a94c:	e006d43a 	srli	r3,fp,16
 100a950:	10c4b03a 	or	r2,r2,r3
 100a954:	1440042e 	bgeu	r2,r17,100a968 <__udivdi3+0xfc>
 100a958:	14c5883a 	add	r2,r2,r19
 100a95c:	843fffc4 	addi	r16,r16,-1
 100a960:	14c00136 	bltu	r2,r19,100a968 <__udivdi3+0xfc>
 100a964:	14415c36 	bltu	r2,r17,100aed8 <__udivdi3+0x66c>
 100a968:	1463c83a 	sub	r17,r2,r17
 100a96c:	8809883a 	mov	r4,r17
 100a970:	b80b883a 	mov	r5,r23
 100a974:	10026400 	call	1002640 <__udivsi3>
 100a978:	100b883a 	mov	r5,r2
 100a97c:	b009883a 	mov	r4,r22
 100a980:	102b883a 	mov	r21,r2
 100a984:	10026680 	call	1002668 <__mulsi3>
 100a988:	8809883a 	mov	r4,r17
 100a98c:	b80b883a 	mov	r5,r23
 100a990:	1025883a 	mov	r18,r2
 100a994:	10026540 	call	1002654 <__umodsi3>
 100a998:	1004943a 	slli	r2,r2,16
 100a99c:	e0ffffcc 	andi	r3,fp,65535
 100a9a0:	10c4b03a 	or	r2,r2,r3
 100a9a4:	1480042e 	bgeu	r2,r18,100a9b8 <__udivdi3+0x14c>
 100a9a8:	9885883a 	add	r2,r19,r2
 100a9ac:	ad7fffc4 	addi	r21,r21,-1
 100a9b0:	14c00136 	bltu	r2,r19,100a9b8 <__udivdi3+0x14c>
 100a9b4:	14813c36 	bltu	r2,r18,100aea8 <__udivdi3+0x63c>
 100a9b8:	8004943a 	slli	r2,r16,16
 100a9bc:	a009883a 	mov	r4,r20
 100a9c0:	a884b03a 	or	r2,r21,r2
 100a9c4:	00001506 	br	100aa1c <__udivdi3+0x1b0>
 100a9c8:	380d883a 	mov	r6,r7
 100a9cc:	29c06c36 	bltu	r5,r7,100ab80 <__udivdi3+0x314>
 100a9d0:	00bfffd4 	movui	r2,65535
 100a9d4:	11c06436 	bltu	r2,r7,100ab68 <__udivdi3+0x2fc>
 100a9d8:	00803fc4 	movi	r2,255
 100a9dc:	11c11836 	bltu	r2,r7,100ae40 <__udivdi3+0x5d4>
 100a9e0:	000b883a 	mov	r5,zero
 100a9e4:	0005883a 	mov	r2,zero
 100a9e8:	3084d83a 	srl	r2,r6,r2
 100a9ec:	010040b4 	movhi	r4,258
 100a9f0:	2127ab04 	addi	r4,r4,-24916
 100a9f4:	01c00804 	movi	r7,32
 100a9f8:	1105883a 	add	r2,r2,r4
 100a9fc:	10c00003 	ldbu	r3,0(r2)
 100aa00:	28c7883a 	add	r3,r5,r3
 100aa04:	38edc83a 	sub	r22,r7,r3
 100aa08:	b000731e 	bne	r22,zero,100abd8 <__udivdi3+0x36c>
 100aa0c:	35400136 	bltu	r6,r21,100aa14 <__udivdi3+0x1a8>
 100aa10:	e4c05b36 	bltu	fp,r19,100ab80 <__udivdi3+0x314>
 100aa14:	00800044 	movi	r2,1
 100aa18:	0009883a 	mov	r4,zero
 100aa1c:	d8800315 	stw	r2,12(sp)
 100aa20:	d9400317 	ldw	r5,12(sp)
 100aa24:	2007883a 	mov	r3,r4
 100aa28:	d9000415 	stw	r4,16(sp)
 100aa2c:	2805883a 	mov	r2,r5
 100aa30:	dfc00e17 	ldw	ra,56(sp)
 100aa34:	df000d17 	ldw	fp,52(sp)
 100aa38:	ddc00c17 	ldw	r23,48(sp)
 100aa3c:	dd800b17 	ldw	r22,44(sp)
 100aa40:	dd400a17 	ldw	r21,40(sp)
 100aa44:	dd000917 	ldw	r20,36(sp)
 100aa48:	dcc00817 	ldw	r19,32(sp)
 100aa4c:	dc800717 	ldw	r18,28(sp)
 100aa50:	dc400617 	ldw	r17,24(sp)
 100aa54:	dc000517 	ldw	r16,20(sp)
 100aa58:	dec00f04 	addi	sp,sp,60
 100aa5c:	f800283a 	ret
 100aa60:	00bfffd4 	movui	r2,65535
 100aa64:	12005636 	bltu	r2,r8,100abc0 <__udivdi3+0x354>
 100aa68:	00803fc4 	movi	r2,255
 100aa6c:	12010036 	bltu	r2,r8,100ae70 <__udivdi3+0x604>
 100aa70:	000b883a 	mov	r5,zero
 100aa74:	0005883a 	mov	r2,zero
 100aa78:	9884d83a 	srl	r2,r19,r2
 100aa7c:	010040b4 	movhi	r4,258
 100aa80:	2127ab04 	addi	r4,r4,-24916
 100aa84:	01800804 	movi	r6,32
 100aa88:	1105883a 	add	r2,r2,r4
 100aa8c:	10c00003 	ldbu	r3,0(r2)
 100aa90:	28c7883a 	add	r3,r5,r3
 100aa94:	30cbc83a 	sub	r5,r6,r3
 100aa98:	28000626 	beq	r5,zero,100aab4 <__udivdi3+0x248>
 100aa9c:	3145c83a 	sub	r2,r6,r5
 100aaa0:	e084d83a 	srl	r2,fp,r2
 100aaa4:	a946983a 	sll	r3,r21,r5
 100aaa8:	e178983a 	sll	fp,fp,r5
 100aaac:	9966983a 	sll	r19,r19,r5
 100aab0:	18aab03a 	or	r21,r3,r2
 100aab4:	982ed43a 	srli	r23,r19,16
 100aab8:	a809883a 	mov	r4,r21
 100aabc:	9cbfffcc 	andi	r18,r19,65535
 100aac0:	b80b883a 	mov	r5,r23
 100aac4:	10026400 	call	1002640 <__udivsi3>
 100aac8:	100b883a 	mov	r5,r2
 100aacc:	9009883a 	mov	r4,r18
 100aad0:	1021883a 	mov	r16,r2
 100aad4:	10026680 	call	1002668 <__mulsi3>
 100aad8:	a809883a 	mov	r4,r21
 100aadc:	b80b883a 	mov	r5,r23
 100aae0:	1023883a 	mov	r17,r2
 100aae4:	10026540 	call	1002654 <__umodsi3>
 100aae8:	1004943a 	slli	r2,r2,16
 100aaec:	e006d43a 	srli	r3,fp,16
 100aaf0:	10c4b03a 	or	r2,r2,r3
 100aaf4:	1440042e 	bgeu	r2,r17,100ab08 <__udivdi3+0x29c>
 100aaf8:	14c5883a 	add	r2,r2,r19
 100aafc:	843fffc4 	addi	r16,r16,-1
 100ab00:	14c00136 	bltu	r2,r19,100ab08 <__udivdi3+0x29c>
 100ab04:	1440ea36 	bltu	r2,r17,100aeb0 <__udivdi3+0x644>
 100ab08:	1463c83a 	sub	r17,r2,r17
 100ab0c:	8809883a 	mov	r4,r17
 100ab10:	b80b883a 	mov	r5,r23
 100ab14:	10026400 	call	1002640 <__udivsi3>
 100ab18:	100b883a 	mov	r5,r2
 100ab1c:	9009883a 	mov	r4,r18
 100ab20:	102b883a 	mov	r21,r2
 100ab24:	10026680 	call	1002668 <__mulsi3>
 100ab28:	8809883a 	mov	r4,r17
 100ab2c:	b80b883a 	mov	r5,r23
 100ab30:	1025883a 	mov	r18,r2
 100ab34:	10026540 	call	1002654 <__umodsi3>
 100ab38:	1004943a 	slli	r2,r2,16
 100ab3c:	e0ffffcc 	andi	r3,fp,65535
 100ab40:	10c4b03a 	or	r2,r2,r3
 100ab44:	1480042e 	bgeu	r2,r18,100ab58 <__udivdi3+0x2ec>
 100ab48:	9885883a 	add	r2,r19,r2
 100ab4c:	ad7fffc4 	addi	r21,r21,-1
 100ab50:	14c00136 	bltu	r2,r19,100ab58 <__udivdi3+0x2ec>
 100ab54:	1480d936 	bltu	r2,r18,100aebc <__udivdi3+0x650>
 100ab58:	8004943a 	slli	r2,r16,16
 100ab5c:	0009883a 	mov	r4,zero
 100ab60:	a884b03a 	or	r2,r21,r2
 100ab64:	003fad06 	br	100aa1c <__udivdi3+0x1b0>
 100ab68:	00804034 	movhi	r2,256
 100ab6c:	10bfffc4 	addi	r2,r2,-1
 100ab70:	11c0b636 	bltu	r2,r7,100ae4c <__udivdi3+0x5e0>
 100ab74:	01400404 	movi	r5,16
 100ab78:	2805883a 	mov	r2,r5
 100ab7c:	003f9a06 	br	100a9e8 <__udivdi3+0x17c>
 100ab80:	0005883a 	mov	r2,zero
 100ab84:	0009883a 	mov	r4,zero
 100ab88:	003fa406 	br	100aa1c <__udivdi3+0x1b0>
 100ab8c:	00804034 	movhi	r2,256
 100ab90:	10bfffc4 	addi	r2,r2,-1
 100ab94:	14c0b336 	bltu	r2,r19,100ae64 <__udivdi3+0x5f8>
 100ab98:	01400404 	movi	r5,16
 100ab9c:	2805883a 	mov	r2,r5
 100aba0:	003f5106 	br	100a8e8 <__udivdi3+0x7c>
 100aba4:	01000044 	movi	r4,1
 100aba8:	000b883a 	mov	r5,zero
 100abac:	10026400 	call	1002640 <__udivsi3>
 100abb0:	1027883a 	mov	r19,r2
 100abb4:	00bfffd4 	movui	r2,65535
 100abb8:	14fff436 	bltu	r2,r19,100ab8c <__udivdi3+0x320>
 100abbc:	003f4606 	br	100a8d8 <__udivdi3+0x6c>
 100abc0:	00804034 	movhi	r2,256
 100abc4:	10bfffc4 	addi	r2,r2,-1
 100abc8:	1200ac36 	bltu	r2,r8,100ae7c <__udivdi3+0x610>
 100abcc:	01400404 	movi	r5,16
 100abd0:	2805883a 	mov	r2,r5
 100abd4:	003fa806 	br	100aa78 <__udivdi3+0x20c>
 100abd8:	3d85c83a 	sub	r2,r7,r22
 100abdc:	3588983a 	sll	r4,r6,r22
 100abe0:	9886d83a 	srl	r3,r19,r2
 100abe4:	a8a2d83a 	srl	r17,r21,r2
 100abe8:	e084d83a 	srl	r2,fp,r2
 100abec:	20eeb03a 	or	r23,r4,r3
 100abf0:	b824d43a 	srli	r18,r23,16
 100abf4:	ad86983a 	sll	r3,r21,r22
 100abf8:	8809883a 	mov	r4,r17
 100abfc:	900b883a 	mov	r5,r18
 100ac00:	1886b03a 	or	r3,r3,r2
 100ac04:	d8c00115 	stw	r3,4(sp)
 100ac08:	bc3fffcc 	andi	r16,r23,65535
 100ac0c:	10026400 	call	1002640 <__udivsi3>
 100ac10:	100b883a 	mov	r5,r2
 100ac14:	8009883a 	mov	r4,r16
 100ac18:	1029883a 	mov	r20,r2
 100ac1c:	10026680 	call	1002668 <__mulsi3>
 100ac20:	900b883a 	mov	r5,r18
 100ac24:	8809883a 	mov	r4,r17
 100ac28:	102b883a 	mov	r21,r2
 100ac2c:	10026540 	call	1002654 <__umodsi3>
 100ac30:	d9400117 	ldw	r5,4(sp)
 100ac34:	1004943a 	slli	r2,r2,16
 100ac38:	9da6983a 	sll	r19,r19,r22
 100ac3c:	2806d43a 	srli	r3,r5,16
 100ac40:	10c4b03a 	or	r2,r2,r3
 100ac44:	1540032e 	bgeu	r2,r21,100ac54 <__udivdi3+0x3e8>
 100ac48:	15c5883a 	add	r2,r2,r23
 100ac4c:	a53fffc4 	addi	r20,r20,-1
 100ac50:	15c0912e 	bgeu	r2,r23,100ae98 <__udivdi3+0x62c>
 100ac54:	1563c83a 	sub	r17,r2,r21
 100ac58:	8809883a 	mov	r4,r17
 100ac5c:	900b883a 	mov	r5,r18
 100ac60:	10026400 	call	1002640 <__udivsi3>
 100ac64:	100b883a 	mov	r5,r2
 100ac68:	8009883a 	mov	r4,r16
 100ac6c:	102b883a 	mov	r21,r2
 100ac70:	10026680 	call	1002668 <__mulsi3>
 100ac74:	8809883a 	mov	r4,r17
 100ac78:	900b883a 	mov	r5,r18
 100ac7c:	1021883a 	mov	r16,r2
 100ac80:	10026540 	call	1002654 <__umodsi3>
 100ac84:	da800117 	ldw	r10,4(sp)
 100ac88:	1004943a 	slli	r2,r2,16
 100ac8c:	50ffffcc 	andi	r3,r10,65535
 100ac90:	10c6b03a 	or	r3,r2,r3
 100ac94:	1c00032e 	bgeu	r3,r16,100aca4 <__udivdi3+0x438>
 100ac98:	1dc7883a 	add	r3,r3,r23
 100ac9c:	ad7fffc4 	addi	r21,r21,-1
 100aca0:	1dc0792e 	bgeu	r3,r23,100ae88 <__udivdi3+0x61c>
 100aca4:	a004943a 	slli	r2,r20,16
 100aca8:	982ed43a 	srli	r23,r19,16
 100acac:	9cffffcc 	andi	r19,r19,65535
 100acb0:	a8a4b03a 	or	r18,r21,r2
 100acb4:	947fffcc 	andi	r17,r18,65535
 100acb8:	902ad43a 	srli	r21,r18,16
 100acbc:	8809883a 	mov	r4,r17
 100acc0:	980b883a 	mov	r5,r19
 100acc4:	1c21c83a 	sub	r16,r3,r16
 100acc8:	10026680 	call	1002668 <__mulsi3>
 100accc:	8809883a 	mov	r4,r17
 100acd0:	b80b883a 	mov	r5,r23
 100acd4:	1029883a 	mov	r20,r2
 100acd8:	10026680 	call	1002668 <__mulsi3>
 100acdc:	980b883a 	mov	r5,r19
 100ace0:	a809883a 	mov	r4,r21
 100ace4:	1023883a 	mov	r17,r2
 100ace8:	10026680 	call	1002668 <__mulsi3>
 100acec:	a809883a 	mov	r4,r21
 100acf0:	b80b883a 	mov	r5,r23
 100acf4:	1027883a 	mov	r19,r2
 100acf8:	10026680 	call	1002668 <__mulsi3>
 100acfc:	1009883a 	mov	r4,r2
 100ad00:	a004d43a 	srli	r2,r20,16
 100ad04:	8ce3883a 	add	r17,r17,r19
 100ad08:	1447883a 	add	r3,r2,r17
 100ad0c:	1cc0022e 	bgeu	r3,r19,100ad18 <__udivdi3+0x4ac>
 100ad10:	00800074 	movhi	r2,1
 100ad14:	2089883a 	add	r4,r4,r2
 100ad18:	1804d43a 	srli	r2,r3,16
 100ad1c:	2085883a 	add	r2,r4,r2
 100ad20:	80804436 	bltu	r16,r2,100ae34 <__udivdi3+0x5c8>
 100ad24:	80803e26 	beq	r16,r2,100ae20 <__udivdi3+0x5b4>
 100ad28:	9005883a 	mov	r2,r18
 100ad2c:	0009883a 	mov	r4,zero
 100ad30:	003f3a06 	br	100aa1c <__udivdi3+0x1b0>
 100ad34:	9d26983a 	sll	r19,r19,r20
 100ad38:	3505c83a 	sub	r2,r6,r20
 100ad3c:	a8a2d83a 	srl	r17,r21,r2
 100ad40:	982ed43a 	srli	r23,r19,16
 100ad44:	e084d83a 	srl	r2,fp,r2
 100ad48:	ad06983a 	sll	r3,r21,r20
 100ad4c:	8809883a 	mov	r4,r17
 100ad50:	b80b883a 	mov	r5,r23
 100ad54:	1886b03a 	or	r3,r3,r2
 100ad58:	d8c00015 	stw	r3,0(sp)
 100ad5c:	9dbfffcc 	andi	r22,r19,65535
 100ad60:	10026400 	call	1002640 <__udivsi3>
 100ad64:	100b883a 	mov	r5,r2
 100ad68:	b009883a 	mov	r4,r22
 100ad6c:	d8800215 	stw	r2,8(sp)
 100ad70:	10026680 	call	1002668 <__mulsi3>
 100ad74:	8809883a 	mov	r4,r17
 100ad78:	b80b883a 	mov	r5,r23
 100ad7c:	102b883a 	mov	r21,r2
 100ad80:	10026540 	call	1002654 <__umodsi3>
 100ad84:	d9000017 	ldw	r4,0(sp)
 100ad88:	1004943a 	slli	r2,r2,16
 100ad8c:	2006d43a 	srli	r3,r4,16
 100ad90:	10c4b03a 	or	r2,r2,r3
 100ad94:	1540052e 	bgeu	r2,r21,100adac <__udivdi3+0x540>
 100ad98:	d9400217 	ldw	r5,8(sp)
 100ad9c:	14c5883a 	add	r2,r2,r19
 100ada0:	297fffc4 	addi	r5,r5,-1
 100ada4:	d9400215 	stw	r5,8(sp)
 100ada8:	14c0462e 	bgeu	r2,r19,100aec4 <__udivdi3+0x658>
 100adac:	1563c83a 	sub	r17,r2,r21
 100adb0:	8809883a 	mov	r4,r17
 100adb4:	b80b883a 	mov	r5,r23
 100adb8:	10026400 	call	1002640 <__udivsi3>
 100adbc:	100b883a 	mov	r5,r2
 100adc0:	b009883a 	mov	r4,r22
 100adc4:	1025883a 	mov	r18,r2
 100adc8:	10026680 	call	1002668 <__mulsi3>
 100adcc:	8809883a 	mov	r4,r17
 100add0:	b80b883a 	mov	r5,r23
 100add4:	1021883a 	mov	r16,r2
 100add8:	10026540 	call	1002654 <__umodsi3>
 100addc:	da800017 	ldw	r10,0(sp)
 100ade0:	1004943a 	slli	r2,r2,16
 100ade4:	50ffffcc 	andi	r3,r10,65535
 100ade8:	10c6b03a 	or	r3,r2,r3
 100adec:	1c00062e 	bgeu	r3,r16,100ae08 <__udivdi3+0x59c>
 100adf0:	1cc7883a 	add	r3,r3,r19
 100adf4:	94bfffc4 	addi	r18,r18,-1
 100adf8:	1cc00336 	bltu	r3,r19,100ae08 <__udivdi3+0x59c>
 100adfc:	1c00022e 	bgeu	r3,r16,100ae08 <__udivdi3+0x59c>
 100ae00:	94bfffc4 	addi	r18,r18,-1
 100ae04:	1cc7883a 	add	r3,r3,r19
 100ae08:	d9000217 	ldw	r4,8(sp)
 100ae0c:	e538983a 	sll	fp,fp,r20
 100ae10:	1c2bc83a 	sub	r21,r3,r16
 100ae14:	2004943a 	slli	r2,r4,16
 100ae18:	90a8b03a 	or	r20,r18,r2
 100ae1c:	003ebf06 	br	100a91c <__udivdi3+0xb0>
 100ae20:	1804943a 	slli	r2,r3,16
 100ae24:	e588983a 	sll	r4,fp,r22
 100ae28:	a0ffffcc 	andi	r3,r20,65535
 100ae2c:	10c5883a 	add	r2,r2,r3
 100ae30:	20bfbd2e 	bgeu	r4,r2,100ad28 <__udivdi3+0x4bc>
 100ae34:	90bfffc4 	addi	r2,r18,-1
 100ae38:	0009883a 	mov	r4,zero
 100ae3c:	003ef706 	br	100aa1c <__udivdi3+0x1b0>
 100ae40:	01400204 	movi	r5,8
 100ae44:	2805883a 	mov	r2,r5
 100ae48:	003ee706 	br	100a9e8 <__udivdi3+0x17c>
 100ae4c:	01400604 	movi	r5,24
 100ae50:	2805883a 	mov	r2,r5
 100ae54:	003ee406 	br	100a9e8 <__udivdi3+0x17c>
 100ae58:	01400204 	movi	r5,8
 100ae5c:	2805883a 	mov	r2,r5
 100ae60:	003ea106 	br	100a8e8 <__udivdi3+0x7c>
 100ae64:	01400604 	movi	r5,24
 100ae68:	2805883a 	mov	r2,r5
 100ae6c:	003e9e06 	br	100a8e8 <__udivdi3+0x7c>
 100ae70:	01400204 	movi	r5,8
 100ae74:	2805883a 	mov	r2,r5
 100ae78:	003eff06 	br	100aa78 <__udivdi3+0x20c>
 100ae7c:	01400604 	movi	r5,24
 100ae80:	2805883a 	mov	r2,r5
 100ae84:	003efc06 	br	100aa78 <__udivdi3+0x20c>
 100ae88:	1c3f862e 	bgeu	r3,r16,100aca4 <__udivdi3+0x438>
 100ae8c:	1dc7883a 	add	r3,r3,r23
 100ae90:	ad7fffc4 	addi	r21,r21,-1
 100ae94:	003f8306 	br	100aca4 <__udivdi3+0x438>
 100ae98:	157f6e2e 	bgeu	r2,r21,100ac54 <__udivdi3+0x3e8>
 100ae9c:	a53fffc4 	addi	r20,r20,-1
 100aea0:	15c5883a 	add	r2,r2,r23
 100aea4:	003f6b06 	br	100ac54 <__udivdi3+0x3e8>
 100aea8:	ad7fffc4 	addi	r21,r21,-1
 100aeac:	003ec206 	br	100a9b8 <__udivdi3+0x14c>
 100aeb0:	843fffc4 	addi	r16,r16,-1
 100aeb4:	14c5883a 	add	r2,r2,r19
 100aeb8:	003f1306 	br	100ab08 <__udivdi3+0x29c>
 100aebc:	ad7fffc4 	addi	r21,r21,-1
 100aec0:	003f2506 	br	100ab58 <__udivdi3+0x2ec>
 100aec4:	157fb92e 	bgeu	r2,r21,100adac <__udivdi3+0x540>
 100aec8:	297fffc4 	addi	r5,r5,-1
 100aecc:	14c5883a 	add	r2,r2,r19
 100aed0:	d9400215 	stw	r5,8(sp)
 100aed4:	003fb506 	br	100adac <__udivdi3+0x540>
 100aed8:	843fffc4 	addi	r16,r16,-1
 100aedc:	14c5883a 	add	r2,r2,r19
 100aee0:	003ea106 	br	100a968 <__udivdi3+0xfc>

0100aee4 <__umoddi3>:
 100aee4:	f811883a 	mov	r8,ra
 100aee8:	100c3d80 	call	100c3d8 <_mcount>
 100aeec:	403f883a 	mov	ra,r8
 100aef0:	defff004 	addi	sp,sp,-64
 100aef4:	dfc00f15 	stw	ra,60(sp)
 100aef8:	df000e15 	stw	fp,56(sp)
 100aefc:	ddc00d15 	stw	r23,52(sp)
 100af00:	dd800c15 	stw	r22,48(sp)
 100af04:	dd400b15 	stw	r21,44(sp)
 100af08:	dd000a15 	stw	r20,40(sp)
 100af0c:	dcc00915 	stw	r19,36(sp)
 100af10:	dc800815 	stw	r18,32(sp)
 100af14:	dc400715 	stw	r17,28(sp)
 100af18:	dc000615 	stw	r16,24(sp)
 100af1c:	3011883a 	mov	r8,r6
 100af20:	000d883a 	mov	r6,zero
 100af24:	2817883a 	mov	r11,r5
 100af28:	d9800415 	stw	r6,16(sp)
 100af2c:	4027883a 	mov	r19,r8
 100af30:	d9800515 	stw	r6,20(sp)
 100af34:	2021883a 	mov	r16,r4
 100af38:	282b883a 	mov	r21,r5
 100af3c:	38002c1e 	bne	r7,zero,100aff0 <__umoddi3+0x10c>
 100af40:	2a005636 	bltu	r5,r8,100b09c <__umoddi3+0x1b8>
 100af44:	40009a26 	beq	r8,zero,100b1b0 <__umoddi3+0x2cc>
 100af48:	00bfffd4 	movui	r2,65535
 100af4c:	14c09236 	bltu	r2,r19,100b198 <__umoddi3+0x2b4>
 100af50:	00803fc4 	movi	r2,255
 100af54:	14c15c36 	bltu	r2,r19,100b4c8 <__umoddi3+0x5e4>
 100af58:	000b883a 	mov	r5,zero
 100af5c:	0005883a 	mov	r2,zero
 100af60:	9884d83a 	srl	r2,r19,r2
 100af64:	010040b4 	movhi	r4,258
 100af68:	2127ab04 	addi	r4,r4,-24916
 100af6c:	01800804 	movi	r6,32
 100af70:	1105883a 	add	r2,r2,r4
 100af74:	10c00003 	ldbu	r3,0(r2)
 100af78:	28c7883a 	add	r3,r5,r3
 100af7c:	30e5c83a 	sub	r18,r6,r3
 100af80:	9000a41e 	bne	r18,zero,100b214 <__umoddi3+0x330>
 100af84:	982ed43a 	srli	r23,r19,16
 100af88:	acebc83a 	sub	r21,r21,r19
 100af8c:	9d3fffcc 	andi	r20,r19,65535
 100af90:	002d883a 	mov	r22,zero
 100af94:	a809883a 	mov	r4,r21
 100af98:	b80b883a 	mov	r5,r23
 100af9c:	10026400 	call	1002640 <__udivsi3>
 100afa0:	100b883a 	mov	r5,r2
 100afa4:	a009883a 	mov	r4,r20
 100afa8:	10026680 	call	1002668 <__mulsi3>
 100afac:	a809883a 	mov	r4,r21
 100afb0:	b80b883a 	mov	r5,r23
 100afb4:	1023883a 	mov	r17,r2
 100afb8:	10026540 	call	1002654 <__umodsi3>
 100afbc:	1004943a 	slli	r2,r2,16
 100afc0:	8006d43a 	srli	r3,r16,16
 100afc4:	10c4b03a 	or	r2,r2,r3
 100afc8:	1440032e 	bgeu	r2,r17,100afd8 <__umoddi3+0xf4>
 100afcc:	14c5883a 	add	r2,r2,r19
 100afd0:	14c00136 	bltu	r2,r19,100afd8 <__umoddi3+0xf4>
 100afd4:	14415836 	bltu	r2,r17,100b538 <__umoddi3+0x654>
 100afd8:	1463c83a 	sub	r17,r2,r17
 100afdc:	8809883a 	mov	r4,r17
 100afe0:	b80b883a 	mov	r5,r23
 100afe4:	10026400 	call	1002640 <__udivsi3>
 100afe8:	a009883a 	mov	r4,r20
 100afec:	00005306 	br	100b13c <__umoddi3+0x258>
 100aff0:	380d883a 	mov	r6,r7
 100aff4:	29c0132e 	bgeu	r5,r7,100b044 <__umoddi3+0x160>
 100aff8:	d9000415 	stw	r4,16(sp)
 100affc:	d9400515 	stw	r5,20(sp)
 100b000:	d9400417 	ldw	r5,16(sp)
 100b004:	5813883a 	mov	r9,r11
 100b008:	2811883a 	mov	r8,r5
 100b00c:	4005883a 	mov	r2,r8
 100b010:	4807883a 	mov	r3,r9
 100b014:	dfc00f17 	ldw	ra,60(sp)
 100b018:	df000e17 	ldw	fp,56(sp)
 100b01c:	ddc00d17 	ldw	r23,52(sp)
 100b020:	dd800c17 	ldw	r22,48(sp)
 100b024:	dd400b17 	ldw	r21,44(sp)
 100b028:	dd000a17 	ldw	r20,40(sp)
 100b02c:	dcc00917 	ldw	r19,36(sp)
 100b030:	dc800817 	ldw	r18,32(sp)
 100b034:	dc400717 	ldw	r17,28(sp)
 100b038:	dc000617 	ldw	r16,24(sp)
 100b03c:	dec01004 	addi	sp,sp,64
 100b040:	f800283a 	ret
 100b044:	00bfffd4 	movui	r2,65535
 100b048:	11c06636 	bltu	r2,r7,100b1e4 <__umoddi3+0x300>
 100b04c:	00803fc4 	movi	r2,255
 100b050:	11c12036 	bltu	r2,r7,100b4d4 <__umoddi3+0x5f0>
 100b054:	000b883a 	mov	r5,zero
 100b058:	0005883a 	mov	r2,zero
 100b05c:	3084d83a 	srl	r2,r6,r2
 100b060:	010040b4 	movhi	r4,258
 100b064:	2127ab04 	addi	r4,r4,-24916
 100b068:	01c00804 	movi	r7,32
 100b06c:	1105883a 	add	r2,r2,r4
 100b070:	10c00003 	ldbu	r3,0(r2)
 100b074:	28c7883a 	add	r3,r5,r3
 100b078:	38e5c83a 	sub	r18,r7,r3
 100b07c:	9000941e 	bne	r18,zero,100b2d0 <__umoddi3+0x3ec>
 100b080:	35405e36 	bltu	r6,r21,100b1fc <__umoddi3+0x318>
 100b084:	84c05d2e 	bgeu	r16,r19,100b1fc <__umoddi3+0x318>
 100b088:	8011883a 	mov	r8,r16
 100b08c:	a813883a 	mov	r9,r21
 100b090:	dc000415 	stw	r16,16(sp)
 100b094:	dd400515 	stw	r21,20(sp)
 100b098:	003fdc06 	br	100b00c <__umoddi3+0x128>
 100b09c:	00bfffd4 	movui	r2,65535
 100b0a0:	12004a36 	bltu	r2,r8,100b1cc <__umoddi3+0x2e8>
 100b0a4:	00803fc4 	movi	r2,255
 100b0a8:	12010d36 	bltu	r2,r8,100b4e0 <__umoddi3+0x5fc>
 100b0ac:	000b883a 	mov	r5,zero
 100b0b0:	0005883a 	mov	r2,zero
 100b0b4:	9884d83a 	srl	r2,r19,r2
 100b0b8:	010040b4 	movhi	r4,258
 100b0bc:	2127ab04 	addi	r4,r4,-24916
 100b0c0:	01800804 	movi	r6,32
 100b0c4:	1105883a 	add	r2,r2,r4
 100b0c8:	10c00003 	ldbu	r3,0(r2)
 100b0cc:	28c7883a 	add	r3,r5,r3
 100b0d0:	30c7c83a 	sub	r3,r6,r3
 100b0d4:	1800dc1e 	bne	r3,zero,100b448 <__umoddi3+0x564>
 100b0d8:	002d883a 	mov	r22,zero
 100b0dc:	982ed43a 	srli	r23,r19,16
 100b0e0:	a809883a 	mov	r4,r21
 100b0e4:	9cbfffcc 	andi	r18,r19,65535
 100b0e8:	b80b883a 	mov	r5,r23
 100b0ec:	10026400 	call	1002640 <__udivsi3>
 100b0f0:	100b883a 	mov	r5,r2
 100b0f4:	9009883a 	mov	r4,r18
 100b0f8:	10026680 	call	1002668 <__mulsi3>
 100b0fc:	a809883a 	mov	r4,r21
 100b100:	b80b883a 	mov	r5,r23
 100b104:	1023883a 	mov	r17,r2
 100b108:	10026540 	call	1002654 <__umodsi3>
 100b10c:	1004943a 	slli	r2,r2,16
 100b110:	8006d43a 	srli	r3,r16,16
 100b114:	10c4b03a 	or	r2,r2,r3
 100b118:	1440032e 	bgeu	r2,r17,100b128 <__umoddi3+0x244>
 100b11c:	14c5883a 	add	r2,r2,r19
 100b120:	14c00136 	bltu	r2,r19,100b128 <__umoddi3+0x244>
 100b124:	14410236 	bltu	r2,r17,100b530 <__umoddi3+0x64c>
 100b128:	1463c83a 	sub	r17,r2,r17
 100b12c:	8809883a 	mov	r4,r17
 100b130:	b80b883a 	mov	r5,r23
 100b134:	10026400 	call	1002640 <__udivsi3>
 100b138:	9009883a 	mov	r4,r18
 100b13c:	100b883a 	mov	r5,r2
 100b140:	10026680 	call	1002668 <__mulsi3>
 100b144:	8809883a 	mov	r4,r17
 100b148:	b80b883a 	mov	r5,r23
 100b14c:	102b883a 	mov	r21,r2
 100b150:	10026540 	call	1002654 <__umodsi3>
 100b154:	1004943a 	slli	r2,r2,16
 100b158:	80ffffcc 	andi	r3,r16,65535
 100b15c:	10c4b03a 	or	r2,r2,r3
 100b160:	1540042e 	bgeu	r2,r21,100b174 <__umoddi3+0x290>
 100b164:	14c5883a 	add	r2,r2,r19
 100b168:	14c00236 	bltu	r2,r19,100b174 <__umoddi3+0x290>
 100b16c:	1540012e 	bgeu	r2,r21,100b174 <__umoddi3+0x290>
 100b170:	14c5883a 	add	r2,r2,r19
 100b174:	1545c83a 	sub	r2,r2,r21
 100b178:	1584d83a 	srl	r2,r2,r22
 100b17c:	0013883a 	mov	r9,zero
 100b180:	d8800415 	stw	r2,16(sp)
 100b184:	d8c00417 	ldw	r3,16(sp)
 100b188:	0005883a 	mov	r2,zero
 100b18c:	d8800515 	stw	r2,20(sp)
 100b190:	1811883a 	mov	r8,r3
 100b194:	003f9d06 	br	100b00c <__umoddi3+0x128>
 100b198:	00804034 	movhi	r2,256
 100b19c:	10bfffc4 	addi	r2,r2,-1
 100b1a0:	14c0c636 	bltu	r2,r19,100b4bc <__umoddi3+0x5d8>
 100b1a4:	01400404 	movi	r5,16
 100b1a8:	2805883a 	mov	r2,r5
 100b1ac:	003f6c06 	br	100af60 <__umoddi3+0x7c>
 100b1b0:	01000044 	movi	r4,1
 100b1b4:	000b883a 	mov	r5,zero
 100b1b8:	10026400 	call	1002640 <__udivsi3>
 100b1bc:	1027883a 	mov	r19,r2
 100b1c0:	00bfffd4 	movui	r2,65535
 100b1c4:	14fff436 	bltu	r2,r19,100b198 <__umoddi3+0x2b4>
 100b1c8:	003f6106 	br	100af50 <__umoddi3+0x6c>
 100b1cc:	00804034 	movhi	r2,256
 100b1d0:	10bfffc4 	addi	r2,r2,-1
 100b1d4:	1200c536 	bltu	r2,r8,100b4ec <__umoddi3+0x608>
 100b1d8:	01400404 	movi	r5,16
 100b1dc:	2805883a 	mov	r2,r5
 100b1e0:	003fb406 	br	100b0b4 <__umoddi3+0x1d0>
 100b1e4:	00804034 	movhi	r2,256
 100b1e8:	10bfffc4 	addi	r2,r2,-1
 100b1ec:	11c0c236 	bltu	r2,r7,100b4f8 <__umoddi3+0x614>
 100b1f0:	01400404 	movi	r5,16
 100b1f4:	2805883a 	mov	r2,r5
 100b1f8:	003f9806 	br	100b05c <__umoddi3+0x178>
 100b1fc:	84c9c83a 	sub	r4,r16,r19
 100b200:	8105803a 	cmpltu	r2,r16,r4
 100b204:	a987c83a 	sub	r3,r21,r6
 100b208:	18abc83a 	sub	r21,r3,r2
 100b20c:	2021883a 	mov	r16,r4
 100b210:	003f9d06 	br	100b088 <__umoddi3+0x1a4>
 100b214:	9ca6983a 	sll	r19,r19,r18
 100b218:	3485c83a 	sub	r2,r6,r18
 100b21c:	a8a2d83a 	srl	r17,r21,r2
 100b220:	982ed43a 	srli	r23,r19,16
 100b224:	ac86983a 	sll	r3,r21,r18
 100b228:	8084d83a 	srl	r2,r16,r2
 100b22c:	8809883a 	mov	r4,r17
 100b230:	b80b883a 	mov	r5,r23
 100b234:	18b8b03a 	or	fp,r3,r2
 100b238:	9d3fffcc 	andi	r20,r19,65535
 100b23c:	10026400 	call	1002640 <__udivsi3>
 100b240:	100b883a 	mov	r5,r2
 100b244:	a009883a 	mov	r4,r20
 100b248:	10026680 	call	1002668 <__mulsi3>
 100b24c:	8809883a 	mov	r4,r17
 100b250:	b80b883a 	mov	r5,r23
 100b254:	102b883a 	mov	r21,r2
 100b258:	10026540 	call	1002654 <__umodsi3>
 100b25c:	1004943a 	slli	r2,r2,16
 100b260:	e006d43a 	srli	r3,fp,16
 100b264:	902d883a 	mov	r22,r18
 100b268:	10c4b03a 	or	r2,r2,r3
 100b26c:	1540022e 	bgeu	r2,r21,100b278 <__umoddi3+0x394>
 100b270:	14c5883a 	add	r2,r2,r19
 100b274:	14c0ab2e 	bgeu	r2,r19,100b524 <__umoddi3+0x640>
 100b278:	1563c83a 	sub	r17,r2,r21
 100b27c:	8809883a 	mov	r4,r17
 100b280:	b80b883a 	mov	r5,r23
 100b284:	10026400 	call	1002640 <__udivsi3>
 100b288:	100b883a 	mov	r5,r2
 100b28c:	a009883a 	mov	r4,r20
 100b290:	10026680 	call	1002668 <__mulsi3>
 100b294:	8809883a 	mov	r4,r17
 100b298:	b80b883a 	mov	r5,r23
 100b29c:	102b883a 	mov	r21,r2
 100b2a0:	10026540 	call	1002654 <__umodsi3>
 100b2a4:	1004943a 	slli	r2,r2,16
 100b2a8:	e0ffffcc 	andi	r3,fp,65535
 100b2ac:	10c4b03a 	or	r2,r2,r3
 100b2b0:	1540042e 	bgeu	r2,r21,100b2c4 <__umoddi3+0x3e0>
 100b2b4:	14c5883a 	add	r2,r2,r19
 100b2b8:	14c00236 	bltu	r2,r19,100b2c4 <__umoddi3+0x3e0>
 100b2bc:	1540012e 	bgeu	r2,r21,100b2c4 <__umoddi3+0x3e0>
 100b2c0:	14c5883a 	add	r2,r2,r19
 100b2c4:	84a0983a 	sll	r16,r16,r18
 100b2c8:	156bc83a 	sub	r21,r2,r21
 100b2cc:	003f3106 	br	100af94 <__umoddi3+0xb0>
 100b2d0:	3c8fc83a 	sub	r7,r7,r18
 100b2d4:	3486983a 	sll	r3,r6,r18
 100b2d8:	99c4d83a 	srl	r2,r19,r7
 100b2dc:	a9e2d83a 	srl	r17,r21,r7
 100b2e0:	ac8c983a 	sll	r6,r21,r18
 100b2e4:	18acb03a 	or	r22,r3,r2
 100b2e8:	b02ed43a 	srli	r23,r22,16
 100b2ec:	81c4d83a 	srl	r2,r16,r7
 100b2f0:	8809883a 	mov	r4,r17
 100b2f4:	b80b883a 	mov	r5,r23
 100b2f8:	308cb03a 	or	r6,r6,r2
 100b2fc:	d9c00315 	stw	r7,12(sp)
 100b300:	d9800215 	stw	r6,8(sp)
 100b304:	b53fffcc 	andi	r20,r22,65535
 100b308:	10026400 	call	1002640 <__udivsi3>
 100b30c:	100b883a 	mov	r5,r2
 100b310:	a009883a 	mov	r4,r20
 100b314:	1039883a 	mov	fp,r2
 100b318:	10026680 	call	1002668 <__mulsi3>
 100b31c:	8809883a 	mov	r4,r17
 100b320:	b80b883a 	mov	r5,r23
 100b324:	102b883a 	mov	r21,r2
 100b328:	10026540 	call	1002654 <__umodsi3>
 100b32c:	d9000217 	ldw	r4,8(sp)
 100b330:	1004943a 	slli	r2,r2,16
 100b334:	9ca6983a 	sll	r19,r19,r18
 100b338:	2006d43a 	srli	r3,r4,16
 100b33c:	84a0983a 	sll	r16,r16,r18
 100b340:	dcc00015 	stw	r19,0(sp)
 100b344:	10c4b03a 	or	r2,r2,r3
 100b348:	dc000115 	stw	r16,4(sp)
 100b34c:	1540032e 	bgeu	r2,r21,100b35c <__umoddi3+0x478>
 100b350:	1585883a 	add	r2,r2,r22
 100b354:	e73fffc4 	addi	fp,fp,-1
 100b358:	15806e2e 	bgeu	r2,r22,100b514 <__umoddi3+0x630>
 100b35c:	1563c83a 	sub	r17,r2,r21
 100b360:	8809883a 	mov	r4,r17
 100b364:	b80b883a 	mov	r5,r23
 100b368:	10026400 	call	1002640 <__udivsi3>
 100b36c:	100b883a 	mov	r5,r2
 100b370:	a009883a 	mov	r4,r20
 100b374:	1021883a 	mov	r16,r2
 100b378:	10026680 	call	1002668 <__mulsi3>
 100b37c:	b80b883a 	mov	r5,r23
 100b380:	8809883a 	mov	r4,r17
 100b384:	1029883a 	mov	r20,r2
 100b388:	10026540 	call	1002654 <__umodsi3>
 100b38c:	d9400217 	ldw	r5,8(sp)
 100b390:	1004943a 	slli	r2,r2,16
 100b394:	28ffffcc 	andi	r3,r5,65535
 100b398:	10c4b03a 	or	r2,r2,r3
 100b39c:	1500032e 	bgeu	r2,r20,100b3ac <__umoddi3+0x4c8>
 100b3a0:	1585883a 	add	r2,r2,r22
 100b3a4:	843fffc4 	addi	r16,r16,-1
 100b3a8:	1580562e 	bgeu	r2,r22,100b504 <__umoddi3+0x620>
 100b3ac:	d9800017 	ldw	r6,0(sp)
 100b3b0:	e022943a 	slli	r17,fp,16
 100b3b4:	302ed43a 	srli	r23,r6,16
 100b3b8:	8462b03a 	or	r17,r16,r17
 100b3bc:	34ffffcc 	andi	r19,r6,65535
 100b3c0:	882ad43a 	srli	r21,r17,16
 100b3c4:	8c7fffcc 	andi	r17,r17,65535
 100b3c8:	8809883a 	mov	r4,r17
 100b3cc:	980b883a 	mov	r5,r19
 100b3d0:	1521c83a 	sub	r16,r2,r20
 100b3d4:	10026680 	call	1002668 <__mulsi3>
 100b3d8:	8809883a 	mov	r4,r17
 100b3dc:	b80b883a 	mov	r5,r23
 100b3e0:	1029883a 	mov	r20,r2
 100b3e4:	10026680 	call	1002668 <__mulsi3>
 100b3e8:	980b883a 	mov	r5,r19
 100b3ec:	a809883a 	mov	r4,r21
 100b3f0:	1023883a 	mov	r17,r2
 100b3f4:	10026680 	call	1002668 <__mulsi3>
 100b3f8:	a809883a 	mov	r4,r21
 100b3fc:	b80b883a 	mov	r5,r23
 100b400:	1027883a 	mov	r19,r2
 100b404:	10026680 	call	1002668 <__mulsi3>
 100b408:	100b883a 	mov	r5,r2
 100b40c:	a004d43a 	srli	r2,r20,16
 100b410:	8ce3883a 	add	r17,r17,r19
 100b414:	1449883a 	add	r4,r2,r17
 100b418:	24c0022e 	bgeu	r4,r19,100b424 <__umoddi3+0x540>
 100b41c:	00800074 	movhi	r2,1
 100b420:	288b883a 	add	r5,r5,r2
 100b424:	2004d43a 	srli	r2,r4,16
 100b428:	2008943a 	slli	r4,r4,16
 100b42c:	a0ffffcc 	andi	r3,r20,65535
 100b430:	288d883a 	add	r6,r5,r2
 100b434:	20c9883a 	add	r4,r4,r3
 100b438:	81800b36 	bltu	r16,r6,100b468 <__umoddi3+0x584>
 100b43c:	81804026 	beq	r16,r6,100b540 <__umoddi3+0x65c>
 100b440:	818dc83a 	sub	r6,r16,r6
 100b444:	00000f06 	br	100b484 <__umoddi3+0x5a0>
 100b448:	30c5c83a 	sub	r2,r6,r3
 100b44c:	182d883a 	mov	r22,r3
 100b450:	8084d83a 	srl	r2,r16,r2
 100b454:	a8c6983a 	sll	r3,r21,r3
 100b458:	9da6983a 	sll	r19,r19,r22
 100b45c:	85a0983a 	sll	r16,r16,r22
 100b460:	18aab03a 	or	r21,r3,r2
 100b464:	003f1d06 	br	100b0dc <__umoddi3+0x1f8>
 100b468:	d8c00017 	ldw	r3,0(sp)
 100b46c:	20c5c83a 	sub	r2,r4,r3
 100b470:	2089803a 	cmpltu	r4,r4,r2
 100b474:	3587c83a 	sub	r3,r6,r22
 100b478:	1907c83a 	sub	r3,r3,r4
 100b47c:	80cdc83a 	sub	r6,r16,r3
 100b480:	1009883a 	mov	r4,r2
 100b484:	d9400117 	ldw	r5,4(sp)
 100b488:	2905c83a 	sub	r2,r5,r4
 100b48c:	2887803a 	cmpltu	r3,r5,r2
 100b490:	30c7c83a 	sub	r3,r6,r3
 100b494:	d9800317 	ldw	r6,12(sp)
 100b498:	1484d83a 	srl	r2,r2,r18
 100b49c:	1988983a 	sll	r4,r3,r6
 100b4a0:	1c86d83a 	srl	r3,r3,r18
 100b4a4:	2088b03a 	or	r4,r4,r2
 100b4a8:	2011883a 	mov	r8,r4
 100b4ac:	1813883a 	mov	r9,r3
 100b4b0:	d9000415 	stw	r4,16(sp)
 100b4b4:	d8c00515 	stw	r3,20(sp)
 100b4b8:	003ed406 	br	100b00c <__umoddi3+0x128>
 100b4bc:	01400604 	movi	r5,24
 100b4c0:	2805883a 	mov	r2,r5
 100b4c4:	003ea606 	br	100af60 <__umoddi3+0x7c>
 100b4c8:	01400204 	movi	r5,8
 100b4cc:	2805883a 	mov	r2,r5
 100b4d0:	003ea306 	br	100af60 <__umoddi3+0x7c>
 100b4d4:	01400204 	movi	r5,8
 100b4d8:	2805883a 	mov	r2,r5
 100b4dc:	003edf06 	br	100b05c <__umoddi3+0x178>
 100b4e0:	01400204 	movi	r5,8
 100b4e4:	2805883a 	mov	r2,r5
 100b4e8:	003ef206 	br	100b0b4 <__umoddi3+0x1d0>
 100b4ec:	01400604 	movi	r5,24
 100b4f0:	2805883a 	mov	r2,r5
 100b4f4:	003eef06 	br	100b0b4 <__umoddi3+0x1d0>
 100b4f8:	01400604 	movi	r5,24
 100b4fc:	2805883a 	mov	r2,r5
 100b500:	003ed606 	br	100b05c <__umoddi3+0x178>
 100b504:	153fa92e 	bgeu	r2,r20,100b3ac <__umoddi3+0x4c8>
 100b508:	843fffc4 	addi	r16,r16,-1
 100b50c:	1585883a 	add	r2,r2,r22
 100b510:	003fa606 	br	100b3ac <__umoddi3+0x4c8>
 100b514:	157f912e 	bgeu	r2,r21,100b35c <__umoddi3+0x478>
 100b518:	e73fffc4 	addi	fp,fp,-1
 100b51c:	1585883a 	add	r2,r2,r22
 100b520:	003f8e06 	br	100b35c <__umoddi3+0x478>
 100b524:	157f542e 	bgeu	r2,r21,100b278 <__umoddi3+0x394>
 100b528:	14c5883a 	add	r2,r2,r19
 100b52c:	003f5206 	br	100b278 <__umoddi3+0x394>
 100b530:	14c5883a 	add	r2,r2,r19
 100b534:	003efc06 	br	100b128 <__umoddi3+0x244>
 100b538:	14c5883a 	add	r2,r2,r19
 100b53c:	003ea606 	br	100afd8 <__umoddi3+0xf4>
 100b540:	d8800117 	ldw	r2,4(sp)
 100b544:	113fc836 	bltu	r2,r4,100b468 <__umoddi3+0x584>
 100b548:	000d883a 	mov	r6,zero
 100b54c:	003fcd06 	br	100b484 <__umoddi3+0x5a0>

0100b550 <__eqdf2>:
 100b550:	f811883a 	mov	r8,ra
 100b554:	100c3d80 	call	100c3d8 <_mcount>
 100b558:	403f883a 	mov	ra,r8
 100b55c:	deffef04 	addi	sp,sp,-68
 100b560:	dfc01015 	stw	ra,64(sp)
 100b564:	dc400f15 	stw	r17,60(sp)
 100b568:	dc000e15 	stw	r16,56(sp)
 100b56c:	dc400404 	addi	r17,sp,16
 100b570:	2005883a 	mov	r2,r4
 100b574:	2807883a 	mov	r3,r5
 100b578:	d809883a 	mov	r4,sp
 100b57c:	880b883a 	mov	r5,r17
 100b580:	dc000904 	addi	r16,sp,36
 100b584:	d8c00115 	stw	r3,4(sp)
 100b588:	d8800015 	stw	r2,0(sp)
 100b58c:	d9800215 	stw	r6,8(sp)
 100b590:	d9c00315 	stw	r7,12(sp)
 100b594:	1002b880 	call	1002b88 <__unpack_d>
 100b598:	d9000204 	addi	r4,sp,8
 100b59c:	800b883a 	mov	r5,r16
 100b5a0:	1002b880 	call	1002b88 <__unpack_d>
 100b5a4:	d8800417 	ldw	r2,16(sp)
 100b5a8:	00c00044 	movi	r3,1
 100b5ac:	180d883a 	mov	r6,r3
 100b5b0:	1880062e 	bgeu	r3,r2,100b5cc <__eqdf2+0x7c>
 100b5b4:	d8800917 	ldw	r2,36(sp)
 100b5b8:	8809883a 	mov	r4,r17
 100b5bc:	800b883a 	mov	r5,r16
 100b5c0:	1880022e 	bgeu	r3,r2,100b5cc <__eqdf2+0x7c>
 100b5c4:	100ba1c0 	call	100ba1c <__fpcmp_parts_d>
 100b5c8:	100d883a 	mov	r6,r2
 100b5cc:	3005883a 	mov	r2,r6
 100b5d0:	dfc01017 	ldw	ra,64(sp)
 100b5d4:	dc400f17 	ldw	r17,60(sp)
 100b5d8:	dc000e17 	ldw	r16,56(sp)
 100b5dc:	dec01104 	addi	sp,sp,68
 100b5e0:	f800283a 	ret

0100b5e4 <__nedf2>:
 100b5e4:	f811883a 	mov	r8,ra
 100b5e8:	100c3d80 	call	100c3d8 <_mcount>
 100b5ec:	403f883a 	mov	ra,r8
 100b5f0:	deffef04 	addi	sp,sp,-68
 100b5f4:	dfc01015 	stw	ra,64(sp)
 100b5f8:	dc400f15 	stw	r17,60(sp)
 100b5fc:	dc000e15 	stw	r16,56(sp)
 100b600:	dc400404 	addi	r17,sp,16
 100b604:	2005883a 	mov	r2,r4
 100b608:	2807883a 	mov	r3,r5
 100b60c:	d809883a 	mov	r4,sp
 100b610:	880b883a 	mov	r5,r17
 100b614:	dc000904 	addi	r16,sp,36
 100b618:	d8c00115 	stw	r3,4(sp)
 100b61c:	d8800015 	stw	r2,0(sp)
 100b620:	d9800215 	stw	r6,8(sp)
 100b624:	d9c00315 	stw	r7,12(sp)
 100b628:	1002b880 	call	1002b88 <__unpack_d>
 100b62c:	d9000204 	addi	r4,sp,8
 100b630:	800b883a 	mov	r5,r16
 100b634:	1002b880 	call	1002b88 <__unpack_d>
 100b638:	d8800417 	ldw	r2,16(sp)
 100b63c:	00c00044 	movi	r3,1
 100b640:	180d883a 	mov	r6,r3
 100b644:	1880062e 	bgeu	r3,r2,100b660 <__nedf2+0x7c>
 100b648:	d8800917 	ldw	r2,36(sp)
 100b64c:	8809883a 	mov	r4,r17
 100b650:	800b883a 	mov	r5,r16
 100b654:	1880022e 	bgeu	r3,r2,100b660 <__nedf2+0x7c>
 100b658:	100ba1c0 	call	100ba1c <__fpcmp_parts_d>
 100b65c:	100d883a 	mov	r6,r2
 100b660:	3005883a 	mov	r2,r6
 100b664:	dfc01017 	ldw	ra,64(sp)
 100b668:	dc400f17 	ldw	r17,60(sp)
 100b66c:	dc000e17 	ldw	r16,56(sp)
 100b670:	dec01104 	addi	sp,sp,68
 100b674:	f800283a 	ret

0100b678 <__gtdf2>:
 100b678:	f811883a 	mov	r8,ra
 100b67c:	100c3d80 	call	100c3d8 <_mcount>
 100b680:	403f883a 	mov	ra,r8
 100b684:	deffef04 	addi	sp,sp,-68
 100b688:	dfc01015 	stw	ra,64(sp)
 100b68c:	dc400f15 	stw	r17,60(sp)
 100b690:	dc000e15 	stw	r16,56(sp)
 100b694:	dc400404 	addi	r17,sp,16
 100b698:	2005883a 	mov	r2,r4
 100b69c:	2807883a 	mov	r3,r5
 100b6a0:	d809883a 	mov	r4,sp
 100b6a4:	880b883a 	mov	r5,r17
 100b6a8:	dc000904 	addi	r16,sp,36
 100b6ac:	d8c00115 	stw	r3,4(sp)
 100b6b0:	d8800015 	stw	r2,0(sp)
 100b6b4:	d9800215 	stw	r6,8(sp)
 100b6b8:	d9c00315 	stw	r7,12(sp)
 100b6bc:	1002b880 	call	1002b88 <__unpack_d>
 100b6c0:	d9000204 	addi	r4,sp,8
 100b6c4:	800b883a 	mov	r5,r16
 100b6c8:	1002b880 	call	1002b88 <__unpack_d>
 100b6cc:	d8800417 	ldw	r2,16(sp)
 100b6d0:	00c00044 	movi	r3,1
 100b6d4:	01bfffc4 	movi	r6,-1
 100b6d8:	1880062e 	bgeu	r3,r2,100b6f4 <__gtdf2+0x7c>
 100b6dc:	d8800917 	ldw	r2,36(sp)
 100b6e0:	8809883a 	mov	r4,r17
 100b6e4:	800b883a 	mov	r5,r16
 100b6e8:	1880022e 	bgeu	r3,r2,100b6f4 <__gtdf2+0x7c>
 100b6ec:	100ba1c0 	call	100ba1c <__fpcmp_parts_d>
 100b6f0:	100d883a 	mov	r6,r2
 100b6f4:	3005883a 	mov	r2,r6
 100b6f8:	dfc01017 	ldw	ra,64(sp)
 100b6fc:	dc400f17 	ldw	r17,60(sp)
 100b700:	dc000e17 	ldw	r16,56(sp)
 100b704:	dec01104 	addi	sp,sp,68
 100b708:	f800283a 	ret

0100b70c <__gedf2>:
 100b70c:	f811883a 	mov	r8,ra
 100b710:	100c3d80 	call	100c3d8 <_mcount>
 100b714:	403f883a 	mov	ra,r8
 100b718:	deffef04 	addi	sp,sp,-68
 100b71c:	dfc01015 	stw	ra,64(sp)
 100b720:	dc400f15 	stw	r17,60(sp)
 100b724:	dc000e15 	stw	r16,56(sp)
 100b728:	dc400404 	addi	r17,sp,16
 100b72c:	2005883a 	mov	r2,r4
 100b730:	2807883a 	mov	r3,r5
 100b734:	d809883a 	mov	r4,sp
 100b738:	880b883a 	mov	r5,r17
 100b73c:	dc000904 	addi	r16,sp,36
 100b740:	d8c00115 	stw	r3,4(sp)
 100b744:	d8800015 	stw	r2,0(sp)
 100b748:	d9800215 	stw	r6,8(sp)
 100b74c:	d9c00315 	stw	r7,12(sp)
 100b750:	1002b880 	call	1002b88 <__unpack_d>
 100b754:	d9000204 	addi	r4,sp,8
 100b758:	800b883a 	mov	r5,r16
 100b75c:	1002b880 	call	1002b88 <__unpack_d>
 100b760:	d8800417 	ldw	r2,16(sp)
 100b764:	00c00044 	movi	r3,1
 100b768:	01bfffc4 	movi	r6,-1
 100b76c:	1880062e 	bgeu	r3,r2,100b788 <__gedf2+0x7c>
 100b770:	d8800917 	ldw	r2,36(sp)
 100b774:	8809883a 	mov	r4,r17
 100b778:	800b883a 	mov	r5,r16
 100b77c:	1880022e 	bgeu	r3,r2,100b788 <__gedf2+0x7c>
 100b780:	100ba1c0 	call	100ba1c <__fpcmp_parts_d>
 100b784:	100d883a 	mov	r6,r2
 100b788:	3005883a 	mov	r2,r6
 100b78c:	dfc01017 	ldw	ra,64(sp)
 100b790:	dc400f17 	ldw	r17,60(sp)
 100b794:	dc000e17 	ldw	r16,56(sp)
 100b798:	dec01104 	addi	sp,sp,68
 100b79c:	f800283a 	ret

0100b7a0 <__ltdf2>:
 100b7a0:	f811883a 	mov	r8,ra
 100b7a4:	100c3d80 	call	100c3d8 <_mcount>
 100b7a8:	403f883a 	mov	ra,r8
 100b7ac:	deffef04 	addi	sp,sp,-68
 100b7b0:	dfc01015 	stw	ra,64(sp)
 100b7b4:	dc400f15 	stw	r17,60(sp)
 100b7b8:	dc000e15 	stw	r16,56(sp)
 100b7bc:	dc400404 	addi	r17,sp,16
 100b7c0:	2005883a 	mov	r2,r4
 100b7c4:	2807883a 	mov	r3,r5
 100b7c8:	d809883a 	mov	r4,sp
 100b7cc:	880b883a 	mov	r5,r17
 100b7d0:	dc000904 	addi	r16,sp,36
 100b7d4:	d8c00115 	stw	r3,4(sp)
 100b7d8:	d8800015 	stw	r2,0(sp)
 100b7dc:	d9800215 	stw	r6,8(sp)
 100b7e0:	d9c00315 	stw	r7,12(sp)
 100b7e4:	1002b880 	call	1002b88 <__unpack_d>
 100b7e8:	d9000204 	addi	r4,sp,8
 100b7ec:	800b883a 	mov	r5,r16
 100b7f0:	1002b880 	call	1002b88 <__unpack_d>
 100b7f4:	d8800417 	ldw	r2,16(sp)
 100b7f8:	00c00044 	movi	r3,1
 100b7fc:	180d883a 	mov	r6,r3
 100b800:	1880062e 	bgeu	r3,r2,100b81c <__ltdf2+0x7c>
 100b804:	d8800917 	ldw	r2,36(sp)
 100b808:	8809883a 	mov	r4,r17
 100b80c:	800b883a 	mov	r5,r16
 100b810:	1880022e 	bgeu	r3,r2,100b81c <__ltdf2+0x7c>
 100b814:	100ba1c0 	call	100ba1c <__fpcmp_parts_d>
 100b818:	100d883a 	mov	r6,r2
 100b81c:	3005883a 	mov	r2,r6
 100b820:	dfc01017 	ldw	ra,64(sp)
 100b824:	dc400f17 	ldw	r17,60(sp)
 100b828:	dc000e17 	ldw	r16,56(sp)
 100b82c:	dec01104 	addi	sp,sp,68
 100b830:	f800283a 	ret

0100b834 <__floatsidf>:
 100b834:	f811883a 	mov	r8,ra
 100b838:	100c3d80 	call	100c3d8 <_mcount>
 100b83c:	403f883a 	mov	ra,r8
 100b840:	defff604 	addi	sp,sp,-40
 100b844:	dfc00915 	stw	ra,36(sp)
 100b848:	dcc00815 	stw	r19,32(sp)
 100b84c:	dc800715 	stw	r18,28(sp)
 100b850:	dc400615 	stw	r17,24(sp)
 100b854:	dc000515 	stw	r16,20(sp)
 100b858:	2006d7fa 	srli	r3,r4,31
 100b85c:	008000c4 	movi	r2,3
 100b860:	d8800015 	stw	r2,0(sp)
 100b864:	d8c00115 	stw	r3,4(sp)
 100b868:	20000f1e 	bne	r4,zero,100b8a8 <__floatsidf+0x74>
 100b86c:	00800084 	movi	r2,2
 100b870:	d8800015 	stw	r2,0(sp)
 100b874:	d809883a 	mov	r4,sp
 100b878:	10028680 	call	1002868 <__pack_d>
 100b87c:	1009883a 	mov	r4,r2
 100b880:	180b883a 	mov	r5,r3
 100b884:	2005883a 	mov	r2,r4
 100b888:	2807883a 	mov	r3,r5
 100b88c:	dfc00917 	ldw	ra,36(sp)
 100b890:	dcc00817 	ldw	r19,32(sp)
 100b894:	dc800717 	ldw	r18,28(sp)
 100b898:	dc400617 	ldw	r17,24(sp)
 100b89c:	dc000517 	ldw	r16,20(sp)
 100b8a0:	dec00a04 	addi	sp,sp,40
 100b8a4:	f800283a 	ret
 100b8a8:	00800f04 	movi	r2,60
 100b8ac:	1807003a 	cmpeq	r3,r3,zero
 100b8b0:	d8800215 	stw	r2,8(sp)
 100b8b4:	18001126 	beq	r3,zero,100b8fc <__floatsidf+0xc8>
 100b8b8:	0027883a 	mov	r19,zero
 100b8bc:	2025883a 	mov	r18,r4
 100b8c0:	d9000315 	stw	r4,12(sp)
 100b8c4:	dcc00415 	stw	r19,16(sp)
 100b8c8:	10027dc0 	call	10027dc <__clzsi2>
 100b8cc:	11000744 	addi	r4,r2,29
 100b8d0:	013fe80e 	bge	zero,r4,100b874 <__floatsidf+0x40>
 100b8d4:	10bfff44 	addi	r2,r2,-3
 100b8d8:	10000c16 	blt	r2,zero,100b90c <__floatsidf+0xd8>
 100b8dc:	90a2983a 	sll	r17,r18,r2
 100b8e0:	0021883a 	mov	r16,zero
 100b8e4:	d8800217 	ldw	r2,8(sp)
 100b8e8:	dc400415 	stw	r17,16(sp)
 100b8ec:	dc000315 	stw	r16,12(sp)
 100b8f0:	1105c83a 	sub	r2,r2,r4
 100b8f4:	d8800215 	stw	r2,8(sp)
 100b8f8:	003fde06 	br	100b874 <__floatsidf+0x40>
 100b8fc:	00a00034 	movhi	r2,32768
 100b900:	20800a26 	beq	r4,r2,100b92c <__floatsidf+0xf8>
 100b904:	0109c83a 	sub	r4,zero,r4
 100b908:	003feb06 	br	100b8b8 <__floatsidf+0x84>
 100b90c:	9006d07a 	srli	r3,r18,1
 100b910:	008007c4 	movi	r2,31
 100b914:	1105c83a 	sub	r2,r2,r4
 100b918:	1886d83a 	srl	r3,r3,r2
 100b91c:	9922983a 	sll	r17,r19,r4
 100b920:	9120983a 	sll	r16,r18,r4
 100b924:	1c62b03a 	or	r17,r3,r17
 100b928:	003fee06 	br	100b8e4 <__floatsidf+0xb0>
 100b92c:	0009883a 	mov	r4,zero
 100b930:	01707834 	movhi	r5,49632
 100b934:	003fd306 	br	100b884 <__floatsidf+0x50>

0100b938 <__fixdfsi>:
 100b938:	f811883a 	mov	r8,ra
 100b93c:	100c3d80 	call	100c3d8 <_mcount>
 100b940:	403f883a 	mov	ra,r8
 100b944:	defff804 	addi	sp,sp,-32
 100b948:	dfc00715 	stw	ra,28(sp)
 100b94c:	2005883a 	mov	r2,r4
 100b950:	2807883a 	mov	r3,r5
 100b954:	d809883a 	mov	r4,sp
 100b958:	d9400204 	addi	r5,sp,8
 100b95c:	d8c00115 	stw	r3,4(sp)
 100b960:	d8800015 	stw	r2,0(sp)
 100b964:	1002b880 	call	1002b88 <__unpack_d>
 100b968:	d8c00217 	ldw	r3,8(sp)
 100b96c:	00800084 	movi	r2,2
 100b970:	1880051e 	bne	r3,r2,100b988 <__fixdfsi+0x50>
 100b974:	0007883a 	mov	r3,zero
 100b978:	1805883a 	mov	r2,r3
 100b97c:	dfc00717 	ldw	ra,28(sp)
 100b980:	dec00804 	addi	sp,sp,32
 100b984:	f800283a 	ret
 100b988:	00800044 	movi	r2,1
 100b98c:	10fff92e 	bgeu	r2,r3,100b974 <__fixdfsi+0x3c>
 100b990:	00800104 	movi	r2,4
 100b994:	18800426 	beq	r3,r2,100b9a8 <__fixdfsi+0x70>
 100b998:	d8c00417 	ldw	r3,16(sp)
 100b99c:	183ff516 	blt	r3,zero,100b974 <__fixdfsi+0x3c>
 100b9a0:	00800784 	movi	r2,30
 100b9a4:	10c0080e 	bge	r2,r3,100b9c8 <__fixdfsi+0x90>
 100b9a8:	d8800317 	ldw	r2,12(sp)
 100b9ac:	1000121e 	bne	r2,zero,100b9f8 <__fixdfsi+0xc0>
 100b9b0:	00e00034 	movhi	r3,32768
 100b9b4:	18ffffc4 	addi	r3,r3,-1
 100b9b8:	1805883a 	mov	r2,r3
 100b9bc:	dfc00717 	ldw	ra,28(sp)
 100b9c0:	dec00804 	addi	sp,sp,32
 100b9c4:	f800283a 	ret
 100b9c8:	00800f04 	movi	r2,60
 100b9cc:	10d1c83a 	sub	r8,r2,r3
 100b9d0:	40bff804 	addi	r2,r8,-32
 100b9d4:	d9800517 	ldw	r6,20(sp)
 100b9d8:	d9c00617 	ldw	r7,24(sp)
 100b9dc:	10000816 	blt	r2,zero,100ba00 <__fixdfsi+0xc8>
 100b9e0:	3888d83a 	srl	r4,r7,r2
 100b9e4:	d8800317 	ldw	r2,12(sp)
 100b9e8:	2007883a 	mov	r3,r4
 100b9ec:	103fe226 	beq	r2,zero,100b978 <__fixdfsi+0x40>
 100b9f0:	0107c83a 	sub	r3,zero,r4
 100b9f4:	003fe006 	br	100b978 <__fixdfsi+0x40>
 100b9f8:	00e00034 	movhi	r3,32768
 100b9fc:	003fde06 	br	100b978 <__fixdfsi+0x40>
 100ba00:	39c7883a 	add	r3,r7,r7
 100ba04:	008007c4 	movi	r2,31
 100ba08:	1205c83a 	sub	r2,r2,r8
 100ba0c:	1886983a 	sll	r3,r3,r2
 100ba10:	3208d83a 	srl	r4,r6,r8
 100ba14:	1908b03a 	or	r4,r3,r4
 100ba18:	003ff206 	br	100b9e4 <__fixdfsi+0xac>

0100ba1c <__fpcmp_parts_d>:
 100ba1c:	f811883a 	mov	r8,ra
 100ba20:	100c3d80 	call	100c3d8 <_mcount>
 100ba24:	403f883a 	mov	ra,r8
 100ba28:	21800017 	ldw	r6,0(r4)
 100ba2c:	00c00044 	movi	r3,1
 100ba30:	19800a2e 	bgeu	r3,r6,100ba5c <__fpcmp_parts_d+0x40>
 100ba34:	28800017 	ldw	r2,0(r5)
 100ba38:	1880082e 	bgeu	r3,r2,100ba5c <__fpcmp_parts_d+0x40>
 100ba3c:	00c00104 	movi	r3,4
 100ba40:	30c02826 	beq	r6,r3,100bae4 <__fpcmp_parts_d+0xc8>
 100ba44:	10c02026 	beq	r2,r3,100bac8 <__fpcmp_parts_d+0xac>
 100ba48:	00c00084 	movi	r3,2
 100ba4c:	30c00526 	beq	r6,r3,100ba64 <__fpcmp_parts_d+0x48>
 100ba50:	10c0071e 	bne	r2,r3,100ba70 <__fpcmp_parts_d+0x54>
 100ba54:	20800117 	ldw	r2,4(r4)
 100ba58:	1000091e 	bne	r2,zero,100ba80 <__fpcmp_parts_d+0x64>
 100ba5c:	00800044 	movi	r2,1
 100ba60:	f800283a 	ret
 100ba64:	10c0181e 	bne	r2,r3,100bac8 <__fpcmp_parts_d+0xac>
 100ba68:	0005883a 	mov	r2,zero
 100ba6c:	f800283a 	ret
 100ba70:	22000117 	ldw	r8,4(r4)
 100ba74:	28800117 	ldw	r2,4(r5)
 100ba78:	40800326 	beq	r8,r2,100ba88 <__fpcmp_parts_d+0x6c>
 100ba7c:	403ff726 	beq	r8,zero,100ba5c <__fpcmp_parts_d+0x40>
 100ba80:	00bfffc4 	movi	r2,-1
 100ba84:	f800283a 	ret
 100ba88:	20c00217 	ldw	r3,8(r4)
 100ba8c:	28800217 	ldw	r2,8(r5)
 100ba90:	10fffa16 	blt	r2,r3,100ba7c <__fpcmp_parts_d+0x60>
 100ba94:	18800916 	blt	r3,r2,100babc <__fpcmp_parts_d+0xa0>
 100ba98:	21c00417 	ldw	r7,16(r4)
 100ba9c:	28c00417 	ldw	r3,16(r5)
 100baa0:	21800317 	ldw	r6,12(r4)
 100baa4:	28800317 	ldw	r2,12(r5)
 100baa8:	19fff436 	bltu	r3,r7,100ba7c <__fpcmp_parts_d+0x60>
 100baac:	38c00a26 	beq	r7,r3,100bad8 <__fpcmp_parts_d+0xbc>
 100bab0:	38c00236 	bltu	r7,r3,100babc <__fpcmp_parts_d+0xa0>
 100bab4:	19ffec1e 	bne	r3,r7,100ba68 <__fpcmp_parts_d+0x4c>
 100bab8:	30bfeb2e 	bgeu	r6,r2,100ba68 <__fpcmp_parts_d+0x4c>
 100babc:	403ff026 	beq	r8,zero,100ba80 <__fpcmp_parts_d+0x64>
 100bac0:	00800044 	movi	r2,1
 100bac4:	003fe606 	br	100ba60 <__fpcmp_parts_d+0x44>
 100bac8:	28800117 	ldw	r2,4(r5)
 100bacc:	103fec26 	beq	r2,zero,100ba80 <__fpcmp_parts_d+0x64>
 100bad0:	00800044 	movi	r2,1
 100bad4:	003fe206 	br	100ba60 <__fpcmp_parts_d+0x44>
 100bad8:	11bff52e 	bgeu	r2,r6,100bab0 <__fpcmp_parts_d+0x94>
 100badc:	403fdf26 	beq	r8,zero,100ba5c <__fpcmp_parts_d+0x40>
 100bae0:	003fe706 	br	100ba80 <__fpcmp_parts_d+0x64>
 100bae4:	11bfdb1e 	bne	r2,r6,100ba54 <__fpcmp_parts_d+0x38>
 100bae8:	28c00117 	ldw	r3,4(r5)
 100baec:	20800117 	ldw	r2,4(r4)
 100baf0:	1885c83a 	sub	r2,r3,r2
 100baf4:	f800283a 	ret

0100baf8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 100baf8:	f811883a 	mov	r8,ra
 100bafc:	100c3d80 	call	100c3d8 <_mcount>
 100bb00:	403f883a 	mov	ra,r8
 100bb04:	defff404 	addi	sp,sp,-48
 100bb08:	df000b15 	stw	fp,44(sp)
 100bb0c:	df000b04 	addi	fp,sp,44
 100bb10:	e13ffb15 	stw	r4,-20(fp)
 100bb14:	e17ffc15 	stw	r5,-16(fp)
 100bb18:	e1bffd15 	stw	r6,-12(fp)
 100bb1c:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 100bb20:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 100bb24:	008040f4 	movhi	r2,259
 100bb28:	10975f04 	addi	r2,r2,23932
 100bb2c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 100bb30:	1005003a 	cmpeq	r2,r2,zero
 100bb34:	1000411e 	bne	r2,zero,100bc3c <alt_alarm_start+0x144>
  {
    if (alarm)
 100bb38:	e0bffb17 	ldw	r2,-20(fp)
 100bb3c:	1005003a 	cmpeq	r2,r2,zero
 100bb40:	10003b1e 	bne	r2,zero,100bc30 <alt_alarm_start+0x138>
    {
      alarm->callback = callback;
 100bb44:	e0fffb17 	ldw	r3,-20(fp)
 100bb48:	e0bffd17 	ldw	r2,-12(fp)
 100bb4c:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 100bb50:	e0fffb17 	ldw	r3,-20(fp)
 100bb54:	e0bffe17 	ldw	r2,-8(fp)
 100bb58:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100bb5c:	0005303a 	rdctl	r2,status
 100bb60:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100bb64:	e0fff817 	ldw	r3,-32(fp)
 100bb68:	00bfff84 	movi	r2,-2
 100bb6c:	1884703a 	and	r2,r3,r2
 100bb70:	1001703a 	wrctl	status,r2
  
  return context;
 100bb74:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 100bb78:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 100bb7c:	008040f4 	movhi	r2,259
 100bb80:	10976004 	addi	r2,r2,23936
 100bb84:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 100bb88:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 100bb8c:	e0fffc17 	ldw	r3,-16(fp)
 100bb90:	e0bff917 	ldw	r2,-28(fp)
 100bb94:	1885883a 	add	r2,r3,r2
 100bb98:	10c00044 	addi	r3,r2,1
 100bb9c:	e0bffb17 	ldw	r2,-20(fp)
 100bba0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 100bba4:	e0bffb17 	ldw	r2,-20(fp)
 100bba8:	10c00217 	ldw	r3,8(r2)
 100bbac:	e0bff917 	ldw	r2,-28(fp)
 100bbb0:	1880042e 	bgeu	r3,r2,100bbc4 <alt_alarm_start+0xcc>
      {
        alarm->rollover = 1;
 100bbb4:	e0fffb17 	ldw	r3,-20(fp)
 100bbb8:	00800044 	movi	r2,1
 100bbbc:	18800405 	stb	r2,16(r3)
 100bbc0:	00000206 	br	100bbcc <alt_alarm_start+0xd4>
      }
      else
      {
        alarm->rollover = 0;
 100bbc4:	e0bffb17 	ldw	r2,-20(fp)
 100bbc8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 100bbcc:	e0fffb17 	ldw	r3,-20(fp)
 100bbd0:	008040f4 	movhi	r2,259
 100bbd4:	10a01404 	addi	r2,r2,-32688
 100bbd8:	e0bff615 	stw	r2,-40(fp)
 100bbdc:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 100bbe0:	e0fff717 	ldw	r3,-36(fp)
 100bbe4:	e0bff617 	ldw	r2,-40(fp)
 100bbe8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 100bbec:	e0bff617 	ldw	r2,-40(fp)
 100bbf0:	10c00017 	ldw	r3,0(r2)
 100bbf4:	e0bff717 	ldw	r2,-36(fp)
 100bbf8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 100bbfc:	e0bff617 	ldw	r2,-40(fp)
 100bc00:	10c00017 	ldw	r3,0(r2)
 100bc04:	e0bff717 	ldw	r2,-36(fp)
 100bc08:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 100bc0c:	e0fff617 	ldw	r3,-40(fp)
 100bc10:	e0bff717 	ldw	r2,-36(fp)
 100bc14:	18800015 	stw	r2,0(r3)
 100bc18:	e0bffa17 	ldw	r2,-24(fp)
 100bc1c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100bc20:	e0bff517 	ldw	r2,-44(fp)
 100bc24:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 100bc28:	e03fff15 	stw	zero,-4(fp)
 100bc2c:	00000506 	br	100bc44 <alt_alarm_start+0x14c>
    }
    else
    {
      return -EINVAL;
 100bc30:	00bffa84 	movi	r2,-22
 100bc34:	e0bfff15 	stw	r2,-4(fp)
 100bc38:	00000206 	br	100bc44 <alt_alarm_start+0x14c>
    }
  }
  else
  {
    return -ENOTSUP;
 100bc3c:	00bfde84 	movi	r2,-134
 100bc40:	e0bfff15 	stw	r2,-4(fp)
 100bc44:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 100bc48:	e037883a 	mov	sp,fp
 100bc4c:	df000017 	ldw	fp,0(sp)
 100bc50:	dec00104 	addi	sp,sp,4
 100bc54:	f800283a 	ret

0100bc58 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 100bc58:	f811883a 	mov	r8,ra
 100bc5c:	100c3d80 	call	100c3d8 <_mcount>
 100bc60:	403f883a 	mov	ra,r8
 100bc64:	defff804 	addi	sp,sp,-32
 100bc68:	dfc00715 	stw	ra,28(sp)
 100bc6c:	df000615 	stw	fp,24(sp)
 100bc70:	df000604 	addi	fp,sp,24
 100bc74:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 100bc78:	e0bffc17 	ldw	r2,-16(fp)
 100bc7c:	1004803a 	cmplt	r2,r2,zero
 100bc80:	1000091e 	bne	r2,zero,100bca8 <close+0x50>
 100bc84:	e13ffc17 	ldw	r4,-16(fp)
 100bc88:	01400304 	movi	r5,12
 100bc8c:	10026680 	call	1002668 <__mulsi3>
 100bc90:	1007883a 	mov	r3,r2
 100bc94:	008040b4 	movhi	r2,258
 100bc98:	109b4804 	addi	r2,r2,27936
 100bc9c:	1887883a 	add	r3,r3,r2
 100bca0:	e0ffff15 	stw	r3,-4(fp)
 100bca4:	00000106 	br	100bcac <close+0x54>
 100bca8:	e03fff15 	stw	zero,-4(fp)
 100bcac:	e0bfff17 	ldw	r2,-4(fp)
 100bcb0:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 100bcb4:	e0bffb17 	ldw	r2,-20(fp)
 100bcb8:	1005003a 	cmpeq	r2,r2,zero
 100bcbc:	10001d1e 	bne	r2,zero,100bd34 <close+0xdc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 100bcc0:	e0bffb17 	ldw	r2,-20(fp)
 100bcc4:	10800017 	ldw	r2,0(r2)
 100bcc8:	10800417 	ldw	r2,16(r2)
 100bccc:	1005003a 	cmpeq	r2,r2,zero
 100bcd0:	1000071e 	bne	r2,zero,100bcf0 <close+0x98>
 100bcd4:	e0bffb17 	ldw	r2,-20(fp)
 100bcd8:	10800017 	ldw	r2,0(r2)
 100bcdc:	10800417 	ldw	r2,16(r2)
 100bce0:	e13ffb17 	ldw	r4,-20(fp)
 100bce4:	103ee83a 	callr	r2
 100bce8:	e0bffe15 	stw	r2,-8(fp)
 100bcec:	00000106 	br	100bcf4 <close+0x9c>
 100bcf0:	e03ffe15 	stw	zero,-8(fp)
 100bcf4:	e0bffe17 	ldw	r2,-8(fp)
 100bcf8:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 100bcfc:	e13ffc17 	ldw	r4,-16(fp)
 100bd00:	100c6100 	call	100c610 <alt_release_fd>
    if (rval < 0)
 100bd04:	e0bffa17 	ldw	r2,-24(fp)
 100bd08:	1004403a 	cmpge	r2,r2,zero
 100bd0c:	1000071e 	bne	r2,zero,100bd2c <close+0xd4>
    {
      ALT_ERRNO = -rval;
 100bd10:	100bd640 	call	100bd64 <alt_get_errno>
 100bd14:	e0fffa17 	ldw	r3,-24(fp)
 100bd18:	00c7c83a 	sub	r3,zero,r3
 100bd1c:	10c00015 	stw	r3,0(r2)
      return -1;
 100bd20:	00bfffc4 	movi	r2,-1
 100bd24:	e0bffd15 	stw	r2,-12(fp)
 100bd28:	00000806 	br	100bd4c <close+0xf4>
    }
    return 0;
 100bd2c:	e03ffd15 	stw	zero,-12(fp)
 100bd30:	00000606 	br	100bd4c <close+0xf4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100bd34:	100bd640 	call	100bd64 <alt_get_errno>
 100bd38:	1007883a 	mov	r3,r2
 100bd3c:	00801444 	movi	r2,81
 100bd40:	18800015 	stw	r2,0(r3)
    return -1;
 100bd44:	00bfffc4 	movi	r2,-1
 100bd48:	e0bffd15 	stw	r2,-12(fp)
 100bd4c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 100bd50:	e037883a 	mov	sp,fp
 100bd54:	dfc00117 	ldw	ra,4(sp)
 100bd58:	df000017 	ldw	fp,0(sp)
 100bd5c:	dec00204 	addi	sp,sp,8
 100bd60:	f800283a 	ret

0100bd64 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100bd64:	f811883a 	mov	r8,ra
 100bd68:	100c3d80 	call	100c3d8 <_mcount>
 100bd6c:	403f883a 	mov	ra,r8
 100bd70:	defffd04 	addi	sp,sp,-12
 100bd74:	dfc00215 	stw	ra,8(sp)
 100bd78:	df000115 	stw	fp,4(sp)
 100bd7c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100bd80:	008040f4 	movhi	r2,259
 100bd84:	10a01204 	addi	r2,r2,-32696
 100bd88:	10800017 	ldw	r2,0(r2)
 100bd8c:	1005003a 	cmpeq	r2,r2,zero
 100bd90:	1000061e 	bne	r2,zero,100bdac <alt_get_errno+0x48>
 100bd94:	008040f4 	movhi	r2,259
 100bd98:	10a01204 	addi	r2,r2,-32696
 100bd9c:	10800017 	ldw	r2,0(r2)
 100bda0:	103ee83a 	callr	r2
 100bda4:	e0bfff15 	stw	r2,-4(fp)
 100bda8:	00000306 	br	100bdb8 <alt_get_errno+0x54>
 100bdac:	008040f4 	movhi	r2,259
 100bdb0:	10975a04 	addi	r2,r2,23912
 100bdb4:	e0bfff15 	stw	r2,-4(fp)
 100bdb8:	e0bfff17 	ldw	r2,-4(fp)
}
 100bdbc:	e037883a 	mov	sp,fp
 100bdc0:	dfc00117 	ldw	ra,4(sp)
 100bdc4:	df000017 	ldw	fp,0(sp)
 100bdc8:	dec00204 	addi	sp,sp,8
 100bdcc:	f800283a 	ret

0100bdd0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 100bdd0:	f811883a 	mov	r8,ra
 100bdd4:	100c3d80 	call	100c3d8 <_mcount>
 100bdd8:	403f883a 	mov	ra,r8
 100bddc:	defffc04 	addi	sp,sp,-16
 100bde0:	df000315 	stw	fp,12(sp)
 100bde4:	df000304 	addi	fp,sp,12
 100bde8:	e13ffd15 	stw	r4,-12(fp)
 100bdec:	e17ffe15 	stw	r5,-8(fp)
 100bdf0:	e1bfff15 	stw	r6,-4(fp)
  return len;
 100bdf4:	e0bfff17 	ldw	r2,-4(fp)
}
 100bdf8:	e037883a 	mov	sp,fp
 100bdfc:	df000017 	ldw	fp,0(sp)
 100be00:	dec00104 	addi	sp,sp,4
 100be04:	f800283a 	ret

0100be08 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 100be08:	f811883a 	mov	r8,ra
 100be0c:	100c3d80 	call	100c3d8 <_mcount>
 100be10:	403f883a 	mov	ra,r8
 100be14:	defff904 	addi	sp,sp,-28
 100be18:	dfc00615 	stw	ra,24(sp)
 100be1c:	df000515 	stw	fp,20(sp)
 100be20:	df000504 	addi	fp,sp,20
 100be24:	e13ffc15 	stw	r4,-16(fp)
 100be28:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100be2c:	e0bffc17 	ldw	r2,-16(fp)
 100be30:	1004803a 	cmplt	r2,r2,zero
 100be34:	1000091e 	bne	r2,zero,100be5c <fstat+0x54>
 100be38:	e13ffc17 	ldw	r4,-16(fp)
 100be3c:	01400304 	movi	r5,12
 100be40:	10026680 	call	1002668 <__mulsi3>
 100be44:	1007883a 	mov	r3,r2
 100be48:	008040b4 	movhi	r2,258
 100be4c:	109b4804 	addi	r2,r2,27936
 100be50:	1887883a 	add	r3,r3,r2
 100be54:	e0ffff15 	stw	r3,-4(fp)
 100be58:	00000106 	br	100be60 <fstat+0x58>
 100be5c:	e03fff15 	stw	zero,-4(fp)
 100be60:	e0bfff17 	ldw	r2,-4(fp)
 100be64:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 100be68:	e0bffb17 	ldw	r2,-20(fp)
 100be6c:	1005003a 	cmpeq	r2,r2,zero
 100be70:	1000121e 	bne	r2,zero,100bebc <fstat+0xb4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 100be74:	e0bffb17 	ldw	r2,-20(fp)
 100be78:	10800017 	ldw	r2,0(r2)
 100be7c:	10800817 	ldw	r2,32(r2)
 100be80:	1005003a 	cmpeq	r2,r2,zero
 100be84:	1000081e 	bne	r2,zero,100bea8 <fstat+0xa0>
    {
      return fd->dev->fstat(fd, st);
 100be88:	e0bffb17 	ldw	r2,-20(fp)
 100be8c:	10800017 	ldw	r2,0(r2)
 100be90:	10800817 	ldw	r2,32(r2)
 100be94:	e13ffb17 	ldw	r4,-20(fp)
 100be98:	e17ffd17 	ldw	r5,-12(fp)
 100be9c:	103ee83a 	callr	r2
 100bea0:	e0bffe15 	stw	r2,-8(fp)
 100bea4:	00000b06 	br	100bed4 <fstat+0xcc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 100bea8:	e0fffd17 	ldw	r3,-12(fp)
 100beac:	00880004 	movi	r2,8192
 100beb0:	18800115 	stw	r2,4(r3)
      return 0;
 100beb4:	e03ffe15 	stw	zero,-8(fp)
 100beb8:	00000606 	br	100bed4 <fstat+0xcc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100bebc:	100beec0 	call	100beec <alt_get_errno>
 100bec0:	1007883a 	mov	r3,r2
 100bec4:	00801444 	movi	r2,81
 100bec8:	18800015 	stw	r2,0(r3)
    return -1;
 100becc:	00bfffc4 	movi	r2,-1
 100bed0:	e0bffe15 	stw	r2,-8(fp)
 100bed4:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 100bed8:	e037883a 	mov	sp,fp
 100bedc:	dfc00117 	ldw	ra,4(sp)
 100bee0:	df000017 	ldw	fp,0(sp)
 100bee4:	dec00204 	addi	sp,sp,8
 100bee8:	f800283a 	ret

0100beec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100beec:	f811883a 	mov	r8,ra
 100bef0:	100c3d80 	call	100c3d8 <_mcount>
 100bef4:	403f883a 	mov	ra,r8
 100bef8:	defffd04 	addi	sp,sp,-12
 100befc:	dfc00215 	stw	ra,8(sp)
 100bf00:	df000115 	stw	fp,4(sp)
 100bf04:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100bf08:	008040f4 	movhi	r2,259
 100bf0c:	10a01204 	addi	r2,r2,-32696
 100bf10:	10800017 	ldw	r2,0(r2)
 100bf14:	1005003a 	cmpeq	r2,r2,zero
 100bf18:	1000061e 	bne	r2,zero,100bf34 <alt_get_errno+0x48>
 100bf1c:	008040f4 	movhi	r2,259
 100bf20:	10a01204 	addi	r2,r2,-32696
 100bf24:	10800017 	ldw	r2,0(r2)
 100bf28:	103ee83a 	callr	r2
 100bf2c:	e0bfff15 	stw	r2,-4(fp)
 100bf30:	00000306 	br	100bf40 <alt_get_errno+0x54>
 100bf34:	008040f4 	movhi	r2,259
 100bf38:	10975a04 	addi	r2,r2,23912
 100bf3c:	e0bfff15 	stw	r2,-4(fp)
 100bf40:	e0bfff17 	ldw	r2,-4(fp)
}
 100bf44:	e037883a 	mov	sp,fp
 100bf48:	dfc00117 	ldw	ra,4(sp)
 100bf4c:	df000017 	ldw	fp,0(sp)
 100bf50:	dec00204 	addi	sp,sp,8
 100bf54:	f800283a 	ret

0100bf58 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 100bf58:	f811883a 	mov	r8,ra
 100bf5c:	100c3d80 	call	100c3d8 <_mcount>
 100bf60:	403f883a 	mov	ra,r8
 100bf64:	deffeb04 	addi	sp,sp,-84
 100bf68:	dfc01415 	stw	ra,80(sp)
 100bf6c:	df001315 	stw	fp,76(sp)
 100bf70:	df001304 	addi	fp,sp,76
 100bf74:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100bf78:	e0bffd17 	ldw	r2,-12(fp)
 100bf7c:	1004803a 	cmplt	r2,r2,zero
 100bf80:	1000091e 	bne	r2,zero,100bfa8 <isatty+0x50>
 100bf84:	e13ffd17 	ldw	r4,-12(fp)
 100bf88:	01400304 	movi	r5,12
 100bf8c:	10026680 	call	1002668 <__mulsi3>
 100bf90:	1007883a 	mov	r3,r2
 100bf94:	008040b4 	movhi	r2,258
 100bf98:	109b4804 	addi	r2,r2,27936
 100bf9c:	1887883a 	add	r3,r3,r2
 100bfa0:	e0ffff15 	stw	r3,-4(fp)
 100bfa4:	00000106 	br	100bfac <isatty+0x54>
 100bfa8:	e03fff15 	stw	zero,-4(fp)
 100bfac:	e0bfff17 	ldw	r2,-4(fp)
 100bfb0:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 100bfb4:	e0bfed17 	ldw	r2,-76(fp)
 100bfb8:	1005003a 	cmpeq	r2,r2,zero
 100bfbc:	10000f1e 	bne	r2,zero,100bffc <isatty+0xa4>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 100bfc0:	e0bfed17 	ldw	r2,-76(fp)
 100bfc4:	10800017 	ldw	r2,0(r2)
 100bfc8:	10800817 	ldw	r2,32(r2)
 100bfcc:	1004c03a 	cmpne	r2,r2,zero
 100bfd0:	1000031e 	bne	r2,zero,100bfe0 <isatty+0x88>
    {
      return 1;
 100bfd4:	00800044 	movi	r2,1
 100bfd8:	e0bffe15 	stw	r2,-8(fp)
 100bfdc:	00000c06 	br	100c010 <isatty+0xb8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 100bfe0:	e17fee04 	addi	r5,fp,-72
 100bfe4:	e13ffd17 	ldw	r4,-12(fp)
 100bfe8:	100be080 	call	100be08 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 100bfec:	e0bfef17 	ldw	r2,-68(fp)
 100bff0:	10880020 	cmpeqi	r2,r2,8192
 100bff4:	e0bffe15 	stw	r2,-8(fp)
 100bff8:	00000506 	br	100c010 <isatty+0xb8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100bffc:	100c0280 	call	100c028 <alt_get_errno>
 100c000:	1007883a 	mov	r3,r2
 100c004:	00801444 	movi	r2,81
 100c008:	18800015 	stw	r2,0(r3)
    return 0;
 100c00c:	e03ffe15 	stw	zero,-8(fp)
 100c010:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 100c014:	e037883a 	mov	sp,fp
 100c018:	dfc00117 	ldw	ra,4(sp)
 100c01c:	df000017 	ldw	fp,0(sp)
 100c020:	dec00204 	addi	sp,sp,8
 100c024:	f800283a 	ret

0100c028 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100c028:	f811883a 	mov	r8,ra
 100c02c:	100c3d80 	call	100c3d8 <_mcount>
 100c030:	403f883a 	mov	ra,r8
 100c034:	defffd04 	addi	sp,sp,-12
 100c038:	dfc00215 	stw	ra,8(sp)
 100c03c:	df000115 	stw	fp,4(sp)
 100c040:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100c044:	008040f4 	movhi	r2,259
 100c048:	10a01204 	addi	r2,r2,-32696
 100c04c:	10800017 	ldw	r2,0(r2)
 100c050:	1005003a 	cmpeq	r2,r2,zero
 100c054:	1000061e 	bne	r2,zero,100c070 <alt_get_errno+0x48>
 100c058:	008040f4 	movhi	r2,259
 100c05c:	10a01204 	addi	r2,r2,-32696
 100c060:	10800017 	ldw	r2,0(r2)
 100c064:	103ee83a 	callr	r2
 100c068:	e0bfff15 	stw	r2,-4(fp)
 100c06c:	00000306 	br	100c07c <alt_get_errno+0x54>
 100c070:	008040f4 	movhi	r2,259
 100c074:	10975a04 	addi	r2,r2,23912
 100c078:	e0bfff15 	stw	r2,-4(fp)
 100c07c:	e0bfff17 	ldw	r2,-4(fp)
}
 100c080:	e037883a 	mov	sp,fp
 100c084:	dfc00117 	ldw	ra,4(sp)
 100c088:	df000017 	ldw	fp,0(sp)
 100c08c:	dec00204 	addi	sp,sp,8
 100c090:	f800283a 	ret

0100c094 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 100c094:	f811883a 	mov	r8,ra
 100c098:	100c3d80 	call	100c3d8 <_mcount>
 100c09c:	403f883a 	mov	ra,r8
 100c0a0:	defffe04 	addi	sp,sp,-8
 100c0a4:	dfc00115 	stw	ra,4(sp)
 100c0a8:	df000015 	stw	fp,0(sp)
 100c0ac:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 100c0b0:	010040f4 	movhi	r4,259
 100c0b4:	21203b04 	addi	r4,r4,-32532
 100c0b8:	014040b4 	movhi	r5,258
 100c0bc:	29692e04 	addi	r5,r5,-23368
 100c0c0:	018040f4 	movhi	r6,259
 100c0c4:	31a03b04 	addi	r6,r6,-32532
 100c0c8:	100c1200 	call	100c120 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 100c0cc:	01004034 	movhi	r4,256
 100c0d0:	21000004 	addi	r4,r4,0
 100c0d4:	01400234 	movhi	r5,8
 100c0d8:	29400804 	addi	r5,r5,32
 100c0dc:	01800234 	movhi	r6,8
 100c0e0:	31807304 	addi	r6,r6,460
 100c0e4:	100c1200 	call	100c120 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 100c0e8:	010040b4 	movhi	r4,258
 100c0ec:	21277204 	addi	r4,r4,-25144
 100c0f0:	014040b4 	movhi	r5,258
 100c0f4:	29677204 	addi	r5,r5,-25144
 100c0f8:	018040b4 	movhi	r6,258
 100c0fc:	31a92e04 	addi	r6,r6,-23368
 100c100:	100c1200 	call	100c120 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 100c104:	10184240 	call	1018424 <alt_dcache_flush_all>
  alt_icache_flush_all();
 100c108:	10189e00 	call	10189e0 <alt_icache_flush_all>
}
 100c10c:	e037883a 	mov	sp,fp
 100c110:	dfc00117 	ldw	ra,4(sp)
 100c114:	df000017 	ldw	fp,0(sp)
 100c118:	dec00204 	addi	sp,sp,8
 100c11c:	f800283a 	ret

0100c120 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 100c120:	f811883a 	mov	r8,ra
 100c124:	100c3d80 	call	100c3d8 <_mcount>
 100c128:	403f883a 	mov	ra,r8
 100c12c:	defffc04 	addi	sp,sp,-16
 100c130:	df000315 	stw	fp,12(sp)
 100c134:	df000304 	addi	fp,sp,12
 100c138:	e13ffd15 	stw	r4,-12(fp)
 100c13c:	e17ffe15 	stw	r5,-8(fp)
 100c140:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 100c144:	e0fffe17 	ldw	r3,-8(fp)
 100c148:	e0bffd17 	ldw	r2,-12(fp)
 100c14c:	18800e26 	beq	r3,r2,100c188 <alt_load_section+0x68>
  {
    while( to != end )
 100c150:	00000a06 	br	100c17c <alt_load_section+0x5c>
    {
      *to++ = *from++;
 100c154:	e0bffd17 	ldw	r2,-12(fp)
 100c158:	10c00017 	ldw	r3,0(r2)
 100c15c:	e0bffe17 	ldw	r2,-8(fp)
 100c160:	10c00015 	stw	r3,0(r2)
 100c164:	e0bffe17 	ldw	r2,-8(fp)
 100c168:	10800104 	addi	r2,r2,4
 100c16c:	e0bffe15 	stw	r2,-8(fp)
 100c170:	e0bffd17 	ldw	r2,-12(fp)
 100c174:	10800104 	addi	r2,r2,4
 100c178:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 100c17c:	e0fffe17 	ldw	r3,-8(fp)
 100c180:	e0bfff17 	ldw	r2,-4(fp)
 100c184:	18bff31e 	bne	r3,r2,100c154 <alt_load_section+0x34>
    {
      *to++ = *from++;
    }
  }
}
 100c188:	e037883a 	mov	sp,fp
 100c18c:	df000017 	ldw	fp,0(sp)
 100c190:	dec00104 	addi	sp,sp,4
 100c194:	f800283a 	ret

0100c198 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 100c198:	f811883a 	mov	r8,ra
 100c19c:	100c3d80 	call	100c3d8 <_mcount>
 100c1a0:	403f883a 	mov	ra,r8
 100c1a4:	defff804 	addi	sp,sp,-32
 100c1a8:	dfc00715 	stw	ra,28(sp)
 100c1ac:	df000615 	stw	fp,24(sp)
 100c1b0:	df000604 	addi	fp,sp,24
 100c1b4:	e13ffc15 	stw	r4,-16(fp)
 100c1b8:	e17ffd15 	stw	r5,-12(fp)
 100c1bc:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 100c1c0:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100c1c4:	e0bffc17 	ldw	r2,-16(fp)
 100c1c8:	1004803a 	cmplt	r2,r2,zero
 100c1cc:	1000091e 	bne	r2,zero,100c1f4 <lseek+0x5c>
 100c1d0:	e13ffc17 	ldw	r4,-16(fp)
 100c1d4:	01400304 	movi	r5,12
 100c1d8:	10026680 	call	1002668 <__mulsi3>
 100c1dc:	1007883a 	mov	r3,r2
 100c1e0:	008040b4 	movhi	r2,258
 100c1e4:	109b4804 	addi	r2,r2,27936
 100c1e8:	1887883a 	add	r3,r3,r2
 100c1ec:	e0ffff15 	stw	r3,-4(fp)
 100c1f0:	00000106 	br	100c1f8 <lseek+0x60>
 100c1f4:	e03fff15 	stw	zero,-4(fp)
 100c1f8:	e0bfff17 	ldw	r2,-4(fp)
 100c1fc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 100c200:	e0bffb17 	ldw	r2,-20(fp)
 100c204:	1005003a 	cmpeq	r2,r2,zero
 100c208:	1000111e 	bne	r2,zero,100c250 <lseek+0xb8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 100c20c:	e0bffb17 	ldw	r2,-20(fp)
 100c210:	10800017 	ldw	r2,0(r2)
 100c214:	10800717 	ldw	r2,28(r2)
 100c218:	1005003a 	cmpeq	r2,r2,zero
 100c21c:	1000091e 	bne	r2,zero,100c244 <lseek+0xac>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 100c220:	e0bffb17 	ldw	r2,-20(fp)
 100c224:	10800017 	ldw	r2,0(r2)
 100c228:	10800717 	ldw	r2,28(r2)
 100c22c:	e13ffb17 	ldw	r4,-20(fp)
 100c230:	e17ffd17 	ldw	r5,-12(fp)
 100c234:	e1bffe17 	ldw	r6,-8(fp)
 100c238:	103ee83a 	callr	r2
 100c23c:	e0bffa15 	stw	r2,-24(fp)
 100c240:	00000506 	br	100c258 <lseek+0xc0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 100c244:	00bfde84 	movi	r2,-134
 100c248:	e0bffa15 	stw	r2,-24(fp)
 100c24c:	00000206 	br	100c258 <lseek+0xc0>
    }
  }
  else  
  {
    rc = -EBADFD;
 100c250:	00bfebc4 	movi	r2,-81
 100c254:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 100c258:	e0bffa17 	ldw	r2,-24(fp)
 100c25c:	1004403a 	cmpge	r2,r2,zero
 100c260:	1000071e 	bne	r2,zero,100c280 <lseek+0xe8>
  {
    ALT_ERRNO = -rc;
 100c264:	100c2980 	call	100c298 <alt_get_errno>
 100c268:	1007883a 	mov	r3,r2
 100c26c:	e0bffa17 	ldw	r2,-24(fp)
 100c270:	0085c83a 	sub	r2,zero,r2
 100c274:	18800015 	stw	r2,0(r3)
    rc = -1;
 100c278:	00bfffc4 	movi	r2,-1
 100c27c:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 100c280:	e0bffa17 	ldw	r2,-24(fp)
}
 100c284:	e037883a 	mov	sp,fp
 100c288:	dfc00117 	ldw	ra,4(sp)
 100c28c:	df000017 	ldw	fp,0(sp)
 100c290:	dec00204 	addi	sp,sp,8
 100c294:	f800283a 	ret

0100c298 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100c298:	f811883a 	mov	r8,ra
 100c29c:	100c3d80 	call	100c3d8 <_mcount>
 100c2a0:	403f883a 	mov	ra,r8
 100c2a4:	defffd04 	addi	sp,sp,-12
 100c2a8:	dfc00215 	stw	ra,8(sp)
 100c2ac:	df000115 	stw	fp,4(sp)
 100c2b0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100c2b4:	008040f4 	movhi	r2,259
 100c2b8:	10a01204 	addi	r2,r2,-32696
 100c2bc:	10800017 	ldw	r2,0(r2)
 100c2c0:	1005003a 	cmpeq	r2,r2,zero
 100c2c4:	1000061e 	bne	r2,zero,100c2e0 <alt_get_errno+0x48>
 100c2c8:	008040f4 	movhi	r2,259
 100c2cc:	10a01204 	addi	r2,r2,-32696
 100c2d0:	10800017 	ldw	r2,0(r2)
 100c2d4:	103ee83a 	callr	r2
 100c2d8:	e0bfff15 	stw	r2,-4(fp)
 100c2dc:	00000306 	br	100c2ec <alt_get_errno+0x54>
 100c2e0:	008040f4 	movhi	r2,259
 100c2e4:	10975a04 	addi	r2,r2,23912
 100c2e8:	e0bfff15 	stw	r2,-4(fp)
 100c2ec:	e0bfff17 	ldw	r2,-4(fp)
}
 100c2f0:	e037883a 	mov	sp,fp
 100c2f4:	dfc00117 	ldw	ra,4(sp)
 100c2f8:	df000017 	ldw	fp,0(sp)
 100c2fc:	dec00204 	addi	sp,sp,8
 100c300:	f800283a 	ret

0100c304 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 100c304:	f811883a 	mov	r8,ra
 100c308:	100c3d80 	call	100c3d8 <_mcount>
 100c30c:	403f883a 	mov	ra,r8
 100c310:	defffb04 	addi	sp,sp,-20
 100c314:	dfc00415 	stw	ra,16(sp)
 100c318:	df000315 	stw	fp,12(sp)
 100c31c:	df000304 	addi	fp,sp,12
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 100c320:	0009883a 	mov	r4,zero
 100c324:	1016a400 	call	1016a40 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 100c328:	100d7080 	call	100d708 <OSInit>
 100c32c:	01000044 	movi	r4,1
 100c330:	10129400 	call	1012940 <OSSemCreate>
 100c334:	1007883a 	mov	r3,r2
 100c338:	008040f4 	movhi	r2,259
 100c33c:	10976204 	addi	r2,r2,23944
 100c340:	10c00015 	stw	r3,0(r2)
 100c344:	01000044 	movi	r4,1
 100c348:	10129400 	call	1012940 <OSSemCreate>
 100c34c:	1007883a 	mov	r3,r2
 100c350:	008040f4 	movhi	r2,259
 100c354:	10976404 	addi	r2,r2,23952
 100c358:	10c00015 	stw	r3,0(r2)
 100c35c:	008040f4 	movhi	r2,259
 100c360:	10975b04 	addi	r2,r2,23916
 100c364:	e0bffd15 	stw	r2,-12(fp)
 100c368:	00800044 	movi	r2,1
 100c36c:	e0bffe0d 	sth	r2,-8(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
 100c370:	e13ffe0b 	ldhu	r4,-8(fp)
 100c374:	10129400 	call	1012940 <OSSemCreate>
 100c378:	1007883a 	mov	r3,r2
 100c37c:	e0bffd17 	ldw	r2,-12(fp)
 100c380:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 100c384:	1016a800 	call	1016a80 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 100c388:	010040b4 	movhi	r4,258
 100c38c:	21286d04 	addi	r4,r4,-24140
 100c390:	014040b4 	movhi	r5,258
 100c394:	29686d04 	addi	r5,r5,-24140
 100c398:	018040b4 	movhi	r6,258
 100c39c:	31a86d04 	addi	r6,r6,-24140
 100c3a0:	1018aec0 	call	1018aec <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 100c3a4:	10185780 	call	1018578 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 100c3a8:	010040b4 	movhi	r4,258
 100c3ac:	21217a04 	addi	r4,r4,-31256
 100c3b0:	10198600 	call	1019860 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 100c3b4:	d1175617 	ldw	r4,23896(gp)
 100c3b8:	d1575717 	ldw	r5,23900(gp)
 100c3bc:	d1975817 	ldw	r6,23904(gp)
 100c3c0:	10016880 	call	1001688 <main>
 100c3c4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 100c3c8:	01000044 	movi	r4,1
 100c3cc:	100bc580 	call	100bc58 <close>
  exit (result);
 100c3d0:	e13fff17 	ldw	r4,-4(fp)
 100c3d4:	10198800 	call	1019880 <exit>

0100c3d8 <_mcount>:
         * of values for bits 4:2 won't be even (aligning on cache line boundaries
         * will skew it).  Higher bits should be fairly random.
         */
        /* fn_head = mcount_fn_head + (((unsigned int)self_pc >> 5) & (HASH_BUCKETS - 1)); */

        srli    r2, ra, 3
 100c3d8:	f804d0fa 	srli	r2,ra,3
        movhi   r3, %hiadj(__mcount_fn_head)
 100c3dc:	00c04174 	movhi	r3,261
        addi    r3, r3, %lo(__mcount_fn_head)
 100c3e0:	18e6f904 	addi	r3,r3,-25628
        andi    r2, r2, 0xFC
 100c3e4:	10803f0c 	andi	r2,r2,252
        add     r11, r2, r3
 100c3e8:	10d7883a 	add	r11,r2,r3
        /* The fast case is where we have already allocated a function arc, and so
         * also a function pointer.
         */

        /* First find the function being called (using self_pc) */
        mov     r10, r11
 100c3ec:	5815883a 	mov	r10,r11
0:
        ldw     r10, 0(r10)
 100c3f0:	52800017 	ldw	r10,0(r10)
        beq     r10, zero, .Lnew_arc
 100c3f4:	50000726 	beq	r10,zero,100c414 <_mcount+0x3c>
        ldw     r2, 4(r10)
 100c3f8:	50800117 	ldw	r2,4(r10)
        bne     r2, ra, 0b
 100c3fc:	17fffc1e 	bne	r2,ra,100c3f0 <_mcount+0x18>

        /* Found a function entry for this PC. Now look for an arc with a matching
         * from_pc value. There will always be at least one arc. */
        ldw     r3, 8(r10)
 100c400:	50c00217 	ldw	r3,8(r10)
0:
        ldw     r2, 4(r3)
 100c404:	18800117 	ldw	r2,4(r3)
        beq     r2, r8, .Lfound_arc
 100c408:	12001626 	beq	r2,r8,100c464 <_mcount+0x8c>
        ldw     r3, 0(r3)
 100c40c:	18c00017 	ldw	r3,0(r3)
        bne     r3, zero, 0b
 100c410:	183ffc1e 	bne	r3,zero,100c404 <_mcount+0x2c>

.Lnew_arc:
        addi    sp, sp, -24
 100c414:	defffa04 	addi	sp,sp,-24

.LCFI0:
        stw     ra, 0(sp)
 100c418:	dfc00015 	stw	ra,0(sp)
        stw     r4, 4(sp)
 100c41c:	d9000115 	stw	r4,4(sp)
        stw     r5, 8(sp)
 100c420:	d9400215 	stw	r5,8(sp)
        stw     r6, 12(sp)
 100c424:	d9800315 	stw	r6,12(sp)
        stw     r7, 16(sp)
 100c428:	d9c00415 	stw	r7,16(sp)
        stw     r8, 20(sp)
 100c42c:	da000515 	stw	r8,20(sp)

.LCFI1:
        /* __mcount_record(orig_ra, orig_r8, fn_entry, *fn_head); */
        mov     r4, ra
 100c430:	f809883a 	mov	r4,ra
        mov     r5, r8
 100c434:	400b883a 	mov	r5,r8
        mov     r6, r10
 100c438:	500d883a 	mov	r6,r10
        mov     r7, r11
 100c43c:	580f883a 	mov	r7,r11
        call     __mcount_record
 100c440:	10186f80 	call	10186f8 <__mcount_record>
        
        /* restore registers from the stack */
        ldw     ra, 0(sp)
 100c444:	dfc00017 	ldw	ra,0(sp)
        ldw     r4, 4(sp)
 100c448:	d9000117 	ldw	r4,4(sp)
        ldw     r5, 8(sp)
 100c44c:	d9400217 	ldw	r5,8(sp)
        ldw     r6, 12(sp)
 100c450:	d9800317 	ldw	r6,12(sp)
        ldw     r7, 16(sp)
 100c454:	d9c00417 	ldw	r7,16(sp)
        ldw     r8, 20(sp)
 100c458:	da000517 	ldw	r8,20(sp)

        addi    sp, sp, 24
 100c45c:	dec00604 	addi	sp,sp,24

.LCFI2:
        ret
 100c460:	f800283a 	ret

.Lfound_arc:
        /* We've found the correct arc record.  Increment the count and return */
        ldw     r2, 8(r3)
 100c464:	18800217 	ldw	r2,8(r3)
        addi    r2, r2, 1
 100c468:	10800044 	addi	r2,r2,1
        stw     r2, 8(r3)
 100c46c:	18800215 	stw	r2,8(r3)
        ret
 100c470:	f800283a 	ret

0100c474 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 100c474:	f811883a 	mov	r8,ra
 100c478:	100c3d80 	call	100c3d8 <_mcount>
 100c47c:	403f883a 	mov	ra,r8
 100c480:	defff704 	addi	sp,sp,-36
 100c484:	dfc00815 	stw	ra,32(sp)
 100c488:	df000715 	stw	fp,28(sp)
 100c48c:	df000704 	addi	fp,sp,28
 100c490:	e13ffb15 	stw	r4,-20(fp)
 100c494:	e17ffc15 	stw	r5,-16(fp)
 100c498:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100c49c:	e0bffb17 	ldw	r2,-20(fp)
 100c4a0:	1004803a 	cmplt	r2,r2,zero
 100c4a4:	1000091e 	bne	r2,zero,100c4cc <read+0x58>
 100c4a8:	e13ffb17 	ldw	r4,-20(fp)
 100c4ac:	01400304 	movi	r5,12
 100c4b0:	10026680 	call	1002668 <__mulsi3>
 100c4b4:	1007883a 	mov	r3,r2
 100c4b8:	008040b4 	movhi	r2,258
 100c4bc:	109b4804 	addi	r2,r2,27936
 100c4c0:	1887883a 	add	r3,r3,r2
 100c4c4:	e0ffff15 	stw	r3,-4(fp)
 100c4c8:	00000106 	br	100c4d0 <read+0x5c>
 100c4cc:	e03fff15 	stw	zero,-4(fp)
 100c4d0:	e0bfff17 	ldw	r2,-4(fp)
 100c4d4:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 100c4d8:	e0bffa17 	ldw	r2,-24(fp)
 100c4dc:	1005003a 	cmpeq	r2,r2,zero
 100c4e0:	1000241e 	bne	r2,zero,100c574 <read+0x100>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 100c4e4:	e0bffa17 	ldw	r2,-24(fp)
 100c4e8:	10800217 	ldw	r2,8(r2)
 100c4ec:	108000cc 	andi	r2,r2,3
 100c4f0:	10800060 	cmpeqi	r2,r2,1
 100c4f4:	10001a1e 	bne	r2,zero,100c560 <read+0xec>
 100c4f8:	e0bffa17 	ldw	r2,-24(fp)
 100c4fc:	10800017 	ldw	r2,0(r2)
 100c500:	10800517 	ldw	r2,20(r2)
 100c504:	1005003a 	cmpeq	r2,r2,zero
 100c508:	1000151e 	bne	r2,zero,100c560 <read+0xec>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 100c50c:	e0bffa17 	ldw	r2,-24(fp)
 100c510:	10800017 	ldw	r2,0(r2)
 100c514:	10800517 	ldw	r2,20(r2)
 100c518:	e17ffc17 	ldw	r5,-16(fp)
 100c51c:	e1bffd17 	ldw	r6,-12(fp)
 100c520:	e13ffa17 	ldw	r4,-24(fp)
 100c524:	103ee83a 	callr	r2
 100c528:	e0bff915 	stw	r2,-28(fp)
 100c52c:	e0bff917 	ldw	r2,-28(fp)
 100c530:	1004403a 	cmpge	r2,r2,zero
 100c534:	1000071e 	bne	r2,zero,100c554 <read+0xe0>
        {
          ALT_ERRNO = -rval;
 100c538:	100c5a40 	call	100c5a4 <alt_get_errno>
 100c53c:	e0fff917 	ldw	r3,-28(fp)
 100c540:	00c7c83a 	sub	r3,zero,r3
 100c544:	10c00015 	stw	r3,0(r2)
          return -1;
 100c548:	00bfffc4 	movi	r2,-1
 100c54c:	e0bffe15 	stw	r2,-8(fp)
 100c550:	00000e06 	br	100c58c <read+0x118>
        }
        return rval;
 100c554:	e0bff917 	ldw	r2,-28(fp)
 100c558:	e0bffe15 	stw	r2,-8(fp)
 100c55c:	00000b06 	br	100c58c <read+0x118>
      }
      else
      {
        ALT_ERRNO = EACCES;
 100c560:	100c5a40 	call	100c5a4 <alt_get_errno>
 100c564:	1007883a 	mov	r3,r2
 100c568:	00800344 	movi	r2,13
 100c56c:	18800015 	stw	r2,0(r3)
 100c570:	00000406 	br	100c584 <read+0x110>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 100c574:	100c5a40 	call	100c5a4 <alt_get_errno>
 100c578:	1007883a 	mov	r3,r2
 100c57c:	00801444 	movi	r2,81
 100c580:	18800015 	stw	r2,0(r3)
  }
  return -1;
 100c584:	00bfffc4 	movi	r2,-1
 100c588:	e0bffe15 	stw	r2,-8(fp)
 100c58c:	e0bffe17 	ldw	r2,-8(fp)
}
 100c590:	e037883a 	mov	sp,fp
 100c594:	dfc00117 	ldw	ra,4(sp)
 100c598:	df000017 	ldw	fp,0(sp)
 100c59c:	dec00204 	addi	sp,sp,8
 100c5a0:	f800283a 	ret

0100c5a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100c5a4:	f811883a 	mov	r8,ra
 100c5a8:	100c3d80 	call	100c3d8 <_mcount>
 100c5ac:	403f883a 	mov	ra,r8
 100c5b0:	defffd04 	addi	sp,sp,-12
 100c5b4:	dfc00215 	stw	ra,8(sp)
 100c5b8:	df000115 	stw	fp,4(sp)
 100c5bc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100c5c0:	008040f4 	movhi	r2,259
 100c5c4:	10a01204 	addi	r2,r2,-32696
 100c5c8:	10800017 	ldw	r2,0(r2)
 100c5cc:	1005003a 	cmpeq	r2,r2,zero
 100c5d0:	1000061e 	bne	r2,zero,100c5ec <alt_get_errno+0x48>
 100c5d4:	008040f4 	movhi	r2,259
 100c5d8:	10a01204 	addi	r2,r2,-32696
 100c5dc:	10800017 	ldw	r2,0(r2)
 100c5e0:	103ee83a 	callr	r2
 100c5e4:	e0bfff15 	stw	r2,-4(fp)
 100c5e8:	00000306 	br	100c5f8 <alt_get_errno+0x54>
 100c5ec:	008040f4 	movhi	r2,259
 100c5f0:	10975a04 	addi	r2,r2,23912
 100c5f4:	e0bfff15 	stw	r2,-4(fp)
 100c5f8:	e0bfff17 	ldw	r2,-4(fp)
}
 100c5fc:	e037883a 	mov	sp,fp
 100c600:	dfc00117 	ldw	ra,4(sp)
 100c604:	df000017 	ldw	fp,0(sp)
 100c608:	dec00204 	addi	sp,sp,8
 100c60c:	f800283a 	ret

0100c610 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 100c610:	f811883a 	mov	r8,ra
 100c614:	100c3d80 	call	100c3d8 <_mcount>
 100c618:	403f883a 	mov	ra,r8
 100c61c:	defffc04 	addi	sp,sp,-16
 100c620:	dfc00315 	stw	ra,12(sp)
 100c624:	df000215 	stw	fp,8(sp)
 100c628:	dc000115 	stw	r16,4(sp)
 100c62c:	df000104 	addi	fp,sp,4
 100c630:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 100c634:	e0bfff17 	ldw	r2,-4(fp)
 100c638:	108000d0 	cmplti	r2,r2,3
 100c63c:	10000f1e 	bne	r2,zero,100c67c <alt_release_fd+0x6c>
  {
    alt_fd_list[fd].fd_flags = 0;
 100c640:	e13fff17 	ldw	r4,-4(fp)
 100c644:	040040b4 	movhi	r16,258
 100c648:	841b4804 	addi	r16,r16,27936
 100c64c:	01400304 	movi	r5,12
 100c650:	10026680 	call	1002668 <__mulsi3>
 100c654:	1405883a 	add	r2,r2,r16
 100c658:	10800204 	addi	r2,r2,8
 100c65c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 100c660:	e13fff17 	ldw	r4,-4(fp)
 100c664:	040040b4 	movhi	r16,258
 100c668:	841b4804 	addi	r16,r16,27936
 100c66c:	01400304 	movi	r5,12
 100c670:	10026680 	call	1002668 <__mulsi3>
 100c674:	1405883a 	add	r2,r2,r16
 100c678:	10000015 	stw	zero,0(r2)
  }
}
 100c67c:	e037883a 	mov	sp,fp
 100c680:	dfc00217 	ldw	ra,8(sp)
 100c684:	df000117 	ldw	fp,4(sp)
 100c688:	dc000017 	ldw	r16,0(sp)
 100c68c:	dec00304 	addi	sp,sp,12
 100c690:	f800283a 	ret

0100c694 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 100c694:	defff804 	addi	sp,sp,-32
 100c698:	df000715 	stw	fp,28(sp)
 100c69c:	df000704 	addi	fp,sp,28
 100c6a0:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100c6a4:	0005303a 	rdctl	r2,status
 100c6a8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100c6ac:	e0fffb17 	ldw	r3,-20(fp)
 100c6b0:	00bfff84 	movi	r2,-2
 100c6b4:	1884703a 	and	r2,r3,r2
 100c6b8:	1001703a 	wrctl	status,r2
  
  return context;
 100c6bc:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 100c6c0:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 100c6c4:	d0a00d17 	ldw	r2,-32716(gp)
 100c6c8:	10c000c4 	addi	r3,r2,3
 100c6cc:	00bfff04 	movi	r2,-4
 100c6d0:	1884703a 	and	r2,r3,r2
 100c6d4:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 100c6d8:	d0e00d17 	ldw	r3,-32716(gp)
 100c6dc:	e0bffe17 	ldw	r2,-8(fp)
 100c6e0:	1887883a 	add	r3,r3,r2
 100c6e4:	00806034 	movhi	r2,384
 100c6e8:	10800004 	addi	r2,r2,0
 100c6ec:	10c0072e 	bgeu	r2,r3,100c70c <sbrk+0x78>
 100c6f0:	e0bffd17 	ldw	r2,-12(fp)
 100c6f4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100c6f8:	e0bffa17 	ldw	r2,-24(fp)
 100c6fc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 100c700:	00bfffc4 	movi	r2,-1
 100c704:	e0bfff15 	stw	r2,-4(fp)
 100c708:	00000c06 	br	100c73c <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 100c70c:	d0a00d17 	ldw	r2,-32716(gp)
 100c710:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 100c714:	d0e00d17 	ldw	r3,-32716(gp)
 100c718:	e0bffe17 	ldw	r2,-8(fp)
 100c71c:	1885883a 	add	r2,r3,r2
 100c720:	d0a00d15 	stw	r2,-32716(gp)
 100c724:	e0bffd17 	ldw	r2,-12(fp)
 100c728:	e0bff915 	stw	r2,-28(fp)
 100c72c:	e0bff917 	ldw	r2,-28(fp)
 100c730:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 100c734:	e0bffc17 	ldw	r2,-16(fp)
 100c738:	e0bfff15 	stw	r2,-4(fp)
 100c73c:	e0bfff17 	ldw	r2,-4(fp)
} 
 100c740:	e037883a 	mov	sp,fp
 100c744:	df000017 	ldw	fp,0(sp)
 100c748:	dec00104 	addi	sp,sp,4
 100c74c:	f800283a 	ret

0100c750 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 100c750:	f811883a 	mov	r8,ra
 100c754:	100c3d80 	call	100c3d8 <_mcount>
 100c758:	403f883a 	mov	ra,r8
 100c75c:	defffa04 	addi	sp,sp,-24
 100c760:	df000515 	stw	fp,20(sp)
 100c764:	df000504 	addi	fp,sp,20
 100c768:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100c76c:	0005303a 	rdctl	r2,status
 100c770:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100c774:	e0fffd17 	ldw	r3,-12(fp)
 100c778:	00bfff84 	movi	r2,-2
 100c77c:	1884703a 	and	r2,r3,r2
 100c780:	1001703a 	wrctl	status,r2
  
  return context;
 100c784:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 100c788:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 100c78c:	e0bfff17 	ldw	r2,-4(fp)
 100c790:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 100c794:	e0bffc17 	ldw	r2,-16(fp)
 100c798:	10c00017 	ldw	r3,0(r2)
 100c79c:	e0bffc17 	ldw	r2,-16(fp)
 100c7a0:	10800117 	ldw	r2,4(r2)
 100c7a4:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 100c7a8:	e0bffc17 	ldw	r2,-16(fp)
 100c7ac:	10c00117 	ldw	r3,4(r2)
 100c7b0:	e0bffc17 	ldw	r2,-16(fp)
 100c7b4:	10800017 	ldw	r2,0(r2)
 100c7b8:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 100c7bc:	e0fffc17 	ldw	r3,-16(fp)
 100c7c0:	e0bffc17 	ldw	r2,-16(fp)
 100c7c4:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 100c7c8:	e0fffc17 	ldw	r3,-16(fp)
 100c7cc:	e0bffc17 	ldw	r2,-16(fp)
 100c7d0:	18800015 	stw	r2,0(r3)
 100c7d4:	e0bffe17 	ldw	r2,-8(fp)
 100c7d8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100c7dc:	e0bffb17 	ldw	r2,-20(fp)
 100c7e0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 100c7e4:	e037883a 	mov	sp,fp
 100c7e8:	df000017 	ldw	fp,0(sp)
 100c7ec:	dec00104 	addi	sp,sp,4
 100c7f0:	f800283a 	ret

0100c7f4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 100c7f4:	f811883a 	mov	r8,ra
 100c7f8:	100c3d80 	call	100c3d8 <_mcount>
 100c7fc:	403f883a 	mov	ra,r8
 100c800:	defffb04 	addi	sp,sp,-20
 100c804:	dfc00415 	stw	ra,16(sp)
 100c808:	df000315 	stw	fp,12(sp)
 100c80c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 100c810:	d0a00e17 	ldw	r2,-32712(gp)
 100c814:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 100c818:	d0975a17 	ldw	r2,23912(gp)
 100c81c:	10800044 	addi	r2,r2,1
 100c820:	d0975a15 	stw	r2,23912(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 100c824:	00003106 	br	100c8ec <alt_tick+0xf8>
  {
    next = (alt_alarm*) alarm->llist.next;
 100c828:	e0bffe17 	ldw	r2,-8(fp)
 100c82c:	10800017 	ldw	r2,0(r2)
 100c830:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 100c834:	e0bffe17 	ldw	r2,-8(fp)
 100c838:	10800403 	ldbu	r2,16(r2)
 100c83c:	10803fcc 	andi	r2,r2,255
 100c840:	1005003a 	cmpeq	r2,r2,zero
 100c844:	1000051e 	bne	r2,zero,100c85c <alt_tick+0x68>
 100c848:	d0975a17 	ldw	r2,23912(gp)
 100c84c:	1004c03a 	cmpne	r2,r2,zero
 100c850:	1000021e 	bne	r2,zero,100c85c <alt_tick+0x68>
    {
      alarm->rollover = 0;
 100c854:	e0bffe17 	ldw	r2,-8(fp)
 100c858:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 100c85c:	e0bffe17 	ldw	r2,-8(fp)
 100c860:	10c00217 	ldw	r3,8(r2)
 100c864:	d0975a17 	ldw	r2,23912(gp)
 100c868:	10c01e36 	bltu	r2,r3,100c8e4 <alt_tick+0xf0>
 100c86c:	e0bffe17 	ldw	r2,-8(fp)
 100c870:	10800403 	ldbu	r2,16(r2)
 100c874:	10803fcc 	andi	r2,r2,255
 100c878:	1004c03a 	cmpne	r2,r2,zero
 100c87c:	1000191e 	bne	r2,zero,100c8e4 <alt_tick+0xf0>
    {
      next_callback = alarm->callback (alarm->context);
 100c880:	e0bffe17 	ldw	r2,-8(fp)
 100c884:	10c00317 	ldw	r3,12(r2)
 100c888:	e0bffe17 	ldw	r2,-8(fp)
 100c88c:	11000517 	ldw	r4,20(r2)
 100c890:	183ee83a 	callr	r3
 100c894:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 100c898:	e0bffd17 	ldw	r2,-12(fp)
 100c89c:	1004c03a 	cmpne	r2,r2,zero
 100c8a0:	1000031e 	bne	r2,zero,100c8b0 <alt_tick+0xbc>
      {
        alt_alarm_stop (alarm);
 100c8a4:	e13ffe17 	ldw	r4,-8(fp)
 100c8a8:	100c7500 	call	100c750 <alt_alarm_stop>
 100c8ac:	00000d06 	br	100c8e4 <alt_tick+0xf0>
      }
      else
      {
        alarm->time += next_callback;
 100c8b0:	e0bffe17 	ldw	r2,-8(fp)
 100c8b4:	10c00217 	ldw	r3,8(r2)
 100c8b8:	e0bffd17 	ldw	r2,-12(fp)
 100c8bc:	1887883a 	add	r3,r3,r2
 100c8c0:	e0bffe17 	ldw	r2,-8(fp)
 100c8c4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 100c8c8:	e0bffe17 	ldw	r2,-8(fp)
 100c8cc:	10c00217 	ldw	r3,8(r2)
 100c8d0:	d0975a17 	ldw	r2,23912(gp)
 100c8d4:	1880032e 	bgeu	r3,r2,100c8e4 <alt_tick+0xf0>
        {
          alarm->rollover = 1;
 100c8d8:	e0fffe17 	ldw	r3,-8(fp)
 100c8dc:	00800044 	movi	r2,1
 100c8e0:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 100c8e4:	e0bfff17 	ldw	r2,-4(fp)
 100c8e8:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 100c8ec:	d0e00e04 	addi	r3,gp,-32712
 100c8f0:	e0bffe17 	ldw	r2,-8(fp)
 100c8f4:	10ffcc1e 	bne	r2,r3,100c828 <alt_tick+0x34>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 100c8f8:	100dbbc0 	call	100dbbc <OSTimeTick>
}
 100c8fc:	e037883a 	mov	sp,fp
 100c900:	dfc00117 	ldw	ra,4(sp)
 100c904:	df000017 	ldw	fp,0(sp)
 100c908:	dec00204 	addi	sp,sp,8
 100c90c:	f800283a 	ret

0100c910 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 100c910:	f811883a 	mov	r8,ra
 100c914:	100c3d80 	call	100c3d8 <_mcount>
 100c918:	403f883a 	mov	ra,r8
 100c91c:	defff704 	addi	sp,sp,-36
 100c920:	dfc00815 	stw	ra,32(sp)
 100c924:	df000715 	stw	fp,28(sp)
 100c928:	df000704 	addi	fp,sp,28
 100c92c:	e13ffb15 	stw	r4,-20(fp)
 100c930:	e17ffc15 	stw	r5,-16(fp)
 100c934:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100c938:	e0bffb17 	ldw	r2,-20(fp)
 100c93c:	1004803a 	cmplt	r2,r2,zero
 100c940:	1000091e 	bne	r2,zero,100c968 <write+0x58>
 100c944:	e13ffb17 	ldw	r4,-20(fp)
 100c948:	01400304 	movi	r5,12
 100c94c:	10026680 	call	1002668 <__mulsi3>
 100c950:	1007883a 	mov	r3,r2
 100c954:	008040b4 	movhi	r2,258
 100c958:	109b4804 	addi	r2,r2,27936
 100c95c:	1887883a 	add	r3,r3,r2
 100c960:	e0ffff15 	stw	r3,-4(fp)
 100c964:	00000106 	br	100c96c <write+0x5c>
 100c968:	e03fff15 	stw	zero,-4(fp)
 100c96c:	e0bfff17 	ldw	r2,-4(fp)
 100c970:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 100c974:	e0bffa17 	ldw	r2,-24(fp)
 100c978:	1005003a 	cmpeq	r2,r2,zero
 100c97c:	1000241e 	bne	r2,zero,100ca10 <write+0x100>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 100c980:	e0bffa17 	ldw	r2,-24(fp)
 100c984:	10800217 	ldw	r2,8(r2)
 100c988:	108000cc 	andi	r2,r2,3
 100c98c:	1005003a 	cmpeq	r2,r2,zero
 100c990:	10001a1e 	bne	r2,zero,100c9fc <write+0xec>
 100c994:	e0bffa17 	ldw	r2,-24(fp)
 100c998:	10800017 	ldw	r2,0(r2)
 100c99c:	10800617 	ldw	r2,24(r2)
 100c9a0:	1005003a 	cmpeq	r2,r2,zero
 100c9a4:	1000151e 	bne	r2,zero,100c9fc <write+0xec>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 100c9a8:	e0bffa17 	ldw	r2,-24(fp)
 100c9ac:	10800017 	ldw	r2,0(r2)
 100c9b0:	10800617 	ldw	r2,24(r2)
 100c9b4:	e17ffc17 	ldw	r5,-16(fp)
 100c9b8:	e1bffd17 	ldw	r6,-12(fp)
 100c9bc:	e13ffa17 	ldw	r4,-24(fp)
 100c9c0:	103ee83a 	callr	r2
 100c9c4:	e0bff915 	stw	r2,-28(fp)
 100c9c8:	e0bff917 	ldw	r2,-28(fp)
 100c9cc:	1004403a 	cmpge	r2,r2,zero
 100c9d0:	1000071e 	bne	r2,zero,100c9f0 <write+0xe0>
      {
        ALT_ERRNO = -rval;
 100c9d4:	100ca400 	call	100ca40 <alt_get_errno>
 100c9d8:	e0fff917 	ldw	r3,-28(fp)
 100c9dc:	00c7c83a 	sub	r3,zero,r3
 100c9e0:	10c00015 	stw	r3,0(r2)
        return -1;
 100c9e4:	00bfffc4 	movi	r2,-1
 100c9e8:	e0bffe15 	stw	r2,-8(fp)
 100c9ec:	00000e06 	br	100ca28 <write+0x118>
      }
      return rval;
 100c9f0:	e0bff917 	ldw	r2,-28(fp)
 100c9f4:	e0bffe15 	stw	r2,-8(fp)
 100c9f8:	00000b06 	br	100ca28 <write+0x118>
    }
    else
    {
      ALT_ERRNO = EACCES;
 100c9fc:	100ca400 	call	100ca40 <alt_get_errno>
 100ca00:	1007883a 	mov	r3,r2
 100ca04:	00800344 	movi	r2,13
 100ca08:	18800015 	stw	r2,0(r3)
 100ca0c:	00000406 	br	100ca20 <write+0x110>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 100ca10:	100ca400 	call	100ca40 <alt_get_errno>
 100ca14:	1007883a 	mov	r3,r2
 100ca18:	00801444 	movi	r2,81
 100ca1c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 100ca20:	00bfffc4 	movi	r2,-1
 100ca24:	e0bffe15 	stw	r2,-8(fp)
 100ca28:	e0bffe17 	ldw	r2,-8(fp)
}
 100ca2c:	e037883a 	mov	sp,fp
 100ca30:	dfc00117 	ldw	ra,4(sp)
 100ca34:	df000017 	ldw	fp,0(sp)
 100ca38:	dec00204 	addi	sp,sp,8
 100ca3c:	f800283a 	ret

0100ca40 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100ca40:	f811883a 	mov	r8,ra
 100ca44:	100c3d80 	call	100c3d8 <_mcount>
 100ca48:	403f883a 	mov	ra,r8
 100ca4c:	defffd04 	addi	sp,sp,-12
 100ca50:	dfc00215 	stw	ra,8(sp)
 100ca54:	df000115 	stw	fp,4(sp)
 100ca58:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100ca5c:	008040f4 	movhi	r2,259
 100ca60:	10a01204 	addi	r2,r2,-32696
 100ca64:	10800017 	ldw	r2,0(r2)
 100ca68:	1005003a 	cmpeq	r2,r2,zero
 100ca6c:	1000061e 	bne	r2,zero,100ca88 <alt_get_errno+0x48>
 100ca70:	008040f4 	movhi	r2,259
 100ca74:	10a01204 	addi	r2,r2,-32696
 100ca78:	10800017 	ldw	r2,0(r2)
 100ca7c:	103ee83a 	callr	r2
 100ca80:	e0bfff15 	stw	r2,-4(fp)
 100ca84:	00000306 	br	100ca94 <alt_get_errno+0x54>
 100ca88:	008040f4 	movhi	r2,259
 100ca8c:	10975a04 	addi	r2,r2,23912
 100ca90:	e0bfff15 	stw	r2,-4(fp)
 100ca94:	e0bfff17 	ldw	r2,-4(fp)
}
 100ca98:	e037883a 	mov	sp,fp
 100ca9c:	dfc00117 	ldw	ra,4(sp)
 100caa0:	df000017 	ldw	fp,0(sp)
 100caa4:	dec00204 	addi	sp,sp,8
 100caa8:	f800283a 	ret

0100caac <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
 100caac:	f811883a 	mov	r8,ra
 100cab0:	100c3d80 	call	100c3d8 <_mcount>
 100cab4:	403f883a 	mov	ra,r8
 100cab8:	deffdf04 	addi	sp,sp,-132
 100cabc:	dfc02015 	stw	ra,128(sp)
 100cac0:	df001f15 	stw	fp,124(sp)
 100cac4:	df001f04 	addi	fp,sp,124
 100cac8:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 100cacc:	e17fe204 	addi	r5,fp,-120
 100cad0:	01003fc4 	movi	r4,255
 100cad4:	1014d940 	call	1014d94 <OSTaskQuery>
 100cad8:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 100cadc:	e0bffe83 	ldbu	r2,-6(fp)
 100cae0:	10803fcc 	andi	r2,r2,255
 100cae4:	1004c03a 	cmpne	r2,r2,zero
 100cae8:	1000191e 	bne	r2,zero,100cb50 <__env_lock+0xa4>
    return;

  id = tcb.OSTCBPrio;
 100caec:	e0bfee83 	ldbu	r2,-70(fp)
 100caf0:	10803fcc 	andi	r2,r2,255
 100caf4:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
 100caf8:	d1175c17 	ldw	r4,23920(gp)
 100cafc:	e17ffd04 	addi	r5,fp,-12
 100cb00:	10132500 	call	1013250 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
 100cb04:	e0bffe43 	ldbu	r2,-7(fp)
 100cb08:	10803fcc 	andi	r2,r2,255
 100cb0c:	1005003a 	cmpeq	r2,r2,zero
 100cb10:	1000071e 	bne	r2,zero,100cb30 <__env_lock+0x84>
 100cb14:	d0e01017 	ldw	r3,-32704(gp)
 100cb18:	e0bfe117 	ldw	r2,-124(fp)
 100cb1c:	10c0041e 	bne	r2,r3,100cb30 <__env_lock+0x84>
  {
    /* we do; just count the recursion */

    locks++;
 100cb20:	d0975b17 	ldw	r2,23916(gp)
 100cb24:	10800044 	addi	r2,r2,1
 100cb28:	d0975b15 	stw	r2,23916(gp)
  id = tcb.OSTCBPrio;
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  if( semdata.OSEventGrp && id == lockid ) 
 100cb2c:	00000806 	br	100cb50 <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
 100cb30:	d1175c17 	ldw	r4,23920(gp)
 100cb34:	e1bffe84 	addi	r6,fp,-6
 100cb38:	000b883a 	mov	r5,zero
 100cb3c:	1012d0c0 	call	1012d0c <OSSemPend>
    locks  = 1;
 100cb40:	00800044 	movi	r2,1
 100cb44:	d0975b15 	stw	r2,23916(gp)
    lockid = id;
 100cb48:	e0bfe117 	ldw	r2,-124(fp)
 100cb4c:	d0a01015 	stw	r2,-32704(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 100cb50:	e037883a 	mov	sp,fp
 100cb54:	dfc00117 	ldw	ra,4(sp)
 100cb58:	df000017 	ldw	fp,0(sp)
 100cb5c:	dec00204 	addi	sp,sp,8
 100cb60:	f800283a 	ret

0100cb64 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
 100cb64:	f811883a 	mov	r8,ra
 100cb68:	100c3d80 	call	100c3d8 <_mcount>
 100cb6c:	403f883a 	mov	ra,r8
 100cb70:	defffd04 	addi	sp,sp,-12
 100cb74:	dfc00215 	stw	ra,8(sp)
 100cb78:	df000115 	stw	fp,4(sp)
 100cb7c:	df000104 	addi	fp,sp,4
 100cb80:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
 100cb84:	d0975b17 	ldw	r2,23916(gp)
 100cb88:	1005003a 	cmpeq	r2,r2,zero
 100cb8c:	10000a1e 	bne	r2,zero,100cbb8 <__env_unlock+0x54>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
 100cb90:	d0975b17 	ldw	r2,23916(gp)
 100cb94:	10bfffc4 	addi	r2,r2,-1
 100cb98:	d0975b15 	stw	r2,23916(gp)
 100cb9c:	d0975b17 	ldw	r2,23916(gp)
 100cba0:	1004c03a 	cmpne	r2,r2,zero
 100cba4:	1000041e 	bne	r2,zero,100cbb8 <__env_unlock+0x54>
  {
    lockid = -1;
 100cba8:	00bfffc4 	movi	r2,-1
 100cbac:	d0a01015 	stw	r2,-32704(gp)
    OSSemPost( alt_envsem );
 100cbb0:	d1175c17 	ldw	r4,23920(gp)
 100cbb4:	101311c0 	call	101311c <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 100cbb8:	e037883a 	mov	sp,fp
 100cbbc:	dfc00117 	ldw	ra,4(sp)
 100cbc0:	df000017 	ldw	fp,0(sp)
 100cbc4:	dec00204 	addi	sp,sp,8
 100cbc8:	f800283a 	ret

0100cbcc <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
 100cbcc:	f811883a 	mov	r8,ra
 100cbd0:	100c3d80 	call	100c3d8 <_mcount>
 100cbd4:	403f883a 	mov	ra,r8
 100cbd8:	deffdb04 	addi	sp,sp,-148
 100cbdc:	dfc02415 	stw	ra,144(sp)
 100cbe0:	df002315 	stw	fp,140(sp)
 100cbe4:	df002304 	addi	fp,sp,140
 100cbe8:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 100cbec:	e03fe015 	stw	zero,-128(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
 100cbf0:	008040f4 	movhi	r2,259
 100cbf4:	10976804 	addi	r2,r2,23968
 100cbf8:	10800003 	ldbu	r2,0(r2)
 100cbfc:	10803fcc 	andi	r2,r2,255
 100cc00:	10800058 	cmpnei	r2,r2,1
 100cc04:	1000311e 	bne	r2,zero,100cccc <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 100cc08:	e17fe204 	addi	r5,fp,-120
 100cc0c:	01003fc4 	movi	r4,255
 100cc10:	1014d940 	call	1014d94 <OSTaskQuery>
 100cc14:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 100cc18:	e0bffe83 	ldbu	r2,-6(fp)
 100cc1c:	10803fcc 	andi	r2,r2,255
 100cc20:	1004c03a 	cmpne	r2,r2,zero
 100cc24:	1000291e 	bne	r2,zero,100cccc <__malloc_lock+0x100>
    return;

  id = tcb.OSTCBPrio;
 100cc28:	e0bfee83 	ldbu	r2,-70(fp)
 100cc2c:	10803fcc 	andi	r2,r2,255
 100cc30:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
 100cc34:	d1175e17 	ldw	r4,23928(gp)
 100cc38:	e17ffd04 	addi	r5,fp,-12
 100cc3c:	10132500 	call	1013250 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100cc40:	0005303a 	rdctl	r2,status
 100cc44:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100cc48:	e0ffdf17 	ldw	r3,-132(fp)
 100cc4c:	00bfff84 	movi	r2,-2
 100cc50:	1884703a 	and	r2,r3,r2
 100cc54:	1001703a 	wrctl	status,r2
  
  return context;
 100cc58:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
 100cc5c:	e0bfe015 	stw	r2,-128(fp)

  if( !semdata.OSCnt && id == lockid ) 
 100cc60:	e0bffd0b 	ldhu	r2,-12(fp)
 100cc64:	10bfffcc 	andi	r2,r2,65535
 100cc68:	1004c03a 	cmpne	r2,r2,zero
 100cc6c:	10000b1e 	bne	r2,zero,100cc9c <__malloc_lock+0xd0>
 100cc70:	d0e01117 	ldw	r3,-32700(gp)
 100cc74:	e0bfe117 	ldw	r2,-124(fp)
 100cc78:	10c0081e 	bne	r2,r3,100cc9c <__malloc_lock+0xd0>
  {
    /* we do; just count the recursion */
    locks++;
 100cc7c:	d0975d17 	ldw	r2,23924(gp)
 100cc80:	10800044 	addi	r2,r2,1
 100cc84:	d0975d15 	stw	r2,23924(gp)
 100cc88:	e0bfe017 	ldw	r2,-128(fp)
 100cc8c:	e0bfde15 	stw	r2,-136(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100cc90:	e0bfde17 	ldw	r2,-136(fp)
 100cc94:	1001703a 	wrctl	status,r2

  OSSemQuery( alt_heapsem, &semdata );
  
  OS_ENTER_CRITICAL();

  if( !semdata.OSCnt && id == lockid ) 
 100cc98:	00000c06 	br	100cccc <__malloc_lock+0x100>
 100cc9c:	e0bfe017 	ldw	r2,-128(fp)
 100cca0:	e0bfdd15 	stw	r2,-140(fp)
 100cca4:	e0bfdd17 	ldw	r2,-140(fp)
 100cca8:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
 100ccac:	d1175e17 	ldw	r4,23928(gp)
 100ccb0:	e1bffe84 	addi	r6,fp,-6
 100ccb4:	000b883a 	mov	r5,zero
 100ccb8:	1012d0c0 	call	1012d0c <OSSemPend>
    locks  = 1;
 100ccbc:	00800044 	movi	r2,1
 100ccc0:	d0975d15 	stw	r2,23924(gp)
    lockid = id;
 100ccc4:	e0bfe117 	ldw	r2,-124(fp)
 100ccc8:	d0a01115 	stw	r2,-32700(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 100cccc:	e037883a 	mov	sp,fp
 100ccd0:	dfc00117 	ldw	ra,4(sp)
 100ccd4:	df000017 	ldw	fp,0(sp)
 100ccd8:	dec00204 	addi	sp,sp,8
 100ccdc:	f800283a 	ret

0100cce0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 100cce0:	f811883a 	mov	r8,ra
 100cce4:	100c3d80 	call	100c3d8 <_mcount>
 100cce8:	403f883a 	mov	ra,r8
 100ccec:	defff804 	addi	sp,sp,-32
 100ccf0:	dfc00715 	stw	ra,28(sp)
 100ccf4:	df000615 	stw	fp,24(sp)
 100ccf8:	df000604 	addi	fp,sp,24
 100ccfc:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 100cd00:	e03ffe15 	stw	zero,-8(fp)
#endif 

  if (OSRunning != OS_TRUE)
 100cd04:	008040f4 	movhi	r2,259
 100cd08:	10976804 	addi	r2,r2,23968
 100cd0c:	10800003 	ldbu	r2,0(r2)
 100cd10:	10803fcc 	andi	r2,r2,255
 100cd14:	10800058 	cmpnei	r2,r2,1
 100cd18:	1000231e 	bne	r2,zero,100cda8 <__malloc_unlock+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100cd1c:	0005303a 	rdctl	r2,status
 100cd20:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100cd24:	e0fffd17 	ldw	r3,-12(fp)
 100cd28:	00bfff84 	movi	r2,-2
 100cd2c:	1884703a 	and	r2,r3,r2
 100cd30:	1001703a 	wrctl	status,r2
  
  return context;
 100cd34:	e0bffd17 	ldw	r2,-12(fp)
      return;

  OS_ENTER_CRITICAL();
 100cd38:	e0bffe15 	stw	r2,-8(fp)
  if (locks == 0)
 100cd3c:	d0975d17 	ldw	r2,23924(gp)
 100cd40:	1004c03a 	cmpne	r2,r2,zero
 100cd44:	1000051e 	bne	r2,zero,100cd5c <__malloc_unlock+0x7c>
 100cd48:	e0bffe17 	ldw	r2,-8(fp)
 100cd4c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100cd50:	e0bffc17 	ldw	r2,-16(fp)
 100cd54:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
 100cd58:	00001306 	br	100cda8 <__malloc_unlock+0xc8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
 100cd5c:	d0975d17 	ldw	r2,23924(gp)
 100cd60:	10bfffc4 	addi	r2,r2,-1
 100cd64:	d0975d15 	stw	r2,23924(gp)
 100cd68:	d0975d17 	ldw	r2,23924(gp)
 100cd6c:	1004c03a 	cmpne	r2,r2,zero
 100cd70:	1000091e 	bne	r2,zero,100cd98 <__malloc_unlock+0xb8>
  {
    lockid = -1;
 100cd74:	00bfffc4 	movi	r2,-1
 100cd78:	d0a01115 	stw	r2,-32700(gp)
 100cd7c:	e0bffe17 	ldw	r2,-8(fp)
 100cd80:	e0bffb15 	stw	r2,-20(fp)
 100cd84:	e0bffb17 	ldw	r2,-20(fp)
 100cd88:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
 100cd8c:	d1175e17 	ldw	r4,23928(gp)
 100cd90:	101311c0 	call	101311c <OSSemPost>
 100cd94:	00000406 	br	100cda8 <__malloc_unlock+0xc8>
 100cd98:	e0bffe17 	ldw	r2,-8(fp)
 100cd9c:	e0bffa15 	stw	r2,-24(fp)
 100cda0:	e0bffa17 	ldw	r2,-24(fp)
 100cda4:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 100cda8:	e037883a 	mov	sp,fp
 100cdac:	dfc00117 	ldw	ra,4(sp)
 100cdb0:	df000017 	ldw	fp,0(sp)
 100cdb4:	dec00204 	addi	sp,sp,8
 100cdb8:	f800283a 	ret

0100cdbc <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 100cdbc:	f811883a 	mov	r8,ra
 100cdc0:	100c3d80 	call	100c3d8 <_mcount>
 100cdc4:	403f883a 	mov	ra,r8
 100cdc8:	defff604 	addi	sp,sp,-40
 100cdcc:	dfc00915 	stw	ra,36(sp)
 100cdd0:	df000815 	stw	fp,32(sp)
 100cdd4:	df000804 	addi	fp,sp,32
 100cdd8:	e13ffc15 	stw	r4,-16(fp)
 100cddc:	e17ffd15 	stw	r5,-12(fp)
 100cde0:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 100cde4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 100cde8:	e0bffe17 	ldw	r2,-8(fp)
 100cdec:	1004c03a 	cmpne	r2,r2,zero
 100cdf0:	1000021e 	bne	r2,zero,100cdfc <OSEventNameGet+0x40>
        return (0);
 100cdf4:	e03fff15 	stw	zero,-4(fp)
 100cdf8:	00003906 	br	100cee0 <OSEventNameGet+0x124>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 100cdfc:	e0bffc17 	ldw	r2,-16(fp)
 100ce00:	1004c03a 	cmpne	r2,r2,zero
 100ce04:	1000051e 	bne	r2,zero,100ce1c <OSEventNameGet+0x60>
        *perr = OS_ERR_PEVENT_NULL;
 100ce08:	e0fffe17 	ldw	r3,-8(fp)
 100ce0c:	00800104 	movi	r2,4
 100ce10:	18800005 	stb	r2,0(r3)
        return (0);
 100ce14:	e03fff15 	stw	zero,-4(fp)
 100ce18:	00003106 	br	100cee0 <OSEventNameGet+0x124>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 100ce1c:	e0bffd17 	ldw	r2,-12(fp)
 100ce20:	1004c03a 	cmpne	r2,r2,zero
 100ce24:	1000051e 	bne	r2,zero,100ce3c <OSEventNameGet+0x80>
        *perr = OS_ERR_PNAME_NULL;
 100ce28:	e0fffe17 	ldw	r3,-8(fp)
 100ce2c:	00800304 	movi	r2,12
 100ce30:	18800005 	stb	r2,0(r3)
        return (0);
 100ce34:	e03fff15 	stw	zero,-4(fp)
 100ce38:	00002906 	br	100cee0 <OSEventNameGet+0x124>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 100ce3c:	d0977103 	ldbu	r2,24004(gp)
 100ce40:	10803fcc 	andi	r2,r2,255
 100ce44:	1005003a 	cmpeq	r2,r2,zero
 100ce48:	1000051e 	bne	r2,zero,100ce60 <OSEventNameGet+0xa4>
        *perr  = OS_ERR_NAME_GET_ISR;
 100ce4c:	e0fffe17 	ldw	r3,-8(fp)
 100ce50:	00800444 	movi	r2,17
 100ce54:	18800005 	stb	r2,0(r3)
        return (0);
 100ce58:	e03fff15 	stw	zero,-4(fp)
 100ce5c:	00002006 	br	100cee0 <OSEventNameGet+0x124>
    }
    switch (pevent->OSEventType) {
 100ce60:	e0bffc17 	ldw	r2,-16(fp)
 100ce64:	10800003 	ldbu	r2,0(r2)
 100ce68:	10803fcc 	andi	r2,r2,255
 100ce6c:	10bfffc4 	addi	r2,r2,-1
 100ce70:	10800128 	cmpgeui	r2,r2,4
 100ce74:	1000161e 	bne	r2,zero,100ced0 <OSEventNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100ce78:	0005303a 	rdctl	r2,status
 100ce7c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100ce80:	e0fff917 	ldw	r3,-28(fp)
 100ce84:	00bfff84 	movi	r2,-2
 100ce88:	1884703a 	and	r2,r3,r2
 100ce8c:	1001703a 	wrctl	status,r2
  
  return context;
 100ce90:	e0bff917 	ldw	r2,-28(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
 100ce94:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
 100ce98:	e0bffc17 	ldw	r2,-16(fp)
 100ce9c:	11400384 	addi	r5,r2,14
 100cea0:	e13ffd17 	ldw	r4,-12(fp)
 100cea4:	100eaa00 	call	100eaa0 <OS_StrCopy>
 100cea8:	e0bffb05 	stb	r2,-20(fp)
 100ceac:	e0bffa17 	ldw	r2,-24(fp)
 100ceb0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100ceb4:	e0bff817 	ldw	r2,-32(fp)
 100ceb8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 100cebc:	e0bffe17 	ldw	r2,-8(fp)
 100cec0:	10000005 	stb	zero,0(r2)
    return (len);
 100cec4:	e0bffb03 	ldbu	r2,-20(fp)
 100cec8:	e0bfff15 	stw	r2,-4(fp)
 100cecc:	00000406 	br	100cee0 <OSEventNameGet+0x124>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 100ced0:	e0fffe17 	ldw	r3,-8(fp)
 100ced4:	00800044 	movi	r2,1
 100ced8:	18800005 	stb	r2,0(r3)
             return (0);
 100cedc:	e03fff15 	stw	zero,-4(fp)
 100cee0:	e0bfff17 	ldw	r2,-4(fp)
    OS_ENTER_CRITICAL();
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
}
 100cee4:	e037883a 	mov	sp,fp
 100cee8:	dfc00117 	ldw	ra,4(sp)
 100ceec:	df000017 	ldw	fp,0(sp)
 100cef0:	dec00204 	addi	sp,sp,8
 100cef4:	f800283a 	ret

0100cef8 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 100cef8:	f811883a 	mov	r8,ra
 100cefc:	100c3d80 	call	100c3d8 <_mcount>
 100cf00:	403f883a 	mov	ra,r8
 100cf04:	defff604 	addi	sp,sp,-40
 100cf08:	dfc00915 	stw	ra,36(sp)
 100cf0c:	df000815 	stw	fp,32(sp)
 100cf10:	df000804 	addi	fp,sp,32
 100cf14:	e13ffd15 	stw	r4,-12(fp)
 100cf18:	e17ffe15 	stw	r5,-8(fp)
 100cf1c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 100cf20:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 100cf24:	e0bfff17 	ldw	r2,-4(fp)
 100cf28:	1005003a 	cmpeq	r2,r2,zero
 100cf2c:	1000411e 	bne	r2,zero,100d034 <OSEventNameSet+0x13c>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 100cf30:	e0bffd17 	ldw	r2,-12(fp)
 100cf34:	1004c03a 	cmpne	r2,r2,zero
 100cf38:	1000041e 	bne	r2,zero,100cf4c <OSEventNameSet+0x54>
        *perr = OS_ERR_PEVENT_NULL;
 100cf3c:	e0ffff17 	ldw	r3,-4(fp)
 100cf40:	00800104 	movi	r2,4
 100cf44:	18800005 	stb	r2,0(r3)
        return;
 100cf48:	00003a06 	br	100d034 <OSEventNameSet+0x13c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 100cf4c:	e0bffe17 	ldw	r2,-8(fp)
 100cf50:	1004c03a 	cmpne	r2,r2,zero
 100cf54:	1000041e 	bne	r2,zero,100cf68 <OSEventNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;
 100cf58:	e0ffff17 	ldw	r3,-4(fp)
 100cf5c:	00800304 	movi	r2,12
 100cf60:	18800005 	stb	r2,0(r3)
        return;
 100cf64:	00003306 	br	100d034 <OSEventNameSet+0x13c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 100cf68:	d0977103 	ldbu	r2,24004(gp)
 100cf6c:	10803fcc 	andi	r2,r2,255
 100cf70:	1005003a 	cmpeq	r2,r2,zero
 100cf74:	1000041e 	bne	r2,zero,100cf88 <OSEventNameSet+0x90>
        *perr = OS_ERR_NAME_SET_ISR;
 100cf78:	e0ffff17 	ldw	r3,-4(fp)
 100cf7c:	00800484 	movi	r2,18
 100cf80:	18800005 	stb	r2,0(r3)
        return;
 100cf84:	00002b06 	br	100d034 <OSEventNameSet+0x13c>
    }
    switch (pevent->OSEventType) {
 100cf88:	e0bffd17 	ldw	r2,-12(fp)
 100cf8c:	10800003 	ldbu	r2,0(r2)
 100cf90:	10803fcc 	andi	r2,r2,255
 100cf94:	10bfffc4 	addi	r2,r2,-1
 100cf98:	10800128 	cmpgeui	r2,r2,4
 100cf9c:	10000f1e 	bne	r2,zero,100cfdc <OSEventNameSet+0xe4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100cfa0:	0005303a 	rdctl	r2,status
 100cfa4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100cfa8:	e0fffa17 	ldw	r3,-24(fp)
 100cfac:	00bfff84 	movi	r2,-2
 100cfb0:	1884703a 	and	r2,r3,r2
 100cfb4:	1001703a 	wrctl	status,r2
  
  return context;
 100cfb8:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
 100cfbc:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
 100cfc0:	e13ffe17 	ldw	r4,-8(fp)
 100cfc4:	100eb2c0 	call	100eb2c <OS_StrLen>
 100cfc8:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
 100cfcc:	e0bffc03 	ldbu	r2,-16(fp)
 100cfd0:	10800828 	cmpgeui	r2,r2,32
 100cfd4:	1000051e 	bne	r2,zero,100cfec <OSEventNameSet+0xf4>
 100cfd8:	00000c06 	br	100d00c <OSEventNameSet+0x114>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 100cfdc:	e0ffff17 	ldw	r3,-4(fp)
 100cfe0:	00800044 	movi	r2,1
 100cfe4:	18800005 	stb	r2,0(r3)
             return;
 100cfe8:	00001206 	br	100d034 <OSEventNameSet+0x13c>
 100cfec:	e0bffb17 	ldw	r2,-20(fp)
 100cff0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100cff4:	e0bff917 	ldw	r2,-28(fp)
 100cff8:	1001703a 	wrctl	status,r2
    }
    OS_ENTER_CRITICAL();
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
 100cffc:	e0ffff17 	ldw	r3,-4(fp)
 100d000:	008002c4 	movi	r2,11
 100d004:	18800005 	stb	r2,0(r3)
        return;
 100d008:	00000a06 	br	100d034 <OSEventNameSet+0x13c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
 100d00c:	e0bffd17 	ldw	r2,-12(fp)
 100d010:	11000384 	addi	r4,r2,14
 100d014:	e17ffe17 	ldw	r5,-8(fp)
 100d018:	100eaa00 	call	100eaa0 <OS_StrCopy>
 100d01c:	e0bffb17 	ldw	r2,-20(fp)
 100d020:	e0bff815 	stw	r2,-32(fp)
 100d024:	e0bff817 	ldw	r2,-32(fp)
 100d028:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 100d02c:	e0bfff17 	ldw	r2,-4(fp)
 100d030:	10000005 	stb	zero,0(r2)
}
 100d034:	e037883a 	mov	sp,fp
 100d038:	dfc00117 	ldw	ra,4(sp)
 100d03c:	df000017 	ldw	fp,0(sp)
 100d040:	dec00204 	addi	sp,sp,8
 100d044:	f800283a 	ret

0100d048 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
 100d048:	f811883a 	mov	r8,ra
 100d04c:	100c3d80 	call	100c3d8 <_mcount>
 100d050:	403f883a 	mov	ra,r8
 100d054:	deffe704 	addi	sp,sp,-100
 100d058:	dfc01815 	stw	ra,96(sp)
 100d05c:	df001715 	stw	fp,92(sp)
 100d060:	df001704 	addi	fp,sp,92
 100d064:	e13ff615 	stw	r4,-40(fp)
 100d068:	e17ff715 	stw	r5,-36(fp)
 100d06c:	e1bff815 	stw	r6,-32(fp)
 100d070:	e1fff90d 	sth	r7,-28(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
 100d074:	e03ff015 	stw	zero,-64(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
 100d078:	e0800217 	ldw	r2,8(fp)
 100d07c:	1004c03a 	cmpne	r2,r2,zero
 100d080:	1000021e 	bne	r2,zero,100d08c <OSEventPendMulti+0x44>
        return (0);
 100d084:	e03fff15 	stw	zero,-4(fp)
 100d088:	00019906 	br	100d6f0 <OSEventPendMulti+0x6a8>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
 100d08c:	e0bff617 	ldw	r2,-40(fp)
 100d090:	1004c03a 	cmpne	r2,r2,zero
 100d094:	1000051e 	bne	r2,zero,100d0ac <OSEventPendMulti+0x64>
       *perr =  OS_ERR_PEVENT_NULL;
 100d098:	e0c00217 	ldw	r3,8(fp)
 100d09c:	00800104 	movi	r2,4
 100d0a0:	18800005 	stb	r2,0(r3)
        return (0);
 100d0a4:	e03fff15 	stw	zero,-4(fp)
 100d0a8:	00019106 	br	100d6f0 <OSEventPendMulti+0x6a8>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
 100d0ac:	e0bff717 	ldw	r2,-36(fp)
 100d0b0:	1004c03a 	cmpne	r2,r2,zero
 100d0b4:	1000051e 	bne	r2,zero,100d0cc <OSEventPendMulti+0x84>
       *perr =  OS_ERR_PEVENT_NULL;
 100d0b8:	e0c00217 	ldw	r3,8(fp)
 100d0bc:	00800104 	movi	r2,4
 100d0c0:	18800005 	stb	r2,0(r3)
        return (0);
 100d0c4:	e03fff15 	stw	zero,-4(fp)
 100d0c8:	00018906 	br	100d6f0 <OSEventPendMulti+0x6a8>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
 100d0cc:	e0bff817 	ldw	r2,-32(fp)
 100d0d0:	1004c03a 	cmpne	r2,r2,zero
 100d0d4:	1000051e 	bne	r2,zero,100d0ec <OSEventPendMulti+0xa4>
       *perr =  OS_ERR_PEVENT_NULL;
 100d0d8:	e0c00217 	ldw	r3,8(fp)
 100d0dc:	00800104 	movi	r2,4
 100d0e0:	18800005 	stb	r2,0(r3)
        return (0);
 100d0e4:	e03fff15 	stw	zero,-4(fp)
 100d0e8:	00018106 	br	100d6f0 <OSEventPendMulti+0x6a8>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
 100d0ec:	e0bff717 	ldw	r2,-36(fp)
 100d0f0:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
 100d0f4:	e0bff617 	ldw	r2,-40(fp)
 100d0f8:	e0bff515 	stw	r2,-44(fp)
    pevent      = *pevents;
 100d0fc:	e0bff517 	ldw	r2,-44(fp)
 100d100:	10800017 	ldw	r2,0(r2)
 100d104:	e0bff415 	stw	r2,-48(fp)
    while  (pevent != (OS_EVENT *)0) {
 100d108:	00001806 	br	100d16c <OSEventPendMulti+0x124>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
 100d10c:	e0bff417 	ldw	r2,-48(fp)
 100d110:	10800003 	ldbu	r2,0(r2)
 100d114:	10803fcc 	andi	r2,r2,255
 100d118:	e0bffe15 	stw	r2,-8(fp)
 100d11c:	e0fffe17 	ldw	r3,-8(fp)
 100d120:	188000a0 	cmpeqi	r2,r3,2
 100d124:	10000b1e 	bne	r2,zero,100d154 <OSEventPendMulti+0x10c>
 100d128:	e0fffe17 	ldw	r3,-8(fp)
 100d12c:	188000e0 	cmpeqi	r2,r3,3
 100d130:	1000081e 	bne	r2,zero,100d154 <OSEventPendMulti+0x10c>
 100d134:	e0fffe17 	ldw	r3,-8(fp)
 100d138:	18800060 	cmpeqi	r2,r3,1
 100d13c:	1000051e 	bne	r2,zero,100d154 <OSEventPendMulti+0x10c>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
 100d140:	e0c00217 	ldw	r3,8(fp)
 100d144:	00800044 	movi	r2,1
 100d148:	18800005 	stb	r2,0(r3)
                 return (0);
 100d14c:	e03fff15 	stw	zero,-4(fp)
 100d150:	00016706 	br	100d6f0 <OSEventPendMulti+0x6a8>
        }
        pevents++;
 100d154:	e0bff517 	ldw	r2,-44(fp)
 100d158:	10800104 	addi	r2,r2,4
 100d15c:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
 100d160:	e0bff517 	ldw	r2,-44(fp)
 100d164:	10800017 	ldw	r2,0(r2)
 100d168:	e0bff415 	stw	r2,-48(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
 100d16c:	e0bff417 	ldw	r2,-48(fp)
 100d170:	1004c03a 	cmpne	r2,r2,zero
 100d174:	103fe51e 	bne	r2,zero,100d10c <OSEventPendMulti+0xc4>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
 100d178:	d0977103 	ldbu	r2,24004(gp)
 100d17c:	10803fcc 	andi	r2,r2,255
 100d180:	1005003a 	cmpeq	r2,r2,zero
 100d184:	1000051e 	bne	r2,zero,100d19c <OSEventPendMulti+0x154>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
 100d188:	e0c00217 	ldw	r3,8(fp)
 100d18c:	00800084 	movi	r2,2
 100d190:	18800005 	stb	r2,0(r3)
        return (0);
 100d194:	e03fff15 	stw	zero,-4(fp)
 100d198:	00015506 	br	100d6f0 <OSEventPendMulti+0x6a8>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
 100d19c:	d0976003 	ldbu	r2,23936(gp)
 100d1a0:	10803fcc 	andi	r2,r2,255
 100d1a4:	1005003a 	cmpeq	r2,r2,zero
 100d1a8:	1000051e 	bne	r2,zero,100d1c0 <OSEventPendMulti+0x178>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
 100d1ac:	e0c00217 	ldw	r3,8(fp)
 100d1b0:	00800344 	movi	r2,13
 100d1b4:	18800005 	stb	r2,0(r3)
        return (0);
 100d1b8:	e03fff15 	stw	zero,-4(fp)
 100d1bc:	00014c06 	br	100d6f0 <OSEventPendMulti+0x6a8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100d1c0:	0005303a 	rdctl	r2,status
 100d1c4:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100d1c8:	e0ffef17 	ldw	r3,-68(fp)
 100d1cc:	00bfff84 	movi	r2,-2
 100d1d0:	1884703a 	and	r2,r3,r2
 100d1d4:	1001703a 	wrctl	status,r2
  
  return context;
 100d1d8:	e0bfef17 	ldw	r2,-68(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
 100d1dc:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
 100d1e0:	e03ff205 	stb	zero,-56(fp)
    events_rdy_nbr =  0;
 100d1e4:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
 100d1e8:	e03ff105 	stb	zero,-60(fp)
    pevents        =  pevents_pend;
 100d1ec:	e0bff617 	ldw	r2,-40(fp)
 100d1f0:	e0bff515 	stw	r2,-44(fp)
    pevent         = *pevents;
 100d1f4:	e0bff517 	ldw	r2,-44(fp)
 100d1f8:	10800017 	ldw	r2,0(r2)
 100d1fc:	e0bff415 	stw	r2,-48(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 100d200:	00008f06 	br	100d440 <OSEventPendMulti+0x3f8>
        switch (pevent->OSEventType) {
 100d204:	e0bff417 	ldw	r2,-48(fp)
 100d208:	10800003 	ldbu	r2,0(r2)
 100d20c:	10803fcc 	andi	r2,r2,255
 100d210:	e0bffd15 	stw	r2,-12(fp)
 100d214:	e0fffd17 	ldw	r3,-12(fp)
 100d218:	188000a0 	cmpeqi	r2,r3,2
 100d21c:	1000441e 	bne	r2,zero,100d330 <OSEventPendMulti+0x2e8>
 100d220:	e0fffd17 	ldw	r3,-12(fp)
 100d224:	188000e0 	cmpeqi	r2,r3,3
 100d228:	1000041e 	bne	r2,zero,100d23c <OSEventPendMulti+0x1f4>
 100d22c:	e0fffd17 	ldw	r3,-12(fp)
 100d230:	18800060 	cmpeqi	r2,r3,1
 100d234:	1000211e 	bne	r2,zero,100d2bc <OSEventPendMulti+0x274>
 100d238:	00006f06 	br	100d3f8 <OSEventPendMulti+0x3b0>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
 100d23c:	e0bff417 	ldw	r2,-48(fp)
 100d240:	1080020b 	ldhu	r2,8(r2)
 100d244:	10bfffcc 	andi	r2,r2,65535
 100d248:	1005003a 	cmpeq	r2,r2,zero
 100d24c:	1000171e 	bne	r2,zero,100d2ac <OSEventPendMulti+0x264>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
 100d250:	e0bff417 	ldw	r2,-48(fp)
 100d254:	1080020b 	ldhu	r2,8(r2)
 100d258:	10bfffc4 	addi	r2,r2,-1
 100d25c:	1007883a 	mov	r3,r2
 100d260:	e0bff417 	ldw	r2,-48(fp)
 100d264:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
 100d268:	e0fff717 	ldw	r3,-36(fp)
 100d26c:	e0bff417 	ldw	r2,-48(fp)
 100d270:	18800015 	stw	r2,0(r3)
 100d274:	e0bff717 	ldw	r2,-36(fp)
 100d278:	10800104 	addi	r2,r2,4
 100d27c:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   =  OS_TRUE;
 100d280:	00800044 	movi	r2,1
 100d284:	e0bff205 	stb	r2,-56(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
 100d288:	e0bff817 	ldw	r2,-32(fp)
 100d28c:	10000015 	stw	zero,0(r2)
 100d290:	e0bff817 	ldw	r2,-32(fp)
 100d294:	10800104 	addi	r2,r2,4
 100d298:	e0bff815 	stw	r2,-32(fp)
                      events_rdy_nbr++;
 100d29c:	e0bff18b 	ldhu	r2,-58(fp)
 100d2a0:	10800044 	addi	r2,r2,1
 100d2a4:	e0bff18d 	sth	r2,-58(fp)
 100d2a8:	00005f06 	br	100d428 <OSEventPendMulti+0x3e0>

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
 100d2ac:	e0bff103 	ldbu	r2,-60(fp)
 100d2b0:	10800054 	ori	r2,r2,1
 100d2b4:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
 100d2b8:	00005b06 	br	100d428 <OSEventPendMulti+0x3e0>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
 100d2bc:	e0bff417 	ldw	r2,-48(fp)
 100d2c0:	10800117 	ldw	r2,4(r2)
 100d2c4:	1005003a 	cmpeq	r2,r2,zero
 100d2c8:	1000151e 	bne	r2,zero,100d320 <OSEventPendMulti+0x2d8>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
 100d2cc:	e0bff417 	ldw	r2,-48(fp)
 100d2d0:	10c00117 	ldw	r3,4(r2)
 100d2d4:	e0bff817 	ldw	r2,-32(fp)
 100d2d8:	10c00015 	stw	r3,0(r2)
 100d2dc:	e0bff817 	ldw	r2,-32(fp)
 100d2e0:	10800104 	addi	r2,r2,4
 100d2e4:	e0bff815 	stw	r2,-32(fp)
                     pevent->OSEventPtr  = (void *)0;
 100d2e8:	e0bff417 	ldw	r2,-48(fp)
 100d2ec:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
 100d2f0:	e0fff717 	ldw	r3,-36(fp)
 100d2f4:	e0bff417 	ldw	r2,-48(fp)
 100d2f8:	18800015 	stw	r2,0(r3)
 100d2fc:	e0bff717 	ldw	r2,-36(fp)
 100d300:	10800104 	addi	r2,r2,4
 100d304:	e0bff715 	stw	r2,-36(fp)
                      events_rdy         =  OS_TRUE;
 100d308:	00800044 	movi	r2,1
 100d30c:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
 100d310:	e0bff18b 	ldhu	r2,-58(fp)
 100d314:	10800044 	addi	r2,r2,1
 100d318:	e0bff18d 	sth	r2,-58(fp)
 100d31c:	00004206 	br	100d428 <OSEventPendMulti+0x3e0>

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
 100d320:	e0bff103 	ldbu	r2,-60(fp)
 100d324:	10800094 	ori	r2,r2,2
 100d328:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
 100d32c:	00003e06 	br	100d428 <OSEventPendMulti+0x3e0>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
 100d330:	e0bff417 	ldw	r2,-48(fp)
 100d334:	10800117 	ldw	r2,4(r2)
 100d338:	e0bff315 	stw	r2,-52(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
 100d33c:	e0bff317 	ldw	r2,-52(fp)
 100d340:	1080058b 	ldhu	r2,22(r2)
 100d344:	10bfffcc 	andi	r2,r2,65535
 100d348:	1005003a 	cmpeq	r2,r2,zero
 100d34c:	1000261e 	bne	r2,zero,100d3e8 <OSEventPendMulti+0x3a0>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
 100d350:	e0bff317 	ldw	r2,-52(fp)
 100d354:	11000417 	ldw	r4,16(r2)
 100d358:	20c00017 	ldw	r3,0(r4)
 100d35c:	e0bff817 	ldw	r2,-32(fp)
 100d360:	10c00015 	stw	r3,0(r2)
 100d364:	e0bff817 	ldw	r2,-32(fp)
 100d368:	10800104 	addi	r2,r2,4
 100d36c:	e0bff815 	stw	r2,-32(fp)
 100d370:	20c00104 	addi	r3,r4,4
 100d374:	e0bff317 	ldw	r2,-52(fp)
 100d378:	10c00415 	stw	r3,16(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
 100d37c:	e0bff317 	ldw	r2,-52(fp)
 100d380:	10c00417 	ldw	r3,16(r2)
 100d384:	e0bff317 	ldw	r2,-52(fp)
 100d388:	10800217 	ldw	r2,8(r2)
 100d38c:	1880041e 	bne	r3,r2,100d3a0 <OSEventPendMulti+0x358>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
 100d390:	e0bff317 	ldw	r2,-52(fp)
 100d394:	10c00117 	ldw	r3,4(r2)
 100d398:	e0bff317 	ldw	r2,-52(fp)
 100d39c:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
 100d3a0:	e0bff317 	ldw	r2,-52(fp)
 100d3a4:	1080058b 	ldhu	r2,22(r2)
 100d3a8:	10bfffc4 	addi	r2,r2,-1
 100d3ac:	1007883a 	mov	r3,r2
 100d3b0:	e0bff317 	ldw	r2,-52(fp)
 100d3b4:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
 100d3b8:	e0fff717 	ldw	r3,-36(fp)
 100d3bc:	e0bff417 	ldw	r2,-48(fp)
 100d3c0:	18800015 	stw	r2,0(r3)
 100d3c4:	e0bff717 	ldw	r2,-36(fp)
 100d3c8:	10800104 	addi	r2,r2,4
 100d3cc:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   = OS_TRUE;
 100d3d0:	00800044 	movi	r2,1
 100d3d4:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
 100d3d8:	e0bff18b 	ldhu	r2,-58(fp)
 100d3dc:	10800044 	addi	r2,r2,1
 100d3e0:	e0bff18d 	sth	r2,-58(fp)
 100d3e4:	00001006 	br	100d428 <OSEventPendMulti+0x3e0>

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
 100d3e8:	e0bff103 	ldbu	r2,-60(fp)
 100d3ec:	10800114 	ori	r2,r2,4
 100d3f0:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
 100d3f4:	00000c06 	br	100d428 <OSEventPendMulti+0x3e0>
 100d3f8:	e0bff017 	ldw	r2,-64(fp)
 100d3fc:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100d400:	e0bfee17 	ldw	r2,-72(fp)
 100d404:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
 100d408:	e0bff717 	ldw	r2,-36(fp)
 100d40c:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
 100d410:	e0c00217 	ldw	r3,8(fp)
 100d414:	00800044 	movi	r2,1
 100d418:	18800005 	stb	r2,0(r3)
                 return (events_rdy_nbr);
 100d41c:	e0bff18b 	ldhu	r2,-58(fp)
 100d420:	e0bfff15 	stw	r2,-4(fp)
 100d424:	0000b206 	br	100d6f0 <OSEventPendMulti+0x6a8>
        }
        pevents++;
 100d428:	e0bff517 	ldw	r2,-44(fp)
 100d42c:	10800104 	addi	r2,r2,4
 100d430:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
 100d434:	e0bff517 	ldw	r2,-44(fp)
 100d438:	10800017 	ldw	r2,0(r2)
 100d43c:	e0bff415 	stw	r2,-48(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 100d440:	e0bff417 	ldw	r2,-48(fp)
 100d444:	1004c03a 	cmpne	r2,r2,zero
 100d448:	103f6e1e 	bne	r2,zero,100d204 <OSEventPendMulti+0x1bc>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
 100d44c:	e0bff203 	ldbu	r2,-56(fp)
 100d450:	10800058 	cmpnei	r2,r2,1
 100d454:	10000b1e 	bne	r2,zero,100d484 <OSEventPendMulti+0x43c>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
 100d458:	e0bff717 	ldw	r2,-36(fp)
 100d45c:	10000015 	stw	zero,0(r2)
 100d460:	e0bff017 	ldw	r2,-64(fp)
 100d464:	e0bfed15 	stw	r2,-76(fp)
 100d468:	e0bfed17 	ldw	r2,-76(fp)
 100d46c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
 100d470:	e0800217 	ldw	r2,8(fp)
 100d474:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
 100d478:	e0fff18b 	ldhu	r3,-58(fp)
 100d47c:	e0ffff15 	stw	r3,-4(fp)
 100d480:	00009b06 	br	100d6f0 <OSEventPendMulti+0x6a8>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
 100d484:	d1177217 	ldw	r4,24008(gp)
 100d488:	d0977217 	ldw	r2,24008(gp)
 100d48c:	10c00c03 	ldbu	r3,48(r2)
 100d490:	e0bff103 	ldbu	r2,-60(fp)
 100d494:	1884b03a 	or	r2,r3,r2
 100d498:	1007883a 	mov	r3,r2
 100d49c:	00bfe004 	movi	r2,-128
 100d4a0:	1884b03a 	or	r2,r3,r2
 100d4a4:	20800c05 	stb	r2,48(r4)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 100d4a8:	d0977217 	ldw	r2,24008(gp)
 100d4ac:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
 100d4b0:	d0d77217 	ldw	r3,24008(gp)
 100d4b4:	e0bff90b 	ldhu	r2,-28(fp)
 100d4b8:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
 100d4bc:	e13ff617 	ldw	r4,-40(fp)
 100d4c0:	100e1180 	call	100e118 <OS_EventTaskWaitMulti>
 100d4c4:	e0bff017 	ldw	r2,-64(fp)
 100d4c8:	e0bfec15 	stw	r2,-80(fp)
 100d4cc:	e0bfec17 	ldw	r2,-80(fp)
 100d4d0:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
 100d4d4:	100e9440 	call	100e944 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100d4d8:	0005303a 	rdctl	r2,status
 100d4dc:	e0bfeb15 	stw	r2,-84(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100d4e0:	e0ffeb17 	ldw	r3,-84(fp)
 100d4e4:	00bfff84 	movi	r2,-2
 100d4e8:	1884703a 	and	r2,r3,r2
 100d4ec:	1001703a 	wrctl	status,r2
  
  return context;
 100d4f0:	e0bfeb17 	ldw	r2,-84(fp)
    OS_ENTER_CRITICAL();
 100d4f4:	e0bff015 	stw	r2,-64(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
 100d4f8:	d0977217 	ldw	r2,24008(gp)
 100d4fc:	10800c43 	ldbu	r2,49(r2)
 100d500:	10803fcc 	andi	r2,r2,255
 100d504:	e0bffc15 	stw	r2,-16(fp)
 100d508:	e0fffc17 	ldw	r3,-16(fp)
 100d50c:	1805003a 	cmpeq	r2,r3,zero
 100d510:	1000041e 	bne	r2,zero,100d524 <OSEventPendMulti+0x4dc>
 100d514:	e0fffc17 	ldw	r3,-16(fp)
 100d518:	188000a0 	cmpeqi	r2,r3,2
 100d51c:	1000011e 	bne	r2,zero,100d524 <OSEventPendMulti+0x4dc>
 100d520:	00001906 	br	100d588 <OSEventPendMulti+0x540>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
 100d524:	d0977217 	ldw	r2,24008(gp)
 100d528:	10800717 	ldw	r2,28(r2)
 100d52c:	e0bff415 	stw	r2,-48(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
 100d530:	e0bff417 	ldw	r2,-48(fp)
 100d534:	1005003a 	cmpeq	r2,r2,zero
 100d538:	10000c1e 	bne	r2,zero,100d56c <OSEventPendMulti+0x524>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
 100d53c:	e0fff717 	ldw	r3,-36(fp)
 100d540:	e0bff417 	ldw	r2,-48(fp)
 100d544:	18800015 	stw	r2,0(r3)
 100d548:	e0bff717 	ldw	r2,-36(fp)
 100d54c:	10800104 	addi	r2,r2,4
 100d550:	e0bff715 	stw	r2,-36(fp)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
 100d554:	e0bff717 	ldw	r2,-36(fp)
 100d558:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
 100d55c:	e0bff18b 	ldhu	r2,-58(fp)
 100d560:	10800044 	addi	r2,r2,1
 100d564:	e0bff18d 	sth	r2,-58(fp)
 100d568:	00000a06 	br	100d594 <OSEventPendMulti+0x54c>

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
 100d56c:	d0977217 	ldw	r2,24008(gp)
 100d570:	00c00044 	movi	r3,1
 100d574:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 100d578:	d1177217 	ldw	r4,24008(gp)
 100d57c:	e17ff617 	ldw	r5,-40(fp)
 100d580:	100e33c0 	call	100e33c <OS_EventTaskRemoveMulti>
             }
			 break;
 100d584:	00000306 	br	100d594 <OSEventPendMulti+0x54c>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 100d588:	d1177217 	ldw	r4,24008(gp)
 100d58c:	e17ff617 	ldw	r5,-40(fp)
 100d590:	100e33c0 	call	100e33c <OS_EventTaskRemoveMulti>
             break;
    }

    switch (OSTCBCur->OSTCBStatPend) {
 100d594:	d0977217 	ldw	r2,24008(gp)
 100d598:	10800c43 	ldbu	r2,49(r2)
 100d59c:	10803fcc 	andi	r2,r2,255
 100d5a0:	e0bffb15 	stw	r2,-20(fp)
 100d5a4:	e0fffb17 	ldw	r3,-20(fp)
 100d5a8:	1805003a 	cmpeq	r2,r3,zero
 100d5ac:	1000041e 	bne	r2,zero,100d5c0 <OSEventPendMulti+0x578>
 100d5b0:	e0fffb17 	ldw	r3,-20(fp)
 100d5b4:	188000a0 	cmpeqi	r2,r3,2
 100d5b8:	10002c1e 	bne	r2,zero,100d66c <OSEventPendMulti+0x624>
 100d5bc:	00003406 	br	100d690 <OSEventPendMulti+0x648>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
 100d5c0:	e0bff417 	ldw	r2,-48(fp)
 100d5c4:	10800003 	ldbu	r2,0(r2)
 100d5c8:	10803fcc 	andi	r2,r2,255
 100d5cc:	e0bffa15 	stw	r2,-24(fp)
 100d5d0:	e0fffa17 	ldw	r3,-24(fp)
 100d5d4:	18800050 	cmplti	r2,r3,1
 100d5d8:	1000151e 	bne	r2,zero,100d630 <OSEventPendMulti+0x5e8>
 100d5dc:	e0fffa17 	ldw	r3,-24(fp)
 100d5e0:	188000d0 	cmplti	r2,r3,3
 100d5e4:	10000a1e 	bne	r2,zero,100d610 <OSEventPendMulti+0x5c8>
 100d5e8:	e0fffa17 	ldw	r3,-24(fp)
 100d5ec:	188000e0 	cmpeqi	r2,r3,3
 100d5f0:	1000011e 	bne	r2,zero,100d5f8 <OSEventPendMulti+0x5b0>
 100d5f4:	00000e06 	br	100d630 <OSEventPendMulti+0x5e8>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
 100d5f8:	e0bff817 	ldw	r2,-32(fp)
 100d5fc:	10000015 	stw	zero,0(r2)
 100d600:	e0bff817 	ldw	r2,-32(fp)
 100d604:	10800104 	addi	r2,r2,4
 100d608:	e0bff815 	stw	r2,-32(fp)
                      break;
 100d60c:	00001406 	br	100d660 <OSEventPendMulti+0x618>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
 100d610:	d0977217 	ldw	r2,24008(gp)
 100d614:	10c00917 	ldw	r3,36(r2)
 100d618:	e0bff817 	ldw	r2,-32(fp)
 100d61c:	10c00015 	stw	r3,0(r2)
 100d620:	e0bff817 	ldw	r2,-32(fp)
 100d624:	10800104 	addi	r2,r2,4
 100d628:	e0bff815 	stw	r2,-32(fp)
                      break;
 100d62c:	00000c06 	br	100d660 <OSEventPendMulti+0x618>
 100d630:	e0bff017 	ldw	r2,-64(fp)
 100d634:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100d638:	e0bfea17 	ldw	r2,-88(fp)
 100d63c:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
 100d640:	e0bff717 	ldw	r2,-36(fp)
 100d644:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
 100d648:	e0c00217 	ldw	r3,8(fp)
 100d64c:	00800044 	movi	r2,1
 100d650:	18800005 	stb	r2,0(r3)
                      return (events_rdy_nbr);
 100d654:	e0bff18b 	ldhu	r2,-58(fp)
 100d658:	e0bfff15 	stw	r2,-4(fp)
 100d65c:	00002406 	br	100d6f0 <OSEventPendMulti+0x6a8>
             }
            *perr = OS_ERR_NONE;
 100d660:	e0800217 	ldw	r2,8(fp)
 100d664:	10000005 	stb	zero,0(r2)
             break;
 100d668:	00001106 	br	100d6b0 <OSEventPendMulti+0x668>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
 100d66c:	e0bff817 	ldw	r2,-32(fp)
 100d670:	10000015 	stw	zero,0(r2)
 100d674:	e0bff817 	ldw	r2,-32(fp)
 100d678:	10800104 	addi	r2,r2,4
 100d67c:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
 100d680:	e0c00217 	ldw	r3,8(fp)
 100d684:	00800384 	movi	r2,14
 100d688:	18800005 	stb	r2,0(r3)
             break;
 100d68c:	00000806 	br	100d6b0 <OSEventPendMulti+0x668>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
 100d690:	e0bff817 	ldw	r2,-32(fp)
 100d694:	10000015 	stw	zero,0(r2)
 100d698:	e0bff817 	ldw	r2,-32(fp)
 100d69c:	10800104 	addi	r2,r2,4
 100d6a0:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
 100d6a4:	e0c00217 	ldw	r3,8(fp)
 100d6a8:	00800284 	movi	r2,10
 100d6ac:	18800005 	stb	r2,0(r3)
             break;
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
 100d6b0:	d0977217 	ldw	r2,24008(gp)
 100d6b4:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
 100d6b8:	d0977217 	ldw	r2,24008(gp)
 100d6bc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
 100d6c0:	d0977217 	ldw	r2,24008(gp)
 100d6c4:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 100d6c8:	d0977217 	ldw	r2,24008(gp)
 100d6cc:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
 100d6d0:	d0977217 	ldw	r2,24008(gp)
 100d6d4:	10000915 	stw	zero,36(r2)
 100d6d8:	e0bff017 	ldw	r2,-64(fp)
 100d6dc:	e0bfe915 	stw	r2,-92(fp)
 100d6e0:	e0bfe917 	ldw	r2,-92(fp)
 100d6e4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
 100d6e8:	e0fff18b 	ldhu	r3,-58(fp)
 100d6ec:	e0ffff15 	stw	r3,-4(fp)
 100d6f0:	e0bfff17 	ldw	r2,-4(fp)
}
 100d6f4:	e037883a 	mov	sp,fp
 100d6f8:	dfc00117 	ldw	ra,4(sp)
 100d6fc:	df000017 	ldw	fp,0(sp)
 100d700:	dec00204 	addi	sp,sp,8
 100d704:	f800283a 	ret

0100d708 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
 100d708:	f811883a 	mov	r8,ra
 100d70c:	100c3d80 	call	100c3d8 <_mcount>
 100d710:	403f883a 	mov	ra,r8
 100d714:	defffe04 	addi	sp,sp,-8
 100d718:	dfc00115 	stw	ra,4(sp)
 100d71c:	df000015 	stw	fp,0(sp)
 100d720:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
 100d724:	101957c0 	call	101957c <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
 100d728:	100e5a80 	call	100e5a8 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
 100d72c:	100e5f80 	call	100e5f8 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
 100d730:	100e7800 	call	100e780 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
 100d734:	100e4c00 	call	100e4c0 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
 100d738:	10109980 	call	1010998 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
 100d73c:	10113dc0 	call	10113dc <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
 100d740:	10127bc0 	call	10127bc <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
 100d744:	100e6700 	call	100e670 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
 100d748:	100e6f80 	call	100e6f8 <OS_InitTaskStat>
#endif

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
 100d74c:	10163d00 	call	10163d0 <OSTmr_Init>
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
 100d750:	10195a80 	call	10195a8 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
 100d754:	100f08c0 	call	100f08c <OSDebugInit>
#endif
}
 100d758:	e037883a 	mov	sp,fp
 100d75c:	dfc00117 	ldw	ra,4(sp)
 100d760:	df000017 	ldw	fp,0(sp)
 100d764:	dec00204 	addi	sp,sp,8
 100d768:	f800283a 	ret

0100d76c <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
 100d76c:	f811883a 	mov	r8,ra
 100d770:	100c3d80 	call	100c3d8 <_mcount>
 100d774:	403f883a 	mov	ra,r8
 100d778:	defffc04 	addi	sp,sp,-16
 100d77c:	df000315 	stw	fp,12(sp)
 100d780:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 100d784:	e03fff15 	stw	zero,-4(fp)
#endif

    if (OSRunning == OS_TRUE) {
 100d788:	d0976203 	ldbu	r2,23944(gp)
 100d78c:	10803fcc 	andi	r2,r2,255
 100d790:	10800058 	cmpnei	r2,r2,1
 100d794:	1000131e 	bne	r2,zero,100d7e4 <OSIntEnter+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100d798:	0005303a 	rdctl	r2,status
 100d79c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100d7a0:	e0fffe17 	ldw	r3,-8(fp)
 100d7a4:	00bfff84 	movi	r2,-2
 100d7a8:	1884703a 	and	r2,r3,r2
 100d7ac:	1001703a 	wrctl	status,r2
  
  return context;
 100d7b0:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 100d7b4:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting < 255u) {
 100d7b8:	d0977103 	ldbu	r2,24004(gp)
 100d7bc:	10803fcc 	andi	r2,r2,255
 100d7c0:	10803fe0 	cmpeqi	r2,r2,255
 100d7c4:	1000031e 	bne	r2,zero,100d7d4 <OSIntEnter+0x68>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
 100d7c8:	d0977103 	ldbu	r2,24004(gp)
 100d7cc:	10800044 	addi	r2,r2,1
 100d7d0:	d0977105 	stb	r2,24004(gp)
 100d7d4:	e0bfff17 	ldw	r2,-4(fp)
 100d7d8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100d7dc:	e0bffd17 	ldw	r2,-12(fp)
 100d7e0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
 100d7e4:	e037883a 	mov	sp,fp
 100d7e8:	df000017 	ldw	fp,0(sp)
 100d7ec:	dec00104 	addi	sp,sp,4
 100d7f0:	f800283a 	ret

0100d7f4 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
 100d7f4:	f811883a 	mov	r8,ra
 100d7f8:	100c3d80 	call	100c3d8 <_mcount>
 100d7fc:	403f883a 	mov	ra,r8
 100d800:	defffb04 	addi	sp,sp,-20
 100d804:	dfc00415 	stw	ra,16(sp)
 100d808:	df000315 	stw	fp,12(sp)
 100d80c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 100d810:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {
 100d814:	d0976203 	ldbu	r2,23944(gp)
 100d818:	10803fcc 	andi	r2,r2,255
 100d81c:	10800058 	cmpnei	r2,r2,1
 100d820:	1000321e 	bne	r2,zero,100d8ec <OSIntExit+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100d824:	0005303a 	rdctl	r2,status
 100d828:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100d82c:	e0fffe17 	ldw	r3,-8(fp)
 100d830:	00bfff84 	movi	r2,-2
 100d834:	1884703a 	and	r2,r3,r2
 100d838:	1001703a 	wrctl	status,r2
  
  return context;
 100d83c:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 100d840:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
 100d844:	d0977103 	ldbu	r2,24004(gp)
 100d848:	10803fcc 	andi	r2,r2,255
 100d84c:	1005003a 	cmpeq	r2,r2,zero
 100d850:	1000031e 	bne	r2,zero,100d860 <OSIntExit+0x6c>
            OSIntNesting--;
 100d854:	d0977103 	ldbu	r2,24004(gp)
 100d858:	10bfffc4 	addi	r2,r2,-1
 100d85c:	d0977105 	stb	r2,24004(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
 100d860:	d0977103 	ldbu	r2,24004(gp)
 100d864:	10803fcc 	andi	r2,r2,255
 100d868:	1004c03a 	cmpne	r2,r2,zero
 100d86c:	10001b1e 	bne	r2,zero,100d8dc <OSIntExit+0xe8>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
 100d870:	d0976003 	ldbu	r2,23936(gp)
 100d874:	10803fcc 	andi	r2,r2,255
 100d878:	1004c03a 	cmpne	r2,r2,zero
 100d87c:	1000171e 	bne	r2,zero,100d8dc <OSIntExit+0xe8>
                OS_SchedNew();
 100d880:	100ea240 	call	100ea24 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
 100d884:	d0976483 	ldbu	r2,23954(gp)
 100d888:	d0d764c3 	ldbu	r3,23955(gp)
 100d88c:	11003fcc 	andi	r4,r2,255
 100d890:	18803fcc 	andi	r2,r3,255
 100d894:	20801126 	beq	r4,r2,100d8dc <OSIntExit+0xe8>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
 100d898:	d0976483 	ldbu	r2,23954(gp)
 100d89c:	10803fcc 	andi	r2,r2,255
 100d8a0:	00c04174 	movhi	r3,261
 100d8a4:	18e6e404 	addi	r3,r3,-25712
 100d8a8:	1085883a 	add	r2,r2,r2
 100d8ac:	1085883a 	add	r2,r2,r2
 100d8b0:	10c5883a 	add	r2,r2,r3
 100d8b4:	10800017 	ldw	r2,0(r2)
 100d8b8:	d0976d15 	stw	r2,23988(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
 100d8bc:	d0d76d17 	ldw	r3,23988(gp)
 100d8c0:	18800e17 	ldw	r2,56(r3)
 100d8c4:	10800044 	addi	r2,r2,1
 100d8c8:	18800e15 	stw	r2,56(r3)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
 100d8cc:	d0976717 	ldw	r2,23964(gp)
 100d8d0:	10800044 	addi	r2,r2,1
 100d8d4:	d0976715 	stw	r2,23964(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
 100d8d8:	10190700 	call	1019070 <OSCtxSw>
 100d8dc:	e0bfff17 	ldw	r2,-4(fp)
 100d8e0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100d8e4:	e0bffd17 	ldw	r2,-12(fp)
 100d8e8:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 100d8ec:	e037883a 	mov	sp,fp
 100d8f0:	dfc00117 	ldw	ra,4(sp)
 100d8f4:	df000017 	ldw	fp,0(sp)
 100d8f8:	dec00204 	addi	sp,sp,8
 100d8fc:	f800283a 	ret

0100d900 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
 100d900:	f811883a 	mov	r8,ra
 100d904:	100c3d80 	call	100c3d8 <_mcount>
 100d908:	403f883a 	mov	ra,r8
 100d90c:	defffc04 	addi	sp,sp,-16
 100d910:	df000315 	stw	fp,12(sp)
 100d914:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 100d918:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
 100d91c:	d0976203 	ldbu	r2,23944(gp)
 100d920:	10803fcc 	andi	r2,r2,255
 100d924:	10800058 	cmpnei	r2,r2,1
 100d928:	1000171e 	bne	r2,zero,100d988 <OSSchedLock+0x88>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100d92c:	0005303a 	rdctl	r2,status
 100d930:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100d934:	e0fffe17 	ldw	r3,-8(fp)
 100d938:	00bfff84 	movi	r2,-2
 100d93c:	1884703a 	and	r2,r3,r2
 100d940:	1001703a 	wrctl	status,r2
  
  return context;
 100d944:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 100d948:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
 100d94c:	d0977103 	ldbu	r2,24004(gp)
 100d950:	10803fcc 	andi	r2,r2,255
 100d954:	1004c03a 	cmpne	r2,r2,zero
 100d958:	1000071e 	bne	r2,zero,100d978 <OSSchedLock+0x78>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
 100d95c:	d0976003 	ldbu	r2,23936(gp)
 100d960:	10803fcc 	andi	r2,r2,255
 100d964:	10803fe0 	cmpeqi	r2,r2,255
 100d968:	1000031e 	bne	r2,zero,100d978 <OSSchedLock+0x78>
                OSLockNesting++;                 /* Increment lock nesting level                       */
 100d96c:	d0976003 	ldbu	r2,23936(gp)
 100d970:	10800044 	addi	r2,r2,1
 100d974:	d0976005 	stb	r2,23936(gp)
 100d978:	e0bfff17 	ldw	r2,-4(fp)
 100d97c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100d980:	e0bffd17 	ldw	r2,-12(fp)
 100d984:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 100d988:	e037883a 	mov	sp,fp
 100d98c:	df000017 	ldw	fp,0(sp)
 100d990:	dec00104 	addi	sp,sp,4
 100d994:	f800283a 	ret

0100d998 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
 100d998:	f811883a 	mov	r8,ra
 100d99c:	100c3d80 	call	100c3d8 <_mcount>
 100d9a0:	403f883a 	mov	ra,r8
 100d9a4:	defff804 	addi	sp,sp,-32
 100d9a8:	dfc00715 	stw	ra,28(sp)
 100d9ac:	df000615 	stw	fp,24(sp)
 100d9b0:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 100d9b4:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
 100d9b8:	d0976203 	ldbu	r2,23944(gp)
 100d9bc:	10803fcc 	andi	r2,r2,255
 100d9c0:	10800058 	cmpnei	r2,r2,1
 100d9c4:	10002b1e 	bne	r2,zero,100da74 <OSSchedUnlock+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100d9c8:	0005303a 	rdctl	r2,status
 100d9cc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100d9d0:	e0fffe17 	ldw	r3,-8(fp)
 100d9d4:	00bfff84 	movi	r2,-2
 100d9d8:	1884703a 	and	r2,r3,r2
 100d9dc:	1001703a 	wrctl	status,r2
  
  return context;
 100d9e0:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 100d9e4:	e0bfff15 	stw	r2,-4(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
 100d9e8:	d0976003 	ldbu	r2,23936(gp)
 100d9ec:	10803fcc 	andi	r2,r2,255
 100d9f0:	1005003a 	cmpeq	r2,r2,zero
 100d9f4:	10001b1e 	bne	r2,zero,100da64 <OSSchedUnlock+0xcc>
            OSLockNesting--;                               /* Decrement lock nesting level             */
 100d9f8:	d0976003 	ldbu	r2,23936(gp)
 100d9fc:	10bfffc4 	addi	r2,r2,-1
 100da00:	d0976005 	stb	r2,23936(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
 100da04:	d0976003 	ldbu	r2,23936(gp)
 100da08:	10803fcc 	andi	r2,r2,255
 100da0c:	1004c03a 	cmpne	r2,r2,zero
 100da10:	10000f1e 	bne	r2,zero,100da50 <OSSchedUnlock+0xb8>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
 100da14:	d0977103 	ldbu	r2,24004(gp)
 100da18:	10803fcc 	andi	r2,r2,255
 100da1c:	1004c03a 	cmpne	r2,r2,zero
 100da20:	1000061e 	bne	r2,zero,100da3c <OSSchedUnlock+0xa4>
 100da24:	e0bfff17 	ldw	r2,-4(fp)
 100da28:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100da2c:	e0bffd17 	ldw	r2,-12(fp)
 100da30:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
 100da34:	100e9440 	call	100e944 <OS_Sched>
 100da38:	00000e06 	br	100da74 <OSSchedUnlock+0xdc>
 100da3c:	e0bfff17 	ldw	r2,-4(fp)
 100da40:	e0bffc15 	stw	r2,-16(fp)
 100da44:	e0bffc17 	ldw	r2,-16(fp)
 100da48:	1001703a 	wrctl	status,r2
 100da4c:	00000906 	br	100da74 <OSSchedUnlock+0xdc>
 100da50:	e0bfff17 	ldw	r2,-4(fp)
 100da54:	e0bffb15 	stw	r2,-20(fp)
 100da58:	e0bffb17 	ldw	r2,-20(fp)
 100da5c:	1001703a 	wrctl	status,r2
 100da60:	00000406 	br	100da74 <OSSchedUnlock+0xdc>
 100da64:	e0bfff17 	ldw	r2,-4(fp)
 100da68:	e0bffa15 	stw	r2,-24(fp)
 100da6c:	e0bffa17 	ldw	r2,-24(fp)
 100da70:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
 100da74:	e037883a 	mov	sp,fp
 100da78:	dfc00117 	ldw	ra,4(sp)
 100da7c:	df000017 	ldw	fp,0(sp)
 100da80:	dec00204 	addi	sp,sp,8
 100da84:	f800283a 	ret

0100da88 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
 100da88:	f811883a 	mov	r8,ra
 100da8c:	100c3d80 	call	100c3d8 <_mcount>
 100da90:	403f883a 	mov	ra,r8
 100da94:	defffe04 	addi	sp,sp,-8
 100da98:	dfc00115 	stw	ra,4(sp)
 100da9c:	df000015 	stw	fp,0(sp)
 100daa0:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
 100daa4:	d0976203 	ldbu	r2,23944(gp)
 100daa8:	10803fcc 	andi	r2,r2,255
 100daac:	1004c03a 	cmpne	r2,r2,zero
 100dab0:	10000f1e 	bne	r2,zero,100daf0 <OSStart+0x68>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
 100dab4:	100ea240 	call	100ea24 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
 100dab8:	d0976483 	ldbu	r2,23954(gp)
 100dabc:	d09764c5 	stb	r2,23955(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
 100dac0:	d0976483 	ldbu	r2,23954(gp)
 100dac4:	10803fcc 	andi	r2,r2,255
 100dac8:	00c04174 	movhi	r3,261
 100dacc:	18e6e404 	addi	r3,r3,-25712
 100dad0:	1085883a 	add	r2,r2,r2
 100dad4:	1085883a 	add	r2,r2,r2
 100dad8:	10c5883a 	add	r2,r2,r3
 100dadc:	10800017 	ldw	r2,0(r2)
 100dae0:	d0976d15 	stw	r2,23988(gp)
        OSTCBCur      = OSTCBHighRdy;
 100dae4:	d0976d17 	ldw	r2,23988(gp)
 100dae8:	d0977215 	stw	r2,24008(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
 100daec:	10190fc0 	call	10190fc <OSStartHighRdy>
    }
}
 100daf0:	e037883a 	mov	sp,fp
 100daf4:	dfc00117 	ldw	ra,4(sp)
 100daf8:	df000017 	ldw	fp,0(sp)
 100dafc:	dec00204 	addi	sp,sp,8
 100db00:	f800283a 	ret

0100db04 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
 100db04:	f811883a 	mov	r8,ra
 100db08:	100c3d80 	call	100c3d8 <_mcount>
 100db0c:	403f883a 	mov	ra,r8
 100db10:	defff904 	addi	sp,sp,-28
 100db14:	dfc00615 	stw	ra,24(sp)
 100db18:	df000515 	stw	fp,20(sp)
 100db1c:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 100db20:	e03fff15 	stw	zero,-4(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
 100db24:	01000084 	movi	r4,2
 100db28:	1014f6c0 	call	1014f6c <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100db2c:	0005303a 	rdctl	r2,status
 100db30:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100db34:	e0fffe17 	ldw	r3,-8(fp)
 100db38:	00bfff84 	movi	r2,-2
 100db3c:	1884703a 	and	r2,r3,r2
 100db40:	1001703a 	wrctl	status,r2
  
  return context;
 100db44:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
 100db48:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
 100db4c:	d0176315 	stw	zero,23948(gp)
 100db50:	e0bfff17 	ldw	r2,-4(fp)
 100db54:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100db58:	e0bffd17 	ldw	r2,-12(fp)
 100db5c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
 100db60:	01001904 	movi	r4,100
 100db64:	1014f6c0 	call	1014f6c <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100db68:	0005303a 	rdctl	r2,status
 100db6c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100db70:	e0fffc17 	ldw	r3,-16(fp)
 100db74:	00bfff84 	movi	r2,-2
 100db78:	1884703a 	and	r2,r3,r2
 100db7c:	1001703a 	wrctl	status,r2
  
  return context;
 100db80:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
 100db84:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
 100db88:	d0976317 	ldw	r2,23948(gp)
 100db8c:	d0976915 	stw	r2,23972(gp)
    OSStatRdy    = OS_TRUE;
 100db90:	00800044 	movi	r2,1
 100db94:	d0977705 	stb	r2,24028(gp)
 100db98:	e0bfff17 	ldw	r2,-4(fp)
 100db9c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100dba0:	e0bffb17 	ldw	r2,-20(fp)
 100dba4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 100dba8:	e037883a 	mov	sp,fp
 100dbac:	dfc00117 	ldw	ra,4(sp)
 100dbb0:	df000017 	ldw	fp,0(sp)
 100dbb4:	dec00204 	addi	sp,sp,8
 100dbb8:	f800283a 	ret

0100dbbc <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
 100dbbc:	f811883a 	mov	r8,ra
 100dbc0:	100c3d80 	call	100c3d8 <_mcount>
 100dbc4:	403f883a 	mov	ra,r8
 100dbc8:	defff604 	addi	sp,sp,-40
 100dbcc:	dfc00915 	stw	ra,36(sp)
 100dbd0:	df000815 	stw	fp,32(sp)
 100dbd4:	df000804 	addi	fp,sp,32
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 100dbd8:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
 100dbdc:	10195040 	call	1019504 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100dbe0:	0005303a 	rdctl	r2,status
 100dbe4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100dbe8:	e0fffb17 	ldw	r3,-20(fp)
 100dbec:	00bfff84 	movi	r2,-2
 100dbf0:	1884703a 	and	r2,r3,r2
 100dbf4:	1001703a 	wrctl	status,r2
  
  return context;
 100dbf8:	e0bffb17 	ldw	r2,-20(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
 100dbfc:	e0bffc15 	stw	r2,-16(fp)
    OSTime++;
 100dc00:	d0977417 	ldw	r2,24016(gp)
 100dc04:	10800044 	addi	r2,r2,1
 100dc08:	d0977415 	stw	r2,24016(gp)
 100dc0c:	e0bffc17 	ldw	r2,-16(fp)
 100dc10:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100dc14:	e0bffa17 	ldw	r2,-24(fp)
 100dc18:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
 100dc1c:	d0976203 	ldbu	r2,23944(gp)
 100dc20:	10803fcc 	andi	r2,r2,255
 100dc24:	10800058 	cmpnei	r2,r2,1
 100dc28:	1000721e 	bne	r2,zero,100ddf4 <OSTimeTick+0x238>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
 100dc2c:	d0976603 	ldbu	r2,23960(gp)
 100dc30:	10803fcc 	andi	r2,r2,255
 100dc34:	e0bfff15 	stw	r2,-4(fp)
 100dc38:	e0ffff17 	ldw	r3,-4(fp)
 100dc3c:	18800060 	cmpeqi	r2,r3,1
 100dc40:	10000a1e 	bne	r2,zero,100dc6c <OSTimeTick+0xb0>
 100dc44:	e0ffff17 	ldw	r3,-4(fp)
 100dc48:	188000a0 	cmpeqi	r2,r3,2
 100dc4c:	1000091e 	bne	r2,zero,100dc74 <OSTimeTick+0xb8>
 100dc50:	e0ffff17 	ldw	r3,-4(fp)
 100dc54:	1805003a 	cmpeq	r2,r3,zero
 100dc58:	1000011e 	bne	r2,zero,100dc60 <OSTimeTick+0xa4>
 100dc5c:	00000a06 	br	100dc88 <OSTimeTick+0xcc>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
 100dc60:	00800044 	movi	r2,1
 100dc64:	e0bffd05 	stb	r2,-12(fp)
                 break;
 100dc68:	00000a06 	br	100dc94 <OSTimeTick+0xd8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
 100dc6c:	e03ffd05 	stb	zero,-12(fp)
                 break;
 100dc70:	00000806 	br	100dc94 <OSTimeTick+0xd8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
 100dc74:	00800044 	movi	r2,1
 100dc78:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
 100dc7c:	00800044 	movi	r2,1
 100dc80:	d0976605 	stb	r2,23960(gp)
                 break;
 100dc84:	00000306 	br	100dc94 <OSTimeTick+0xd8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
 100dc88:	00800044 	movi	r2,1
 100dc8c:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
 100dc90:	d0176605 	stb	zero,23960(gp)
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
 100dc94:	e0bffd03 	ldbu	r2,-12(fp)
 100dc98:	1005003a 	cmpeq	r2,r2,zero
 100dc9c:	1000551e 	bne	r2,zero,100ddf4 <OSTimeTick+0x238>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
 100dca0:	d0976517 	ldw	r2,23956(gp)
 100dca4:	e0bffe15 	stw	r2,-8(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 100dca8:	00004d06 	br	100dde0 <OSTimeTick+0x224>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100dcac:	0005303a 	rdctl	r2,status
 100dcb0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100dcb4:	e0fff917 	ldw	r3,-28(fp)
 100dcb8:	00bfff84 	movi	r2,-2
 100dcbc:	1884703a 	and	r2,r3,r2
 100dcc0:	1001703a 	wrctl	status,r2
  
  return context;
 100dcc4:	e0bff917 	ldw	r2,-28(fp)
            OS_ENTER_CRITICAL();
 100dcc8:	e0bffc15 	stw	r2,-16(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
 100dccc:	e0bffe17 	ldw	r2,-8(fp)
 100dcd0:	10800b8b 	ldhu	r2,46(r2)
 100dcd4:	10bfffcc 	andi	r2,r2,65535
 100dcd8:	1005003a 	cmpeq	r2,r2,zero
 100dcdc:	1000391e 	bne	r2,zero,100ddc4 <OSTimeTick+0x208>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
 100dce0:	e0bffe17 	ldw	r2,-8(fp)
 100dce4:	10800b8b 	ldhu	r2,46(r2)
 100dce8:	10bfffc4 	addi	r2,r2,-1
 100dcec:	1007883a 	mov	r3,r2
 100dcf0:	e0bffe17 	ldw	r2,-8(fp)
 100dcf4:	10c00b8d 	sth	r3,46(r2)
 100dcf8:	e0bffe17 	ldw	r2,-8(fp)
 100dcfc:	10800b8b 	ldhu	r2,46(r2)
 100dd00:	10bfffcc 	andi	r2,r2,65535
 100dd04:	1004c03a 	cmpne	r2,r2,zero
 100dd08:	10002e1e 	bne	r2,zero,100ddc4 <OSTimeTick+0x208>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 100dd0c:	e0bffe17 	ldw	r2,-8(fp)
 100dd10:	10800c03 	ldbu	r2,48(r2)
 100dd14:	10803fcc 	andi	r2,r2,255
 100dd18:	10800dcc 	andi	r2,r2,55
 100dd1c:	1005003a 	cmpeq	r2,r2,zero
 100dd20:	10000b1e 	bne	r2,zero,100dd50 <OSTimeTick+0x194>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
 100dd24:	e0bffe17 	ldw	r2,-8(fp)
 100dd28:	10c00c03 	ldbu	r3,48(r2)
 100dd2c:	00bff204 	movi	r2,-56
 100dd30:	1884703a 	and	r2,r3,r2
 100dd34:	1007883a 	mov	r3,r2
 100dd38:	e0bffe17 	ldw	r2,-8(fp)
 100dd3c:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
 100dd40:	e0fffe17 	ldw	r3,-8(fp)
 100dd44:	00800044 	movi	r2,1
 100dd48:	18800c45 	stb	r2,49(r3)
 100dd4c:	00000206 	br	100dd58 <OSTimeTick+0x19c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 100dd50:	e0bffe17 	ldw	r2,-8(fp)
 100dd54:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
 100dd58:	e0bffe17 	ldw	r2,-8(fp)
 100dd5c:	10800c03 	ldbu	r2,48(r2)
 100dd60:	10803fcc 	andi	r2,r2,255
 100dd64:	1080020c 	andi	r2,r2,8
 100dd68:	1004c03a 	cmpne	r2,r2,zero
 100dd6c:	1000151e 	bne	r2,zero,100ddc4 <OSTimeTick+0x208>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
 100dd70:	e0bffe17 	ldw	r2,-8(fp)
 100dd74:	10c00d83 	ldbu	r3,54(r2)
 100dd78:	d0976f03 	ldbu	r2,23996(gp)
 100dd7c:	1884b03a 	or	r2,r3,r2
 100dd80:	d0976f05 	stb	r2,23996(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 100dd84:	e0bffe17 	ldw	r2,-8(fp)
 100dd88:	10800d03 	ldbu	r2,52(r2)
 100dd8c:	11003fcc 	andi	r4,r2,255
 100dd90:	e0bffe17 	ldw	r2,-8(fp)
 100dd94:	10800d03 	ldbu	r2,52(r2)
 100dd98:	10c03fcc 	andi	r3,r2,255
 100dd9c:	d0976f44 	addi	r2,gp,23997
 100dda0:	1885883a 	add	r2,r3,r2
 100dda4:	10c00003 	ldbu	r3,0(r2)
 100dda8:	e0bffe17 	ldw	r2,-8(fp)
 100ddac:	10800d43 	ldbu	r2,53(r2)
 100ddb0:	1884b03a 	or	r2,r3,r2
 100ddb4:	1007883a 	mov	r3,r2
 100ddb8:	d0976f44 	addi	r2,gp,23997
 100ddbc:	2085883a 	add	r2,r4,r2
 100ddc0:	10c00005 	stb	r3,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
 100ddc4:	e0bffe17 	ldw	r2,-8(fp)
 100ddc8:	10800517 	ldw	r2,20(r2)
 100ddcc:	e0bffe15 	stw	r2,-8(fp)
 100ddd0:	e0bffc17 	ldw	r2,-16(fp)
 100ddd4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100ddd8:	e0bff817 	ldw	r2,-32(fp)
 100dddc:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 100dde0:	e0bffe17 	ldw	r2,-8(fp)
 100dde4:	10800c83 	ldbu	r2,50(r2)
 100dde8:	10803fcc 	andi	r2,r2,255
 100ddec:	10800518 	cmpnei	r2,r2,20
 100ddf0:	103fae1e 	bne	r2,zero,100dcac <OSTimeTick+0xf0>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
 100ddf4:	e037883a 	mov	sp,fp
 100ddf8:	dfc00117 	ldw	ra,4(sp)
 100ddfc:	df000017 	ldw	fp,0(sp)
 100de00:	dec00204 	addi	sp,sp,8
 100de04:	f800283a 	ret

0100de08 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
 100de08:	f811883a 	mov	r8,ra
 100de0c:	100c3d80 	call	100c3d8 <_mcount>
 100de10:	403f883a 	mov	ra,r8
 100de14:	deffff04 	addi	sp,sp,-4
 100de18:	df000015 	stw	fp,0(sp)
 100de1c:	d839883a 	mov	fp,sp
    return (OS_VERSION);
 100de20:	00804784 	movi	r2,286
}
 100de24:	e037883a 	mov	sp,fp
 100de28:	df000017 	ldw	fp,0(sp)
 100de2c:	dec00104 	addi	sp,sp,4
 100de30:	f800283a 	ret

0100de34 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
 100de34:	f811883a 	mov	r8,ra
 100de38:	100c3d80 	call	100c3d8 <_mcount>
 100de3c:	403f883a 	mov	ra,r8
 100de40:	deffff04 	addi	sp,sp,-4
 100de44:	df000015 	stw	fp,0(sp)
 100de48:	d839883a 	mov	fp,sp
}
 100de4c:	e037883a 	mov	sp,fp
 100de50:	df000017 	ldw	fp,0(sp)
 100de54:	dec00104 	addi	sp,sp,4
 100de58:	f800283a 	ret

0100de5c <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
 100de5c:	f811883a 	mov	r8,ra
 100de60:	100c3d80 	call	100c3d8 <_mcount>
 100de64:	403f883a 	mov	ra,r8
 100de68:	defff804 	addi	sp,sp,-32
 100de6c:	dfc00715 	stw	ra,28(sp)
 100de70:	df000615 	stw	fp,24(sp)
 100de74:	df000604 	addi	fp,sp,24
 100de78:	e13ffc15 	stw	r4,-16(fp)
 100de7c:	e17ffd15 	stw	r5,-12(fp)
 100de80:	e1bffe05 	stb	r6,-8(fp)
 100de84:	e1ffff05 	stb	r7,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
 100de88:	e0bffc17 	ldw	r2,-16(fp)
 100de8c:	10800283 	ldbu	r2,10(r2)
 100de90:	10c03fcc 	andi	r3,r2,255
 100de94:	008040b4 	movhi	r2,258
 100de98:	10a87204 	addi	r2,r2,-24120
 100de9c:	10c5883a 	add	r2,r2,r3
 100dea0:	10800003 	ldbu	r2,0(r2)
 100dea4:	e0bffa85 	stb	r2,-22(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
 100dea8:	e0fffa83 	ldbu	r3,-22(fp)
 100deac:	e0bffc17 	ldw	r2,-16(fp)
 100deb0:	1885883a 	add	r2,r3,r2
 100deb4:	10800204 	addi	r2,r2,8
 100deb8:	108000c3 	ldbu	r2,3(r2)
 100debc:	10c03fcc 	andi	r3,r2,255
 100dec0:	008040b4 	movhi	r2,258
 100dec4:	10a87204 	addi	r2,r2,-24120
 100dec8:	10c5883a 	add	r2,r2,r3
 100decc:	10800003 	ldbu	r2,0(r2)
 100ded0:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
 100ded4:	e0bffa83 	ldbu	r2,-22(fp)
 100ded8:	100490fa 	slli	r2,r2,3
 100dedc:	1007883a 	mov	r3,r2
 100dee0:	e0bffa43 	ldbu	r2,-23(fp)
 100dee4:	1885883a 	add	r2,r3,r2
 100dee8:	e0bffa05 	stb	r2,-24(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
 100deec:	e0bffa03 	ldbu	r2,-24(fp)
 100def0:	00c04174 	movhi	r3,261
 100def4:	18e6e404 	addi	r3,r3,-25712
 100def8:	1085883a 	add	r2,r2,r2
 100defc:	1085883a 	add	r2,r2,r2
 100df00:	10c5883a 	add	r2,r2,r3
 100df04:	10800017 	ldw	r2,0(r2)
 100df08:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
 100df0c:	e0bffb17 	ldw	r2,-20(fp)
 100df10:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
 100df14:	e0fffb17 	ldw	r3,-20(fp)
 100df18:	e0bffd17 	ldw	r2,-12(fp)
 100df1c:	18800915 	stw	r2,36(r3)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
 100df20:	e0bffb17 	ldw	r2,-20(fp)
 100df24:	10800c03 	ldbu	r2,48(r2)
 100df28:	1007883a 	mov	r3,r2
 100df2c:	e0bffe03 	ldbu	r2,-8(fp)
 100df30:	0084303a 	nor	r2,zero,r2
 100df34:	1884703a 	and	r2,r3,r2
 100df38:	1007883a 	mov	r3,r2
 100df3c:	e0bffb17 	ldw	r2,-20(fp)
 100df40:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
 100df44:	e0fffb17 	ldw	r3,-20(fp)
 100df48:	e0bfff03 	ldbu	r2,-4(fp)
 100df4c:	18800c45 	stb	r2,49(r3)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
 100df50:	e0bffb17 	ldw	r2,-20(fp)
 100df54:	10800c03 	ldbu	r2,48(r2)
 100df58:	10803fcc 	andi	r2,r2,255
 100df5c:	1080020c 	andi	r2,r2,8
 100df60:	1004c03a 	cmpne	r2,r2,zero
 100df64:	1000111e 	bne	r2,zero,100dfac <OS_EventTaskRdy+0x150>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
 100df68:	e0bffb17 	ldw	r2,-20(fp)
 100df6c:	10c00d83 	ldbu	r3,54(r2)
 100df70:	d0976f03 	ldbu	r2,23996(gp)
 100df74:	1884b03a 	or	r2,r3,r2
 100df78:	d0976f05 	stb	r2,23996(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
 100df7c:	e13ffa83 	ldbu	r4,-22(fp)
 100df80:	e0fffa83 	ldbu	r3,-22(fp)
 100df84:	d0976f44 	addi	r2,gp,23997
 100df88:	1885883a 	add	r2,r3,r2
 100df8c:	10c00003 	ldbu	r3,0(r2)
 100df90:	e0bffb17 	ldw	r2,-20(fp)
 100df94:	10800d43 	ldbu	r2,53(r2)
 100df98:	1884b03a 	or	r2,r3,r2
 100df9c:	1007883a 	mov	r3,r2
 100dfa0:	d0976f44 	addi	r2,gp,23997
 100dfa4:	2085883a 	add	r2,r4,r2
 100dfa8:	10c00005 	stb	r3,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
 100dfac:	e13ffb17 	ldw	r4,-20(fp)
 100dfb0:	e17ffc17 	ldw	r5,-16(fp)
 100dfb4:	100e2780 	call	100e278 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
 100dfb8:	e0bffb17 	ldw	r2,-20(fp)
 100dfbc:	10800817 	ldw	r2,32(r2)
 100dfc0:	1005003a 	cmpeq	r2,r2,zero
 100dfc4:	1000071e 	bne	r2,zero,100dfe4 <OS_EventTaskRdy+0x188>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 100dfc8:	e0bffb17 	ldw	r2,-20(fp)
 100dfcc:	11400817 	ldw	r5,32(r2)
 100dfd0:	e13ffb17 	ldw	r4,-20(fp)
 100dfd4:	100e33c0 	call	100e33c <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
 100dfd8:	e0fffb17 	ldw	r3,-20(fp)
 100dfdc:	e0bffc17 	ldw	r2,-16(fp)
 100dfe0:	18800715 	stw	r2,28(r3)
    }
#endif

    return (prio);
 100dfe4:	e0bffa03 	ldbu	r2,-24(fp)
}
 100dfe8:	e037883a 	mov	sp,fp
 100dfec:	dfc00117 	ldw	ra,4(sp)
 100dff0:	df000017 	ldw	fp,0(sp)
 100dff4:	dec00204 	addi	sp,sp,8
 100dff8:	f800283a 	ret

0100dffc <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
 100dffc:	f811883a 	mov	r8,ra
 100e000:	100c3d80 	call	100c3d8 <_mcount>
 100e004:	403f883a 	mov	ra,r8
 100e008:	defffd04 	addi	sp,sp,-12
 100e00c:	df000215 	stw	fp,8(sp)
 100e010:	df000204 	addi	fp,sp,8
 100e014:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
 100e018:	d0d77217 	ldw	r3,24008(gp)
 100e01c:	e0bfff17 	ldw	r2,-4(fp)
 100e020:	18800715 	stw	r2,28(r3)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
 100e024:	d0977217 	ldw	r2,24008(gp)
 100e028:	10800d03 	ldbu	r2,52(r2)
 100e02c:	11003fcc 	andi	r4,r2,255
 100e030:	d0977217 	ldw	r2,24008(gp)
 100e034:	10800d03 	ldbu	r2,52(r2)
 100e038:	10c03fcc 	andi	r3,r2,255
 100e03c:	e0bfff17 	ldw	r2,-4(fp)
 100e040:	1885883a 	add	r2,r3,r2
 100e044:	10800204 	addi	r2,r2,8
 100e048:	10c000c3 	ldbu	r3,3(r2)
 100e04c:	d0977217 	ldw	r2,24008(gp)
 100e050:	10800d43 	ldbu	r2,53(r2)
 100e054:	1884b03a 	or	r2,r3,r2
 100e058:	1007883a 	mov	r3,r2
 100e05c:	e0bfff17 	ldw	r2,-4(fp)
 100e060:	2085883a 	add	r2,r4,r2
 100e064:	10800204 	addi	r2,r2,8
 100e068:	10c000c5 	stb	r3,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 100e06c:	e0bfff17 	ldw	r2,-4(fp)
 100e070:	10c00283 	ldbu	r3,10(r2)
 100e074:	d0977217 	ldw	r2,24008(gp)
 100e078:	10800d83 	ldbu	r2,54(r2)
 100e07c:	1884b03a 	or	r2,r3,r2
 100e080:	1007883a 	mov	r3,r2
 100e084:	e0bfff17 	ldw	r2,-4(fp)
 100e088:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 100e08c:	d0977217 	ldw	r2,24008(gp)
 100e090:	10800d03 	ldbu	r2,52(r2)
 100e094:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 100e098:	e13ffe03 	ldbu	r4,-8(fp)
 100e09c:	e0fffe03 	ldbu	r3,-8(fp)
 100e0a0:	d0976f44 	addi	r2,gp,23997
 100e0a4:	1885883a 	add	r2,r3,r2
 100e0a8:	10800003 	ldbu	r2,0(r2)
 100e0ac:	1007883a 	mov	r3,r2
 100e0b0:	d0977217 	ldw	r2,24008(gp)
 100e0b4:	10800d43 	ldbu	r2,53(r2)
 100e0b8:	0084303a 	nor	r2,zero,r2
 100e0bc:	1884703a 	and	r2,r3,r2
 100e0c0:	1007883a 	mov	r3,r2
 100e0c4:	d0976f44 	addi	r2,gp,23997
 100e0c8:	2085883a 	add	r2,r4,r2
 100e0cc:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
 100e0d0:	e0fffe03 	ldbu	r3,-8(fp)
 100e0d4:	d0976f44 	addi	r2,gp,23997
 100e0d8:	1885883a 	add	r2,r3,r2
 100e0dc:	10800003 	ldbu	r2,0(r2)
 100e0e0:	10803fcc 	andi	r2,r2,255
 100e0e4:	1004c03a 	cmpne	r2,r2,zero
 100e0e8:	1000071e 	bne	r2,zero,100e108 <OS_EventTaskWait+0x10c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 100e0ec:	d0977217 	ldw	r2,24008(gp)
 100e0f0:	10800d83 	ldbu	r2,54(r2)
 100e0f4:	0084303a 	nor	r2,zero,r2
 100e0f8:	1007883a 	mov	r3,r2
 100e0fc:	d0976f03 	ldbu	r2,23996(gp)
 100e100:	1884703a 	and	r2,r3,r2
 100e104:	d0976f05 	stb	r2,23996(gp)
    }
}
 100e108:	e037883a 	mov	sp,fp
 100e10c:	df000017 	ldw	fp,0(sp)
 100e110:	dec00104 	addi	sp,sp,4
 100e114:	f800283a 	ret

0100e118 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
 100e118:	f811883a 	mov	r8,ra
 100e11c:	100c3d80 	call	100c3d8 <_mcount>
 100e120:	403f883a 	mov	ra,r8
 100e124:	defffb04 	addi	sp,sp,-20
 100e128:	df000415 	stw	fp,16(sp)
 100e12c:	df000404 	addi	fp,sp,16
 100e130:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
 100e134:	d0977217 	ldw	r2,24008(gp)
 100e138:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
 100e13c:	d0d77217 	ldw	r3,24008(gp)
 100e140:	e0bfff17 	ldw	r2,-4(fp)
 100e144:	18800815 	stw	r2,32(r3)

    pevents =  pevents_wait;
 100e148:	e0bfff17 	ldw	r2,-4(fp)
 100e14c:	e0bffe15 	stw	r2,-8(fp)
    pevent  = *pevents;
 100e150:	e0bffe17 	ldw	r2,-8(fp)
 100e154:	10800017 	ldw	r2,0(r2)
 100e158:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 100e15c:	00002006 	br	100e1e0 <OS_EventTaskWaitMulti+0xc8>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
 100e160:	d0977217 	ldw	r2,24008(gp)
 100e164:	10800d03 	ldbu	r2,52(r2)
 100e168:	11003fcc 	andi	r4,r2,255
 100e16c:	d0977217 	ldw	r2,24008(gp)
 100e170:	10800d03 	ldbu	r2,52(r2)
 100e174:	10c03fcc 	andi	r3,r2,255
 100e178:	e0bffd17 	ldw	r2,-12(fp)
 100e17c:	1885883a 	add	r2,r3,r2
 100e180:	10800204 	addi	r2,r2,8
 100e184:	10c000c3 	ldbu	r3,3(r2)
 100e188:	d0977217 	ldw	r2,24008(gp)
 100e18c:	10800d43 	ldbu	r2,53(r2)
 100e190:	1884b03a 	or	r2,r3,r2
 100e194:	1007883a 	mov	r3,r2
 100e198:	e0bffd17 	ldw	r2,-12(fp)
 100e19c:	2085883a 	add	r2,r4,r2
 100e1a0:	10800204 	addi	r2,r2,8
 100e1a4:	10c000c5 	stb	r3,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 100e1a8:	e0bffd17 	ldw	r2,-12(fp)
 100e1ac:	10c00283 	ldbu	r3,10(r2)
 100e1b0:	d0977217 	ldw	r2,24008(gp)
 100e1b4:	10800d83 	ldbu	r2,54(r2)
 100e1b8:	1884b03a 	or	r2,r3,r2
 100e1bc:	1007883a 	mov	r3,r2
 100e1c0:	e0bffd17 	ldw	r2,-12(fp)
 100e1c4:	10c00285 	stb	r3,10(r2)
        pevents++;
 100e1c8:	e0bffe17 	ldw	r2,-8(fp)
 100e1cc:	10800104 	addi	r2,r2,4
 100e1d0:	e0bffe15 	stw	r2,-8(fp)
        pevent = *pevents;
 100e1d4:	e0bffe17 	ldw	r2,-8(fp)
 100e1d8:	10800017 	ldw	r2,0(r2)
 100e1dc:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 100e1e0:	e0bffd17 	ldw	r2,-12(fp)
 100e1e4:	1004c03a 	cmpne	r2,r2,zero
 100e1e8:	103fdd1e 	bne	r2,zero,100e160 <OS_EventTaskWaitMulti+0x48>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 100e1ec:	d0977217 	ldw	r2,24008(gp)
 100e1f0:	10800d03 	ldbu	r2,52(r2)
 100e1f4:	e0bffc05 	stb	r2,-16(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 100e1f8:	e13ffc03 	ldbu	r4,-16(fp)
 100e1fc:	e0fffc03 	ldbu	r3,-16(fp)
 100e200:	d0976f44 	addi	r2,gp,23997
 100e204:	1885883a 	add	r2,r3,r2
 100e208:	10800003 	ldbu	r2,0(r2)
 100e20c:	1007883a 	mov	r3,r2
 100e210:	d0977217 	ldw	r2,24008(gp)
 100e214:	10800d43 	ldbu	r2,53(r2)
 100e218:	0084303a 	nor	r2,zero,r2
 100e21c:	1884703a 	and	r2,r3,r2
 100e220:	1007883a 	mov	r3,r2
 100e224:	d0976f44 	addi	r2,gp,23997
 100e228:	2085883a 	add	r2,r4,r2
 100e22c:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
 100e230:	e0fffc03 	ldbu	r3,-16(fp)
 100e234:	d0976f44 	addi	r2,gp,23997
 100e238:	1885883a 	add	r2,r3,r2
 100e23c:	10800003 	ldbu	r2,0(r2)
 100e240:	10803fcc 	andi	r2,r2,255
 100e244:	1004c03a 	cmpne	r2,r2,zero
 100e248:	1000071e 	bne	r2,zero,100e268 <OS_EventTaskWaitMulti+0x150>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 100e24c:	d0977217 	ldw	r2,24008(gp)
 100e250:	10800d83 	ldbu	r2,54(r2)
 100e254:	0084303a 	nor	r2,zero,r2
 100e258:	1007883a 	mov	r3,r2
 100e25c:	d0976f03 	ldbu	r2,23996(gp)
 100e260:	1884703a 	and	r2,r3,r2
 100e264:	d0976f05 	stb	r2,23996(gp)
    }
}
 100e268:	e037883a 	mov	sp,fp
 100e26c:	df000017 	ldw	fp,0(sp)
 100e270:	dec00104 	addi	sp,sp,4
 100e274:	f800283a 	ret

0100e278 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
 100e278:	f811883a 	mov	r8,ra
 100e27c:	100c3d80 	call	100c3d8 <_mcount>
 100e280:	403f883a 	mov	ra,r8
 100e284:	defffc04 	addi	sp,sp,-16
 100e288:	df000315 	stw	fp,12(sp)
 100e28c:	df000304 	addi	fp,sp,12
 100e290:	e13ffe15 	stw	r4,-8(fp)
 100e294:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
 100e298:	e0bffe17 	ldw	r2,-8(fp)
 100e29c:	10800d03 	ldbu	r2,52(r2)
 100e2a0:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
 100e2a4:	e13ffd03 	ldbu	r4,-12(fp)
 100e2a8:	e0fffd03 	ldbu	r3,-12(fp)
 100e2ac:	e0bfff17 	ldw	r2,-4(fp)
 100e2b0:	1885883a 	add	r2,r3,r2
 100e2b4:	10800204 	addi	r2,r2,8
 100e2b8:	108000c3 	ldbu	r2,3(r2)
 100e2bc:	1007883a 	mov	r3,r2
 100e2c0:	e0bffe17 	ldw	r2,-8(fp)
 100e2c4:	10800d43 	ldbu	r2,53(r2)
 100e2c8:	0084303a 	nor	r2,zero,r2
 100e2cc:	1884703a 	and	r2,r3,r2
 100e2d0:	1007883a 	mov	r3,r2
 100e2d4:	e0bfff17 	ldw	r2,-4(fp)
 100e2d8:	2085883a 	add	r2,r4,r2
 100e2dc:	10800204 	addi	r2,r2,8
 100e2e0:	10c000c5 	stb	r3,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
 100e2e4:	e0fffd03 	ldbu	r3,-12(fp)
 100e2e8:	e0bfff17 	ldw	r2,-4(fp)
 100e2ec:	1885883a 	add	r2,r3,r2
 100e2f0:	10800204 	addi	r2,r2,8
 100e2f4:	108000c3 	ldbu	r2,3(r2)
 100e2f8:	10803fcc 	andi	r2,r2,255
 100e2fc:	1004c03a 	cmpne	r2,r2,zero
 100e300:	10000a1e 	bne	r2,zero,100e32c <OS_EventTaskRemove+0xb4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
 100e304:	e0bfff17 	ldw	r2,-4(fp)
 100e308:	10800283 	ldbu	r2,10(r2)
 100e30c:	1007883a 	mov	r3,r2
 100e310:	e0bffe17 	ldw	r2,-8(fp)
 100e314:	10800d83 	ldbu	r2,54(r2)
 100e318:	0084303a 	nor	r2,zero,r2
 100e31c:	1884703a 	and	r2,r3,r2
 100e320:	1007883a 	mov	r3,r2
 100e324:	e0bfff17 	ldw	r2,-4(fp)
 100e328:	10c00285 	stb	r3,10(r2)
    }
}
 100e32c:	e037883a 	mov	sp,fp
 100e330:	df000017 	ldw	fp,0(sp)
 100e334:	dec00104 	addi	sp,sp,4
 100e338:	f800283a 	ret

0100e33c <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
 100e33c:	f811883a 	mov	r8,ra
 100e340:	100c3d80 	call	100c3d8 <_mcount>
 100e344:	403f883a 	mov	ra,r8
 100e348:	defffa04 	addi	sp,sp,-24
 100e34c:	df000515 	stw	fp,20(sp)
 100e350:	df000504 	addi	fp,sp,20
 100e354:	e13ffe15 	stw	r4,-8(fp)
 100e358:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
 100e35c:	e0bffe17 	ldw	r2,-8(fp)
 100e360:	10800d03 	ldbu	r2,52(r2)
 100e364:	e0bffb85 	stb	r2,-18(fp)
    bity    =  ptcb->OSTCBBitY;
 100e368:	e0bffe17 	ldw	r2,-8(fp)
 100e36c:	10800d83 	ldbu	r2,54(r2)
 100e370:	e0bffb45 	stb	r2,-19(fp)
    bitx    =  ptcb->OSTCBBitX;
 100e374:	e0bffe17 	ldw	r2,-8(fp)
 100e378:	10800d43 	ldbu	r2,53(r2)
 100e37c:	e0bffb05 	stb	r2,-20(fp)
    pevents =  pevents_multi;
 100e380:	e0bfff17 	ldw	r2,-4(fp)
 100e384:	e0bffd15 	stw	r2,-12(fp)
    pevent  = *pevents;
 100e388:	e0bffd17 	ldw	r2,-12(fp)
 100e38c:	10800017 	ldw	r2,0(r2)
 100e390:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 100e394:	00002606 	br	100e430 <OS_EventTaskRemoveMulti+0xf4>
        pevent->OSEventTbl[y]  &= ~bitx;
 100e398:	e13ffb83 	ldbu	r4,-18(fp)
 100e39c:	e0fffb83 	ldbu	r3,-18(fp)
 100e3a0:	e0bffc17 	ldw	r2,-16(fp)
 100e3a4:	1885883a 	add	r2,r3,r2
 100e3a8:	10800204 	addi	r2,r2,8
 100e3ac:	108000c3 	ldbu	r2,3(r2)
 100e3b0:	1007883a 	mov	r3,r2
 100e3b4:	e0bffb03 	ldbu	r2,-20(fp)
 100e3b8:	0084303a 	nor	r2,zero,r2
 100e3bc:	1884703a 	and	r2,r3,r2
 100e3c0:	1007883a 	mov	r3,r2
 100e3c4:	e0bffc17 	ldw	r2,-16(fp)
 100e3c8:	2085883a 	add	r2,r4,r2
 100e3cc:	10800204 	addi	r2,r2,8
 100e3d0:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
 100e3d4:	e0fffb83 	ldbu	r3,-18(fp)
 100e3d8:	e0bffc17 	ldw	r2,-16(fp)
 100e3dc:	1885883a 	add	r2,r3,r2
 100e3e0:	10800204 	addi	r2,r2,8
 100e3e4:	108000c3 	ldbu	r2,3(r2)
 100e3e8:	10803fcc 	andi	r2,r2,255
 100e3ec:	1004c03a 	cmpne	r2,r2,zero
 100e3f0:	1000091e 	bne	r2,zero,100e418 <OS_EventTaskRemoveMulti+0xdc>
            pevent->OSEventGrp &= ~bity;
 100e3f4:	e0bffc17 	ldw	r2,-16(fp)
 100e3f8:	10800283 	ldbu	r2,10(r2)
 100e3fc:	1007883a 	mov	r3,r2
 100e400:	e0bffb43 	ldbu	r2,-19(fp)
 100e404:	0084303a 	nor	r2,zero,r2
 100e408:	1884703a 	and	r2,r3,r2
 100e40c:	1007883a 	mov	r3,r2
 100e410:	e0bffc17 	ldw	r2,-16(fp)
 100e414:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
 100e418:	e0bffd17 	ldw	r2,-12(fp)
 100e41c:	10800104 	addi	r2,r2,4
 100e420:	e0bffd15 	stw	r2,-12(fp)
        pevent = *pevents;
 100e424:	e0bffd17 	ldw	r2,-12(fp)
 100e428:	10800017 	ldw	r2,0(r2)
 100e42c:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 100e430:	e0bffc17 	ldw	r2,-16(fp)
 100e434:	1004c03a 	cmpne	r2,r2,zero
 100e438:	103fd71e 	bne	r2,zero,100e398 <OS_EventTaskRemoveMulti+0x5c>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
 100e43c:	e037883a 	mov	sp,fp
 100e440:	df000017 	ldw	fp,0(sp)
 100e444:	dec00104 	addi	sp,sp,4
 100e448:	f800283a 	ret

0100e44c <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
 100e44c:	f811883a 	mov	r8,ra
 100e450:	100c3d80 	call	100c3d8 <_mcount>
 100e454:	403f883a 	mov	ra,r8
 100e458:	defffc04 	addi	sp,sp,-16
 100e45c:	df000315 	stw	fp,12(sp)
 100e460:	df000304 	addi	fp,sp,12
 100e464:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
 100e468:	e0bfff17 	ldw	r2,-4(fp)
 100e46c:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
 100e470:	e0bfff17 	ldw	r2,-4(fp)
 100e474:	108002c4 	addi	r2,r2,11
 100e478:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 100e47c:	e03ffd05 	stb	zero,-12(fp)
 100e480:	00000806 	br	100e4a4 <OS_EventWaitListInit+0x58>
        *ptbl++ = 0;
 100e484:	e0bffe17 	ldw	r2,-8(fp)
 100e488:	10000005 	stb	zero,0(r2)
 100e48c:	e0bffe17 	ldw	r2,-8(fp)
 100e490:	10800044 	addi	r2,r2,1
 100e494:	e0bffe15 	stw	r2,-8(fp)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 100e498:	e0bffd03 	ldbu	r2,-12(fp)
 100e49c:	10800044 	addi	r2,r2,1
 100e4a0:	e0bffd05 	stb	r2,-12(fp)
 100e4a4:	e0bffd03 	ldbu	r2,-12(fp)
 100e4a8:	108000f0 	cmpltui	r2,r2,3
 100e4ac:	103ff51e 	bne	r2,zero,100e484 <OS_EventWaitListInit+0x38>
        *ptbl++ = 0;
    }
}
 100e4b0:	e037883a 	mov	sp,fp
 100e4b4:	df000017 	ldw	fp,0(sp)
 100e4b8:	dec00104 	addi	sp,sp,4
 100e4bc:	f800283a 	ret

0100e4c0 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
 100e4c0:	f811883a 	mov	r8,ra
 100e4c4:	100c3d80 	call	100c3d8 <_mcount>
 100e4c8:	403f883a 	mov	ra,r8
 100e4cc:	defffb04 	addi	sp,sp,-20
 100e4d0:	dfc00415 	stw	ra,16(sp)
 100e4d4:	df000315 	stw	fp,12(sp)
 100e4d8:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
 100e4dc:	01004174 	movhi	r4,261
 100e4e0:	2122d004 	addi	r4,r4,-29888
 100e4e4:	0142d004 	movi	r5,2880
 100e4e8:	100e86c0 	call	100e86c <OS_MemClr>
    pevent1 = &OSEventTbl[0];
 100e4ec:	00804174 	movhi	r2,261
 100e4f0:	10a2d004 	addi	r2,r2,-29888
 100e4f4:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
 100e4f8:	00804174 	movhi	r2,261
 100e4fc:	10a2dc04 	addi	r2,r2,-29840
 100e500:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 100e504:	e03fff0d 	sth	zero,-4(fp)
 100e508:	00001306 	br	100e558 <OS_InitEventList+0x98>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
 100e50c:	e0bffe17 	ldw	r2,-8(fp)
 100e510:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
 100e514:	e0fffe17 	ldw	r3,-8(fp)
 100e518:	e0bffd17 	ldw	r2,-12(fp)
 100e51c:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
 100e520:	e0fffe17 	ldw	r3,-8(fp)
 100e524:	00800fc4 	movi	r2,63
 100e528:	18800385 	stb	r2,14(r3)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
 100e52c:	e0bffe17 	ldw	r2,-8(fp)
 100e530:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
 100e534:	e0bffe17 	ldw	r2,-8(fp)
 100e538:	10800c04 	addi	r2,r2,48
 100e53c:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
 100e540:	e0bffd17 	ldw	r2,-12(fp)
 100e544:	10800c04 	addi	r2,r2,48
 100e548:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 100e54c:	e0bfff0b 	ldhu	r2,-4(fp)
 100e550:	10800044 	addi	r2,r2,1
 100e554:	e0bfff0d 	sth	r2,-4(fp)
 100e558:	e0bfff0b 	ldhu	r2,-4(fp)
 100e55c:	10800ef0 	cmpltui	r2,r2,59
 100e560:	103fea1e 	bne	r2,zero,100e50c <OS_InitEventList+0x4c>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
 100e564:	e0bffe17 	ldw	r2,-8(fp)
 100e568:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
 100e56c:	e0bffe17 	ldw	r2,-8(fp)
 100e570:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
 100e574:	e0fffe17 	ldw	r3,-8(fp)
 100e578:	00800fc4 	movi	r2,63
 100e57c:	18800385 	stb	r2,14(r3)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
 100e580:	e0bffe17 	ldw	r2,-8(fp)
 100e584:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
 100e588:	00804174 	movhi	r2,261
 100e58c:	10a2d004 	addi	r2,r2,-29888
 100e590:	d0977015 	stw	r2,24000(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
 100e594:	e037883a 	mov	sp,fp
 100e598:	dfc00117 	ldw	ra,4(sp)
 100e59c:	df000017 	ldw	fp,0(sp)
 100e5a0:	dec00204 	addi	sp,sp,8
 100e5a4:	f800283a 	ret

0100e5a8 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
 100e5a8:	f811883a 	mov	r8,ra
 100e5ac:	100c3d80 	call	100c3d8 <_mcount>
 100e5b0:	403f883a 	mov	ra,r8
 100e5b4:	deffff04 	addi	sp,sp,-4
 100e5b8:	df000015 	stw	fp,0(sp)
 100e5bc:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
 100e5c0:	d0177415 	stw	zero,24016(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
 100e5c4:	d0177105 	stb	zero,24004(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
 100e5c8:	d0176005 	stb	zero,23936(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
 100e5cc:	d0176b45 	stb	zero,23981(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
 100e5d0:	d0176205 	stb	zero,23944(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
 100e5d4:	d0176715 	stw	zero,23964(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
 100e5d8:	d0176315 	stw	zero,23948(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
 100e5dc:	d0177815 	stw	zero,24032(gp)
    OSIdleCtrMax  = 0L;
 100e5e0:	d0176915 	stw	zero,23972(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
 100e5e4:	d0177705 	stb	zero,24028(gp)
#endif
}
 100e5e8:	e037883a 	mov	sp,fp
 100e5ec:	df000017 	ldw	fp,0(sp)
 100e5f0:	dec00104 	addi	sp,sp,4
 100e5f4:	f800283a 	ret

0100e5f8 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
 100e5f8:	f811883a 	mov	r8,ra
 100e5fc:	100c3d80 	call	100c3d8 <_mcount>
 100e600:	403f883a 	mov	ra,r8
 100e604:	defffd04 	addi	sp,sp,-12
 100e608:	df000215 	stw	fp,8(sp)
 100e60c:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
 100e610:	d0176f05 	stb	zero,23996(gp)
    prdytbl       = &OSRdyTbl[0];
 100e614:	d0976f44 	addi	r2,gp,23997
 100e618:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 100e61c:	e03fff05 	stb	zero,-4(fp)
 100e620:	00000806 	br	100e644 <OS_InitRdyList+0x4c>
        *prdytbl++ = 0;
 100e624:	e0bffe17 	ldw	r2,-8(fp)
 100e628:	10000005 	stb	zero,0(r2)
 100e62c:	e0bffe17 	ldw	r2,-8(fp)
 100e630:	10800044 	addi	r2,r2,1
 100e634:	e0bffe15 	stw	r2,-8(fp)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 100e638:	e0bfff03 	ldbu	r2,-4(fp)
 100e63c:	10800044 	addi	r2,r2,1
 100e640:	e0bfff05 	stb	r2,-4(fp)
 100e644:	e0bfff03 	ldbu	r2,-4(fp)
 100e648:	108000f0 	cmpltui	r2,r2,3
 100e64c:	103ff51e 	bne	r2,zero,100e624 <OS_InitRdyList+0x2c>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
 100e650:	d01764c5 	stb	zero,23955(gp)
    OSPrioHighRdy = 0;
 100e654:	d0176485 	stb	zero,23954(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
 100e658:	d0176d15 	stw	zero,23988(gp)
    OSTCBCur      = (OS_TCB *)0;
 100e65c:	d0177215 	stw	zero,24008(gp)
}
 100e660:	e037883a 	mov	sp,fp
 100e664:	df000017 	ldw	fp,0(sp)
 100e668:	dec00104 	addi	sp,sp,4
 100e66c:	f800283a 	ret

0100e670 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
 100e670:	f811883a 	mov	r8,ra
 100e674:	100c3d80 	call	100c3d8 <_mcount>
 100e678:	403f883a 	mov	ra,r8
 100e67c:	defff804 	addi	sp,sp,-32
 100e680:	dfc00715 	stw	ra,28(sp)
 100e684:	df000615 	stw	fp,24(sp)
 100e688:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
 100e68c:	01804174 	movhi	r6,261
 100e690:	31a2cf04 	addi	r6,r6,-29892
 100e694:	00bfffd4 	movui	r2,65535
 100e698:	d8800015 	stw	r2,0(sp)
 100e69c:	00804174 	movhi	r2,261
 100e6a0:	10a0d004 	addi	r2,r2,-31936
 100e6a4:	d8800115 	stw	r2,4(sp)
 100e6a8:	00808004 	movi	r2,512
 100e6ac:	d8800215 	stw	r2,8(sp)
 100e6b0:	d8000315 	stw	zero,12(sp)
 100e6b4:	008000c4 	movi	r2,3
 100e6b8:	d8800415 	stw	r2,16(sp)
 100e6bc:	01004074 	movhi	r4,257
 100e6c0:	213ae404 	addi	r4,r4,-5232
 100e6c4:	000b883a 	mov	r5,zero
 100e6c8:	01c00504 	movi	r7,20
 100e6cc:	1013bfc0 	call	1013bfc <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
 100e6d0:	014040b4 	movhi	r5,258
 100e6d4:	2968b204 	addi	r5,r5,-23864
 100e6d8:	01000504 	movi	r4,20
 100e6dc:	e1bfff04 	addi	r6,fp,-4
 100e6e0:	10145600 	call	1014560 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
 100e6e4:	e037883a 	mov	sp,fp
 100e6e8:	dfc00117 	ldw	ra,4(sp)
 100e6ec:	df000017 	ldw	fp,0(sp)
 100e6f0:	dec00204 	addi	sp,sp,8
 100e6f4:	f800283a 	ret

0100e6f8 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
 100e6f8:	f811883a 	mov	r8,ra
 100e6fc:	100c3d80 	call	100c3d8 <_mcount>
 100e700:	403f883a 	mov	ra,r8
 100e704:	defff804 	addi	sp,sp,-32
 100e708:	dfc00715 	stw	ra,28(sp)
 100e70c:	df000615 	stw	fp,24(sp)
 100e710:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
 100e714:	01804134 	movhi	r6,260
 100e718:	319e5704 	addi	r6,r6,31068
 100e71c:	00bfff94 	movui	r2,65534
 100e720:	d8800015 	stw	r2,0(sp)
 100e724:	00804134 	movhi	r2,260
 100e728:	109c5804 	addi	r2,r2,29024
 100e72c:	d8800115 	stw	r2,4(sp)
 100e730:	00808004 	movi	r2,512
 100e734:	d8800215 	stw	r2,8(sp)
 100e738:	d8000315 	stw	zero,12(sp)
 100e73c:	008000c4 	movi	r2,3
 100e740:	d8800415 	stw	r2,16(sp)
 100e744:	01004074 	movhi	r4,257
 100e748:	213afe04 	addi	r4,r4,-5128
 100e74c:	000b883a 	mov	r5,zero
 100e750:	01c004c4 	movi	r7,19
 100e754:	1013bfc0 	call	1013bfc <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
 100e758:	014040b4 	movhi	r5,258
 100e75c:	2968b604 	addi	r5,r5,-23848
 100e760:	010004c4 	movi	r4,19
 100e764:	e1bfff04 	addi	r6,fp,-4
 100e768:	10145600 	call	1014560 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
 100e76c:	e037883a 	mov	sp,fp
 100e770:	dfc00117 	ldw	ra,4(sp)
 100e774:	df000017 	ldw	fp,0(sp)
 100e778:	dec00204 	addi	sp,sp,8
 100e77c:	f800283a 	ret

0100e780 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
 100e780:	f811883a 	mov	r8,ra
 100e784:	100c3d80 	call	100c3d8 <_mcount>
 100e788:	403f883a 	mov	ra,r8
 100e78c:	defffb04 	addi	sp,sp,-20
 100e790:	dfc00415 	stw	ra,16(sp)
 100e794:	df000315 	stw	fp,12(sp)
 100e798:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
 100e79c:	01004174 	movhi	r4,261
 100e7a0:	2125a004 	addi	r4,r4,-27008
 100e7a4:	01414404 	movi	r5,1296
 100e7a8:	100e86c0 	call	100e86c <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
 100e7ac:	01004174 	movhi	r4,261
 100e7b0:	2126e404 	addi	r4,r4,-25712
 100e7b4:	01401504 	movi	r5,84
 100e7b8:	100e86c0 	call	100e86c <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
 100e7bc:	00804174 	movhi	r2,261
 100e7c0:	10a5a004 	addi	r2,r2,-27008
 100e7c4:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
 100e7c8:	00804174 	movhi	r2,261
 100e7cc:	10a5bb04 	addi	r2,r2,-26900
 100e7d0:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 100e7d4:	e03fff05 	stb	zero,-4(fp)
 100e7d8:	00001106 	br	100e820 <OS_InitTCBList+0xa0>
        ptcb1->OSTCBNext = ptcb2;
 100e7dc:	e0fffe17 	ldw	r3,-8(fp)
 100e7e0:	e0bffd17 	ldw	r2,-12(fp)
 100e7e4:	18800515 	stw	r2,20(r3)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
 100e7e8:	e0fffe17 	ldw	r3,-8(fp)
 100e7ec:	00800fc4 	movi	r2,63
 100e7f0:	18801305 	stb	r2,76(r3)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 100e7f4:	e0bffe17 	ldw	r2,-8(fp)
 100e7f8:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
 100e7fc:	e0bffe17 	ldw	r2,-8(fp)
 100e800:	10801b04 	addi	r2,r2,108
 100e804:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
 100e808:	e0bffd17 	ldw	r2,-12(fp)
 100e80c:	10801b04 	addi	r2,r2,108
 100e810:	e0bffd15 	stw	r2,-12(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 100e814:	e0bfff03 	ldbu	r2,-4(fp)
 100e818:	10800044 	addi	r2,r2,1
 100e81c:	e0bfff05 	stb	r2,-4(fp)
 100e820:	e0bfff03 	ldbu	r2,-4(fp)
 100e824:	108002f0 	cmpltui	r2,r2,11
 100e828:	103fec1e 	bne	r2,zero,100e7dc <OS_InitTCBList+0x5c>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
 100e82c:	e0bffe17 	ldw	r2,-8(fp)
 100e830:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
 100e834:	e0fffe17 	ldw	r3,-8(fp)
 100e838:	00800fc4 	movi	r2,63
 100e83c:	18801305 	stb	r2,76(r3)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 100e840:	e0bffe17 	ldw	r2,-8(fp)
 100e844:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
 100e848:	d0176515 	stw	zero,23956(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
 100e84c:	00804174 	movhi	r2,261
 100e850:	10a5a004 	addi	r2,r2,-27008
 100e854:	d0976a15 	stw	r2,23976(gp)
}
 100e858:	e037883a 	mov	sp,fp
 100e85c:	dfc00117 	ldw	ra,4(sp)
 100e860:	df000017 	ldw	fp,0(sp)
 100e864:	dec00204 	addi	sp,sp,8
 100e868:	f800283a 	ret

0100e86c <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
 100e86c:	f811883a 	mov	r8,ra
 100e870:	100c3d80 	call	100c3d8 <_mcount>
 100e874:	403f883a 	mov	ra,r8
 100e878:	defffd04 	addi	sp,sp,-12
 100e87c:	df000215 	stw	fp,8(sp)
 100e880:	df000204 	addi	fp,sp,8
 100e884:	e13ffe15 	stw	r4,-8(fp)
 100e888:	e17fff0d 	sth	r5,-4(fp)
    while (size > 0) {
 100e88c:	00000806 	br	100e8b0 <OS_MemClr+0x44>
        *pdest++ = (INT8U)0;
 100e890:	e0bffe17 	ldw	r2,-8(fp)
 100e894:	10000005 	stb	zero,0(r2)
 100e898:	e0bffe17 	ldw	r2,-8(fp)
 100e89c:	10800044 	addi	r2,r2,1
 100e8a0:	e0bffe15 	stw	r2,-8(fp)
        size--;
 100e8a4:	e0bfff0b 	ldhu	r2,-4(fp)
 100e8a8:	10bfffc4 	addi	r2,r2,-1
 100e8ac:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
 100e8b0:	e0bfff0b 	ldhu	r2,-4(fp)
 100e8b4:	1004c03a 	cmpne	r2,r2,zero
 100e8b8:	103ff51e 	bne	r2,zero,100e890 <OS_MemClr+0x24>
        *pdest++ = (INT8U)0;
        size--;
    }
}
 100e8bc:	e037883a 	mov	sp,fp
 100e8c0:	df000017 	ldw	fp,0(sp)
 100e8c4:	dec00104 	addi	sp,sp,4
 100e8c8:	f800283a 	ret

0100e8cc <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
 100e8cc:	f811883a 	mov	r8,ra
 100e8d0:	100c3d80 	call	100c3d8 <_mcount>
 100e8d4:	403f883a 	mov	ra,r8
 100e8d8:	defffc04 	addi	sp,sp,-16
 100e8dc:	df000315 	stw	fp,12(sp)
 100e8e0:	df000304 	addi	fp,sp,12
 100e8e4:	e13ffd15 	stw	r4,-12(fp)
 100e8e8:	e17ffe15 	stw	r5,-8(fp)
 100e8ec:	e1bfff0d 	sth	r6,-4(fp)
    while (size > 0) {
 100e8f0:	00000d06 	br	100e928 <OS_MemCopy+0x5c>
        *pdest++ = *psrc++;
 100e8f4:	e0bffe17 	ldw	r2,-8(fp)
 100e8f8:	10c00003 	ldbu	r3,0(r2)
 100e8fc:	e0bffd17 	ldw	r2,-12(fp)
 100e900:	10c00005 	stb	r3,0(r2)
 100e904:	e0bffd17 	ldw	r2,-12(fp)
 100e908:	10800044 	addi	r2,r2,1
 100e90c:	e0bffd15 	stw	r2,-12(fp)
 100e910:	e0bffe17 	ldw	r2,-8(fp)
 100e914:	10800044 	addi	r2,r2,1
 100e918:	e0bffe15 	stw	r2,-8(fp)
        size--;
 100e91c:	e0bfff0b 	ldhu	r2,-4(fp)
 100e920:	10bfffc4 	addi	r2,r2,-1
 100e924:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
 100e928:	e0bfff0b 	ldhu	r2,-4(fp)
 100e92c:	1004c03a 	cmpne	r2,r2,zero
 100e930:	103ff01e 	bne	r2,zero,100e8f4 <OS_MemCopy+0x28>
        *pdest++ = *psrc++;
        size--;
    }
}
 100e934:	e037883a 	mov	sp,fp
 100e938:	df000017 	ldw	fp,0(sp)
 100e93c:	dec00104 	addi	sp,sp,4
 100e940:	f800283a 	ret

0100e944 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
 100e944:	f811883a 	mov	r8,ra
 100e948:	100c3d80 	call	100c3d8 <_mcount>
 100e94c:	403f883a 	mov	ra,r8
 100e950:	defffb04 	addi	sp,sp,-20
 100e954:	dfc00415 	stw	ra,16(sp)
 100e958:	df000315 	stw	fp,12(sp)
 100e95c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 100e960:	e03fff15 	stw	zero,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100e964:	0005303a 	rdctl	r2,status
 100e968:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100e96c:	e0fffe17 	ldw	r3,-8(fp)
 100e970:	00bfff84 	movi	r2,-2
 100e974:	1884703a 	and	r2,r3,r2
 100e978:	1001703a 	wrctl	status,r2
  
  return context;
 100e97c:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
 100e980:	e0bfff15 	stw	r2,-4(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
 100e984:	d0977103 	ldbu	r2,24004(gp)
 100e988:	10803fcc 	andi	r2,r2,255
 100e98c:	1004c03a 	cmpne	r2,r2,zero
 100e990:	10001b1e 	bne	r2,zero,100ea00 <OS_Sched+0xbc>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
 100e994:	d0976003 	ldbu	r2,23936(gp)
 100e998:	10803fcc 	andi	r2,r2,255
 100e99c:	1004c03a 	cmpne	r2,r2,zero
 100e9a0:	1000171e 	bne	r2,zero,100ea00 <OS_Sched+0xbc>
            OS_SchedNew();
 100e9a4:	100ea240 	call	100ea24 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
 100e9a8:	d0976483 	ldbu	r2,23954(gp)
 100e9ac:	d0d764c3 	ldbu	r3,23955(gp)
 100e9b0:	11003fcc 	andi	r4,r2,255
 100e9b4:	18803fcc 	andi	r2,r3,255
 100e9b8:	20801126 	beq	r4,r2,100ea00 <OS_Sched+0xbc>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 100e9bc:	d0976483 	ldbu	r2,23954(gp)
 100e9c0:	10803fcc 	andi	r2,r2,255
 100e9c4:	00c04174 	movhi	r3,261
 100e9c8:	18e6e404 	addi	r3,r3,-25712
 100e9cc:	1085883a 	add	r2,r2,r2
 100e9d0:	1085883a 	add	r2,r2,r2
 100e9d4:	10c5883a 	add	r2,r2,r3
 100e9d8:	10800017 	ldw	r2,0(r2)
 100e9dc:	d0976d15 	stw	r2,23988(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
 100e9e0:	d0d76d17 	ldw	r3,23988(gp)
 100e9e4:	18800e17 	ldw	r2,56(r3)
 100e9e8:	10800044 	addi	r2,r2,1
 100e9ec:	18800e15 	stw	r2,56(r3)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
 100e9f0:	d0976717 	ldw	r2,23964(gp)
 100e9f4:	10800044 	addi	r2,r2,1
 100e9f8:	d0976715 	stw	r2,23964(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
 100e9fc:	10190700 	call	1019070 <OSCtxSw>
 100ea00:	e0bfff17 	ldw	r2,-4(fp)
 100ea04:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100ea08:	e0bffd17 	ldw	r2,-12(fp)
 100ea0c:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
 100ea10:	e037883a 	mov	sp,fp
 100ea14:	dfc00117 	ldw	ra,4(sp)
 100ea18:	df000017 	ldw	fp,0(sp)
 100ea1c:	dec00204 	addi	sp,sp,8
 100ea20:	f800283a 	ret

0100ea24 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
 100ea24:	f811883a 	mov	r8,ra
 100ea28:	100c3d80 	call	100c3d8 <_mcount>
 100ea2c:	403f883a 	mov	ra,r8
 100ea30:	defffe04 	addi	sp,sp,-8
 100ea34:	df000115 	stw	fp,4(sp)
 100ea38:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
 100ea3c:	d0976f03 	ldbu	r2,23996(gp)
 100ea40:	10c03fcc 	andi	r3,r2,255
 100ea44:	008040b4 	movhi	r2,258
 100ea48:	10a87204 	addi	r2,r2,-24120
 100ea4c:	10c5883a 	add	r2,r2,r3
 100ea50:	10800003 	ldbu	r2,0(r2)
 100ea54:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
 100ea58:	e0bfff03 	ldbu	r2,-4(fp)
 100ea5c:	100490fa 	slli	r2,r2,3
 100ea60:	1009883a 	mov	r4,r2
 100ea64:	e0ffff03 	ldbu	r3,-4(fp)
 100ea68:	d0976f44 	addi	r2,gp,23997
 100ea6c:	1885883a 	add	r2,r3,r2
 100ea70:	10800003 	ldbu	r2,0(r2)
 100ea74:	10c03fcc 	andi	r3,r2,255
 100ea78:	008040b4 	movhi	r2,258
 100ea7c:	10a87204 	addi	r2,r2,-24120
 100ea80:	10c5883a 	add	r2,r2,r3
 100ea84:	10800003 	ldbu	r2,0(r2)
 100ea88:	2085883a 	add	r2,r4,r2
 100ea8c:	d0976485 	stb	r2,23954(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
 100ea90:	e037883a 	mov	sp,fp
 100ea94:	df000017 	ldw	fp,0(sp)
 100ea98:	dec00104 	addi	sp,sp,4
 100ea9c:	f800283a 	ret

0100eaa0 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
 100eaa0:	f811883a 	mov	r8,ra
 100eaa4:	100c3d80 	call	100c3d8 <_mcount>
 100eaa8:	403f883a 	mov	ra,r8
 100eaac:	defffc04 	addi	sp,sp,-16
 100eab0:	df000315 	stw	fp,12(sp)
 100eab4:	df000304 	addi	fp,sp,12
 100eab8:	e13ffe15 	stw	r4,-8(fp)
 100eabc:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
 100eac0:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
 100eac4:	00000d06 	br	100eafc <OS_StrCopy+0x5c>
        *pdest++ = *psrc++;
 100eac8:	e0bfff17 	ldw	r2,-4(fp)
 100eacc:	10c00003 	ldbu	r3,0(r2)
 100ead0:	e0bffe17 	ldw	r2,-8(fp)
 100ead4:	10c00005 	stb	r3,0(r2)
 100ead8:	e0bffe17 	ldw	r2,-8(fp)
 100eadc:	10800044 	addi	r2,r2,1
 100eae0:	e0bffe15 	stw	r2,-8(fp)
 100eae4:	e0bfff17 	ldw	r2,-4(fp)
 100eae8:	10800044 	addi	r2,r2,1
 100eaec:	e0bfff15 	stw	r2,-4(fp)
        len++;
 100eaf0:	e0bffd03 	ldbu	r2,-12(fp)
 100eaf4:	10800044 	addi	r2,r2,1
 100eaf8:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 100eafc:	e0bfff17 	ldw	r2,-4(fp)
 100eb00:	10800003 	ldbu	r2,0(r2)
 100eb04:	10803fcc 	andi	r2,r2,255
 100eb08:	1004c03a 	cmpne	r2,r2,zero
 100eb0c:	103fee1e 	bne	r2,zero,100eac8 <OS_StrCopy+0x28>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
 100eb10:	e0bffe17 	ldw	r2,-8(fp)
 100eb14:	10000005 	stb	zero,0(r2)
    return (len);
 100eb18:	e0bffd03 	ldbu	r2,-12(fp)
}
 100eb1c:	e037883a 	mov	sp,fp
 100eb20:	df000017 	ldw	fp,0(sp)
 100eb24:	dec00104 	addi	sp,sp,4
 100eb28:	f800283a 	ret

0100eb2c <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
 100eb2c:	f811883a 	mov	r8,ra
 100eb30:	100c3d80 	call	100c3d8 <_mcount>
 100eb34:	403f883a 	mov	ra,r8
 100eb38:	defffd04 	addi	sp,sp,-12
 100eb3c:	df000215 	stw	fp,8(sp)
 100eb40:	df000204 	addi	fp,sp,8
 100eb44:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
 100eb48:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
 100eb4c:	00000606 	br	100eb68 <OS_StrLen+0x3c>
        psrc++;
 100eb50:	e0bfff17 	ldw	r2,-4(fp)
 100eb54:	10800044 	addi	r2,r2,1
 100eb58:	e0bfff15 	stw	r2,-4(fp)
        len++;
 100eb5c:	e0bffe03 	ldbu	r2,-8(fp)
 100eb60:	10800044 	addi	r2,r2,1
 100eb64:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 100eb68:	e0bfff17 	ldw	r2,-4(fp)
 100eb6c:	10800003 	ldbu	r2,0(r2)
 100eb70:	10803fcc 	andi	r2,r2,255
 100eb74:	1004c03a 	cmpne	r2,r2,zero
 100eb78:	103ff51e 	bne	r2,zero,100eb50 <OS_StrLen+0x24>
        psrc++;
        len++;
    }
    return (len);
 100eb7c:	e0bffe03 	ldbu	r2,-8(fp)
}
 100eb80:	e037883a 	mov	sp,fp
 100eb84:	df000017 	ldw	fp,0(sp)
 100eb88:	dec00104 	addi	sp,sp,4
 100eb8c:	f800283a 	ret

0100eb90 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
 100eb90:	f811883a 	mov	r8,ra
 100eb94:	100c3d80 	call	100c3d8 <_mcount>
 100eb98:	403f883a 	mov	ra,r8
 100eb9c:	defffa04 	addi	sp,sp,-24
 100eba0:	dfc00515 	stw	ra,20(sp)
 100eba4:	df000415 	stw	fp,16(sp)
 100eba8:	df000404 	addi	fp,sp,16
 100ebac:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 100ebb0:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100ebb4:	0005303a 	rdctl	r2,status
 100ebb8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100ebbc:	e0fffd17 	ldw	r3,-12(fp)
 100ebc0:	00bfff84 	movi	r2,-2
 100ebc4:	1884703a 	and	r2,r3,r2
 100ebc8:	1001703a 	wrctl	status,r2
  
  return context;
 100ebcc:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
 100ebd0:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtr++;
 100ebd4:	d0976317 	ldw	r2,23948(gp)
 100ebd8:	10800044 	addi	r2,r2,1
 100ebdc:	d0976315 	stw	r2,23948(gp)
 100ebe0:	e0bffe17 	ldw	r2,-8(fp)
 100ebe4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100ebe8:	e0bffc17 	ldw	r2,-16(fp)
 100ebec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
 100ebf0:	10195d00 	call	10195d0 <OSTaskIdleHook>
    }
 100ebf4:	003fef06 	br	100ebb4 <OS_TaskIdle+0x24>

0100ebf8 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
 100ebf8:	f811883a 	mov	r8,ra
 100ebfc:	100c3d80 	call	100c3d8 <_mcount>
 100ec00:	403f883a 	mov	ra,r8
 100ec04:	defffa04 	addi	sp,sp,-24
 100ec08:	dfc00515 	stw	ra,20(sp)
 100ec0c:	df000415 	stw	fp,16(sp)
 100ec10:	df000404 	addi	fp,sp,16
 100ec14:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 100ec18:	e03ffe15 	stw	zero,-8(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 100ec1c:	00000206 	br	100ec28 <OS_TaskStat+0x30>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
 100ec20:	01003204 	movi	r4,200
 100ec24:	1014f6c0 	call	1014f6c <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 100ec28:	d0977703 	ldbu	r2,24028(gp)
 100ec2c:	10803fcc 	andi	r2,r2,255
 100ec30:	1005003a 	cmpeq	r2,r2,zero
 100ec34:	103ffa1e 	bne	r2,zero,100ec20 <OS_TaskStat+0x28>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
 100ec38:	d1176917 	ldw	r4,23972(gp)
 100ec3c:	01401904 	movi	r5,100
 100ec40:	10026400 	call	1002640 <__udivsi3>
 100ec44:	d0976915 	stw	r2,23972(gp)
    if (OSIdleCtrMax == 0L) {
 100ec48:	d0976917 	ldw	r2,23972(gp)
 100ec4c:	1004c03a 	cmpne	r2,r2,zero
 100ec50:	1000031e 	bne	r2,zero,100ec60 <OS_TaskStat+0x68>
        OSCPUUsage = 0;
 100ec54:	d0176b05 	stb	zero,23980(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
 100ec58:	01003fc4 	movi	r4,255
 100ec5c:	1014b5c0 	call	1014b5c <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100ec60:	0005303a 	rdctl	r2,status
 100ec64:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100ec68:	e0fffd17 	ldw	r3,-12(fp)
 100ec6c:	00bfff84 	movi	r2,-2
 100ec70:	1884703a 	and	r2,r3,r2
 100ec74:	1001703a 	wrctl	status,r2
  
  return context;
 100ec78:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
 100ec7c:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
 100ec80:	d0976317 	ldw	r2,23948(gp)
 100ec84:	d0977815 	stw	r2,24032(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
 100ec88:	d0176315 	stw	zero,23948(gp)
 100ec8c:	e0bffe17 	ldw	r2,-8(fp)
 100ec90:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100ec94:	e0bffc17 	ldw	r2,-16(fp)
 100ec98:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
 100ec9c:	d1177817 	ldw	r4,24032(gp)
 100eca0:	d1576917 	ldw	r5,23972(gp)
 100eca4:	10026400 	call	1002640 <__udivsi3>
 100eca8:	1007883a 	mov	r3,r2
 100ecac:	00801904 	movi	r2,100
 100ecb0:	10c5c83a 	sub	r2,r2,r3
 100ecb4:	d0976b05 	stb	r2,23980(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
 100ecb8:	10194dc0 	call	10194dc <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
 100ecbc:	100eccc0 	call	100eccc <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
 100ecc0:	01001904 	movi	r4,100
 100ecc4:	1014f6c0 	call	1014f6c <OSTimeDly>
    }
 100ecc8:	003fe506 	br	100ec60 <OS_TaskStat+0x68>

0100eccc <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
 100eccc:	f811883a 	mov	r8,ra
 100ecd0:	100c3d80 	call	100c3d8 <_mcount>
 100ecd4:	403f883a 	mov	ra,r8
 100ecd8:	defffa04 	addi	sp,sp,-24
 100ecdc:	dfc00515 	stw	ra,20(sp)
 100ece0:	df000415 	stw	fp,16(sp)
 100ece4:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 100ece8:	e03ffc05 	stb	zero,-16(fp)
 100ecec:	00002406 	br	100ed80 <OS_TaskStatStkChk+0xb4>
        err = OSTaskStkChk(prio, &stk_data);
 100ecf0:	e13ffc03 	ldbu	r4,-16(fp)
 100ecf4:	e17ffe04 	addi	r5,fp,-8
 100ecf8:	10149540 	call	1014954 <OSTaskStkChk>
 100ecfc:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
 100ed00:	e0bffc43 	ldbu	r2,-15(fp)
 100ed04:	1004c03a 	cmpne	r2,r2,zero
 100ed08:	10001a1e 	bne	r2,zero,100ed74 <OS_TaskStatStkChk+0xa8>
            ptcb = OSTCBPrioTbl[prio];
 100ed0c:	e0bffc03 	ldbu	r2,-16(fp)
 100ed10:	00c04174 	movhi	r3,261
 100ed14:	18e6e404 	addi	r3,r3,-25712
 100ed18:	1085883a 	add	r2,r2,r2
 100ed1c:	1085883a 	add	r2,r2,r2
 100ed20:	10c5883a 	add	r2,r2,r3
 100ed24:	10800017 	ldw	r2,0(r2)
 100ed28:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
 100ed2c:	e0bffd17 	ldw	r2,-12(fp)
 100ed30:	1005003a 	cmpeq	r2,r2,zero
 100ed34:	10000f1e 	bne	r2,zero,100ed74 <OS_TaskStatStkChk+0xa8>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
 100ed38:	e0bffd17 	ldw	r2,-12(fp)
 100ed3c:	10800060 	cmpeqi	r2,r2,1
 100ed40:	10000c1e 	bne	r2,zero,100ed74 <OS_TaskStatStkChk+0xa8>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
 100ed44:	e0bffd17 	ldw	r2,-12(fp)
 100ed48:	10c00217 	ldw	r3,8(r2)
 100ed4c:	e0bffd17 	ldw	r2,-12(fp)
 100ed50:	10800317 	ldw	r2,12(r2)
 100ed54:	1085883a 	add	r2,r2,r2
 100ed58:	1085883a 	add	r2,r2,r2
 100ed5c:	1887883a 	add	r3,r3,r2
 100ed60:	e0bffd17 	ldw	r2,-12(fp)
 100ed64:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
 100ed68:	e0ffff17 	ldw	r3,-4(fp)
 100ed6c:	e0bffd17 	ldw	r2,-12(fp)
 100ed70:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 100ed74:	e0bffc03 	ldbu	r2,-16(fp)
 100ed78:	10800044 	addi	r2,r2,1
 100ed7c:	e0bffc05 	stb	r2,-16(fp)
 100ed80:	e0bffc03 	ldbu	r2,-16(fp)
 100ed84:	10800570 	cmpltui	r2,r2,21
 100ed88:	103fd91e 	bne	r2,zero,100ecf0 <OS_TaskStatStkChk+0x24>
#endif
                }
            }
        }
    }
}
 100ed8c:	e037883a 	mov	sp,fp
 100ed90:	dfc00117 	ldw	ra,4(sp)
 100ed94:	df000017 	ldw	fp,0(sp)
 100ed98:	dec00204 	addi	sp,sp,8
 100ed9c:	f800283a 	ret

0100eda0 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
 100eda0:	f811883a 	mov	r8,ra
 100eda4:	100c3d80 	call	100c3d8 <_mcount>
 100eda8:	403f883a 	mov	ra,r8
 100edac:	defff104 	addi	sp,sp,-60
 100edb0:	dfc00e15 	stw	ra,56(sp)
 100edb4:	df000d15 	stw	fp,52(sp)
 100edb8:	df000d04 	addi	fp,sp,52
 100edbc:	e17ffb15 	stw	r5,-20(fp)
 100edc0:	e1bffc15 	stw	r6,-16(fp)
 100edc4:	e0800417 	ldw	r2,16(fp)
 100edc8:	e13ffa05 	stb	r4,-24(fp)
 100edcc:	e1fffd0d 	sth	r7,-12(fp)
 100edd0:	e0bffe0d 	sth	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 100edd4:	e03ff815 	stw	zero,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100edd8:	0005303a 	rdctl	r2,status
 100eddc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100ede0:	e0fff717 	ldw	r3,-36(fp)
 100ede4:	00bfff84 	movi	r2,-2
 100ede8:	1884703a 	and	r2,r3,r2
 100edec:	1001703a 	wrctl	status,r2
  
  return context;
 100edf0:	e0bff717 	ldw	r2,-36(fp)
#endif



    OS_ENTER_CRITICAL();
 100edf4:	e0bff815 	stw	r2,-32(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
 100edf8:	d0976a17 	ldw	r2,23976(gp)
 100edfc:	e0bff915 	stw	r2,-28(fp)
    if (ptcb != (OS_TCB *)0) {
 100ee00:	e0bff917 	ldw	r2,-28(fp)
 100ee04:	1005003a 	cmpeq	r2,r2,zero
 100ee08:	1000941e 	bne	r2,zero,100f05c <OS_TCBInit+0x2bc>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
 100ee0c:	e0bff917 	ldw	r2,-28(fp)
 100ee10:	10800517 	ldw	r2,20(r2)
 100ee14:	d0976a15 	stw	r2,23976(gp)
 100ee18:	e0bff817 	ldw	r2,-32(fp)
 100ee1c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100ee20:	e0bff617 	ldw	r2,-40(fp)
 100ee24:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
 100ee28:	e0fff917 	ldw	r3,-28(fp)
 100ee2c:	e0bffb17 	ldw	r2,-20(fp)
 100ee30:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
 100ee34:	e0fff917 	ldw	r3,-28(fp)
 100ee38:	e0bffa03 	ldbu	r2,-24(fp)
 100ee3c:	18800c85 	stb	r2,50(r3)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
 100ee40:	e0bff917 	ldw	r2,-28(fp)
 100ee44:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
 100ee48:	e0bff917 	ldw	r2,-28(fp)
 100ee4c:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
 100ee50:	e0bff917 	ldw	r2,-28(fp)
 100ee54:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
 100ee58:	e0fff917 	ldw	r3,-28(fp)
 100ee5c:	e0800317 	ldw	r2,12(fp)
 100ee60:	18800115 	stw	r2,4(r3)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
 100ee64:	e0fff917 	ldw	r3,-28(fp)
 100ee68:	e0800217 	ldw	r2,8(fp)
 100ee6c:	18800315 	stw	r2,12(r3)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
 100ee70:	e0fff917 	ldw	r3,-28(fp)
 100ee74:	e0bffc17 	ldw	r2,-16(fp)
 100ee78:	18800215 	stw	r2,8(r3)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
 100ee7c:	e0fff917 	ldw	r3,-28(fp)
 100ee80:	e0bffe0b 	ldhu	r2,-8(fp)
 100ee84:	1880040d 	sth	r2,16(r3)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
 100ee88:	e0fff917 	ldw	r3,-28(fp)
 100ee8c:	e0bffd0b 	ldhu	r2,-12(fp)
 100ee90:	1880048d 	sth	r2,18(r3)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
 100ee94:	e0bff917 	ldw	r2,-28(fp)
 100ee98:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
 100ee9c:	e0bffa03 	ldbu	r2,-24(fp)
 100eea0:	1004d0fa 	srli	r2,r2,3
 100eea4:	1007883a 	mov	r3,r2
 100eea8:	e0bff917 	ldw	r2,-28(fp)
 100eeac:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
 100eeb0:	e0bffa03 	ldbu	r2,-24(fp)
 100eeb4:	108001cc 	andi	r2,r2,7
 100eeb8:	1007883a 	mov	r3,r2
 100eebc:	e0bff917 	ldw	r2,-28(fp)
 100eec0:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
 100eec4:	e0bff917 	ldw	r2,-28(fp)
 100eec8:	10800d03 	ldbu	r2,52(r2)
 100eecc:	10c03fcc 	andi	r3,r2,255
 100eed0:	00800044 	movi	r2,1
 100eed4:	10c4983a 	sll	r2,r2,r3
 100eed8:	1007883a 	mov	r3,r2
 100eedc:	e0bff917 	ldw	r2,-28(fp)
 100eee0:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
 100eee4:	e0bff917 	ldw	r2,-28(fp)
 100eee8:	10800cc3 	ldbu	r2,51(r2)
 100eeec:	10c03fcc 	andi	r3,r2,255
 100eef0:	00800044 	movi	r2,1
 100eef4:	10c4983a 	sll	r2,r2,r3
 100eef8:	1007883a 	mov	r3,r2
 100eefc:	e0bff917 	ldw	r2,-28(fp)
 100ef00:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
 100ef04:	e0bff917 	ldw	r2,-28(fp)
 100ef08:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
 100ef0c:	e0bff917 	ldw	r2,-28(fp)
 100ef10:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
 100ef14:	e0bff917 	ldw	r2,-28(fp)
 100ef18:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
 100ef1c:	e0bff917 	ldw	r2,-28(fp)
 100ef20:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
 100ef24:	e0bff917 	ldw	r2,-28(fp)
 100ef28:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
 100ef2c:	e0bff917 	ldw	r2,-28(fp)
 100ef30:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
 100ef34:	e0bff917 	ldw	r2,-28(fp)
 100ef38:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
 100ef3c:	e0bff917 	ldw	r2,-28(fp)
 100ef40:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
 100ef44:	e0bff917 	ldw	r2,-28(fp)
 100ef48:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
 100ef4c:	e0fff917 	ldw	r3,-28(fp)
 100ef50:	00800fc4 	movi	r2,63
 100ef54:	18801305 	stb	r2,76(r3)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 100ef58:	e0bff917 	ldw	r2,-28(fp)
 100ef5c:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
 100ef60:	e13ff917 	ldw	r4,-28(fp)
 100ef64:	10195f80 	call	10195f8 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
 100ef68:	e13ff917 	ldw	r4,-28(fp)
 100ef6c:	101945c0 	call	101945c <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100ef70:	0005303a 	rdctl	r2,status
 100ef74:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100ef78:	e0fff517 	ldw	r3,-44(fp)
 100ef7c:	00bfff84 	movi	r2,-2
 100ef80:	1884703a 	and	r2,r3,r2
 100ef84:	1001703a 	wrctl	status,r2
  
  return context;
 100ef88:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
 100ef8c:	e0bff815 	stw	r2,-32(fp)
        OSTCBPrioTbl[prio] = ptcb;
 100ef90:	e0bffa03 	ldbu	r2,-24(fp)
 100ef94:	00c04174 	movhi	r3,261
 100ef98:	18e6e404 	addi	r3,r3,-25712
 100ef9c:	1085883a 	add	r2,r2,r2
 100efa0:	1085883a 	add	r2,r2,r2
 100efa4:	10c7883a 	add	r3,r2,r3
 100efa8:	e0bff917 	ldw	r2,-28(fp)
 100efac:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
 100efb0:	d0d76517 	ldw	r3,23956(gp)
 100efb4:	e0bff917 	ldw	r2,-28(fp)
 100efb8:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
 100efbc:	e0bff917 	ldw	r2,-28(fp)
 100efc0:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
 100efc4:	d0976517 	ldw	r2,23956(gp)
 100efc8:	1005003a 	cmpeq	r2,r2,zero
 100efcc:	1000031e 	bne	r2,zero,100efdc <OS_TCBInit+0x23c>
            OSTCBList->OSTCBPrev = ptcb;
 100efd0:	d0d76517 	ldw	r3,23956(gp)
 100efd4:	e0bff917 	ldw	r2,-28(fp)
 100efd8:	18800615 	stw	r2,24(r3)
        }
        OSTCBList               = ptcb;
 100efdc:	e0bff917 	ldw	r2,-28(fp)
 100efe0:	d0976515 	stw	r2,23956(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
 100efe4:	e0bff917 	ldw	r2,-28(fp)
 100efe8:	10c00d83 	ldbu	r3,54(r2)
 100efec:	d0976f03 	ldbu	r2,23996(gp)
 100eff0:	1884b03a 	or	r2,r3,r2
 100eff4:	d0976f05 	stb	r2,23996(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 100eff8:	e0bff917 	ldw	r2,-28(fp)
 100effc:	10800d03 	ldbu	r2,52(r2)
 100f000:	11003fcc 	andi	r4,r2,255
 100f004:	e0bff917 	ldw	r2,-28(fp)
 100f008:	10800d03 	ldbu	r2,52(r2)
 100f00c:	10c03fcc 	andi	r3,r2,255
 100f010:	d0976f44 	addi	r2,gp,23997
 100f014:	1885883a 	add	r2,r3,r2
 100f018:	10c00003 	ldbu	r3,0(r2)
 100f01c:	e0bff917 	ldw	r2,-28(fp)
 100f020:	10800d43 	ldbu	r2,53(r2)
 100f024:	1884b03a 	or	r2,r3,r2
 100f028:	1007883a 	mov	r3,r2
 100f02c:	d0976f44 	addi	r2,gp,23997
 100f030:	2085883a 	add	r2,r4,r2
 100f034:	10c00005 	stb	r3,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
 100f038:	d0976b43 	ldbu	r2,23981(gp)
 100f03c:	10800044 	addi	r2,r2,1
 100f040:	d0976b45 	stb	r2,23981(gp)
 100f044:	e0bff817 	ldw	r2,-32(fp)
 100f048:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100f04c:	e0bff417 	ldw	r2,-48(fp)
 100f050:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 100f054:	e03fff15 	stw	zero,-4(fp)
 100f058:	00000606 	br	100f074 <OS_TCBInit+0x2d4>
 100f05c:	e0bff817 	ldw	r2,-32(fp)
 100f060:	e0bff315 	stw	r2,-52(fp)
 100f064:	e0bff317 	ldw	r2,-52(fp)
 100f068:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
 100f06c:	00801084 	movi	r2,66
 100f070:	e0bfff15 	stw	r2,-4(fp)
 100f074:	e0bfff17 	ldw	r2,-4(fp)
}
 100f078:	e037883a 	mov	sp,fp
 100f07c:	dfc00117 	ldw	ra,4(sp)
 100f080:	df000017 	ldw	fp,0(sp)
 100f084:	dec00204 	addi	sp,sp,8
 100f088:	f800283a 	ret

0100f08c <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
 100f08c:	f811883a 	mov	r8,ra
 100f090:	100c3d80 	call	100c3d8 <_mcount>
 100f094:	403f883a 	mov	ra,r8
 100f098:	defffe04 	addi	sp,sp,-8
 100f09c:	df000115 	stw	fp,4(sp)
 100f0a0:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
 100f0a4:	d0a01204 	addi	r2,gp,-32696
 100f0a8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
 100f0ac:	d0a01304 	addi	r2,gp,-32692
 100f0b0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
 100f0b4:	d0a01484 	addi	r2,gp,-32686
 100f0b8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
 100f0bc:	d0a01504 	addi	r2,gp,-32684
 100f0c0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
 100f0c4:	d0a01404 	addi	r2,gp,-32688
 100f0c8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
 100f0cc:	d0a01584 	addi	r2,gp,-32682
 100f0d0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
 100f0d4:	d0a01604 	addi	r2,gp,-32680
 100f0d8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
 100f0dc:	d0a01684 	addi	r2,gp,-32678
 100f0e0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
 100f0e4:	d0a01704 	addi	r2,gp,-32676
 100f0e8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
 100f0ec:	d0a01784 	addi	r2,gp,-32674
 100f0f0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
 100f0f4:	d0a01804 	addi	r2,gp,-32672
 100f0f8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
 100f0fc:	d0a01884 	addi	r2,gp,-32670
 100f100:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
 100f104:	d0a01904 	addi	r2,gp,-32668
 100f108:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
 100f10c:	d0a01984 	addi	r2,gp,-32666
 100f110:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
 100f114:	d0a01a04 	addi	r2,gp,-32664
 100f118:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
 100f11c:	d0a01a84 	addi	r2,gp,-32662
 100f120:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
 100f124:	d0a01b04 	addi	r2,gp,-32660
 100f128:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
 100f12c:	d0a01b84 	addi	r2,gp,-32658
 100f130:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
 100f134:	d0a01c04 	addi	r2,gp,-32656
 100f138:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
 100f13c:	d0a01c84 	addi	r2,gp,-32654
 100f140:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
 100f144:	d0a01d04 	addi	r2,gp,-32652
 100f148:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
 100f14c:	d0a01d84 	addi	r2,gp,-32650
 100f150:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
 100f154:	d0a01e04 	addi	r2,gp,-32648
 100f158:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
 100f15c:	d0a01e84 	addi	r2,gp,-32646
 100f160:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
 100f164:	d0a01f04 	addi	r2,gp,-32644
 100f168:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
 100f16c:	d0a01f84 	addi	r2,gp,-32642
 100f170:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
 100f174:	d0a02004 	addi	r2,gp,-32640
 100f178:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
 100f17c:	d0a02084 	addi	r2,gp,-32638
 100f180:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
 100f184:	d0a02104 	addi	r2,gp,-32636
 100f188:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
 100f18c:	d0a02184 	addi	r2,gp,-32634
 100f190:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
 100f194:	d0a02204 	addi	r2,gp,-32632
 100f198:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
 100f19c:	d0a02284 	addi	r2,gp,-32630
 100f1a0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
 100f1a4:	d0a02304 	addi	r2,gp,-32628
 100f1a8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
 100f1ac:	d0a02384 	addi	r2,gp,-32626
 100f1b0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
 100f1b4:	d0a02404 	addi	r2,gp,-32624
 100f1b8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
 100f1bc:	d0a02484 	addi	r2,gp,-32622
 100f1c0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
 100f1c4:	d0a02504 	addi	r2,gp,-32620
 100f1c8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
 100f1cc:	d0a02584 	addi	r2,gp,-32618
 100f1d0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
 100f1d4:	d0a02604 	addi	r2,gp,-32616
 100f1d8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
 100f1dc:	d0a02684 	addi	r2,gp,-32614
 100f1e0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
 100f1e4:	d0a02704 	addi	r2,gp,-32612
 100f1e8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
 100f1ec:	d0a02784 	addi	r2,gp,-32610
 100f1f0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
 100f1f4:	d0a02804 	addi	r2,gp,-32608
 100f1f8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
 100f1fc:	d0a02884 	addi	r2,gp,-32606
 100f200:	e0bfff15 	stw	r2,-4(fp)

#if OS_TMR_EN > 0
    ptemp = (void *)&OSTmrTbl[0];
 100f204:	00804134 	movhi	r2,260
 100f208:	10987c04 	addi	r2,r2,25072
 100f20c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrWheelTbl[0];
 100f210:	00804134 	movhi	r2,260
 100f214:	10979c04 	addi	r2,r2,24176
 100f218:	e0bfff15 	stw	r2,-4(fp)
    
    ptemp = (void *)&OSTmrEn;
 100f21c:	d0a02984 	addi	r2,gp,-32602
 100f220:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrCfgMax;
 100f224:	d0a02a04 	addi	r2,gp,-32600
 100f228:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrCfgNameSize;
 100f22c:	d0a02a84 	addi	r2,gp,-32598
 100f230:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrCfgWheelSize;
 100f234:	d0a02b04 	addi	r2,gp,-32596
 100f238:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrCfgTicksPerSec;
 100f23c:	d0a02b84 	addi	r2,gp,-32594
 100f240:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrSize;
 100f244:	d0a02c04 	addi	r2,gp,-32592
 100f248:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrTblSize;
 100f24c:	d0a02c84 	addi	r2,gp,-32590
 100f250:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
 100f254:	d0a02d04 	addi	r2,gp,-32588
 100f258:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrWheelTblSize;
 100f25c:	d0a02d84 	addi	r2,gp,-32586
 100f260:	e0bfff15 	stw	r2,-4(fp)
#endif

    ptemp = (void *)&OSVersionNbr;
 100f264:	d0a02904 	addi	r2,gp,-32604
 100f268:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
 100f26c:	d0a02e04 	addi	r2,gp,-32584
 100f270:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
 100f274:	e037883a 	mov	sp,fp
 100f278:	df000017 	ldw	fp,0(sp)
 100f27c:	dec00104 	addi	sp,sp,4
 100f280:	f800283a 	ret

0100f284 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
 100f284:	f811883a 	mov	r8,ra
 100f288:	100c3d80 	call	100c3d8 <_mcount>
 100f28c:	403f883a 	mov	ra,r8
 100f290:	defff104 	addi	sp,sp,-60
 100f294:	df000e15 	stw	fp,56(sp)
 100f298:	df000e04 	addi	fp,sp,56
 100f29c:	e13ffa15 	stw	r4,-24(fp)
 100f2a0:	e1fffd15 	stw	r7,-12(fp)
 100f2a4:	e17ffb0d 	sth	r5,-20(fp)
 100f2a8:	e1bffc05 	stb	r6,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 100f2ac:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 100f2b0:	e0bffd17 	ldw	r2,-12(fp)
 100f2b4:	1004c03a 	cmpne	r2,r2,zero
 100f2b8:	1000021e 	bne	r2,zero,100f2c4 <OSFlagAccept+0x40>
        return ((OS_FLAGS)0);
 100f2bc:	e03fff15 	stw	zero,-4(fp)
 100f2c0:	0000bb06 	br	100f5b0 <OSFlagAccept+0x32c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 100f2c4:	e0bffa17 	ldw	r2,-24(fp)
 100f2c8:	1004c03a 	cmpne	r2,r2,zero
 100f2cc:	1000051e 	bne	r2,zero,100f2e4 <OSFlagAccept+0x60>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 100f2d0:	e0fffd17 	ldw	r3,-12(fp)
 100f2d4:	00801b84 	movi	r2,110
 100f2d8:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 100f2dc:	e03fff15 	stw	zero,-4(fp)
 100f2e0:	0000b306 	br	100f5b0 <OSFlagAccept+0x32c>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 100f2e4:	e0bffa17 	ldw	r2,-24(fp)
 100f2e8:	10800003 	ldbu	r2,0(r2)
 100f2ec:	10803fcc 	andi	r2,r2,255
 100f2f0:	10800160 	cmpeqi	r2,r2,5
 100f2f4:	1000051e 	bne	r2,zero,100f30c <OSFlagAccept+0x88>
        *perr = OS_ERR_EVENT_TYPE;
 100f2f8:	e0fffd17 	ldw	r3,-12(fp)
 100f2fc:	00800044 	movi	r2,1
 100f300:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 100f304:	e03fff15 	stw	zero,-4(fp)
 100f308:	0000a906 	br	100f5b0 <OSFlagAccept+0x32c>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 100f30c:	e0fffc03 	ldbu	r3,-16(fp)
 100f310:	00bfe004 	movi	r2,-128
 100f314:	1884703a 	and	r2,r3,r2
 100f318:	e0bff945 	stb	r2,-27(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
 100f31c:	e0bff943 	ldbu	r2,-27(fp)
 100f320:	1005003a 	cmpeq	r2,r2,zero
 100f324:	1000061e 	bne	r2,zero,100f340 <OSFlagAccept+0xbc>
        wait_type &= ~OS_FLAG_CONSUME;
 100f328:	e0bffc03 	ldbu	r2,-16(fp)
 100f32c:	10801fcc 	andi	r2,r2,127
 100f330:	e0bffc05 	stb	r2,-16(fp)
        consume    = OS_TRUE;
 100f334:	00800044 	movi	r2,1
 100f338:	e0bff905 	stb	r2,-28(fp)
 100f33c:	00000106 	br	100f344 <OSFlagAccept+0xc0>
    } else {
        consume    = OS_FALSE;
 100f340:	e03ff905 	stb	zero,-28(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
 100f344:	e0bffd17 	ldw	r2,-12(fp)
 100f348:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100f34c:	0005303a 	rdctl	r2,status
 100f350:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100f354:	e0fff717 	ldw	r3,-36(fp)
 100f358:	00bfff84 	movi	r2,-2
 100f35c:	1884703a 	and	r2,r3,r2
 100f360:	1001703a 	wrctl	status,r2
  
  return context;
 100f364:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
 100f368:	e0bff815 	stw	r2,-32(fp)
    switch (wait_type) {
 100f36c:	e0bffc03 	ldbu	r2,-16(fp)
 100f370:	e0bffe15 	stw	r2,-8(fp)
 100f374:	e0fffe17 	ldw	r3,-8(fp)
 100f378:	18800060 	cmpeqi	r2,r3,1
 100f37c:	1000651e 	bne	r2,zero,100f514 <OSFlagAccept+0x290>
 100f380:	e0fffe17 	ldw	r3,-8(fp)
 100f384:	18800088 	cmpgei	r2,r3,2
 100f388:	1000041e 	bne	r2,zero,100f39c <OSFlagAccept+0x118>
 100f38c:	e0fffe17 	ldw	r3,-8(fp)
 100f390:	1805003a 	cmpeq	r2,r3,zero
 100f394:	1000421e 	bne	r2,zero,100f4a0 <OSFlagAccept+0x21c>
 100f398:	00007b06 	br	100f588 <OSFlagAccept+0x304>
 100f39c:	e0fffe17 	ldw	r3,-8(fp)
 100f3a0:	188000a0 	cmpeqi	r2,r3,2
 100f3a4:	1000041e 	bne	r2,zero,100f3b8 <OSFlagAccept+0x134>
 100f3a8:	e0fffe17 	ldw	r3,-8(fp)
 100f3ac:	188000e0 	cmpeqi	r2,r3,3
 100f3b0:	10001e1e 	bne	r2,zero,100f42c <OSFlagAccept+0x1a8>
 100f3b4:	00007406 	br	100f588 <OSFlagAccept+0x304>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 100f3b8:	e0bffa17 	ldw	r2,-24(fp)
 100f3bc:	10c0020b 	ldhu	r3,8(r2)
 100f3c0:	e0bffb0b 	ldhu	r2,-20(fp)
 100f3c4:	1884703a 	and	r2,r3,r2
 100f3c8:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 100f3cc:	e0fff98b 	ldhu	r3,-26(fp)
 100f3d0:	e0bffb0b 	ldhu	r2,-20(fp)
 100f3d4:	18800d1e 	bne	r3,r2,100f40c <OSFlagAccept+0x188>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 100f3d8:	e0bff903 	ldbu	r2,-28(fp)
 100f3dc:	10800058 	cmpnei	r2,r2,1
 100f3e0:	10000d1e 	bne	r2,zero,100f418 <OSFlagAccept+0x194>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 100f3e4:	e0bffa17 	ldw	r2,-24(fp)
 100f3e8:	1080020b 	ldhu	r2,8(r2)
 100f3ec:	1007883a 	mov	r3,r2
 100f3f0:	e0bff98b 	ldhu	r2,-26(fp)
 100f3f4:	0084303a 	nor	r2,zero,r2
 100f3f8:	1884703a 	and	r2,r3,r2
 100f3fc:	1007883a 	mov	r3,r2
 100f400:	e0bffa17 	ldw	r2,-24(fp)
 100f404:	10c0020d 	sth	r3,8(r2)
 100f408:	00000306 	br	100f418 <OSFlagAccept+0x194>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 100f40c:	e0fffd17 	ldw	r3,-12(fp)
 100f410:	00801c04 	movi	r2,112
 100f414:	18800005 	stb	r2,0(r3)
 100f418:	e0bff817 	ldw	r2,-32(fp)
 100f41c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100f420:	e0bff617 	ldw	r2,-40(fp)
 100f424:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 100f428:	00005f06 	br	100f5a8 <OSFlagAccept+0x324>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 100f42c:	e0bffa17 	ldw	r2,-24(fp)
 100f430:	10c0020b 	ldhu	r3,8(r2)
 100f434:	e0bffb0b 	ldhu	r2,-20(fp)
 100f438:	1884703a 	and	r2,r3,r2
 100f43c:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 100f440:	e0bff98b 	ldhu	r2,-26(fp)
 100f444:	1005003a 	cmpeq	r2,r2,zero
 100f448:	10000d1e 	bne	r2,zero,100f480 <OSFlagAccept+0x1fc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 100f44c:	e0bff903 	ldbu	r2,-28(fp)
 100f450:	10800058 	cmpnei	r2,r2,1
 100f454:	10000d1e 	bne	r2,zero,100f48c <OSFlagAccept+0x208>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 100f458:	e0bffa17 	ldw	r2,-24(fp)
 100f45c:	1080020b 	ldhu	r2,8(r2)
 100f460:	1007883a 	mov	r3,r2
 100f464:	e0bff98b 	ldhu	r2,-26(fp)
 100f468:	0084303a 	nor	r2,zero,r2
 100f46c:	1884703a 	and	r2,r3,r2
 100f470:	1007883a 	mov	r3,r2
 100f474:	e0bffa17 	ldw	r2,-24(fp)
 100f478:	10c0020d 	sth	r3,8(r2)
 100f47c:	00000306 	br	100f48c <OSFlagAccept+0x208>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 100f480:	e0fffd17 	ldw	r3,-12(fp)
 100f484:	00801c04 	movi	r2,112
 100f488:	18800005 	stb	r2,0(r3)
 100f48c:	e0bff817 	ldw	r2,-32(fp)
 100f490:	e0bff515 	stw	r2,-44(fp)
 100f494:	e0bff517 	ldw	r2,-44(fp)
 100f498:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 100f49c:	00004206 	br	100f5a8 <OSFlagAccept+0x324>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 100f4a0:	e0bffa17 	ldw	r2,-24(fp)
 100f4a4:	1080020b 	ldhu	r2,8(r2)
 100f4a8:	0084303a 	nor	r2,zero,r2
 100f4ac:	1007883a 	mov	r3,r2
 100f4b0:	e0bffb0b 	ldhu	r2,-20(fp)
 100f4b4:	1884703a 	and	r2,r3,r2
 100f4b8:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 100f4bc:	e0fff98b 	ldhu	r3,-26(fp)
 100f4c0:	e0bffb0b 	ldhu	r2,-20(fp)
 100f4c4:	18800b1e 	bne	r3,r2,100f4f4 <OSFlagAccept+0x270>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 100f4c8:	e0bff903 	ldbu	r2,-28(fp)
 100f4cc:	10800058 	cmpnei	r2,r2,1
 100f4d0:	10000b1e 	bne	r2,zero,100f500 <OSFlagAccept+0x27c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 100f4d4:	e0bffa17 	ldw	r2,-24(fp)
 100f4d8:	10c0020b 	ldhu	r3,8(r2)
 100f4dc:	e0bff98b 	ldhu	r2,-26(fp)
 100f4e0:	1884b03a 	or	r2,r3,r2
 100f4e4:	1007883a 	mov	r3,r2
 100f4e8:	e0bffa17 	ldw	r2,-24(fp)
 100f4ec:	10c0020d 	sth	r3,8(r2)
 100f4f0:	00000306 	br	100f500 <OSFlagAccept+0x27c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 100f4f4:	e0fffd17 	ldw	r3,-12(fp)
 100f4f8:	00801c04 	movi	r2,112
 100f4fc:	18800005 	stb	r2,0(r3)
 100f500:	e0bff817 	ldw	r2,-32(fp)
 100f504:	e0bff415 	stw	r2,-48(fp)
 100f508:	e0bff417 	ldw	r2,-48(fp)
 100f50c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 100f510:	00002506 	br	100f5a8 <OSFlagAccept+0x324>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 100f514:	e0bffa17 	ldw	r2,-24(fp)
 100f518:	1080020b 	ldhu	r2,8(r2)
 100f51c:	0084303a 	nor	r2,zero,r2
 100f520:	1007883a 	mov	r3,r2
 100f524:	e0bffb0b 	ldhu	r2,-20(fp)
 100f528:	1884703a 	and	r2,r3,r2
 100f52c:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 100f530:	e0bff98b 	ldhu	r2,-26(fp)
 100f534:	1005003a 	cmpeq	r2,r2,zero
 100f538:	10000b1e 	bne	r2,zero,100f568 <OSFlagAccept+0x2e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 100f53c:	e0bff903 	ldbu	r2,-28(fp)
 100f540:	10800058 	cmpnei	r2,r2,1
 100f544:	10000b1e 	bne	r2,zero,100f574 <OSFlagAccept+0x2f0>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 100f548:	e0bffa17 	ldw	r2,-24(fp)
 100f54c:	10c0020b 	ldhu	r3,8(r2)
 100f550:	e0bff98b 	ldhu	r2,-26(fp)
 100f554:	1884b03a 	or	r2,r3,r2
 100f558:	1007883a 	mov	r3,r2
 100f55c:	e0bffa17 	ldw	r2,-24(fp)
 100f560:	10c0020d 	sth	r3,8(r2)
 100f564:	00000306 	br	100f574 <OSFlagAccept+0x2f0>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 100f568:	e0fffd17 	ldw	r3,-12(fp)
 100f56c:	00801c04 	movi	r2,112
 100f570:	18800005 	stb	r2,0(r3)
 100f574:	e0bff817 	ldw	r2,-32(fp)
 100f578:	e0bff315 	stw	r2,-52(fp)
 100f57c:	e0bff317 	ldw	r2,-52(fp)
 100f580:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 100f584:	00000806 	br	100f5a8 <OSFlagAccept+0x324>
 100f588:	e0bff817 	ldw	r2,-32(fp)
 100f58c:	e0bff215 	stw	r2,-56(fp)
 100f590:	e0bff217 	ldw	r2,-56(fp)
 100f594:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 100f598:	e03ff98d 	sth	zero,-26(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
 100f59c:	e0fffd17 	ldw	r3,-12(fp)
 100f5a0:	00801bc4 	movi	r2,111
 100f5a4:	18800005 	stb	r2,0(r3)
             break;
    }
    return (flags_rdy);
 100f5a8:	e0bff98b 	ldhu	r2,-26(fp)
 100f5ac:	e0bfff15 	stw	r2,-4(fp)
 100f5b0:	e0bfff17 	ldw	r2,-4(fp)
}
 100f5b4:	e037883a 	mov	sp,fp
 100f5b8:	df000017 	ldw	fp,0(sp)
 100f5bc:	dec00104 	addi	sp,sp,4
 100f5c0:	f800283a 	ret

0100f5c4 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
 100f5c4:	f811883a 	mov	r8,ra
 100f5c8:	100c3d80 	call	100c3d8 <_mcount>
 100f5cc:	403f883a 	mov	ra,r8
 100f5d0:	defff704 	addi	sp,sp,-36
 100f5d4:	df000815 	stw	fp,32(sp)
 100f5d8:	df000804 	addi	fp,sp,32
 100f5dc:	e17ffe15 	stw	r5,-8(fp)
 100f5e0:	e13ffd0d 	sth	r4,-12(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
 100f5e4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
 100f5e8:	e0bffe17 	ldw	r2,-8(fp)
 100f5ec:	1004c03a 	cmpne	r2,r2,zero
 100f5f0:	1000021e 	bne	r2,zero,100f5fc <OSFlagCreate+0x38>
        return ((OS_FLAG_GRP *)0);
 100f5f4:	e03fff15 	stw	zero,-4(fp)
 100f5f8:	00003f06 	br	100f6f8 <OSFlagCreate+0x134>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
 100f5fc:	008040f4 	movhi	r2,259
 100f600:	10977704 	addi	r2,r2,24028
 100f604:	10800003 	ldbu	r2,0(r2)
 100f608:	10803fcc 	andi	r2,r2,255
 100f60c:	1005003a 	cmpeq	r2,r2,zero
 100f610:	1000051e 	bne	r2,zero,100f628 <OSFlagCreate+0x64>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
 100f614:	e0fffe17 	ldw	r3,-8(fp)
 100f618:	00800404 	movi	r2,16
 100f61c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAG_GRP *)0);
 100f620:	e03fff15 	stw	zero,-4(fp)
 100f624:	00003406 	br	100f6f8 <OSFlagCreate+0x134>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100f628:	0005303a 	rdctl	r2,status
 100f62c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100f630:	e0fffa17 	ldw	r3,-24(fp)
 100f634:	00bfff84 	movi	r2,-2
 100f638:	1884703a 	and	r2,r3,r2
 100f63c:	1001703a 	wrctl	status,r2
  
  return context;
 100f640:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 100f644:	e0bffb15 	stw	r2,-20(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
 100f648:	008040f4 	movhi	r2,259
 100f64c:	10977c04 	addi	r2,r2,24048
 100f650:	10800017 	ldw	r2,0(r2)
 100f654:	e0bffc15 	stw	r2,-16(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
 100f658:	e0bffc17 	ldw	r2,-16(fp)
 100f65c:	1005003a 	cmpeq	r2,r2,zero
 100f660:	10001c1e 	bne	r2,zero,100f6d4 <OSFlagCreate+0x110>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
 100f664:	008040f4 	movhi	r2,259
 100f668:	10977c04 	addi	r2,r2,24048
 100f66c:	10800017 	ldw	r2,0(r2)
 100f670:	10800117 	ldw	r2,4(r2)
 100f674:	1007883a 	mov	r3,r2
 100f678:	008040f4 	movhi	r2,259
 100f67c:	10977c04 	addi	r2,r2,24048
 100f680:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
 100f684:	e0fffc17 	ldw	r3,-16(fp)
 100f688:	00800144 	movi	r2,5
 100f68c:	18800005 	stb	r2,0(r3)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
 100f690:	e0fffc17 	ldw	r3,-16(fp)
 100f694:	e0bffd0b 	ldhu	r2,-12(fp)
 100f698:	1880020d 	sth	r2,8(r3)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
 100f69c:	e0bffc17 	ldw	r2,-16(fp)
 100f6a0:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
 100f6a4:	e0fffc17 	ldw	r3,-16(fp)
 100f6a8:	00800fc4 	movi	r2,63
 100f6ac:	18800285 	stb	r2,10(r3)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 100f6b0:	e0bffc17 	ldw	r2,-16(fp)
 100f6b4:	100002c5 	stb	zero,11(r2)
 100f6b8:	e0bffb17 	ldw	r2,-20(fp)
 100f6bc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100f6c0:	e0bff917 	ldw	r2,-28(fp)
 100f6c4:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
 100f6c8:	e0bffe17 	ldw	r2,-8(fp)
 100f6cc:	10000005 	stb	zero,0(r2)
 100f6d0:	00000706 	br	100f6f0 <OSFlagCreate+0x12c>
 100f6d4:	e0bffb17 	ldw	r2,-20(fp)
 100f6d8:	e0bff815 	stw	r2,-32(fp)
 100f6dc:	e0bff817 	ldw	r2,-32(fp)
 100f6e0:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
 100f6e4:	e0fffe17 	ldw	r3,-8(fp)
 100f6e8:	00801c84 	movi	r2,114
 100f6ec:	18800005 	stb	r2,0(r3)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
 100f6f0:	e0bffc17 	ldw	r2,-16(fp)
 100f6f4:	e0bfff15 	stw	r2,-4(fp)
 100f6f8:	e0bfff17 	ldw	r2,-4(fp)
}
 100f6fc:	e037883a 	mov	sp,fp
 100f700:	df000017 	ldw	fp,0(sp)
 100f704:	dec00104 	addi	sp,sp,4
 100f708:	f800283a 	ret

0100f70c <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
 100f70c:	f811883a 	mov	r8,ra
 100f710:	100c3d80 	call	100c3d8 <_mcount>
 100f714:	403f883a 	mov	ra,r8
 100f718:	defff004 	addi	sp,sp,-64
 100f71c:	dfc00f15 	stw	ra,60(sp)
 100f720:	df000e15 	stw	fp,56(sp)
 100f724:	df000e04 	addi	fp,sp,56
 100f728:	e13ffb15 	stw	r4,-20(fp)
 100f72c:	e1bffd15 	stw	r6,-12(fp)
 100f730:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 100f734:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 100f738:	e0bffd17 	ldw	r2,-12(fp)
 100f73c:	1004c03a 	cmpne	r2,r2,zero
 100f740:	1000031e 	bne	r2,zero,100f750 <OSFlagDel+0x44>
        return (pgrp);
 100f744:	e0bffb17 	ldw	r2,-20(fp)
 100f748:	e0bfff15 	stw	r2,-4(fp)
 100f74c:	00009606 	br	100f9a8 <OSFlagDel+0x29c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 100f750:	e0bffb17 	ldw	r2,-20(fp)
 100f754:	1004c03a 	cmpne	r2,r2,zero
 100f758:	1000061e 	bne	r2,zero,100f774 <OSFlagDel+0x68>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 100f75c:	e0fffd17 	ldw	r3,-12(fp)
 100f760:	00801b84 	movi	r2,110
 100f764:	18800005 	stb	r2,0(r3)
        return (pgrp);
 100f768:	e0fffb17 	ldw	r3,-20(fp)
 100f76c:	e0ffff15 	stw	r3,-4(fp)
 100f770:	00008d06 	br	100f9a8 <OSFlagDel+0x29c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 100f774:	008040f4 	movhi	r2,259
 100f778:	10977704 	addi	r2,r2,24028
 100f77c:	10800003 	ldbu	r2,0(r2)
 100f780:	10803fcc 	andi	r2,r2,255
 100f784:	1005003a 	cmpeq	r2,r2,zero
 100f788:	1000061e 	bne	r2,zero,100f7a4 <OSFlagDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 100f78c:	e0fffd17 	ldw	r3,-12(fp)
 100f790:	008003c4 	movi	r2,15
 100f794:	18800005 	stb	r2,0(r3)
        return (pgrp);
 100f798:	e0bffb17 	ldw	r2,-20(fp)
 100f79c:	e0bfff15 	stw	r2,-4(fp)
 100f7a0:	00008106 	br	100f9a8 <OSFlagDel+0x29c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
 100f7a4:	e0bffb17 	ldw	r2,-20(fp)
 100f7a8:	10800003 	ldbu	r2,0(r2)
 100f7ac:	10803fcc 	andi	r2,r2,255
 100f7b0:	10800160 	cmpeqi	r2,r2,5
 100f7b4:	1000061e 	bne	r2,zero,100f7d0 <OSFlagDel+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
 100f7b8:	e0fffd17 	ldw	r3,-12(fp)
 100f7bc:	00800044 	movi	r2,1
 100f7c0:	18800005 	stb	r2,0(r3)
        return (pgrp);
 100f7c4:	e0fffb17 	ldw	r3,-20(fp)
 100f7c8:	e0ffff15 	stw	r3,-4(fp)
 100f7cc:	00007606 	br	100f9a8 <OSFlagDel+0x29c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100f7d0:	0005303a 	rdctl	r2,status
 100f7d4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100f7d8:	e0fff617 	ldw	r3,-40(fp)
 100f7dc:	00bfff84 	movi	r2,-2
 100f7e0:	1884703a 	and	r2,r3,r2
 100f7e4:	1001703a 	wrctl	status,r2
  
  return context;
 100f7e8:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
 100f7ec:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
 100f7f0:	e0bffb17 	ldw	r2,-20(fp)
 100f7f4:	10800117 	ldw	r2,4(r2)
 100f7f8:	1005003a 	cmpeq	r2,r2,zero
 100f7fc:	1000031e 	bne	r2,zero,100f80c <OSFlagDel+0x100>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 100f800:	00800044 	movi	r2,1
 100f804:	e0bffa05 	stb	r2,-24(fp)
 100f808:	00000106 	br	100f810 <OSFlagDel+0x104>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 100f80c:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
 100f810:	e0bffc03 	ldbu	r2,-16(fp)
 100f814:	e0bffe15 	stw	r2,-8(fp)
 100f818:	e0fffe17 	ldw	r3,-8(fp)
 100f81c:	1805003a 	cmpeq	r2,r3,zero
 100f820:	1000041e 	bne	r2,zero,100f834 <OSFlagDel+0x128>
 100f824:	e0fffe17 	ldw	r3,-8(fp)
 100f828:	18800060 	cmpeqi	r2,r3,1
 100f82c:	1000281e 	bne	r2,zero,100f8d0 <OSFlagDel+0x1c4>
 100f830:	00005206 	br	100f97c <OSFlagDel+0x270>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
 100f834:	e0bffa03 	ldbu	r2,-24(fp)
 100f838:	1004c03a 	cmpne	r2,r2,zero
 100f83c:	10001a1e 	bne	r2,zero,100f8a8 <OSFlagDel+0x19c>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
 100f840:	e0fffb17 	ldw	r3,-20(fp)
 100f844:	00800fc4 	movi	r2,63
 100f848:	18800285 	stb	r2,10(r3)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 100f84c:	e0bffb17 	ldw	r2,-20(fp)
 100f850:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 100f854:	e0bffb17 	ldw	r2,-20(fp)
 100f858:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
 100f85c:	008040f4 	movhi	r2,259
 100f860:	10977c04 	addi	r2,r2,24048
 100f864:	10c00017 	ldw	r3,0(r2)
 100f868:	e0bffb17 	ldw	r2,-20(fp)
 100f86c:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
 100f870:	e0bffb17 	ldw	r2,-20(fp)
 100f874:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
 100f878:	00c040f4 	movhi	r3,259
 100f87c:	18d77c04 	addi	r3,r3,24048
 100f880:	e0bffb17 	ldw	r2,-20(fp)
 100f884:	18800015 	stw	r2,0(r3)
 100f888:	e0bff717 	ldw	r2,-36(fp)
 100f88c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100f890:	e0bff517 	ldw	r2,-44(fp)
 100f894:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
 100f898:	e0bffd17 	ldw	r2,-12(fp)
 100f89c:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
 100f8a0:	e03ff815 	stw	zero,-32(fp)
 100f8a4:	00003e06 	br	100f9a0 <OSFlagDel+0x294>
 100f8a8:	e0bff717 	ldw	r2,-36(fp)
 100f8ac:	e0bff415 	stw	r2,-48(fp)
 100f8b0:	e0bff417 	ldw	r2,-48(fp)
 100f8b4:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
 100f8b8:	e0fffd17 	ldw	r3,-12(fp)
 100f8bc:	00801244 	movi	r2,73
 100f8c0:	18800005 	stb	r2,0(r3)
                 pgrp_return          = pgrp;
 100f8c4:	e0bffb17 	ldw	r2,-20(fp)
 100f8c8:	e0bff815 	stw	r2,-32(fp)
             }
             break;
 100f8cc:	00003406 	br	100f9a0 <OSFlagDel+0x294>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 100f8d0:	e0bffb17 	ldw	r2,-20(fp)
 100f8d4:	10800117 	ldw	r2,4(r2)
 100f8d8:	e0bff915 	stw	r2,-28(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 100f8dc:	00000606 	br	100f8f8 <OSFlagDel+0x1ec>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
 100f8e0:	e13ff917 	ldw	r4,-28(fp)
 100f8e4:	000b883a 	mov	r5,zero
 100f8e8:	1010a880 	call	1010a88 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 100f8ec:	e0bff917 	ldw	r2,-28(fp)
 100f8f0:	10800017 	ldw	r2,0(r2)
 100f8f4:	e0bff915 	stw	r2,-28(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 100f8f8:	e0bff917 	ldw	r2,-28(fp)
 100f8fc:	1004c03a 	cmpne	r2,r2,zero
 100f900:	103ff71e 	bne	r2,zero,100f8e0 <OSFlagDel+0x1d4>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
 100f904:	e0fffb17 	ldw	r3,-20(fp)
 100f908:	00800fc4 	movi	r2,63
 100f90c:	18800285 	stb	r2,10(r3)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 100f910:	e0bffb17 	ldw	r2,-20(fp)
 100f914:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 100f918:	e0bffb17 	ldw	r2,-20(fp)
 100f91c:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
 100f920:	008040f4 	movhi	r2,259
 100f924:	10977c04 	addi	r2,r2,24048
 100f928:	10c00017 	ldw	r3,0(r2)
 100f92c:	e0bffb17 	ldw	r2,-20(fp)
 100f930:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
 100f934:	e0bffb17 	ldw	r2,-20(fp)
 100f938:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
 100f93c:	00c040f4 	movhi	r3,259
 100f940:	18d77c04 	addi	r3,r3,24048
 100f944:	e0bffb17 	ldw	r2,-20(fp)
 100f948:	18800015 	stw	r2,0(r3)
 100f94c:	e0bff717 	ldw	r2,-36(fp)
 100f950:	e0bff315 	stw	r2,-52(fp)
 100f954:	e0bff317 	ldw	r2,-52(fp)
 100f958:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 100f95c:	e0bffa03 	ldbu	r2,-24(fp)
 100f960:	10800058 	cmpnei	r2,r2,1
 100f964:	1000011e 	bne	r2,zero,100f96c <OSFlagDel+0x260>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 100f968:	100e9440 	call	100e944 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
 100f96c:	e0bffd17 	ldw	r2,-12(fp)
 100f970:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
 100f974:	e03ff815 	stw	zero,-32(fp)
             break;
 100f978:	00000906 	br	100f9a0 <OSFlagDel+0x294>
 100f97c:	e0bff717 	ldw	r2,-36(fp)
 100f980:	e0bff215 	stw	r2,-56(fp)
 100f984:	e0bff217 	ldw	r2,-56(fp)
 100f988:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
 100f98c:	e0fffd17 	ldw	r3,-12(fp)
 100f990:	008001c4 	movi	r2,7
 100f994:	18800005 	stb	r2,0(r3)
             pgrp_return          = pgrp;
 100f998:	e0bffb17 	ldw	r2,-20(fp)
 100f99c:	e0bff815 	stw	r2,-32(fp)
             break;
    }
    return (pgrp_return);
 100f9a0:	e0bff817 	ldw	r2,-32(fp)
 100f9a4:	e0bfff15 	stw	r2,-4(fp)
 100f9a8:	e0bfff17 	ldw	r2,-4(fp)
}
 100f9ac:	e037883a 	mov	sp,fp
 100f9b0:	dfc00117 	ldw	ra,4(sp)
 100f9b4:	df000017 	ldw	fp,0(sp)
 100f9b8:	dec00204 	addi	sp,sp,8
 100f9bc:	f800283a 	ret

0100f9c0 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 100f9c0:	f811883a 	mov	r8,ra
 100f9c4:	100c3d80 	call	100c3d8 <_mcount>
 100f9c8:	403f883a 	mov	ra,r8
 100f9cc:	defff504 	addi	sp,sp,-44
 100f9d0:	dfc00a15 	stw	ra,40(sp)
 100f9d4:	df000915 	stw	fp,36(sp)
 100f9d8:	df000904 	addi	fp,sp,36
 100f9dc:	e13ffc15 	stw	r4,-16(fp)
 100f9e0:	e17ffd15 	stw	r5,-12(fp)
 100f9e4:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 100f9e8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 100f9ec:	e0bffe17 	ldw	r2,-8(fp)
 100f9f0:	1004c03a 	cmpne	r2,r2,zero
 100f9f4:	1000021e 	bne	r2,zero,100fa00 <OSFlagNameGet+0x40>
        return (0);
 100f9f8:	e03fff15 	stw	zero,-4(fp)
 100f9fc:	00003e06 	br	100faf8 <OSFlagNameGet+0x138>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 100fa00:	e0bffc17 	ldw	r2,-16(fp)
 100fa04:	1004c03a 	cmpne	r2,r2,zero
 100fa08:	1000051e 	bne	r2,zero,100fa20 <OSFlagNameGet+0x60>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 100fa0c:	e0fffe17 	ldw	r3,-8(fp)
 100fa10:	00801b84 	movi	r2,110
 100fa14:	18800005 	stb	r2,0(r3)
        return (0);
 100fa18:	e03fff15 	stw	zero,-4(fp)
 100fa1c:	00003606 	br	100faf8 <OSFlagNameGet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 100fa20:	e0bffd17 	ldw	r2,-12(fp)
 100fa24:	1004c03a 	cmpne	r2,r2,zero
 100fa28:	1000051e 	bne	r2,zero,100fa40 <OSFlagNameGet+0x80>
        *perr = OS_ERR_PNAME_NULL;
 100fa2c:	e0fffe17 	ldw	r3,-8(fp)
 100fa30:	00800304 	movi	r2,12
 100fa34:	18800005 	stb	r2,0(r3)
        return (0);
 100fa38:	e03fff15 	stw	zero,-4(fp)
 100fa3c:	00002e06 	br	100faf8 <OSFlagNameGet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 100fa40:	008040f4 	movhi	r2,259
 100fa44:	10977704 	addi	r2,r2,24028
 100fa48:	10800003 	ldbu	r2,0(r2)
 100fa4c:	10803fcc 	andi	r2,r2,255
 100fa50:	1005003a 	cmpeq	r2,r2,zero
 100fa54:	1000051e 	bne	r2,zero,100fa6c <OSFlagNameGet+0xac>
        *perr = OS_ERR_NAME_GET_ISR;
 100fa58:	e0fffe17 	ldw	r3,-8(fp)
 100fa5c:	00800444 	movi	r2,17
 100fa60:	18800005 	stb	r2,0(r3)
        return (0);
 100fa64:	e03fff15 	stw	zero,-4(fp)
 100fa68:	00002306 	br	100faf8 <OSFlagNameGet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100fa6c:	0005303a 	rdctl	r2,status
 100fa70:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100fa74:	e0fff917 	ldw	r3,-28(fp)
 100fa78:	00bfff84 	movi	r2,-2
 100fa7c:	1884703a 	and	r2,r3,r2
 100fa80:	1001703a 	wrctl	status,r2
  
  return context;
 100fa84:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 100fa88:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 100fa8c:	e0bffc17 	ldw	r2,-16(fp)
 100fa90:	10800003 	ldbu	r2,0(r2)
 100fa94:	10803fcc 	andi	r2,r2,255
 100fa98:	10800160 	cmpeqi	r2,r2,5
 100fa9c:	1000091e 	bne	r2,zero,100fac4 <OSFlagNameGet+0x104>
 100faa0:	e0bffa17 	ldw	r2,-24(fp)
 100faa4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100faa8:	e0bff817 	ldw	r2,-32(fp)
 100faac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 100fab0:	e0fffe17 	ldw	r3,-8(fp)
 100fab4:	00800044 	movi	r2,1
 100fab8:	18800005 	stb	r2,0(r3)
        return (0);
 100fabc:	e03fff15 	stw	zero,-4(fp)
 100fac0:	00000d06 	br	100faf8 <OSFlagNameGet+0x138>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
 100fac4:	e0bffc17 	ldw	r2,-16(fp)
 100fac8:	11400284 	addi	r5,r2,10
 100facc:	e13ffd17 	ldw	r4,-12(fp)
 100fad0:	100eaa00 	call	100eaa0 <OS_StrCopy>
 100fad4:	e0bffb05 	stb	r2,-20(fp)
 100fad8:	e0bffa17 	ldw	r2,-24(fp)
 100fadc:	e0bff715 	stw	r2,-36(fp)
 100fae0:	e0bff717 	ldw	r2,-36(fp)
 100fae4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 100fae8:	e0bffe17 	ldw	r2,-8(fp)
 100faec:	10000005 	stb	zero,0(r2)
    return (len);
 100faf0:	e0bffb03 	ldbu	r2,-20(fp)
 100faf4:	e0bfff15 	stw	r2,-4(fp)
 100faf8:	e0bfff17 	ldw	r2,-4(fp)
}
 100fafc:	e037883a 	mov	sp,fp
 100fb00:	dfc00117 	ldw	ra,4(sp)
 100fb04:	df000017 	ldw	fp,0(sp)
 100fb08:	dec00204 	addi	sp,sp,8
 100fb0c:	f800283a 	ret

0100fb10 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 100fb10:	f811883a 	mov	r8,ra
 100fb14:	100c3d80 	call	100c3d8 <_mcount>
 100fb18:	403f883a 	mov	ra,r8
 100fb1c:	defff504 	addi	sp,sp,-44
 100fb20:	dfc00a15 	stw	ra,40(sp)
 100fb24:	df000915 	stw	fp,36(sp)
 100fb28:	df000904 	addi	fp,sp,36
 100fb2c:	e13ffd15 	stw	r4,-12(fp)
 100fb30:	e17ffe15 	stw	r5,-8(fp)
 100fb34:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 100fb38:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 100fb3c:	e0bfff17 	ldw	r2,-4(fp)
 100fb40:	1005003a 	cmpeq	r2,r2,zero
 100fb44:	1000451e 	bne	r2,zero,100fc5c <OSFlagNameSet+0x14c>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 100fb48:	e0bffd17 	ldw	r2,-12(fp)
 100fb4c:	1004c03a 	cmpne	r2,r2,zero
 100fb50:	1000041e 	bne	r2,zero,100fb64 <OSFlagNameSet+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 100fb54:	e0ffff17 	ldw	r3,-4(fp)
 100fb58:	00801b84 	movi	r2,110
 100fb5c:	18800005 	stb	r2,0(r3)
        return;
 100fb60:	00003e06 	br	100fc5c <OSFlagNameSet+0x14c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 100fb64:	e0bffe17 	ldw	r2,-8(fp)
 100fb68:	1004c03a 	cmpne	r2,r2,zero
 100fb6c:	1000041e 	bne	r2,zero,100fb80 <OSFlagNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;
 100fb70:	e0ffff17 	ldw	r3,-4(fp)
 100fb74:	00800304 	movi	r2,12
 100fb78:	18800005 	stb	r2,0(r3)
        return;
 100fb7c:	00003706 	br	100fc5c <OSFlagNameSet+0x14c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 100fb80:	008040f4 	movhi	r2,259
 100fb84:	10977704 	addi	r2,r2,24028
 100fb88:	10800003 	ldbu	r2,0(r2)
 100fb8c:	10803fcc 	andi	r2,r2,255
 100fb90:	1005003a 	cmpeq	r2,r2,zero
 100fb94:	1000041e 	bne	r2,zero,100fba8 <OSFlagNameSet+0x98>
        *perr = OS_ERR_NAME_SET_ISR;
 100fb98:	e0ffff17 	ldw	r3,-4(fp)
 100fb9c:	00800484 	movi	r2,18
 100fba0:	18800005 	stb	r2,0(r3)
        return;
 100fba4:	00002d06 	br	100fc5c <OSFlagNameSet+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100fba8:	0005303a 	rdctl	r2,status
 100fbac:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100fbb0:	e0fffa17 	ldw	r3,-24(fp)
 100fbb4:	00bfff84 	movi	r2,-2
 100fbb8:	1884703a 	and	r2,r3,r2
 100fbbc:	1001703a 	wrctl	status,r2
  
  return context;
 100fbc0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 100fbc4:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 100fbc8:	e0bffd17 	ldw	r2,-12(fp)
 100fbcc:	10800003 	ldbu	r2,0(r2)
 100fbd0:	10803fcc 	andi	r2,r2,255
 100fbd4:	10800160 	cmpeqi	r2,r2,5
 100fbd8:	1000081e 	bne	r2,zero,100fbfc <OSFlagNameSet+0xec>
 100fbdc:	e0bffb17 	ldw	r2,-20(fp)
 100fbe0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100fbe4:	e0bff917 	ldw	r2,-28(fp)
 100fbe8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 100fbec:	e0ffff17 	ldw	r3,-4(fp)
 100fbf0:	00800044 	movi	r2,1
 100fbf4:	18800005 	stb	r2,0(r3)
        return;
 100fbf8:	00001806 	br	100fc5c <OSFlagNameSet+0x14c>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 100fbfc:	e13ffe17 	ldw	r4,-8(fp)
 100fc00:	100eb2c0 	call	100eb2c <OS_StrLen>
 100fc04:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
 100fc08:	e0bffc03 	ldbu	r2,-16(fp)
 100fc0c:	10800830 	cmpltui	r2,r2,32
 100fc10:	1000081e 	bne	r2,zero,100fc34 <OSFlagNameSet+0x124>
 100fc14:	e0bffb17 	ldw	r2,-20(fp)
 100fc18:	e0bff815 	stw	r2,-32(fp)
 100fc1c:	e0bff817 	ldw	r2,-32(fp)
 100fc20:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
 100fc24:	e0ffff17 	ldw	r3,-4(fp)
 100fc28:	00801cc4 	movi	r2,115
 100fc2c:	18800005 	stb	r2,0(r3)
        return;
 100fc30:	00000a06 	br	100fc5c <OSFlagNameSet+0x14c>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
 100fc34:	e0bffd17 	ldw	r2,-12(fp)
 100fc38:	11000284 	addi	r4,r2,10
 100fc3c:	e17ffe17 	ldw	r5,-8(fp)
 100fc40:	100eaa00 	call	100eaa0 <OS_StrCopy>
 100fc44:	e0bffb17 	ldw	r2,-20(fp)
 100fc48:	e0bff715 	stw	r2,-36(fp)
 100fc4c:	e0bff717 	ldw	r2,-36(fp)
 100fc50:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 100fc54:	e0bfff17 	ldw	r2,-4(fp)
 100fc58:	10000005 	stb	zero,0(r2)
    return;
}
 100fc5c:	e037883a 	mov	sp,fp
 100fc60:	dfc00117 	ldw	ra,4(sp)
 100fc64:	df000017 	ldw	fp,0(sp)
 100fc68:	dec00204 	addi	sp,sp,8
 100fc6c:	f800283a 	ret

0100fc70 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
 100fc70:	f811883a 	mov	r8,ra
 100fc74:	100c3d80 	call	100c3d8 <_mcount>
 100fc78:	403f883a 	mov	ra,r8
 100fc7c:	deffe004 	addi	sp,sp,-128
 100fc80:	dfc01f15 	stw	ra,124(sp)
 100fc84:	df001e15 	stw	fp,120(sp)
 100fc88:	df001e04 	addi	fp,sp,120
 100fc8c:	e13ff915 	stw	r4,-28(fp)
 100fc90:	e17ffa0d 	sth	r5,-24(fp)
 100fc94:	e1bffb05 	stb	r6,-20(fp)
 100fc98:	e1fffc0d 	sth	r7,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 100fc9c:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 100fca0:	e0800217 	ldw	r2,8(fp)
 100fca4:	1004c03a 	cmpne	r2,r2,zero
 100fca8:	1000021e 	bne	r2,zero,100fcb4 <OSFlagPend+0x44>
        return ((OS_FLAGS)0);
 100fcac:	e03fff15 	stw	zero,-4(fp)
 100fcb0:	00017d06 	br	10102a8 <OSFlagPend+0x638>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 100fcb4:	e0bff917 	ldw	r2,-28(fp)
 100fcb8:	1004c03a 	cmpne	r2,r2,zero
 100fcbc:	1000051e 	bne	r2,zero,100fcd4 <OSFlagPend+0x64>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 100fcc0:	e0c00217 	ldw	r3,8(fp)
 100fcc4:	00801b84 	movi	r2,110
 100fcc8:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 100fccc:	e03fff15 	stw	zero,-4(fp)
 100fcd0:	00017506 	br	10102a8 <OSFlagPend+0x638>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 100fcd4:	008040f4 	movhi	r2,259
 100fcd8:	10977704 	addi	r2,r2,24028
 100fcdc:	10800003 	ldbu	r2,0(r2)
 100fce0:	10803fcc 	andi	r2,r2,255
 100fce4:	1005003a 	cmpeq	r2,r2,zero
 100fce8:	1000051e 	bne	r2,zero,100fd00 <OSFlagPend+0x90>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
 100fcec:	e0c00217 	ldw	r3,8(fp)
 100fcf0:	00800084 	movi	r2,2
 100fcf4:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 100fcf8:	e03fff15 	stw	zero,-4(fp)
 100fcfc:	00016a06 	br	10102a8 <OSFlagPend+0x638>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
 100fd00:	008040f4 	movhi	r2,259
 100fd04:	10976604 	addi	r2,r2,23960
 100fd08:	10800003 	ldbu	r2,0(r2)
 100fd0c:	10803fcc 	andi	r2,r2,255
 100fd10:	1005003a 	cmpeq	r2,r2,zero
 100fd14:	1000051e 	bne	r2,zero,100fd2c <OSFlagPend+0xbc>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
 100fd18:	e0c00217 	ldw	r3,8(fp)
 100fd1c:	00800344 	movi	r2,13
 100fd20:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 100fd24:	e03fff15 	stw	zero,-4(fp)
 100fd28:	00015f06 	br	10102a8 <OSFlagPend+0x638>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 100fd2c:	e0bff917 	ldw	r2,-28(fp)
 100fd30:	10800003 	ldbu	r2,0(r2)
 100fd34:	10803fcc 	andi	r2,r2,255
 100fd38:	10800160 	cmpeqi	r2,r2,5
 100fd3c:	1000051e 	bne	r2,zero,100fd54 <OSFlagPend+0xe4>
        *perr = OS_ERR_EVENT_TYPE;
 100fd40:	e0c00217 	ldw	r3,8(fp)
 100fd44:	00800044 	movi	r2,1
 100fd48:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 100fd4c:	e03fff15 	stw	zero,-4(fp)
 100fd50:	00015506 	br	10102a8 <OSFlagPend+0x638>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 100fd54:	e0fffb03 	ldbu	r3,-20(fp)
 100fd58:	00bfe004 	movi	r2,-128
 100fd5c:	1884703a 	and	r2,r3,r2
 100fd60:	e0bff285 	stb	r2,-54(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
 100fd64:	e0bff283 	ldbu	r2,-54(fp)
 100fd68:	1005003a 	cmpeq	r2,r2,zero
 100fd6c:	1000071e 	bne	r2,zero,100fd8c <OSFlagPend+0x11c>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
 100fd70:	00c01fc4 	movi	r3,127
 100fd74:	e0bffb03 	ldbu	r2,-20(fp)
 100fd78:	10c4703a 	and	r2,r2,r3
 100fd7c:	e0bffb05 	stb	r2,-20(fp)
        consume    = OS_TRUE;
 100fd80:	00800044 	movi	r2,1
 100fd84:	e0bff205 	stb	r2,-56(fp)
 100fd88:	00000106 	br	100fd90 <OSFlagPend+0x120>
    } else {
        consume    = OS_FALSE;
 100fd8c:	e03ff205 	stb	zero,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100fd90:	0005303a 	rdctl	r2,status
 100fd94:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100fd98:	e0fff017 	ldw	r3,-64(fp)
 100fd9c:	00bfff84 	movi	r2,-2
 100fda0:	1884703a 	and	r2,r3,r2
 100fda4:	1001703a 	wrctl	status,r2
  
  return context;
 100fda8:	e0bff017 	ldw	r2,-64(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 100fdac:	e0bff115 	stw	r2,-60(fp)
    switch (wait_type) {
 100fdb0:	e0bffb03 	ldbu	r2,-20(fp)
 100fdb4:	e0bffe15 	stw	r2,-8(fp)
 100fdb8:	e0fffe17 	ldw	r3,-8(fp)
 100fdbc:	18800060 	cmpeqi	r2,r3,1
 100fdc0:	1000981e 	bne	r2,zero,1010024 <OSFlagPend+0x3b4>
 100fdc4:	e0fffe17 	ldw	r3,-8(fp)
 100fdc8:	18800088 	cmpgei	r2,r3,2
 100fdcc:	1000041e 	bne	r2,zero,100fde0 <OSFlagPend+0x170>
 100fdd0:	e0fffe17 	ldw	r3,-8(fp)
 100fdd4:	1805003a 	cmpeq	r2,r3,zero
 100fdd8:	1000641e 	bne	r2,zero,100ff6c <OSFlagPend+0x2fc>
 100fddc:	0000bf06 	br	10100dc <OSFlagPend+0x46c>
 100fde0:	e0fffe17 	ldw	r3,-8(fp)
 100fde4:	188000a0 	cmpeqi	r2,r3,2
 100fde8:	1000041e 	bne	r2,zero,100fdfc <OSFlagPend+0x18c>
 100fdec:	e0fffe17 	ldw	r3,-8(fp)
 100fdf0:	188000e0 	cmpeqi	r2,r3,3
 100fdf4:	10002f1e 	bne	r2,zero,100feb4 <OSFlagPend+0x244>
 100fdf8:	0000b806 	br	10100dc <OSFlagPend+0x46c>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
 100fdfc:	e0bff917 	ldw	r2,-28(fp)
 100fe00:	10c0020b 	ldhu	r3,8(r2)
 100fe04:	e0bffa0b 	ldhu	r2,-24(fp)
 100fe08:	1884703a 	and	r2,r3,r2
 100fe0c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 100fe10:	e0fff30b 	ldhu	r3,-52(fp)
 100fe14:	e0bffa0b 	ldhu	r2,-24(fp)
 100fe18:	18801a1e 	bne	r3,r2,100fe84 <OSFlagPend+0x214>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 100fe1c:	e0bff203 	ldbu	r2,-56(fp)
 100fe20:	10800058 	cmpnei	r2,r2,1
 100fe24:	1000091e 	bne	r2,zero,100fe4c <OSFlagPend+0x1dc>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 100fe28:	e0bff917 	ldw	r2,-28(fp)
 100fe2c:	1080020b 	ldhu	r2,8(r2)
 100fe30:	1007883a 	mov	r3,r2
 100fe34:	e0bff30b 	ldhu	r2,-52(fp)
 100fe38:	0084303a 	nor	r2,zero,r2
 100fe3c:	1884703a 	and	r2,r3,r2
 100fe40:	1007883a 	mov	r3,r2
 100fe44:	e0bff917 	ldw	r2,-28(fp)
 100fe48:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 100fe4c:	008040f4 	movhi	r2,259
 100fe50:	10977804 	addi	r2,r2,24032
 100fe54:	10c00017 	ldw	r3,0(r2)
 100fe58:	e0bff30b 	ldhu	r2,-52(fp)
 100fe5c:	18800b0d 	sth	r2,44(r3)
 100fe60:	e0bff117 	ldw	r2,-60(fp)
 100fe64:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100fe68:	e0bfef17 	ldw	r2,-68(fp)
 100fe6c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 100fe70:	e0800217 	ldw	r2,8(fp)
 100fe74:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 100fe78:	e0bff30b 	ldhu	r2,-52(fp)
 100fe7c:	e0bfff15 	stw	r2,-4(fp)
 100fe80:	00010906 	br	10102a8 <OSFlagPend+0x638>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 100fe84:	e1bffa0b 	ldhu	r6,-24(fp)
 100fe88:	e1fffb03 	ldbu	r7,-20(fp)
 100fe8c:	e0bffc0b 	ldhu	r2,-16(fp)
 100fe90:	e17ff404 	addi	r5,fp,-48
 100fe94:	d8800015 	stw	r2,0(sp)
 100fe98:	e13ff917 	ldw	r4,-28(fp)
 100fe9c:	10107c80 	call	10107c8 <OS_FlagBlock>
 100fea0:	e0bff117 	ldw	r2,-60(fp)
 100fea4:	e0bfee15 	stw	r2,-72(fp)
 100fea8:	e0bfee17 	ldw	r2,-72(fp)
 100feac:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 100feb0:	00009506 	br	1010108 <OSFlagPend+0x498>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
 100feb4:	e0bff917 	ldw	r2,-28(fp)
 100feb8:	10c0020b 	ldhu	r3,8(r2)
 100febc:	e0bffa0b 	ldhu	r2,-24(fp)
 100fec0:	1884703a 	and	r2,r3,r2
 100fec4:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 100fec8:	e0bff30b 	ldhu	r2,-52(fp)
 100fecc:	1005003a 	cmpeq	r2,r2,zero
 100fed0:	10001a1e 	bne	r2,zero,100ff3c <OSFlagPend+0x2cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 100fed4:	e0bff203 	ldbu	r2,-56(fp)
 100fed8:	10800058 	cmpnei	r2,r2,1
 100fedc:	1000091e 	bne	r2,zero,100ff04 <OSFlagPend+0x294>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 100fee0:	e0bff917 	ldw	r2,-28(fp)
 100fee4:	1080020b 	ldhu	r2,8(r2)
 100fee8:	1007883a 	mov	r3,r2
 100feec:	e0bff30b 	ldhu	r2,-52(fp)
 100fef0:	0084303a 	nor	r2,zero,r2
 100fef4:	1884703a 	and	r2,r3,r2
 100fef8:	1007883a 	mov	r3,r2
 100fefc:	e0bff917 	ldw	r2,-28(fp)
 100ff00:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 100ff04:	008040f4 	movhi	r2,259
 100ff08:	10977804 	addi	r2,r2,24032
 100ff0c:	10c00017 	ldw	r3,0(r2)
 100ff10:	e0bff30b 	ldhu	r2,-52(fp)
 100ff14:	18800b0d 	sth	r2,44(r3)
 100ff18:	e0bff117 	ldw	r2,-60(fp)
 100ff1c:	e0bfed15 	stw	r2,-76(fp)
 100ff20:	e0bfed17 	ldw	r2,-76(fp)
 100ff24:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 100ff28:	e0800217 	ldw	r2,8(fp)
 100ff2c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 100ff30:	e0fff30b 	ldhu	r3,-52(fp)
 100ff34:	e0ffff15 	stw	r3,-4(fp)
 100ff38:	0000db06 	br	10102a8 <OSFlagPend+0x638>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 100ff3c:	e1bffa0b 	ldhu	r6,-24(fp)
 100ff40:	e1fffb03 	ldbu	r7,-20(fp)
 100ff44:	e0bffc0b 	ldhu	r2,-16(fp)
 100ff48:	e17ff404 	addi	r5,fp,-48
 100ff4c:	d8800015 	stw	r2,0(sp)
 100ff50:	e13ff917 	ldw	r4,-28(fp)
 100ff54:	10107c80 	call	10107c8 <OS_FlagBlock>
 100ff58:	e0bff117 	ldw	r2,-60(fp)
 100ff5c:	e0bfec15 	stw	r2,-80(fp)
 100ff60:	e0bfec17 	ldw	r2,-80(fp)
 100ff64:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 100ff68:	00006706 	br	1010108 <OSFlagPend+0x498>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 100ff6c:	e0bff917 	ldw	r2,-28(fp)
 100ff70:	1080020b 	ldhu	r2,8(r2)
 100ff74:	0084303a 	nor	r2,zero,r2
 100ff78:	1007883a 	mov	r3,r2
 100ff7c:	e0bffa0b 	ldhu	r2,-24(fp)
 100ff80:	1884703a 	and	r2,r3,r2
 100ff84:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 100ff88:	e0fff30b 	ldhu	r3,-52(fp)
 100ff8c:	e0bffa0b 	ldhu	r2,-24(fp)
 100ff90:	1880181e 	bne	r3,r2,100fff4 <OSFlagPend+0x384>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 100ff94:	e0bff203 	ldbu	r2,-56(fp)
 100ff98:	10800058 	cmpnei	r2,r2,1
 100ff9c:	1000071e 	bne	r2,zero,100ffbc <OSFlagPend+0x34c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 100ffa0:	e0bff917 	ldw	r2,-28(fp)
 100ffa4:	10c0020b 	ldhu	r3,8(r2)
 100ffa8:	e0bff30b 	ldhu	r2,-52(fp)
 100ffac:	1884b03a 	or	r2,r3,r2
 100ffb0:	1007883a 	mov	r3,r2
 100ffb4:	e0bff917 	ldw	r2,-28(fp)
 100ffb8:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 100ffbc:	008040f4 	movhi	r2,259
 100ffc0:	10977804 	addi	r2,r2,24032
 100ffc4:	10c00017 	ldw	r3,0(r2)
 100ffc8:	e0bff30b 	ldhu	r2,-52(fp)
 100ffcc:	18800b0d 	sth	r2,44(r3)
 100ffd0:	e0bff117 	ldw	r2,-60(fp)
 100ffd4:	e0bfeb15 	stw	r2,-84(fp)
 100ffd8:	e0bfeb17 	ldw	r2,-84(fp)
 100ffdc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 100ffe0:	e0800217 	ldw	r2,8(fp)
 100ffe4:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 100ffe8:	e0bff30b 	ldhu	r2,-52(fp)
 100ffec:	e0bfff15 	stw	r2,-4(fp)
 100fff0:	0000ad06 	br	10102a8 <OSFlagPend+0x638>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 100fff4:	e1bffa0b 	ldhu	r6,-24(fp)
 100fff8:	e1fffb03 	ldbu	r7,-20(fp)
 100fffc:	e0bffc0b 	ldhu	r2,-16(fp)
 1010000:	e17ff404 	addi	r5,fp,-48
 1010004:	d8800015 	stw	r2,0(sp)
 1010008:	e13ff917 	ldw	r4,-28(fp)
 101000c:	10107c80 	call	10107c8 <OS_FlagBlock>
 1010010:	e0bff117 	ldw	r2,-60(fp)
 1010014:	e0bfea15 	stw	r2,-88(fp)
 1010018:	e0bfea17 	ldw	r2,-88(fp)
 101001c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 1010020:	00003906 	br	1010108 <OSFlagPend+0x498>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 1010024:	e0bff917 	ldw	r2,-28(fp)
 1010028:	1080020b 	ldhu	r2,8(r2)
 101002c:	0084303a 	nor	r2,zero,r2
 1010030:	1007883a 	mov	r3,r2
 1010034:	e0bffa0b 	ldhu	r2,-24(fp)
 1010038:	1884703a 	and	r2,r3,r2
 101003c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 1010040:	e0bff30b 	ldhu	r2,-52(fp)
 1010044:	1005003a 	cmpeq	r2,r2,zero
 1010048:	1000181e 	bne	r2,zero,10100ac <OSFlagPend+0x43c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 101004c:	e0bff203 	ldbu	r2,-56(fp)
 1010050:	10800058 	cmpnei	r2,r2,1
 1010054:	1000071e 	bne	r2,zero,1010074 <OSFlagPend+0x404>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 1010058:	e0bff917 	ldw	r2,-28(fp)
 101005c:	10c0020b 	ldhu	r3,8(r2)
 1010060:	e0bff30b 	ldhu	r2,-52(fp)
 1010064:	1884b03a 	or	r2,r3,r2
 1010068:	1007883a 	mov	r3,r2
 101006c:	e0bff917 	ldw	r2,-28(fp)
 1010070:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 1010074:	008040f4 	movhi	r2,259
 1010078:	10977804 	addi	r2,r2,24032
 101007c:	10c00017 	ldw	r3,0(r2)
 1010080:	e0bff30b 	ldhu	r2,-52(fp)
 1010084:	18800b0d 	sth	r2,44(r3)
 1010088:	e0bff117 	ldw	r2,-60(fp)
 101008c:	e0bfe915 	stw	r2,-92(fp)
 1010090:	e0bfe917 	ldw	r2,-92(fp)
 1010094:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 1010098:	e0800217 	ldw	r2,8(fp)
 101009c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 10100a0:	e0fff30b 	ldhu	r3,-52(fp)
 10100a4:	e0ffff15 	stw	r3,-4(fp)
 10100a8:	00007f06 	br	10102a8 <OSFlagPend+0x638>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 10100ac:	e1bffa0b 	ldhu	r6,-24(fp)
 10100b0:	e1fffb03 	ldbu	r7,-20(fp)
 10100b4:	e0bffc0b 	ldhu	r2,-16(fp)
 10100b8:	e17ff404 	addi	r5,fp,-48
 10100bc:	d8800015 	stw	r2,0(sp)
 10100c0:	e13ff917 	ldw	r4,-28(fp)
 10100c4:	10107c80 	call	10107c8 <OS_FlagBlock>
 10100c8:	e0bff117 	ldw	r2,-60(fp)
 10100cc:	e0bfe815 	stw	r2,-96(fp)
 10100d0:	e0bfe817 	ldw	r2,-96(fp)
 10100d4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 10100d8:	00000b06 	br	1010108 <OSFlagPend+0x498>
 10100dc:	e0bff117 	ldw	r2,-60(fp)
 10100e0:	e0bfe715 	stw	r2,-100(fp)
 10100e4:	e0bfe717 	ldw	r2,-100(fp)
 10100e8:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 10100ec:	e03ff30d 	sth	zero,-52(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
 10100f0:	e0c00217 	ldw	r3,8(fp)
 10100f4:	00801bc4 	movi	r2,111
 10100f8:	18800005 	stb	r2,0(r3)
             return (flags_rdy);
 10100fc:	e0bff30b 	ldhu	r2,-52(fp)
 1010100:	e0bfff15 	stw	r2,-4(fp)
 1010104:	00006806 	br	10102a8 <OSFlagPend+0x638>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
 1010108:	100e9440 	call	100e944 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101010c:	0005303a 	rdctl	r2,status
 1010110:	e0bfe615 	stw	r2,-104(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1010114:	e0ffe617 	ldw	r3,-104(fp)
 1010118:	00bfff84 	movi	r2,-2
 101011c:	1884703a 	and	r2,r3,r2
 1010120:	1001703a 	wrctl	status,r2
  
  return context;
 1010124:	e0bfe617 	ldw	r2,-104(fp)
    OS_ENTER_CRITICAL();
 1010128:	e0bff115 	stw	r2,-60(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
 101012c:	008040f4 	movhi	r2,259
 1010130:	10977804 	addi	r2,r2,24032
 1010134:	10800017 	ldw	r2,0(r2)
 1010138:	10800c43 	ldbu	r2,49(r2)
 101013c:	10803fcc 	andi	r2,r2,255
 1010140:	1005003a 	cmpeq	r2,r2,zero
 1010144:	1000221e 	bne	r2,zero,10101d0 <OSFlagPend+0x560>
        pend_stat                = OSTCBCur->OSTCBStatPend;
 1010148:	008040f4 	movhi	r2,259
 101014c:	10977804 	addi	r2,r2,24032
 1010150:	10800017 	ldw	r2,0(r2)
 1010154:	10800c43 	ldbu	r2,49(r2)
 1010158:	e0bff245 	stb	r2,-55(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 101015c:	008040f4 	movhi	r2,259
 1010160:	10977804 	addi	r2,r2,24032
 1010164:	10800017 	ldw	r2,0(r2)
 1010168:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
 101016c:	e13ff404 	addi	r4,fp,-48
 1010170:	1010ba40 	call	1010ba4 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
 1010174:	008040f4 	movhi	r2,259
 1010178:	10977804 	addi	r2,r2,24032
 101017c:	10800017 	ldw	r2,0(r2)
 1010180:	10000c05 	stb	zero,48(r2)
 1010184:	e0bff117 	ldw	r2,-60(fp)
 1010188:	e0bfe515 	stw	r2,-108(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101018c:	e0bfe517 	ldw	r2,-108(fp)
 1010190:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
 1010194:	e03ff30d 	sth	zero,-52(fp)
        switch (pend_stat) {
 1010198:	e0bff243 	ldbu	r2,-55(fp)
 101019c:	108000a0 	cmpeqi	r2,r2,2
 10101a0:	1000011e 	bne	r2,zero,10101a8 <OSFlagPend+0x538>
 10101a4:	00000406 	br	10101b8 <OSFlagPend+0x548>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
 10101a8:	e0c00217 	ldw	r3,8(fp)
 10101ac:	00800384 	movi	r2,14
 10101b0:	18800005 	stb	r2,0(r3)
                 break;
 10101b4:	00000306 	br	10101c4 <OSFlagPend+0x554>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
 10101b8:	e0c00217 	ldw	r3,8(fp)
 10101bc:	00800284 	movi	r2,10
 10101c0:	18800005 	stb	r2,0(r3)
                 break;
        }
        return (flags_rdy);
 10101c4:	e0fff30b 	ldhu	r3,-52(fp)
 10101c8:	e0ffff15 	stw	r3,-4(fp)
 10101cc:	00003606 	br	10102a8 <OSFlagPend+0x638>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
 10101d0:	008040f4 	movhi	r2,259
 10101d4:	10977804 	addi	r2,r2,24032
 10101d8:	10800017 	ldw	r2,0(r2)
 10101dc:	10800b0b 	ldhu	r2,44(r2)
 10101e0:	e0bff30d 	sth	r2,-52(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
 10101e4:	e0bff203 	ldbu	r2,-56(fp)
 10101e8:	10800058 	cmpnei	r2,r2,1
 10101ec:	1000261e 	bne	r2,zero,1010288 <OSFlagPend+0x618>
        switch (wait_type) {
 10101f0:	e0bffb03 	ldbu	r2,-20(fp)
 10101f4:	e0bffd15 	stw	r2,-12(fp)
 10101f8:	e0fffd17 	ldw	r3,-12(fp)
 10101fc:	1804803a 	cmplt	r2,r3,zero
 1010200:	1000181e 	bne	r2,zero,1010264 <OSFlagPend+0x5f4>
 1010204:	e0fffd17 	ldw	r3,-12(fp)
 1010208:	18800090 	cmplti	r2,r3,2
 101020c:	10000d1e 	bne	r2,zero,1010244 <OSFlagPend+0x5d4>
 1010210:	e0fffd17 	ldw	r3,-12(fp)
 1010214:	18800108 	cmpgei	r2,r3,4
 1010218:	1000121e 	bne	r2,zero,1010264 <OSFlagPend+0x5f4>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
 101021c:	e0bff917 	ldw	r2,-28(fp)
 1010220:	1080020b 	ldhu	r2,8(r2)
 1010224:	1007883a 	mov	r3,r2
 1010228:	e0bff30b 	ldhu	r2,-52(fp)
 101022c:	0084303a 	nor	r2,zero,r2
 1010230:	1884703a 	and	r2,r3,r2
 1010234:	1007883a 	mov	r3,r2
 1010238:	e0bff917 	ldw	r2,-28(fp)
 101023c:	10c0020d 	sth	r3,8(r2)
                 break;
 1010240:	00001106 	br	1010288 <OSFlagPend+0x618>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
 1010244:	e0bff917 	ldw	r2,-28(fp)
 1010248:	10c0020b 	ldhu	r3,8(r2)
 101024c:	e0bff30b 	ldhu	r2,-52(fp)
 1010250:	1884b03a 	or	r2,r3,r2
 1010254:	1007883a 	mov	r3,r2
 1010258:	e0bff917 	ldw	r2,-28(fp)
 101025c:	10c0020d 	sth	r3,8(r2)
                 break;
 1010260:	00000906 	br	1010288 <OSFlagPend+0x618>
 1010264:	e0bff117 	ldw	r2,-60(fp)
 1010268:	e0bfe415 	stw	r2,-112(fp)
 101026c:	e0bfe417 	ldw	r2,-112(fp)
 1010270:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 1010274:	e0c00217 	ldw	r3,8(fp)
 1010278:	00801bc4 	movi	r2,111
 101027c:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
 1010280:	e03fff15 	stw	zero,-4(fp)
 1010284:	00000806 	br	10102a8 <OSFlagPend+0x638>
 1010288:	e0bff117 	ldw	r2,-60(fp)
 101028c:	e0bfe315 	stw	r2,-116(fp)
 1010290:	e0bfe317 	ldw	r2,-116(fp)
 1010294:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
 1010298:	e0800217 	ldw	r2,8(fp)
 101029c:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
 10102a0:	e0bff30b 	ldhu	r2,-52(fp)
 10102a4:	e0bfff15 	stw	r2,-4(fp)
 10102a8:	e0bfff17 	ldw	r2,-4(fp)
}
 10102ac:	e037883a 	mov	sp,fp
 10102b0:	dfc00117 	ldw	ra,4(sp)
 10102b4:	df000017 	ldw	fp,0(sp)
 10102b8:	dec00204 	addi	sp,sp,8
 10102bc:	f800283a 	ret

010102c0 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
 10102c0:	f811883a 	mov	r8,ra
 10102c4:	100c3d80 	call	100c3d8 <_mcount>
 10102c8:	403f883a 	mov	ra,r8
 10102cc:	defffb04 	addi	sp,sp,-20
 10102d0:	df000415 	stw	fp,16(sp)
 10102d4:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 10102d8:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10102dc:	0005303a 	rdctl	r2,status
 10102e0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10102e4:	e0fffd17 	ldw	r3,-12(fp)
 10102e8:	00bfff84 	movi	r2,-2
 10102ec:	1884703a 	and	r2,r3,r2
 10102f0:	1001703a 	wrctl	status,r2
  
  return context;
 10102f4:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 10102f8:	e0bffe15 	stw	r2,-8(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
 10102fc:	008040f4 	movhi	r2,259
 1010300:	10977804 	addi	r2,r2,24032
 1010304:	10800017 	ldw	r2,0(r2)
 1010308:	10800b0b 	ldhu	r2,44(r2)
 101030c:	e0bfff0d 	sth	r2,-4(fp)
 1010310:	e0bffe17 	ldw	r2,-8(fp)
 1010314:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1010318:	e0bffc17 	ldw	r2,-16(fp)
 101031c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
 1010320:	e0bfff0b 	ldhu	r2,-4(fp)
}
 1010324:	e037883a 	mov	sp,fp
 1010328:	df000017 	ldw	fp,0(sp)
 101032c:	dec00104 	addi	sp,sp,4
 1010330:	f800283a 	ret

01010334 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
 1010334:	f811883a 	mov	r8,ra
 1010338:	100c3d80 	call	100c3d8 <_mcount>
 101033c:	403f883a 	mov	ra,r8
 1010340:	deffed04 	addi	sp,sp,-76
 1010344:	dfc01215 	stw	ra,72(sp)
 1010348:	df001115 	stw	fp,68(sp)
 101034c:	df001104 	addi	fp,sp,68
 1010350:	e13ff915 	stw	r4,-28(fp)
 1010354:	e1fffc15 	stw	r7,-16(fp)
 1010358:	e17ffa0d 	sth	r5,-24(fp)
 101035c:	e1bffb05 	stb	r6,-20(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
 1010360:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 1010364:	e0bffc17 	ldw	r2,-16(fp)
 1010368:	1004c03a 	cmpne	r2,r2,zero
 101036c:	1000021e 	bne	r2,zero,1010378 <OSFlagPost+0x44>
        return ((OS_FLAGS)0);
 1010370:	e03fff15 	stw	zero,-4(fp)
 1010374:	0000d606 	br	10106d0 <OSFlagPost+0x39c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
 1010378:	e0bff917 	ldw	r2,-28(fp)
 101037c:	1004c03a 	cmpne	r2,r2,zero
 1010380:	1000051e 	bne	r2,zero,1010398 <OSFlagPost+0x64>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 1010384:	e0fffc17 	ldw	r3,-16(fp)
 1010388:	00801b84 	movi	r2,110
 101038c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 1010390:	e03fff15 	stw	zero,-4(fp)
 1010394:	0000ce06 	br	10106d0 <OSFlagPost+0x39c>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
 1010398:	e0bff917 	ldw	r2,-28(fp)
 101039c:	10800003 	ldbu	r2,0(r2)
 10103a0:	10803fcc 	andi	r2,r2,255
 10103a4:	10800160 	cmpeqi	r2,r2,5
 10103a8:	1000051e 	bne	r2,zero,10103c0 <OSFlagPost+0x8c>
        *perr = OS_ERR_EVENT_TYPE;
 10103ac:	e0fffc17 	ldw	r3,-16(fp)
 10103b0:	00800044 	movi	r2,1
 10103b4:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 10103b8:	e03fff15 	stw	zero,-4(fp)
 10103bc:	0000c406 	br	10106d0 <OSFlagPost+0x39c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10103c0:	0005303a 	rdctl	r2,status
 10103c4:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10103c8:	e0fff417 	ldw	r3,-48(fp)
 10103cc:	00bfff84 	movi	r2,-2
 10103d0:	1884703a 	and	r2,r3,r2
 10103d4:	1001703a 	wrctl	status,r2
  
  return context;
 10103d8:	e0bff417 	ldw	r2,-48(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 10103dc:	e0bff515 	stw	r2,-44(fp)
    switch (opt) {
 10103e0:	e0bffb03 	ldbu	r2,-20(fp)
 10103e4:	e0bffe15 	stw	r2,-8(fp)
 10103e8:	e0fffe17 	ldw	r3,-8(fp)
 10103ec:	1805003a 	cmpeq	r2,r3,zero
 10103f0:	1000041e 	bne	r2,zero,1010404 <OSFlagPost+0xd0>
 10103f4:	e0fffe17 	ldw	r3,-8(fp)
 10103f8:	18800060 	cmpeqi	r2,r3,1
 10103fc:	10000b1e 	bne	r2,zero,101042c <OSFlagPost+0xf8>
 1010400:	00001206 	br	101044c <OSFlagPost+0x118>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
 1010404:	e0bff917 	ldw	r2,-28(fp)
 1010408:	1080020b 	ldhu	r2,8(r2)
 101040c:	1007883a 	mov	r3,r2
 1010410:	e0bffa0b 	ldhu	r2,-24(fp)
 1010414:	0084303a 	nor	r2,zero,r2
 1010418:	1884703a 	and	r2,r3,r2
 101041c:	1007883a 	mov	r3,r2
 1010420:	e0bff917 	ldw	r2,-28(fp)
 1010424:	10c0020d 	sth	r3,8(r2)
             break;
 1010428:	00001106 	br	1010470 <OSFlagPost+0x13c>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
 101042c:	e0bff917 	ldw	r2,-28(fp)
 1010430:	10c0020b 	ldhu	r3,8(r2)
 1010434:	e0bffa0b 	ldhu	r2,-24(fp)
 1010438:	1884b03a 	or	r2,r3,r2
 101043c:	1007883a 	mov	r3,r2
 1010440:	e0bff917 	ldw	r2,-28(fp)
 1010444:	10c0020d 	sth	r3,8(r2)
             break;
 1010448:	00000906 	br	1010470 <OSFlagPost+0x13c>
 101044c:	e0bff517 	ldw	r2,-44(fp)
 1010450:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1010454:	e0bff317 	ldw	r2,-52(fp)
 1010458:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
 101045c:	e0fffc17 	ldw	r3,-16(fp)
 1010460:	00801c44 	movi	r2,113
 1010464:	18800005 	stb	r2,0(r3)
             return ((OS_FLAGS)0);
 1010468:	e03fff15 	stw	zero,-4(fp)
 101046c:	00009806 	br	10106d0 <OSFlagPost+0x39c>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
 1010470:	e03ff785 	stb	zero,-34(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 1010474:	e0bff917 	ldw	r2,-28(fp)
 1010478:	10800117 	ldw	r2,4(r2)
 101047c:	e0bff815 	stw	r2,-32(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 1010480:	00007506 	br	1010658 <OSFlagPost+0x324>
        switch (pnode->OSFlagNodeWaitType) {
 1010484:	e0bff817 	ldw	r2,-32(fp)
 1010488:	10800483 	ldbu	r2,18(r2)
 101048c:	10803fcc 	andi	r2,r2,255
 1010490:	e0bffd15 	stw	r2,-12(fp)
 1010494:	e0fffd17 	ldw	r3,-12(fp)
 1010498:	18800060 	cmpeqi	r2,r3,1
 101049c:	10004d1e 	bne	r2,zero,10105d4 <OSFlagPost+0x2a0>
 10104a0:	e0fffd17 	ldw	r3,-12(fp)
 10104a4:	18800088 	cmpgei	r2,r3,2
 10104a8:	1000041e 	bne	r2,zero,10104bc <OSFlagPost+0x188>
 10104ac:	e0fffd17 	ldw	r3,-12(fp)
 10104b0:	1805003a 	cmpeq	r2,r3,zero
 10104b4:	1000301e 	bne	r2,zero,1010578 <OSFlagPost+0x244>
 10104b8:	00005b06 	br	1010628 <OSFlagPost+0x2f4>
 10104bc:	e0fffd17 	ldw	r3,-12(fp)
 10104c0:	188000a0 	cmpeqi	r2,r3,2
 10104c4:	1000041e 	bne	r2,zero,10104d8 <OSFlagPost+0x1a4>
 10104c8:	e0fffd17 	ldw	r3,-12(fp)
 10104cc:	188000e0 	cmpeqi	r2,r3,3
 10104d0:	1000161e 	bne	r2,zero,101052c <OSFlagPost+0x1f8>
 10104d4:	00005406 	br	1010628 <OSFlagPost+0x2f4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 10104d8:	e0bff917 	ldw	r2,-28(fp)
 10104dc:	10c0020b 	ldhu	r3,8(r2)
 10104e0:	e0bff817 	ldw	r2,-32(fp)
 10104e4:	1080040b 	ldhu	r2,16(r2)
 10104e8:	1884703a 	and	r2,r3,r2
 10104ec:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 10104f0:	e0bff817 	ldw	r2,-32(fp)
 10104f4:	1080040b 	ldhu	r2,16(r2)
 10104f8:	10ffffcc 	andi	r3,r2,65535
 10104fc:	e0bff68b 	ldhu	r2,-38(fp)
 1010500:	1880521e 	bne	r3,r2,101064c <OSFlagPost+0x318>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 1010504:	e17ff68b 	ldhu	r5,-38(fp)
 1010508:	e13ff817 	ldw	r4,-32(fp)
 101050c:	1010a880 	call	1010a88 <OS_FlagTaskRdy>
 1010510:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
 1010514:	e0bff603 	ldbu	r2,-40(fp)
 1010518:	10800058 	cmpnei	r2,r2,1
 101051c:	10004b1e 	bne	r2,zero,101064c <OSFlagPost+0x318>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 1010520:	00800044 	movi	r2,1
 1010524:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
 1010528:	00004806 	br	101064c <OSFlagPost+0x318>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 101052c:	e0bff917 	ldw	r2,-28(fp)
 1010530:	10c0020b 	ldhu	r3,8(r2)
 1010534:	e0bff817 	ldw	r2,-32(fp)
 1010538:	1080040b 	ldhu	r2,16(r2)
 101053c:	1884703a 	and	r2,r3,r2
 1010540:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 1010544:	e0bff68b 	ldhu	r2,-38(fp)
 1010548:	1005003a 	cmpeq	r2,r2,zero
 101054c:	10003f1e 	bne	r2,zero,101064c <OSFlagPost+0x318>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 1010550:	e17ff68b 	ldhu	r5,-38(fp)
 1010554:	e13ff817 	ldw	r4,-32(fp)
 1010558:	1010a880 	call	1010a88 <OS_FlagTaskRdy>
 101055c:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
 1010560:	e0bff603 	ldbu	r2,-40(fp)
 1010564:	10800058 	cmpnei	r2,r2,1
 1010568:	1000381e 	bne	r2,zero,101064c <OSFlagPost+0x318>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 101056c:	00800044 	movi	r2,1
 1010570:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
 1010574:	00003506 	br	101064c <OSFlagPost+0x318>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 1010578:	e0bff917 	ldw	r2,-28(fp)
 101057c:	1080020b 	ldhu	r2,8(r2)
 1010580:	0084303a 	nor	r2,zero,r2
 1010584:	1007883a 	mov	r3,r2
 1010588:	e0bff817 	ldw	r2,-32(fp)
 101058c:	1080040b 	ldhu	r2,16(r2)
 1010590:	1884703a 	and	r2,r3,r2
 1010594:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 1010598:	e0bff817 	ldw	r2,-32(fp)
 101059c:	1080040b 	ldhu	r2,16(r2)
 10105a0:	10ffffcc 	andi	r3,r2,65535
 10105a4:	e0bff68b 	ldhu	r2,-38(fp)
 10105a8:	1880281e 	bne	r3,r2,101064c <OSFlagPost+0x318>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 10105ac:	e17ff68b 	ldhu	r5,-38(fp)
 10105b0:	e13ff817 	ldw	r4,-32(fp)
 10105b4:	1010a880 	call	1010a88 <OS_FlagTaskRdy>
 10105b8:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
 10105bc:	e0bff603 	ldbu	r2,-40(fp)
 10105c0:	10800058 	cmpnei	r2,r2,1
 10105c4:	1000211e 	bne	r2,zero,101064c <OSFlagPost+0x318>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 10105c8:	00800044 	movi	r2,1
 10105cc:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
 10105d0:	00001e06 	br	101064c <OSFlagPost+0x318>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 10105d4:	e0bff917 	ldw	r2,-28(fp)
 10105d8:	1080020b 	ldhu	r2,8(r2)
 10105dc:	0084303a 	nor	r2,zero,r2
 10105e0:	1007883a 	mov	r3,r2
 10105e4:	e0bff817 	ldw	r2,-32(fp)
 10105e8:	1080040b 	ldhu	r2,16(r2)
 10105ec:	1884703a 	and	r2,r3,r2
 10105f0:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 10105f4:	e0bff68b 	ldhu	r2,-38(fp)
 10105f8:	1005003a 	cmpeq	r2,r2,zero
 10105fc:	1000131e 	bne	r2,zero,101064c <OSFlagPost+0x318>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 1010600:	e17ff68b 	ldhu	r5,-38(fp)
 1010604:	e13ff817 	ldw	r4,-32(fp)
 1010608:	1010a880 	call	1010a88 <OS_FlagTaskRdy>
 101060c:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
 1010610:	e0bff603 	ldbu	r2,-40(fp)
 1010614:	10800058 	cmpnei	r2,r2,1
 1010618:	10000c1e 	bne	r2,zero,101064c <OSFlagPost+0x318>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 101061c:	00800044 	movi	r2,1
 1010620:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
 1010624:	00000906 	br	101064c <OSFlagPost+0x318>
 1010628:	e0bff517 	ldw	r2,-44(fp)
 101062c:	e0bff215 	stw	r2,-56(fp)
 1010630:	e0bff217 	ldw	r2,-56(fp)
 1010634:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 1010638:	e0fffc17 	ldw	r3,-16(fp)
 101063c:	00801bc4 	movi	r2,111
 1010640:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
 1010644:	e03fff15 	stw	zero,-4(fp)
 1010648:	00002106 	br	10106d0 <OSFlagPost+0x39c>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
 101064c:	e0bff817 	ldw	r2,-32(fp)
 1010650:	10800017 	ldw	r2,0(r2)
 1010654:	e0bff815 	stw	r2,-32(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 1010658:	e0bff817 	ldw	r2,-32(fp)
 101065c:	1004c03a 	cmpne	r2,r2,zero
 1010660:	103f881e 	bne	r2,zero,1010484 <OSFlagPost+0x150>
 1010664:	e0bff517 	ldw	r2,-44(fp)
 1010668:	e0bff115 	stw	r2,-60(fp)
 101066c:	e0bff117 	ldw	r2,-60(fp)
 1010670:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
 1010674:	e0bff783 	ldbu	r2,-34(fp)
 1010678:	10800058 	cmpnei	r2,r2,1
 101067c:	1000011e 	bne	r2,zero,1010684 <OSFlagPost+0x350>
        OS_Sched();
 1010680:	100e9440 	call	100e944 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1010684:	0005303a 	rdctl	r2,status
 1010688:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101068c:	e0fff017 	ldw	r3,-64(fp)
 1010690:	00bfff84 	movi	r2,-2
 1010694:	1884703a 	and	r2,r3,r2
 1010698:	1001703a 	wrctl	status,r2
  
  return context;
 101069c:	e0bff017 	ldw	r2,-64(fp)
    }
    OS_ENTER_CRITICAL();
 10106a0:	e0bff515 	stw	r2,-44(fp)
    flags_cur = pgrp->OSFlagFlags;
 10106a4:	e0bff917 	ldw	r2,-28(fp)
 10106a8:	1080020b 	ldhu	r2,8(r2)
 10106ac:	e0bff70d 	sth	r2,-36(fp)
 10106b0:	e0bff517 	ldw	r2,-44(fp)
 10106b4:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10106b8:	e0bfef17 	ldw	r2,-68(fp)
 10106bc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
 10106c0:	e0bffc17 	ldw	r2,-16(fp)
 10106c4:	10000005 	stb	zero,0(r2)
    return (flags_cur);
 10106c8:	e0bff70b 	ldhu	r2,-36(fp)
 10106cc:	e0bfff15 	stw	r2,-4(fp)
 10106d0:	e0bfff17 	ldw	r2,-4(fp)
}
 10106d4:	e037883a 	mov	sp,fp
 10106d8:	dfc00117 	ldw	ra,4(sp)
 10106dc:	df000017 	ldw	fp,0(sp)
 10106e0:	dec00204 	addi	sp,sp,8
 10106e4:	f800283a 	ret

010106e8 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
 10106e8:	f811883a 	mov	r8,ra
 10106ec:	100c3d80 	call	100c3d8 <_mcount>
 10106f0:	403f883a 	mov	ra,r8
 10106f4:	defff804 	addi	sp,sp,-32
 10106f8:	df000715 	stw	fp,28(sp)
 10106fc:	df000704 	addi	fp,sp,28
 1010700:	e13ffd15 	stw	r4,-12(fp)
 1010704:	e17ffe15 	stw	r5,-8(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
 1010708:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
 101070c:	e0bffe17 	ldw	r2,-8(fp)
 1010710:	1004c03a 	cmpne	r2,r2,zero
 1010714:	1000021e 	bne	r2,zero,1010720 <OSFlagQuery+0x38>
        return ((OS_FLAGS)0);
 1010718:	e03fff15 	stw	zero,-4(fp)
 101071c:	00002506 	br	10107b4 <OSFlagQuery+0xcc>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
 1010720:	e0bffd17 	ldw	r2,-12(fp)
 1010724:	1004c03a 	cmpne	r2,r2,zero
 1010728:	1000051e 	bne	r2,zero,1010740 <OSFlagQuery+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 101072c:	e0fffe17 	ldw	r3,-8(fp)
 1010730:	00801b84 	movi	r2,110
 1010734:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 1010738:	e03fff15 	stw	zero,-4(fp)
 101073c:	00001d06 	br	10107b4 <OSFlagQuery+0xcc>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
 1010740:	e0bffd17 	ldw	r2,-12(fp)
 1010744:	10800003 	ldbu	r2,0(r2)
 1010748:	10803fcc 	andi	r2,r2,255
 101074c:	10800160 	cmpeqi	r2,r2,5
 1010750:	1000051e 	bne	r2,zero,1010768 <OSFlagQuery+0x80>
        *perr = OS_ERR_EVENT_TYPE;
 1010754:	e0fffe17 	ldw	r3,-8(fp)
 1010758:	00800044 	movi	r2,1
 101075c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 1010760:	e03fff15 	stw	zero,-4(fp)
 1010764:	00001306 	br	10107b4 <OSFlagQuery+0xcc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1010768:	0005303a 	rdctl	r2,status
 101076c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1010770:	e0fffa17 	ldw	r3,-24(fp)
 1010774:	00bfff84 	movi	r2,-2
 1010778:	1884703a 	and	r2,r3,r2
 101077c:	1001703a 	wrctl	status,r2
  
  return context;
 1010780:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 1010784:	e0bffb15 	stw	r2,-20(fp)
    flags = pgrp->OSFlagFlags;
 1010788:	e0bffd17 	ldw	r2,-12(fp)
 101078c:	1080020b 	ldhu	r2,8(r2)
 1010790:	e0bffc0d 	sth	r2,-16(fp)
 1010794:	e0bffb17 	ldw	r2,-20(fp)
 1010798:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101079c:	e0bff917 	ldw	r2,-28(fp)
 10107a0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 10107a4:	e0bffe17 	ldw	r2,-8(fp)
 10107a8:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
 10107ac:	e0bffc0b 	ldhu	r2,-16(fp)
 10107b0:	e0bfff15 	stw	r2,-4(fp)
 10107b4:	e0bfff17 	ldw	r2,-4(fp)
}
 10107b8:	e037883a 	mov	sp,fp
 10107bc:	df000017 	ldw	fp,0(sp)
 10107c0:	dec00104 	addi	sp,sp,4
 10107c4:	f800283a 	ret

010107c8 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
 10107c8:	f811883a 	mov	r8,ra
 10107cc:	100c3d80 	call	100c3d8 <_mcount>
 10107d0:	403f883a 	mov	ra,r8
 10107d4:	defff804 	addi	sp,sp,-32
 10107d8:	df000715 	stw	fp,28(sp)
 10107dc:	df000704 	addi	fp,sp,28
 10107e0:	e13ffb15 	stw	r4,-20(fp)
 10107e4:	e17ffc15 	stw	r5,-16(fp)
 10107e8:	e0800117 	ldw	r2,4(fp)
 10107ec:	e1bffd0d 	sth	r6,-12(fp)
 10107f0:	e1fffe05 	stb	r7,-8(fp)
 10107f4:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
 10107f8:	008040f4 	movhi	r2,259
 10107fc:	10977804 	addi	r2,r2,24032
 1010800:	10c00017 	ldw	r3,0(r2)
 1010804:	008040f4 	movhi	r2,259
 1010808:	10977804 	addi	r2,r2,24032
 101080c:	10800017 	ldw	r2,0(r2)
 1010810:	10800c03 	ldbu	r2,48(r2)
 1010814:	10800814 	ori	r2,r2,32
 1010818:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
 101081c:	008040f4 	movhi	r2,259
 1010820:	10977804 	addi	r2,r2,24032
 1010824:	10800017 	ldw	r2,0(r2)
 1010828:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
 101082c:	008040f4 	movhi	r2,259
 1010830:	10977804 	addi	r2,r2,24032
 1010834:	10c00017 	ldw	r3,0(r2)
 1010838:	e0bfff0b 	ldhu	r2,-4(fp)
 101083c:	18800b8d 	sth	r2,46(r3)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
 1010840:	008040f4 	movhi	r2,259
 1010844:	10977804 	addi	r2,r2,24032
 1010848:	10c00017 	ldw	r3,0(r2)
 101084c:	e0bffc17 	ldw	r2,-16(fp)
 1010850:	18800a15 	stw	r2,40(r3)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
 1010854:	e0fffc17 	ldw	r3,-16(fp)
 1010858:	e0bffd0b 	ldhu	r2,-12(fp)
 101085c:	1880040d 	sth	r2,16(r3)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
 1010860:	e0fffc17 	ldw	r3,-16(fp)
 1010864:	e0bffe03 	ldbu	r2,-8(fp)
 1010868:	18800485 	stb	r2,18(r3)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
 101086c:	008040f4 	movhi	r2,259
 1010870:	10977804 	addi	r2,r2,24032
 1010874:	10c00017 	ldw	r3,0(r2)
 1010878:	e0bffc17 	ldw	r2,-16(fp)
 101087c:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
 1010880:	e0bffb17 	ldw	r2,-20(fp)
 1010884:	10c00117 	ldw	r3,4(r2)
 1010888:	e0bffc17 	ldw	r2,-16(fp)
 101088c:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
 1010890:	e0bffc17 	ldw	r2,-16(fp)
 1010894:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
 1010898:	e0fffc17 	ldw	r3,-16(fp)
 101089c:	e0bffb17 	ldw	r2,-20(fp)
 10108a0:	18800315 	stw	r2,12(r3)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 10108a4:	e0bffb17 	ldw	r2,-20(fp)
 10108a8:	10800117 	ldw	r2,4(r2)
 10108ac:	e0bffa15 	stw	r2,-24(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
 10108b0:	e0bffa17 	ldw	r2,-24(fp)
 10108b4:	1005003a 	cmpeq	r2,r2,zero
 10108b8:	1000031e 	bne	r2,zero,10108c8 <OS_FlagBlock+0x100>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
 10108bc:	e0fffa17 	ldw	r3,-24(fp)
 10108c0:	e0bffc17 	ldw	r2,-16(fp)
 10108c4:	18800115 	stw	r2,4(r3)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
 10108c8:	e0fffb17 	ldw	r3,-20(fp)
 10108cc:	e0bffc17 	ldw	r2,-16(fp)
 10108d0:	18800115 	stw	r2,4(r3)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
 10108d4:	008040f4 	movhi	r2,259
 10108d8:	10977804 	addi	r2,r2,24032
 10108dc:	10800017 	ldw	r2,0(r2)
 10108e0:	10800d03 	ldbu	r2,52(r2)
 10108e4:	e0bff905 	stb	r2,-28(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 10108e8:	e13ff903 	ldbu	r4,-28(fp)
 10108ec:	e0fff903 	ldbu	r3,-28(fp)
 10108f0:	008040f4 	movhi	r2,259
 10108f4:	10977544 	addi	r2,r2,24021
 10108f8:	10c5883a 	add	r2,r2,r3
 10108fc:	10800003 	ldbu	r2,0(r2)
 1010900:	1007883a 	mov	r3,r2
 1010904:	008040f4 	movhi	r2,259
 1010908:	10977804 	addi	r2,r2,24032
 101090c:	10800017 	ldw	r2,0(r2)
 1010910:	10800d43 	ldbu	r2,53(r2)
 1010914:	0084303a 	nor	r2,zero,r2
 1010918:	1884703a 	and	r2,r3,r2
 101091c:	1007883a 	mov	r3,r2
 1010920:	008040f4 	movhi	r2,259
 1010924:	10977544 	addi	r2,r2,24021
 1010928:	1105883a 	add	r2,r2,r4
 101092c:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0x00) {
 1010930:	e0fff903 	ldbu	r3,-28(fp)
 1010934:	008040f4 	movhi	r2,259
 1010938:	10977544 	addi	r2,r2,24021
 101093c:	10c5883a 	add	r2,r2,r3
 1010940:	10800003 	ldbu	r2,0(r2)
 1010944:	10803fcc 	andi	r2,r2,255
 1010948:	1004c03a 	cmpne	r2,r2,zero
 101094c:	10000e1e 	bne	r2,zero,1010988 <OS_FlagBlock+0x1c0>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 1010950:	008040f4 	movhi	r2,259
 1010954:	10977804 	addi	r2,r2,24032
 1010958:	10800017 	ldw	r2,0(r2)
 101095c:	10800d83 	ldbu	r2,54(r2)
 1010960:	0084303a 	nor	r2,zero,r2
 1010964:	1007883a 	mov	r3,r2
 1010968:	008040f4 	movhi	r2,259
 101096c:	10977504 	addi	r2,r2,24020
 1010970:	10800003 	ldbu	r2,0(r2)
 1010974:	1884703a 	and	r2,r3,r2
 1010978:	1007883a 	mov	r3,r2
 101097c:	008040f4 	movhi	r2,259
 1010980:	10977504 	addi	r2,r2,24020
 1010984:	10c00005 	stb	r3,0(r2)
    }
}
 1010988:	e037883a 	mov	sp,fp
 101098c:	df000017 	ldw	fp,0(sp)
 1010990:	dec00104 	addi	sp,sp,4
 1010994:	f800283a 	ret

01010998 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
 1010998:	f811883a 	mov	r8,ra
 101099c:	100c3d80 	call	100c3d8 <_mcount>
 10109a0:	403f883a 	mov	ra,r8
 10109a4:	defffb04 	addi	sp,sp,-20
 10109a8:	dfc00415 	stw	ra,16(sp)
 10109ac:	df000315 	stw	fp,12(sp)
 10109b0:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
 10109b4:	01004134 	movhi	r4,260
 10109b8:	2117a004 	addi	r4,r4,24192
 10109bc:	0140dc04 	movi	r5,880
 10109c0:	100e86c0 	call	100e86c <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
 10109c4:	00804134 	movhi	r2,260
 10109c8:	1097a004 	addi	r2,r2,24192
 10109cc:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
 10109d0:	00804134 	movhi	r2,260
 10109d4:	1097ab04 	addi	r2,r2,24236
 10109d8:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 10109dc:	e03fff0d 	sth	zero,-4(fp)
 10109e0:	00001306 	br	1010a30 <OS_FlagInit+0x98>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 10109e4:	e0bffe17 	ldw	r2,-8(fp)
 10109e8:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
 10109ec:	e0fffe17 	ldw	r3,-8(fp)
 10109f0:	e0bffd17 	ldw	r2,-12(fp)
 10109f4:	18800115 	stw	r2,4(r3)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
 10109f8:	e0fffe17 	ldw	r3,-8(fp)
 10109fc:	00800fc4 	movi	r2,63
 1010a00:	18800285 	stb	r2,10(r3)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 1010a04:	e0bffe17 	ldw	r2,-8(fp)
 1010a08:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
 1010a0c:	e0bffe17 	ldw	r2,-8(fp)
 1010a10:	10800b04 	addi	r2,r2,44
 1010a14:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
 1010a18:	e0bffd17 	ldw	r2,-12(fp)
 1010a1c:	10800b04 	addi	r2,r2,44
 1010a20:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 1010a24:	e0bfff0b 	ldhu	r2,-4(fp)
 1010a28:	10800044 	addi	r2,r2,1
 1010a2c:	e0bfff0d 	sth	r2,-4(fp)
 1010a30:	e0bfff0b 	ldhu	r2,-4(fp)
 1010a34:	108004f0 	cmpltui	r2,r2,19
 1010a38:	103fea1e 	bne	r2,zero,10109e4 <OS_FlagInit+0x4c>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 1010a3c:	e0bffe17 	ldw	r2,-8(fp)
 1010a40:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
 1010a44:	e0bffe17 	ldw	r2,-8(fp)
 1010a48:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
 1010a4c:	e0fffe17 	ldw	r3,-8(fp)
 1010a50:	00800fc4 	movi	r2,63
 1010a54:	18800285 	stb	r2,10(r3)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 1010a58:	e0bffe17 	ldw	r2,-8(fp)
 1010a5c:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
 1010a60:	00c040f4 	movhi	r3,259
 1010a64:	18d77c04 	addi	r3,r3,24048
 1010a68:	00804134 	movhi	r2,260
 1010a6c:	1097a004 	addi	r2,r2,24192
 1010a70:	18800015 	stw	r2,0(r3)
#endif
}
 1010a74:	e037883a 	mov	sp,fp
 1010a78:	dfc00117 	ldw	ra,4(sp)
 1010a7c:	df000017 	ldw	fp,0(sp)
 1010a80:	dec00204 	addi	sp,sp,8
 1010a84:	f800283a 	ret

01010a88 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
 1010a88:	f811883a 	mov	r8,ra
 1010a8c:	100c3d80 	call	100c3d8 <_mcount>
 1010a90:	403f883a 	mov	ra,r8
 1010a94:	defffa04 	addi	sp,sp,-24
 1010a98:	dfc00515 	stw	ra,20(sp)
 1010a9c:	df000415 	stw	fp,16(sp)
 1010aa0:	df000404 	addi	fp,sp,16
 1010aa4:	e13ffe15 	stw	r4,-8(fp)
 1010aa8:	e17fff0d 	sth	r5,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
 1010aac:	e0bffe17 	ldw	r2,-8(fp)
 1010ab0:	10800217 	ldw	r2,8(r2)
 1010ab4:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
 1010ab8:	e0bffd17 	ldw	r2,-12(fp)
 1010abc:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
 1010ac0:	e0fffd17 	ldw	r3,-12(fp)
 1010ac4:	e0bfff0b 	ldhu	r2,-4(fp)
 1010ac8:	18800b0d 	sth	r2,44(r3)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
 1010acc:	e0bffd17 	ldw	r2,-12(fp)
 1010ad0:	10c00c03 	ldbu	r3,48(r2)
 1010ad4:	00bff7c4 	movi	r2,-33
 1010ad8:	1884703a 	and	r2,r3,r2
 1010adc:	1007883a 	mov	r3,r2
 1010ae0:	e0bffd17 	ldw	r2,-12(fp)
 1010ae4:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
 1010ae8:	e0bffd17 	ldw	r2,-12(fp)
 1010aec:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
 1010af0:	e0bffd17 	ldw	r2,-12(fp)
 1010af4:	10800c03 	ldbu	r2,48(r2)
 1010af8:	10803fcc 	andi	r2,r2,255
 1010afc:	1004c03a 	cmpne	r2,r2,zero
 1010b00:	10001f1e 	bne	r2,zero,1010b80 <OS_FlagTaskRdy+0xf8>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
 1010b04:	e0bffd17 	ldw	r2,-12(fp)
 1010b08:	10c00d83 	ldbu	r3,54(r2)
 1010b0c:	008040f4 	movhi	r2,259
 1010b10:	10977504 	addi	r2,r2,24020
 1010b14:	10800003 	ldbu	r2,0(r2)
 1010b18:	1884b03a 	or	r2,r3,r2
 1010b1c:	1007883a 	mov	r3,r2
 1010b20:	008040f4 	movhi	r2,259
 1010b24:	10977504 	addi	r2,r2,24020
 1010b28:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 1010b2c:	e0bffd17 	ldw	r2,-12(fp)
 1010b30:	10800d03 	ldbu	r2,52(r2)
 1010b34:	11003fcc 	andi	r4,r2,255
 1010b38:	e0bffd17 	ldw	r2,-12(fp)
 1010b3c:	10800d03 	ldbu	r2,52(r2)
 1010b40:	10c03fcc 	andi	r3,r2,255
 1010b44:	008040f4 	movhi	r2,259
 1010b48:	10977544 	addi	r2,r2,24021
 1010b4c:	10c5883a 	add	r2,r2,r3
 1010b50:	10c00003 	ldbu	r3,0(r2)
 1010b54:	e0bffd17 	ldw	r2,-12(fp)
 1010b58:	10800d43 	ldbu	r2,53(r2)
 1010b5c:	1884b03a 	or	r2,r3,r2
 1010b60:	1007883a 	mov	r3,r2
 1010b64:	008040f4 	movhi	r2,259
 1010b68:	10977544 	addi	r2,r2,24021
 1010b6c:	1105883a 	add	r2,r2,r4
 1010b70:	10c00005 	stb	r3,0(r2)
        sched                   = OS_TRUE;
 1010b74:	00800044 	movi	r2,1
 1010b78:	e0bffc05 	stb	r2,-16(fp)
 1010b7c:	00000106 	br	1010b84 <OS_FlagTaskRdy+0xfc>
    } else {
        sched                   = OS_FALSE;
 1010b80:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
 1010b84:	e13ffe17 	ldw	r4,-8(fp)
 1010b88:	1010ba40 	call	1010ba4 <OS_FlagUnlink>
    return (sched);
 1010b8c:	e0bffc03 	ldbu	r2,-16(fp)
}
 1010b90:	e037883a 	mov	sp,fp
 1010b94:	dfc00117 	ldw	ra,4(sp)
 1010b98:	df000017 	ldw	fp,0(sp)
 1010b9c:	dec00204 	addi	sp,sp,8
 1010ba0:	f800283a 	ret

01010ba4 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
 1010ba4:	f811883a 	mov	r8,ra
 1010ba8:	100c3d80 	call	100c3d8 <_mcount>
 1010bac:	403f883a 	mov	ra,r8
 1010bb0:	defffa04 	addi	sp,sp,-24
 1010bb4:	df000515 	stw	fp,20(sp)
 1010bb8:	df000504 	addi	fp,sp,20
 1010bbc:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
 1010bc0:	e0bfff17 	ldw	r2,-4(fp)
 1010bc4:	10800117 	ldw	r2,4(r2)
 1010bc8:	e0bffc15 	stw	r2,-16(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 1010bcc:	e0bfff17 	ldw	r2,-4(fp)
 1010bd0:	10800017 	ldw	r2,0(r2)
 1010bd4:	e0bffb15 	stw	r2,-20(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
 1010bd8:	e0bffc17 	ldw	r2,-16(fp)
 1010bdc:	1004c03a 	cmpne	r2,r2,zero
 1010be0:	10000c1e 	bne	r2,zero,1010c14 <OS_FlagUnlink+0x70>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
 1010be4:	e0bfff17 	ldw	r2,-4(fp)
 1010be8:	10800317 	ldw	r2,12(r2)
 1010bec:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
 1010bf0:	e0fffd17 	ldw	r3,-12(fp)
 1010bf4:	e0bffb17 	ldw	r2,-20(fp)
 1010bf8:	18800115 	stw	r2,4(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {
 1010bfc:	e0bffb17 	ldw	r2,-20(fp)
 1010c00:	1005003a 	cmpeq	r2,r2,zero
 1010c04:	10000c1e 	bne	r2,zero,1010c38 <OS_FlagUnlink+0x94>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
 1010c08:	e0bffb17 	ldw	r2,-20(fp)
 1010c0c:	10000115 	stw	zero,4(r2)
 1010c10:	00000906 	br	1010c38 <OS_FlagUnlink+0x94>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
 1010c14:	e0fffc17 	ldw	r3,-16(fp)
 1010c18:	e0bffb17 	ldw	r2,-20(fp)
 1010c1c:	18800015 	stw	r2,0(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
 1010c20:	e0bffb17 	ldw	r2,-20(fp)
 1010c24:	1005003a 	cmpeq	r2,r2,zero
 1010c28:	1000031e 	bne	r2,zero,1010c38 <OS_FlagUnlink+0x94>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
 1010c2c:	e0fffb17 	ldw	r3,-20(fp)
 1010c30:	e0bffc17 	ldw	r2,-16(fp)
 1010c34:	18800115 	stw	r2,4(r3)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
 1010c38:	e0bfff17 	ldw	r2,-4(fp)
 1010c3c:	10800217 	ldw	r2,8(r2)
 1010c40:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
 1010c44:	e0bffe17 	ldw	r2,-8(fp)
 1010c48:	10000a15 	stw	zero,40(r2)
#endif
}
 1010c4c:	e037883a 	mov	sp,fp
 1010c50:	df000017 	ldw	fp,0(sp)
 1010c54:	dec00104 	addi	sp,sp,4
 1010c58:	f800283a 	ret

01010c5c <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
 1010c5c:	f811883a 	mov	r8,ra
 1010c60:	100c3d80 	call	100c3d8 <_mcount>
 1010c64:	403f883a 	mov	ra,r8
 1010c68:	defff304 	addi	sp,sp,-52
 1010c6c:	df000c15 	stw	fp,48(sp)
 1010c70:	df000c04 	addi	fp,sp,48
 1010c74:	e13ffb15 	stw	r4,-20(fp)
 1010c78:	e17ffc15 	stw	r5,-16(fp)
 1010c7c:	e1bffd15 	stw	r6,-12(fp)
 1010c80:	e1fffe15 	stw	r7,-8(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 1010c84:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 1010c88:	e0bffe17 	ldw	r2,-8(fp)
 1010c8c:	1004c03a 	cmpne	r2,r2,zero
 1010c90:	1000021e 	bne	r2,zero,1010c9c <OSMemCreate+0x40>
        return ((OS_MEM *)0);
 1010c94:	e03fff15 	stw	zero,-4(fp)
 1010c98:	00007506 	br	1010e70 <OSMemCreate+0x214>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
 1010c9c:	e0bffb17 	ldw	r2,-20(fp)
 1010ca0:	1004c03a 	cmpne	r2,r2,zero
 1010ca4:	1000051e 	bne	r2,zero,1010cbc <OSMemCreate+0x60>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 1010ca8:	e0fffe17 	ldw	r3,-8(fp)
 1010cac:	00801884 	movi	r2,98
 1010cb0:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 1010cb4:	e03fff15 	stw	zero,-4(fp)
 1010cb8:	00006d06 	br	1010e70 <OSMemCreate+0x214>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
 1010cbc:	e0bffb17 	ldw	r2,-20(fp)
 1010cc0:	108000cc 	andi	r2,r2,3
 1010cc4:	1005003a 	cmpeq	r2,r2,zero
 1010cc8:	1000051e 	bne	r2,zero,1010ce0 <OSMemCreate+0x84>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 1010ccc:	e0fffe17 	ldw	r3,-8(fp)
 1010cd0:	00801884 	movi	r2,98
 1010cd4:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 1010cd8:	e03fff15 	stw	zero,-4(fp)
 1010cdc:	00006406 	br	1010e70 <OSMemCreate+0x214>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
 1010ce0:	e0bffc17 	ldw	r2,-16(fp)
 1010ce4:	108000a8 	cmpgeui	r2,r2,2
 1010ce8:	1000051e 	bne	r2,zero,1010d00 <OSMemCreate+0xa4>
        *perr = OS_ERR_MEM_INVALID_BLKS;
 1010cec:	e0fffe17 	ldw	r3,-8(fp)
 1010cf0:	008016c4 	movi	r2,91
 1010cf4:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 1010cf8:	e03fff15 	stw	zero,-4(fp)
 1010cfc:	00005c06 	br	1010e70 <OSMemCreate+0x214>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
 1010d00:	e0bffd17 	ldw	r2,-12(fp)
 1010d04:	10800128 	cmpgeui	r2,r2,4
 1010d08:	1000051e 	bne	r2,zero,1010d20 <OSMemCreate+0xc4>
        *perr = OS_ERR_MEM_INVALID_SIZE;
 1010d0c:	e0fffe17 	ldw	r3,-8(fp)
 1010d10:	00801704 	movi	r2,92
 1010d14:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 1010d18:	e03fff15 	stw	zero,-4(fp)
 1010d1c:	00005406 	br	1010e70 <OSMemCreate+0x214>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1010d20:	0005303a 	rdctl	r2,status
 1010d24:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1010d28:	e0fff517 	ldw	r3,-44(fp)
 1010d2c:	00bfff84 	movi	r2,-2
 1010d30:	1884703a 	and	r2,r3,r2
 1010d34:	1001703a 	wrctl	status,r2
  
  return context;
 1010d38:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 1010d3c:	e0bff615 	stw	r2,-40(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
 1010d40:	008040f4 	movhi	r2,259
 1010d44:	10977204 	addi	r2,r2,24008
 1010d48:	10800017 	ldw	r2,0(r2)
 1010d4c:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
 1010d50:	008040f4 	movhi	r2,259
 1010d54:	10977204 	addi	r2,r2,24008
 1010d58:	10800017 	ldw	r2,0(r2)
 1010d5c:	1005003a 	cmpeq	r2,r2,zero
 1010d60:	1000081e 	bne	r2,zero,1010d84 <OSMemCreate+0x128>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
 1010d64:	008040f4 	movhi	r2,259
 1010d68:	10977204 	addi	r2,r2,24008
 1010d6c:	10800017 	ldw	r2,0(r2)
 1010d70:	10800117 	ldw	r2,4(r2)
 1010d74:	1007883a 	mov	r3,r2
 1010d78:	008040f4 	movhi	r2,259
 1010d7c:	10977204 	addi	r2,r2,24008
 1010d80:	10c00015 	stw	r3,0(r2)
 1010d84:	e0bff617 	ldw	r2,-40(fp)
 1010d88:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1010d8c:	e0bff417 	ldw	r2,-48(fp)
 1010d90:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
 1010d94:	e0bffa17 	ldw	r2,-24(fp)
 1010d98:	1004c03a 	cmpne	r2,r2,zero
 1010d9c:	1000051e 	bne	r2,zero,1010db4 <OSMemCreate+0x158>
        *perr = OS_ERR_MEM_INVALID_PART;
 1010da0:	e0fffe17 	ldw	r3,-8(fp)
 1010da4:	00801684 	movi	r2,90
 1010da8:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 1010dac:	e03fff15 	stw	zero,-4(fp)
 1010db0:	00002f06 	br	1010e70 <OSMemCreate+0x214>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
 1010db4:	e0bffb17 	ldw	r2,-20(fp)
 1010db8:	e0bff815 	stw	r2,-32(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
 1010dbc:	e0bffb17 	ldw	r2,-20(fp)
 1010dc0:	1007883a 	mov	r3,r2
 1010dc4:	e0bffd17 	ldw	r2,-12(fp)
 1010dc8:	1885883a 	add	r2,r3,r2
 1010dcc:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < (nblks - 1); i++) {
 1010dd0:	e03ff715 	stw	zero,-36(fp)
 1010dd4:	00000d06 	br	1010e0c <OSMemCreate+0x1b0>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
 1010dd8:	e0fff817 	ldw	r3,-32(fp)
 1010ddc:	e0bff917 	ldw	r2,-28(fp)
 1010de0:	18800015 	stw	r2,0(r3)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
 1010de4:	e0bff917 	ldw	r2,-28(fp)
 1010de8:	e0bff815 	stw	r2,-32(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
 1010dec:	e0bff917 	ldw	r2,-28(fp)
 1010df0:	1007883a 	mov	r3,r2
 1010df4:	e0bffd17 	ldw	r2,-12(fp)
 1010df8:	1885883a 	add	r2,r3,r2
 1010dfc:	e0bff915 	stw	r2,-28(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
 1010e00:	e0bff717 	ldw	r2,-36(fp)
 1010e04:	10800044 	addi	r2,r2,1
 1010e08:	e0bff715 	stw	r2,-36(fp)
 1010e0c:	e0bffc17 	ldw	r2,-16(fp)
 1010e10:	10ffffc4 	addi	r3,r2,-1
 1010e14:	e0bff717 	ldw	r2,-36(fp)
 1010e18:	10ffef36 	bltu	r2,r3,1010dd8 <OSMemCreate+0x17c>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
 1010e1c:	e0bff817 	ldw	r2,-32(fp)
 1010e20:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
 1010e24:	e0fffa17 	ldw	r3,-24(fp)
 1010e28:	e0bffb17 	ldw	r2,-20(fp)
 1010e2c:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
 1010e30:	e0fffa17 	ldw	r3,-24(fp)
 1010e34:	e0bffb17 	ldw	r2,-20(fp)
 1010e38:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
 1010e3c:	e0fffa17 	ldw	r3,-24(fp)
 1010e40:	e0bffc17 	ldw	r2,-16(fp)
 1010e44:	18800415 	stw	r2,16(r3)
    pmem->OSMemNBlks    = nblks;
 1010e48:	e0fffa17 	ldw	r3,-24(fp)
 1010e4c:	e0bffc17 	ldw	r2,-16(fp)
 1010e50:	18800315 	stw	r2,12(r3)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
 1010e54:	e0fffa17 	ldw	r3,-24(fp)
 1010e58:	e0bffd17 	ldw	r2,-12(fp)
 1010e5c:	18800215 	stw	r2,8(r3)
    *perr               = OS_ERR_NONE;
 1010e60:	e0bffe17 	ldw	r2,-8(fp)
 1010e64:	10000005 	stb	zero,0(r2)
    return (pmem);
 1010e68:	e0bffa17 	ldw	r2,-24(fp)
 1010e6c:	e0bfff15 	stw	r2,-4(fp)
 1010e70:	e0bfff17 	ldw	r2,-4(fp)
}
 1010e74:	e037883a 	mov	sp,fp
 1010e78:	df000017 	ldw	fp,0(sp)
 1010e7c:	dec00104 	addi	sp,sp,4
 1010e80:	f800283a 	ret

01010e84 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
 1010e84:	f811883a 	mov	r8,ra
 1010e88:	100c3d80 	call	100c3d8 <_mcount>
 1010e8c:	403f883a 	mov	ra,r8
 1010e90:	defff704 	addi	sp,sp,-36
 1010e94:	df000815 	stw	fp,32(sp)
 1010e98:	df000804 	addi	fp,sp,32
 1010e9c:	e13ffd15 	stw	r4,-12(fp)
 1010ea0:	e17ffe15 	stw	r5,-8(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 1010ea4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 1010ea8:	e0bffe17 	ldw	r2,-8(fp)
 1010eac:	1004c03a 	cmpne	r2,r2,zero
 1010eb0:	1000021e 	bne	r2,zero,1010ebc <OSMemGet+0x38>
        return ((void *)0);
 1010eb4:	e03fff15 	stw	zero,-4(fp)
 1010eb8:	00003106 	br	1010f80 <OSMemGet+0xfc>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
 1010ebc:	e0bffd17 	ldw	r2,-12(fp)
 1010ec0:	1004c03a 	cmpne	r2,r2,zero
 1010ec4:	1000051e 	bne	r2,zero,1010edc <OSMemGet+0x58>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 1010ec8:	e0fffe17 	ldw	r3,-8(fp)
 1010ecc:	00801804 	movi	r2,96
 1010ed0:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 1010ed4:	e03fff15 	stw	zero,-4(fp)
 1010ed8:	00002906 	br	1010f80 <OSMemGet+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1010edc:	0005303a 	rdctl	r2,status
 1010ee0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1010ee4:	e0fffa17 	ldw	r3,-24(fp)
 1010ee8:	00bfff84 	movi	r2,-2
 1010eec:	1884703a 	and	r2,r3,r2
 1010ef0:	1001703a 	wrctl	status,r2
  
  return context;
 1010ef4:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 1010ef8:	e0bffb15 	stw	r2,-20(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
 1010efc:	e0bffd17 	ldw	r2,-12(fp)
 1010f00:	10800417 	ldw	r2,16(r2)
 1010f04:	1005003a 	cmpeq	r2,r2,zero
 1010f08:	1000151e 	bne	r2,zero,1010f60 <OSMemGet+0xdc>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
 1010f0c:	e0bffd17 	ldw	r2,-12(fp)
 1010f10:	10800117 	ldw	r2,4(r2)
 1010f14:	e0bffc15 	stw	r2,-16(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
 1010f18:	e0bffc17 	ldw	r2,-16(fp)
 1010f1c:	10c00017 	ldw	r3,0(r2)
 1010f20:	e0bffd17 	ldw	r2,-12(fp)
 1010f24:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
 1010f28:	e0bffd17 	ldw	r2,-12(fp)
 1010f2c:	10800417 	ldw	r2,16(r2)
 1010f30:	10ffffc4 	addi	r3,r2,-1
 1010f34:	e0bffd17 	ldw	r2,-12(fp)
 1010f38:	10c00415 	stw	r3,16(r2)
 1010f3c:	e0bffb17 	ldw	r2,-20(fp)
 1010f40:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1010f44:	e0bff917 	ldw	r2,-28(fp)
 1010f48:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
 1010f4c:	e0bffe17 	ldw	r2,-8(fp)
 1010f50:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
 1010f54:	e0bffc17 	ldw	r2,-16(fp)
 1010f58:	e0bfff15 	stw	r2,-4(fp)
 1010f5c:	00000806 	br	1010f80 <OSMemGet+0xfc>
 1010f60:	e0bffb17 	ldw	r2,-20(fp)
 1010f64:	e0bff815 	stw	r2,-32(fp)
 1010f68:	e0bff817 	ldw	r2,-32(fp)
 1010f6c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
 1010f70:	e0fffe17 	ldw	r3,-8(fp)
 1010f74:	00801744 	movi	r2,93
 1010f78:	18800005 	stb	r2,0(r3)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
 1010f7c:	e03fff15 	stw	zero,-4(fp)
 1010f80:	e0bfff17 	ldw	r2,-4(fp)
}
 1010f84:	e037883a 	mov	sp,fp
 1010f88:	df000017 	ldw	fp,0(sp)
 1010f8c:	dec00104 	addi	sp,sp,4
 1010f90:	f800283a 	ret

01010f94 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 1010f94:	f811883a 	mov	r8,ra
 1010f98:	100c3d80 	call	100c3d8 <_mcount>
 1010f9c:	403f883a 	mov	ra,r8
 1010fa0:	defff604 	addi	sp,sp,-40
 1010fa4:	dfc00915 	stw	ra,36(sp)
 1010fa8:	df000815 	stw	fp,32(sp)
 1010fac:	df000804 	addi	fp,sp,32
 1010fb0:	e13ffc15 	stw	r4,-16(fp)
 1010fb4:	e17ffd15 	stw	r5,-12(fp)
 1010fb8:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1010fbc:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 1010fc0:	e0bffe17 	ldw	r2,-8(fp)
 1010fc4:	1004c03a 	cmpne	r2,r2,zero
 1010fc8:	1000021e 	bne	r2,zero,1010fd4 <OSMemNameGet+0x40>
        return (0);
 1010fcc:	e03fff15 	stw	zero,-4(fp)
 1010fd0:	00003006 	br	1011094 <OSMemNameGet+0x100>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 1010fd4:	e0bffc17 	ldw	r2,-16(fp)
 1010fd8:	1004c03a 	cmpne	r2,r2,zero
 1010fdc:	1000051e 	bne	r2,zero,1010ff4 <OSMemNameGet+0x60>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 1010fe0:	e0fffe17 	ldw	r3,-8(fp)
 1010fe4:	00801804 	movi	r2,96
 1010fe8:	18800005 	stb	r2,0(r3)
        return (0);
 1010fec:	e03fff15 	stw	zero,-4(fp)
 1010ff0:	00002806 	br	1011094 <OSMemNameGet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 1010ff4:	e0bffd17 	ldw	r2,-12(fp)
 1010ff8:	1004c03a 	cmpne	r2,r2,zero
 1010ffc:	1000051e 	bne	r2,zero,1011014 <OSMemNameGet+0x80>
        *perr = OS_ERR_PNAME_NULL;
 1011000:	e0fffe17 	ldw	r3,-8(fp)
 1011004:	00800304 	movi	r2,12
 1011008:	18800005 	stb	r2,0(r3)
        return (0);
 101100c:	e03fff15 	stw	zero,-4(fp)
 1011010:	00002006 	br	1011094 <OSMemNameGet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 1011014:	008040f4 	movhi	r2,259
 1011018:	10977704 	addi	r2,r2,24028
 101101c:	10800003 	ldbu	r2,0(r2)
 1011020:	10803fcc 	andi	r2,r2,255
 1011024:	1005003a 	cmpeq	r2,r2,zero
 1011028:	1000051e 	bne	r2,zero,1011040 <OSMemNameGet+0xac>
        *perr = OS_ERR_NAME_GET_ISR;
 101102c:	e0fffe17 	ldw	r3,-8(fp)
 1011030:	00800444 	movi	r2,17
 1011034:	18800005 	stb	r2,0(r3)
        return (0);
 1011038:	e03fff15 	stw	zero,-4(fp)
 101103c:	00001506 	br	1011094 <OSMemNameGet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1011040:	0005303a 	rdctl	r2,status
 1011044:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1011048:	e0fff917 	ldw	r3,-28(fp)
 101104c:	00bfff84 	movi	r2,-2
 1011050:	1884703a 	and	r2,r3,r2
 1011054:	1001703a 	wrctl	status,r2
  
  return context;
 1011058:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 101105c:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
 1011060:	e0bffc17 	ldw	r2,-16(fp)
 1011064:	11400504 	addi	r5,r2,20
 1011068:	e13ffd17 	ldw	r4,-12(fp)
 101106c:	100eaa00 	call	100eaa0 <OS_StrCopy>
 1011070:	e0bffb05 	stb	r2,-20(fp)
 1011074:	e0bffa17 	ldw	r2,-24(fp)
 1011078:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101107c:	e0bff817 	ldw	r2,-32(fp)
 1011080:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 1011084:	e0bffe17 	ldw	r2,-8(fp)
 1011088:	10000005 	stb	zero,0(r2)
    return (len);
 101108c:	e0bffb03 	ldbu	r2,-20(fp)
 1011090:	e0bfff15 	stw	r2,-4(fp)
 1011094:	e0bfff17 	ldw	r2,-4(fp)
}
 1011098:	e037883a 	mov	sp,fp
 101109c:	dfc00117 	ldw	ra,4(sp)
 10110a0:	df000017 	ldw	fp,0(sp)
 10110a4:	dec00204 	addi	sp,sp,8
 10110a8:	f800283a 	ret

010110ac <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 10110ac:	f811883a 	mov	r8,ra
 10110b0:	100c3d80 	call	100c3d8 <_mcount>
 10110b4:	403f883a 	mov	ra,r8
 10110b8:	defff604 	addi	sp,sp,-40
 10110bc:	dfc00915 	stw	ra,36(sp)
 10110c0:	df000815 	stw	fp,32(sp)
 10110c4:	df000804 	addi	fp,sp,32
 10110c8:	e13ffd15 	stw	r4,-12(fp)
 10110cc:	e17ffe15 	stw	r5,-8(fp)
 10110d0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 10110d4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 10110d8:	e0bfff17 	ldw	r2,-4(fp)
 10110dc:	1005003a 	cmpeq	r2,r2,zero
 10110e0:	1000381e 	bne	r2,zero,10111c4 <OSMemNameSet+0x118>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 10110e4:	e0bffd17 	ldw	r2,-12(fp)
 10110e8:	1004c03a 	cmpne	r2,r2,zero
 10110ec:	1000041e 	bne	r2,zero,1011100 <OSMemNameSet+0x54>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 10110f0:	e0ffff17 	ldw	r3,-4(fp)
 10110f4:	00801804 	movi	r2,96
 10110f8:	18800005 	stb	r2,0(r3)
        return;
 10110fc:	00003106 	br	10111c4 <OSMemNameSet+0x118>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 1011100:	e0bffe17 	ldw	r2,-8(fp)
 1011104:	1004c03a 	cmpne	r2,r2,zero
 1011108:	1000041e 	bne	r2,zero,101111c <OSMemNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;
 101110c:	e0ffff17 	ldw	r3,-4(fp)
 1011110:	00800304 	movi	r2,12
 1011114:	18800005 	stb	r2,0(r3)
        return;
 1011118:	00002a06 	br	10111c4 <OSMemNameSet+0x118>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 101111c:	008040f4 	movhi	r2,259
 1011120:	10977704 	addi	r2,r2,24028
 1011124:	10800003 	ldbu	r2,0(r2)
 1011128:	10803fcc 	andi	r2,r2,255
 101112c:	1005003a 	cmpeq	r2,r2,zero
 1011130:	1000041e 	bne	r2,zero,1011144 <OSMemNameSet+0x98>
        *perr = OS_ERR_NAME_SET_ISR;
 1011134:	e0ffff17 	ldw	r3,-4(fp)
 1011138:	00800484 	movi	r2,18
 101113c:	18800005 	stb	r2,0(r3)
        return;
 1011140:	00002006 	br	10111c4 <OSMemNameSet+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1011144:	0005303a 	rdctl	r2,status
 1011148:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101114c:	e0fffa17 	ldw	r3,-24(fp)
 1011150:	00bfff84 	movi	r2,-2
 1011154:	1884703a 	and	r2,r3,r2
 1011158:	1001703a 	wrctl	status,r2
  
  return context;
 101115c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 1011160:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 1011164:	e13ffe17 	ldw	r4,-8(fp)
 1011168:	100eb2c0 	call	100eb2c <OS_StrLen>
 101116c:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
 1011170:	e0bffc03 	ldbu	r2,-16(fp)
 1011174:	10800830 	cmpltui	r2,r2,32
 1011178:	1000081e 	bne	r2,zero,101119c <OSMemNameSet+0xf0>
 101117c:	e0bffb17 	ldw	r2,-20(fp)
 1011180:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1011184:	e0bff917 	ldw	r2,-28(fp)
 1011188:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
 101118c:	e0ffff17 	ldw	r3,-4(fp)
 1011190:	008018c4 	movi	r2,99
 1011194:	18800005 	stb	r2,0(r3)
        return;
 1011198:	00000a06 	br	10111c4 <OSMemNameSet+0x118>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
 101119c:	e0bffd17 	ldw	r2,-12(fp)
 10111a0:	11000504 	addi	r4,r2,20
 10111a4:	e17ffe17 	ldw	r5,-8(fp)
 10111a8:	100eaa00 	call	100eaa0 <OS_StrCopy>
 10111ac:	e0bffb17 	ldw	r2,-20(fp)
 10111b0:	e0bff815 	stw	r2,-32(fp)
 10111b4:	e0bff817 	ldw	r2,-32(fp)
 10111b8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 10111bc:	e0bfff17 	ldw	r2,-4(fp)
 10111c0:	10000005 	stb	zero,0(r2)
}
 10111c4:	e037883a 	mov	sp,fp
 10111c8:	dfc00117 	ldw	ra,4(sp)
 10111cc:	df000017 	ldw	fp,0(sp)
 10111d0:	dec00204 	addi	sp,sp,8
 10111d4:	f800283a 	ret

010111d8 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
 10111d8:	f811883a 	mov	r8,ra
 10111dc:	100c3d80 	call	100c3d8 <_mcount>
 10111e0:	403f883a 	mov	ra,r8
 10111e4:	defff804 	addi	sp,sp,-32
 10111e8:	df000715 	stw	fp,28(sp)
 10111ec:	df000704 	addi	fp,sp,28
 10111f0:	e13ffd15 	stw	r4,-12(fp)
 10111f4:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 10111f8:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 10111fc:	e0bffd17 	ldw	r2,-12(fp)
 1011200:	1004c03a 	cmpne	r2,r2,zero
 1011204:	1000031e 	bne	r2,zero,1011214 <OSMemPut+0x3c>
        return (OS_ERR_MEM_INVALID_PMEM);
 1011208:	00801804 	movi	r2,96
 101120c:	e0bfff15 	stw	r2,-4(fp)
 1011210:	00002b06 	br	10112c0 <OSMemPut+0xe8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
 1011214:	e0bffe17 	ldw	r2,-8(fp)
 1011218:	1004c03a 	cmpne	r2,r2,zero
 101121c:	1000031e 	bne	r2,zero,101122c <OSMemPut+0x54>
        return (OS_ERR_MEM_INVALID_PBLK);
 1011220:	008017c4 	movi	r2,95
 1011224:	e0bfff15 	stw	r2,-4(fp)
 1011228:	00002506 	br	10112c0 <OSMemPut+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101122c:	0005303a 	rdctl	r2,status
 1011230:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1011234:	e0fffb17 	ldw	r3,-20(fp)
 1011238:	00bfff84 	movi	r2,-2
 101123c:	1884703a 	and	r2,r3,r2
 1011240:	1001703a 	wrctl	status,r2
  
  return context;
 1011244:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 1011248:	e0bffc15 	stw	r2,-16(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
 101124c:	e0bffd17 	ldw	r2,-12(fp)
 1011250:	10c00417 	ldw	r3,16(r2)
 1011254:	e0bffd17 	ldw	r2,-12(fp)
 1011258:	10800317 	ldw	r2,12(r2)
 101125c:	18800736 	bltu	r3,r2,101127c <OSMemPut+0xa4>
 1011260:	e0bffc17 	ldw	r2,-16(fp)
 1011264:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1011268:	e0bffa17 	ldw	r2,-24(fp)
 101126c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
 1011270:	00801784 	movi	r2,94
 1011274:	e0bfff15 	stw	r2,-4(fp)
 1011278:	00001106 	br	10112c0 <OSMemPut+0xe8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
 101127c:	e0fffe17 	ldw	r3,-8(fp)
 1011280:	e0bffd17 	ldw	r2,-12(fp)
 1011284:	10800117 	ldw	r2,4(r2)
 1011288:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = pblk;
 101128c:	e0fffd17 	ldw	r3,-12(fp)
 1011290:	e0bffe17 	ldw	r2,-8(fp)
 1011294:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
 1011298:	e0bffd17 	ldw	r2,-12(fp)
 101129c:	10800417 	ldw	r2,16(r2)
 10112a0:	10c00044 	addi	r3,r2,1
 10112a4:	e0bffd17 	ldw	r2,-12(fp)
 10112a8:	10c00415 	stw	r3,16(r2)
 10112ac:	e0bffc17 	ldw	r2,-16(fp)
 10112b0:	e0bff915 	stw	r2,-28(fp)
 10112b4:	e0bff917 	ldw	r2,-28(fp)
 10112b8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
 10112bc:	e03fff15 	stw	zero,-4(fp)
 10112c0:	e0bfff17 	ldw	r2,-4(fp)
}
 10112c4:	e037883a 	mov	sp,fp
 10112c8:	df000017 	ldw	fp,0(sp)
 10112cc:	dec00104 	addi	sp,sp,4
 10112d0:	f800283a 	ret

010112d4 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
 10112d4:	f811883a 	mov	r8,ra
 10112d8:	100c3d80 	call	100c3d8 <_mcount>
 10112dc:	403f883a 	mov	ra,r8
 10112e0:	defff904 	addi	sp,sp,-28
 10112e4:	df000615 	stw	fp,24(sp)
 10112e8:	df000604 	addi	fp,sp,24
 10112ec:	e13ffd15 	stw	r4,-12(fp)
 10112f0:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 10112f4:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 10112f8:	e0bffd17 	ldw	r2,-12(fp)
 10112fc:	1004c03a 	cmpne	r2,r2,zero
 1011300:	1000031e 	bne	r2,zero,1011310 <OSMemQuery+0x3c>
        return (OS_ERR_MEM_INVALID_PMEM);
 1011304:	00801804 	movi	r2,96
 1011308:	e0bfff15 	stw	r2,-4(fp)
 101130c:	00002e06 	br	10113c8 <OSMemQuery+0xf4>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
 1011310:	e0bffe17 	ldw	r2,-8(fp)
 1011314:	1004c03a 	cmpne	r2,r2,zero
 1011318:	1000031e 	bne	r2,zero,1011328 <OSMemQuery+0x54>
        return (OS_ERR_MEM_INVALID_PDATA);
 101131c:	00801844 	movi	r2,97
 1011320:	e0bfff15 	stw	r2,-4(fp)
 1011324:	00002806 	br	10113c8 <OSMemQuery+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1011328:	0005303a 	rdctl	r2,status
 101132c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1011330:	e0fffb17 	ldw	r3,-20(fp)
 1011334:	00bfff84 	movi	r2,-2
 1011338:	1884703a 	and	r2,r3,r2
 101133c:	1001703a 	wrctl	status,r2
  
  return context;
 1011340:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 1011344:	e0bffc15 	stw	r2,-16(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
 1011348:	e0bffd17 	ldw	r2,-12(fp)
 101134c:	10c00017 	ldw	r3,0(r2)
 1011350:	e0bffe17 	ldw	r2,-8(fp)
 1011354:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
 1011358:	e0bffd17 	ldw	r2,-12(fp)
 101135c:	10c00117 	ldw	r3,4(r2)
 1011360:	e0bffe17 	ldw	r2,-8(fp)
 1011364:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
 1011368:	e0bffd17 	ldw	r2,-12(fp)
 101136c:	10c00217 	ldw	r3,8(r2)
 1011370:	e0bffe17 	ldw	r2,-8(fp)
 1011374:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
 1011378:	e0bffd17 	ldw	r2,-12(fp)
 101137c:	10c00317 	ldw	r3,12(r2)
 1011380:	e0bffe17 	ldw	r2,-8(fp)
 1011384:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
 1011388:	e0bffd17 	ldw	r2,-12(fp)
 101138c:	10c00417 	ldw	r3,16(r2)
 1011390:	e0bffe17 	ldw	r2,-8(fp)
 1011394:	10c00415 	stw	r3,16(r2)
 1011398:	e0bffc17 	ldw	r2,-16(fp)
 101139c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10113a0:	e0bffa17 	ldw	r2,-24(fp)
 10113a4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
 10113a8:	e0bffe17 	ldw	r2,-8(fp)
 10113ac:	10c00317 	ldw	r3,12(r2)
 10113b0:	e0bffe17 	ldw	r2,-8(fp)
 10113b4:	10800417 	ldw	r2,16(r2)
 10113b8:	1887c83a 	sub	r3,r3,r2
 10113bc:	e0bffe17 	ldw	r2,-8(fp)
 10113c0:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
 10113c4:	e03fff15 	stw	zero,-4(fp)
 10113c8:	e0bfff17 	ldw	r2,-4(fp)
}
 10113cc:	e037883a 	mov	sp,fp
 10113d0:	df000017 	ldw	fp,0(sp)
 10113d4:	dec00104 	addi	sp,sp,4
 10113d8:	f800283a 	ret

010113dc <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
 10113dc:	f811883a 	mov	r8,ra
 10113e0:	100c3d80 	call	100c3d8 <_mcount>
 10113e4:	403f883a 	mov	ra,r8
 10113e8:	defffc04 	addi	sp,sp,-16
 10113ec:	dfc00315 	stw	ra,12(sp)
 10113f0:	df000215 	stw	fp,8(sp)
 10113f4:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
 10113f8:	01004134 	movhi	r4,260
 10113fc:	21194c04 	addi	r4,r4,25904
 1011400:	01430c04 	movi	r5,3120
 1011404:	100e86c0 	call	100e86c <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
 1011408:	00804134 	movhi	r2,260
 101140c:	10994c04 	addi	r2,r2,25904
 1011410:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 1011414:	e03ffe0d 	sth	zero,-8(fp)
 1011418:	00001406 	br	101146c <OS_MemInit+0x90>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
 101141c:	e13ffe0b 	ldhu	r4,-8(fp)
 1011420:	01400d04 	movi	r5,52
 1011424:	10026680 	call	1002668 <__mulsi3>
 1011428:	1007883a 	mov	r3,r2
 101142c:	00804134 	movhi	r2,260
 1011430:	10995904 	addi	r2,r2,25956
 1011434:	1887883a 	add	r3,r3,r2
 1011438:	e0bfff17 	ldw	r2,-4(fp)
 101143c:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
 1011440:	e0ffff17 	ldw	r3,-4(fp)
 1011444:	00800fc4 	movi	r2,63
 1011448:	18800505 	stb	r2,20(r3)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
 101144c:	e0bfff17 	ldw	r2,-4(fp)
 1011450:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
 1011454:	e0bfff17 	ldw	r2,-4(fp)
 1011458:	10800d04 	addi	r2,r2,52
 101145c:	e0bfff15 	stw	r2,-4(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 1011460:	e0bffe0b 	ldhu	r2,-8(fp)
 1011464:	10800044 	addi	r2,r2,1
 1011468:	e0bffe0d 	sth	r2,-8(fp)
 101146c:	e0bffe0b 	ldhu	r2,-8(fp)
 1011470:	10800ef0 	cmpltui	r2,r2,59
 1011474:	103fe91e 	bne	r2,zero,101141c <OS_MemInit+0x40>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
 1011478:	e0bfff17 	ldw	r2,-4(fp)
 101147c:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
 1011480:	e0ffff17 	ldw	r3,-4(fp)
 1011484:	00800fc4 	movi	r2,63
 1011488:	18800505 	stb	r2,20(r3)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
 101148c:	e0bfff17 	ldw	r2,-4(fp)
 1011490:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
 1011494:	00c040f4 	movhi	r3,259
 1011498:	18d77204 	addi	r3,r3,24008
 101149c:	00804134 	movhi	r2,260
 10114a0:	10994c04 	addi	r2,r2,25904
 10114a4:	18800015 	stw	r2,0(r3)
#endif
}
 10114a8:	e037883a 	mov	sp,fp
 10114ac:	dfc00117 	ldw	ra,4(sp)
 10114b0:	df000017 	ldw	fp,0(sp)
 10114b4:	dec00204 	addi	sp,sp,8
 10114b8:	f800283a 	ret

010114bc <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
 10114bc:	f811883a 	mov	r8,ra
 10114c0:	100c3d80 	call	100c3d8 <_mcount>
 10114c4:	403f883a 	mov	ra,r8
 10114c8:	defff704 	addi	sp,sp,-36
 10114cc:	df000815 	stw	fp,32(sp)
 10114d0:	df000804 	addi	fp,sp,32
 10114d4:	e13ffd15 	stw	r4,-12(fp)
 10114d8:	e17ffe15 	stw	r5,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 10114dc:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 10114e0:	e0bffe17 	ldw	r2,-8(fp)
 10114e4:	1004c03a 	cmpne	r2,r2,zero
 10114e8:	1000021e 	bne	r2,zero,10114f4 <OSQAccept+0x38>
        return ((void *)0);
 10114ec:	e03fff15 	stw	zero,-4(fp)
 10114f0:	00004506 	br	1011608 <OSQAccept+0x14c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 10114f4:	e0bffd17 	ldw	r2,-12(fp)
 10114f8:	1004c03a 	cmpne	r2,r2,zero
 10114fc:	1000051e 	bne	r2,zero,1011514 <OSQAccept+0x58>
        *perr = OS_ERR_PEVENT_NULL;
 1011500:	e0fffe17 	ldw	r3,-8(fp)
 1011504:	00800104 	movi	r2,4
 1011508:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 101150c:	e03fff15 	stw	zero,-4(fp)
 1011510:	00003d06 	br	1011608 <OSQAccept+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 1011514:	e0bffd17 	ldw	r2,-12(fp)
 1011518:	10800003 	ldbu	r2,0(r2)
 101151c:	10803fcc 	andi	r2,r2,255
 1011520:	108000a0 	cmpeqi	r2,r2,2
 1011524:	1000051e 	bne	r2,zero,101153c <OSQAccept+0x80>
        *perr = OS_ERR_EVENT_TYPE;
 1011528:	e0fffe17 	ldw	r3,-8(fp)
 101152c:	00800044 	movi	r2,1
 1011530:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 1011534:	e03fff15 	stw	zero,-4(fp)
 1011538:	00003306 	br	1011608 <OSQAccept+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101153c:	0005303a 	rdctl	r2,status
 1011540:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1011544:	e0fff917 	ldw	r3,-28(fp)
 1011548:	00bfff84 	movi	r2,-2
 101154c:	1884703a 	and	r2,r3,r2
 1011550:	1001703a 	wrctl	status,r2
  
  return context;
 1011554:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 1011558:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 101155c:	e0bffd17 	ldw	r2,-12(fp)
 1011560:	10800117 	ldw	r2,4(r2)
 1011564:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 1011568:	e0bffb17 	ldw	r2,-20(fp)
 101156c:	1080058b 	ldhu	r2,22(r2)
 1011570:	10bfffcc 	andi	r2,r2,65535
 1011574:	1005003a 	cmpeq	r2,r2,zero
 1011578:	1000191e 	bne	r2,zero,10115e0 <OSQAccept+0x124>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 101157c:	e0bffb17 	ldw	r2,-20(fp)
 1011580:	10c00417 	ldw	r3,16(r2)
 1011584:	18800017 	ldw	r2,0(r3)
 1011588:	e0bffc15 	stw	r2,-16(fp)
 101158c:	18c00104 	addi	r3,r3,4
 1011590:	e0bffb17 	ldw	r2,-20(fp)
 1011594:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 1011598:	e0bffb17 	ldw	r2,-20(fp)
 101159c:	1080058b 	ldhu	r2,22(r2)
 10115a0:	10bfffc4 	addi	r2,r2,-1
 10115a4:	1007883a 	mov	r3,r2
 10115a8:	e0bffb17 	ldw	r2,-20(fp)
 10115ac:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 10115b0:	e0bffb17 	ldw	r2,-20(fp)
 10115b4:	10c00417 	ldw	r3,16(r2)
 10115b8:	e0bffb17 	ldw	r2,-20(fp)
 10115bc:	10800217 	ldw	r2,8(r2)
 10115c0:	1880041e 	bne	r3,r2,10115d4 <OSQAccept+0x118>
            pq->OSQOut = pq->OSQStart;
 10115c4:	e0bffb17 	ldw	r2,-20(fp)
 10115c8:	10c00117 	ldw	r3,4(r2)
 10115cc:	e0bffb17 	ldw	r2,-20(fp)
 10115d0:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
 10115d4:	e0bffe17 	ldw	r2,-8(fp)
 10115d8:	10000005 	stb	zero,0(r2)
 10115dc:	00000406 	br	10115f0 <OSQAccept+0x134>
    } else {
        *perr = OS_ERR_Q_EMPTY;
 10115e0:	e0fffe17 	ldw	r3,-8(fp)
 10115e4:	008007c4 	movi	r2,31
 10115e8:	18800005 	stb	r2,0(r3)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
 10115ec:	e03ffc15 	stw	zero,-16(fp)
 10115f0:	e0bffa17 	ldw	r2,-24(fp)
 10115f4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10115f8:	e0bff817 	ldw	r2,-32(fp)
 10115fc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
 1011600:	e0bffc17 	ldw	r2,-16(fp)
 1011604:	e0bfff15 	stw	r2,-4(fp)
 1011608:	e0bfff17 	ldw	r2,-4(fp)
}
 101160c:	e037883a 	mov	sp,fp
 1011610:	df000017 	ldw	fp,0(sp)
 1011614:	dec00104 	addi	sp,sp,4
 1011618:	f800283a 	ret

0101161c <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
 101161c:	f811883a 	mov	r8,ra
 1011620:	100c3d80 	call	100c3d8 <_mcount>
 1011624:	403f883a 	mov	ra,r8
 1011628:	defff304 	addi	sp,sp,-52
 101162c:	dfc00c15 	stw	ra,48(sp)
 1011630:	df000b15 	stw	fp,44(sp)
 1011634:	df000b04 	addi	fp,sp,44
 1011638:	e13ffd15 	stw	r4,-12(fp)
 101163c:	e17ffe0d 	sth	r5,-8(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1011640:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 1011644:	008040f4 	movhi	r2,259
 1011648:	10977704 	addi	r2,r2,24028
 101164c:	10800003 	ldbu	r2,0(r2)
 1011650:	10803fcc 	andi	r2,r2,255
 1011654:	1005003a 	cmpeq	r2,r2,zero
 1011658:	1000021e 	bne	r2,zero,1011664 <OSQCreate+0x48>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
 101165c:	e03fff15 	stw	zero,-4(fp)
 1011660:	00007006 	br	1011824 <OSQCreate+0x208>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1011664:	0005303a 	rdctl	r2,status
 1011668:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101166c:	e0fff917 	ldw	r3,-28(fp)
 1011670:	00bfff84 	movi	r2,-2
 1011674:	1884703a 	and	r2,r3,r2
 1011678:	1001703a 	wrctl	status,r2
  
  return context;
 101167c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 1011680:	e0bffa15 	stw	r2,-24(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
 1011684:	008040f4 	movhi	r2,259
 1011688:	10977604 	addi	r2,r2,24024
 101168c:	10800017 	ldw	r2,0(r2)
 1011690:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
 1011694:	008040f4 	movhi	r2,259
 1011698:	10977604 	addi	r2,r2,24024
 101169c:	10800017 	ldw	r2,0(r2)
 10116a0:	1005003a 	cmpeq	r2,r2,zero
 10116a4:	1000081e 	bne	r2,zero,10116c8 <OSQCreate+0xac>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 10116a8:	008040f4 	movhi	r2,259
 10116ac:	10977604 	addi	r2,r2,24024
 10116b0:	10800017 	ldw	r2,0(r2)
 10116b4:	10800117 	ldw	r2,4(r2)
 10116b8:	1007883a 	mov	r3,r2
 10116bc:	008040f4 	movhi	r2,259
 10116c0:	10977604 	addi	r2,r2,24024
 10116c4:	10c00015 	stw	r3,0(r2)
 10116c8:	e0bffa17 	ldw	r2,-24(fp)
 10116cc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10116d0:	e0bff817 	ldw	r2,-32(fp)
 10116d4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
 10116d8:	e0bffc17 	ldw	r2,-16(fp)
 10116dc:	1005003a 	cmpeq	r2,r2,zero
 10116e0:	10004e1e 	bne	r2,zero,101181c <OSQCreate+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10116e4:	0005303a 	rdctl	r2,status
 10116e8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10116ec:	e0fff717 	ldw	r3,-36(fp)
 10116f0:	00bfff84 	movi	r2,-2
 10116f4:	1884703a 	and	r2,r3,r2
 10116f8:	1001703a 	wrctl	status,r2
  
  return context;
 10116fc:	e0bff717 	ldw	r2,-36(fp)
        OS_ENTER_CRITICAL();
 1011700:	e0bffa15 	stw	r2,-24(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
 1011704:	008040f4 	movhi	r2,259
 1011708:	10977404 	addi	r2,r2,24016
 101170c:	10800017 	ldw	r2,0(r2)
 1011710:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
 1011714:	e0bffb17 	ldw	r2,-20(fp)
 1011718:	1005003a 	cmpeq	r2,r2,zero
 101171c:	1000311e 	bne	r2,zero,10117e4 <OSQCreate+0x1c8>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
 1011720:	008040f4 	movhi	r2,259
 1011724:	10977404 	addi	r2,r2,24016
 1011728:	10800017 	ldw	r2,0(r2)
 101172c:	10c00017 	ldw	r3,0(r2)
 1011730:	008040f4 	movhi	r2,259
 1011734:	10977404 	addi	r2,r2,24016
 1011738:	10c00015 	stw	r3,0(r2)
 101173c:	e0bffa17 	ldw	r2,-24(fp)
 1011740:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1011744:	e0bff617 	ldw	r2,-40(fp)
 1011748:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
 101174c:	e0fffb17 	ldw	r3,-20(fp)
 1011750:	e0bffd17 	ldw	r2,-12(fp)
 1011754:	18800115 	stw	r2,4(r3)
            pq->OSQEnd             = &start[size];
 1011758:	e0bffe0b 	ldhu	r2,-8(fp)
 101175c:	1085883a 	add	r2,r2,r2
 1011760:	1085883a 	add	r2,r2,r2
 1011764:	1007883a 	mov	r3,r2
 1011768:	e0bffd17 	ldw	r2,-12(fp)
 101176c:	1887883a 	add	r3,r3,r2
 1011770:	e0bffb17 	ldw	r2,-20(fp)
 1011774:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
 1011778:	e0fffb17 	ldw	r3,-20(fp)
 101177c:	e0bffd17 	ldw	r2,-12(fp)
 1011780:	18800315 	stw	r2,12(r3)
            pq->OSQOut             = start;
 1011784:	e0fffb17 	ldw	r3,-20(fp)
 1011788:	e0bffd17 	ldw	r2,-12(fp)
 101178c:	18800415 	stw	r2,16(r3)
            pq->OSQSize            = size;
 1011790:	e0fffb17 	ldw	r3,-20(fp)
 1011794:	e0bffe0b 	ldhu	r2,-8(fp)
 1011798:	1880050d 	sth	r2,20(r3)
            pq->OSQEntries         = 0;
 101179c:	e0bffb17 	ldw	r2,-20(fp)
 10117a0:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
 10117a4:	e0fffc17 	ldw	r3,-16(fp)
 10117a8:	00800084 	movi	r2,2
 10117ac:	18800005 	stb	r2,0(r3)
            pevent->OSEventCnt     = 0;
 10117b0:	e0bffc17 	ldw	r2,-16(fp)
 10117b4:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
 10117b8:	e0fffc17 	ldw	r3,-16(fp)
 10117bc:	e0bffb17 	ldw	r2,-20(fp)
 10117c0:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
 10117c4:	e0fffc17 	ldw	r3,-16(fp)
 10117c8:	00800fc4 	movi	r2,63
 10117cc:	18800385 	stb	r2,14(r3)
            pevent->OSEventName[1] = OS_ASCII_NUL;
 10117d0:	e0bffc17 	ldw	r2,-16(fp)
 10117d4:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
 10117d8:	e13ffc17 	ldw	r4,-16(fp)
 10117dc:	100e44c0 	call	100e44c <OS_EventWaitListInit>
 10117e0:	00000e06 	br	101181c <OSQCreate+0x200>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
 10117e4:	008040f4 	movhi	r2,259
 10117e8:	10977604 	addi	r2,r2,24024
 10117ec:	10c00017 	ldw	r3,0(r2)
 10117f0:	e0bffc17 	ldw	r2,-16(fp)
 10117f4:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
 10117f8:	00c040f4 	movhi	r3,259
 10117fc:	18d77604 	addi	r3,r3,24024
 1011800:	e0bffc17 	ldw	r2,-16(fp)
 1011804:	18800015 	stw	r2,0(r3)
 1011808:	e0bffa17 	ldw	r2,-24(fp)
 101180c:	e0bff515 	stw	r2,-44(fp)
 1011810:	e0bff517 	ldw	r2,-44(fp)
 1011814:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
 1011818:	e03ffc15 	stw	zero,-16(fp)
        }
    }
    return (pevent);
 101181c:	e0bffc17 	ldw	r2,-16(fp)
 1011820:	e0bfff15 	stw	r2,-4(fp)
 1011824:	e0bfff17 	ldw	r2,-4(fp)
}
 1011828:	e037883a 	mov	sp,fp
 101182c:	dfc00117 	ldw	ra,4(sp)
 1011830:	df000017 	ldw	fp,0(sp)
 1011834:	dec00204 	addi	sp,sp,8
 1011838:	f800283a 	ret

0101183c <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 101183c:	f811883a 	mov	r8,ra
 1011840:	100c3d80 	call	100c3d8 <_mcount>
 1011844:	403f883a 	mov	ra,r8
 1011848:	defff004 	addi	sp,sp,-64
 101184c:	dfc00f15 	stw	ra,60(sp)
 1011850:	df000e15 	stw	fp,56(sp)
 1011854:	df000e04 	addi	fp,sp,56
 1011858:	e13ffb15 	stw	r4,-20(fp)
 101185c:	e1bffd15 	stw	r6,-12(fp)
 1011860:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 1011864:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 1011868:	e0bffd17 	ldw	r2,-12(fp)
 101186c:	1004c03a 	cmpne	r2,r2,zero
 1011870:	1000031e 	bne	r2,zero,1011880 <OSQDel+0x44>
        return (pevent);
 1011874:	e0bffb17 	ldw	r2,-20(fp)
 1011878:	e0bfff15 	stw	r2,-4(fp)
 101187c:	0000ac06 	br	1011b30 <OSQDel+0x2f4>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 1011880:	e0bffb17 	ldw	r2,-20(fp)
 1011884:	1004c03a 	cmpne	r2,r2,zero
 1011888:	1000061e 	bne	r2,zero,10118a4 <OSQDel+0x68>
        *perr = OS_ERR_PEVENT_NULL;
 101188c:	e0fffd17 	ldw	r3,-12(fp)
 1011890:	00800104 	movi	r2,4
 1011894:	18800005 	stb	r2,0(r3)
        return (pevent);
 1011898:	e0fffb17 	ldw	r3,-20(fp)
 101189c:	e0ffff15 	stw	r3,-4(fp)
 10118a0:	0000a306 	br	1011b30 <OSQDel+0x2f4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 10118a4:	e0bffb17 	ldw	r2,-20(fp)
 10118a8:	10800003 	ldbu	r2,0(r2)
 10118ac:	10803fcc 	andi	r2,r2,255
 10118b0:	108000a0 	cmpeqi	r2,r2,2
 10118b4:	1000061e 	bne	r2,zero,10118d0 <OSQDel+0x94>
        *perr = OS_ERR_EVENT_TYPE;
 10118b8:	e0fffd17 	ldw	r3,-12(fp)
 10118bc:	00800044 	movi	r2,1
 10118c0:	18800005 	stb	r2,0(r3)
        return (pevent);
 10118c4:	e0bffb17 	ldw	r2,-20(fp)
 10118c8:	e0bfff15 	stw	r2,-4(fp)
 10118cc:	00009806 	br	1011b30 <OSQDel+0x2f4>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 10118d0:	008040f4 	movhi	r2,259
 10118d4:	10977704 	addi	r2,r2,24028
 10118d8:	10800003 	ldbu	r2,0(r2)
 10118dc:	10803fcc 	andi	r2,r2,255
 10118e0:	1005003a 	cmpeq	r2,r2,zero
 10118e4:	1000061e 	bne	r2,zero,1011900 <OSQDel+0xc4>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 10118e8:	e0fffd17 	ldw	r3,-12(fp)
 10118ec:	008003c4 	movi	r2,15
 10118f0:	18800005 	stb	r2,0(r3)
        return (pevent);
 10118f4:	e0fffb17 	ldw	r3,-20(fp)
 10118f8:	e0ffff15 	stw	r3,-4(fp)
 10118fc:	00008c06 	br	1011b30 <OSQDel+0x2f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1011900:	0005303a 	rdctl	r2,status
 1011904:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1011908:	e0fff617 	ldw	r3,-40(fp)
 101190c:	00bfff84 	movi	r2,-2
 1011910:	1884703a 	and	r2,r3,r2
 1011914:	1001703a 	wrctl	status,r2
  
  return context;
 1011918:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
 101191c:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
 1011920:	e0bffb17 	ldw	r2,-20(fp)
 1011924:	10800283 	ldbu	r2,10(r2)
 1011928:	10803fcc 	andi	r2,r2,255
 101192c:	1005003a 	cmpeq	r2,r2,zero
 1011930:	1000031e 	bne	r2,zero,1011940 <OSQDel+0x104>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 1011934:	00800044 	movi	r2,1
 1011938:	e0bffa05 	stb	r2,-24(fp)
 101193c:	00000106 	br	1011944 <OSQDel+0x108>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 1011940:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
 1011944:	e0bffc03 	ldbu	r2,-16(fp)
 1011948:	e0bffe15 	stw	r2,-8(fp)
 101194c:	e0fffe17 	ldw	r3,-8(fp)
 1011950:	1805003a 	cmpeq	r2,r3,zero
 1011954:	1000041e 	bne	r2,zero,1011968 <OSQDel+0x12c>
 1011958:	e0fffe17 	ldw	r3,-8(fp)
 101195c:	18800060 	cmpeqi	r2,r3,1
 1011960:	1000391e 	bne	r2,zero,1011a48 <OSQDel+0x20c>
 1011964:	00006706 	br	1011b04 <OSQDel+0x2c8>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
 1011968:	e0bffa03 	ldbu	r2,-24(fp)
 101196c:	1004c03a 	cmpne	r2,r2,zero
 1011970:	1000261e 	bne	r2,zero,1011a0c <OSQDel+0x1d0>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 1011974:	e0fffb17 	ldw	r3,-20(fp)
 1011978:	00800fc4 	movi	r2,63
 101197c:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 1011980:	e0bffb17 	ldw	r2,-20(fp)
 1011984:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
 1011988:	e0bffb17 	ldw	r2,-20(fp)
 101198c:	10800117 	ldw	r2,4(r2)
 1011990:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
 1011994:	008040f4 	movhi	r2,259
 1011998:	10977404 	addi	r2,r2,24016
 101199c:	10c00017 	ldw	r3,0(r2)
 10119a0:	e0bff817 	ldw	r2,-32(fp)
 10119a4:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
 10119a8:	00c040f4 	movhi	r3,259
 10119ac:	18d77404 	addi	r3,r3,24016
 10119b0:	e0bff817 	ldw	r2,-32(fp)
 10119b4:	18800015 	stw	r2,0(r3)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 10119b8:	e0bffb17 	ldw	r2,-20(fp)
 10119bc:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 10119c0:	008040f4 	movhi	r2,259
 10119c4:	10977604 	addi	r2,r2,24024
 10119c8:	10c00017 	ldw	r3,0(r2)
 10119cc:	e0bffb17 	ldw	r2,-20(fp)
 10119d0:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 10119d4:	e0bffb17 	ldw	r2,-20(fp)
 10119d8:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 10119dc:	00c040f4 	movhi	r3,259
 10119e0:	18d77604 	addi	r3,r3,24024
 10119e4:	e0bffb17 	ldw	r2,-20(fp)
 10119e8:	18800015 	stw	r2,0(r3)
 10119ec:	e0bff717 	ldw	r2,-36(fp)
 10119f0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10119f4:	e0bff517 	ldw	r2,-44(fp)
 10119f8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 10119fc:	e0bffd17 	ldw	r2,-12(fp)
 1011a00:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
 1011a04:	e03ff915 	stw	zero,-28(fp)
 1011a08:	00004706 	br	1011b28 <OSQDel+0x2ec>
 1011a0c:	e0bff717 	ldw	r2,-36(fp)
 1011a10:	e0bff415 	stw	r2,-48(fp)
 1011a14:	e0bff417 	ldw	r2,-48(fp)
 1011a18:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 1011a1c:	e0fffd17 	ldw	r3,-12(fp)
 1011a20:	00801244 	movi	r2,73
 1011a24:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
 1011a28:	e0bffb17 	ldw	r2,-20(fp)
 1011a2c:	e0bff915 	stw	r2,-28(fp)
             }
             break;
 1011a30:	00003d06 	br	1011b28 <OSQDel+0x2ec>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
 1011a34:	e13ffb17 	ldw	r4,-20(fp)
 1011a38:	000b883a 	mov	r5,zero
 1011a3c:	01800104 	movi	r6,4
 1011a40:	000f883a 	mov	r7,zero
 1011a44:	100de5c0 	call	100de5c <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
 1011a48:	e0bffb17 	ldw	r2,-20(fp)
 1011a4c:	10800283 	ldbu	r2,10(r2)
 1011a50:	10803fcc 	andi	r2,r2,255
 1011a54:	1004c03a 	cmpne	r2,r2,zero
 1011a58:	103ff61e 	bne	r2,zero,1011a34 <OSQDel+0x1f8>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 1011a5c:	e0fffb17 	ldw	r3,-20(fp)
 1011a60:	00800fc4 	movi	r2,63
 1011a64:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 1011a68:	e0bffb17 	ldw	r2,-20(fp)
 1011a6c:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
 1011a70:	e0bffb17 	ldw	r2,-20(fp)
 1011a74:	10800117 	ldw	r2,4(r2)
 1011a78:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
 1011a7c:	008040f4 	movhi	r2,259
 1011a80:	10977404 	addi	r2,r2,24016
 1011a84:	10c00017 	ldw	r3,0(r2)
 1011a88:	e0bff817 	ldw	r2,-32(fp)
 1011a8c:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
 1011a90:	00c040f4 	movhi	r3,259
 1011a94:	18d77404 	addi	r3,r3,24016
 1011a98:	e0bff817 	ldw	r2,-32(fp)
 1011a9c:	18800015 	stw	r2,0(r3)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 1011aa0:	e0bffb17 	ldw	r2,-20(fp)
 1011aa4:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 1011aa8:	008040f4 	movhi	r2,259
 1011aac:	10977604 	addi	r2,r2,24024
 1011ab0:	10c00017 	ldw	r3,0(r2)
 1011ab4:	e0bffb17 	ldw	r2,-20(fp)
 1011ab8:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 1011abc:	e0bffb17 	ldw	r2,-20(fp)
 1011ac0:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 1011ac4:	00c040f4 	movhi	r3,259
 1011ac8:	18d77604 	addi	r3,r3,24024
 1011acc:	e0bffb17 	ldw	r2,-20(fp)
 1011ad0:	18800015 	stw	r2,0(r3)
 1011ad4:	e0bff717 	ldw	r2,-36(fp)
 1011ad8:	e0bff315 	stw	r2,-52(fp)
 1011adc:	e0bff317 	ldw	r2,-52(fp)
 1011ae0:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 1011ae4:	e0bffa03 	ldbu	r2,-24(fp)
 1011ae8:	10800058 	cmpnei	r2,r2,1
 1011aec:	1000011e 	bne	r2,zero,1011af4 <OSQDel+0x2b8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 1011af0:	100e9440 	call	100e944 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 1011af4:	e0bffd17 	ldw	r2,-12(fp)
 1011af8:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
 1011afc:	e03ff915 	stw	zero,-28(fp)
             break;
 1011b00:	00000906 	br	1011b28 <OSQDel+0x2ec>
 1011b04:	e0bff717 	ldw	r2,-36(fp)
 1011b08:	e0bff215 	stw	r2,-56(fp)
 1011b0c:	e0bff217 	ldw	r2,-56(fp)
 1011b10:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 1011b14:	e0fffd17 	ldw	r3,-12(fp)
 1011b18:	008001c4 	movi	r2,7
 1011b1c:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
 1011b20:	e0bffb17 	ldw	r2,-20(fp)
 1011b24:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
 1011b28:	e0bff917 	ldw	r2,-28(fp)
 1011b2c:	e0bfff15 	stw	r2,-4(fp)
 1011b30:	e0bfff17 	ldw	r2,-4(fp)
}
 1011b34:	e037883a 	mov	sp,fp
 1011b38:	dfc00117 	ldw	ra,4(sp)
 1011b3c:	df000017 	ldw	fp,0(sp)
 1011b40:	dec00204 	addi	sp,sp,8
 1011b44:	f800283a 	ret

01011b48 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
 1011b48:	f811883a 	mov	r8,ra
 1011b4c:	100c3d80 	call	100c3d8 <_mcount>
 1011b50:	403f883a 	mov	ra,r8
 1011b54:	defff904 	addi	sp,sp,-28
 1011b58:	df000615 	stw	fp,24(sp)
 1011b5c:	df000604 	addi	fp,sp,24
 1011b60:	e13ffe15 	stw	r4,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 1011b64:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 1011b68:	e0bffe17 	ldw	r2,-8(fp)
 1011b6c:	1004c03a 	cmpne	r2,r2,zero
 1011b70:	1000031e 	bne	r2,zero,1011b80 <OSQFlush+0x38>
        return (OS_ERR_PEVENT_NULL);
 1011b74:	00800104 	movi	r2,4
 1011b78:	e0bfff15 	stw	r2,-4(fp)
 1011b7c:	00002206 	br	1011c08 <OSQFlush+0xc0>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 1011b80:	e0bffe17 	ldw	r2,-8(fp)
 1011b84:	10800003 	ldbu	r2,0(r2)
 1011b88:	10803fcc 	andi	r2,r2,255
 1011b8c:	108000a0 	cmpeqi	r2,r2,2
 1011b90:	1000031e 	bne	r2,zero,1011ba0 <OSQFlush+0x58>
        return (OS_ERR_EVENT_TYPE);
 1011b94:	00800044 	movi	r2,1
 1011b98:	e0bfff15 	stw	r2,-4(fp)
 1011b9c:	00001a06 	br	1011c08 <OSQFlush+0xc0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1011ba0:	0005303a 	rdctl	r2,status
 1011ba4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1011ba8:	e0fffb17 	ldw	r3,-20(fp)
 1011bac:	00bfff84 	movi	r2,-2
 1011bb0:	1884703a 	and	r2,r3,r2
 1011bb4:	1001703a 	wrctl	status,r2
  
  return context;
 1011bb8:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 1011bbc:	e0bffc15 	stw	r2,-16(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
 1011bc0:	e0bffe17 	ldw	r2,-8(fp)
 1011bc4:	10800117 	ldw	r2,4(r2)
 1011bc8:	e0bffd15 	stw	r2,-12(fp)
    pq->OSQIn      = pq->OSQStart;
 1011bcc:	e0bffd17 	ldw	r2,-12(fp)
 1011bd0:	10c00117 	ldw	r3,4(r2)
 1011bd4:	e0bffd17 	ldw	r2,-12(fp)
 1011bd8:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
 1011bdc:	e0bffd17 	ldw	r2,-12(fp)
 1011be0:	10c00117 	ldw	r3,4(r2)
 1011be4:	e0bffd17 	ldw	r2,-12(fp)
 1011be8:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
 1011bec:	e0bffd17 	ldw	r2,-12(fp)
 1011bf0:	1000058d 	sth	zero,22(r2)
 1011bf4:	e0bffc17 	ldw	r2,-16(fp)
 1011bf8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1011bfc:	e0bffa17 	ldw	r2,-24(fp)
 1011c00:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 1011c04:	e03fff15 	stw	zero,-4(fp)
 1011c08:	e0bfff17 	ldw	r2,-4(fp)
}
 1011c0c:	e037883a 	mov	sp,fp
 1011c10:	df000017 	ldw	fp,0(sp)
 1011c14:	dec00104 	addi	sp,sp,4
 1011c18:	f800283a 	ret

01011c1c <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 1011c1c:	f811883a 	mov	r8,ra
 1011c20:	100c3d80 	call	100c3d8 <_mcount>
 1011c24:	403f883a 	mov	ra,r8
 1011c28:	defff104 	addi	sp,sp,-60
 1011c2c:	dfc00e15 	stw	ra,56(sp)
 1011c30:	df000d15 	stw	fp,52(sp)
 1011c34:	df000d04 	addi	fp,sp,52
 1011c38:	e13ffb15 	stw	r4,-20(fp)
 1011c3c:	e1bffd15 	stw	r6,-12(fp)
 1011c40:	e17ffc0d 	sth	r5,-16(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1011c44:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 1011c48:	e0bffd17 	ldw	r2,-12(fp)
 1011c4c:	1004c03a 	cmpne	r2,r2,zero
 1011c50:	1000021e 	bne	r2,zero,1011c5c <OSQPend+0x40>
        return ((void *)0);
 1011c54:	e03fff15 	stw	zero,-4(fp)
 1011c58:	0000b506 	br	1011f30 <OSQPend+0x314>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 1011c5c:	e0bffb17 	ldw	r2,-20(fp)
 1011c60:	1004c03a 	cmpne	r2,r2,zero
 1011c64:	1000051e 	bne	r2,zero,1011c7c <OSQPend+0x60>
        *perr = OS_ERR_PEVENT_NULL;
 1011c68:	e0fffd17 	ldw	r3,-12(fp)
 1011c6c:	00800104 	movi	r2,4
 1011c70:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 1011c74:	e03fff15 	stw	zero,-4(fp)
 1011c78:	0000ad06 	br	1011f30 <OSQPend+0x314>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 1011c7c:	e0bffb17 	ldw	r2,-20(fp)
 1011c80:	10800003 	ldbu	r2,0(r2)
 1011c84:	10803fcc 	andi	r2,r2,255
 1011c88:	108000a0 	cmpeqi	r2,r2,2
 1011c8c:	1000051e 	bne	r2,zero,1011ca4 <OSQPend+0x88>
        *perr = OS_ERR_EVENT_TYPE;
 1011c90:	e0fffd17 	ldw	r3,-12(fp)
 1011c94:	00800044 	movi	r2,1
 1011c98:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 1011c9c:	e03fff15 	stw	zero,-4(fp)
 1011ca0:	0000a306 	br	1011f30 <OSQPend+0x314>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 1011ca4:	008040f4 	movhi	r2,259
 1011ca8:	10977704 	addi	r2,r2,24028
 1011cac:	10800003 	ldbu	r2,0(r2)
 1011cb0:	10803fcc 	andi	r2,r2,255
 1011cb4:	1005003a 	cmpeq	r2,r2,zero
 1011cb8:	1000051e 	bne	r2,zero,1011cd0 <OSQPend+0xb4>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
 1011cbc:	e0fffd17 	ldw	r3,-12(fp)
 1011cc0:	00800084 	movi	r2,2
 1011cc4:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 1011cc8:	e03fff15 	stw	zero,-4(fp)
 1011ccc:	00009806 	br	1011f30 <OSQPend+0x314>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
 1011cd0:	008040f4 	movhi	r2,259
 1011cd4:	10976604 	addi	r2,r2,23960
 1011cd8:	10800003 	ldbu	r2,0(r2)
 1011cdc:	10803fcc 	andi	r2,r2,255
 1011ce0:	1005003a 	cmpeq	r2,r2,zero
 1011ce4:	1000051e 	bne	r2,zero,1011cfc <OSQPend+0xe0>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
 1011ce8:	e0fffd17 	ldw	r3,-12(fp)
 1011cec:	00800344 	movi	r2,13
 1011cf0:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 1011cf4:	e03fff15 	stw	zero,-4(fp)
 1011cf8:	00008d06 	br	1011f30 <OSQPend+0x314>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1011cfc:	0005303a 	rdctl	r2,status
 1011d00:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1011d04:	e0fff717 	ldw	r3,-36(fp)
 1011d08:	00bfff84 	movi	r2,-2
 1011d0c:	1884703a 	and	r2,r3,r2
 1011d10:	1001703a 	wrctl	status,r2
  
  return context;
 1011d14:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 1011d18:	e0bff815 	stw	r2,-32(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 1011d1c:	e0bffb17 	ldw	r2,-20(fp)
 1011d20:	10800117 	ldw	r2,4(r2)
 1011d24:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 1011d28:	e0bff917 	ldw	r2,-28(fp)
 1011d2c:	1080058b 	ldhu	r2,22(r2)
 1011d30:	10bfffcc 	andi	r2,r2,65535
 1011d34:	1005003a 	cmpeq	r2,r2,zero
 1011d38:	10001f1e 	bne	r2,zero,1011db8 <OSQPend+0x19c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 1011d3c:	e0bff917 	ldw	r2,-28(fp)
 1011d40:	10c00417 	ldw	r3,16(r2)
 1011d44:	18800017 	ldw	r2,0(r3)
 1011d48:	e0bffa15 	stw	r2,-24(fp)
 1011d4c:	18c00104 	addi	r3,r3,4
 1011d50:	e0bff917 	ldw	r2,-28(fp)
 1011d54:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 1011d58:	e0bff917 	ldw	r2,-28(fp)
 1011d5c:	1080058b 	ldhu	r2,22(r2)
 1011d60:	10bfffc4 	addi	r2,r2,-1
 1011d64:	1007883a 	mov	r3,r2
 1011d68:	e0bff917 	ldw	r2,-28(fp)
 1011d6c:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 1011d70:	e0bff917 	ldw	r2,-28(fp)
 1011d74:	10c00417 	ldw	r3,16(r2)
 1011d78:	e0bff917 	ldw	r2,-28(fp)
 1011d7c:	10800217 	ldw	r2,8(r2)
 1011d80:	1880041e 	bne	r3,r2,1011d94 <OSQPend+0x178>
            pq->OSQOut = pq->OSQStart;
 1011d84:	e0bff917 	ldw	r2,-28(fp)
 1011d88:	10c00117 	ldw	r3,4(r2)
 1011d8c:	e0bff917 	ldw	r2,-28(fp)
 1011d90:	10c00415 	stw	r3,16(r2)
 1011d94:	e0bff817 	ldw	r2,-32(fp)
 1011d98:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1011d9c:	e0bff617 	ldw	r2,-40(fp)
 1011da0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 1011da4:	e0bffd17 	ldw	r2,-12(fp)
 1011da8:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
 1011dac:	e0bffa17 	ldw	r2,-24(fp)
 1011db0:	e0bfff15 	stw	r2,-4(fp)
 1011db4:	00005e06 	br	1011f30 <OSQPend+0x314>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
 1011db8:	008040f4 	movhi	r2,259
 1011dbc:	10977804 	addi	r2,r2,24032
 1011dc0:	10c00017 	ldw	r3,0(r2)
 1011dc4:	008040f4 	movhi	r2,259
 1011dc8:	10977804 	addi	r2,r2,24032
 1011dcc:	10800017 	ldw	r2,0(r2)
 1011dd0:	10800c03 	ldbu	r2,48(r2)
 1011dd4:	10800114 	ori	r2,r2,4
 1011dd8:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 1011ddc:	008040f4 	movhi	r2,259
 1011de0:	10977804 	addi	r2,r2,24032
 1011de4:	10800017 	ldw	r2,0(r2)
 1011de8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
 1011dec:	008040f4 	movhi	r2,259
 1011df0:	10977804 	addi	r2,r2,24032
 1011df4:	10c00017 	ldw	r3,0(r2)
 1011df8:	e0bffc0b 	ldhu	r2,-16(fp)
 1011dfc:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
 1011e00:	e13ffb17 	ldw	r4,-20(fp)
 1011e04:	100dffc0 	call	100dffc <OS_EventTaskWait>
 1011e08:	e0bff817 	ldw	r2,-32(fp)
 1011e0c:	e0bff515 	stw	r2,-44(fp)
 1011e10:	e0bff517 	ldw	r2,-44(fp)
 1011e14:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
 1011e18:	100e9440 	call	100e944 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1011e1c:	0005303a 	rdctl	r2,status
 1011e20:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1011e24:	e0fff417 	ldw	r3,-48(fp)
 1011e28:	00bfff84 	movi	r2,-2
 1011e2c:	1884703a 	and	r2,r3,r2
 1011e30:	1001703a 	wrctl	status,r2
  
  return context;
 1011e34:	e0bff417 	ldw	r2,-48(fp)
    OS_ENTER_CRITICAL();
 1011e38:	e0bff815 	stw	r2,-32(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 1011e3c:	008040f4 	movhi	r2,259
 1011e40:	10977804 	addi	r2,r2,24032
 1011e44:	10800017 	ldw	r2,0(r2)
 1011e48:	10800c43 	ldbu	r2,49(r2)
 1011e4c:	10803fcc 	andi	r2,r2,255
 1011e50:	e0bffe15 	stw	r2,-8(fp)
 1011e54:	e0fffe17 	ldw	r3,-8(fp)
 1011e58:	1805003a 	cmpeq	r2,r3,zero
 1011e5c:	1000041e 	bne	r2,zero,1011e70 <OSQPend+0x254>
 1011e60:	e0fffe17 	ldw	r3,-8(fp)
 1011e64:	188000a0 	cmpeqi	r2,r3,2
 1011e68:	1000091e 	bne	r2,zero,1011e90 <OSQPend+0x274>
 1011e6c:	00000d06 	br	1011ea4 <OSQPend+0x288>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
 1011e70:	008040f4 	movhi	r2,259
 1011e74:	10977804 	addi	r2,r2,24032
 1011e78:	10800017 	ldw	r2,0(r2)
 1011e7c:	10800917 	ldw	r2,36(r2)
 1011e80:	e0bffa15 	stw	r2,-24(fp)
            *perr =  OS_ERR_NONE;
 1011e84:	e0bffd17 	ldw	r2,-12(fp)
 1011e88:	10000005 	stb	zero,0(r2)
             break;
 1011e8c:	00000e06 	br	1011ec8 <OSQPend+0x2ac>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
 1011e90:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 1011e94:	e0fffd17 	ldw	r3,-12(fp)
 1011e98:	00800384 	movi	r2,14
 1011e9c:	18800005 	stb	r2,0(r3)
             break;
 1011ea0:	00000906 	br	1011ec8 <OSQPend+0x2ac>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 1011ea4:	008040f4 	movhi	r2,259
 1011ea8:	10977804 	addi	r2,r2,24032
 1011eac:	11000017 	ldw	r4,0(r2)
 1011eb0:	e17ffb17 	ldw	r5,-20(fp)
 1011eb4:	100e2780 	call	100e278 <OS_EventTaskRemove>
             pmsg = (void *)0;
 1011eb8:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 1011ebc:	e0fffd17 	ldw	r3,-12(fp)
 1011ec0:	00800284 	movi	r2,10
 1011ec4:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 1011ec8:	008040f4 	movhi	r2,259
 1011ecc:	10977804 	addi	r2,r2,24032
 1011ed0:	10800017 	ldw	r2,0(r2)
 1011ed4:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 1011ed8:	008040f4 	movhi	r2,259
 1011edc:	10977804 	addi	r2,r2,24032
 1011ee0:	10800017 	ldw	r2,0(r2)
 1011ee4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 1011ee8:	008040f4 	movhi	r2,259
 1011eec:	10977804 	addi	r2,r2,24032
 1011ef0:	10800017 	ldw	r2,0(r2)
 1011ef4:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 1011ef8:	008040f4 	movhi	r2,259
 1011efc:	10977804 	addi	r2,r2,24032
 1011f00:	10800017 	ldw	r2,0(r2)
 1011f04:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
 1011f08:	008040f4 	movhi	r2,259
 1011f0c:	10977804 	addi	r2,r2,24032
 1011f10:	10800017 	ldw	r2,0(r2)
 1011f14:	10000915 	stw	zero,36(r2)
 1011f18:	e0bff817 	ldw	r2,-32(fp)
 1011f1c:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1011f20:	e0bff317 	ldw	r2,-52(fp)
 1011f24:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
 1011f28:	e0bffa17 	ldw	r2,-24(fp)
 1011f2c:	e0bfff15 	stw	r2,-4(fp)
 1011f30:	e0bfff17 	ldw	r2,-4(fp)
}
 1011f34:	e037883a 	mov	sp,fp
 1011f38:	dfc00117 	ldw	ra,4(sp)
 1011f3c:	df000017 	ldw	fp,0(sp)
 1011f40:	dec00204 	addi	sp,sp,8
 1011f44:	f800283a 	ret

01011f48 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 1011f48:	f811883a 	mov	r8,ra
 1011f4c:	100c3d80 	call	100c3d8 <_mcount>
 1011f50:	403f883a 	mov	ra,r8
 1011f54:	defff504 	addi	sp,sp,-44
 1011f58:	dfc00a15 	stw	ra,40(sp)
 1011f5c:	df000915 	stw	fp,36(sp)
 1011f60:	df000904 	addi	fp,sp,36
 1011f64:	e13ffc15 	stw	r4,-16(fp)
 1011f68:	e1bffe15 	stw	r6,-8(fp)
 1011f6c:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 1011f70:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 1011f74:	e0bffe17 	ldw	r2,-8(fp)
 1011f78:	1004c03a 	cmpne	r2,r2,zero
 1011f7c:	1000021e 	bne	r2,zero,1011f88 <OSQPendAbort+0x40>
        return (0);
 1011f80:	e03fff15 	stw	zero,-4(fp)
 1011f84:	00004c06 	br	10120b8 <OSQPendAbort+0x170>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 1011f88:	e0bffc17 	ldw	r2,-16(fp)
 1011f8c:	1004c03a 	cmpne	r2,r2,zero
 1011f90:	1000051e 	bne	r2,zero,1011fa8 <OSQPendAbort+0x60>
        *perr = OS_ERR_PEVENT_NULL;
 1011f94:	e0fffe17 	ldw	r3,-8(fp)
 1011f98:	00800104 	movi	r2,4
 1011f9c:	18800005 	stb	r2,0(r3)
        return (0);
 1011fa0:	e03fff15 	stw	zero,-4(fp)
 1011fa4:	00004406 	br	10120b8 <OSQPendAbort+0x170>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 1011fa8:	e0bffc17 	ldw	r2,-16(fp)
 1011fac:	10800003 	ldbu	r2,0(r2)
 1011fb0:	10803fcc 	andi	r2,r2,255
 1011fb4:	108000a0 	cmpeqi	r2,r2,2
 1011fb8:	1000051e 	bne	r2,zero,1011fd0 <OSQPendAbort+0x88>
        *perr = OS_ERR_EVENT_TYPE;
 1011fbc:	e0fffe17 	ldw	r3,-8(fp)
 1011fc0:	00800044 	movi	r2,1
 1011fc4:	18800005 	stb	r2,0(r3)
        return (0);
 1011fc8:	e03fff15 	stw	zero,-4(fp)
 1011fcc:	00003a06 	br	10120b8 <OSQPendAbort+0x170>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1011fd0:	0005303a 	rdctl	r2,status
 1011fd4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1011fd8:	e0fff917 	ldw	r3,-28(fp)
 1011fdc:	00bfff84 	movi	r2,-2
 1011fe0:	1884703a 	and	r2,r3,r2
 1011fe4:	1001703a 	wrctl	status,r2
  
  return context;
 1011fe8:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 1011fec:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
 1011ff0:	e0bffc17 	ldw	r2,-16(fp)
 1011ff4:	10800283 	ldbu	r2,10(r2)
 1011ff8:	10803fcc 	andi	r2,r2,255
 1011ffc:	1005003a 	cmpeq	r2,r2,zero
 1012000:	1000261e 	bne	r2,zero,101209c <OSQPendAbort+0x154>
        nbr_tasks = 0;
 1012004:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
 1012008:	e0bffd03 	ldbu	r2,-12(fp)
 101200c:	10800060 	cmpeqi	r2,r2,1
 1012010:	1000091e 	bne	r2,zero,1012038 <OSQPendAbort+0xf0>
 1012014:	00000e06 	br	1012050 <OSQPendAbort+0x108>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 1012018:	e13ffc17 	ldw	r4,-16(fp)
 101201c:	000b883a 	mov	r5,zero
 1012020:	01800104 	movi	r6,4
 1012024:	01c00084 	movi	r7,2
 1012028:	100de5c0 	call	100de5c <OS_EventTaskRdy>
                     nbr_tasks++;
 101202c:	e0bffb03 	ldbu	r2,-20(fp)
 1012030:	10800044 	addi	r2,r2,1
 1012034:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
 1012038:	e0bffc17 	ldw	r2,-16(fp)
 101203c:	10800283 	ldbu	r2,10(r2)
 1012040:	10803fcc 	andi	r2,r2,255
 1012044:	1004c03a 	cmpne	r2,r2,zero
 1012048:	103ff31e 	bne	r2,zero,1012018 <OSQPendAbort+0xd0>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 101204c:	00000806 	br	1012070 <OSQPendAbort+0x128>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 1012050:	e13ffc17 	ldw	r4,-16(fp)
 1012054:	000b883a 	mov	r5,zero
 1012058:	01800104 	movi	r6,4
 101205c:	01c00084 	movi	r7,2
 1012060:	100de5c0 	call	100de5c <OS_EventTaskRdy>
                 nbr_tasks++;
 1012064:	e0bffb03 	ldbu	r2,-20(fp)
 1012068:	10800044 	addi	r2,r2,1
 101206c:	e0bffb05 	stb	r2,-20(fp)
 1012070:	e0bffa17 	ldw	r2,-24(fp)
 1012074:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1012078:	e0bff817 	ldw	r2,-32(fp)
 101207c:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
 1012080:	100e9440 	call	100e944 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 1012084:	e0fffe17 	ldw	r3,-8(fp)
 1012088:	00800384 	movi	r2,14
 101208c:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
 1012090:	e0bffb03 	ldbu	r2,-20(fp)
 1012094:	e0bfff15 	stw	r2,-4(fp)
 1012098:	00000706 	br	10120b8 <OSQPendAbort+0x170>
 101209c:	e0bffa17 	ldw	r2,-24(fp)
 10120a0:	e0bff715 	stw	r2,-36(fp)
 10120a4:	e0bff717 	ldw	r2,-36(fp)
 10120a8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 10120ac:	e0bffe17 	ldw	r2,-8(fp)
 10120b0:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
 10120b4:	e03fff15 	stw	zero,-4(fp)
 10120b8:	e0bfff17 	ldw	r2,-4(fp)
}
 10120bc:	e037883a 	mov	sp,fp
 10120c0:	dfc00117 	ldw	ra,4(sp)
 10120c4:	df000017 	ldw	fp,0(sp)
 10120c8:	dec00204 	addi	sp,sp,8
 10120cc:	f800283a 	ret

010120d0 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
 10120d0:	f811883a 	mov	r8,ra
 10120d4:	100c3d80 	call	100c3d8 <_mcount>
 10120d8:	403f883a 	mov	ra,r8
 10120dc:	defff504 	addi	sp,sp,-44
 10120e0:	dfc00a15 	stw	ra,40(sp)
 10120e4:	df000915 	stw	fp,36(sp)
 10120e8:	df000904 	addi	fp,sp,36
 10120ec:	e13ffd15 	stw	r4,-12(fp)
 10120f0:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 10120f4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 10120f8:	e0bffd17 	ldw	r2,-12(fp)
 10120fc:	1004c03a 	cmpne	r2,r2,zero
 1012100:	1000031e 	bne	r2,zero,1012110 <OSQPost+0x40>
        return (OS_ERR_PEVENT_NULL);
 1012104:	00800104 	movi	r2,4
 1012108:	e0bfff15 	stw	r2,-4(fp)
 101210c:	00004d06 	br	1012244 <OSQPost+0x174>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 1012110:	e0bffd17 	ldw	r2,-12(fp)
 1012114:	10800003 	ldbu	r2,0(r2)
 1012118:	10803fcc 	andi	r2,r2,255
 101211c:	108000a0 	cmpeqi	r2,r2,2
 1012120:	1000031e 	bne	r2,zero,1012130 <OSQPost+0x60>
        return (OS_ERR_EVENT_TYPE);
 1012124:	00800044 	movi	r2,1
 1012128:	e0bfff15 	stw	r2,-4(fp)
 101212c:	00004506 	br	1012244 <OSQPost+0x174>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1012130:	0005303a 	rdctl	r2,status
 1012134:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1012138:	e0fffa17 	ldw	r3,-24(fp)
 101213c:	00bfff84 	movi	r2,-2
 1012140:	1884703a 	and	r2,r3,r2
 1012144:	1001703a 	wrctl	status,r2
  
  return context;
 1012148:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 101214c:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
 1012150:	e0bffd17 	ldw	r2,-12(fp)
 1012154:	10800283 	ldbu	r2,10(r2)
 1012158:	10803fcc 	andi	r2,r2,255
 101215c:	1005003a 	cmpeq	r2,r2,zero
 1012160:	10000c1e 	bne	r2,zero,1012194 <OSQPost+0xc4>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 1012164:	e13ffd17 	ldw	r4,-12(fp)
 1012168:	e17ffe17 	ldw	r5,-8(fp)
 101216c:	01800104 	movi	r6,4
 1012170:	000f883a 	mov	r7,zero
 1012174:	100de5c0 	call	100de5c <OS_EventTaskRdy>
 1012178:	e0bffb17 	ldw	r2,-20(fp)
 101217c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1012180:	e0bff917 	ldw	r2,-28(fp)
 1012184:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
 1012188:	100e9440 	call	100e944 <OS_Sched>
        return (OS_ERR_NONE);
 101218c:	e03fff15 	stw	zero,-4(fp)
 1012190:	00002c06 	br	1012244 <OSQPost+0x174>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
 1012194:	e0bffd17 	ldw	r2,-12(fp)
 1012198:	10800117 	ldw	r2,4(r2)
 101219c:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
 10121a0:	e0bffc17 	ldw	r2,-16(fp)
 10121a4:	10c0058b 	ldhu	r3,22(r2)
 10121a8:	e0bffc17 	ldw	r2,-16(fp)
 10121ac:	1080050b 	ldhu	r2,20(r2)
 10121b0:	18ffffcc 	andi	r3,r3,65535
 10121b4:	10bfffcc 	andi	r2,r2,65535
 10121b8:	18800736 	bltu	r3,r2,10121d8 <OSQPost+0x108>
 10121bc:	e0bffb17 	ldw	r2,-20(fp)
 10121c0:	e0bff815 	stw	r2,-32(fp)
 10121c4:	e0bff817 	ldw	r2,-32(fp)
 10121c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 10121cc:	00800784 	movi	r2,30
 10121d0:	e0bfff15 	stw	r2,-4(fp)
 10121d4:	00001b06 	br	1012244 <OSQPost+0x174>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
 10121d8:	e0bffc17 	ldw	r2,-16(fp)
 10121dc:	10c00317 	ldw	r3,12(r2)
 10121e0:	e0bffe17 	ldw	r2,-8(fp)
 10121e4:	18800015 	stw	r2,0(r3)
 10121e8:	18c00104 	addi	r3,r3,4
 10121ec:	e0bffc17 	ldw	r2,-16(fp)
 10121f0:	10c00315 	stw	r3,12(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
 10121f4:	e0bffc17 	ldw	r2,-16(fp)
 10121f8:	1080058b 	ldhu	r2,22(r2)
 10121fc:	10800044 	addi	r2,r2,1
 1012200:	1007883a 	mov	r3,r2
 1012204:	e0bffc17 	ldw	r2,-16(fp)
 1012208:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
 101220c:	e0bffc17 	ldw	r2,-16(fp)
 1012210:	10c00317 	ldw	r3,12(r2)
 1012214:	e0bffc17 	ldw	r2,-16(fp)
 1012218:	10800217 	ldw	r2,8(r2)
 101221c:	1880041e 	bne	r3,r2,1012230 <OSQPost+0x160>
        pq->OSQIn = pq->OSQStart;
 1012220:	e0bffc17 	ldw	r2,-16(fp)
 1012224:	10c00117 	ldw	r3,4(r2)
 1012228:	e0bffc17 	ldw	r2,-16(fp)
 101222c:	10c00315 	stw	r3,12(r2)
 1012230:	e0bffb17 	ldw	r2,-20(fp)
 1012234:	e0bff715 	stw	r2,-36(fp)
 1012238:	e0bff717 	ldw	r2,-36(fp)
 101223c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 1012240:	e03fff15 	stw	zero,-4(fp)
 1012244:	e0bfff17 	ldw	r2,-4(fp)
}
 1012248:	e037883a 	mov	sp,fp
 101224c:	dfc00117 	ldw	ra,4(sp)
 1012250:	df000017 	ldw	fp,0(sp)
 1012254:	dec00204 	addi	sp,sp,8
 1012258:	f800283a 	ret

0101225c <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
 101225c:	f811883a 	mov	r8,ra
 1012260:	100c3d80 	call	100c3d8 <_mcount>
 1012264:	403f883a 	mov	ra,r8
 1012268:	defff504 	addi	sp,sp,-44
 101226c:	dfc00a15 	stw	ra,40(sp)
 1012270:	df000915 	stw	fp,36(sp)
 1012274:	df000904 	addi	fp,sp,36
 1012278:	e13ffd15 	stw	r4,-12(fp)
 101227c:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 1012280:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 1012284:	e0bffd17 	ldw	r2,-12(fp)
 1012288:	1004c03a 	cmpne	r2,r2,zero
 101228c:	1000031e 	bne	r2,zero,101229c <OSQPostFront+0x40>
        return (OS_ERR_PEVENT_NULL);
 1012290:	00800104 	movi	r2,4
 1012294:	e0bfff15 	stw	r2,-4(fp)
 1012298:	00004f06 	br	10123d8 <OSQPostFront+0x17c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 101229c:	e0bffd17 	ldw	r2,-12(fp)
 10122a0:	10800003 	ldbu	r2,0(r2)
 10122a4:	10803fcc 	andi	r2,r2,255
 10122a8:	108000a0 	cmpeqi	r2,r2,2
 10122ac:	1000031e 	bne	r2,zero,10122bc <OSQPostFront+0x60>
        return (OS_ERR_EVENT_TYPE);
 10122b0:	00800044 	movi	r2,1
 10122b4:	e0bfff15 	stw	r2,-4(fp)
 10122b8:	00004706 	br	10123d8 <OSQPostFront+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10122bc:	0005303a 	rdctl	r2,status
 10122c0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10122c4:	e0fffa17 	ldw	r3,-24(fp)
 10122c8:	00bfff84 	movi	r2,-2
 10122cc:	1884703a 	and	r2,r3,r2
 10122d0:	1001703a 	wrctl	status,r2
  
  return context;
 10122d4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 10122d8:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
 10122dc:	e0bffd17 	ldw	r2,-12(fp)
 10122e0:	10800283 	ldbu	r2,10(r2)
 10122e4:	10803fcc 	andi	r2,r2,255
 10122e8:	1005003a 	cmpeq	r2,r2,zero
 10122ec:	10000c1e 	bne	r2,zero,1012320 <OSQPostFront+0xc4>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 10122f0:	e13ffd17 	ldw	r4,-12(fp)
 10122f4:	e17ffe17 	ldw	r5,-8(fp)
 10122f8:	01800104 	movi	r6,4
 10122fc:	000f883a 	mov	r7,zero
 1012300:	100de5c0 	call	100de5c <OS_EventTaskRdy>
 1012304:	e0bffb17 	ldw	r2,-20(fp)
 1012308:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101230c:	e0bff917 	ldw	r2,-28(fp)
 1012310:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
 1012314:	100e9440 	call	100e944 <OS_Sched>
        return (OS_ERR_NONE);
 1012318:	e03fff15 	stw	zero,-4(fp)
 101231c:	00002e06 	br	10123d8 <OSQPostFront+0x17c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 1012320:	e0bffd17 	ldw	r2,-12(fp)
 1012324:	10800117 	ldw	r2,4(r2)
 1012328:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 101232c:	e0bffc17 	ldw	r2,-16(fp)
 1012330:	10c0058b 	ldhu	r3,22(r2)
 1012334:	e0bffc17 	ldw	r2,-16(fp)
 1012338:	1080050b 	ldhu	r2,20(r2)
 101233c:	18ffffcc 	andi	r3,r3,65535
 1012340:	10bfffcc 	andi	r2,r2,65535
 1012344:	18800736 	bltu	r3,r2,1012364 <OSQPostFront+0x108>
 1012348:	e0bffb17 	ldw	r2,-20(fp)
 101234c:	e0bff815 	stw	r2,-32(fp)
 1012350:	e0bff817 	ldw	r2,-32(fp)
 1012354:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 1012358:	00800784 	movi	r2,30
 101235c:	e0bfff15 	stw	r2,-4(fp)
 1012360:	00001d06 	br	10123d8 <OSQPostFront+0x17c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
 1012364:	e0bffc17 	ldw	r2,-16(fp)
 1012368:	10c00417 	ldw	r3,16(r2)
 101236c:	e0bffc17 	ldw	r2,-16(fp)
 1012370:	10800117 	ldw	r2,4(r2)
 1012374:	1880041e 	bne	r3,r2,1012388 <OSQPostFront+0x12c>
        pq->OSQOut = pq->OSQEnd;
 1012378:	e0bffc17 	ldw	r2,-16(fp)
 101237c:	10c00217 	ldw	r3,8(r2)
 1012380:	e0bffc17 	ldw	r2,-16(fp)
 1012384:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
 1012388:	e0bffc17 	ldw	r2,-16(fp)
 101238c:	10800417 	ldw	r2,16(r2)
 1012390:	10ffff04 	addi	r3,r2,-4
 1012394:	e0bffc17 	ldw	r2,-16(fp)
 1012398:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
 101239c:	e0bffc17 	ldw	r2,-16(fp)
 10123a0:	10c00417 	ldw	r3,16(r2)
 10123a4:	e0bffe17 	ldw	r2,-8(fp)
 10123a8:	18800015 	stw	r2,0(r3)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 10123ac:	e0bffc17 	ldw	r2,-16(fp)
 10123b0:	1080058b 	ldhu	r2,22(r2)
 10123b4:	10800044 	addi	r2,r2,1
 10123b8:	1007883a 	mov	r3,r2
 10123bc:	e0bffc17 	ldw	r2,-16(fp)
 10123c0:	10c0058d 	sth	r3,22(r2)
 10123c4:	e0bffb17 	ldw	r2,-20(fp)
 10123c8:	e0bff715 	stw	r2,-36(fp)
 10123cc:	e0bff717 	ldw	r2,-36(fp)
 10123d0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 10123d4:	e03fff15 	stw	zero,-4(fp)
 10123d8:	e0bfff17 	ldw	r2,-4(fp)
}
 10123dc:	e037883a 	mov	sp,fp
 10123e0:	dfc00117 	ldw	ra,4(sp)
 10123e4:	df000017 	ldw	fp,0(sp)
 10123e8:	dec00204 	addi	sp,sp,8
 10123ec:	f800283a 	ret

010123f0 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
 10123f0:	f811883a 	mov	r8,ra
 10123f4:	100c3d80 	call	100c3d8 <_mcount>
 10123f8:	403f883a 	mov	ra,r8
 10123fc:	defff404 	addi	sp,sp,-48
 1012400:	dfc00b15 	stw	ra,44(sp)
 1012404:	df000a15 	stw	fp,40(sp)
 1012408:	df000a04 	addi	fp,sp,40
 101240c:	e13ffc15 	stw	r4,-16(fp)
 1012410:	e17ffd15 	stw	r5,-12(fp)
 1012414:	e1bffe05 	stb	r6,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 1012418:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 101241c:	e0bffc17 	ldw	r2,-16(fp)
 1012420:	1004c03a 	cmpne	r2,r2,zero
 1012424:	1000031e 	bne	r2,zero,1012434 <OSQPostOpt+0x44>
        return (OS_ERR_PEVENT_NULL);
 1012428:	00800104 	movi	r2,4
 101242c:	e0bfff15 	stw	r2,-4(fp)
 1012430:	00007906 	br	1012618 <OSQPostOpt+0x228>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 1012434:	e0bffc17 	ldw	r2,-16(fp)
 1012438:	10800003 	ldbu	r2,0(r2)
 101243c:	10803fcc 	andi	r2,r2,255
 1012440:	108000a0 	cmpeqi	r2,r2,2
 1012444:	1000031e 	bne	r2,zero,1012454 <OSQPostOpt+0x64>
        return (OS_ERR_EVENT_TYPE);
 1012448:	00800044 	movi	r2,1
 101244c:	e0bfff15 	stw	r2,-4(fp)
 1012450:	00007106 	br	1012618 <OSQPostOpt+0x228>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1012454:	0005303a 	rdctl	r2,status
 1012458:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101245c:	e0fff917 	ldw	r3,-28(fp)
 1012460:	00bfff84 	movi	r2,-2
 1012464:	1884703a 	and	r2,r3,r2
 1012468:	1001703a 	wrctl	status,r2
  
  return context;
 101246c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 1012470:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
 1012474:	e0bffc17 	ldw	r2,-16(fp)
 1012478:	10800283 	ldbu	r2,10(r2)
 101247c:	10803fcc 	andi	r2,r2,255
 1012480:	1005003a 	cmpeq	r2,r2,zero
 1012484:	1000211e 	bne	r2,zero,101250c <OSQPostOpt+0x11c>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
 1012488:	e0bffe03 	ldbu	r2,-8(fp)
 101248c:	1080004c 	andi	r2,r2,1
 1012490:	10803fcc 	andi	r2,r2,255
 1012494:	1005003a 	cmpeq	r2,r2,zero
 1012498:	10000c1e 	bne	r2,zero,10124cc <OSQPostOpt+0xdc>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 101249c:	00000506 	br	10124b4 <OSQPostOpt+0xc4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 10124a0:	e13ffc17 	ldw	r4,-16(fp)
 10124a4:	e17ffd17 	ldw	r5,-12(fp)
 10124a8:	01800104 	movi	r6,4
 10124ac:	000f883a 	mov	r7,zero
 10124b0:	100de5c0 	call	100de5c <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 10124b4:	e0bffc17 	ldw	r2,-16(fp)
 10124b8:	10800283 	ldbu	r2,10(r2)
 10124bc:	10803fcc 	andi	r2,r2,255
 10124c0:	1004c03a 	cmpne	r2,r2,zero
 10124c4:	103ff61e 	bne	r2,zero,10124a0 <OSQPostOpt+0xb0>
 10124c8:	00000506 	br	10124e0 <OSQPostOpt+0xf0>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 10124cc:	e13ffc17 	ldw	r4,-16(fp)
 10124d0:	e17ffd17 	ldw	r5,-12(fp)
 10124d4:	01800104 	movi	r6,4
 10124d8:	000f883a 	mov	r7,zero
 10124dc:	100de5c0 	call	100de5c <OS_EventTaskRdy>
 10124e0:	e0bffa17 	ldw	r2,-24(fp)
 10124e4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10124e8:	e0bff817 	ldw	r2,-32(fp)
 10124ec:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
 10124f0:	e0bffe03 	ldbu	r2,-8(fp)
 10124f4:	1080010c 	andi	r2,r2,4
 10124f8:	1004c03a 	cmpne	r2,r2,zero
 10124fc:	1000011e 	bne	r2,zero,1012504 <OSQPostOpt+0x114>
            OS_Sched();                               /* Find highest priority task ready to run       */
 1012500:	100e9440 	call	100e944 <OS_Sched>
        }
        return (OS_ERR_NONE);
 1012504:	e03fff15 	stw	zero,-4(fp)
 1012508:	00004306 	br	1012618 <OSQPostOpt+0x228>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 101250c:	e0bffc17 	ldw	r2,-16(fp)
 1012510:	10800117 	ldw	r2,4(r2)
 1012514:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 1012518:	e0bffb17 	ldw	r2,-20(fp)
 101251c:	10c0058b 	ldhu	r3,22(r2)
 1012520:	e0bffb17 	ldw	r2,-20(fp)
 1012524:	1080050b 	ldhu	r2,20(r2)
 1012528:	18ffffcc 	andi	r3,r3,65535
 101252c:	10bfffcc 	andi	r2,r2,65535
 1012530:	18800736 	bltu	r3,r2,1012550 <OSQPostOpt+0x160>
 1012534:	e0bffa17 	ldw	r2,-24(fp)
 1012538:	e0bff715 	stw	r2,-36(fp)
 101253c:	e0bff717 	ldw	r2,-36(fp)
 1012540:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 1012544:	00800784 	movi	r2,30
 1012548:	e0bfff15 	stw	r2,-4(fp)
 101254c:	00003206 	br	1012618 <OSQPostOpt+0x228>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
 1012550:	e0bffe03 	ldbu	r2,-8(fp)
 1012554:	1080008c 	andi	r2,r2,2
 1012558:	1005003a 	cmpeq	r2,r2,zero
 101255c:	1000131e 	bne	r2,zero,10125ac <OSQPostOpt+0x1bc>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
 1012560:	e0bffb17 	ldw	r2,-20(fp)
 1012564:	10c00417 	ldw	r3,16(r2)
 1012568:	e0bffb17 	ldw	r2,-20(fp)
 101256c:	10800117 	ldw	r2,4(r2)
 1012570:	1880041e 	bne	r3,r2,1012584 <OSQPostOpt+0x194>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
 1012574:	e0bffb17 	ldw	r2,-20(fp)
 1012578:	10c00217 	ldw	r3,8(r2)
 101257c:	e0bffb17 	ldw	r2,-20(fp)
 1012580:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
 1012584:	e0bffb17 	ldw	r2,-20(fp)
 1012588:	10800417 	ldw	r2,16(r2)
 101258c:	10ffff04 	addi	r3,r2,-4
 1012590:	e0bffb17 	ldw	r2,-20(fp)
 1012594:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
 1012598:	e0bffb17 	ldw	r2,-20(fp)
 101259c:	10c00417 	ldw	r3,16(r2)
 10125a0:	e0bffd17 	ldw	r2,-12(fp)
 10125a4:	18800015 	stw	r2,0(r3)
 10125a8:	00001006 	br	10125ec <OSQPostOpt+0x1fc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
 10125ac:	e0bffb17 	ldw	r2,-20(fp)
 10125b0:	10c00317 	ldw	r3,12(r2)
 10125b4:	e0bffd17 	ldw	r2,-12(fp)
 10125b8:	18800015 	stw	r2,0(r3)
 10125bc:	18c00104 	addi	r3,r3,4
 10125c0:	e0bffb17 	ldw	r2,-20(fp)
 10125c4:	10c00315 	stw	r3,12(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
 10125c8:	e0bffb17 	ldw	r2,-20(fp)
 10125cc:	10c00317 	ldw	r3,12(r2)
 10125d0:	e0bffb17 	ldw	r2,-20(fp)
 10125d4:	10800217 	ldw	r2,8(r2)
 10125d8:	1880041e 	bne	r3,r2,10125ec <OSQPostOpt+0x1fc>
            pq->OSQIn = pq->OSQStart;
 10125dc:	e0bffb17 	ldw	r2,-20(fp)
 10125e0:	10c00117 	ldw	r3,4(r2)
 10125e4:	e0bffb17 	ldw	r2,-20(fp)
 10125e8:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 10125ec:	e0bffb17 	ldw	r2,-20(fp)
 10125f0:	1080058b 	ldhu	r2,22(r2)
 10125f4:	10800044 	addi	r2,r2,1
 10125f8:	1007883a 	mov	r3,r2
 10125fc:	e0bffb17 	ldw	r2,-20(fp)
 1012600:	10c0058d 	sth	r3,22(r2)
 1012604:	e0bffa17 	ldw	r2,-24(fp)
 1012608:	e0bff615 	stw	r2,-40(fp)
 101260c:	e0bff617 	ldw	r2,-40(fp)
 1012610:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 1012614:	e03fff15 	stw	zero,-4(fp)
 1012618:	e0bfff17 	ldw	r2,-4(fp)
}
 101261c:	e037883a 	mov	sp,fp
 1012620:	dfc00117 	ldw	ra,4(sp)
 1012624:	df000017 	ldw	fp,0(sp)
 1012628:	dec00204 	addi	sp,sp,8
 101262c:	f800283a 	ret

01012630 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
 1012630:	f811883a 	mov	r8,ra
 1012634:	100c3d80 	call	100c3d8 <_mcount>
 1012638:	403f883a 	mov	ra,r8
 101263c:	defff504 	addi	sp,sp,-44
 1012640:	df000a15 	stw	fp,40(sp)
 1012644:	df000a04 	addi	fp,sp,40
 1012648:	e13ffd15 	stw	r4,-12(fp)
 101264c:	e17ffe15 	stw	r5,-8(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 1012650:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 1012654:	e0bffd17 	ldw	r2,-12(fp)
 1012658:	1004c03a 	cmpne	r2,r2,zero
 101265c:	1000031e 	bne	r2,zero,101266c <OSQQuery+0x3c>
        return (OS_ERR_PEVENT_NULL);
 1012660:	00800104 	movi	r2,4
 1012664:	e0bfff15 	stw	r2,-4(fp)
 1012668:	00004f06 	br	10127a8 <OSQQuery+0x178>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
 101266c:	e0bffe17 	ldw	r2,-8(fp)
 1012670:	1004c03a 	cmpne	r2,r2,zero
 1012674:	1000031e 	bne	r2,zero,1012684 <OSQQuery+0x54>
        return (OS_ERR_PDATA_NULL);
 1012678:	00800244 	movi	r2,9
 101267c:	e0bfff15 	stw	r2,-4(fp)
 1012680:	00004906 	br	10127a8 <OSQQuery+0x178>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 1012684:	e0bffd17 	ldw	r2,-12(fp)
 1012688:	10800003 	ldbu	r2,0(r2)
 101268c:	10803fcc 	andi	r2,r2,255
 1012690:	108000a0 	cmpeqi	r2,r2,2
 1012694:	1000031e 	bne	r2,zero,10126a4 <OSQQuery+0x74>
        return (OS_ERR_EVENT_TYPE);
 1012698:	00800044 	movi	r2,1
 101269c:	e0bfff15 	stw	r2,-4(fp)
 10126a0:	00004106 	br	10127a8 <OSQQuery+0x178>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10126a4:	0005303a 	rdctl	r2,status
 10126a8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10126ac:	e0fff717 	ldw	r3,-36(fp)
 10126b0:	00bfff84 	movi	r2,-2
 10126b4:	1884703a 	and	r2,r3,r2
 10126b8:	1001703a 	wrctl	status,r2
  
  return context;
 10126bc:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 10126c0:	e0bff815 	stw	r2,-32(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
 10126c4:	e0bffd17 	ldw	r2,-12(fp)
 10126c8:	10c00283 	ldbu	r3,10(r2)
 10126cc:	e0bffe17 	ldw	r2,-8(fp)
 10126d0:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
 10126d4:	e0bffd17 	ldw	r2,-12(fp)
 10126d8:	108002c4 	addi	r2,r2,11
 10126dc:	e0bffa15 	stw	r2,-24(fp)
    pdest                = &p_q_data->OSEventTbl[0];
 10126e0:	e0bffe17 	ldw	r2,-8(fp)
 10126e4:	10800204 	addi	r2,r2,8
 10126e8:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 10126ec:	e03ffb05 	stb	zero,-20(fp)
 10126f0:	00000d06 	br	1012728 <OSQQuery+0xf8>
        *pdest++ = *psrc++;
 10126f4:	e0bffa17 	ldw	r2,-24(fp)
 10126f8:	10c00003 	ldbu	r3,0(r2)
 10126fc:	e0bff917 	ldw	r2,-28(fp)
 1012700:	10c00005 	stb	r3,0(r2)
 1012704:	e0bff917 	ldw	r2,-28(fp)
 1012708:	10800044 	addi	r2,r2,1
 101270c:	e0bff915 	stw	r2,-28(fp)
 1012710:	e0bffa17 	ldw	r2,-24(fp)
 1012714:	10800044 	addi	r2,r2,1
 1012718:	e0bffa15 	stw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 101271c:	e0bffb03 	ldbu	r2,-20(fp)
 1012720:	10800044 	addi	r2,r2,1
 1012724:	e0bffb05 	stb	r2,-20(fp)
 1012728:	e0bffb03 	ldbu	r2,-20(fp)
 101272c:	108000f0 	cmpltui	r2,r2,3
 1012730:	103ff01e 	bne	r2,zero,10126f4 <OSQQuery+0xc4>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
 1012734:	e0bffd17 	ldw	r2,-12(fp)
 1012738:	10800117 	ldw	r2,4(r2)
 101273c:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
 1012740:	e0bffc17 	ldw	r2,-16(fp)
 1012744:	1080058b 	ldhu	r2,22(r2)
 1012748:	10bfffcc 	andi	r2,r2,65535
 101274c:	1005003a 	cmpeq	r2,r2,zero
 1012750:	1000061e 	bne	r2,zero,101276c <OSQQuery+0x13c>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
 1012754:	e0bffc17 	ldw	r2,-16(fp)
 1012758:	10800417 	ldw	r2,16(r2)
 101275c:	10c00017 	ldw	r3,0(r2)
 1012760:	e0bffe17 	ldw	r2,-8(fp)
 1012764:	10c00015 	stw	r3,0(r2)
 1012768:	00000206 	br	1012774 <OSQQuery+0x144>
    } else {
        p_q_data->OSMsg = (void *)0;
 101276c:	e0bffe17 	ldw	r2,-8(fp)
 1012770:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
 1012774:	e0bffc17 	ldw	r2,-16(fp)
 1012778:	10c0058b 	ldhu	r3,22(r2)
 101277c:	e0bffe17 	ldw	r2,-8(fp)
 1012780:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
 1012784:	e0bffc17 	ldw	r2,-16(fp)
 1012788:	10c0050b 	ldhu	r3,20(r2)
 101278c:	e0bffe17 	ldw	r2,-8(fp)
 1012790:	10c0018d 	sth	r3,6(r2)
 1012794:	e0bff817 	ldw	r2,-32(fp)
 1012798:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101279c:	e0bff617 	ldw	r2,-40(fp)
 10127a0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 10127a4:	e03fff15 	stw	zero,-4(fp)
 10127a8:	e0bfff17 	ldw	r2,-4(fp)
}
 10127ac:	e037883a 	mov	sp,fp
 10127b0:	df000017 	ldw	fp,0(sp)
 10127b4:	dec00104 	addi	sp,sp,4
 10127b8:	f800283a 	ret

010127bc <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
 10127bc:	f811883a 	mov	r8,ra
 10127c0:	100c3d80 	call	100c3d8 <_mcount>
 10127c4:	403f883a 	mov	ra,r8
 10127c8:	defffb04 	addi	sp,sp,-20
 10127cc:	dfc00415 	stw	ra,16(sp)
 10127d0:	df000315 	stw	fp,12(sp)
 10127d4:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
 10127d8:	01004134 	movhi	r4,260
 10127dc:	211e5804 	addi	r4,r4,31072
 10127e0:	01407804 	movi	r5,480
 10127e4:	100e86c0 	call	100e86c <OS_MemClr>
    pq1 = &OSQTbl[0];
 10127e8:	00804134 	movhi	r2,260
 10127ec:	109e5804 	addi	r2,r2,31072
 10127f0:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
 10127f4:	00804134 	movhi	r2,260
 10127f8:	109e5e04 	addi	r2,r2,31096
 10127fc:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 1012800:	e03fff0d 	sth	zero,-4(fp)
 1012804:	00000c06 	br	1012838 <OS_QInit+0x7c>
        pq1->OSQPtr = pq2;
 1012808:	e0fffe17 	ldw	r3,-8(fp)
 101280c:	e0bffd17 	ldw	r2,-12(fp)
 1012810:	18800015 	stw	r2,0(r3)
        pq1++;
 1012814:	e0bffe17 	ldw	r2,-8(fp)
 1012818:	10800604 	addi	r2,r2,24
 101281c:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
 1012820:	e0bffd17 	ldw	r2,-12(fp)
 1012824:	10800604 	addi	r2,r2,24
 1012828:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 101282c:	e0bfff0b 	ldhu	r2,-4(fp)
 1012830:	10800044 	addi	r2,r2,1
 1012834:	e0bfff0d 	sth	r2,-4(fp)
 1012838:	e0bfff0b 	ldhu	r2,-4(fp)
 101283c:	108004f0 	cmpltui	r2,r2,19
 1012840:	103ff11e 	bne	r2,zero,1012808 <OS_QInit+0x4c>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
 1012844:	e0bffe17 	ldw	r2,-8(fp)
 1012848:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
 101284c:	00c040f4 	movhi	r3,259
 1012850:	18d77404 	addi	r3,r3,24016
 1012854:	00804134 	movhi	r2,260
 1012858:	109e5804 	addi	r2,r2,31072
 101285c:	18800015 	stw	r2,0(r3)
#endif
}
 1012860:	e037883a 	mov	sp,fp
 1012864:	dfc00117 	ldw	ra,4(sp)
 1012868:	df000017 	ldw	fp,0(sp)
 101286c:	dec00204 	addi	sp,sp,8
 1012870:	f800283a 	ret

01012874 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
 1012874:	f811883a 	mov	r8,ra
 1012878:	100c3d80 	call	100c3d8 <_mcount>
 101287c:	403f883a 	mov	ra,r8
 1012880:	defff904 	addi	sp,sp,-28
 1012884:	df000615 	stw	fp,24(sp)
 1012888:	df000604 	addi	fp,sp,24
 101288c:	e13ffe15 	stw	r4,-8(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 1012890:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 1012894:	e0bffe17 	ldw	r2,-8(fp)
 1012898:	1004c03a 	cmpne	r2,r2,zero
 101289c:	1000021e 	bne	r2,zero,10128a8 <OSSemAccept+0x34>
        return (0);
 10128a0:	e03fff15 	stw	zero,-4(fp)
 10128a4:	00002106 	br	101292c <OSSemAccept+0xb8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 10128a8:	e0bffe17 	ldw	r2,-8(fp)
 10128ac:	10800003 	ldbu	r2,0(r2)
 10128b0:	10803fcc 	andi	r2,r2,255
 10128b4:	108000e0 	cmpeqi	r2,r2,3
 10128b8:	1000021e 	bne	r2,zero,10128c4 <OSSemAccept+0x50>
        return (0);
 10128bc:	e03fff15 	stw	zero,-4(fp)
 10128c0:	00001a06 	br	101292c <OSSemAccept+0xb8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10128c4:	0005303a 	rdctl	r2,status
 10128c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10128cc:	e0fffb17 	ldw	r3,-20(fp)
 10128d0:	00bfff84 	movi	r2,-2
 10128d4:	1884703a 	and	r2,r3,r2
 10128d8:	1001703a 	wrctl	status,r2
  
  return context;
 10128dc:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 10128e0:	e0bffc15 	stw	r2,-16(fp)
    cnt = pevent->OSEventCnt;
 10128e4:	e0bffe17 	ldw	r2,-8(fp)
 10128e8:	1080020b 	ldhu	r2,8(r2)
 10128ec:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
 10128f0:	e0bffd0b 	ldhu	r2,-12(fp)
 10128f4:	1005003a 	cmpeq	r2,r2,zero
 10128f8:	1000061e 	bne	r2,zero,1012914 <OSSemAccept+0xa0>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
 10128fc:	e0bffe17 	ldw	r2,-8(fp)
 1012900:	1080020b 	ldhu	r2,8(r2)
 1012904:	10bfffc4 	addi	r2,r2,-1
 1012908:	1007883a 	mov	r3,r2
 101290c:	e0bffe17 	ldw	r2,-8(fp)
 1012910:	10c0020d 	sth	r3,8(r2)
 1012914:	e0bffc17 	ldw	r2,-16(fp)
 1012918:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101291c:	e0bffa17 	ldw	r2,-24(fp)
 1012920:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
 1012924:	e0bffd0b 	ldhu	r2,-12(fp)
 1012928:	e0bfff15 	stw	r2,-4(fp)
 101292c:	e0bfff17 	ldw	r2,-4(fp)
}
 1012930:	e037883a 	mov	sp,fp
 1012934:	df000017 	ldw	fp,0(sp)
 1012938:	dec00104 	addi	sp,sp,4
 101293c:	f800283a 	ret

01012940 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
 1012940:	f811883a 	mov	r8,ra
 1012944:	100c3d80 	call	100c3d8 <_mcount>
 1012948:	403f883a 	mov	ra,r8
 101294c:	defff804 	addi	sp,sp,-32
 1012950:	dfc00715 	stw	ra,28(sp)
 1012954:	df000615 	stw	fp,24(sp)
 1012958:	df000604 	addi	fp,sp,24
 101295c:	e13ffe0d 	sth	r4,-8(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 1012960:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 1012964:	008040f4 	movhi	r2,259
 1012968:	10977704 	addi	r2,r2,24028
 101296c:	10800003 	ldbu	r2,0(r2)
 1012970:	10803fcc 	andi	r2,r2,255
 1012974:	1005003a 	cmpeq	r2,r2,zero
 1012978:	1000021e 	bne	r2,zero,1012984 <OSSemCreate+0x44>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
 101297c:	e03fff15 	stw	zero,-4(fp)
 1012980:	00003106 	br	1012a48 <OSSemCreate+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1012984:	0005303a 	rdctl	r2,status
 1012988:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101298c:	e0fffb17 	ldw	r3,-20(fp)
 1012990:	00bfff84 	movi	r2,-2
 1012994:	1884703a 	and	r2,r3,r2
 1012998:	1001703a 	wrctl	status,r2
  
  return context;
 101299c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 10129a0:	e0bffc15 	stw	r2,-16(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
 10129a4:	008040f4 	movhi	r2,259
 10129a8:	10977604 	addi	r2,r2,24024
 10129ac:	10800017 	ldw	r2,0(r2)
 10129b0:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
 10129b4:	008040f4 	movhi	r2,259
 10129b8:	10977604 	addi	r2,r2,24024
 10129bc:	10800017 	ldw	r2,0(r2)
 10129c0:	1005003a 	cmpeq	r2,r2,zero
 10129c4:	1000081e 	bne	r2,zero,10129e8 <OSSemCreate+0xa8>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 10129c8:	008040f4 	movhi	r2,259
 10129cc:	10977604 	addi	r2,r2,24024
 10129d0:	10800017 	ldw	r2,0(r2)
 10129d4:	10800117 	ldw	r2,4(r2)
 10129d8:	1007883a 	mov	r3,r2
 10129dc:	008040f4 	movhi	r2,259
 10129e0:	10977604 	addi	r2,r2,24024
 10129e4:	10c00015 	stw	r3,0(r2)
 10129e8:	e0bffc17 	ldw	r2,-16(fp)
 10129ec:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10129f0:	e0bffa17 	ldw	r2,-24(fp)
 10129f4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
 10129f8:	e0bffd17 	ldw	r2,-12(fp)
 10129fc:	1005003a 	cmpeq	r2,r2,zero
 1012a00:	10000f1e 	bne	r2,zero,1012a40 <OSSemCreate+0x100>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
 1012a04:	e0fffd17 	ldw	r3,-12(fp)
 1012a08:	008000c4 	movi	r2,3
 1012a0c:	18800005 	stb	r2,0(r3)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
 1012a10:	e0fffd17 	ldw	r3,-12(fp)
 1012a14:	e0bffe0b 	ldhu	r2,-8(fp)
 1012a18:	1880020d 	sth	r2,8(r3)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
 1012a1c:	e0bffd17 	ldw	r2,-12(fp)
 1012a20:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
 1012a24:	e0fffd17 	ldw	r3,-12(fp)
 1012a28:	00800fc4 	movi	r2,63
 1012a2c:	18800385 	stb	r2,14(r3)
        pevent->OSEventName[1] = OS_ASCII_NUL;
 1012a30:	e0bffd17 	ldw	r2,-12(fp)
 1012a34:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
 1012a38:	e13ffd17 	ldw	r4,-12(fp)
 1012a3c:	100e44c0 	call	100e44c <OS_EventWaitListInit>
    }
    return (pevent);
 1012a40:	e0bffd17 	ldw	r2,-12(fp)
 1012a44:	e0bfff15 	stw	r2,-4(fp)
 1012a48:	e0bfff17 	ldw	r2,-4(fp)
}
 1012a4c:	e037883a 	mov	sp,fp
 1012a50:	dfc00117 	ldw	ra,4(sp)
 1012a54:	df000017 	ldw	fp,0(sp)
 1012a58:	dec00204 	addi	sp,sp,8
 1012a5c:	f800283a 	ret

01012a60 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 1012a60:	f811883a 	mov	r8,ra
 1012a64:	100c3d80 	call	100c3d8 <_mcount>
 1012a68:	403f883a 	mov	ra,r8
 1012a6c:	defff104 	addi	sp,sp,-60
 1012a70:	dfc00e15 	stw	ra,56(sp)
 1012a74:	df000d15 	stw	fp,52(sp)
 1012a78:	df000d04 	addi	fp,sp,52
 1012a7c:	e13ffb15 	stw	r4,-20(fp)
 1012a80:	e1bffd15 	stw	r6,-12(fp)
 1012a84:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 1012a88:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 1012a8c:	e0bffd17 	ldw	r2,-12(fp)
 1012a90:	1004c03a 	cmpne	r2,r2,zero
 1012a94:	1000031e 	bne	r2,zero,1012aa4 <OSSemDel+0x44>
        return (pevent);
 1012a98:	e0bffb17 	ldw	r2,-20(fp)
 1012a9c:	e0bfff15 	stw	r2,-4(fp)
 1012aa0:	00009406 	br	1012cf4 <OSSemDel+0x294>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 1012aa4:	e0bffb17 	ldw	r2,-20(fp)
 1012aa8:	1004c03a 	cmpne	r2,r2,zero
 1012aac:	1000061e 	bne	r2,zero,1012ac8 <OSSemDel+0x68>
        *perr = OS_ERR_PEVENT_NULL;
 1012ab0:	e0fffd17 	ldw	r3,-12(fp)
 1012ab4:	00800104 	movi	r2,4
 1012ab8:	18800005 	stb	r2,0(r3)
        return (pevent);
 1012abc:	e0fffb17 	ldw	r3,-20(fp)
 1012ac0:	e0ffff15 	stw	r3,-4(fp)
 1012ac4:	00008b06 	br	1012cf4 <OSSemDel+0x294>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 1012ac8:	e0bffb17 	ldw	r2,-20(fp)
 1012acc:	10800003 	ldbu	r2,0(r2)
 1012ad0:	10803fcc 	andi	r2,r2,255
 1012ad4:	108000e0 	cmpeqi	r2,r2,3
 1012ad8:	1000061e 	bne	r2,zero,1012af4 <OSSemDel+0x94>
        *perr = OS_ERR_EVENT_TYPE;
 1012adc:	e0fffd17 	ldw	r3,-12(fp)
 1012ae0:	00800044 	movi	r2,1
 1012ae4:	18800005 	stb	r2,0(r3)
        return (pevent);
 1012ae8:	e0bffb17 	ldw	r2,-20(fp)
 1012aec:	e0bfff15 	stw	r2,-4(fp)
 1012af0:	00008006 	br	1012cf4 <OSSemDel+0x294>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 1012af4:	008040f4 	movhi	r2,259
 1012af8:	10977704 	addi	r2,r2,24028
 1012afc:	10800003 	ldbu	r2,0(r2)
 1012b00:	10803fcc 	andi	r2,r2,255
 1012b04:	1005003a 	cmpeq	r2,r2,zero
 1012b08:	1000061e 	bne	r2,zero,1012b24 <OSSemDel+0xc4>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
 1012b0c:	e0fffd17 	ldw	r3,-12(fp)
 1012b10:	008003c4 	movi	r2,15
 1012b14:	18800005 	stb	r2,0(r3)
        return (pevent);
 1012b18:	e0fffb17 	ldw	r3,-20(fp)
 1012b1c:	e0ffff15 	stw	r3,-4(fp)
 1012b20:	00007406 	br	1012cf4 <OSSemDel+0x294>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1012b24:	0005303a 	rdctl	r2,status
 1012b28:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1012b2c:	e0fff717 	ldw	r3,-36(fp)
 1012b30:	00bfff84 	movi	r2,-2
 1012b34:	1884703a 	and	r2,r3,r2
 1012b38:	1001703a 	wrctl	status,r2
  
  return context;
 1012b3c:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 1012b40:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
 1012b44:	e0bffb17 	ldw	r2,-20(fp)
 1012b48:	10800283 	ldbu	r2,10(r2)
 1012b4c:	10803fcc 	andi	r2,r2,255
 1012b50:	1005003a 	cmpeq	r2,r2,zero
 1012b54:	1000031e 	bne	r2,zero,1012b64 <OSSemDel+0x104>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 1012b58:	00800044 	movi	r2,1
 1012b5c:	e0bffa05 	stb	r2,-24(fp)
 1012b60:	00000106 	br	1012b68 <OSSemDel+0x108>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 1012b64:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
 1012b68:	e0bffc03 	ldbu	r2,-16(fp)
 1012b6c:	e0bffe15 	stw	r2,-8(fp)
 1012b70:	e0fffe17 	ldw	r3,-8(fp)
 1012b74:	1805003a 	cmpeq	r2,r3,zero
 1012b78:	1000041e 	bne	r2,zero,1012b8c <OSSemDel+0x12c>
 1012b7c:	e0fffe17 	ldw	r3,-8(fp)
 1012b80:	18800060 	cmpeqi	r2,r3,1
 1012b84:	10002d1e 	bne	r2,zero,1012c3c <OSSemDel+0x1dc>
 1012b88:	00004f06 	br	1012cc8 <OSSemDel+0x268>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
 1012b8c:	e0bffa03 	ldbu	r2,-24(fp)
 1012b90:	1004c03a 	cmpne	r2,r2,zero
 1012b94:	10001a1e 	bne	r2,zero,1012c00 <OSSemDel+0x1a0>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 1012b98:	e0fffb17 	ldw	r3,-20(fp)
 1012b9c:	00800fc4 	movi	r2,63
 1012ba0:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 1012ba4:	e0bffb17 	ldw	r2,-20(fp)
 1012ba8:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 1012bac:	e0bffb17 	ldw	r2,-20(fp)
 1012bb0:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 1012bb4:	008040f4 	movhi	r2,259
 1012bb8:	10977604 	addi	r2,r2,24024
 1012bbc:	10c00017 	ldw	r3,0(r2)
 1012bc0:	e0bffb17 	ldw	r2,-20(fp)
 1012bc4:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 1012bc8:	e0bffb17 	ldw	r2,-20(fp)
 1012bcc:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 1012bd0:	00c040f4 	movhi	r3,259
 1012bd4:	18d77604 	addi	r3,r3,24024
 1012bd8:	e0bffb17 	ldw	r2,-20(fp)
 1012bdc:	18800015 	stw	r2,0(r3)
 1012be0:	e0bff817 	ldw	r2,-32(fp)
 1012be4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1012be8:	e0bff617 	ldw	r2,-40(fp)
 1012bec:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 1012bf0:	e0bffd17 	ldw	r2,-12(fp)
 1012bf4:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
 1012bf8:	e03ff915 	stw	zero,-28(fp)
 1012bfc:	00003b06 	br	1012cec <OSSemDel+0x28c>
 1012c00:	e0bff817 	ldw	r2,-32(fp)
 1012c04:	e0bff515 	stw	r2,-44(fp)
 1012c08:	e0bff517 	ldw	r2,-44(fp)
 1012c0c:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 1012c10:	e0fffd17 	ldw	r3,-12(fp)
 1012c14:	00801244 	movi	r2,73
 1012c18:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
 1012c1c:	e0bffb17 	ldw	r2,-20(fp)
 1012c20:	e0bff915 	stw	r2,-28(fp)
             }
             break;
 1012c24:	00003106 	br	1012cec <OSSemDel+0x28c>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 1012c28:	e13ffb17 	ldw	r4,-20(fp)
 1012c2c:	000b883a 	mov	r5,zero
 1012c30:	01800044 	movi	r6,1
 1012c34:	000f883a 	mov	r7,zero
 1012c38:	100de5c0 	call	100de5c <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
 1012c3c:	e0bffb17 	ldw	r2,-20(fp)
 1012c40:	10800283 	ldbu	r2,10(r2)
 1012c44:	10803fcc 	andi	r2,r2,255
 1012c48:	1004c03a 	cmpne	r2,r2,zero
 1012c4c:	103ff61e 	bne	r2,zero,1012c28 <OSSemDel+0x1c8>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 1012c50:	e0fffb17 	ldw	r3,-20(fp)
 1012c54:	00800fc4 	movi	r2,63
 1012c58:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 1012c5c:	e0bffb17 	ldw	r2,-20(fp)
 1012c60:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 1012c64:	e0bffb17 	ldw	r2,-20(fp)
 1012c68:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 1012c6c:	008040f4 	movhi	r2,259
 1012c70:	10977604 	addi	r2,r2,24024
 1012c74:	10c00017 	ldw	r3,0(r2)
 1012c78:	e0bffb17 	ldw	r2,-20(fp)
 1012c7c:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 1012c80:	e0bffb17 	ldw	r2,-20(fp)
 1012c84:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 1012c88:	00c040f4 	movhi	r3,259
 1012c8c:	18d77604 	addi	r3,r3,24024
 1012c90:	e0bffb17 	ldw	r2,-20(fp)
 1012c94:	18800015 	stw	r2,0(r3)
 1012c98:	e0bff817 	ldw	r2,-32(fp)
 1012c9c:	e0bff415 	stw	r2,-48(fp)
 1012ca0:	e0bff417 	ldw	r2,-48(fp)
 1012ca4:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 1012ca8:	e0bffa03 	ldbu	r2,-24(fp)
 1012cac:	10800058 	cmpnei	r2,r2,1
 1012cb0:	1000011e 	bne	r2,zero,1012cb8 <OSSemDel+0x258>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 1012cb4:	100e9440 	call	100e944 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 1012cb8:	e0bffd17 	ldw	r2,-12(fp)
 1012cbc:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
 1012cc0:	e03ff915 	stw	zero,-28(fp)
             break;
 1012cc4:	00000906 	br	1012cec <OSSemDel+0x28c>
 1012cc8:	e0bff817 	ldw	r2,-32(fp)
 1012ccc:	e0bff315 	stw	r2,-52(fp)
 1012cd0:	e0bff317 	ldw	r2,-52(fp)
 1012cd4:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 1012cd8:	e0fffd17 	ldw	r3,-12(fp)
 1012cdc:	008001c4 	movi	r2,7
 1012ce0:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
 1012ce4:	e0bffb17 	ldw	r2,-20(fp)
 1012ce8:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
 1012cec:	e0bff917 	ldw	r2,-28(fp)
 1012cf0:	e0bfff15 	stw	r2,-4(fp)
 1012cf4:	e0bfff17 	ldw	r2,-4(fp)
}
 1012cf8:	e037883a 	mov	sp,fp
 1012cfc:	dfc00117 	ldw	ra,4(sp)
 1012d00:	df000017 	ldw	fp,0(sp)
 1012d04:	dec00204 	addi	sp,sp,8
 1012d08:	f800283a 	ret

01012d0c <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 1012d0c:	f811883a 	mov	r8,ra
 1012d10:	100c3d80 	call	100c3d8 <_mcount>
 1012d14:	403f883a 	mov	ra,r8
 1012d18:	defff404 	addi	sp,sp,-48
 1012d1c:	dfc00b15 	stw	ra,44(sp)
 1012d20:	df000a15 	stw	fp,40(sp)
 1012d24:	df000a04 	addi	fp,sp,40
 1012d28:	e13ffc15 	stw	r4,-16(fp)
 1012d2c:	e1bffe15 	stw	r6,-8(fp)
 1012d30:	e17ffd0d 	sth	r5,-12(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 1012d34:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 1012d38:	e0bffe17 	ldw	r2,-8(fp)
 1012d3c:	1005003a 	cmpeq	r2,r2,zero
 1012d40:	10008f1e 	bne	r2,zero,1012f80 <OSSemPend+0x274>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 1012d44:	e0bffc17 	ldw	r2,-16(fp)
 1012d48:	1004c03a 	cmpne	r2,r2,zero
 1012d4c:	1000041e 	bne	r2,zero,1012d60 <OSSemPend+0x54>
        *perr = OS_ERR_PEVENT_NULL;
 1012d50:	e0fffe17 	ldw	r3,-8(fp)
 1012d54:	00800104 	movi	r2,4
 1012d58:	18800005 	stb	r2,0(r3)
        return;
 1012d5c:	00008806 	br	1012f80 <OSSemPend+0x274>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 1012d60:	e0bffc17 	ldw	r2,-16(fp)
 1012d64:	10800003 	ldbu	r2,0(r2)
 1012d68:	10803fcc 	andi	r2,r2,255
 1012d6c:	108000e0 	cmpeqi	r2,r2,3
 1012d70:	1000041e 	bne	r2,zero,1012d84 <OSSemPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 1012d74:	e0fffe17 	ldw	r3,-8(fp)
 1012d78:	00800044 	movi	r2,1
 1012d7c:	18800005 	stb	r2,0(r3)
        return;
 1012d80:	00007f06 	br	1012f80 <OSSemPend+0x274>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
 1012d84:	008040f4 	movhi	r2,259
 1012d88:	10977704 	addi	r2,r2,24028
 1012d8c:	10800003 	ldbu	r2,0(r2)
 1012d90:	10803fcc 	andi	r2,r2,255
 1012d94:	1005003a 	cmpeq	r2,r2,zero
 1012d98:	1000041e 	bne	r2,zero,1012dac <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 1012d9c:	e0fffe17 	ldw	r3,-8(fp)
 1012da0:	00800084 	movi	r2,2
 1012da4:	18800005 	stb	r2,0(r3)
        return;
 1012da8:	00007506 	br	1012f80 <OSSemPend+0x274>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
 1012dac:	008040f4 	movhi	r2,259
 1012db0:	10976604 	addi	r2,r2,23960
 1012db4:	10800003 	ldbu	r2,0(r2)
 1012db8:	10803fcc 	andi	r2,r2,255
 1012dbc:	1005003a 	cmpeq	r2,r2,zero
 1012dc0:	1000041e 	bne	r2,zero,1012dd4 <OSSemPend+0xc8>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 1012dc4:	e0fffe17 	ldw	r3,-8(fp)
 1012dc8:	00800344 	movi	r2,13
 1012dcc:	18800005 	stb	r2,0(r3)
        return;
 1012dd0:	00006b06 	br	1012f80 <OSSemPend+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1012dd4:	0005303a 	rdctl	r2,status
 1012dd8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1012ddc:	e0fffa17 	ldw	r3,-24(fp)
 1012de0:	00bfff84 	movi	r2,-2
 1012de4:	1884703a 	and	r2,r3,r2
 1012de8:	1001703a 	wrctl	status,r2
  
  return context;
 1012dec:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 1012df0:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
 1012df4:	e0bffc17 	ldw	r2,-16(fp)
 1012df8:	1080020b 	ldhu	r2,8(r2)
 1012dfc:	10bfffcc 	andi	r2,r2,65535
 1012e00:	1005003a 	cmpeq	r2,r2,zero
 1012e04:	10000d1e 	bne	r2,zero,1012e3c <OSSemPend+0x130>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
 1012e08:	e0bffc17 	ldw	r2,-16(fp)
 1012e0c:	1080020b 	ldhu	r2,8(r2)
 1012e10:	10bfffc4 	addi	r2,r2,-1
 1012e14:	1007883a 	mov	r3,r2
 1012e18:	e0bffc17 	ldw	r2,-16(fp)
 1012e1c:	10c0020d 	sth	r3,8(r2)
 1012e20:	e0bffb17 	ldw	r2,-20(fp)
 1012e24:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1012e28:	e0bff917 	ldw	r2,-28(fp)
 1012e2c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 1012e30:	e0bffe17 	ldw	r2,-8(fp)
 1012e34:	10000005 	stb	zero,0(r2)
        return;
 1012e38:	00005106 	br	1012f80 <OSSemPend+0x274>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
 1012e3c:	008040f4 	movhi	r2,259
 1012e40:	10977804 	addi	r2,r2,24032
 1012e44:	10c00017 	ldw	r3,0(r2)
 1012e48:	008040f4 	movhi	r2,259
 1012e4c:	10977804 	addi	r2,r2,24032
 1012e50:	10800017 	ldw	r2,0(r2)
 1012e54:	10800c03 	ldbu	r2,48(r2)
 1012e58:	10800054 	ori	r2,r2,1
 1012e5c:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 1012e60:	008040f4 	movhi	r2,259
 1012e64:	10977804 	addi	r2,r2,24032
 1012e68:	10800017 	ldw	r2,0(r2)
 1012e6c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
 1012e70:	008040f4 	movhi	r2,259
 1012e74:	10977804 	addi	r2,r2,24032
 1012e78:	10c00017 	ldw	r3,0(r2)
 1012e7c:	e0bffd0b 	ldhu	r2,-12(fp)
 1012e80:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 1012e84:	e13ffc17 	ldw	r4,-16(fp)
 1012e88:	100dffc0 	call	100dffc <OS_EventTaskWait>
 1012e8c:	e0bffb17 	ldw	r2,-20(fp)
 1012e90:	e0bff815 	stw	r2,-32(fp)
 1012e94:	e0bff817 	ldw	r2,-32(fp)
 1012e98:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
 1012e9c:	100e9440 	call	100e944 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1012ea0:	0005303a 	rdctl	r2,status
 1012ea4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1012ea8:	e0fff717 	ldw	r3,-36(fp)
 1012eac:	00bfff84 	movi	r2,-2
 1012eb0:	1884703a 	and	r2,r3,r2
 1012eb4:	1001703a 	wrctl	status,r2
  
  return context;
 1012eb8:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
 1012ebc:	e0bffb15 	stw	r2,-20(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 1012ec0:	008040f4 	movhi	r2,259
 1012ec4:	10977804 	addi	r2,r2,24032
 1012ec8:	10800017 	ldw	r2,0(r2)
 1012ecc:	10800c43 	ldbu	r2,49(r2)
 1012ed0:	10803fcc 	andi	r2,r2,255
 1012ed4:	e0bfff15 	stw	r2,-4(fp)
 1012ed8:	e0ffff17 	ldw	r3,-4(fp)
 1012edc:	1805003a 	cmpeq	r2,r3,zero
 1012ee0:	1000041e 	bne	r2,zero,1012ef4 <OSSemPend+0x1e8>
 1012ee4:	e0ffff17 	ldw	r3,-4(fp)
 1012ee8:	188000a0 	cmpeqi	r2,r3,2
 1012eec:	1000041e 	bne	r2,zero,1012f00 <OSSemPend+0x1f4>
 1012ef0:	00000706 	br	1012f10 <OSSemPend+0x204>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
 1012ef4:	e0bffe17 	ldw	r2,-8(fp)
 1012ef8:	10000005 	stb	zero,0(r2)
             break;
 1012efc:	00000c06 	br	1012f30 <OSSemPend+0x224>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 1012f00:	e0fffe17 	ldw	r3,-8(fp)
 1012f04:	00800384 	movi	r2,14
 1012f08:	18800005 	stb	r2,0(r3)
             break;
 1012f0c:	00000806 	br	1012f30 <OSSemPend+0x224>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
 1012f10:	008040f4 	movhi	r2,259
 1012f14:	10977804 	addi	r2,r2,24032
 1012f18:	11000017 	ldw	r4,0(r2)
 1012f1c:	e17ffc17 	ldw	r5,-16(fp)
 1012f20:	100e2780 	call	100e278 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 1012f24:	e0fffe17 	ldw	r3,-8(fp)
 1012f28:	00800284 	movi	r2,10
 1012f2c:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 1012f30:	008040f4 	movhi	r2,259
 1012f34:	10977804 	addi	r2,r2,24032
 1012f38:	10800017 	ldw	r2,0(r2)
 1012f3c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 1012f40:	008040f4 	movhi	r2,259
 1012f44:	10977804 	addi	r2,r2,24032
 1012f48:	10800017 	ldw	r2,0(r2)
 1012f4c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 1012f50:	008040f4 	movhi	r2,259
 1012f54:	10977804 	addi	r2,r2,24032
 1012f58:	10800017 	ldw	r2,0(r2)
 1012f5c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 1012f60:	008040f4 	movhi	r2,259
 1012f64:	10977804 	addi	r2,r2,24032
 1012f68:	10800017 	ldw	r2,0(r2)
 1012f6c:	10000815 	stw	zero,32(r2)
 1012f70:	e0bffb17 	ldw	r2,-20(fp)
 1012f74:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1012f78:	e0bff617 	ldw	r2,-40(fp)
 1012f7c:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
 1012f80:	e037883a 	mov	sp,fp
 1012f84:	dfc00117 	ldw	ra,4(sp)
 1012f88:	df000017 	ldw	fp,0(sp)
 1012f8c:	dec00204 	addi	sp,sp,8
 1012f90:	f800283a 	ret

01012f94 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 1012f94:	f811883a 	mov	r8,ra
 1012f98:	100c3d80 	call	100c3d8 <_mcount>
 1012f9c:	403f883a 	mov	ra,r8
 1012fa0:	defff504 	addi	sp,sp,-44
 1012fa4:	dfc00a15 	stw	ra,40(sp)
 1012fa8:	df000915 	stw	fp,36(sp)
 1012fac:	df000904 	addi	fp,sp,36
 1012fb0:	e13ffc15 	stw	r4,-16(fp)
 1012fb4:	e1bffe15 	stw	r6,-8(fp)
 1012fb8:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 1012fbc:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 1012fc0:	e0bffe17 	ldw	r2,-8(fp)
 1012fc4:	1004c03a 	cmpne	r2,r2,zero
 1012fc8:	1000021e 	bne	r2,zero,1012fd4 <OSSemPendAbort+0x40>
        return (0);
 1012fcc:	e03fff15 	stw	zero,-4(fp)
 1012fd0:	00004c06 	br	1013104 <OSSemPendAbort+0x170>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 1012fd4:	e0bffc17 	ldw	r2,-16(fp)
 1012fd8:	1004c03a 	cmpne	r2,r2,zero
 1012fdc:	1000051e 	bne	r2,zero,1012ff4 <OSSemPendAbort+0x60>
        *perr = OS_ERR_PEVENT_NULL;
 1012fe0:	e0fffe17 	ldw	r3,-8(fp)
 1012fe4:	00800104 	movi	r2,4
 1012fe8:	18800005 	stb	r2,0(r3)
        return (0);
 1012fec:	e03fff15 	stw	zero,-4(fp)
 1012ff0:	00004406 	br	1013104 <OSSemPendAbort+0x170>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 1012ff4:	e0bffc17 	ldw	r2,-16(fp)
 1012ff8:	10800003 	ldbu	r2,0(r2)
 1012ffc:	10803fcc 	andi	r2,r2,255
 1013000:	108000e0 	cmpeqi	r2,r2,3
 1013004:	1000051e 	bne	r2,zero,101301c <OSSemPendAbort+0x88>
        *perr = OS_ERR_EVENT_TYPE;
 1013008:	e0fffe17 	ldw	r3,-8(fp)
 101300c:	00800044 	movi	r2,1
 1013010:	18800005 	stb	r2,0(r3)
        return (0);
 1013014:	e03fff15 	stw	zero,-4(fp)
 1013018:	00003a06 	br	1013104 <OSSemPendAbort+0x170>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101301c:	0005303a 	rdctl	r2,status
 1013020:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1013024:	e0fff917 	ldw	r3,-28(fp)
 1013028:	00bfff84 	movi	r2,-2
 101302c:	1884703a 	and	r2,r3,r2
 1013030:	1001703a 	wrctl	status,r2
  
  return context;
 1013034:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 1013038:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
 101303c:	e0bffc17 	ldw	r2,-16(fp)
 1013040:	10800283 	ldbu	r2,10(r2)
 1013044:	10803fcc 	andi	r2,r2,255
 1013048:	1005003a 	cmpeq	r2,r2,zero
 101304c:	1000261e 	bne	r2,zero,10130e8 <OSSemPendAbort+0x154>
        nbr_tasks = 0;
 1013050:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
 1013054:	e0bffd03 	ldbu	r2,-12(fp)
 1013058:	10800060 	cmpeqi	r2,r2,1
 101305c:	1000091e 	bne	r2,zero,1013084 <OSSemPendAbort+0xf0>
 1013060:	00000e06 	br	101309c <OSSemPendAbort+0x108>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 1013064:	e13ffc17 	ldw	r4,-16(fp)
 1013068:	000b883a 	mov	r5,zero
 101306c:	01800044 	movi	r6,1
 1013070:	01c00084 	movi	r7,2
 1013074:	100de5c0 	call	100de5c <OS_EventTaskRdy>
                     nbr_tasks++;
 1013078:	e0bffb03 	ldbu	r2,-20(fp)
 101307c:	10800044 	addi	r2,r2,1
 1013080:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
 1013084:	e0bffc17 	ldw	r2,-16(fp)
 1013088:	10800283 	ldbu	r2,10(r2)
 101308c:	10803fcc 	andi	r2,r2,255
 1013090:	1004c03a 	cmpne	r2,r2,zero
 1013094:	103ff31e 	bne	r2,zero,1013064 <OSSemPendAbort+0xd0>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 1013098:	00000806 	br	10130bc <OSSemPendAbort+0x128>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 101309c:	e13ffc17 	ldw	r4,-16(fp)
 10130a0:	000b883a 	mov	r5,zero
 10130a4:	01800044 	movi	r6,1
 10130a8:	01c00084 	movi	r7,2
 10130ac:	100de5c0 	call	100de5c <OS_EventTaskRdy>
                 nbr_tasks++;
 10130b0:	e0bffb03 	ldbu	r2,-20(fp)
 10130b4:	10800044 	addi	r2,r2,1
 10130b8:	e0bffb05 	stb	r2,-20(fp)
 10130bc:	e0bffa17 	ldw	r2,-24(fp)
 10130c0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10130c4:	e0bff817 	ldw	r2,-32(fp)
 10130c8:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 10130cc:	100e9440 	call	100e944 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 10130d0:	e0fffe17 	ldw	r3,-8(fp)
 10130d4:	00800384 	movi	r2,14
 10130d8:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
 10130dc:	e0bffb03 	ldbu	r2,-20(fp)
 10130e0:	e0bfff15 	stw	r2,-4(fp)
 10130e4:	00000706 	br	1013104 <OSSemPendAbort+0x170>
 10130e8:	e0bffa17 	ldw	r2,-24(fp)
 10130ec:	e0bff715 	stw	r2,-36(fp)
 10130f0:	e0bff717 	ldw	r2,-36(fp)
 10130f4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 10130f8:	e0bffe17 	ldw	r2,-8(fp)
 10130fc:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
 1013100:	e03fff15 	stw	zero,-4(fp)
 1013104:	e0bfff17 	ldw	r2,-4(fp)
}
 1013108:	e037883a 	mov	sp,fp
 101310c:	dfc00117 	ldw	ra,4(sp)
 1013110:	df000017 	ldw	fp,0(sp)
 1013114:	dec00204 	addi	sp,sp,8
 1013118:	f800283a 	ret

0101311c <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
 101311c:	f811883a 	mov	r8,ra
 1013120:	100c3d80 	call	100c3d8 <_mcount>
 1013124:	403f883a 	mov	ra,r8
 1013128:	defff704 	addi	sp,sp,-36
 101312c:	dfc00815 	stw	ra,32(sp)
 1013130:	df000715 	stw	fp,28(sp)
 1013134:	df000704 	addi	fp,sp,28
 1013138:	e13ffe15 	stw	r4,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 101313c:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 1013140:	e0bffe17 	ldw	r2,-8(fp)
 1013144:	1004c03a 	cmpne	r2,r2,zero
 1013148:	1000031e 	bne	r2,zero,1013158 <OSSemPost+0x3c>
        return (OS_ERR_PEVENT_NULL);
 101314c:	00800104 	movi	r2,4
 1013150:	e0bfff15 	stw	r2,-4(fp)
 1013154:	00003806 	br	1013238 <OSSemPost+0x11c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 1013158:	e0bffe17 	ldw	r2,-8(fp)
 101315c:	10800003 	ldbu	r2,0(r2)
 1013160:	10803fcc 	andi	r2,r2,255
 1013164:	108000e0 	cmpeqi	r2,r2,3
 1013168:	1000031e 	bne	r2,zero,1013178 <OSSemPost+0x5c>
        return (OS_ERR_EVENT_TYPE);
 101316c:	00800044 	movi	r2,1
 1013170:	e0bfff15 	stw	r2,-4(fp)
 1013174:	00003006 	br	1013238 <OSSemPost+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1013178:	0005303a 	rdctl	r2,status
 101317c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1013180:	e0fffc17 	ldw	r3,-16(fp)
 1013184:	00bfff84 	movi	r2,-2
 1013188:	1884703a 	and	r2,r3,r2
 101318c:	1001703a 	wrctl	status,r2
  
  return context;
 1013190:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 1013194:	e0bffd15 	stw	r2,-12(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
 1013198:	e0bffe17 	ldw	r2,-8(fp)
 101319c:	10800283 	ldbu	r2,10(r2)
 10131a0:	10803fcc 	andi	r2,r2,255
 10131a4:	1005003a 	cmpeq	r2,r2,zero
 10131a8:	10000c1e 	bne	r2,zero,10131dc <OSSemPost+0xc0>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 10131ac:	e13ffe17 	ldw	r4,-8(fp)
 10131b0:	000b883a 	mov	r5,zero
 10131b4:	01800044 	movi	r6,1
 10131b8:	000f883a 	mov	r7,zero
 10131bc:	100de5c0 	call	100de5c <OS_EventTaskRdy>
 10131c0:	e0bffd17 	ldw	r2,-12(fp)
 10131c4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10131c8:	e0bffb17 	ldw	r2,-20(fp)
 10131cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 10131d0:	100e9440 	call	100e944 <OS_Sched>
        return (OS_ERR_NONE);
 10131d4:	e03fff15 	stw	zero,-4(fp)
 10131d8:	00001706 	br	1013238 <OSSemPost+0x11c>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
 10131dc:	e0bffe17 	ldw	r2,-8(fp)
 10131e0:	1080020b 	ldhu	r2,8(r2)
 10131e4:	10ffffcc 	andi	r3,r2,65535
 10131e8:	00bfffd4 	movui	r2,65535
 10131ec:	18800c26 	beq	r3,r2,1013220 <OSSemPost+0x104>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
 10131f0:	e0bffe17 	ldw	r2,-8(fp)
 10131f4:	1080020b 	ldhu	r2,8(r2)
 10131f8:	10800044 	addi	r2,r2,1
 10131fc:	1007883a 	mov	r3,r2
 1013200:	e0bffe17 	ldw	r2,-8(fp)
 1013204:	10c0020d 	sth	r3,8(r2)
 1013208:	e0bffd17 	ldw	r2,-12(fp)
 101320c:	e0bffa15 	stw	r2,-24(fp)
 1013210:	e0bffa17 	ldw	r2,-24(fp)
 1013214:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 1013218:	e03fff15 	stw	zero,-4(fp)
 101321c:	00000606 	br	1013238 <OSSemPost+0x11c>
 1013220:	e0bffd17 	ldw	r2,-12(fp)
 1013224:	e0bff915 	stw	r2,-28(fp)
 1013228:	e0bff917 	ldw	r2,-28(fp)
 101322c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
 1013230:	00800c84 	movi	r2,50
 1013234:	e0bfff15 	stw	r2,-4(fp)
 1013238:	e0bfff17 	ldw	r2,-4(fp)
}
 101323c:	e037883a 	mov	sp,fp
 1013240:	dfc00117 	ldw	ra,4(sp)
 1013244:	df000017 	ldw	fp,0(sp)
 1013248:	dec00204 	addi	sp,sp,8
 101324c:	f800283a 	ret

01013250 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
 1013250:	f811883a 	mov	r8,ra
 1013254:	100c3d80 	call	100c3d8 <_mcount>
 1013258:	403f883a 	mov	ra,r8
 101325c:	defff604 	addi	sp,sp,-40
 1013260:	df000915 	stw	fp,36(sp)
 1013264:	df000904 	addi	fp,sp,36
 1013268:	e13ffd15 	stw	r4,-12(fp)
 101326c:	e17ffe15 	stw	r5,-8(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 1013270:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 1013274:	e0bffd17 	ldw	r2,-12(fp)
 1013278:	1004c03a 	cmpne	r2,r2,zero
 101327c:	1000031e 	bne	r2,zero,101328c <OSSemQuery+0x3c>
        return (OS_ERR_PEVENT_NULL);
 1013280:	00800104 	movi	r2,4
 1013284:	e0bfff15 	stw	r2,-4(fp)
 1013288:	00003b06 	br	1013378 <OSSemQuery+0x128>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
 101328c:	e0bffe17 	ldw	r2,-8(fp)
 1013290:	1004c03a 	cmpne	r2,r2,zero
 1013294:	1000031e 	bne	r2,zero,10132a4 <OSSemQuery+0x54>
        return (OS_ERR_PDATA_NULL);
 1013298:	00800244 	movi	r2,9
 101329c:	e0bfff15 	stw	r2,-4(fp)
 10132a0:	00003506 	br	1013378 <OSSemQuery+0x128>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 10132a4:	e0bffd17 	ldw	r2,-12(fp)
 10132a8:	10800003 	ldbu	r2,0(r2)
 10132ac:	10803fcc 	andi	r2,r2,255
 10132b0:	108000e0 	cmpeqi	r2,r2,3
 10132b4:	1000031e 	bne	r2,zero,10132c4 <OSSemQuery+0x74>
        return (OS_ERR_EVENT_TYPE);
 10132b8:	00800044 	movi	r2,1
 10132bc:	e0bfff15 	stw	r2,-4(fp)
 10132c0:	00002d06 	br	1013378 <OSSemQuery+0x128>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10132c4:	0005303a 	rdctl	r2,status
 10132c8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10132cc:	e0fff817 	ldw	r3,-32(fp)
 10132d0:	00bfff84 	movi	r2,-2
 10132d4:	1884703a 	and	r2,r3,r2
 10132d8:	1001703a 	wrctl	status,r2
  
  return context;
 10132dc:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
 10132e0:	e0bff915 	stw	r2,-28(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
 10132e4:	e0bffd17 	ldw	r2,-12(fp)
 10132e8:	10c00283 	ldbu	r3,10(r2)
 10132ec:	e0bffe17 	ldw	r2,-8(fp)
 10132f0:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
 10132f4:	e0bffd17 	ldw	r2,-12(fp)
 10132f8:	108002c4 	addi	r2,r2,11
 10132fc:	e0bffc15 	stw	r2,-16(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
 1013300:	e0bffe17 	ldw	r2,-8(fp)
 1013304:	10800084 	addi	r2,r2,2
 1013308:	e0bffb15 	stw	r2,-20(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 101330c:	e03ffa05 	stb	zero,-24(fp)
 1013310:	00000d06 	br	1013348 <OSSemQuery+0xf8>
        *pdest++ = *psrc++;
 1013314:	e0bffc17 	ldw	r2,-16(fp)
 1013318:	10c00003 	ldbu	r3,0(r2)
 101331c:	e0bffb17 	ldw	r2,-20(fp)
 1013320:	10c00005 	stb	r3,0(r2)
 1013324:	e0bffb17 	ldw	r2,-20(fp)
 1013328:	10800044 	addi	r2,r2,1
 101332c:	e0bffb15 	stw	r2,-20(fp)
 1013330:	e0bffc17 	ldw	r2,-16(fp)
 1013334:	10800044 	addi	r2,r2,1
 1013338:	e0bffc15 	stw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 101333c:	e0bffa03 	ldbu	r2,-24(fp)
 1013340:	10800044 	addi	r2,r2,1
 1013344:	e0bffa05 	stb	r2,-24(fp)
 1013348:	e0bffa03 	ldbu	r2,-24(fp)
 101334c:	108000f0 	cmpltui	r2,r2,3
 1013350:	103ff01e 	bne	r2,zero,1013314 <OSSemQuery+0xc4>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
 1013354:	e0bffd17 	ldw	r2,-12(fp)
 1013358:	10c0020b 	ldhu	r3,8(r2)
 101335c:	e0bffe17 	ldw	r2,-8(fp)
 1013360:	10c0000d 	sth	r3,0(r2)
 1013364:	e0bff917 	ldw	r2,-28(fp)
 1013368:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101336c:	e0bff717 	ldw	r2,-36(fp)
 1013370:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 1013374:	e03fff15 	stw	zero,-4(fp)
 1013378:	e0bfff17 	ldw	r2,-4(fp)
}
 101337c:	e037883a 	mov	sp,fp
 1013380:	df000017 	ldw	fp,0(sp)
 1013384:	dec00104 	addi	sp,sp,4
 1013388:	f800283a 	ret

0101338c <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
 101338c:	f811883a 	mov	r8,ra
 1013390:	100c3d80 	call	100c3d8 <_mcount>
 1013394:	403f883a 	mov	ra,r8
 1013398:	defff904 	addi	sp,sp,-28
 101339c:	df000615 	stw	fp,24(sp)
 10133a0:	df000604 	addi	fp,sp,24
 10133a4:	e13ffd15 	stw	r4,-12(fp)
 10133a8:	e1bfff15 	stw	r6,-4(fp)
 10133ac:	e17ffe0d 	sth	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 10133b0:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 10133b4:	e0bfff17 	ldw	r2,-4(fp)
 10133b8:	1005003a 	cmpeq	r2,r2,zero
 10133bc:	1000331e 	bne	r2,zero,101348c <OSSemSet+0x100>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 10133c0:	e0bffd17 	ldw	r2,-12(fp)
 10133c4:	1004c03a 	cmpne	r2,r2,zero
 10133c8:	1000041e 	bne	r2,zero,10133dc <OSSemSet+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 10133cc:	e0ffff17 	ldw	r3,-4(fp)
 10133d0:	00800104 	movi	r2,4
 10133d4:	18800005 	stb	r2,0(r3)
        return;
 10133d8:	00002c06 	br	101348c <OSSemSet+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 10133dc:	e0bffd17 	ldw	r2,-12(fp)
 10133e0:	10800003 	ldbu	r2,0(r2)
 10133e4:	10803fcc 	andi	r2,r2,255
 10133e8:	108000e0 	cmpeqi	r2,r2,3
 10133ec:	1000041e 	bne	r2,zero,1013400 <OSSemSet+0x74>
        *perr = OS_ERR_EVENT_TYPE;
 10133f0:	e0ffff17 	ldw	r3,-4(fp)
 10133f4:	00800044 	movi	r2,1
 10133f8:	18800005 	stb	r2,0(r3)
        return;
 10133fc:	00002306 	br	101348c <OSSemSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1013400:	0005303a 	rdctl	r2,status
 1013404:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1013408:	e0fffb17 	ldw	r3,-20(fp)
 101340c:	00bfff84 	movi	r2,-2
 1013410:	1884703a 	and	r2,r3,r2
 1013414:	1001703a 	wrctl	status,r2
  
  return context;
 1013418:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 101341c:	e0bffc15 	stw	r2,-16(fp)
    *perr = OS_ERR_NONE;
 1013420:	e0bfff17 	ldw	r2,-4(fp)
 1013424:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
 1013428:	e0bffd17 	ldw	r2,-12(fp)
 101342c:	1080020b 	ldhu	r2,8(r2)
 1013430:	10bfffcc 	andi	r2,r2,65535
 1013434:	1005003a 	cmpeq	r2,r2,zero
 1013438:	1000041e 	bne	r2,zero,101344c <OSSemSet+0xc0>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
 101343c:	e0fffd17 	ldw	r3,-12(fp)
 1013440:	e0bffe0b 	ldhu	r2,-8(fp)
 1013444:	1880020d 	sth	r2,8(r3)
 1013448:	00000c06 	br	101347c <OSSemSet+0xf0>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
 101344c:	e0bffd17 	ldw	r2,-12(fp)
 1013450:	10800283 	ldbu	r2,10(r2)
 1013454:	10803fcc 	andi	r2,r2,255
 1013458:	1004c03a 	cmpne	r2,r2,zero
 101345c:	1000041e 	bne	r2,zero,1013470 <OSSemSet+0xe4>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
 1013460:	e0fffd17 	ldw	r3,-12(fp)
 1013464:	e0bffe0b 	ldhu	r2,-8(fp)
 1013468:	1880020d 	sth	r2,8(r3)
 101346c:	00000306 	br	101347c <OSSemSet+0xf0>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
 1013470:	e0ffff17 	ldw	r3,-4(fp)
 1013474:	00801244 	movi	r2,73
 1013478:	18800005 	stb	r2,0(r3)
 101347c:	e0bffc17 	ldw	r2,-16(fp)
 1013480:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1013484:	e0bffa17 	ldw	r2,-24(fp)
 1013488:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
 101348c:	e037883a 	mov	sp,fp
 1013490:	df000017 	ldw	fp,0(sp)
 1013494:	dec00104 	addi	sp,sp,4
 1013498:	f800283a 	ret

0101349c <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
 101349c:	f811883a 	mov	r8,ra
 10134a0:	100c3d80 	call	100c3d8 <_mcount>
 10134a4:	403f883a 	mov	ra,r8
 10134a8:	defff004 	addi	sp,sp,-64
 10134ac:	dfc00f15 	stw	ra,60(sp)
 10134b0:	df000e15 	stw	fp,56(sp)
 10134b4:	df000e04 	addi	fp,sp,56
 10134b8:	e13ffd05 	stb	r4,-12(fp)
 10134bc:	e17ffe05 	stb	r5,-8(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
 10134c0:	e03ff715 	stw	zero,-36(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
 10134c4:	e0bffd03 	ldbu	r2,-12(fp)
 10134c8:	10800530 	cmpltui	r2,r2,20
 10134cc:	1000061e 	bne	r2,zero,10134e8 <OSTaskChangePrio+0x4c>
        if (oldprio != OS_PRIO_SELF) {
 10134d0:	e0bffd03 	ldbu	r2,-12(fp)
 10134d4:	10803fe0 	cmpeqi	r2,r2,255
 10134d8:	1000031e 	bne	r2,zero,10134e8 <OSTaskChangePrio+0x4c>
            return (OS_ERR_PRIO_INVALID);
 10134dc:	00800a84 	movi	r2,42
 10134e0:	e0bfff15 	stw	r2,-4(fp)
 10134e4:	00014706 	br	1013a04 <OSTaskChangePrio+0x568>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
 10134e8:	e0bffe03 	ldbu	r2,-8(fp)
 10134ec:	10800530 	cmpltui	r2,r2,20
 10134f0:	1000031e 	bne	r2,zero,1013500 <OSTaskChangePrio+0x64>
        return (OS_ERR_PRIO_INVALID);
 10134f4:	00800a84 	movi	r2,42
 10134f8:	e0bfff15 	stw	r2,-4(fp)
 10134fc:	00014106 	br	1013a04 <OSTaskChangePrio+0x568>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1013500:	0005303a 	rdctl	r2,status
 1013504:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1013508:	e0fff617 	ldw	r3,-40(fp)
 101350c:	00bfff84 	movi	r2,-2
 1013510:	1884703a 	and	r2,r3,r2
 1013514:	1001703a 	wrctl	status,r2
  
  return context;
 1013518:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 101351c:	e0bff715 	stw	r2,-36(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
 1013520:	e0bffe03 	ldbu	r2,-8(fp)
 1013524:	00c04174 	movhi	r3,261
 1013528:	18e6e404 	addi	r3,r3,-25712
 101352c:	1085883a 	add	r2,r2,r2
 1013530:	1085883a 	add	r2,r2,r2
 1013534:	10c5883a 	add	r2,r2,r3
 1013538:	10800017 	ldw	r2,0(r2)
 101353c:	1005003a 	cmpeq	r2,r2,zero
 1013540:	1000071e 	bne	r2,zero,1013560 <OSTaskChangePrio+0xc4>
 1013544:	e0bff717 	ldw	r2,-36(fp)
 1013548:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101354c:	e0bff517 	ldw	r2,-44(fp)
 1013550:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
 1013554:	00800a04 	movi	r2,40
 1013558:	e0bfff15 	stw	r2,-4(fp)
 101355c:	00012906 	br	1013a04 <OSTaskChangePrio+0x568>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
 1013560:	e0bffd03 	ldbu	r2,-12(fp)
 1013564:	10803fd8 	cmpnei	r2,r2,255
 1013568:	1000051e 	bne	r2,zero,1013580 <OSTaskChangePrio+0xe4>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
 101356c:	008040f4 	movhi	r2,259
 1013570:	10977804 	addi	r2,r2,24032
 1013574:	10800017 	ldw	r2,0(r2)
 1013578:	10800c83 	ldbu	r2,50(r2)
 101357c:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
 1013580:	e0bffd03 	ldbu	r2,-12(fp)
 1013584:	00c04174 	movhi	r3,261
 1013588:	18e6e404 	addi	r3,r3,-25712
 101358c:	1085883a 	add	r2,r2,r2
 1013590:	1085883a 	add	r2,r2,r2
 1013594:	10c5883a 	add	r2,r2,r3
 1013598:	10800017 	ldw	r2,0(r2)
 101359c:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
 10135a0:	e0bffa17 	ldw	r2,-24(fp)
 10135a4:	1004c03a 	cmpne	r2,r2,zero
 10135a8:	1000071e 	bne	r2,zero,10135c8 <OSTaskChangePrio+0x12c>
 10135ac:	e0bff717 	ldw	r2,-36(fp)
 10135b0:	e0bff415 	stw	r2,-48(fp)
 10135b4:	e0bff417 	ldw	r2,-48(fp)
 10135b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
 10135bc:	00800a44 	movi	r2,41
 10135c0:	e0bfff15 	stw	r2,-4(fp)
 10135c4:	00010f06 	br	1013a04 <OSTaskChangePrio+0x568>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
 10135c8:	e0bffa17 	ldw	r2,-24(fp)
 10135cc:	10800058 	cmpnei	r2,r2,1
 10135d0:	1000071e 	bne	r2,zero,10135f0 <OSTaskChangePrio+0x154>
 10135d4:	e0bff717 	ldw	r2,-36(fp)
 10135d8:	e0bff315 	stw	r2,-52(fp)
 10135dc:	e0bff317 	ldw	r2,-52(fp)
 10135e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
 10135e4:	008010c4 	movi	r2,67
 10135e8:	e0bfff15 	stw	r2,-4(fp)
 10135ec:	00010506 	br	1013a04 <OSTaskChangePrio+0x568>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
 10135f0:	e0bffe03 	ldbu	r2,-8(fp)
 10135f4:	1004d0fa 	srli	r2,r2,3
 10135f8:	e0bff985 	stb	r2,-26(fp)
    x_new                 = (INT8U)(newprio & 0x07);
 10135fc:	e0bffe03 	ldbu	r2,-8(fp)
 1013600:	108001cc 	andi	r2,r2,7
 1013604:	e0bff945 	stb	r2,-27(fp)
    bity_new              = (INT8U)(1 << y_new);
 1013608:	e0fff983 	ldbu	r3,-26(fp)
 101360c:	00800044 	movi	r2,1
 1013610:	10c4983a 	sll	r2,r2,r3
 1013614:	e0bff8c5 	stb	r2,-29(fp)
    bitx_new              = (INT8U)(1 << x_new);
 1013618:	e0fff943 	ldbu	r3,-27(fp)
 101361c:	00800044 	movi	r2,1
 1013620:	10c4983a 	sll	r2,r2,r3
 1013624:	e0bff885 	stb	r2,-30(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
 1013628:	e0bffd03 	ldbu	r2,-12(fp)
 101362c:	00c04174 	movhi	r3,261
 1013630:	18e6e404 	addi	r3,r3,-25712
 1013634:	1085883a 	add	r2,r2,r2
 1013638:	1085883a 	add	r2,r2,r2
 101363c:	10c5883a 	add	r2,r2,r3
 1013640:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
 1013644:	e0bffe03 	ldbu	r2,-8(fp)
 1013648:	00c04174 	movhi	r3,261
 101364c:	18e6e404 	addi	r3,r3,-25712
 1013650:	1085883a 	add	r2,r2,r2
 1013654:	1085883a 	add	r2,r2,r2
 1013658:	10c7883a 	add	r3,r2,r3
 101365c:	e0bffa17 	ldw	r2,-24(fp)
 1013660:	18800015 	stw	r2,0(r3)
    y_old                 =  ptcb->OSTCBY;
 1013664:	e0bffa17 	ldw	r2,-24(fp)
 1013668:	10800d03 	ldbu	r2,52(r2)
 101366c:	e0bff905 	stb	r2,-28(fp)
    bity_old              =  ptcb->OSTCBBitY;
 1013670:	e0bffa17 	ldw	r2,-24(fp)
 1013674:	10800d83 	ldbu	r2,54(r2)
 1013678:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
 101367c:	e0bffa17 	ldw	r2,-24(fp)
 1013680:	10800d43 	ldbu	r2,53(r2)
 1013684:	e0bff805 	stb	r2,-32(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
 1013688:	e0fff903 	ldbu	r3,-28(fp)
 101368c:	008040f4 	movhi	r2,259
 1013690:	10977544 	addi	r2,r2,24021
 1013694:	10c5883a 	add	r2,r2,r3
 1013698:	10c00003 	ldbu	r3,0(r2)
 101369c:	e0bff803 	ldbu	r2,-32(fp)
 10136a0:	1884703a 	and	r2,r3,r2
 10136a4:	10803fcc 	andi	r2,r2,255
 10136a8:	1005003a 	cmpeq	r2,r2,zero
 10136ac:	1000381e 	bne	r2,zero,1013790 <OSTaskChangePrio+0x2f4>
         OSRdyTbl[y_old] &= ~bitx_old;
 10136b0:	e13ff903 	ldbu	r4,-28(fp)
 10136b4:	e0fff903 	ldbu	r3,-28(fp)
 10136b8:	008040f4 	movhi	r2,259
 10136bc:	10977544 	addi	r2,r2,24021
 10136c0:	10c5883a 	add	r2,r2,r3
 10136c4:	10800003 	ldbu	r2,0(r2)
 10136c8:	1007883a 	mov	r3,r2
 10136cc:	e0bff803 	ldbu	r2,-32(fp)
 10136d0:	0084303a 	nor	r2,zero,r2
 10136d4:	1884703a 	and	r2,r3,r2
 10136d8:	1007883a 	mov	r3,r2
 10136dc:	008040f4 	movhi	r2,259
 10136e0:	10977544 	addi	r2,r2,24021
 10136e4:	1105883a 	add	r2,r2,r4
 10136e8:	10c00005 	stb	r3,0(r2)
         if (OSRdyTbl[y_old] == 0) {
 10136ec:	e0fff903 	ldbu	r3,-28(fp)
 10136f0:	008040f4 	movhi	r2,259
 10136f4:	10977544 	addi	r2,r2,24021
 10136f8:	10c5883a 	add	r2,r2,r3
 10136fc:	10800003 	ldbu	r2,0(r2)
 1013700:	10803fcc 	andi	r2,r2,255
 1013704:	1004c03a 	cmpne	r2,r2,zero
 1013708:	10000b1e 	bne	r2,zero,1013738 <OSTaskChangePrio+0x29c>
             OSRdyGrp &= ~bity_old;
 101370c:	e0bff843 	ldbu	r2,-31(fp)
 1013710:	0084303a 	nor	r2,zero,r2
 1013714:	1007883a 	mov	r3,r2
 1013718:	008040f4 	movhi	r2,259
 101371c:	10977504 	addi	r2,r2,24020
 1013720:	10800003 	ldbu	r2,0(r2)
 1013724:	1884703a 	and	r2,r3,r2
 1013728:	1007883a 	mov	r3,r2
 101372c:	008040f4 	movhi	r2,259
 1013730:	10977504 	addi	r2,r2,24020
 1013734:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
 1013738:	008040f4 	movhi	r2,259
 101373c:	10977504 	addi	r2,r2,24020
 1013740:	10c00003 	ldbu	r3,0(r2)
 1013744:	e0bff8c3 	ldbu	r2,-29(fp)
 1013748:	1884b03a 	or	r2,r3,r2
 101374c:	1007883a 	mov	r3,r2
 1013750:	008040f4 	movhi	r2,259
 1013754:	10977504 	addi	r2,r2,24020
 1013758:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
 101375c:	e13ff983 	ldbu	r4,-26(fp)
 1013760:	e0fff983 	ldbu	r3,-26(fp)
 1013764:	008040f4 	movhi	r2,259
 1013768:	10977544 	addi	r2,r2,24021
 101376c:	10c5883a 	add	r2,r2,r3
 1013770:	10c00003 	ldbu	r3,0(r2)
 1013774:	e0bff883 	ldbu	r2,-30(fp)
 1013778:	1884b03a 	or	r2,r3,r2
 101377c:	1007883a 	mov	r3,r2
 1013780:	008040f4 	movhi	r2,259
 1013784:	10977544 	addi	r2,r2,24021
 1013788:	1105883a 	add	r2,r2,r4
 101378c:	10c00005 	stb	r3,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
 1013790:	e0bffa17 	ldw	r2,-24(fp)
 1013794:	10800717 	ldw	r2,28(r2)
 1013798:	e0bffc15 	stw	r2,-16(fp)
    if (pevent != (OS_EVENT *)0) {
 101379c:	e0bffc17 	ldw	r2,-16(fp)
 10137a0:	1005003a 	cmpeq	r2,r2,zero
 10137a4:	1000341e 	bne	r2,zero,1013878 <OSTaskChangePrio+0x3dc>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
 10137a8:	e13ff903 	ldbu	r4,-28(fp)
 10137ac:	e0fff903 	ldbu	r3,-28(fp)
 10137b0:	e0bffc17 	ldw	r2,-16(fp)
 10137b4:	1885883a 	add	r2,r3,r2
 10137b8:	10800204 	addi	r2,r2,8
 10137bc:	108000c3 	ldbu	r2,3(r2)
 10137c0:	1007883a 	mov	r3,r2
 10137c4:	e0bff803 	ldbu	r2,-32(fp)
 10137c8:	0084303a 	nor	r2,zero,r2
 10137cc:	1884703a 	and	r2,r3,r2
 10137d0:	1007883a 	mov	r3,r2
 10137d4:	e0bffc17 	ldw	r2,-16(fp)
 10137d8:	2085883a 	add	r2,r4,r2
 10137dc:	10800204 	addi	r2,r2,8
 10137e0:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
 10137e4:	e0fff903 	ldbu	r3,-28(fp)
 10137e8:	e0bffc17 	ldw	r2,-16(fp)
 10137ec:	1885883a 	add	r2,r3,r2
 10137f0:	10800204 	addi	r2,r2,8
 10137f4:	108000c3 	ldbu	r2,3(r2)
 10137f8:	10803fcc 	andi	r2,r2,255
 10137fc:	1004c03a 	cmpne	r2,r2,zero
 1013800:	1000091e 	bne	r2,zero,1013828 <OSTaskChangePrio+0x38c>
            pevent->OSEventGrp    &= ~bity_old;
 1013804:	e0bffc17 	ldw	r2,-16(fp)
 1013808:	10800283 	ldbu	r2,10(r2)
 101380c:	1007883a 	mov	r3,r2
 1013810:	e0bff843 	ldbu	r2,-31(fp)
 1013814:	0084303a 	nor	r2,zero,r2
 1013818:	1884703a 	and	r2,r3,r2
 101381c:	1007883a 	mov	r3,r2
 1013820:	e0bffc17 	ldw	r2,-16(fp)
 1013824:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
 1013828:	e0bffc17 	ldw	r2,-16(fp)
 101382c:	10c00283 	ldbu	r3,10(r2)
 1013830:	e0bff8c3 	ldbu	r2,-29(fp)
 1013834:	1884b03a 	or	r2,r3,r2
 1013838:	1007883a 	mov	r3,r2
 101383c:	e0bffc17 	ldw	r2,-16(fp)
 1013840:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
 1013844:	e13ff983 	ldbu	r4,-26(fp)
 1013848:	e0fff983 	ldbu	r3,-26(fp)
 101384c:	e0bffc17 	ldw	r2,-16(fp)
 1013850:	1885883a 	add	r2,r3,r2
 1013854:	10800204 	addi	r2,r2,8
 1013858:	10c000c3 	ldbu	r3,3(r2)
 101385c:	e0bff883 	ldbu	r2,-30(fp)
 1013860:	1884b03a 	or	r2,r3,r2
 1013864:	1007883a 	mov	r3,r2
 1013868:	e0bffc17 	ldw	r2,-16(fp)
 101386c:	2085883a 	add	r2,r4,r2
 1013870:	10800204 	addi	r2,r2,8
 1013874:	10c000c5 	stb	r3,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
 1013878:	e0bffa17 	ldw	r2,-24(fp)
 101387c:	10800817 	ldw	r2,32(r2)
 1013880:	1005003a 	cmpeq	r2,r2,zero
 1013884:	1000441e 	bne	r2,zero,1013998 <OSTaskChangePrio+0x4fc>
        pevents =  ptcb->OSTCBEventMultiPtr;
 1013888:	e0bffa17 	ldw	r2,-24(fp)
 101388c:	10800817 	ldw	r2,32(r2)
 1013890:	e0bffb15 	stw	r2,-20(fp)
        pevent  = *pevents;
 1013894:	e0bffb17 	ldw	r2,-20(fp)
 1013898:	10800017 	ldw	r2,0(r2)
 101389c:	e0bffc15 	stw	r2,-16(fp)
        while (pevent != (OS_EVENT *)0) {
 10138a0:	00003a06 	br	101398c <OSTaskChangePrio+0x4f0>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
 10138a4:	e13ff903 	ldbu	r4,-28(fp)
 10138a8:	e0fff903 	ldbu	r3,-28(fp)
 10138ac:	e0bffc17 	ldw	r2,-16(fp)
 10138b0:	1885883a 	add	r2,r3,r2
 10138b4:	10800204 	addi	r2,r2,8
 10138b8:	108000c3 	ldbu	r2,3(r2)
 10138bc:	1007883a 	mov	r3,r2
 10138c0:	e0bff803 	ldbu	r2,-32(fp)
 10138c4:	0084303a 	nor	r2,zero,r2
 10138c8:	1884703a 	and	r2,r3,r2
 10138cc:	1007883a 	mov	r3,r2
 10138d0:	e0bffc17 	ldw	r2,-16(fp)
 10138d4:	2085883a 	add	r2,r4,r2
 10138d8:	10800204 	addi	r2,r2,8
 10138dc:	10c000c5 	stb	r3,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
 10138e0:	e0fff903 	ldbu	r3,-28(fp)
 10138e4:	e0bffc17 	ldw	r2,-16(fp)
 10138e8:	1885883a 	add	r2,r3,r2
 10138ec:	10800204 	addi	r2,r2,8
 10138f0:	108000c3 	ldbu	r2,3(r2)
 10138f4:	10803fcc 	andi	r2,r2,255
 10138f8:	1004c03a 	cmpne	r2,r2,zero
 10138fc:	1000091e 	bne	r2,zero,1013924 <OSTaskChangePrio+0x488>
                pevent->OSEventGrp    &= ~bity_old;
 1013900:	e0bffc17 	ldw	r2,-16(fp)
 1013904:	10800283 	ldbu	r2,10(r2)
 1013908:	1007883a 	mov	r3,r2
 101390c:	e0bff843 	ldbu	r2,-31(fp)
 1013910:	0084303a 	nor	r2,zero,r2
 1013914:	1884703a 	and	r2,r3,r2
 1013918:	1007883a 	mov	r3,r2
 101391c:	e0bffc17 	ldw	r2,-16(fp)
 1013920:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
 1013924:	e0bffc17 	ldw	r2,-16(fp)
 1013928:	10c00283 	ldbu	r3,10(r2)
 101392c:	e0bff8c3 	ldbu	r2,-29(fp)
 1013930:	1884b03a 	or	r2,r3,r2
 1013934:	1007883a 	mov	r3,r2
 1013938:	e0bffc17 	ldw	r2,-16(fp)
 101393c:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
 1013940:	e13ff983 	ldbu	r4,-26(fp)
 1013944:	e0fff983 	ldbu	r3,-26(fp)
 1013948:	e0bffc17 	ldw	r2,-16(fp)
 101394c:	1885883a 	add	r2,r3,r2
 1013950:	10800204 	addi	r2,r2,8
 1013954:	10c000c3 	ldbu	r3,3(r2)
 1013958:	e0bff883 	ldbu	r2,-30(fp)
 101395c:	1884b03a 	or	r2,r3,r2
 1013960:	1007883a 	mov	r3,r2
 1013964:	e0bffc17 	ldw	r2,-16(fp)
 1013968:	2085883a 	add	r2,r4,r2
 101396c:	10800204 	addi	r2,r2,8
 1013970:	10c000c5 	stb	r3,3(r2)
            pevents++;
 1013974:	e0bffb17 	ldw	r2,-20(fp)
 1013978:	10800104 	addi	r2,r2,4
 101397c:	e0bffb15 	stw	r2,-20(fp)
            pevent                     = *pevents;
 1013980:	e0bffb17 	ldw	r2,-20(fp)
 1013984:	10800017 	ldw	r2,0(r2)
 1013988:	e0bffc15 	stw	r2,-16(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
 101398c:	e0bffc17 	ldw	r2,-16(fp)
 1013990:	1004c03a 	cmpne	r2,r2,zero
 1013994:	103fc31e 	bne	r2,zero,10138a4 <OSTaskChangePrio+0x408>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
 1013998:	e0fffa17 	ldw	r3,-24(fp)
 101399c:	e0bffe03 	ldbu	r2,-8(fp)
 10139a0:	18800c85 	stb	r2,50(r3)
    ptcb->OSTCBY    = y_new;
 10139a4:	e0fffa17 	ldw	r3,-24(fp)
 10139a8:	e0bff983 	ldbu	r2,-26(fp)
 10139ac:	18800d05 	stb	r2,52(r3)
    ptcb->OSTCBX    = x_new;
 10139b0:	e0fffa17 	ldw	r3,-24(fp)
 10139b4:	e0bff943 	ldbu	r2,-27(fp)
 10139b8:	18800cc5 	stb	r2,51(r3)
    ptcb->OSTCBBitY = bity_new;
 10139bc:	e0fffa17 	ldw	r3,-24(fp)
 10139c0:	e0bff8c3 	ldbu	r2,-29(fp)
 10139c4:	18800d85 	stb	r2,54(r3)
    ptcb->OSTCBBitX = bitx_new;
 10139c8:	e0fffa17 	ldw	r3,-24(fp)
 10139cc:	e0bff883 	ldbu	r2,-30(fp)
 10139d0:	18800d45 	stb	r2,53(r3)
 10139d4:	e0bff717 	ldw	r2,-36(fp)
 10139d8:	e0bff215 	stw	r2,-56(fp)
 10139dc:	e0bff217 	ldw	r2,-56(fp)
 10139e0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 10139e4:	008040f4 	movhi	r2,259
 10139e8:	10976804 	addi	r2,r2,23968
 10139ec:	10800003 	ldbu	r2,0(r2)
 10139f0:	10803fcc 	andi	r2,r2,255
 10139f4:	10800058 	cmpnei	r2,r2,1
 10139f8:	1000011e 	bne	r2,zero,1013a00 <OSTaskChangePrio+0x564>
        OS_Sched();                                         /* Find new highest priority task          */
 10139fc:	100e9440 	call	100e944 <OS_Sched>
    }
    return (OS_ERR_NONE);
 1013a00:	e03fff15 	stw	zero,-4(fp)
 1013a04:	e0bfff17 	ldw	r2,-4(fp)
}
 1013a08:	e037883a 	mov	sp,fp
 1013a0c:	dfc00117 	ldw	ra,4(sp)
 1013a10:	df000017 	ldw	fp,0(sp)
 1013a14:	dec00204 	addi	sp,sp,8
 1013a18:	f800283a 	ret

01013a1c <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
 1013a1c:	f811883a 	mov	r8,ra
 1013a20:	100c3d80 	call	100c3d8 <_mcount>
 1013a24:	403f883a 	mov	ra,r8
 1013a28:	deffed04 	addi	sp,sp,-76
 1013a2c:	dfc01215 	stw	ra,72(sp)
 1013a30:	df001115 	stw	fp,68(sp)
 1013a34:	df001104 	addi	fp,sp,68
 1013a38:	e13ffb15 	stw	r4,-20(fp)
 1013a3c:	e17ffc15 	stw	r5,-16(fp)
 1013a40:	e1bffd15 	stw	r6,-12(fp)
 1013a44:	e1fffe05 	stb	r7,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 1013a48:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 1013a4c:	e0bffe03 	ldbu	r2,-8(fp)
 1013a50:	10800570 	cmpltui	r2,r2,21
 1013a54:	1000031e 	bne	r2,zero,1013a64 <OSTaskCreate+0x48>
        return (OS_ERR_PRIO_INVALID);
 1013a58:	00800a84 	movi	r2,42
 1013a5c:	e0bfff15 	stw	r2,-4(fp)
 1013a60:	00006006 	br	1013be4 <OSTaskCreate+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1013a64:	0005303a 	rdctl	r2,status
 1013a68:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1013a6c:	e0fff717 	ldw	r3,-36(fp)
 1013a70:	00bfff84 	movi	r2,-2
 1013a74:	1884703a 	and	r2,r3,r2
 1013a78:	1001703a 	wrctl	status,r2
  
  return context;
 1013a7c:	e0bff717 	ldw	r2,-36(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 1013a80:	e0bff815 	stw	r2,-32(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 1013a84:	008040f4 	movhi	r2,259
 1013a88:	10977704 	addi	r2,r2,24028
 1013a8c:	10800003 	ldbu	r2,0(r2)
 1013a90:	10803fcc 	andi	r2,r2,255
 1013a94:	1005003a 	cmpeq	r2,r2,zero
 1013a98:	1000071e 	bne	r2,zero,1013ab8 <OSTaskCreate+0x9c>
 1013a9c:	e0bff817 	ldw	r2,-32(fp)
 1013aa0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1013aa4:	e0bff617 	ldw	r2,-40(fp)
 1013aa8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 1013aac:	00800f04 	movi	r2,60
 1013ab0:	e0bfff15 	stw	r2,-4(fp)
 1013ab4:	00004b06 	br	1013be4 <OSTaskCreate+0x1c8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 1013ab8:	e0bffe03 	ldbu	r2,-8(fp)
 1013abc:	00c04174 	movhi	r3,261
 1013ac0:	18e6e404 	addi	r3,r3,-25712
 1013ac4:	1085883a 	add	r2,r2,r2
 1013ac8:	1085883a 	add	r2,r2,r2
 1013acc:	10c5883a 	add	r2,r2,r3
 1013ad0:	10800017 	ldw	r2,0(r2)
 1013ad4:	1004c03a 	cmpne	r2,r2,zero
 1013ad8:	10003c1e 	bne	r2,zero,1013bcc <OSTaskCreate+0x1b0>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 1013adc:	e0bffe03 	ldbu	r2,-8(fp)
 1013ae0:	00c04174 	movhi	r3,261
 1013ae4:	18e6e404 	addi	r3,r3,-25712
 1013ae8:	1085883a 	add	r2,r2,r2
 1013aec:	1085883a 	add	r2,r2,r2
 1013af0:	10c7883a 	add	r3,r2,r3
 1013af4:	00800044 	movi	r2,1
 1013af8:	18800015 	stw	r2,0(r3)
 1013afc:	e0bff817 	ldw	r2,-32(fp)
 1013b00:	e0bff515 	stw	r2,-44(fp)
 1013b04:	e0bff517 	ldw	r2,-44(fp)
 1013b08:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
 1013b0c:	e13ffb17 	ldw	r4,-20(fp)
 1013b10:	e17ffc17 	ldw	r5,-16(fp)
 1013b14:	e1bffd17 	ldw	r6,-12(fp)
 1013b18:	000f883a 	mov	r7,zero
 1013b1c:	10191400 	call	1019140 <OSTaskStkInit>
 1013b20:	e0bffa15 	stw	r2,-24(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
 1013b24:	e13ffe03 	ldbu	r4,-8(fp)
 1013b28:	d8000015 	stw	zero,0(sp)
 1013b2c:	d8000115 	stw	zero,4(sp)
 1013b30:	d8000215 	stw	zero,8(sp)
 1013b34:	e17ffa17 	ldw	r5,-24(fp)
 1013b38:	000d883a 	mov	r6,zero
 1013b3c:	000f883a 	mov	r7,zero
 1013b40:	100eda00 	call	100eda0 <OS_TCBInit>
 1013b44:	e0bff905 	stb	r2,-28(fp)
        if (err == OS_ERR_NONE) {
 1013b48:	e0bff903 	ldbu	r2,-28(fp)
 1013b4c:	1004c03a 	cmpne	r2,r2,zero
 1013b50:	1000081e 	bne	r2,zero,1013b74 <OSTaskCreate+0x158>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
 1013b54:	008040f4 	movhi	r2,259
 1013b58:	10976804 	addi	r2,r2,23968
 1013b5c:	10800003 	ldbu	r2,0(r2)
 1013b60:	10803fcc 	andi	r2,r2,255
 1013b64:	10800058 	cmpnei	r2,r2,1
 1013b68:	1000151e 	bne	r2,zero,1013bc0 <OSTaskCreate+0x1a4>
                OS_Sched();
 1013b6c:	100e9440 	call	100e944 <OS_Sched>
 1013b70:	00001306 	br	1013bc0 <OSTaskCreate+0x1a4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1013b74:	0005303a 	rdctl	r2,status
 1013b78:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1013b7c:	e0fff417 	ldw	r3,-48(fp)
 1013b80:	00bfff84 	movi	r2,-2
 1013b84:	1884703a 	and	r2,r3,r2
 1013b88:	1001703a 	wrctl	status,r2
  
  return context;
 1013b8c:	e0bff417 	ldw	r2,-48(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 1013b90:	e0bff815 	stw	r2,-32(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
 1013b94:	e0bffe03 	ldbu	r2,-8(fp)
 1013b98:	00c04174 	movhi	r3,261
 1013b9c:	18e6e404 	addi	r3,r3,-25712
 1013ba0:	1085883a 	add	r2,r2,r2
 1013ba4:	1085883a 	add	r2,r2,r2
 1013ba8:	10c5883a 	add	r2,r2,r3
 1013bac:	10000015 	stw	zero,0(r2)
 1013bb0:	e0bff817 	ldw	r2,-32(fp)
 1013bb4:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1013bb8:	e0bff317 	ldw	r2,-52(fp)
 1013bbc:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 1013bc0:	e0bff903 	ldbu	r2,-28(fp)
 1013bc4:	e0bfff15 	stw	r2,-4(fp)
 1013bc8:	00000606 	br	1013be4 <OSTaskCreate+0x1c8>
 1013bcc:	e0bff817 	ldw	r2,-32(fp)
 1013bd0:	e0bff215 	stw	r2,-56(fp)
 1013bd4:	e0bff217 	ldw	r2,-56(fp)
 1013bd8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 1013bdc:	00800a04 	movi	r2,40
 1013be0:	e0bfff15 	stw	r2,-4(fp)
 1013be4:	e0bfff17 	ldw	r2,-4(fp)
}
 1013be8:	e037883a 	mov	sp,fp
 1013bec:	dfc00117 	ldw	ra,4(sp)
 1013bf0:	df000017 	ldw	fp,0(sp)
 1013bf4:	dec00204 	addi	sp,sp,8
 1013bf8:	f800283a 	ret

01013bfc <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
 1013bfc:	f811883a 	mov	r8,ra
 1013c00:	100c3d80 	call	100c3d8 <_mcount>
 1013c04:	403f883a 	mov	ra,r8
 1013c08:	deffeb04 	addi	sp,sp,-84
 1013c0c:	dfc01415 	stw	ra,80(sp)
 1013c10:	df001315 	stw	fp,76(sp)
 1013c14:	df001304 	addi	fp,sp,76
 1013c18:	e13ff915 	stw	r4,-28(fp)
 1013c1c:	e17ffa15 	stw	r5,-24(fp)
 1013c20:	e1bffb15 	stw	r6,-20(fp)
 1013c24:	e0800217 	ldw	r2,8(fp)
 1013c28:	e0c00617 	ldw	r3,24(fp)
 1013c2c:	e1fffc05 	stb	r7,-16(fp)
 1013c30:	e0bffd0d 	sth	r2,-12(fp)
 1013c34:	e0fffe0d 	sth	r3,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 1013c38:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 1013c3c:	e0bffc03 	ldbu	r2,-16(fp)
 1013c40:	10800570 	cmpltui	r2,r2,21
 1013c44:	1000031e 	bne	r2,zero,1013c54 <OSTaskCreateExt+0x58>
        return (OS_ERR_PRIO_INVALID);
 1013c48:	00800a84 	movi	r2,42
 1013c4c:	e0bfff15 	stw	r2,-4(fp)
 1013c50:	00006706 	br	1013df0 <OSTaskCreateExt+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1013c54:	0005303a 	rdctl	r2,status
 1013c58:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1013c5c:	e0fff517 	ldw	r3,-44(fp)
 1013c60:	00bfff84 	movi	r2,-2
 1013c64:	1884703a 	and	r2,r3,r2
 1013c68:	1001703a 	wrctl	status,r2
  
  return context;
 1013c6c:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 1013c70:	e0bff615 	stw	r2,-40(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 1013c74:	008040f4 	movhi	r2,259
 1013c78:	10977704 	addi	r2,r2,24028
 1013c7c:	10800003 	ldbu	r2,0(r2)
 1013c80:	10803fcc 	andi	r2,r2,255
 1013c84:	1005003a 	cmpeq	r2,r2,zero
 1013c88:	1000071e 	bne	r2,zero,1013ca8 <OSTaskCreateExt+0xac>
 1013c8c:	e0bff617 	ldw	r2,-40(fp)
 1013c90:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1013c94:	e0bff417 	ldw	r2,-48(fp)
 1013c98:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 1013c9c:	00800f04 	movi	r2,60
 1013ca0:	e0bfff15 	stw	r2,-4(fp)
 1013ca4:	00005206 	br	1013df0 <OSTaskCreateExt+0x1f4>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 1013ca8:	e0bffc03 	ldbu	r2,-16(fp)
 1013cac:	00c04174 	movhi	r3,261
 1013cb0:	18e6e404 	addi	r3,r3,-25712
 1013cb4:	1085883a 	add	r2,r2,r2
 1013cb8:	1085883a 	add	r2,r2,r2
 1013cbc:	10c5883a 	add	r2,r2,r3
 1013cc0:	10800017 	ldw	r2,0(r2)
 1013cc4:	1004c03a 	cmpne	r2,r2,zero
 1013cc8:	1000431e 	bne	r2,zero,1013dd8 <OSTaskCreateExt+0x1dc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 1013ccc:	e0bffc03 	ldbu	r2,-16(fp)
 1013cd0:	00c04174 	movhi	r3,261
 1013cd4:	18e6e404 	addi	r3,r3,-25712
 1013cd8:	1085883a 	add	r2,r2,r2
 1013cdc:	1085883a 	add	r2,r2,r2
 1013ce0:	10c7883a 	add	r3,r2,r3
 1013ce4:	00800044 	movi	r2,1
 1013ce8:	18800015 	stw	r2,0(r3)
 1013cec:	e0bff617 	ldw	r2,-40(fp)
 1013cf0:	e0bff315 	stw	r2,-52(fp)
 1013cf4:	e0bff317 	ldw	r2,-52(fp)
 1013cf8:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
 1013cfc:	e1bffe0b 	ldhu	r6,-8(fp)
 1013d00:	e1000317 	ldw	r4,12(fp)
 1013d04:	e1400417 	ldw	r5,16(fp)
 1013d08:	1014ee40 	call	1014ee4 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
 1013d0c:	e1fffe0b 	ldhu	r7,-8(fp)
 1013d10:	e13ff917 	ldw	r4,-28(fp)
 1013d14:	e17ffa17 	ldw	r5,-24(fp)
 1013d18:	e1bffb17 	ldw	r6,-20(fp)
 1013d1c:	10191400 	call	1019140 <OSTaskStkInit>
 1013d20:	e0bff815 	stw	r2,-32(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
 1013d24:	e13ffc03 	ldbu	r4,-16(fp)
 1013d28:	e1fffd0b 	ldhu	r7,-12(fp)
 1013d2c:	e0fffe0b 	ldhu	r3,-8(fp)
 1013d30:	e0800417 	ldw	r2,16(fp)
 1013d34:	d8800015 	stw	r2,0(sp)
 1013d38:	e0800517 	ldw	r2,20(fp)
 1013d3c:	d8800115 	stw	r2,4(sp)
 1013d40:	d8c00215 	stw	r3,8(sp)
 1013d44:	e17ff817 	ldw	r5,-32(fp)
 1013d48:	e1800317 	ldw	r6,12(fp)
 1013d4c:	100eda00 	call	100eda0 <OS_TCBInit>
 1013d50:	e0bff705 	stb	r2,-36(fp)
        if (err == OS_ERR_NONE) {
 1013d54:	e0bff703 	ldbu	r2,-36(fp)
 1013d58:	1004c03a 	cmpne	r2,r2,zero
 1013d5c:	1000081e 	bne	r2,zero,1013d80 <OSTaskCreateExt+0x184>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
 1013d60:	008040f4 	movhi	r2,259
 1013d64:	10976804 	addi	r2,r2,23968
 1013d68:	10800003 	ldbu	r2,0(r2)
 1013d6c:	10803fcc 	andi	r2,r2,255
 1013d70:	10800058 	cmpnei	r2,r2,1
 1013d74:	1000151e 	bne	r2,zero,1013dcc <OSTaskCreateExt+0x1d0>
                OS_Sched();
 1013d78:	100e9440 	call	100e944 <OS_Sched>
 1013d7c:	00001306 	br	1013dcc <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1013d80:	0005303a 	rdctl	r2,status
 1013d84:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1013d88:	e0fff217 	ldw	r3,-56(fp)
 1013d8c:	00bfff84 	movi	r2,-2
 1013d90:	1884703a 	and	r2,r3,r2
 1013d94:	1001703a 	wrctl	status,r2
  
  return context;
 1013d98:	e0bff217 	ldw	r2,-56(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 1013d9c:	e0bff615 	stw	r2,-40(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
 1013da0:	e0bffc03 	ldbu	r2,-16(fp)
 1013da4:	00c04174 	movhi	r3,261
 1013da8:	18e6e404 	addi	r3,r3,-25712
 1013dac:	1085883a 	add	r2,r2,r2
 1013db0:	1085883a 	add	r2,r2,r2
 1013db4:	10c5883a 	add	r2,r2,r3
 1013db8:	10000015 	stw	zero,0(r2)
 1013dbc:	e0bff617 	ldw	r2,-40(fp)
 1013dc0:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1013dc4:	e0bff117 	ldw	r2,-60(fp)
 1013dc8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 1013dcc:	e0bff703 	ldbu	r2,-36(fp)
 1013dd0:	e0bfff15 	stw	r2,-4(fp)
 1013dd4:	00000606 	br	1013df0 <OSTaskCreateExt+0x1f4>
 1013dd8:	e0bff617 	ldw	r2,-40(fp)
 1013ddc:	e0bff015 	stw	r2,-64(fp)
 1013de0:	e0bff017 	ldw	r2,-64(fp)
 1013de4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 1013de8:	00800a04 	movi	r2,40
 1013dec:	e0bfff15 	stw	r2,-4(fp)
 1013df0:	e0bfff17 	ldw	r2,-4(fp)
}
 1013df4:	e037883a 	mov	sp,fp
 1013df8:	dfc00117 	ldw	ra,4(sp)
 1013dfc:	df000017 	ldw	fp,0(sp)
 1013e00:	dec00204 	addi	sp,sp,8
 1013e04:	f800283a 	ret

01013e08 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
 1013e08:	f811883a 	mov	r8,ra
 1013e0c:	100c3d80 	call	100c3d8 <_mcount>
 1013e10:	403f883a 	mov	ra,r8
 1013e14:	defff304 	addi	sp,sp,-52
 1013e18:	dfc00c15 	stw	ra,48(sp)
 1013e1c:	df000b15 	stw	fp,44(sp)
 1013e20:	df000b04 	addi	fp,sp,44
 1013e24:	e13ffe05 	stb	r4,-8(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
 1013e28:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
 1013e2c:	008040f4 	movhi	r2,259
 1013e30:	10977704 	addi	r2,r2,24028
 1013e34:	10800003 	ldbu	r2,0(r2)
 1013e38:	10803fcc 	andi	r2,r2,255
 1013e3c:	1005003a 	cmpeq	r2,r2,zero
 1013e40:	1000031e 	bne	r2,zero,1013e50 <OSTaskDel+0x48>
        return (OS_ERR_TASK_DEL_ISR);
 1013e44:	00801004 	movi	r2,64
 1013e48:	e0bfff15 	stw	r2,-4(fp)
 1013e4c:	0000ee06 	br	1014208 <OSTaskDel+0x400>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
 1013e50:	e0bffe03 	ldbu	r2,-8(fp)
 1013e54:	10800518 	cmpnei	r2,r2,20
 1013e58:	1000031e 	bne	r2,zero,1013e68 <OSTaskDel+0x60>
        return (OS_ERR_TASK_DEL_IDLE);
 1013e5c:	00800f84 	movi	r2,62
 1013e60:	e0bfff15 	stw	r2,-4(fp)
 1013e64:	0000e806 	br	1014208 <OSTaskDel+0x400>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
 1013e68:	e0bffe03 	ldbu	r2,-8(fp)
 1013e6c:	10800530 	cmpltui	r2,r2,20
 1013e70:	1000061e 	bne	r2,zero,1013e8c <OSTaskDel+0x84>
        if (prio != OS_PRIO_SELF) {
 1013e74:	e0bffe03 	ldbu	r2,-8(fp)
 1013e78:	10803fe0 	cmpeqi	r2,r2,255
 1013e7c:	1000031e 	bne	r2,zero,1013e8c <OSTaskDel+0x84>
            return (OS_ERR_PRIO_INVALID);
 1013e80:	00800a84 	movi	r2,42
 1013e84:	e0bfff15 	stw	r2,-4(fp)
 1013e88:	0000df06 	br	1014208 <OSTaskDel+0x400>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1013e8c:	0005303a 	rdctl	r2,status
 1013e90:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1013e94:	e0fffa17 	ldw	r3,-24(fp)
 1013e98:	00bfff84 	movi	r2,-2
 1013e9c:	1884703a 	and	r2,r3,r2
 1013ea0:	1001703a 	wrctl	status,r2
  
  return context;
 1013ea4:	e0bffa17 	ldw	r2,-24(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
 1013ea8:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
 1013eac:	e0bffe03 	ldbu	r2,-8(fp)
 1013eb0:	10803fd8 	cmpnei	r2,r2,255
 1013eb4:	1000051e 	bne	r2,zero,1013ecc <OSTaskDel+0xc4>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
 1013eb8:	008040f4 	movhi	r2,259
 1013ebc:	10977804 	addi	r2,r2,24032
 1013ec0:	10800017 	ldw	r2,0(r2)
 1013ec4:	10800c83 	ldbu	r2,50(r2)
 1013ec8:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 1013ecc:	e0bffe03 	ldbu	r2,-8(fp)
 1013ed0:	00c04174 	movhi	r3,261
 1013ed4:	18e6e404 	addi	r3,r3,-25712
 1013ed8:	1085883a 	add	r2,r2,r2
 1013edc:	1085883a 	add	r2,r2,r2
 1013ee0:	10c5883a 	add	r2,r2,r3
 1013ee4:	10800017 	ldw	r2,0(r2)
 1013ee8:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
 1013eec:	e0bffc17 	ldw	r2,-16(fp)
 1013ef0:	1004c03a 	cmpne	r2,r2,zero
 1013ef4:	1000071e 	bne	r2,zero,1013f14 <OSTaskDel+0x10c>
 1013ef8:	e0bffb17 	ldw	r2,-20(fp)
 1013efc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1013f00:	e0bff917 	ldw	r2,-28(fp)
 1013f04:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 1013f08:	008010c4 	movi	r2,67
 1013f0c:	e0bfff15 	stw	r2,-4(fp)
 1013f10:	0000bd06 	br	1014208 <OSTaskDel+0x400>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
 1013f14:	e0bffc17 	ldw	r2,-16(fp)
 1013f18:	10800058 	cmpnei	r2,r2,1
 1013f1c:	1000071e 	bne	r2,zero,1013f3c <OSTaskDel+0x134>
 1013f20:	e0bffb17 	ldw	r2,-20(fp)
 1013f24:	e0bff815 	stw	r2,-32(fp)
 1013f28:	e0bff817 	ldw	r2,-32(fp)
 1013f2c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 1013f30:	00800f44 	movi	r2,61
 1013f34:	e0bfff15 	stw	r2,-4(fp)
 1013f38:	0000b306 	br	1014208 <OSTaskDel+0x400>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
 1013f3c:	e0bffc17 	ldw	r2,-16(fp)
 1013f40:	10800d03 	ldbu	r2,52(r2)
 1013f44:	11003fcc 	andi	r4,r2,255
 1013f48:	e0bffc17 	ldw	r2,-16(fp)
 1013f4c:	10800d03 	ldbu	r2,52(r2)
 1013f50:	10c03fcc 	andi	r3,r2,255
 1013f54:	008040f4 	movhi	r2,259
 1013f58:	10977544 	addi	r2,r2,24021
 1013f5c:	10c5883a 	add	r2,r2,r3
 1013f60:	10800003 	ldbu	r2,0(r2)
 1013f64:	1007883a 	mov	r3,r2
 1013f68:	e0bffc17 	ldw	r2,-16(fp)
 1013f6c:	10800d43 	ldbu	r2,53(r2)
 1013f70:	0084303a 	nor	r2,zero,r2
 1013f74:	1884703a 	and	r2,r3,r2
 1013f78:	1007883a 	mov	r3,r2
 1013f7c:	008040f4 	movhi	r2,259
 1013f80:	10977544 	addi	r2,r2,24021
 1013f84:	1105883a 	add	r2,r2,r4
 1013f88:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
 1013f8c:	e0bffc17 	ldw	r2,-16(fp)
 1013f90:	10800d03 	ldbu	r2,52(r2)
 1013f94:	10c03fcc 	andi	r3,r2,255
 1013f98:	008040f4 	movhi	r2,259
 1013f9c:	10977544 	addi	r2,r2,24021
 1013fa0:	10c5883a 	add	r2,r2,r3
 1013fa4:	10800003 	ldbu	r2,0(r2)
 1013fa8:	10803fcc 	andi	r2,r2,255
 1013fac:	1004c03a 	cmpne	r2,r2,zero
 1013fb0:	10000c1e 	bne	r2,zero,1013fe4 <OSTaskDel+0x1dc>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
 1013fb4:	e0bffc17 	ldw	r2,-16(fp)
 1013fb8:	10800d83 	ldbu	r2,54(r2)
 1013fbc:	0084303a 	nor	r2,zero,r2
 1013fc0:	1007883a 	mov	r3,r2
 1013fc4:	008040f4 	movhi	r2,259
 1013fc8:	10977504 	addi	r2,r2,24020
 1013fcc:	10800003 	ldbu	r2,0(r2)
 1013fd0:	1884703a 	and	r2,r3,r2
 1013fd4:	1007883a 	mov	r3,r2
 1013fd8:	008040f4 	movhi	r2,259
 1013fdc:	10977504 	addi	r2,r2,24020
 1013fe0:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
 1013fe4:	e0bffc17 	ldw	r2,-16(fp)
 1013fe8:	10800717 	ldw	r2,28(r2)
 1013fec:	1005003a 	cmpeq	r2,r2,zero
 1013ff0:	1000041e 	bne	r2,zero,1014004 <OSTaskDel+0x1fc>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
 1013ff4:	e0bffc17 	ldw	r2,-16(fp)
 1013ff8:	11400717 	ldw	r5,28(r2)
 1013ffc:	e13ffc17 	ldw	r4,-16(fp)
 1014000:	100e2780 	call	100e278 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
 1014004:	e0bffc17 	ldw	r2,-16(fp)
 1014008:	10800817 	ldw	r2,32(r2)
 101400c:	1005003a 	cmpeq	r2,r2,zero
 1014010:	1000041e 	bne	r2,zero,1014024 <OSTaskDel+0x21c>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 1014014:	e0bffc17 	ldw	r2,-16(fp)
 1014018:	11400817 	ldw	r5,32(r2)
 101401c:	e13ffc17 	ldw	r4,-16(fp)
 1014020:	100e33c0 	call	100e33c <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
 1014024:	e0bffc17 	ldw	r2,-16(fp)
 1014028:	10800a17 	ldw	r2,40(r2)
 101402c:	e0bffd15 	stw	r2,-12(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
 1014030:	e0bffd17 	ldw	r2,-12(fp)
 1014034:	1005003a 	cmpeq	r2,r2,zero
 1014038:	1000021e 	bne	r2,zero,1014044 <OSTaskDel+0x23c>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
 101403c:	e13ffd17 	ldw	r4,-12(fp)
 1014040:	1010ba40 	call	1010ba4 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
 1014044:	e0bffc17 	ldw	r2,-16(fp)
 1014048:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
 101404c:	e0bffc17 	ldw	r2,-16(fp)
 1014050:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 1014054:	e0bffc17 	ldw	r2,-16(fp)
 1014058:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
 101405c:	008040f4 	movhi	r2,259
 1014060:	10976604 	addi	r2,r2,23960
 1014064:	10800003 	ldbu	r2,0(r2)
 1014068:	10803fcc 	andi	r2,r2,255
 101406c:	10803fe0 	cmpeqi	r2,r2,255
 1014070:	1000081e 	bne	r2,zero,1014094 <OSTaskDel+0x28c>
        OSLockNesting++;
 1014074:	008040f4 	movhi	r2,259
 1014078:	10976604 	addi	r2,r2,23960
 101407c:	10800003 	ldbu	r2,0(r2)
 1014080:	10800044 	addi	r2,r2,1
 1014084:	1007883a 	mov	r3,r2
 1014088:	008040f4 	movhi	r2,259
 101408c:	10976604 	addi	r2,r2,23960
 1014090:	10c00005 	stb	r3,0(r2)
 1014094:	e0bffb17 	ldw	r2,-20(fp)
 1014098:	e0bff715 	stw	r2,-36(fp)
 101409c:	e0bff717 	ldw	r2,-36(fp)
 10140a0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
 10140a4:	100de340 	call	100de34 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10140a8:	0005303a 	rdctl	r2,status
 10140ac:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10140b0:	e0fff617 	ldw	r3,-40(fp)
 10140b4:	00bfff84 	movi	r2,-2
 10140b8:	1884703a 	and	r2,r3,r2
 10140bc:	1001703a 	wrctl	status,r2
  
  return context;
 10140c0:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
 10140c4:	e0bffb15 	stw	r2,-20(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
 10140c8:	008040f4 	movhi	r2,259
 10140cc:	10976604 	addi	r2,r2,23960
 10140d0:	10800003 	ldbu	r2,0(r2)
 10140d4:	10803fcc 	andi	r2,r2,255
 10140d8:	1005003a 	cmpeq	r2,r2,zero
 10140dc:	1000081e 	bne	r2,zero,1014100 <OSTaskDel+0x2f8>
        OSLockNesting--;
 10140e0:	008040f4 	movhi	r2,259
 10140e4:	10976604 	addi	r2,r2,23960
 10140e8:	10800003 	ldbu	r2,0(r2)
 10140ec:	10bfffc4 	addi	r2,r2,-1
 10140f0:	1007883a 	mov	r3,r2
 10140f4:	008040f4 	movhi	r2,259
 10140f8:	10976604 	addi	r2,r2,23960
 10140fc:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
 1014100:	e13ffc17 	ldw	r4,-16(fp)
 1014104:	10194880 	call	1019488 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
 1014108:	008040f4 	movhi	r2,259
 101410c:	10977144 	addi	r2,r2,24005
 1014110:	10800003 	ldbu	r2,0(r2)
 1014114:	10bfffc4 	addi	r2,r2,-1
 1014118:	1007883a 	mov	r3,r2
 101411c:	008040f4 	movhi	r2,259
 1014120:	10977144 	addi	r2,r2,24005
 1014124:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
 1014128:	e0bffe03 	ldbu	r2,-8(fp)
 101412c:	00c04174 	movhi	r3,261
 1014130:	18e6e404 	addi	r3,r3,-25712
 1014134:	1085883a 	add	r2,r2,r2
 1014138:	1085883a 	add	r2,r2,r2
 101413c:	10c5883a 	add	r2,r2,r3
 1014140:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
 1014144:	e0bffc17 	ldw	r2,-16(fp)
 1014148:	10800617 	ldw	r2,24(r2)
 101414c:	1004c03a 	cmpne	r2,r2,zero
 1014150:	1000091e 	bne	r2,zero,1014178 <OSTaskDel+0x370>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
 1014154:	e0bffc17 	ldw	r2,-16(fp)
 1014158:	10800517 	ldw	r2,20(r2)
 101415c:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
 1014160:	e0bffc17 	ldw	r2,-16(fp)
 1014164:	10c00517 	ldw	r3,20(r2)
 1014168:	008040f4 	movhi	r2,259
 101416c:	10976b04 	addi	r2,r2,23980
 1014170:	10c00015 	stw	r3,0(r2)
 1014174:	00000a06 	br	10141a0 <OSTaskDel+0x398>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
 1014178:	e0bffc17 	ldw	r2,-16(fp)
 101417c:	10c00617 	ldw	r3,24(r2)
 1014180:	e0bffc17 	ldw	r2,-16(fp)
 1014184:	10800517 	ldw	r2,20(r2)
 1014188:	18800515 	stw	r2,20(r3)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
 101418c:	e0bffc17 	ldw	r2,-16(fp)
 1014190:	10c00517 	ldw	r3,20(r2)
 1014194:	e0bffc17 	ldw	r2,-16(fp)
 1014198:	10800617 	ldw	r2,24(r2)
 101419c:	18800615 	stw	r2,24(r3)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
 10141a0:	008040f4 	movhi	r2,259
 10141a4:	10977004 	addi	r2,r2,24000
 10141a8:	10c00017 	ldw	r3,0(r2)
 10141ac:	e0bffc17 	ldw	r2,-16(fp)
 10141b0:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
 10141b4:	00c040f4 	movhi	r3,259
 10141b8:	18d77004 	addi	r3,r3,24000
 10141bc:	e0bffc17 	ldw	r2,-16(fp)
 10141c0:	18800015 	stw	r2,0(r3)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
 10141c4:	e0fffc17 	ldw	r3,-16(fp)
 10141c8:	00800fc4 	movi	r2,63
 10141cc:	18801305 	stb	r2,76(r3)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 10141d0:	e0bffc17 	ldw	r2,-16(fp)
 10141d4:	10001345 	stb	zero,77(r2)
 10141d8:	e0bffb17 	ldw	r2,-20(fp)
 10141dc:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10141e0:	e0bff517 	ldw	r2,-44(fp)
 10141e4:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 10141e8:	008040f4 	movhi	r2,259
 10141ec:	10976804 	addi	r2,r2,23968
 10141f0:	10800003 	ldbu	r2,0(r2)
 10141f4:	10803fcc 	andi	r2,r2,255
 10141f8:	10800058 	cmpnei	r2,r2,1
 10141fc:	1000011e 	bne	r2,zero,1014204 <OSTaskDel+0x3fc>
        OS_Sched();                                     /* Find new highest priority task              */
 1014200:	100e9440 	call	100e944 <OS_Sched>
    }
    return (OS_ERR_NONE);
 1014204:	e03fff15 	stw	zero,-4(fp)
 1014208:	e0bfff17 	ldw	r2,-4(fp)
}
 101420c:	e037883a 	mov	sp,fp
 1014210:	dfc00117 	ldw	ra,4(sp)
 1014214:	df000017 	ldw	fp,0(sp)
 1014218:	dec00204 	addi	sp,sp,8
 101421c:	f800283a 	ret

01014220 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
 1014220:	f811883a 	mov	r8,ra
 1014224:	100c3d80 	call	100c3d8 <_mcount>
 1014228:	403f883a 	mov	ra,r8
 101422c:	defff404 	addi	sp,sp,-48
 1014230:	df000b15 	stw	fp,44(sp)
 1014234:	df000b04 	addi	fp,sp,44
 1014238:	e13ffe05 	stb	r4,-8(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 101423c:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
 1014240:	e0bffe03 	ldbu	r2,-8(fp)
 1014244:	10800518 	cmpnei	r2,r2,20
 1014248:	1000031e 	bne	r2,zero,1014258 <OSTaskDelReq+0x38>
        return (OS_ERR_TASK_DEL_IDLE);
 101424c:	00800f84 	movi	r2,62
 1014250:	e0bfff15 	stw	r2,-4(fp)
 1014254:	00004c06 	br	1014388 <OSTaskDelReq+0x168>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 1014258:	e0bffe03 	ldbu	r2,-8(fp)
 101425c:	10800530 	cmpltui	r2,r2,20
 1014260:	1000061e 	bne	r2,zero,101427c <OSTaskDelReq+0x5c>
        if (prio != OS_PRIO_SELF) {
 1014264:	e0bffe03 	ldbu	r2,-8(fp)
 1014268:	10803fe0 	cmpeqi	r2,r2,255
 101426c:	1000031e 	bne	r2,zero,101427c <OSTaskDelReq+0x5c>
            return (OS_ERR_PRIO_INVALID);
 1014270:	00800a84 	movi	r2,42
 1014274:	e0bfff15 	stw	r2,-4(fp)
 1014278:	00004306 	br	1014388 <OSTaskDelReq+0x168>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
 101427c:	e0bffe03 	ldbu	r2,-8(fp)
 1014280:	10803fd8 	cmpnei	r2,r2,255
 1014284:	1000141e 	bne	r2,zero,10142d8 <OSTaskDelReq+0xb8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1014288:	0005303a 	rdctl	r2,status
 101428c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1014290:	e0fffa17 	ldw	r3,-24(fp)
 1014294:	00bfff84 	movi	r2,-2
 1014298:	1884703a 	and	r2,r3,r2
 101429c:	1001703a 	wrctl	status,r2
  
  return context;
 10142a0:	e0bffa17 	ldw	r2,-24(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
 10142a4:	e0bffb15 	stw	r2,-20(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
 10142a8:	008040f4 	movhi	r2,259
 10142ac:	10977804 	addi	r2,r2,24032
 10142b0:	10800017 	ldw	r2,0(r2)
 10142b4:	10800dc3 	ldbu	r2,55(r2)
 10142b8:	e0bffd05 	stb	r2,-12(fp)
 10142bc:	e0bffb17 	ldw	r2,-20(fp)
 10142c0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10142c4:	e0bff917 	ldw	r2,-28(fp)
 10142c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
 10142cc:	e0bffd03 	ldbu	r2,-12(fp)
 10142d0:	e0bfff15 	stw	r2,-4(fp)
 10142d4:	00002c06 	br	1014388 <OSTaskDelReq+0x168>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10142d8:	0005303a 	rdctl	r2,status
 10142dc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10142e0:	e0fff817 	ldw	r3,-32(fp)
 10142e4:	00bfff84 	movi	r2,-2
 10142e8:	1884703a 	and	r2,r3,r2
 10142ec:	1001703a 	wrctl	status,r2
  
  return context;
 10142f0:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
 10142f4:	e0bffb15 	stw	r2,-20(fp)
    ptcb = OSTCBPrioTbl[prio];
 10142f8:	e0bffe03 	ldbu	r2,-8(fp)
 10142fc:	00c04174 	movhi	r3,261
 1014300:	18e6e404 	addi	r3,r3,-25712
 1014304:	1085883a 	add	r2,r2,r2
 1014308:	1085883a 	add	r2,r2,r2
 101430c:	10c5883a 	add	r2,r2,r3
 1014310:	10800017 	ldw	r2,0(r2)
 1014314:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
 1014318:	e0bffc17 	ldw	r2,-16(fp)
 101431c:	1004c03a 	cmpne	r2,r2,zero
 1014320:	1000071e 	bne	r2,zero,1014340 <OSTaskDelReq+0x120>
 1014324:	e0bffb17 	ldw	r2,-20(fp)
 1014328:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101432c:	e0bff717 	ldw	r2,-36(fp)
 1014330:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
 1014334:	008010c4 	movi	r2,67
 1014338:	e0bfff15 	stw	r2,-4(fp)
 101433c:	00001206 	br	1014388 <OSTaskDelReq+0x168>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
 1014340:	e0bffc17 	ldw	r2,-16(fp)
 1014344:	10800058 	cmpnei	r2,r2,1
 1014348:	1000071e 	bne	r2,zero,1014368 <OSTaskDelReq+0x148>
 101434c:	e0bffb17 	ldw	r2,-20(fp)
 1014350:	e0bff615 	stw	r2,-40(fp)
 1014354:	e0bff617 	ldw	r2,-40(fp)
 1014358:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 101435c:	00800f44 	movi	r2,61
 1014360:	e0bfff15 	stw	r2,-4(fp)
 1014364:	00000806 	br	1014388 <OSTaskDelReq+0x168>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
 1014368:	e0fffc17 	ldw	r3,-16(fp)
 101436c:	00800fc4 	movi	r2,63
 1014370:	18800dc5 	stb	r2,55(r3)
 1014374:	e0bffb17 	ldw	r2,-20(fp)
 1014378:	e0bff515 	stw	r2,-44(fp)
 101437c:	e0bff517 	ldw	r2,-44(fp)
 1014380:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 1014384:	e03fff15 	stw	zero,-4(fp)
 1014388:	e0bfff17 	ldw	r2,-4(fp)
}
 101438c:	e037883a 	mov	sp,fp
 1014390:	df000017 	ldw	fp,0(sp)
 1014394:	dec00104 	addi	sp,sp,4
 1014398:	f800283a 	ret

0101439c <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
 101439c:	f811883a 	mov	r8,ra
 10143a0:	100c3d80 	call	100c3d8 <_mcount>
 10143a4:	403f883a 	mov	ra,r8
 10143a8:	defff304 	addi	sp,sp,-52
 10143ac:	dfc00c15 	stw	ra,48(sp)
 10143b0:	df000b15 	stw	fp,44(sp)
 10143b4:	df000b04 	addi	fp,sp,44
 10143b8:	e17ffd15 	stw	r5,-12(fp)
 10143bc:	e1bffe15 	stw	r6,-8(fp)
 10143c0:	e13ffc05 	stb	r4,-16(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
 10143c4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
 10143c8:	e0bffe17 	ldw	r2,-8(fp)
 10143cc:	1004c03a 	cmpne	r2,r2,zero
 10143d0:	1000021e 	bne	r2,zero,10143dc <OSTaskNameGet+0x40>
        return (0);
 10143d4:	e03fff15 	stw	zero,-4(fp)
 10143d8:	00005b06 	br	1014548 <OSTaskNameGet+0x1ac>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
 10143dc:	e0bffc03 	ldbu	r2,-16(fp)
 10143e0:	10800570 	cmpltui	r2,r2,21
 10143e4:	1000081e 	bne	r2,zero,1014408 <OSTaskNameGet+0x6c>
        if (prio != OS_PRIO_SELF) {
 10143e8:	e0bffc03 	ldbu	r2,-16(fp)
 10143ec:	10803fe0 	cmpeqi	r2,r2,255
 10143f0:	1000051e 	bne	r2,zero,1014408 <OSTaskNameGet+0x6c>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
 10143f4:	e0fffe17 	ldw	r3,-8(fp)
 10143f8:	00800a84 	movi	r2,42
 10143fc:	18800005 	stb	r2,0(r3)
            return (0);
 1014400:	e03fff15 	stw	zero,-4(fp)
 1014404:	00005006 	br	1014548 <OSTaskNameGet+0x1ac>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
 1014408:	e0bffd17 	ldw	r2,-12(fp)
 101440c:	1004c03a 	cmpne	r2,r2,zero
 1014410:	1000051e 	bne	r2,zero,1014428 <OSTaskNameGet+0x8c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
 1014414:	e0fffe17 	ldw	r3,-8(fp)
 1014418:	00800304 	movi	r2,12
 101441c:	18800005 	stb	r2,0(r3)
        return (0);
 1014420:	e03fff15 	stw	zero,-4(fp)
 1014424:	00004806 	br	1014548 <OSTaskNameGet+0x1ac>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
 1014428:	008040f4 	movhi	r2,259
 101442c:	10977704 	addi	r2,r2,24028
 1014430:	10800003 	ldbu	r2,0(r2)
 1014434:	10803fcc 	andi	r2,r2,255
 1014438:	1005003a 	cmpeq	r2,r2,zero
 101443c:	1000051e 	bne	r2,zero,1014454 <OSTaskNameGet+0xb8>
        *perr = OS_ERR_NAME_GET_ISR;
 1014440:	e0fffe17 	ldw	r3,-8(fp)
 1014444:	00800444 	movi	r2,17
 1014448:	18800005 	stb	r2,0(r3)
        return (0);
 101444c:	e03fff15 	stw	zero,-4(fp)
 1014450:	00003d06 	br	1014548 <OSTaskNameGet+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1014454:	0005303a 	rdctl	r2,status
 1014458:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101445c:	e0fff817 	ldw	r3,-32(fp)
 1014460:	00bfff84 	movi	r2,-2
 1014464:	1884703a 	and	r2,r3,r2
 1014468:	1001703a 	wrctl	status,r2
  
  return context;
 101446c:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
 1014470:	e0bff915 	stw	r2,-28(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
 1014474:	e0bffc03 	ldbu	r2,-16(fp)
 1014478:	10803fd8 	cmpnei	r2,r2,255
 101447c:	1000051e 	bne	r2,zero,1014494 <OSTaskNameGet+0xf8>
        prio = OSTCBCur->OSTCBPrio;
 1014480:	008040f4 	movhi	r2,259
 1014484:	10977804 	addi	r2,r2,24032
 1014488:	10800017 	ldw	r2,0(r2)
 101448c:	10800c83 	ldbu	r2,50(r2)
 1014490:	e0bffc05 	stb	r2,-16(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 1014494:	e0bffc03 	ldbu	r2,-16(fp)
 1014498:	00c04174 	movhi	r3,261
 101449c:	18e6e404 	addi	r3,r3,-25712
 10144a0:	1085883a 	add	r2,r2,r2
 10144a4:	1085883a 	add	r2,r2,r2
 10144a8:	10c5883a 	add	r2,r2,r3
 10144ac:	10800017 	ldw	r2,0(r2)
 10144b0:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
 10144b4:	e0bffb17 	ldw	r2,-20(fp)
 10144b8:	1004c03a 	cmpne	r2,r2,zero
 10144bc:	1000091e 	bne	r2,zero,10144e4 <OSTaskNameGet+0x148>
 10144c0:	e0bff917 	ldw	r2,-28(fp)
 10144c4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10144c8:	e0bff717 	ldw	r2,-36(fp)
 10144cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
 10144d0:	e0fffe17 	ldw	r3,-8(fp)
 10144d4:	008010c4 	movi	r2,67
 10144d8:	18800005 	stb	r2,0(r3)
        return (0);
 10144dc:	e03fff15 	stw	zero,-4(fp)
 10144e0:	00001906 	br	1014548 <OSTaskNameGet+0x1ac>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
 10144e4:	e0bffb17 	ldw	r2,-20(fp)
 10144e8:	10800058 	cmpnei	r2,r2,1
 10144ec:	1000091e 	bne	r2,zero,1014514 <OSTaskNameGet+0x178>
 10144f0:	e0bff917 	ldw	r2,-28(fp)
 10144f4:	e0bff615 	stw	r2,-40(fp)
 10144f8:	e0bff617 	ldw	r2,-40(fp)
 10144fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
 1014500:	e0fffe17 	ldw	r3,-8(fp)
 1014504:	008010c4 	movi	r2,67
 1014508:	18800005 	stb	r2,0(r3)
        return (0);
 101450c:	e03fff15 	stw	zero,-4(fp)
 1014510:	00000d06 	br	1014548 <OSTaskNameGet+0x1ac>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
 1014514:	e0bffb17 	ldw	r2,-20(fp)
 1014518:	11401304 	addi	r5,r2,76
 101451c:	e13ffd17 	ldw	r4,-12(fp)
 1014520:	100eaa00 	call	100eaa0 <OS_StrCopy>
 1014524:	e0bffa05 	stb	r2,-24(fp)
 1014528:	e0bff917 	ldw	r2,-28(fp)
 101452c:	e0bff515 	stw	r2,-44(fp)
 1014530:	e0bff517 	ldw	r2,-44(fp)
 1014534:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 1014538:	e0bffe17 	ldw	r2,-8(fp)
 101453c:	10000005 	stb	zero,0(r2)
    return (len);
 1014540:	e0bffa03 	ldbu	r2,-24(fp)
 1014544:	e0bfff15 	stw	r2,-4(fp)
 1014548:	e0bfff17 	ldw	r2,-4(fp)
}
 101454c:	e037883a 	mov	sp,fp
 1014550:	dfc00117 	ldw	ra,4(sp)
 1014554:	df000017 	ldw	fp,0(sp)
 1014558:	dec00204 	addi	sp,sp,8
 101455c:	f800283a 	ret

01014560 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
 1014560:	f811883a 	mov	r8,ra
 1014564:	100c3d80 	call	100c3d8 <_mcount>
 1014568:	403f883a 	mov	ra,r8
 101456c:	defff304 	addi	sp,sp,-52
 1014570:	dfc00c15 	stw	ra,48(sp)
 1014574:	df000b15 	stw	fp,44(sp)
 1014578:	df000b04 	addi	fp,sp,44
 101457c:	e17ffe15 	stw	r5,-8(fp)
 1014580:	e1bfff15 	stw	r6,-4(fp)
 1014584:	e13ffd05 	stb	r4,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 1014588:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 101458c:	e0bfff17 	ldw	r2,-4(fp)
 1014590:	1005003a 	cmpeq	r2,r2,zero
 1014594:	1000611e 	bne	r2,zero,101471c <OSTaskNameSet+0x1bc>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
 1014598:	e0bffd03 	ldbu	r2,-12(fp)
 101459c:	10800570 	cmpltui	r2,r2,21
 10145a0:	1000071e 	bne	r2,zero,10145c0 <OSTaskNameSet+0x60>
        if (prio != OS_PRIO_SELF) {
 10145a4:	e0bffd03 	ldbu	r2,-12(fp)
 10145a8:	10803fe0 	cmpeqi	r2,r2,255
 10145ac:	1000041e 	bne	r2,zero,10145c0 <OSTaskNameSet+0x60>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
 10145b0:	e0ffff17 	ldw	r3,-4(fp)
 10145b4:	00800a84 	movi	r2,42
 10145b8:	18800005 	stb	r2,0(r3)
            return;
 10145bc:	00005706 	br	101471c <OSTaskNameSet+0x1bc>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
 10145c0:	e0bffe17 	ldw	r2,-8(fp)
 10145c4:	1004c03a 	cmpne	r2,r2,zero
 10145c8:	1000041e 	bne	r2,zero,10145dc <OSTaskNameSet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
 10145cc:	e0ffff17 	ldw	r3,-4(fp)
 10145d0:	00800304 	movi	r2,12
 10145d4:	18800005 	stb	r2,0(r3)
        return;
 10145d8:	00005006 	br	101471c <OSTaskNameSet+0x1bc>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
 10145dc:	008040f4 	movhi	r2,259
 10145e0:	10977704 	addi	r2,r2,24028
 10145e4:	10800003 	ldbu	r2,0(r2)
 10145e8:	10803fcc 	andi	r2,r2,255
 10145ec:	1005003a 	cmpeq	r2,r2,zero
 10145f0:	1000041e 	bne	r2,zero,1014604 <OSTaskNameSet+0xa4>
        *perr = OS_ERR_NAME_SET_ISR;
 10145f4:	e0ffff17 	ldw	r3,-4(fp)
 10145f8:	00800484 	movi	r2,18
 10145fc:	18800005 	stb	r2,0(r3)
        return;
 1014600:	00004606 	br	101471c <OSTaskNameSet+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1014604:	0005303a 	rdctl	r2,status
 1014608:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101460c:	e0fff917 	ldw	r3,-28(fp)
 1014610:	00bfff84 	movi	r2,-2
 1014614:	1884703a 	and	r2,r3,r2
 1014618:	1001703a 	wrctl	status,r2
  
  return context;
 101461c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 1014620:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
 1014624:	e0bffd03 	ldbu	r2,-12(fp)
 1014628:	10803fd8 	cmpnei	r2,r2,255
 101462c:	1000051e 	bne	r2,zero,1014644 <OSTaskNameSet+0xe4>
        prio = OSTCBCur->OSTCBPrio;
 1014630:	008040f4 	movhi	r2,259
 1014634:	10977804 	addi	r2,r2,24032
 1014638:	10800017 	ldw	r2,0(r2)
 101463c:	10800c83 	ldbu	r2,50(r2)
 1014640:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 1014644:	e0bffd03 	ldbu	r2,-12(fp)
 1014648:	00c04174 	movhi	r3,261
 101464c:	18e6e404 	addi	r3,r3,-25712
 1014650:	1085883a 	add	r2,r2,r2
 1014654:	1085883a 	add	r2,r2,r2
 1014658:	10c5883a 	add	r2,r2,r3
 101465c:	10800017 	ldw	r2,0(r2)
 1014660:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
 1014664:	e0bffb17 	ldw	r2,-20(fp)
 1014668:	1004c03a 	cmpne	r2,r2,zero
 101466c:	1000081e 	bne	r2,zero,1014690 <OSTaskNameSet+0x130>
 1014670:	e0bffa17 	ldw	r2,-24(fp)
 1014674:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1014678:	e0bff817 	ldw	r2,-32(fp)
 101467c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
 1014680:	e0ffff17 	ldw	r3,-4(fp)
 1014684:	008010c4 	movi	r2,67
 1014688:	18800005 	stb	r2,0(r3)
        return;
 101468c:	00002306 	br	101471c <OSTaskNameSet+0x1bc>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
 1014690:	e0bffb17 	ldw	r2,-20(fp)
 1014694:	10800058 	cmpnei	r2,r2,1
 1014698:	1000081e 	bne	r2,zero,10146bc <OSTaskNameSet+0x15c>
 101469c:	e0bffa17 	ldw	r2,-24(fp)
 10146a0:	e0bff715 	stw	r2,-36(fp)
 10146a4:	e0bff717 	ldw	r2,-36(fp)
 10146a8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
 10146ac:	e0ffff17 	ldw	r3,-4(fp)
 10146b0:	008010c4 	movi	r2,67
 10146b4:	18800005 	stb	r2,0(r3)
        return;
 10146b8:	00001806 	br	101471c <OSTaskNameSet+0x1bc>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
 10146bc:	e13ffe17 	ldw	r4,-8(fp)
 10146c0:	100eb2c0 	call	100eb2c <OS_StrLen>
 10146c4:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
 10146c8:	e0bffc03 	ldbu	r2,-16(fp)
 10146cc:	10800830 	cmpltui	r2,r2,32
 10146d0:	1000081e 	bne	r2,zero,10146f4 <OSTaskNameSet+0x194>
 10146d4:	e0bffa17 	ldw	r2,-24(fp)
 10146d8:	e0bff615 	stw	r2,-40(fp)
 10146dc:	e0bff617 	ldw	r2,-40(fp)
 10146e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
 10146e4:	e0ffff17 	ldw	r3,-4(fp)
 10146e8:	00801044 	movi	r2,65
 10146ec:	18800005 	stb	r2,0(r3)
        return;
 10146f0:	00000a06 	br	101471c <OSTaskNameSet+0x1bc>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
 10146f4:	e0bffb17 	ldw	r2,-20(fp)
 10146f8:	11001304 	addi	r4,r2,76
 10146fc:	e17ffe17 	ldw	r5,-8(fp)
 1014700:	100eaa00 	call	100eaa0 <OS_StrCopy>
 1014704:	e0bffa17 	ldw	r2,-24(fp)
 1014708:	e0bff515 	stw	r2,-44(fp)
 101470c:	e0bff517 	ldw	r2,-44(fp)
 1014710:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 1014714:	e0bfff17 	ldw	r2,-4(fp)
 1014718:	10000005 	stb	zero,0(r2)
}
 101471c:	e037883a 	mov	sp,fp
 1014720:	dfc00117 	ldw	ra,4(sp)
 1014724:	df000017 	ldw	fp,0(sp)
 1014728:	dec00204 	addi	sp,sp,8
 101472c:	f800283a 	ret

01014730 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
 1014730:	f811883a 	mov	r8,ra
 1014734:	100c3d80 	call	100c3d8 <_mcount>
 1014738:	403f883a 	mov	ra,r8
 101473c:	defff304 	addi	sp,sp,-52
 1014740:	dfc00c15 	stw	ra,48(sp)
 1014744:	df000b15 	stw	fp,44(sp)
 1014748:	df000b04 	addi	fp,sp,44
 101474c:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 1014750:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
 1014754:	e0bffe03 	ldbu	r2,-8(fp)
 1014758:	10800530 	cmpltui	r2,r2,20
 101475c:	1000031e 	bne	r2,zero,101476c <OSTaskResume+0x3c>
        return (OS_ERR_PRIO_INVALID);
 1014760:	00800a84 	movi	r2,42
 1014764:	e0bfff15 	stw	r2,-4(fp)
 1014768:	00007406 	br	101493c <OSTaskResume+0x20c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101476c:	0005303a 	rdctl	r2,status
 1014770:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1014774:	e0fffb17 	ldw	r3,-20(fp)
 1014778:	00bfff84 	movi	r2,-2
 101477c:	1884703a 	and	r2,r3,r2
 1014780:	1001703a 	wrctl	status,r2
  
  return context;
 1014784:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 1014788:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];
 101478c:	e0bffe03 	ldbu	r2,-8(fp)
 1014790:	00c04174 	movhi	r3,261
 1014794:	18e6e404 	addi	r3,r3,-25712
 1014798:	1085883a 	add	r2,r2,r2
 101479c:	1085883a 	add	r2,r2,r2
 10147a0:	10c5883a 	add	r2,r2,r3
 10147a4:	10800017 	ldw	r2,0(r2)
 10147a8:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
 10147ac:	e0bffd17 	ldw	r2,-12(fp)
 10147b0:	1004c03a 	cmpne	r2,r2,zero
 10147b4:	1000071e 	bne	r2,zero,10147d4 <OSTaskResume+0xa4>
 10147b8:	e0bffc17 	ldw	r2,-16(fp)
 10147bc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10147c0:	e0bffa17 	ldw	r2,-24(fp)
 10147c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
 10147c8:	00801184 	movi	r2,70
 10147cc:	e0bfff15 	stw	r2,-4(fp)
 10147d0:	00005a06 	br	101493c <OSTaskResume+0x20c>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
 10147d4:	e0bffd17 	ldw	r2,-12(fp)
 10147d8:	10800058 	cmpnei	r2,r2,1
 10147dc:	1000071e 	bne	r2,zero,10147fc <OSTaskResume+0xcc>
 10147e0:	e0bffc17 	ldw	r2,-16(fp)
 10147e4:	e0bff915 	stw	r2,-28(fp)
 10147e8:	e0bff917 	ldw	r2,-28(fp)
 10147ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 10147f0:	008010c4 	movi	r2,67
 10147f4:	e0bfff15 	stw	r2,-4(fp)
 10147f8:	00005006 	br	101493c <OSTaskResume+0x20c>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
 10147fc:	e0bffd17 	ldw	r2,-12(fp)
 1014800:	10800c03 	ldbu	r2,48(r2)
 1014804:	10803fcc 	andi	r2,r2,255
 1014808:	1080020c 	andi	r2,r2,8
 101480c:	1005003a 	cmpeq	r2,r2,zero
 1014810:	1000441e 	bne	r2,zero,1014924 <OSTaskResume+0x1f4>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
 1014814:	e0bffd17 	ldw	r2,-12(fp)
 1014818:	10c00c03 	ldbu	r3,48(r2)
 101481c:	00bffdc4 	movi	r2,-9
 1014820:	1884703a 	and	r2,r3,r2
 1014824:	1007883a 	mov	r3,r2
 1014828:	e0bffd17 	ldw	r2,-12(fp)
 101482c:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
 1014830:	e0bffd17 	ldw	r2,-12(fp)
 1014834:	10800c03 	ldbu	r2,48(r2)
 1014838:	10803fcc 	andi	r2,r2,255
 101483c:	1004c03a 	cmpne	r2,r2,zero
 1014840:	1000321e 	bne	r2,zero,101490c <OSTaskResume+0x1dc>
            if (ptcb->OSTCBDly == 0) {
 1014844:	e0bffd17 	ldw	r2,-12(fp)
 1014848:	10800b8b 	ldhu	r2,46(r2)
 101484c:	10bfffcc 	andi	r2,r2,65535
 1014850:	1004c03a 	cmpne	r2,r2,zero
 1014854:	1000281e 	bne	r2,zero,10148f8 <OSTaskResume+0x1c8>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
 1014858:	e0bffd17 	ldw	r2,-12(fp)
 101485c:	10c00d83 	ldbu	r3,54(r2)
 1014860:	008040f4 	movhi	r2,259
 1014864:	10977504 	addi	r2,r2,24020
 1014868:	10800003 	ldbu	r2,0(r2)
 101486c:	1884b03a 	or	r2,r3,r2
 1014870:	1007883a 	mov	r3,r2
 1014874:	008040f4 	movhi	r2,259
 1014878:	10977504 	addi	r2,r2,24020
 101487c:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 1014880:	e0bffd17 	ldw	r2,-12(fp)
 1014884:	10800d03 	ldbu	r2,52(r2)
 1014888:	11003fcc 	andi	r4,r2,255
 101488c:	e0bffd17 	ldw	r2,-12(fp)
 1014890:	10800d03 	ldbu	r2,52(r2)
 1014894:	10c03fcc 	andi	r3,r2,255
 1014898:	008040f4 	movhi	r2,259
 101489c:	10977544 	addi	r2,r2,24021
 10148a0:	10c5883a 	add	r2,r2,r3
 10148a4:	10c00003 	ldbu	r3,0(r2)
 10148a8:	e0bffd17 	ldw	r2,-12(fp)
 10148ac:	10800d43 	ldbu	r2,53(r2)
 10148b0:	1884b03a 	or	r2,r3,r2
 10148b4:	1007883a 	mov	r3,r2
 10148b8:	008040f4 	movhi	r2,259
 10148bc:	10977544 	addi	r2,r2,24021
 10148c0:	1105883a 	add	r2,r2,r4
 10148c4:	10c00005 	stb	r3,0(r2)
 10148c8:	e0bffc17 	ldw	r2,-16(fp)
 10148cc:	e0bff815 	stw	r2,-32(fp)
 10148d0:	e0bff817 	ldw	r2,-32(fp)
 10148d4:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
 10148d8:	008040f4 	movhi	r2,259
 10148dc:	10976804 	addi	r2,r2,23968
 10148e0:	10800003 	ldbu	r2,0(r2)
 10148e4:	10803fcc 	andi	r2,r2,255
 10148e8:	10800058 	cmpnei	r2,r2,1
 10148ec:	10000b1e 	bne	r2,zero,101491c <OSTaskResume+0x1ec>
                    OS_Sched();                               /* Find new highest priority task        */
 10148f0:	100e9440 	call	100e944 <OS_Sched>
 10148f4:	00000906 	br	101491c <OSTaskResume+0x1ec>
 10148f8:	e0bffc17 	ldw	r2,-16(fp)
 10148fc:	e0bff715 	stw	r2,-36(fp)
 1014900:	e0bff717 	ldw	r2,-36(fp)
 1014904:	1001703a 	wrctl	status,r2
 1014908:	00000406 	br	101491c <OSTaskResume+0x1ec>
 101490c:	e0bffc17 	ldw	r2,-16(fp)
 1014910:	e0bff615 	stw	r2,-40(fp)
 1014914:	e0bff617 	ldw	r2,-40(fp)
 1014918:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
 101491c:	e03fff15 	stw	zero,-4(fp)
 1014920:	00000606 	br	101493c <OSTaskResume+0x20c>
 1014924:	e0bffc17 	ldw	r2,-16(fp)
 1014928:	e0bff515 	stw	r2,-44(fp)
 101492c:	e0bff517 	ldw	r2,-44(fp)
 1014930:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
 1014934:	00801104 	movi	r2,68
 1014938:	e0bfff15 	stw	r2,-4(fp)
 101493c:	e0bfff17 	ldw	r2,-4(fp)
}
 1014940:	e037883a 	mov	sp,fp
 1014944:	dfc00117 	ldw	ra,4(sp)
 1014948:	df000017 	ldw	fp,0(sp)
 101494c:	dec00204 	addi	sp,sp,8
 1014950:	f800283a 	ret

01014954 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
 1014954:	f811883a 	mov	r8,ra
 1014958:	100c3d80 	call	100c3d8 <_mcount>
 101495c:	403f883a 	mov	ra,r8
 1014960:	defff204 	addi	sp,sp,-56
 1014964:	df000d15 	stw	fp,52(sp)
 1014968:	df000d04 	addi	fp,sp,52
 101496c:	e17ffe15 	stw	r5,-8(fp)
 1014970:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 1014974:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
 1014978:	e0bffd03 	ldbu	r2,-12(fp)
 101497c:	10800570 	cmpltui	r2,r2,21
 1014980:	1000061e 	bne	r2,zero,101499c <OSTaskStkChk+0x48>
        if (prio != OS_PRIO_SELF) {
 1014984:	e0bffd03 	ldbu	r2,-12(fp)
 1014988:	10803fe0 	cmpeqi	r2,r2,255
 101498c:	1000031e 	bne	r2,zero,101499c <OSTaskStkChk+0x48>
            return (OS_ERR_PRIO_INVALID);
 1014990:	00800a84 	movi	r2,42
 1014994:	e0bfff15 	stw	r2,-4(fp)
 1014998:	00006b06 	br	1014b48 <OSTaskStkChk+0x1f4>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
 101499c:	e0bffe17 	ldw	r2,-8(fp)
 10149a0:	1004c03a 	cmpne	r2,r2,zero
 10149a4:	1000031e 	bne	r2,zero,10149b4 <OSTaskStkChk+0x60>
        return (OS_ERR_PDATA_NULL);
 10149a8:	00800244 	movi	r2,9
 10149ac:	e0bfff15 	stw	r2,-4(fp)
 10149b0:	00006506 	br	1014b48 <OSTaskStkChk+0x1f4>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
 10149b4:	e0bffe17 	ldw	r2,-8(fp)
 10149b8:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
 10149bc:	e0bffe17 	ldw	r2,-8(fp)
 10149c0:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10149c4:	0005303a 	rdctl	r2,status
 10149c8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10149cc:	e0fff717 	ldw	r3,-36(fp)
 10149d0:	00bfff84 	movi	r2,-2
 10149d4:	1884703a 	and	r2,r3,r2
 10149d8:	1001703a 	wrctl	status,r2
  
  return context;
 10149dc:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
 10149e0:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
 10149e4:	e0bffd03 	ldbu	r2,-12(fp)
 10149e8:	10803fd8 	cmpnei	r2,r2,255
 10149ec:	1000051e 	bne	r2,zero,1014a04 <OSTaskStkChk+0xb0>
        prio = OSTCBCur->OSTCBPrio;
 10149f0:	008040f4 	movhi	r2,259
 10149f4:	10977804 	addi	r2,r2,24032
 10149f8:	10800017 	ldw	r2,0(r2)
 10149fc:	10800c83 	ldbu	r2,50(r2)
 1014a00:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 1014a04:	e0bffd03 	ldbu	r2,-12(fp)
 1014a08:	00c04174 	movhi	r3,261
 1014a0c:	18e6e404 	addi	r3,r3,-25712
 1014a10:	1085883a 	add	r2,r2,r2
 1014a14:	1085883a 	add	r2,r2,r2
 1014a18:	10c5883a 	add	r2,r2,r3
 1014a1c:	10800017 	ldw	r2,0(r2)
 1014a20:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
 1014a24:	e0bffc17 	ldw	r2,-16(fp)
 1014a28:	1004c03a 	cmpne	r2,r2,zero
 1014a2c:	1000071e 	bne	r2,zero,1014a4c <OSTaskStkChk+0xf8>
 1014a30:	e0bff817 	ldw	r2,-32(fp)
 1014a34:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1014a38:	e0bff617 	ldw	r2,-40(fp)
 1014a3c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 1014a40:	008010c4 	movi	r2,67
 1014a44:	e0bfff15 	stw	r2,-4(fp)
 1014a48:	00003f06 	br	1014b48 <OSTaskStkChk+0x1f4>
    }
    if (ptcb == OS_TCB_RESERVED) {
 1014a4c:	e0bffc17 	ldw	r2,-16(fp)
 1014a50:	10800058 	cmpnei	r2,r2,1
 1014a54:	1000071e 	bne	r2,zero,1014a74 <OSTaskStkChk+0x120>
 1014a58:	e0bff817 	ldw	r2,-32(fp)
 1014a5c:	e0bff515 	stw	r2,-44(fp)
 1014a60:	e0bff517 	ldw	r2,-44(fp)
 1014a64:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 1014a68:	008010c4 	movi	r2,67
 1014a6c:	e0bfff15 	stw	r2,-4(fp)
 1014a70:	00003506 	br	1014b48 <OSTaskStkChk+0x1f4>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
 1014a74:	e0bffc17 	ldw	r2,-16(fp)
 1014a78:	1080040b 	ldhu	r2,16(r2)
 1014a7c:	10bfffcc 	andi	r2,r2,65535
 1014a80:	1080004c 	andi	r2,r2,1
 1014a84:	1004c03a 	cmpne	r2,r2,zero
 1014a88:	1000071e 	bne	r2,zero,1014aa8 <OSTaskStkChk+0x154>
 1014a8c:	e0bff817 	ldw	r2,-32(fp)
 1014a90:	e0bff415 	stw	r2,-48(fp)
 1014a94:	e0bff417 	ldw	r2,-48(fp)
 1014a98:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
 1014a9c:	00801144 	movi	r2,69
 1014aa0:	e0bfff15 	stw	r2,-4(fp)
 1014aa4:	00002806 	br	1014b48 <OSTaskStkChk+0x1f4>
    }
    nfree = 0;
 1014aa8:	e03ffa15 	stw	zero,-24(fp)
    size  = ptcb->OSTCBStkSize;
 1014aac:	e0bffc17 	ldw	r2,-16(fp)
 1014ab0:	10800317 	ldw	r2,12(r2)
 1014ab4:	e0bff915 	stw	r2,-28(fp)
    pchk  = ptcb->OSTCBStkBottom;
 1014ab8:	e0bffc17 	ldw	r2,-16(fp)
 1014abc:	10800217 	ldw	r2,8(r2)
 1014ac0:	e0bffb15 	stw	r2,-20(fp)
 1014ac4:	e0bff817 	ldw	r2,-32(fp)
 1014ac8:	e0bff315 	stw	r2,-52(fp)
 1014acc:	e0bff317 	ldw	r2,-52(fp)
 1014ad0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 1014ad4:	00000306 	br	1014ae4 <OSTaskStkChk+0x190>
        nfree++;
 1014ad8:	e0bffa17 	ldw	r2,-24(fp)
 1014adc:	10800044 	addi	r2,r2,1
 1014ae0:	e0bffa15 	stw	r2,-24(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 1014ae4:	e0bffb17 	ldw	r2,-20(fp)
 1014ae8:	10800017 	ldw	r2,0(r2)
 1014aec:	1005003a 	cmpeq	r2,r2,zero
 1014af0:	1007883a 	mov	r3,r2
 1014af4:	e0bffb17 	ldw	r2,-20(fp)
 1014af8:	10800104 	addi	r2,r2,4
 1014afc:	e0bffb15 	stw	r2,-20(fp)
 1014b00:	18803fcc 	andi	r2,r3,255
 1014b04:	1004c03a 	cmpne	r2,r2,zero
 1014b08:	103ff31e 	bne	r2,zero,1014ad8 <OSTaskStkChk+0x184>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
 1014b0c:	e0bffa17 	ldw	r2,-24(fp)
 1014b10:	1085883a 	add	r2,r2,r2
 1014b14:	1085883a 	add	r2,r2,r2
 1014b18:	1007883a 	mov	r3,r2
 1014b1c:	e0bffe17 	ldw	r2,-8(fp)
 1014b20:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
 1014b24:	e0fff917 	ldw	r3,-28(fp)
 1014b28:	e0bffa17 	ldw	r2,-24(fp)
 1014b2c:	1885c83a 	sub	r2,r3,r2
 1014b30:	1085883a 	add	r2,r2,r2
 1014b34:	1085883a 	add	r2,r2,r2
 1014b38:	1007883a 	mov	r3,r2
 1014b3c:	e0bffe17 	ldw	r2,-8(fp)
 1014b40:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
 1014b44:	e03fff15 	stw	zero,-4(fp)
 1014b48:	e0bfff17 	ldw	r2,-4(fp)
}
 1014b4c:	e037883a 	mov	sp,fp
 1014b50:	df000017 	ldw	fp,0(sp)
 1014b54:	dec00104 	addi	sp,sp,4
 1014b58:	f800283a 	ret

01014b5c <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
 1014b5c:	f811883a 	mov	r8,ra
 1014b60:	100c3d80 	call	100c3d8 <_mcount>
 1014b64:	403f883a 	mov	ra,r8
 1014b68:	defff404 	addi	sp,sp,-48
 1014b6c:	dfc00b15 	stw	ra,44(sp)
 1014b70:	df000a15 	stw	fp,40(sp)
 1014b74:	df000a04 	addi	fp,sp,40
 1014b78:	e13ffe05 	stb	r4,-8(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1014b7c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
 1014b80:	e0bffe03 	ldbu	r2,-8(fp)
 1014b84:	10800518 	cmpnei	r2,r2,20
 1014b88:	1000031e 	bne	r2,zero,1014b98 <OSTaskSuspend+0x3c>
        return (OS_ERR_TASK_SUSPEND_IDLE);
 1014b8c:	008011c4 	movi	r2,71
 1014b90:	e0bfff15 	stw	r2,-4(fp)
 1014b94:	00007906 	br	1014d7c <OSTaskSuspend+0x220>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 1014b98:	e0bffe03 	ldbu	r2,-8(fp)
 1014b9c:	10800530 	cmpltui	r2,r2,20
 1014ba0:	1000061e 	bne	r2,zero,1014bbc <OSTaskSuspend+0x60>
        if (prio != OS_PRIO_SELF) {
 1014ba4:	e0bffe03 	ldbu	r2,-8(fp)
 1014ba8:	10803fe0 	cmpeqi	r2,r2,255
 1014bac:	1000031e 	bne	r2,zero,1014bbc <OSTaskSuspend+0x60>
            return (OS_ERR_PRIO_INVALID);
 1014bb0:	00800a84 	movi	r2,42
 1014bb4:	e0bfff15 	stw	r2,-4(fp)
 1014bb8:	00007006 	br	1014d7c <OSTaskSuspend+0x220>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1014bbc:	0005303a 	rdctl	r2,status
 1014bc0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1014bc4:	e0fff917 	ldw	r3,-28(fp)
 1014bc8:	00bfff84 	movi	r2,-2
 1014bcc:	1884703a 	and	r2,r3,r2
 1014bd0:	1001703a 	wrctl	status,r2
  
  return context;
 1014bd4:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
 1014bd8:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
 1014bdc:	e0bffe03 	ldbu	r2,-8(fp)
 1014be0:	10803fd8 	cmpnei	r2,r2,255
 1014be4:	1000081e 	bne	r2,zero,1014c08 <OSTaskSuspend+0xac>
        prio = OSTCBCur->OSTCBPrio;
 1014be8:	008040f4 	movhi	r2,259
 1014bec:	10977804 	addi	r2,r2,24032
 1014bf0:	10800017 	ldw	r2,0(r2)
 1014bf4:	10800c83 	ldbu	r2,50(r2)
 1014bf8:	e0bffe05 	stb	r2,-8(fp)
        self = OS_TRUE;
 1014bfc:	00800044 	movi	r2,1
 1014c00:	e0bffd05 	stb	r2,-12(fp)
 1014c04:	00000b06 	br	1014c34 <OSTaskSuspend+0xd8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
 1014c08:	008040f4 	movhi	r2,259
 1014c0c:	10977804 	addi	r2,r2,24032
 1014c10:	10800017 	ldw	r2,0(r2)
 1014c14:	10800c83 	ldbu	r2,50(r2)
 1014c18:	10c03fcc 	andi	r3,r2,255
 1014c1c:	e0bffe03 	ldbu	r2,-8(fp)
 1014c20:	1880031e 	bne	r3,r2,1014c30 <OSTaskSuspend+0xd4>
        self = OS_TRUE;
 1014c24:	00800044 	movi	r2,1
 1014c28:	e0bffd05 	stb	r2,-12(fp)
 1014c2c:	00000106 	br	1014c34 <OSTaskSuspend+0xd8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
 1014c30:	e03ffd05 	stb	zero,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 1014c34:	e0bffe03 	ldbu	r2,-8(fp)
 1014c38:	00c04174 	movhi	r3,261
 1014c3c:	18e6e404 	addi	r3,r3,-25712
 1014c40:	1085883a 	add	r2,r2,r2
 1014c44:	1085883a 	add	r2,r2,r2
 1014c48:	10c5883a 	add	r2,r2,r3
 1014c4c:	10800017 	ldw	r2,0(r2)
 1014c50:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
 1014c54:	e0bffc17 	ldw	r2,-16(fp)
 1014c58:	1004c03a 	cmpne	r2,r2,zero
 1014c5c:	1000071e 	bne	r2,zero,1014c7c <OSTaskSuspend+0x120>
 1014c60:	e0bffa17 	ldw	r2,-24(fp)
 1014c64:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1014c68:	e0bff817 	ldw	r2,-32(fp)
 1014c6c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
 1014c70:	00801204 	movi	r2,72
 1014c74:	e0bfff15 	stw	r2,-4(fp)
 1014c78:	00004006 	br	1014d7c <OSTaskSuspend+0x220>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
 1014c7c:	e0bffc17 	ldw	r2,-16(fp)
 1014c80:	10800058 	cmpnei	r2,r2,1
 1014c84:	1000071e 	bne	r2,zero,1014ca4 <OSTaskSuspend+0x148>
 1014c88:	e0bffa17 	ldw	r2,-24(fp)
 1014c8c:	e0bff715 	stw	r2,-36(fp)
 1014c90:	e0bff717 	ldw	r2,-36(fp)
 1014c94:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 1014c98:	008010c4 	movi	r2,67
 1014c9c:	e0bfff15 	stw	r2,-4(fp)
 1014ca0:	00003606 	br	1014d7c <OSTaskSuspend+0x220>
    }
    y            = ptcb->OSTCBY;
 1014ca4:	e0bffc17 	ldw	r2,-16(fp)
 1014ca8:	10800d03 	ldbu	r2,52(r2)
 1014cac:	e0bffb05 	stb	r2,-20(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
 1014cb0:	e13ffb03 	ldbu	r4,-20(fp)
 1014cb4:	e0fffb03 	ldbu	r3,-20(fp)
 1014cb8:	008040f4 	movhi	r2,259
 1014cbc:	10977544 	addi	r2,r2,24021
 1014cc0:	10c5883a 	add	r2,r2,r3
 1014cc4:	10800003 	ldbu	r2,0(r2)
 1014cc8:	1007883a 	mov	r3,r2
 1014ccc:	e0bffc17 	ldw	r2,-16(fp)
 1014cd0:	10800d43 	ldbu	r2,53(r2)
 1014cd4:	0084303a 	nor	r2,zero,r2
 1014cd8:	1884703a 	and	r2,r3,r2
 1014cdc:	1007883a 	mov	r3,r2
 1014ce0:	008040f4 	movhi	r2,259
 1014ce4:	10977544 	addi	r2,r2,24021
 1014ce8:	1105883a 	add	r2,r2,r4
 1014cec:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
 1014cf0:	e0fffb03 	ldbu	r3,-20(fp)
 1014cf4:	008040f4 	movhi	r2,259
 1014cf8:	10977544 	addi	r2,r2,24021
 1014cfc:	10c5883a 	add	r2,r2,r3
 1014d00:	10800003 	ldbu	r2,0(r2)
 1014d04:	10803fcc 	andi	r2,r2,255
 1014d08:	1004c03a 	cmpne	r2,r2,zero
 1014d0c:	10000c1e 	bne	r2,zero,1014d40 <OSTaskSuspend+0x1e4>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
 1014d10:	e0bffc17 	ldw	r2,-16(fp)
 1014d14:	10800d83 	ldbu	r2,54(r2)
 1014d18:	0084303a 	nor	r2,zero,r2
 1014d1c:	1007883a 	mov	r3,r2
 1014d20:	008040f4 	movhi	r2,259
 1014d24:	10977504 	addi	r2,r2,24020
 1014d28:	10800003 	ldbu	r2,0(r2)
 1014d2c:	1884703a 	and	r2,r3,r2
 1014d30:	1007883a 	mov	r3,r2
 1014d34:	008040f4 	movhi	r2,259
 1014d38:	10977504 	addi	r2,r2,24020
 1014d3c:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
 1014d40:	e0bffc17 	ldw	r2,-16(fp)
 1014d44:	10800c03 	ldbu	r2,48(r2)
 1014d48:	10800214 	ori	r2,r2,8
 1014d4c:	1007883a 	mov	r3,r2
 1014d50:	e0bffc17 	ldw	r2,-16(fp)
 1014d54:	10c00c05 	stb	r3,48(r2)
 1014d58:	e0bffa17 	ldw	r2,-24(fp)
 1014d5c:	e0bff615 	stw	r2,-40(fp)
 1014d60:	e0bff617 	ldw	r2,-40(fp)
 1014d64:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
 1014d68:	e0bffd03 	ldbu	r2,-12(fp)
 1014d6c:	10800058 	cmpnei	r2,r2,1
 1014d70:	1000011e 	bne	r2,zero,1014d78 <OSTaskSuspend+0x21c>
        OS_Sched();                                             /* Find new highest priority task      */
 1014d74:	100e9440 	call	100e944 <OS_Sched>
    }
    return (OS_ERR_NONE);
 1014d78:	e03fff15 	stw	zero,-4(fp)
 1014d7c:	e0bfff17 	ldw	r2,-4(fp)
}
 1014d80:	e037883a 	mov	sp,fp
 1014d84:	dfc00117 	ldw	ra,4(sp)
 1014d88:	df000017 	ldw	fp,0(sp)
 1014d8c:	dec00204 	addi	sp,sp,8
 1014d90:	f800283a 	ret

01014d94 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
 1014d94:	f811883a 	mov	r8,ra
 1014d98:	100c3d80 	call	100c3d8 <_mcount>
 1014d9c:	403f883a 	mov	ra,r8
 1014da0:	defff504 	addi	sp,sp,-44
 1014da4:	dfc00a15 	stw	ra,40(sp)
 1014da8:	df000915 	stw	fp,36(sp)
 1014dac:	df000904 	addi	fp,sp,36
 1014db0:	e17ffe15 	stw	r5,-8(fp)
 1014db4:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1014db8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
 1014dbc:	e0bffd03 	ldbu	r2,-12(fp)
 1014dc0:	10800570 	cmpltui	r2,r2,21
 1014dc4:	1000061e 	bne	r2,zero,1014de0 <OSTaskQuery+0x4c>
        if (prio != OS_PRIO_SELF) {
 1014dc8:	e0bffd03 	ldbu	r2,-12(fp)
 1014dcc:	10803fe0 	cmpeqi	r2,r2,255
 1014dd0:	1000031e 	bne	r2,zero,1014de0 <OSTaskQuery+0x4c>
            return (OS_ERR_PRIO_INVALID);
 1014dd4:	00800a84 	movi	r2,42
 1014dd8:	e0bfff15 	stw	r2,-4(fp)
 1014ddc:	00003b06 	br	1014ecc <OSTaskQuery+0x138>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
 1014de0:	e0bffe17 	ldw	r2,-8(fp)
 1014de4:	1004c03a 	cmpne	r2,r2,zero
 1014de8:	1000031e 	bne	r2,zero,1014df8 <OSTaskQuery+0x64>
        return (OS_ERR_PDATA_NULL);
 1014dec:	00800244 	movi	r2,9
 1014df0:	e0bfff15 	stw	r2,-4(fp)
 1014df4:	00003506 	br	1014ecc <OSTaskQuery+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1014df8:	0005303a 	rdctl	r2,status
 1014dfc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1014e00:	e0fffa17 	ldw	r3,-24(fp)
 1014e04:	00bfff84 	movi	r2,-2
 1014e08:	1884703a 	and	r2,r3,r2
 1014e0c:	1001703a 	wrctl	status,r2
  
  return context;
 1014e10:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 1014e14:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
 1014e18:	e0bffd03 	ldbu	r2,-12(fp)
 1014e1c:	10803fd8 	cmpnei	r2,r2,255
 1014e20:	1000051e 	bne	r2,zero,1014e38 <OSTaskQuery+0xa4>
        prio = OSTCBCur->OSTCBPrio;
 1014e24:	008040f4 	movhi	r2,259
 1014e28:	10977804 	addi	r2,r2,24032
 1014e2c:	10800017 	ldw	r2,0(r2)
 1014e30:	10800c83 	ldbu	r2,50(r2)
 1014e34:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 1014e38:	e0bffd03 	ldbu	r2,-12(fp)
 1014e3c:	00c04174 	movhi	r3,261
 1014e40:	18e6e404 	addi	r3,r3,-25712
 1014e44:	1085883a 	add	r2,r2,r2
 1014e48:	1085883a 	add	r2,r2,r2
 1014e4c:	10c5883a 	add	r2,r2,r3
 1014e50:	10800017 	ldw	r2,0(r2)
 1014e54:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
 1014e58:	e0bffc17 	ldw	r2,-16(fp)
 1014e5c:	1004c03a 	cmpne	r2,r2,zero
 1014e60:	1000071e 	bne	r2,zero,1014e80 <OSTaskQuery+0xec>
 1014e64:	e0bffb17 	ldw	r2,-20(fp)
 1014e68:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1014e6c:	e0bff917 	ldw	r2,-28(fp)
 1014e70:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
 1014e74:	00800a44 	movi	r2,41
 1014e78:	e0bfff15 	stw	r2,-4(fp)
 1014e7c:	00001306 	br	1014ecc <OSTaskQuery+0x138>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
 1014e80:	e0bffc17 	ldw	r2,-16(fp)
 1014e84:	10800058 	cmpnei	r2,r2,1
 1014e88:	1000071e 	bne	r2,zero,1014ea8 <OSTaskQuery+0x114>
 1014e8c:	e0bffb17 	ldw	r2,-20(fp)
 1014e90:	e0bff815 	stw	r2,-32(fp)
 1014e94:	e0bff817 	ldw	r2,-32(fp)
 1014e98:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 1014e9c:	008010c4 	movi	r2,67
 1014ea0:	e0bfff15 	stw	r2,-4(fp)
 1014ea4:	00000906 	br	1014ecc <OSTaskQuery+0x138>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
 1014ea8:	e13ffe17 	ldw	r4,-8(fp)
 1014eac:	e17ffc17 	ldw	r5,-16(fp)
 1014eb0:	01801b04 	movi	r6,108
 1014eb4:	100e8cc0 	call	100e8cc <OS_MemCopy>
 1014eb8:	e0bffb17 	ldw	r2,-20(fp)
 1014ebc:	e0bff715 	stw	r2,-36(fp)
 1014ec0:	e0bff717 	ldw	r2,-36(fp)
 1014ec4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 1014ec8:	e03fff15 	stw	zero,-4(fp)
 1014ecc:	e0bfff17 	ldw	r2,-4(fp)
}
 1014ed0:	e037883a 	mov	sp,fp
 1014ed4:	dfc00117 	ldw	ra,4(sp)
 1014ed8:	df000017 	ldw	fp,0(sp)
 1014edc:	dec00204 	addi	sp,sp,8
 1014ee0:	f800283a 	ret

01014ee4 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
 1014ee4:	f811883a 	mov	r8,ra
 1014ee8:	100c3d80 	call	100c3d8 <_mcount>
 1014eec:	403f883a 	mov	ra,r8
 1014ef0:	defffc04 	addi	sp,sp,-16
 1014ef4:	df000315 	stw	fp,12(sp)
 1014ef8:	df000304 	addi	fp,sp,12
 1014efc:	e13ffd15 	stw	r4,-12(fp)
 1014f00:	e17ffe15 	stw	r5,-8(fp)
 1014f04:	e1bfff0d 	sth	r6,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
 1014f08:	e0bfff0b 	ldhu	r2,-4(fp)
 1014f0c:	1080004c 	andi	r2,r2,1
 1014f10:	10803fcc 	andi	r2,r2,255
 1014f14:	1005003a 	cmpeq	r2,r2,zero
 1014f18:	1000101e 	bne	r2,zero,1014f5c <OS_TaskStkClr+0x78>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
 1014f1c:	e0bfff0b 	ldhu	r2,-4(fp)
 1014f20:	1080008c 	andi	r2,r2,2
 1014f24:	1005003a 	cmpeq	r2,r2,zero
 1014f28:	10000c1e 	bne	r2,zero,1014f5c <OS_TaskStkClr+0x78>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 1014f2c:	00000806 	br	1014f50 <OS_TaskStkClr+0x6c>
                size--;
 1014f30:	e0bffe17 	ldw	r2,-8(fp)
 1014f34:	10bfffc4 	addi	r2,r2,-1
 1014f38:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
 1014f3c:	e0bffd17 	ldw	r2,-12(fp)
 1014f40:	10000015 	stw	zero,0(r2)
 1014f44:	e0bffd17 	ldw	r2,-12(fp)
 1014f48:	10800104 	addi	r2,r2,4
 1014f4c:	e0bffd15 	stw	r2,-12(fp)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 1014f50:	e0bffe17 	ldw	r2,-8(fp)
 1014f54:	1004c03a 	cmpne	r2,r2,zero
 1014f58:	103ff51e 	bne	r2,zero,1014f30 <OS_TaskStkClr+0x4c>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
 1014f5c:	e037883a 	mov	sp,fp
 1014f60:	df000017 	ldw	fp,0(sp)
 1014f64:	dec00104 	addi	sp,sp,4
 1014f68:	f800283a 	ret

01014f6c <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
 1014f6c:	f811883a 	mov	r8,ra
 1014f70:	100c3d80 	call	100c3d8 <_mcount>
 1014f74:	403f883a 	mov	ra,r8
 1014f78:	defff904 	addi	sp,sp,-28
 1014f7c:	dfc00615 	stw	ra,24(sp)
 1014f80:	df000515 	stw	fp,20(sp)
 1014f84:	df000504 	addi	fp,sp,20
 1014f88:	e13fff0d 	sth	r4,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1014f8c:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 1014f90:	008040f4 	movhi	r2,259
 1014f94:	10977704 	addi	r2,r2,24028
 1014f98:	10800003 	ldbu	r2,0(r2)
 1014f9c:	10803fcc 	andi	r2,r2,255
 1014fa0:	1004c03a 	cmpne	r2,r2,zero
 1014fa4:	1000421e 	bne	r2,zero,10150b0 <OSTimeDly+0x144>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
 1014fa8:	e0bfff0b 	ldhu	r2,-4(fp)
 1014fac:	1005003a 	cmpeq	r2,r2,zero
 1014fb0:	10003f1e 	bne	r2,zero,10150b0 <OSTimeDly+0x144>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1014fb4:	0005303a 	rdctl	r2,status
 1014fb8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1014fbc:	e0fffc17 	ldw	r3,-16(fp)
 1014fc0:	00bfff84 	movi	r2,-2
 1014fc4:	1884703a 	and	r2,r3,r2
 1014fc8:	1001703a 	wrctl	status,r2
  
  return context;
 1014fcc:	e0bffc17 	ldw	r2,-16(fp)
        OS_ENTER_CRITICAL();
 1014fd0:	e0bffd15 	stw	r2,-12(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
 1014fd4:	008040f4 	movhi	r2,259
 1014fd8:	10977804 	addi	r2,r2,24032
 1014fdc:	10800017 	ldw	r2,0(r2)
 1014fe0:	10800d03 	ldbu	r2,52(r2)
 1014fe4:	e0bffe05 	stb	r2,-8(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 1014fe8:	e13ffe03 	ldbu	r4,-8(fp)
 1014fec:	e0fffe03 	ldbu	r3,-8(fp)
 1014ff0:	008040f4 	movhi	r2,259
 1014ff4:	10977544 	addi	r2,r2,24021
 1014ff8:	10c5883a 	add	r2,r2,r3
 1014ffc:	10800003 	ldbu	r2,0(r2)
 1015000:	1007883a 	mov	r3,r2
 1015004:	008040f4 	movhi	r2,259
 1015008:	10977804 	addi	r2,r2,24032
 101500c:	10800017 	ldw	r2,0(r2)
 1015010:	10800d43 	ldbu	r2,53(r2)
 1015014:	0084303a 	nor	r2,zero,r2
 1015018:	1884703a 	and	r2,r3,r2
 101501c:	1007883a 	mov	r3,r2
 1015020:	008040f4 	movhi	r2,259
 1015024:	10977544 	addi	r2,r2,24021
 1015028:	1105883a 	add	r2,r2,r4
 101502c:	10c00005 	stb	r3,0(r2)
        if (OSRdyTbl[y] == 0) {
 1015030:	e0fffe03 	ldbu	r3,-8(fp)
 1015034:	008040f4 	movhi	r2,259
 1015038:	10977544 	addi	r2,r2,24021
 101503c:	10c5883a 	add	r2,r2,r3
 1015040:	10800003 	ldbu	r2,0(r2)
 1015044:	10803fcc 	andi	r2,r2,255
 1015048:	1004c03a 	cmpne	r2,r2,zero
 101504c:	10000e1e 	bne	r2,zero,1015088 <OSTimeDly+0x11c>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 1015050:	008040f4 	movhi	r2,259
 1015054:	10977804 	addi	r2,r2,24032
 1015058:	10800017 	ldw	r2,0(r2)
 101505c:	10800d83 	ldbu	r2,54(r2)
 1015060:	0084303a 	nor	r2,zero,r2
 1015064:	1007883a 	mov	r3,r2
 1015068:	008040f4 	movhi	r2,259
 101506c:	10977504 	addi	r2,r2,24020
 1015070:	10800003 	ldbu	r2,0(r2)
 1015074:	1884703a 	and	r2,r3,r2
 1015078:	1007883a 	mov	r3,r2
 101507c:	008040f4 	movhi	r2,259
 1015080:	10977504 	addi	r2,r2,24020
 1015084:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
 1015088:	008040f4 	movhi	r2,259
 101508c:	10977804 	addi	r2,r2,24032
 1015090:	10c00017 	ldw	r3,0(r2)
 1015094:	e0bfff0b 	ldhu	r2,-4(fp)
 1015098:	18800b8d 	sth	r2,46(r3)
 101509c:	e0bffd17 	ldw	r2,-12(fp)
 10150a0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10150a4:	e0bffb17 	ldw	r2,-20(fp)
 10150a8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
 10150ac:	100e9440 	call	100e944 <OS_Sched>
    }
}
 10150b0:	e037883a 	mov	sp,fp
 10150b4:	dfc00117 	ldw	ra,4(sp)
 10150b8:	df000017 	ldw	fp,0(sp)
 10150bc:	dec00204 	addi	sp,sp,8
 10150c0:	f800283a 	ret

010150c4 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
 10150c4:	f811883a 	mov	r8,ra
 10150c8:	100c3d80 	call	100c3d8 <_mcount>
 10150cc:	403f883a 	mov	ra,r8
 10150d0:	defff504 	addi	sp,sp,-44
 10150d4:	dfc00a15 	stw	ra,40(sp)
 10150d8:	df000915 	stw	fp,36(sp)
 10150dc:	dc400815 	stw	r17,32(sp)
 10150e0:	dc000715 	stw	r16,28(sp)
 10150e4:	df000704 	addi	fp,sp,28
 10150e8:	e13ffb05 	stb	r4,-20(fp)
 10150ec:	e17ffc05 	stb	r5,-16(fp)
 10150f0:	e1bffd05 	stb	r6,-12(fp)
 10150f4:	e1fffe0d 	sth	r7,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 10150f8:	008040f4 	movhi	r2,259
 10150fc:	10977704 	addi	r2,r2,24028
 1015100:	10800003 	ldbu	r2,0(r2)
 1015104:	10803fcc 	andi	r2,r2,255
 1015108:	1005003a 	cmpeq	r2,r2,zero
 101510c:	1000031e 	bne	r2,zero,101511c <OSTimeDlyHMSM+0x58>
        return (OS_ERR_TIME_DLY_ISR);
 1015110:	00801544 	movi	r2,85
 1015114:	e0bfff15 	stw	r2,-4(fp)
 1015118:	00007b06 	br	1015308 <OSTimeDlyHMSM+0x244>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
 101511c:	e0bffb03 	ldbu	r2,-20(fp)
 1015120:	1004c03a 	cmpne	r2,r2,zero
 1015124:	10000c1e 	bne	r2,zero,1015158 <OSTimeDlyHMSM+0x94>
        if (minutes == 0) {
 1015128:	e0bffc03 	ldbu	r2,-16(fp)
 101512c:	1004c03a 	cmpne	r2,r2,zero
 1015130:	1000091e 	bne	r2,zero,1015158 <OSTimeDlyHMSM+0x94>
            if (seconds == 0) {
 1015134:	e0bffd03 	ldbu	r2,-12(fp)
 1015138:	1004c03a 	cmpne	r2,r2,zero
 101513c:	1000061e 	bne	r2,zero,1015158 <OSTimeDlyHMSM+0x94>
                if (ms == 0) {
 1015140:	e0bffe0b 	ldhu	r2,-8(fp)
 1015144:	1004c03a 	cmpne	r2,r2,zero
 1015148:	1000031e 	bne	r2,zero,1015158 <OSTimeDlyHMSM+0x94>
                    return (OS_ERR_TIME_ZERO_DLY);
 101514c:	00801504 	movi	r2,84
 1015150:	e0bfff15 	stw	r2,-4(fp)
 1015154:	00006c06 	br	1015308 <OSTimeDlyHMSM+0x244>
                }
            }
        }
    }
    if (minutes > 59) {
 1015158:	e0bffc03 	ldbu	r2,-16(fp)
 101515c:	10800f30 	cmpltui	r2,r2,60
 1015160:	1000031e 	bne	r2,zero,1015170 <OSTimeDlyHMSM+0xac>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
 1015164:	00801444 	movi	r2,81
 1015168:	e0bfff15 	stw	r2,-4(fp)
 101516c:	00006606 	br	1015308 <OSTimeDlyHMSM+0x244>
    }
    if (seconds > 59) {
 1015170:	e0bffd03 	ldbu	r2,-12(fp)
 1015174:	10800f30 	cmpltui	r2,r2,60
 1015178:	1000031e 	bne	r2,zero,1015188 <OSTimeDlyHMSM+0xc4>
        return (OS_ERR_TIME_INVALID_SECONDS);
 101517c:	00801484 	movi	r2,82
 1015180:	e0bfff15 	stw	r2,-4(fp)
 1015184:	00006006 	br	1015308 <OSTimeDlyHMSM+0x244>
    }
    if (ms > 999) {
 1015188:	e0bffe0b 	ldhu	r2,-8(fp)
 101518c:	1080fa30 	cmpltui	r2,r2,1000
 1015190:	1000031e 	bne	r2,zero,10151a0 <OSTimeDlyHMSM+0xdc>
        return (OS_ERR_TIME_INVALID_MS);
 1015194:	008014c4 	movi	r2,83
 1015198:	e0bfff15 	stw	r2,-4(fp)
 101519c:	00005a06 	br	1015308 <OSTimeDlyHMSM+0x244>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
 10151a0:	e13ffb03 	ldbu	r4,-20(fp)
 10151a4:	01438404 	movi	r5,3600
 10151a8:	10026680 	call	1002668 <__mulsi3>
 10151ac:	1021883a 	mov	r16,r2
 10151b0:	e13ffc03 	ldbu	r4,-16(fp)
 10151b4:	01400f04 	movi	r5,60
 10151b8:	10026680 	call	1002668 <__mulsi3>
 10151bc:	8087883a 	add	r3,r16,r2
 10151c0:	e0bffd03 	ldbu	r2,-12(fp)
 10151c4:	1889883a 	add	r4,r3,r2
 10151c8:	10023400 	call	1002340 <__floatunsidf>
 10151cc:	100b883a 	mov	r5,r2
 10151d0:	180d883a 	mov	r6,r3
 10151d4:	2809883a 	mov	r4,r5
 10151d8:	300b883a 	mov	r5,r6
 10151dc:	000d883a 	mov	r6,zero
 10151e0:	01d023f4 	movhi	r7,16527
 10151e4:	39d00004 	addi	r7,r7,16384
 10151e8:	1001d0c0 	call	1001d0c <__muldf3>
 10151ec:	1009883a 	mov	r4,r2
 10151f0:	180b883a 	mov	r5,r3
 10151f4:	2021883a 	mov	r16,r4
 10151f8:	2823883a 	mov	r17,r5
 10151fc:	e13ffe0b 	ldhu	r4,-8(fp)
 1015200:	10023400 	call	1002340 <__floatunsidf>
 1015204:	100b883a 	mov	r5,r2
 1015208:	180d883a 	mov	r6,r3
 101520c:	2809883a 	mov	r4,r5
 1015210:	300b883a 	mov	r5,r6
 1015214:	000d883a 	mov	r6,zero
 1015218:	01cff834 	movhi	r7,16352
 101521c:	1001c8c0 	call	1001c8c <__adddf3>
 1015220:	1009883a 	mov	r4,r2
 1015224:	180b883a 	mov	r5,r3
 1015228:	2005883a 	mov	r2,r4
 101522c:	2807883a 	mov	r3,r5
 1015230:	1009883a 	mov	r4,r2
 1015234:	180b883a 	mov	r5,r3
 1015238:	000d883a 	mov	r6,zero
 101523c:	01d023f4 	movhi	r7,16527
 1015240:	39d00004 	addi	r7,r7,16384
 1015244:	1001d0c0 	call	1001d0c <__muldf3>
 1015248:	1009883a 	mov	r4,r2
 101524c:	180b883a 	mov	r5,r3
 1015250:	2005883a 	mov	r2,r4
 1015254:	2807883a 	mov	r3,r5
 1015258:	1009883a 	mov	r4,r2
 101525c:	180b883a 	mov	r5,r3
 1015260:	000d883a 	mov	r6,zero
 1015264:	01d023f4 	movhi	r7,16527
 1015268:	39d00004 	addi	r7,r7,16384
 101526c:	10020dc0 	call	10020dc <__divdf3>
 1015270:	1009883a 	mov	r4,r2
 1015274:	180b883a 	mov	r5,r3
 1015278:	2005883a 	mov	r2,r4
 101527c:	2807883a 	mov	r3,r5
 1015280:	8009883a 	mov	r4,r16
 1015284:	880b883a 	mov	r5,r17
 1015288:	100d883a 	mov	r6,r2
 101528c:	180f883a 	mov	r7,r3
 1015290:	1001c8c0 	call	1001c8c <__adddf3>
 1015294:	1009883a 	mov	r4,r2
 1015298:	180b883a 	mov	r5,r3
 101529c:	2005883a 	mov	r2,r4
 10152a0:	2807883a 	mov	r3,r5
 10152a4:	1009883a 	mov	r4,r2
 10152a8:	180b883a 	mov	r5,r3
 10152ac:	1019c500 	call	1019c50 <__fixunsdfsi>
 10152b0:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
 10152b4:	e0bffa17 	ldw	r2,-24(fp)
 10152b8:	1004d43a 	srli	r2,r2,16
 10152bc:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
 10152c0:	e0bffa17 	ldw	r2,-24(fp)
 10152c4:	10bfffcc 	andi	r2,r2,65535
 10152c8:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
 10152cc:	e0bffa17 	ldw	r2,-24(fp)
 10152d0:	113fffcc 	andi	r4,r2,65535
 10152d4:	1014f6c0 	call	1014f6c <OSTimeDly>
    while (loops > 0) {
 10152d8:	00000706 	br	10152f8 <OSTimeDlyHMSM+0x234>
        OSTimeDly((INT16U)32768u);
 10152dc:	01200014 	movui	r4,32768
 10152e0:	1014f6c0 	call	1014f6c <OSTimeDly>
        OSTimeDly((INT16U)32768u);
 10152e4:	01200014 	movui	r4,32768
 10152e8:	1014f6c0 	call	1014f6c <OSTimeDly>
        loops--;
 10152ec:	e0bff90b 	ldhu	r2,-28(fp)
 10152f0:	10bfffc4 	addi	r2,r2,-1
 10152f4:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
 10152f8:	e0bff90b 	ldhu	r2,-28(fp)
 10152fc:	1004c03a 	cmpne	r2,r2,zero
 1015300:	103ff61e 	bne	r2,zero,10152dc <OSTimeDlyHMSM+0x218>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
 1015304:	e03fff15 	stw	zero,-4(fp)
 1015308:	e0bfff17 	ldw	r2,-4(fp)
}
 101530c:	e037883a 	mov	sp,fp
 1015310:	dfc00317 	ldw	ra,12(sp)
 1015314:	df000217 	ldw	fp,8(sp)
 1015318:	dc400117 	ldw	r17,4(sp)
 101531c:	dc000017 	ldw	r16,0(sp)
 1015320:	dec00404 	addi	sp,sp,16
 1015324:	f800283a 	ret

01015328 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
 1015328:	f811883a 	mov	r8,ra
 101532c:	100c3d80 	call	100c3d8 <_mcount>
 1015330:	403f883a 	mov	ra,r8
 1015334:	defff404 	addi	sp,sp,-48
 1015338:	dfc00b15 	stw	ra,44(sp)
 101533c:	df000a15 	stw	fp,40(sp)
 1015340:	df000a04 	addi	fp,sp,40
 1015344:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 1015348:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
 101534c:	e0bffe03 	ldbu	r2,-8(fp)
 1015350:	10800530 	cmpltui	r2,r2,20
 1015354:	1000031e 	bne	r2,zero,1015364 <OSTimeDlyResume+0x3c>
        return (OS_ERR_PRIO_INVALID);
 1015358:	00800a84 	movi	r2,42
 101535c:	e0bfff15 	stw	r2,-4(fp)
 1015360:	00007206 	br	101552c <OSTimeDlyResume+0x204>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1015364:	0005303a 	rdctl	r2,status
 1015368:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101536c:	e0fffb17 	ldw	r3,-20(fp)
 1015370:	00bfff84 	movi	r2,-2
 1015374:	1884703a 	and	r2,r3,r2
 1015378:	1001703a 	wrctl	status,r2
  
  return context;
 101537c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 1015380:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
 1015384:	e0bffe03 	ldbu	r2,-8(fp)
 1015388:	00c04174 	movhi	r3,261
 101538c:	18e6e404 	addi	r3,r3,-25712
 1015390:	1085883a 	add	r2,r2,r2
 1015394:	1085883a 	add	r2,r2,r2
 1015398:	10c5883a 	add	r2,r2,r3
 101539c:	10800017 	ldw	r2,0(r2)
 10153a0:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {
 10153a4:	e0bffd17 	ldw	r2,-12(fp)
 10153a8:	1004c03a 	cmpne	r2,r2,zero
 10153ac:	1000071e 	bne	r2,zero,10153cc <OSTimeDlyResume+0xa4>
 10153b0:	e0bffc17 	ldw	r2,-16(fp)
 10153b4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10153b8:	e0bffa17 	ldw	r2,-24(fp)
 10153bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 10153c0:	008010c4 	movi	r2,67
 10153c4:	e0bfff15 	stw	r2,-4(fp)
 10153c8:	00005806 	br	101552c <OSTimeDlyResume+0x204>
    }
    if (ptcb == OS_TCB_RESERVED) {
 10153cc:	e0bffd17 	ldw	r2,-12(fp)
 10153d0:	10800058 	cmpnei	r2,r2,1
 10153d4:	1000071e 	bne	r2,zero,10153f4 <OSTimeDlyResume+0xcc>
 10153d8:	e0bffc17 	ldw	r2,-16(fp)
 10153dc:	e0bff915 	stw	r2,-28(fp)
 10153e0:	e0bff917 	ldw	r2,-28(fp)
 10153e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 10153e8:	008010c4 	movi	r2,67
 10153ec:	e0bfff15 	stw	r2,-4(fp)
 10153f0:	00004e06 	br	101552c <OSTimeDlyResume+0x204>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
 10153f4:	e0bffd17 	ldw	r2,-12(fp)
 10153f8:	10800b8b 	ldhu	r2,46(r2)
 10153fc:	10bfffcc 	andi	r2,r2,65535
 1015400:	1004c03a 	cmpne	r2,r2,zero
 1015404:	1000071e 	bne	r2,zero,1015424 <OSTimeDlyResume+0xfc>
 1015408:	e0bffc17 	ldw	r2,-16(fp)
 101540c:	e0bff815 	stw	r2,-32(fp)
 1015410:	e0bff817 	ldw	r2,-32(fp)
 1015414:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
 1015418:	00801404 	movi	r2,80
 101541c:	e0bfff15 	stw	r2,-4(fp)
 1015420:	00004206 	br	101552c <OSTimeDlyResume+0x204>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
 1015424:	e0bffd17 	ldw	r2,-12(fp)
 1015428:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 101542c:	e0bffd17 	ldw	r2,-12(fp)
 1015430:	10800c03 	ldbu	r2,48(r2)
 1015434:	10803fcc 	andi	r2,r2,255
 1015438:	10800dcc 	andi	r2,r2,55
 101543c:	1005003a 	cmpeq	r2,r2,zero
 1015440:	10000b1e 	bne	r2,zero,1015470 <OSTimeDlyResume+0x148>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
 1015444:	e0bffd17 	ldw	r2,-12(fp)
 1015448:	10c00c03 	ldbu	r3,48(r2)
 101544c:	00bff204 	movi	r2,-56
 1015450:	1884703a 	and	r2,r3,r2
 1015454:	1007883a 	mov	r3,r2
 1015458:	e0bffd17 	ldw	r2,-12(fp)
 101545c:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
 1015460:	e0fffd17 	ldw	r3,-12(fp)
 1015464:	00800044 	movi	r2,1
 1015468:	18800c45 	stb	r2,49(r3)
 101546c:	00000206 	br	1015478 <OSTimeDlyResume+0x150>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
 1015470:	e0bffd17 	ldw	r2,-12(fp)
 1015474:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
 1015478:	e0bffd17 	ldw	r2,-12(fp)
 101547c:	10800c03 	ldbu	r2,48(r2)
 1015480:	10803fcc 	andi	r2,r2,255
 1015484:	1080020c 	andi	r2,r2,8
 1015488:	1004c03a 	cmpne	r2,r2,zero
 101548c:	1000221e 	bne	r2,zero,1015518 <OSTimeDlyResume+0x1f0>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
 1015490:	e0bffd17 	ldw	r2,-12(fp)
 1015494:	10c00d83 	ldbu	r3,54(r2)
 1015498:	008040f4 	movhi	r2,259
 101549c:	10977504 	addi	r2,r2,24020
 10154a0:	10800003 	ldbu	r2,0(r2)
 10154a4:	1884b03a 	or	r2,r3,r2
 10154a8:	1007883a 	mov	r3,r2
 10154ac:	008040f4 	movhi	r2,259
 10154b0:	10977504 	addi	r2,r2,24020
 10154b4:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 10154b8:	e0bffd17 	ldw	r2,-12(fp)
 10154bc:	10800d03 	ldbu	r2,52(r2)
 10154c0:	11003fcc 	andi	r4,r2,255
 10154c4:	e0bffd17 	ldw	r2,-12(fp)
 10154c8:	10800d03 	ldbu	r2,52(r2)
 10154cc:	10c03fcc 	andi	r3,r2,255
 10154d0:	008040f4 	movhi	r2,259
 10154d4:	10977544 	addi	r2,r2,24021
 10154d8:	10c5883a 	add	r2,r2,r3
 10154dc:	10c00003 	ldbu	r3,0(r2)
 10154e0:	e0bffd17 	ldw	r2,-12(fp)
 10154e4:	10800d43 	ldbu	r2,53(r2)
 10154e8:	1884b03a 	or	r2,r3,r2
 10154ec:	1007883a 	mov	r3,r2
 10154f0:	008040f4 	movhi	r2,259
 10154f4:	10977544 	addi	r2,r2,24021
 10154f8:	1105883a 	add	r2,r2,r4
 10154fc:	10c00005 	stb	r3,0(r2)
 1015500:	e0bffc17 	ldw	r2,-16(fp)
 1015504:	e0bff715 	stw	r2,-36(fp)
 1015508:	e0bff717 	ldw	r2,-36(fp)
 101550c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
 1015510:	100e9440 	call	100e944 <OS_Sched>
 1015514:	00000406 	br	1015528 <OSTimeDlyResume+0x200>
 1015518:	e0bffc17 	ldw	r2,-16(fp)
 101551c:	e0bff615 	stw	r2,-40(fp)
 1015520:	e0bff617 	ldw	r2,-40(fp)
 1015524:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
 1015528:	e03fff15 	stw	zero,-4(fp)
 101552c:	e0bfff17 	ldw	r2,-4(fp)
}
 1015530:	e037883a 	mov	sp,fp
 1015534:	dfc00117 	ldw	ra,4(sp)
 1015538:	df000017 	ldw	fp,0(sp)
 101553c:	dec00204 	addi	sp,sp,8
 1015540:	f800283a 	ret

01015544 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
 1015544:	f811883a 	mov	r8,ra
 1015548:	100c3d80 	call	100c3d8 <_mcount>
 101554c:	403f883a 	mov	ra,r8
 1015550:	defffb04 	addi	sp,sp,-20
 1015554:	df000415 	stw	fp,16(sp)
 1015558:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 101555c:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1015560:	0005303a 	rdctl	r2,status
 1015564:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1015568:	e0fffd17 	ldw	r3,-12(fp)
 101556c:	00bfff84 	movi	r2,-2
 1015570:	1884703a 	and	r2,r3,r2
 1015574:	1001703a 	wrctl	status,r2
  
  return context;
 1015578:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 101557c:	e0bffe15 	stw	r2,-8(fp)
    ticks = OSTime;
 1015580:	008040f4 	movhi	r2,259
 1015584:	10977a04 	addi	r2,r2,24040
 1015588:	10800017 	ldw	r2,0(r2)
 101558c:	e0bfff15 	stw	r2,-4(fp)
 1015590:	e0bffe17 	ldw	r2,-8(fp)
 1015594:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1015598:	e0bffc17 	ldw	r2,-16(fp)
 101559c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
 10155a0:	e0bfff17 	ldw	r2,-4(fp)
}
 10155a4:	e037883a 	mov	sp,fp
 10155a8:	df000017 	ldw	fp,0(sp)
 10155ac:	dec00104 	addi	sp,sp,4
 10155b0:	f800283a 	ret

010155b4 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
 10155b4:	f811883a 	mov	r8,ra
 10155b8:	100c3d80 	call	100c3d8 <_mcount>
 10155bc:	403f883a 	mov	ra,r8
 10155c0:	defffb04 	addi	sp,sp,-20
 10155c4:	df000415 	stw	fp,16(sp)
 10155c8:	df000404 	addi	fp,sp,16
 10155cc:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 10155d0:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10155d4:	0005303a 	rdctl	r2,status
 10155d8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10155dc:	e0fffd17 	ldw	r3,-12(fp)
 10155e0:	00bfff84 	movi	r2,-2
 10155e4:	1884703a 	and	r2,r3,r2
 10155e8:	1001703a 	wrctl	status,r2
  
  return context;
 10155ec:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 10155f0:	e0bffe15 	stw	r2,-8(fp)
    OSTime = ticks;
 10155f4:	00c040f4 	movhi	r3,259
 10155f8:	18d77a04 	addi	r3,r3,24040
 10155fc:	e0bfff17 	ldw	r2,-4(fp)
 1015600:	18800015 	stw	r2,0(r3)
 1015604:	e0bffe17 	ldw	r2,-8(fp)
 1015608:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101560c:	e0bffc17 	ldw	r2,-16(fp)
 1015610:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 1015614:	e037883a 	mov	sp,fp
 1015618:	df000017 	ldw	fp,0(sp)
 101561c:	dec00104 	addi	sp,sp,4
 1015620:	f800283a 	ret

01015624 <OSTmrCreate>:
                      INT8U            opt,
                      OS_TMR_CALLBACK  callback,
                      void            *callback_arg,
                      INT8U           *pname,
                      INT8U           *perr)
{
 1015624:	f811883a 	mov	r8,ra
 1015628:	100c3d80 	call	100c3d8 <_mcount>
 101562c:	403f883a 	mov	ra,r8
 1015630:	defff604 	addi	sp,sp,-40
 1015634:	dfc00915 	stw	ra,36(sp)
 1015638:	df000815 	stw	fp,32(sp)
 101563c:	df000804 	addi	fp,sp,32
 1015640:	e13ffa15 	stw	r4,-24(fp)
 1015644:	e17ffb15 	stw	r5,-20(fp)
 1015648:	e1fffd15 	stw	r7,-12(fp)
 101564c:	e1bffc05 	stb	r6,-16(fp)
    INT8U     len;
#endif


#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                               /* Validate arguments                                     */
 1015650:	e0800417 	ldw	r2,16(fp)
 1015654:	1004c03a 	cmpne	r2,r2,zero
 1015658:	1000021e 	bne	r2,zero,1015664 <OSTmrCreate+0x40>
        return ((OS_TMR *)0);
 101565c:	e03fff15 	stw	zero,-4(fp)
 1015660:	00006606 	br	10157fc <OSTmrCreate+0x1d8>
    }
    switch (opt) {
 1015664:	e0bffc03 	ldbu	r2,-16(fp)
 1015668:	e0bffe15 	stw	r2,-8(fp)
 101566c:	e0fffe17 	ldw	r3,-8(fp)
 1015670:	18800060 	cmpeqi	r2,r3,1
 1015674:	10000c1e 	bne	r2,zero,10156a8 <OSTmrCreate+0x84>
 1015678:	e0fffe17 	ldw	r3,-8(fp)
 101567c:	188000a0 	cmpeqi	r2,r3,2
 1015680:	1000011e 	bne	r2,zero,1015688 <OSTmrCreate+0x64>
 1015684:	00001006 	br	10156c8 <OSTmrCreate+0xa4>
        case OS_TMR_OPT_PERIODIC:
             if (period == 0) {
 1015688:	e0bffb17 	ldw	r2,-20(fp)
 101568c:	1004c03a 	cmpne	r2,r2,zero
 1015690:	1000121e 	bne	r2,zero,10156dc <OSTmrCreate+0xb8>
                 *perr = OS_ERR_TMR_INVALID_PERIOD;
 1015694:	e0c00417 	ldw	r3,16(fp)
 1015698:	00bfe0c4 	movi	r2,-125
 101569c:	18800005 	stb	r2,0(r3)
                 return ((OS_TMR *)0);
 10156a0:	e03fff15 	stw	zero,-4(fp)
 10156a4:	00005506 	br	10157fc <OSTmrCreate+0x1d8>
             }
             break;

        case OS_TMR_OPT_ONE_SHOT:
             if (dly == 0) {
 10156a8:	e0bffa17 	ldw	r2,-24(fp)
 10156ac:	1004c03a 	cmpne	r2,r2,zero
 10156b0:	10000a1e 	bne	r2,zero,10156dc <OSTmrCreate+0xb8>
                 *perr = OS_ERR_TMR_INVALID_DLY;
 10156b4:	e0c00417 	ldw	r3,16(fp)
 10156b8:	00bfe084 	movi	r2,-126
 10156bc:	18800005 	stb	r2,0(r3)
                 return ((OS_TMR *)0);
 10156c0:	e03fff15 	stw	zero,-4(fp)
 10156c4:	00004d06 	br	10157fc <OSTmrCreate+0x1d8>
             }
             break;

        default:
             *perr = OS_ERR_TMR_INVALID_OPT;
 10156c8:	e0c00417 	ldw	r3,16(fp)
 10156cc:	00bfe104 	movi	r2,-124
 10156d0:	18800005 	stb	r2,0(r3)
             return ((OS_TMR *)0);
 10156d4:	e03fff15 	stw	zero,-4(fp)
 10156d8:	00004806 	br	10157fc <OSTmrCreate+0x1d8>
    }
#endif
    if (OSIntNesting > 0) {                                 /* See if trying to call from an ISR                      */
 10156dc:	008040f4 	movhi	r2,259
 10156e0:	10977704 	addi	r2,r2,24028
 10156e4:	10800003 	ldbu	r2,0(r2)
 10156e8:	10803fcc 	andi	r2,r2,255
 10156ec:	1005003a 	cmpeq	r2,r2,zero
 10156f0:	1000051e 	bne	r2,zero,1015708 <OSTmrCreate+0xe4>
        *perr  = OS_ERR_TMR_ISR;
 10156f4:	e0c00417 	ldw	r3,16(fp)
 10156f8:	00bfe2c4 	movi	r2,-117
 10156fc:	18800005 	stb	r2,0(r3)
        return ((OS_TMR *)0);
 1015700:	e03fff15 	stw	zero,-4(fp)
 1015704:	00003d06 	br	10157fc <OSTmrCreate+0x1d8>
    }
    OSTmr_Lock();
 1015708:	101687c0 	call	101687c <OSTmr_Lock>
    ptmr = OSTmr_Alloc();                                   /* Obtain a timer from the free pool                      */
 101570c:	101622c0 	call	101622c <OSTmr_Alloc>
 1015710:	e0bff915 	stw	r2,-28(fp)
    if (ptmr == (OS_TMR *)0) {
 1015714:	e0bff917 	ldw	r2,-28(fp)
 1015718:	1004c03a 	cmpne	r2,r2,zero
 101571c:	1000061e 	bne	r2,zero,1015738 <OSTmrCreate+0x114>
        OSTmr_Unlock();
 1015720:	10168c40 	call	10168c4 <OSTmr_Unlock>
        *perr = OS_ERR_TMR_NON_AVAIL;
 1015724:	e0c00417 	ldw	r3,16(fp)
 1015728:	00bfe184 	movi	r2,-122
 101572c:	18800005 	stb	r2,0(r3)
        return ((OS_TMR *)0);
 1015730:	e03fff15 	stw	zero,-4(fp)
 1015734:	00003106 	br	10157fc <OSTmrCreate+0x1d8>
    }
    ptmr->OSTmrState       = OS_TMR_STATE_STOPPED;          /* Indicate that timer is not running yet                 */
 1015738:	e0fff917 	ldw	r3,-28(fp)
 101573c:	00800044 	movi	r2,1
 1015740:	18800c45 	stb	r2,49(r3)
    ptmr->OSTmrDly         = dly;
 1015744:	e0fff917 	ldw	r3,-28(fp)
 1015748:	e0bffa17 	ldw	r2,-24(fp)
 101574c:	18800615 	stw	r2,24(r3)
    ptmr->OSTmrPeriod      = period;
 1015750:	e0fff917 	ldw	r3,-28(fp)
 1015754:	e0bffb17 	ldw	r2,-20(fp)
 1015758:	18800715 	stw	r2,28(r3)
    ptmr->OSTmrOpt         = opt;
 101575c:	e0fff917 	ldw	r3,-28(fp)
 1015760:	e0bffc03 	ldbu	r2,-16(fp)
 1015764:	18800c05 	stb	r2,48(r3)
    ptmr->OSTmrCallback    = callback;
 1015768:	e0fff917 	ldw	r3,-28(fp)
 101576c:	e0bffd17 	ldw	r2,-12(fp)
 1015770:	18800115 	stw	r2,4(r3)
    ptmr->OSTmrCallbackArg = callback_arg;
 1015774:	e0fff917 	ldw	r3,-28(fp)
 1015778:	e0800217 	ldw	r2,8(fp)
 101577c:	18800215 	stw	r2,8(r3)
#if OS_TMR_CFG_NAME_SIZE > 0
    if (pname !=(INT8U *)0) {
 1015780:	e0800317 	ldw	r2,12(fp)
 1015784:	1005003a 	cmpeq	r2,r2,zero
 1015788:	1000171e 	bne	r2,zero,10157e8 <OSTmrCreate+0x1c4>
        len = OS_StrLen(pname);                             /* Copy timer name                                        */
 101578c:	e1000317 	ldw	r4,12(fp)
 1015790:	100eb2c0 	call	100eb2c <OS_StrLen>
 1015794:	e0bff805 	stb	r2,-32(fp)
        if (len < OS_TMR_CFG_NAME_SIZE) {
 1015798:	e0bff803 	ldbu	r2,-32(fp)
 101579c:	10800428 	cmpgeui	r2,r2,16
 10157a0:	1000051e 	bne	r2,zero,10157b8 <OSTmrCreate+0x194>
            (void)OS_StrCopy(ptmr->OSTmrName, pname);
 10157a4:	e0bff917 	ldw	r2,-28(fp)
 10157a8:	11000804 	addi	r4,r2,32
 10157ac:	e1400317 	ldw	r5,12(fp)
 10157b0:	100eaa00 	call	100eaa0 <OS_StrCopy>
 10157b4:	00000c06 	br	10157e8 <OSTmrCreate+0x1c4>
        } else {
#if OS_TMR_CFG_NAME_SIZE > 1
            ptmr->OSTmrName[0] = '#';                       /* Invalid size specified                                 */
 10157b8:	e0fff917 	ldw	r3,-28(fp)
 10157bc:	008008c4 	movi	r2,35
 10157c0:	18800805 	stb	r2,32(r3)
            ptmr->OSTmrName[1] = OS_ASCII_NUL;
 10157c4:	e0bff917 	ldw	r2,-28(fp)
 10157c8:	10000845 	stb	zero,33(r2)
#endif
            *perr              = OS_ERR_TMR_NAME_TOO_LONG;
 10157cc:	e0c00417 	ldw	r3,16(fp)
 10157d0:	00bfe304 	movi	r2,-116
 10157d4:	18800005 	stb	r2,0(r3)
            OSTmr_Unlock();
 10157d8:	10168c40 	call	10168c4 <OSTmr_Unlock>
            return (ptmr);
 10157dc:	e0bff917 	ldw	r2,-28(fp)
 10157e0:	e0bfff15 	stw	r2,-4(fp)
 10157e4:	00000506 	br	10157fc <OSTmrCreate+0x1d8>
        }
    }
#endif
    OSTmr_Unlock();
 10157e8:	10168c40 	call	10168c4 <OSTmr_Unlock>
    *perr = OS_ERR_NONE;
 10157ec:	e0800417 	ldw	r2,16(fp)
 10157f0:	10000005 	stb	zero,0(r2)
    return (ptmr);
 10157f4:	e0fff917 	ldw	r3,-28(fp)
 10157f8:	e0ffff15 	stw	r3,-4(fp)
 10157fc:	e0bfff17 	ldw	r2,-4(fp)
}
 1015800:	e037883a 	mov	sp,fp
 1015804:	dfc00117 	ldw	ra,4(sp)
 1015808:	df000017 	ldw	fp,0(sp)
 101580c:	dec00204 	addi	sp,sp,8
 1015810:	f800283a 	ret

01015814 <OSTmrDel>:
*/

#if OS_TMR_EN > 0
BOOLEAN  OSTmrDel (OS_TMR  *ptmr,
                   INT8U   *perr)
{
 1015814:	f811883a 	mov	r8,ra
 1015818:	100c3d80 	call	100c3d8 <_mcount>
 101581c:	403f883a 	mov	ra,r8
 1015820:	defffa04 	addi	sp,sp,-24
 1015824:	dfc00515 	stw	ra,20(sp)
 1015828:	df000415 	stw	fp,16(sp)
 101582c:	df000404 	addi	fp,sp,16
 1015830:	e13ffc15 	stw	r4,-16(fp)
 1015834:	e17ffd15 	stw	r5,-12(fp)
#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                               /* Validate arguments                                     */
 1015838:	e0bffd17 	ldw	r2,-12(fp)
 101583c:	1004c03a 	cmpne	r2,r2,zero
 1015840:	1000021e 	bne	r2,zero,101584c <OSTmrDel+0x38>
        return (OS_FALSE);
 1015844:	e03fff15 	stw	zero,-4(fp)
 1015848:	00004d06 	br	1015980 <OSTmrDel+0x16c>
    }
    if (ptmr == (OS_TMR *)0) {
 101584c:	e0bffc17 	ldw	r2,-16(fp)
 1015850:	1004c03a 	cmpne	r2,r2,zero
 1015854:	1000051e 	bne	r2,zero,101586c <OSTmrDel+0x58>
        *perr = OS_ERR_TMR_INVALID;
 1015858:	e0fffd17 	ldw	r3,-12(fp)
 101585c:	00bfe284 	movi	r2,-118
 1015860:	18800005 	stb	r2,0(r3)
        return (OS_FALSE);
 1015864:	e03fff15 	stw	zero,-4(fp)
 1015868:	00004506 	br	1015980 <OSTmrDel+0x16c>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {                   /* Validate timer structure                               */
 101586c:	e0bffc17 	ldw	r2,-16(fp)
 1015870:	10800003 	ldbu	r2,0(r2)
 1015874:	10803fcc 	andi	r2,r2,255
 1015878:	10801920 	cmpeqi	r2,r2,100
 101587c:	1000051e 	bne	r2,zero,1015894 <OSTmrDel+0x80>
        *perr = OS_ERR_TMR_INVALID_TYPE;
 1015880:	e0fffd17 	ldw	r3,-12(fp)
 1015884:	00bfe244 	movi	r2,-119
 1015888:	18800005 	stb	r2,0(r3)
        return (OS_FALSE);
 101588c:	e03fff15 	stw	zero,-4(fp)
 1015890:	00003b06 	br	1015980 <OSTmrDel+0x16c>
    }
    if (OSIntNesting > 0) {                                 /* See if trying to call from an ISR                      */
 1015894:	008040f4 	movhi	r2,259
 1015898:	10977704 	addi	r2,r2,24028
 101589c:	10800003 	ldbu	r2,0(r2)
 10158a0:	10803fcc 	andi	r2,r2,255
 10158a4:	1005003a 	cmpeq	r2,r2,zero
 10158a8:	1000051e 	bne	r2,zero,10158c0 <OSTmrDel+0xac>
        *perr  = OS_ERR_TMR_ISR;
 10158ac:	e0fffd17 	ldw	r3,-12(fp)
 10158b0:	00bfe2c4 	movi	r2,-117
 10158b4:	18800005 	stb	r2,0(r3)
        return (OS_FALSE);
 10158b8:	e03fff15 	stw	zero,-4(fp)
 10158bc:	00003006 	br	1015980 <OSTmrDel+0x16c>
    }
    OSTmr_Lock();
 10158c0:	101687c0 	call	101687c <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
 10158c4:	e0bffc17 	ldw	r2,-16(fp)
 10158c8:	10800c43 	ldbu	r2,49(r2)
 10158cc:	10803fcc 	andi	r2,r2,255
 10158d0:	e0bffe15 	stw	r2,-8(fp)
 10158d4:	e0fffe17 	ldw	r3,-8(fp)
 10158d8:	188000c8 	cmpgei	r2,r3,3
 10158dc:	1000071e 	bne	r2,zero,10158fc <OSTmrDel+0xe8>
 10158e0:	e0fffe17 	ldw	r3,-8(fp)
 10158e4:	18800048 	cmpgei	r2,r3,1
 10158e8:	1000121e 	bne	r2,zero,1015934 <OSTmrDel+0x120>
 10158ec:	e0fffe17 	ldw	r3,-8(fp)
 10158f0:	1805003a 	cmpeq	r2,r3,zero
 10158f4:	1000171e 	bne	r2,zero,1015954 <OSTmrDel+0x140>
 10158f8:	00001c06 	br	101596c <OSTmrDel+0x158>
 10158fc:	e0fffe17 	ldw	r3,-8(fp)
 1015900:	188000e0 	cmpeqi	r2,r3,3
 1015904:	1000011e 	bne	r2,zero,101590c <OSTmrDel+0xf8>
 1015908:	00001806 	br	101596c <OSTmrDel+0x158>
        case OS_TMR_STATE_RUNNING:
             OSTmr_Unlink(ptmr);                            /* Remove from current wheel spoke                        */
 101590c:	e13ffc17 	ldw	r4,-16(fp)
 1015910:	10167740 	call	1016774 <OSTmr_Unlink>
             OSTmr_Free(ptmr);                              /* Return timer to free list of timers                    */
 1015914:	e13ffc17 	ldw	r4,-16(fp)
 1015918:	10162f40 	call	10162f4 <OSTmr_Free>
             OSTmr_Unlock();
 101591c:	10168c40 	call	10168c4 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
 1015920:	e0bffd17 	ldw	r2,-12(fp)
 1015924:	10000005 	stb	zero,0(r2)
             return (OS_TRUE);
 1015928:	00800044 	movi	r2,1
 101592c:	e0bfff15 	stw	r2,-4(fp)
 1015930:	00001306 	br	1015980 <OSTmrDel+0x16c>

        case OS_TMR_STATE_STOPPED:                          /* Timer has not started or ...                           */
        case OS_TMR_STATE_COMPLETED:                        /* ... timer has completed the ONE-SHOT time              */
             OSTmr_Free(ptmr);                              /* Return timer to free list of timers                    */
 1015934:	e13ffc17 	ldw	r4,-16(fp)
 1015938:	10162f40 	call	10162f4 <OSTmr_Free>
             OSTmr_Unlock();
 101593c:	10168c40 	call	10168c4 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
 1015940:	e0bffd17 	ldw	r2,-12(fp)
 1015944:	10000005 	stb	zero,0(r2)
             return (OS_TRUE);
 1015948:	00c00044 	movi	r3,1
 101594c:	e0ffff15 	stw	r3,-4(fp)
 1015950:	00000b06 	br	1015980 <OSTmrDel+0x16c>

        case OS_TMR_STATE_UNUSED:                           /* Already deleted                                        */
             OSTmr_Unlock();
 1015954:	10168c40 	call	10168c4 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
 1015958:	e0fffd17 	ldw	r3,-12(fp)
 101595c:	00bfe1c4 	movi	r2,-121
 1015960:	18800005 	stb	r2,0(r3)
             return (OS_FALSE);
 1015964:	e03fff15 	stw	zero,-4(fp)
 1015968:	00000506 	br	1015980 <OSTmrDel+0x16c>

        default:
             OSTmr_Unlock();
 101596c:	10168c40 	call	10168c4 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
 1015970:	e0fffd17 	ldw	r3,-12(fp)
 1015974:	00bfe344 	movi	r2,-115
 1015978:	18800005 	stb	r2,0(r3)
             return (OS_FALSE);
 101597c:	e03fff15 	stw	zero,-4(fp)
 1015980:	e0bfff17 	ldw	r2,-4(fp)
    }
}
 1015984:	e037883a 	mov	sp,fp
 1015988:	dfc00117 	ldw	ra,4(sp)
 101598c:	df000017 	ldw	fp,0(sp)
 1015990:	dec00204 	addi	sp,sp,8
 1015994:	f800283a 	ret

01015998 <OSTmrNameGet>:

#if OS_TMR_EN > 0 && OS_TMR_CFG_NAME_SIZE > 0
INT8U  OSTmrNameGet (OS_TMR  *ptmr,
                     INT8U   *pdest,
                     INT8U   *perr)
{
 1015998:	f811883a 	mov	r8,ra
 101599c:	100c3d80 	call	100c3d8 <_mcount>
 10159a0:	403f883a 	mov	ra,r8
 10159a4:	defff804 	addi	sp,sp,-32
 10159a8:	dfc00715 	stw	ra,28(sp)
 10159ac:	df000615 	stw	fp,24(sp)
 10159b0:	df000604 	addi	fp,sp,24
 10159b4:	e13ffb15 	stw	r4,-20(fp)
 10159b8:	e17ffc15 	stw	r5,-16(fp)
 10159bc:	e1bffd15 	stw	r6,-12(fp)
    INT8U  len;


#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {
 10159c0:	e0bffd17 	ldw	r2,-12(fp)
 10159c4:	1004c03a 	cmpne	r2,r2,zero
 10159c8:	1000021e 	bne	r2,zero,10159d4 <OSTmrNameGet+0x3c>
        return (0);
 10159cc:	e03fff15 	stw	zero,-4(fp)
 10159d0:	00004906 	br	1015af8 <OSTmrNameGet+0x160>
    }
    if (pdest == (INT8U *)0) {
 10159d4:	e0bffc17 	ldw	r2,-16(fp)
 10159d8:	1004c03a 	cmpne	r2,r2,zero
 10159dc:	1000051e 	bne	r2,zero,10159f4 <OSTmrNameGet+0x5c>
        *perr = OS_ERR_TMR_INVALID_DEST;
 10159e0:	e0fffd17 	ldw	r3,-12(fp)
 10159e4:	00bfe204 	movi	r2,-120
 10159e8:	18800005 	stb	r2,0(r3)
        return (0);
 10159ec:	e03fff15 	stw	zero,-4(fp)
 10159f0:	00004106 	br	1015af8 <OSTmrNameGet+0x160>
    }
    if (ptmr == (OS_TMR *)0) {
 10159f4:	e0bffb17 	ldw	r2,-20(fp)
 10159f8:	1004c03a 	cmpne	r2,r2,zero
 10159fc:	1000051e 	bne	r2,zero,1015a14 <OSTmrNameGet+0x7c>
        *perr = OS_ERR_TMR_INVALID;
 1015a00:	e0fffd17 	ldw	r3,-12(fp)
 1015a04:	00bfe284 	movi	r2,-118
 1015a08:	18800005 	stb	r2,0(r3)
        return (0);
 1015a0c:	e03fff15 	stw	zero,-4(fp)
 1015a10:	00003906 	br	1015af8 <OSTmrNameGet+0x160>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
 1015a14:	e0bffb17 	ldw	r2,-20(fp)
 1015a18:	10800003 	ldbu	r2,0(r2)
 1015a1c:	10803fcc 	andi	r2,r2,255
 1015a20:	10801920 	cmpeqi	r2,r2,100
 1015a24:	1000051e 	bne	r2,zero,1015a3c <OSTmrNameGet+0xa4>
        *perr = OS_ERR_TMR_INVALID_TYPE;
 1015a28:	e0fffd17 	ldw	r3,-12(fp)
 1015a2c:	00bfe244 	movi	r2,-119
 1015a30:	18800005 	stb	r2,0(r3)
        return (0);
 1015a34:	e03fff15 	stw	zero,-4(fp)
 1015a38:	00002f06 	br	1015af8 <OSTmrNameGet+0x160>
    }
    if (OSIntNesting > 0) {                            /* See if trying to call from an ISR                           */
 1015a3c:	008040f4 	movhi	r2,259
 1015a40:	10977704 	addi	r2,r2,24028
 1015a44:	10800003 	ldbu	r2,0(r2)
 1015a48:	10803fcc 	andi	r2,r2,255
 1015a4c:	1005003a 	cmpeq	r2,r2,zero
 1015a50:	1000051e 	bne	r2,zero,1015a68 <OSTmrNameGet+0xd0>
        *perr = OS_ERR_NAME_GET_ISR;
 1015a54:	e0fffd17 	ldw	r3,-12(fp)
 1015a58:	00800444 	movi	r2,17
 1015a5c:	18800005 	stb	r2,0(r3)
        return (0);
 1015a60:	e03fff15 	stw	zero,-4(fp)
 1015a64:	00002406 	br	1015af8 <OSTmrNameGet+0x160>
    }
    OSTmr_Lock();
 1015a68:	101687c0 	call	101687c <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
 1015a6c:	e0bffb17 	ldw	r2,-20(fp)
 1015a70:	10800c43 	ldbu	r2,49(r2)
 1015a74:	10803fcc 	andi	r2,r2,255
 1015a78:	e0bffe15 	stw	r2,-8(fp)
 1015a7c:	e0fffe17 	ldw	r3,-8(fp)
 1015a80:	1805003a 	cmpeq	r2,r3,zero
 1015a84:	1000111e 	bne	r2,zero,1015acc <OSTmrNameGet+0x134>
 1015a88:	e0fffe17 	ldw	r3,-8(fp)
 1015a8c:	1804803a 	cmplt	r2,r3,zero
 1015a90:	1000141e 	bne	r2,zero,1015ae4 <OSTmrNameGet+0x14c>
 1015a94:	e0fffe17 	ldw	r3,-8(fp)
 1015a98:	18800108 	cmpgei	r2,r3,4
 1015a9c:	1000111e 	bne	r2,zero,1015ae4 <OSTmrNameGet+0x14c>
        case OS_TMR_STATE_RUNNING:
        case OS_TMR_STATE_STOPPED:
        case OS_TMR_STATE_COMPLETED:
             len   = OS_StrCopy(pdest, ptmr->OSTmrName);
 1015aa0:	e0bffb17 	ldw	r2,-20(fp)
 1015aa4:	11400804 	addi	r5,r2,32
 1015aa8:	e13ffc17 	ldw	r4,-16(fp)
 1015aac:	100eaa00 	call	100eaa0 <OS_StrCopy>
 1015ab0:	e0bffa05 	stb	r2,-24(fp)
             OSTmr_Unlock();
 1015ab4:	10168c40 	call	10168c4 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
 1015ab8:	e0bffd17 	ldw	r2,-12(fp)
 1015abc:	10000005 	stb	zero,0(r2)
             return (len);
 1015ac0:	e0bffa03 	ldbu	r2,-24(fp)
 1015ac4:	e0bfff15 	stw	r2,-4(fp)
 1015ac8:	00000b06 	br	1015af8 <OSTmrNameGet+0x160>

        case OS_TMR_STATE_UNUSED:                      /* Timer is not allocated                                      */
             OSTmr_Unlock();
 1015acc:	10168c40 	call	10168c4 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
 1015ad0:	e0fffd17 	ldw	r3,-12(fp)
 1015ad4:	00bfe1c4 	movi	r2,-121
 1015ad8:	18800005 	stb	r2,0(r3)
             return (0);
 1015adc:	e03fff15 	stw	zero,-4(fp)
 1015ae0:	00000506 	br	1015af8 <OSTmrNameGet+0x160>

        default:
             OSTmr_Unlock();
 1015ae4:	10168c40 	call	10168c4 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
 1015ae8:	e0fffd17 	ldw	r3,-12(fp)
 1015aec:	00bfe344 	movi	r2,-115
 1015af0:	18800005 	stb	r2,0(r3)
             return (0);
 1015af4:	e03fff15 	stw	zero,-4(fp)
 1015af8:	e0bfff17 	ldw	r2,-4(fp)
    }
}
 1015afc:	e037883a 	mov	sp,fp
 1015b00:	dfc00117 	ldw	ra,4(sp)
 1015b04:	df000017 	ldw	fp,0(sp)
 1015b08:	dec00204 	addi	sp,sp,8
 1015b0c:	f800283a 	ret

01015b10 <OSTmrRemainGet>:
*/

#if OS_TMR_EN > 0
INT32U  OSTmrRemainGet (OS_TMR  *ptmr,
                        INT8U   *perr)
{
 1015b10:	f811883a 	mov	r8,ra
 1015b14:	100c3d80 	call	100c3d8 <_mcount>
 1015b18:	403f883a 	mov	ra,r8
 1015b1c:	defff904 	addi	sp,sp,-28
 1015b20:	dfc00615 	stw	ra,24(sp)
 1015b24:	df000515 	stw	fp,20(sp)
 1015b28:	df000504 	addi	fp,sp,20
 1015b2c:	e13ffc15 	stw	r4,-16(fp)
 1015b30:	e17ffd15 	stw	r5,-12(fp)
    INT32U  remain;


#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {
 1015b34:	e0bffd17 	ldw	r2,-12(fp)
 1015b38:	1004c03a 	cmpne	r2,r2,zero
 1015b3c:	1000021e 	bne	r2,zero,1015b48 <OSTmrRemainGet+0x38>
        return (0);
 1015b40:	e03fff15 	stw	zero,-4(fp)
 1015b44:	00006e06 	br	1015d00 <OSTmrRemainGet+0x1f0>
    }
    if (ptmr == (OS_TMR *)0) {
 1015b48:	e0bffc17 	ldw	r2,-16(fp)
 1015b4c:	1004c03a 	cmpne	r2,r2,zero
 1015b50:	1000051e 	bne	r2,zero,1015b68 <OSTmrRemainGet+0x58>
        *perr = OS_ERR_TMR_INVALID;
 1015b54:	e0fffd17 	ldw	r3,-12(fp)
 1015b58:	00bfe284 	movi	r2,-118
 1015b5c:	18800005 	stb	r2,0(r3)
        return (0);
 1015b60:	e03fff15 	stw	zero,-4(fp)
 1015b64:	00006606 	br	1015d00 <OSTmrRemainGet+0x1f0>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
 1015b68:	e0bffc17 	ldw	r2,-16(fp)
 1015b6c:	10800003 	ldbu	r2,0(r2)
 1015b70:	10803fcc 	andi	r2,r2,255
 1015b74:	10801920 	cmpeqi	r2,r2,100
 1015b78:	1000051e 	bne	r2,zero,1015b90 <OSTmrRemainGet+0x80>
        *perr = OS_ERR_TMR_INVALID_TYPE;
 1015b7c:	e0fffd17 	ldw	r3,-12(fp)
 1015b80:	00bfe244 	movi	r2,-119
 1015b84:	18800005 	stb	r2,0(r3)
        return (0);
 1015b88:	e03fff15 	stw	zero,-4(fp)
 1015b8c:	00005c06 	br	1015d00 <OSTmrRemainGet+0x1f0>
    }
    if (OSIntNesting > 0) {                            /* See if trying to call from an ISR                           */
 1015b90:	008040f4 	movhi	r2,259
 1015b94:	10977704 	addi	r2,r2,24028
 1015b98:	10800003 	ldbu	r2,0(r2)
 1015b9c:	10803fcc 	andi	r2,r2,255
 1015ba0:	1005003a 	cmpeq	r2,r2,zero
 1015ba4:	1000051e 	bne	r2,zero,1015bbc <OSTmrRemainGet+0xac>
        *perr = OS_ERR_TMR_ISR;
 1015ba8:	e0fffd17 	ldw	r3,-12(fp)
 1015bac:	00bfe2c4 	movi	r2,-117
 1015bb0:	18800005 	stb	r2,0(r3)
        return (0);
 1015bb4:	e03fff15 	stw	zero,-4(fp)
 1015bb8:	00005106 	br	1015d00 <OSTmrRemainGet+0x1f0>
    }
    OSTmr_Lock();
 1015bbc:	101687c0 	call	101687c <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
 1015bc0:	e0bffc17 	ldw	r2,-16(fp)
 1015bc4:	10800c43 	ldbu	r2,49(r2)
 1015bc8:	10803fcc 	andi	r2,r2,255
 1015bcc:	e0bffe15 	stw	r2,-8(fp)
 1015bd0:	e0fffe17 	ldw	r3,-8(fp)
 1015bd4:	18800060 	cmpeqi	r2,r3,1
 1015bd8:	10001b1e 	bne	r2,zero,1015c48 <OSTmrRemainGet+0x138>
 1015bdc:	e0fffe17 	ldw	r3,-8(fp)
 1015be0:	18800088 	cmpgei	r2,r3,2
 1015be4:	1000041e 	bne	r2,zero,1015bf8 <OSTmrRemainGet+0xe8>
 1015be8:	e0fffe17 	ldw	r3,-8(fp)
 1015bec:	1805003a 	cmpeq	r2,r3,zero
 1015bf0:	1000381e 	bne	r2,zero,1015cd4 <OSTmrRemainGet+0x1c4>
 1015bf4:	00003d06 	br	1015cec <OSTmrRemainGet+0x1dc>
 1015bf8:	e0fffe17 	ldw	r3,-8(fp)
 1015bfc:	188000a0 	cmpeqi	r2,r3,2
 1015c00:	10002f1e 	bne	r2,zero,1015cc0 <OSTmrRemainGet+0x1b0>
 1015c04:	e0fffe17 	ldw	r3,-8(fp)
 1015c08:	188000e0 	cmpeqi	r2,r3,3
 1015c0c:	1000011e 	bne	r2,zero,1015c14 <OSTmrRemainGet+0x104>
 1015c10:	00003606 	br	1015cec <OSTmrRemainGet+0x1dc>
        case OS_TMR_STATE_RUNNING:
             remain = ptmr->OSTmrMatch - OSTmrTime;    /* Determine how much time is left to timeout                  */
 1015c14:	e0bffc17 	ldw	r2,-16(fp)
 1015c18:	10c00517 	ldw	r3,20(r2)
 1015c1c:	008040f4 	movhi	r2,259
 1015c20:	10977904 	addi	r2,r2,24036
 1015c24:	10800017 	ldw	r2,0(r2)
 1015c28:	1885c83a 	sub	r2,r3,r2
 1015c2c:	e0bffb15 	stw	r2,-20(fp)
             OSTmr_Unlock();
 1015c30:	10168c40 	call	10168c4 <OSTmr_Unlock>
             *perr  = OS_ERR_NONE;
 1015c34:	e0bffd17 	ldw	r2,-12(fp)
 1015c38:	10000005 	stb	zero,0(r2)
             return (remain);
 1015c3c:	e0bffb17 	ldw	r2,-20(fp)
 1015c40:	e0bfff15 	stw	r2,-4(fp)
 1015c44:	00002e06 	br	1015d00 <OSTmrRemainGet+0x1f0>

        case OS_TMR_STATE_STOPPED:                     /* It's assumed that the timer has not started yet             */
             switch (ptmr->OSTmrOpt) {
 1015c48:	e0bffc17 	ldw	r2,-16(fp)
 1015c4c:	10800c03 	ldbu	r2,48(r2)
 1015c50:	10803fcc 	andi	r2,r2,255
 1015c54:	108000a0 	cmpeqi	r2,r2,2
 1015c58:	1000011e 	bne	r2,zero,1015c60 <OSTmrRemainGet+0x150>
 1015c5c:	00000f06 	br	1015c9c <OSTmrRemainGet+0x18c>
                 case OS_TMR_OPT_PERIODIC:
                      if (ptmr->OSTmrDly == 0) {
 1015c60:	e0bffc17 	ldw	r2,-16(fp)
 1015c64:	10800617 	ldw	r2,24(r2)
 1015c68:	1004c03a 	cmpne	r2,r2,zero
 1015c6c:	1000041e 	bne	r2,zero,1015c80 <OSTmrRemainGet+0x170>
                          remain = ptmr->OSTmrPeriod;
 1015c70:	e0bffc17 	ldw	r2,-16(fp)
 1015c74:	10800717 	ldw	r2,28(r2)
 1015c78:	e0bffb15 	stw	r2,-20(fp)
 1015c7c:	00000306 	br	1015c8c <OSTmrRemainGet+0x17c>
                      } else {
                          remain = ptmr->OSTmrDly;
 1015c80:	e0bffc17 	ldw	r2,-16(fp)
 1015c84:	10800617 	ldw	r2,24(r2)
 1015c88:	e0bffb15 	stw	r2,-20(fp)
                      }
                      OSTmr_Unlock();
 1015c8c:	10168c40 	call	10168c4 <OSTmr_Unlock>
                      *perr  = OS_ERR_NONE;
 1015c90:	e0bffd17 	ldw	r2,-12(fp)
 1015c94:	10000005 	stb	zero,0(r2)
                      break;
 1015c98:	00000606 	br	1015cb4 <OSTmrRemainGet+0x1a4>

                 case OS_TMR_OPT_ONE_SHOT:
                 default:
                      remain = ptmr->OSTmrDly;
 1015c9c:	e0bffc17 	ldw	r2,-16(fp)
 1015ca0:	10800617 	ldw	r2,24(r2)
 1015ca4:	e0bffb15 	stw	r2,-20(fp)
                      OSTmr_Unlock();
 1015ca8:	10168c40 	call	10168c4 <OSTmr_Unlock>
                      *perr  = OS_ERR_NONE;
 1015cac:	e0bffd17 	ldw	r2,-12(fp)
 1015cb0:	10000005 	stb	zero,0(r2)
                      break;
             }
             return (remain);
 1015cb4:	e0fffb17 	ldw	r3,-20(fp)
 1015cb8:	e0ffff15 	stw	r3,-4(fp)
 1015cbc:	00001006 	br	1015d00 <OSTmrRemainGet+0x1f0>

        case OS_TMR_STATE_COMPLETED:                   /* Only ONE-SHOT that timed out can be in this state           */
             OSTmr_Unlock();
 1015cc0:	10168c40 	call	10168c4 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
 1015cc4:	e0bffd17 	ldw	r2,-12(fp)
 1015cc8:	10000005 	stb	zero,0(r2)
             return (0);
 1015ccc:	e03fff15 	stw	zero,-4(fp)
 1015cd0:	00000b06 	br	1015d00 <OSTmrRemainGet+0x1f0>

        case OS_TMR_STATE_UNUSED:
             OSTmr_Unlock();
 1015cd4:	10168c40 	call	10168c4 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
 1015cd8:	e0fffd17 	ldw	r3,-12(fp)
 1015cdc:	00bfe1c4 	movi	r2,-121
 1015ce0:	18800005 	stb	r2,0(r3)
             return (0);
 1015ce4:	e03fff15 	stw	zero,-4(fp)
 1015ce8:	00000506 	br	1015d00 <OSTmrRemainGet+0x1f0>

        default:
             OSTmr_Unlock();
 1015cec:	10168c40 	call	10168c4 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
 1015cf0:	e0fffd17 	ldw	r3,-12(fp)
 1015cf4:	00bfe344 	movi	r2,-115
 1015cf8:	18800005 	stb	r2,0(r3)
             return (0);
 1015cfc:	e03fff15 	stw	zero,-4(fp)
 1015d00:	e0bfff17 	ldw	r2,-4(fp)
    }
}
 1015d04:	e037883a 	mov	sp,fp
 1015d08:	dfc00117 	ldw	ra,4(sp)
 1015d0c:	df000017 	ldw	fp,0(sp)
 1015d10:	dec00204 	addi	sp,sp,8
 1015d14:	f800283a 	ret

01015d18 <OSTmrStateGet>:
*/

#if OS_TMR_EN > 0
INT8U  OSTmrStateGet (OS_TMR  *ptmr,
                      INT8U   *perr)
{
 1015d18:	f811883a 	mov	r8,ra
 1015d1c:	100c3d80 	call	100c3d8 <_mcount>
 1015d20:	403f883a 	mov	ra,r8
 1015d24:	defffa04 	addi	sp,sp,-24
 1015d28:	dfc00515 	stw	ra,20(sp)
 1015d2c:	df000415 	stw	fp,16(sp)
 1015d30:	df000404 	addi	fp,sp,16
 1015d34:	e13ffd15 	stw	r4,-12(fp)
 1015d38:	e17ffe15 	stw	r5,-8(fp)
    INT8U  state;


#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {
 1015d3c:	e0bffe17 	ldw	r2,-8(fp)
 1015d40:	1004c03a 	cmpne	r2,r2,zero
 1015d44:	1000021e 	bne	r2,zero,1015d50 <OSTmrStateGet+0x38>
        return (0);
 1015d48:	e03fff15 	stw	zero,-4(fp)
 1015d4c:	00002e06 	br	1015e08 <OSTmrStateGet+0xf0>
    }
    if (ptmr == (OS_TMR *)0) {
 1015d50:	e0bffd17 	ldw	r2,-12(fp)
 1015d54:	1004c03a 	cmpne	r2,r2,zero
 1015d58:	1000051e 	bne	r2,zero,1015d70 <OSTmrStateGet+0x58>
        *perr = OS_ERR_TMR_INVALID;
 1015d5c:	e0fffe17 	ldw	r3,-8(fp)
 1015d60:	00bfe284 	movi	r2,-118
 1015d64:	18800005 	stb	r2,0(r3)
        return (0);
 1015d68:	e03fff15 	stw	zero,-4(fp)
 1015d6c:	00002606 	br	1015e08 <OSTmrStateGet+0xf0>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
 1015d70:	e0bffd17 	ldw	r2,-12(fp)
 1015d74:	10800003 	ldbu	r2,0(r2)
 1015d78:	10803fcc 	andi	r2,r2,255
 1015d7c:	10801920 	cmpeqi	r2,r2,100
 1015d80:	1000051e 	bne	r2,zero,1015d98 <OSTmrStateGet+0x80>
        *perr = OS_ERR_TMR_INVALID_TYPE;
 1015d84:	e0fffe17 	ldw	r3,-8(fp)
 1015d88:	00bfe244 	movi	r2,-119
 1015d8c:	18800005 	stb	r2,0(r3)
        return (0);
 1015d90:	e03fff15 	stw	zero,-4(fp)
 1015d94:	00001c06 	br	1015e08 <OSTmrStateGet+0xf0>
    }
    if (OSIntNesting > 0) {                            /* See if trying to call from an ISR                           */
 1015d98:	008040f4 	movhi	r2,259
 1015d9c:	10977704 	addi	r2,r2,24028
 1015da0:	10800003 	ldbu	r2,0(r2)
 1015da4:	10803fcc 	andi	r2,r2,255
 1015da8:	1005003a 	cmpeq	r2,r2,zero
 1015dac:	1000051e 	bne	r2,zero,1015dc4 <OSTmrStateGet+0xac>
        *perr = OS_ERR_TMR_ISR;
 1015db0:	e0fffe17 	ldw	r3,-8(fp)
 1015db4:	00bfe2c4 	movi	r2,-117
 1015db8:	18800005 	stb	r2,0(r3)
        return (0);
 1015dbc:	e03fff15 	stw	zero,-4(fp)
 1015dc0:	00001106 	br	1015e08 <OSTmrStateGet+0xf0>
    }
    OSTmr_Lock();
 1015dc4:	101687c0 	call	101687c <OSTmr_Lock>
    state = ptmr->OSTmrState;
 1015dc8:	e0bffd17 	ldw	r2,-12(fp)
 1015dcc:	10800c43 	ldbu	r2,49(r2)
 1015dd0:	e0bffc05 	stb	r2,-16(fp)
    switch (state) {
 1015dd4:	e0bffc03 	ldbu	r2,-16(fp)
 1015dd8:	1005883a 	mov	r2,r2
 1015ddc:	10800128 	cmpgeui	r2,r2,4
 1015de0:	1000031e 	bne	r2,zero,1015df0 <OSTmrStateGet+0xd8>
        case OS_TMR_STATE_UNUSED:   
        case OS_TMR_STATE_STOPPED:  
        case OS_TMR_STATE_COMPLETED:
        case OS_TMR_STATE_RUNNING:  
             *perr = OS_ERR_NONE;
 1015de4:	e0bffe17 	ldw	r2,-8(fp)
 1015de8:	10000005 	stb	zero,0(r2)
             break;
 1015dec:	00000306 	br	1015dfc <OSTmrStateGet+0xe4>
             
        default:
             *perr = OS_ERR_TMR_INVALID_STATE;
 1015df0:	e0fffe17 	ldw	r3,-8(fp)
 1015df4:	00bfe344 	movi	r2,-115
 1015df8:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTmr_Unlock();
 1015dfc:	10168c40 	call	10168c4 <OSTmr_Unlock>
    return (state);
 1015e00:	e0bffc03 	ldbu	r2,-16(fp)
 1015e04:	e0bfff15 	stw	r2,-4(fp)
 1015e08:	e0bfff17 	ldw	r2,-4(fp)
}
 1015e0c:	e037883a 	mov	sp,fp
 1015e10:	dfc00117 	ldw	ra,4(sp)
 1015e14:	df000017 	ldw	fp,0(sp)
 1015e18:	dec00204 	addi	sp,sp,8
 1015e1c:	f800283a 	ret

01015e20 <OSTmrStart>:
*/

#if OS_TMR_EN > 0
BOOLEAN  OSTmrStart (OS_TMR   *ptmr,
                     INT8U    *perr)
{
 1015e20:	f811883a 	mov	r8,ra
 1015e24:	100c3d80 	call	100c3d8 <_mcount>
 1015e28:	403f883a 	mov	ra,r8
 1015e2c:	defffa04 	addi	sp,sp,-24
 1015e30:	dfc00515 	stw	ra,20(sp)
 1015e34:	df000415 	stw	fp,16(sp)
 1015e38:	df000404 	addi	fp,sp,16
 1015e3c:	e13ffc15 	stw	r4,-16(fp)
 1015e40:	e17ffd15 	stw	r5,-12(fp)
#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                               /* Validate arguments                                     */
 1015e44:	e0bffd17 	ldw	r2,-12(fp)
 1015e48:	1004c03a 	cmpne	r2,r2,zero
 1015e4c:	1000021e 	bne	r2,zero,1015e58 <OSTmrStart+0x38>
        return (OS_FALSE);
 1015e50:	e03fff15 	stw	zero,-4(fp)
 1015e54:	00004f06 	br	1015f94 <OSTmrStart+0x174>
    }
    if (ptmr == (OS_TMR *)0) {
 1015e58:	e0bffc17 	ldw	r2,-16(fp)
 1015e5c:	1004c03a 	cmpne	r2,r2,zero
 1015e60:	1000051e 	bne	r2,zero,1015e78 <OSTmrStart+0x58>
        *perr = OS_ERR_TMR_INVALID;
 1015e64:	e0fffd17 	ldw	r3,-12(fp)
 1015e68:	00bfe284 	movi	r2,-118
 1015e6c:	18800005 	stb	r2,0(r3)
        return (OS_FALSE);
 1015e70:	e03fff15 	stw	zero,-4(fp)
 1015e74:	00004706 	br	1015f94 <OSTmrStart+0x174>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {                   /* Validate timer structure                               */
 1015e78:	e0bffc17 	ldw	r2,-16(fp)
 1015e7c:	10800003 	ldbu	r2,0(r2)
 1015e80:	10803fcc 	andi	r2,r2,255
 1015e84:	10801920 	cmpeqi	r2,r2,100
 1015e88:	1000051e 	bne	r2,zero,1015ea0 <OSTmrStart+0x80>
        *perr = OS_ERR_TMR_INVALID_TYPE;
 1015e8c:	e0fffd17 	ldw	r3,-12(fp)
 1015e90:	00bfe244 	movi	r2,-119
 1015e94:	18800005 	stb	r2,0(r3)
        return (OS_FALSE);
 1015e98:	e03fff15 	stw	zero,-4(fp)
 1015e9c:	00003d06 	br	1015f94 <OSTmrStart+0x174>
    }
    if (OSIntNesting > 0) {                                 /* See if trying to call from an ISR                      */
 1015ea0:	008040f4 	movhi	r2,259
 1015ea4:	10977704 	addi	r2,r2,24028
 1015ea8:	10800003 	ldbu	r2,0(r2)
 1015eac:	10803fcc 	andi	r2,r2,255
 1015eb0:	1005003a 	cmpeq	r2,r2,zero
 1015eb4:	1000051e 	bne	r2,zero,1015ecc <OSTmrStart+0xac>
        *perr  = OS_ERR_TMR_ISR;
 1015eb8:	e0fffd17 	ldw	r3,-12(fp)
 1015ebc:	00bfe2c4 	movi	r2,-117
 1015ec0:	18800005 	stb	r2,0(r3)
        return (OS_FALSE);
 1015ec4:	e03fff15 	stw	zero,-4(fp)
 1015ec8:	00003206 	br	1015f94 <OSTmrStart+0x174>
    }
    OSTmr_Lock();
 1015ecc:	101687c0 	call	101687c <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
 1015ed0:	e0bffc17 	ldw	r2,-16(fp)
 1015ed4:	10800c43 	ldbu	r2,49(r2)
 1015ed8:	10803fcc 	andi	r2,r2,255
 1015edc:	e0bffe15 	stw	r2,-8(fp)
 1015ee0:	e0fffe17 	ldw	r3,-8(fp)
 1015ee4:	188000c8 	cmpgei	r2,r3,3
 1015ee8:	1000071e 	bne	r2,zero,1015f08 <OSTmrStart+0xe8>
 1015eec:	e0fffe17 	ldw	r3,-8(fp)
 1015ef0:	18800048 	cmpgei	r2,r3,1
 1015ef4:	1000131e 	bne	r2,zero,1015f44 <OSTmrStart+0x124>
 1015ef8:	e0fffe17 	ldw	r3,-8(fp)
 1015efc:	1805003a 	cmpeq	r2,r3,zero
 1015f00:	1000191e 	bne	r2,zero,1015f68 <OSTmrStart+0x148>
 1015f04:	00001e06 	br	1015f80 <OSTmrStart+0x160>
 1015f08:	e0fffe17 	ldw	r3,-8(fp)
 1015f0c:	188000e0 	cmpeqi	r2,r3,3
 1015f10:	1000011e 	bne	r2,zero,1015f18 <OSTmrStart+0xf8>
 1015f14:	00001a06 	br	1015f80 <OSTmrStart+0x160>
        case OS_TMR_STATE_RUNNING:                          /* Restart the timer                                      */
             OSTmr_Unlink(ptmr);                            /* ... Stop the timer                                     */
 1015f18:	e13ffc17 	ldw	r4,-16(fp)
 1015f1c:	10167740 	call	1016774 <OSTmr_Unlink>
             OSTmr_Link(ptmr, OS_TMR_LINK_DLY);             /* ... Link timer to timer wheel                          */
 1015f20:	e13ffc17 	ldw	r4,-16(fp)
 1015f24:	000b883a 	mov	r5,zero
 1015f28:	10166040 	call	1016604 <OSTmr_Link>
             OSTmr_Unlock();
 1015f2c:	10168c40 	call	10168c4 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
 1015f30:	e0bffd17 	ldw	r2,-12(fp)
 1015f34:	10000005 	stb	zero,0(r2)
             return (OS_TRUE);
 1015f38:	00800044 	movi	r2,1
 1015f3c:	e0bfff15 	stw	r2,-4(fp)
 1015f40:	00001406 	br	1015f94 <OSTmrStart+0x174>

        case OS_TMR_STATE_STOPPED:                          /* Start the timer                                        */
        case OS_TMR_STATE_COMPLETED:
             OSTmr_Link(ptmr, OS_TMR_LINK_DLY);             /* ... Link timer to timer wheel                          */
 1015f44:	e13ffc17 	ldw	r4,-16(fp)
 1015f48:	000b883a 	mov	r5,zero
 1015f4c:	10166040 	call	1016604 <OSTmr_Link>
             OSTmr_Unlock();
 1015f50:	10168c40 	call	10168c4 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
 1015f54:	e0bffd17 	ldw	r2,-12(fp)
 1015f58:	10000005 	stb	zero,0(r2)
             return (OS_TRUE);
 1015f5c:	00c00044 	movi	r3,1
 1015f60:	e0ffff15 	stw	r3,-4(fp)
 1015f64:	00000b06 	br	1015f94 <OSTmrStart+0x174>

        case OS_TMR_STATE_UNUSED:                           /* Timer not created                                      */
             OSTmr_Unlock();
 1015f68:	10168c40 	call	10168c4 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
 1015f6c:	e0fffd17 	ldw	r3,-12(fp)
 1015f70:	00bfe1c4 	movi	r2,-121
 1015f74:	18800005 	stb	r2,0(r3)
             return (OS_FALSE);
 1015f78:	e03fff15 	stw	zero,-4(fp)
 1015f7c:	00000506 	br	1015f94 <OSTmrStart+0x174>

        default:
             OSTmr_Unlock();
 1015f80:	10168c40 	call	10168c4 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
 1015f84:	e0fffd17 	ldw	r3,-12(fp)
 1015f88:	00bfe344 	movi	r2,-115
 1015f8c:	18800005 	stb	r2,0(r3)
             return (OS_FALSE);
 1015f90:	e03fff15 	stw	zero,-4(fp)
 1015f94:	e0bfff17 	ldw	r2,-4(fp)
    }
}
 1015f98:	e037883a 	mov	sp,fp
 1015f9c:	dfc00117 	ldw	ra,4(sp)
 1015fa0:	df000017 	ldw	fp,0(sp)
 1015fa4:	dec00204 	addi	sp,sp,8
 1015fa8:	f800283a 	ret

01015fac <OSTmrStop>:
#if OS_TMR_EN > 0
BOOLEAN  OSTmrStop (OS_TMR  *ptmr,
                    INT8U    opt,
                    void    *callback_arg,
                    INT8U   *perr)
{
 1015fac:	f811883a 	mov	r8,ra
 1015fb0:	100c3d80 	call	100c3d8 <_mcount>
 1015fb4:	403f883a 	mov	ra,r8
 1015fb8:	defff604 	addi	sp,sp,-40
 1015fbc:	dfc00915 	stw	ra,36(sp)
 1015fc0:	df000815 	stw	fp,32(sp)
 1015fc4:	df000804 	addi	fp,sp,32
 1015fc8:	e13ff915 	stw	r4,-28(fp)
 1015fcc:	e1bffb15 	stw	r6,-20(fp)
 1015fd0:	e1fffc15 	stw	r7,-16(fp)
 1015fd4:	e17ffa05 	stb	r5,-24(fp)
    OS_TMR_CALLBACK  pfnct;


#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                                     /* Validate arguments                               */
 1015fd8:	e0bffc17 	ldw	r2,-16(fp)
 1015fdc:	1004c03a 	cmpne	r2,r2,zero
 1015fe0:	1000021e 	bne	r2,zero,1015fec <OSTmrStop+0x40>
        return (OS_FALSE);
 1015fe4:	e03fff15 	stw	zero,-4(fp)
 1015fe8:	00007806 	br	10161cc <OSTmrStop+0x220>
    }
    if (ptmr == (OS_TMR *)0) {
 1015fec:	e0bff917 	ldw	r2,-28(fp)
 1015ff0:	1004c03a 	cmpne	r2,r2,zero
 1015ff4:	1000051e 	bne	r2,zero,101600c <OSTmrStop+0x60>
        *perr = OS_ERR_TMR_INVALID;
 1015ff8:	e0fffc17 	ldw	r3,-16(fp)
 1015ffc:	00bfe284 	movi	r2,-118
 1016000:	18800005 	stb	r2,0(r3)
        return (OS_FALSE);
 1016004:	e03fff15 	stw	zero,-4(fp)
 1016008:	00007006 	br	10161cc <OSTmrStop+0x220>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {                         /* Validate timer structure                         */
 101600c:	e0bff917 	ldw	r2,-28(fp)
 1016010:	10800003 	ldbu	r2,0(r2)
 1016014:	10803fcc 	andi	r2,r2,255
 1016018:	10801920 	cmpeqi	r2,r2,100
 101601c:	1000051e 	bne	r2,zero,1016034 <OSTmrStop+0x88>
        *perr = OS_ERR_TMR_INVALID_TYPE;
 1016020:	e0fffc17 	ldw	r3,-16(fp)
 1016024:	00bfe244 	movi	r2,-119
 1016028:	18800005 	stb	r2,0(r3)
        return (OS_FALSE);
 101602c:	e03fff15 	stw	zero,-4(fp)
 1016030:	00006606 	br	10161cc <OSTmrStop+0x220>
    }
    if (OSIntNesting > 0) {                                       /* See if trying to call from an ISR                */
 1016034:	008040f4 	movhi	r2,259
 1016038:	10977704 	addi	r2,r2,24028
 101603c:	10800003 	ldbu	r2,0(r2)
 1016040:	10803fcc 	andi	r2,r2,255
 1016044:	1005003a 	cmpeq	r2,r2,zero
 1016048:	1000051e 	bne	r2,zero,1016060 <OSTmrStop+0xb4>
        *perr  = OS_ERR_TMR_ISR;
 101604c:	e0fffc17 	ldw	r3,-16(fp)
 1016050:	00bfe2c4 	movi	r2,-117
 1016054:	18800005 	stb	r2,0(r3)
        return (OS_FALSE);
 1016058:	e03fff15 	stw	zero,-4(fp)
 101605c:	00005b06 	br	10161cc <OSTmrStop+0x220>
    }
    OSTmr_Lock();
 1016060:	101687c0 	call	101687c <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
 1016064:	e0bff917 	ldw	r2,-28(fp)
 1016068:	10800c43 	ldbu	r2,49(r2)
 101606c:	10803fcc 	andi	r2,r2,255
 1016070:	e0bffe15 	stw	r2,-8(fp)
 1016074:	e0fffe17 	ldw	r3,-8(fp)
 1016078:	188000c8 	cmpgei	r2,r3,3
 101607c:	1000071e 	bne	r2,zero,101609c <OSTmrStop+0xf0>
 1016080:	e0fffe17 	ldw	r3,-8(fp)
 1016084:	18800048 	cmpgei	r2,r3,1
 1016088:	10003e1e 	bne	r2,zero,1016184 <OSTmrStop+0x1d8>
 101608c:	e0fffe17 	ldw	r3,-8(fp)
 1016090:	1805003a 	cmpeq	r2,r3,zero
 1016094:	1000421e 	bne	r2,zero,10161a0 <OSTmrStop+0x1f4>
 1016098:	00004706 	br	10161b8 <OSTmrStop+0x20c>
 101609c:	e0fffe17 	ldw	r3,-8(fp)
 10160a0:	188000e0 	cmpeqi	r2,r3,3
 10160a4:	1000011e 	bne	r2,zero,10160ac <OSTmrStop+0x100>
 10160a8:	00004306 	br	10161b8 <OSTmrStop+0x20c>
        case OS_TMR_STATE_RUNNING:
             OSTmr_Unlink(ptmr);                                  /* Remove from current wheel spoke                  */
 10160ac:	e13ff917 	ldw	r4,-28(fp)
 10160b0:	10167740 	call	1016774 <OSTmr_Unlink>
             *perr = OS_ERR_NONE;
 10160b4:	e0bffc17 	ldw	r2,-16(fp)
 10160b8:	10000005 	stb	zero,0(r2)
             switch (opt) {
 10160bc:	e0bffa03 	ldbu	r2,-24(fp)
 10160c0:	e0bffd15 	stw	r2,-12(fp)
 10160c4:	e0fffd17 	ldw	r3,-12(fp)
 10160c8:	188000e0 	cmpeqi	r2,r3,3
 10160cc:	1000071e 	bne	r2,zero,10160ec <OSTmrStop+0x140>
 10160d0:	e0fffd17 	ldw	r3,-12(fp)
 10160d4:	18800120 	cmpeqi	r2,r3,4
 10160d8:	1000141e 	bne	r2,zero,101612c <OSTmrStop+0x180>
 10160dc:	e0fffd17 	ldw	r3,-12(fp)
 10160e0:	1805003a 	cmpeq	r2,r3,zero
 10160e4:	1000231e 	bne	r2,zero,1016174 <OSTmrStop+0x1c8>
 10160e8:	00001f06 	br	1016168 <OSTmrStop+0x1bc>
                 case OS_TMR_OPT_CALLBACK:
                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
 10160ec:	e0bff917 	ldw	r2,-28(fp)
 10160f0:	10800117 	ldw	r2,4(r2)
 10160f4:	e0bff815 	stw	r2,-32(fp)
                      if (pfnct != (OS_TMR_CALLBACK)0) {
 10160f8:	e0bff817 	ldw	r2,-32(fp)
 10160fc:	1005003a 	cmpeq	r2,r2,zero
 1016100:	1000061e 	bne	r2,zero,101611c <OSTmrStop+0x170>
                          (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);  /* Use callback arg when timer was created */
 1016104:	e0bff917 	ldw	r2,-28(fp)
 1016108:	11400217 	ldw	r5,8(r2)
 101610c:	e0bff817 	ldw	r2,-32(fp)
 1016110:	e13ff917 	ldw	r4,-28(fp)
 1016114:	103ee83a 	callr	r2
 1016118:	00001606 	br	1016174 <OSTmrStop+0x1c8>
                      } else {
                          *perr = OS_ERR_TMR_NO_CALLBACK;
 101611c:	e0fffc17 	ldw	r3,-16(fp)
 1016120:	00bfe3c4 	movi	r2,-113
 1016124:	18800005 	stb	r2,0(r3)
                      }
                      break;
 1016128:	00001206 	br	1016174 <OSTmrStop+0x1c8>

                 case OS_TMR_OPT_CALLBACK_ARG:
                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
 101612c:	e0bff917 	ldw	r2,-28(fp)
 1016130:	10800117 	ldw	r2,4(r2)
 1016134:	e0bff815 	stw	r2,-32(fp)
                      if (pfnct != (OS_TMR_CALLBACK)0) {
 1016138:	e0bff817 	ldw	r2,-32(fp)
 101613c:	1005003a 	cmpeq	r2,r2,zero
 1016140:	1000051e 	bne	r2,zero,1016158 <OSTmrStop+0x1ac>
                          (*pfnct)((void *)ptmr, callback_arg);   /* ... using the 'callback_arg' provided in call    */
 1016144:	e0bff817 	ldw	r2,-32(fp)
 1016148:	e13ff917 	ldw	r4,-28(fp)
 101614c:	e17ffb17 	ldw	r5,-20(fp)
 1016150:	103ee83a 	callr	r2
 1016154:	00000706 	br	1016174 <OSTmrStop+0x1c8>
                      } else {
                          *perr = OS_ERR_TMR_NO_CALLBACK;
 1016158:	e0fffc17 	ldw	r3,-16(fp)
 101615c:	00bfe3c4 	movi	r2,-113
 1016160:	18800005 	stb	r2,0(r3)
                      }
                      break;
 1016164:	00000306 	br	1016174 <OSTmrStop+0x1c8>

                 case OS_TMR_OPT_NONE:
                      break;

                 default:
                     *perr = OS_ERR_TMR_INVALID_OPT;
 1016168:	e0fffc17 	ldw	r3,-16(fp)
 101616c:	00bfe104 	movi	r2,-124
 1016170:	18800005 	stb	r2,0(r3)
                     break;
             }
             OSTmr_Unlock();
 1016174:	10168c40 	call	10168c4 <OSTmr_Unlock>
             return (OS_TRUE);
 1016178:	00800044 	movi	r2,1
 101617c:	e0bfff15 	stw	r2,-4(fp)
 1016180:	00001206 	br	10161cc <OSTmrStop+0x220>

        case OS_TMR_STATE_COMPLETED:                              /* Timer has already completed the ONE-SHOT or ...  */
        case OS_TMR_STATE_STOPPED:                                /* ... timer has not started yet.                   */
             OSTmr_Unlock();
 1016184:	10168c40 	call	10168c4 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_STOPPED;
 1016188:	e0fffc17 	ldw	r3,-16(fp)
 101618c:	00bfe384 	movi	r2,-114
 1016190:	18800005 	stb	r2,0(r3)
             return (OS_TRUE);
 1016194:	00c00044 	movi	r3,1
 1016198:	e0ffff15 	stw	r3,-4(fp)
 101619c:	00000b06 	br	10161cc <OSTmrStop+0x220>

        case OS_TMR_STATE_UNUSED:                                 /* Timer was not created                            */
             OSTmr_Unlock();
 10161a0:	10168c40 	call	10168c4 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
 10161a4:	e0fffc17 	ldw	r3,-16(fp)
 10161a8:	00bfe1c4 	movi	r2,-121
 10161ac:	18800005 	stb	r2,0(r3)
             return (OS_FALSE);
 10161b0:	e03fff15 	stw	zero,-4(fp)
 10161b4:	00000506 	br	10161cc <OSTmrStop+0x220>

        default:
             OSTmr_Unlock();
 10161b8:	10168c40 	call	10168c4 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
 10161bc:	e0fffc17 	ldw	r3,-16(fp)
 10161c0:	00bfe344 	movi	r2,-115
 10161c4:	18800005 	stb	r2,0(r3)
             return (OS_FALSE);
 10161c8:	e03fff15 	stw	zero,-4(fp)
 10161cc:	e0bfff17 	ldw	r2,-4(fp)
    }
}
 10161d0:	e037883a 	mov	sp,fp
 10161d4:	dfc00117 	ldw	ra,4(sp)
 10161d8:	df000017 	ldw	fp,0(sp)
 10161dc:	dec00204 	addi	sp,sp,8
 10161e0:	f800283a 	ret

010161e4 <OSTmrSignal>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
INT8U  OSTmrSignal (void)
{
 10161e4:	f811883a 	mov	r8,ra
 10161e8:	100c3d80 	call	100c3d8 <_mcount>
 10161ec:	403f883a 	mov	ra,r8
 10161f0:	defffd04 	addi	sp,sp,-12
 10161f4:	dfc00215 	stw	ra,8(sp)
 10161f8:	df000115 	stw	fp,4(sp)
 10161fc:	df000104 	addi	fp,sp,4
    INT8U  err;


    err = OSSemPost(OSTmrSemSignal);
 1016200:	008040f4 	movhi	r2,259
 1016204:	10976704 	addi	r2,r2,23964
 1016208:	11000017 	ldw	r4,0(r2)
 101620c:	101311c0 	call	101311c <OSSemPost>
 1016210:	e0bfff05 	stb	r2,-4(fp)
    return (err);
 1016214:	e0bfff03 	ldbu	r2,-4(fp)
}
 1016218:	e037883a 	mov	sp,fp
 101621c:	dfc00117 	ldw	ra,4(sp)
 1016220:	df000017 	ldw	fp,0(sp)
 1016224:	dec00204 	addi	sp,sp,8
 1016228:	f800283a 	ret

0101622c <OSTmr_Alloc>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  OS_TMR  *OSTmr_Alloc (void)
{
 101622c:	f811883a 	mov	r8,ra
 1016230:	100c3d80 	call	100c3d8 <_mcount>
 1016234:	403f883a 	mov	ra,r8
 1016238:	defffd04 	addi	sp,sp,-12
 101623c:	df000215 	stw	fp,8(sp)
 1016240:	df000204 	addi	fp,sp,8
    OS_TMR *ptmr;


    if (OSTmrFreeList == (OS_TMR *)0) {
 1016244:	008040f4 	movhi	r2,259
 1016248:	10976504 	addi	r2,r2,23956
 101624c:	10800017 	ldw	r2,0(r2)
 1016250:	1004c03a 	cmpne	r2,r2,zero
 1016254:	1000021e 	bne	r2,zero,1016260 <OSTmr_Alloc+0x34>
        return ((OS_TMR *)0);
 1016258:	e03fff15 	stw	zero,-4(fp)
 101625c:	00002006 	br	10162e0 <OSTmr_Alloc+0xb4>
    }
    ptmr            = (OS_TMR *)OSTmrFreeList;
 1016260:	008040f4 	movhi	r2,259
 1016264:	10976504 	addi	r2,r2,23956
 1016268:	10800017 	ldw	r2,0(r2)
 101626c:	e0bffe15 	stw	r2,-8(fp)
    OSTmrFreeList   = (OS_TMR *)ptmr->OSTmrNext;
 1016270:	e0bffe17 	ldw	r2,-8(fp)
 1016274:	10800317 	ldw	r2,12(r2)
 1016278:	1007883a 	mov	r3,r2
 101627c:	008040f4 	movhi	r2,259
 1016280:	10976504 	addi	r2,r2,23956
 1016284:	10c00015 	stw	r3,0(r2)
    ptmr->OSTmrNext = (OS_TCB *)0;
 1016288:	e0bffe17 	ldw	r2,-8(fp)
 101628c:	10000315 	stw	zero,12(r2)
    ptmr->OSTmrPrev = (OS_TCB *)0;
 1016290:	e0bffe17 	ldw	r2,-8(fp)
 1016294:	10000415 	stw	zero,16(r2)
    OSTmrUsed++;
 1016298:	008040f4 	movhi	r2,259
 101629c:	10976a04 	addi	r2,r2,23976
 10162a0:	1080000b 	ldhu	r2,0(r2)
 10162a4:	10800044 	addi	r2,r2,1
 10162a8:	1007883a 	mov	r3,r2
 10162ac:	008040f4 	movhi	r2,259
 10162b0:	10976a04 	addi	r2,r2,23976
 10162b4:	10c0000d 	sth	r3,0(r2)
    OSTmrFree--;
 10162b8:	008040f4 	movhi	r2,259
 10162bc:	10976e04 	addi	r2,r2,23992
 10162c0:	1080000b 	ldhu	r2,0(r2)
 10162c4:	10bfffc4 	addi	r2,r2,-1
 10162c8:	1007883a 	mov	r3,r2
 10162cc:	008040f4 	movhi	r2,259
 10162d0:	10976e04 	addi	r2,r2,23992
 10162d4:	10c0000d 	sth	r3,0(r2)
    return (ptmr);
 10162d8:	e0bffe17 	ldw	r2,-8(fp)
 10162dc:	e0bfff15 	stw	r2,-4(fp)
 10162e0:	e0bfff17 	ldw	r2,-4(fp)
}
 10162e4:	e037883a 	mov	sp,fp
 10162e8:	df000017 	ldw	fp,0(sp)
 10162ec:	dec00104 	addi	sp,sp,4
 10162f0:	f800283a 	ret

010162f4 <OSTmr_Free>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Free (OS_TMR *ptmr)
{
 10162f4:	f811883a 	mov	r8,ra
 10162f8:	100c3d80 	call	100c3d8 <_mcount>
 10162fc:	403f883a 	mov	ra,r8
 1016300:	defffe04 	addi	sp,sp,-8
 1016304:	df000115 	stw	fp,4(sp)
 1016308:	df000104 	addi	fp,sp,4
 101630c:	e13fff15 	stw	r4,-4(fp)
    ptmr->OSTmrState       = OS_TMR_STATE_UNUSED;      /* Clear timer object fields                                   */
 1016310:	e0bfff17 	ldw	r2,-4(fp)
 1016314:	10000c45 	stb	zero,49(r2)
    ptmr->OSTmrOpt         = OS_TMR_OPT_NONE;
 1016318:	e0bfff17 	ldw	r2,-4(fp)
 101631c:	10000c05 	stb	zero,48(r2)
    ptmr->OSTmrPeriod      = 0;
 1016320:	e0bfff17 	ldw	r2,-4(fp)
 1016324:	10000715 	stw	zero,28(r2)
    ptmr->OSTmrMatch       = 0;
 1016328:	e0bfff17 	ldw	r2,-4(fp)
 101632c:	10000515 	stw	zero,20(r2)
    ptmr->OSTmrCallback    = (OS_TMR_CALLBACK)0;
 1016330:	e0bfff17 	ldw	r2,-4(fp)
 1016334:	10000115 	stw	zero,4(r2)
    ptmr->OSTmrCallbackArg = (void *)0;
 1016338:	e0bfff17 	ldw	r2,-4(fp)
 101633c:	10000215 	stw	zero,8(r2)
#if OS_TMR_CFG_NAME_SIZE > 1
    ptmr->OSTmrName[0]     = '?';                      /* Unknown name                                                */
 1016340:	e0ffff17 	ldw	r3,-4(fp)
 1016344:	00800fc4 	movi	r2,63
 1016348:	18800805 	stb	r2,32(r3)
    ptmr->OSTmrName[1]     = OS_ASCII_NUL;
 101634c:	e0bfff17 	ldw	r2,-4(fp)
 1016350:	10000845 	stb	zero,33(r2)
#endif

    ptmr->OSTmrPrev        = (OS_TCB *)0;              /* Chain timer to free list                                    */
 1016354:	e0bfff17 	ldw	r2,-4(fp)
 1016358:	10000415 	stw	zero,16(r2)
    ptmr->OSTmrNext        = OSTmrFreeList;
 101635c:	008040f4 	movhi	r2,259
 1016360:	10976504 	addi	r2,r2,23956
 1016364:	10c00017 	ldw	r3,0(r2)
 1016368:	e0bfff17 	ldw	r2,-4(fp)
 101636c:	10c00315 	stw	r3,12(r2)
    OSTmrFreeList          = ptmr;
 1016370:	00c040f4 	movhi	r3,259
 1016374:	18d76504 	addi	r3,r3,23956
 1016378:	e0bfff17 	ldw	r2,-4(fp)
 101637c:	18800015 	stw	r2,0(r3)

    OSTmrUsed--;                                       /* Update timer object statistics                              */
 1016380:	008040f4 	movhi	r2,259
 1016384:	10976a04 	addi	r2,r2,23976
 1016388:	1080000b 	ldhu	r2,0(r2)
 101638c:	10bfffc4 	addi	r2,r2,-1
 1016390:	1007883a 	mov	r3,r2
 1016394:	008040f4 	movhi	r2,259
 1016398:	10976a04 	addi	r2,r2,23976
 101639c:	10c0000d 	sth	r3,0(r2)
    OSTmrFree++;
 10163a0:	008040f4 	movhi	r2,259
 10163a4:	10976e04 	addi	r2,r2,23992
 10163a8:	1080000b 	ldhu	r2,0(r2)
 10163ac:	10800044 	addi	r2,r2,1
 10163b0:	1007883a 	mov	r3,r2
 10163b4:	008040f4 	movhi	r2,259
 10163b8:	10976e04 	addi	r2,r2,23992
 10163bc:	10c0000d 	sth	r3,0(r2)
}
 10163c0:	e037883a 	mov	sp,fp
 10163c4:	df000017 	ldw	fp,0(sp)
 10163c8:	dec00104 	addi	sp,sp,4
 10163cc:	f800283a 	ret

010163d0 <OSTmr_Init>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
void  OSTmr_Init (void)
{
 10163d0:	f811883a 	mov	r8,ra
 10163d4:	100c3d80 	call	100c3d8 <_mcount>
 10163d8:	403f883a 	mov	ra,r8
 10163dc:	defffb04 	addi	sp,sp,-20
 10163e0:	dfc00415 	stw	ra,16(sp)
 10163e4:	df000315 	stw	fp,12(sp)
 10163e8:	df000304 	addi	fp,sp,12
    INT16U   i;
    OS_TMR  *ptmr1;
    OS_TMR  *ptmr2;


    OS_MemClr((INT8U *)&OSTmrTbl[0],      sizeof(OSTmrTbl));            /* Clear all the TMRs                         */
 10163ec:	01004134 	movhi	r4,260
 10163f0:	21187c04 	addi	r4,r4,25072
 10163f4:	0140d004 	movi	r5,832
 10163f8:	100e86c0 	call	100e86c <OS_MemClr>
    OS_MemClr((INT8U *)&OSTmrWheelTbl[0], sizeof(OSTmrWheelTbl));       /* Clear the timer wheel                      */
 10163fc:	01004134 	movhi	r4,260
 1016400:	21179c04 	addi	r4,r4,24176
 1016404:	01400404 	movi	r5,16
 1016408:	100e86c0 	call	100e86c <OS_MemClr>

    ptmr1 = &OSTmrTbl[0];
 101640c:	00804134 	movhi	r2,260
 1016410:	10987c04 	addi	r2,r2,25072
 1016414:	e0bffe15 	stw	r2,-8(fp)
    ptmr2 = &OSTmrTbl[1];
 1016418:	00804134 	movhi	r2,260
 101641c:	10988904 	addi	r2,r2,25124
 1016420:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_TMR_CFG_MAX - 1); i++) {                        /* Init. list of free TMRs                    */
 1016424:	e03fff0d 	sth	zero,-4(fp)
 1016428:	00001606 	br	1016484 <OSTmr_Init+0xb4>
        ptmr1->OSTmrType    = OS_TMR_TYPE;
 101642c:	e0fffe17 	ldw	r3,-8(fp)
 1016430:	00801904 	movi	r2,100
 1016434:	18800005 	stb	r2,0(r3)
        ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                      /* Indicate that timer is inactive            */
 1016438:	e0bffe17 	ldw	r2,-8(fp)
 101643c:	10000c45 	stb	zero,49(r2)
        ptmr1->OSTmrNext    = (void *)ptmr2;                            /* Link to next timer                         */
 1016440:	e0fffe17 	ldw	r3,-8(fp)
 1016444:	e0bffd17 	ldw	r2,-12(fp)
 1016448:	18800315 	stw	r2,12(r3)
#if OS_TMR_CFG_NAME_SIZE > 1
        ptmr1->OSTmrName[0] = '?';                                      /* Unknown name                               */
 101644c:	e0fffe17 	ldw	r3,-8(fp)
 1016450:	00800fc4 	movi	r2,63
 1016454:	18800805 	stb	r2,32(r3)
        ptmr1->OSTmrName[1] = OS_ASCII_NUL;
 1016458:	e0bffe17 	ldw	r2,-8(fp)
 101645c:	10000845 	stb	zero,33(r2)
#endif
        ptmr1++;
 1016460:	e0bffe17 	ldw	r2,-8(fp)
 1016464:	10800d04 	addi	r2,r2,52
 1016468:	e0bffe15 	stw	r2,-8(fp)
        ptmr2++;
 101646c:	e0bffd17 	ldw	r2,-12(fp)
 1016470:	10800d04 	addi	r2,r2,52
 1016474:	e0bffd15 	stw	r2,-12(fp)
    OS_MemClr((INT8U *)&OSTmrTbl[0],      sizeof(OSTmrTbl));            /* Clear all the TMRs                         */
    OS_MemClr((INT8U *)&OSTmrWheelTbl[0], sizeof(OSTmrWheelTbl));       /* Clear the timer wheel                      */

    ptmr1 = &OSTmrTbl[0];
    ptmr2 = &OSTmrTbl[1];
    for (i = 0; i < (OS_TMR_CFG_MAX - 1); i++) {                        /* Init. list of free TMRs                    */
 1016478:	e0bfff0b 	ldhu	r2,-4(fp)
 101647c:	10800044 	addi	r2,r2,1
 1016480:	e0bfff0d 	sth	r2,-4(fp)
 1016484:	e0bfff0b 	ldhu	r2,-4(fp)
 1016488:	108003f0 	cmpltui	r2,r2,15
 101648c:	103fe71e 	bne	r2,zero,101642c <OSTmr_Init+0x5c>
        ptmr1->OSTmrName[1] = OS_ASCII_NUL;
#endif
        ptmr1++;
        ptmr2++;
    }
    ptmr1->OSTmrType    = OS_TMR_TYPE;
 1016490:	e0fffe17 	ldw	r3,-8(fp)
 1016494:	00801904 	movi	r2,100
 1016498:	18800005 	stb	r2,0(r3)
    ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                          /* Indicate that timer is inactive            */
 101649c:	e0bffe17 	ldw	r2,-8(fp)
 10164a0:	10000c45 	stb	zero,49(r2)
    ptmr1->OSTmrNext    = (void *)0;                                    /* Last OS_TMR                                */
 10164a4:	e0bffe17 	ldw	r2,-8(fp)
 10164a8:	10000315 	stw	zero,12(r2)
#if OS_TMR_CFG_NAME_SIZE > 1
    ptmr1->OSTmrName[0] = '?';                                          /* Unknown name                               */
 10164ac:	e0fffe17 	ldw	r3,-8(fp)
 10164b0:	00800fc4 	movi	r2,63
 10164b4:	18800805 	stb	r2,32(r3)
    ptmr1->OSTmrName[1] = OS_ASCII_NUL;
 10164b8:	e0bffe17 	ldw	r2,-8(fp)
 10164bc:	10000845 	stb	zero,33(r2)
#endif
    OSTmrTime           = 0;
 10164c0:	008040f4 	movhi	r2,259
 10164c4:	10977904 	addi	r2,r2,24036
 10164c8:	10000015 	stw	zero,0(r2)
    OSTmrUsed           = 0;
 10164cc:	008040f4 	movhi	r2,259
 10164d0:	10976a04 	addi	r2,r2,23976
 10164d4:	1000000d 	sth	zero,0(r2)
    OSTmrFree           = OS_TMR_CFG_MAX;
 10164d8:	00c040f4 	movhi	r3,259
 10164dc:	18d76e04 	addi	r3,r3,23992
 10164e0:	00800404 	movi	r2,16
 10164e4:	1880000d 	sth	r2,0(r3)
    OSTmrFreeList       = &OSTmrTbl[0];
 10164e8:	00c040f4 	movhi	r3,259
 10164ec:	18d76504 	addi	r3,r3,23956
 10164f0:	00804134 	movhi	r2,260
 10164f4:	10987c04 	addi	r2,r2,25072
 10164f8:	18800015 	stw	r2,0(r3)
    OSTmrSem            = OSSemCreate(1);
 10164fc:	01000044 	movi	r4,1
 1016500:	10129400 	call	1012940 <OSSemCreate>
 1016504:	1007883a 	mov	r3,r2
 1016508:	008040f4 	movhi	r2,259
 101650c:	10977b04 	addi	r2,r2,24044
 1016510:	10c00015 	stw	r3,0(r2)
    OSTmrSemSignal      = OSSemCreate(0);
 1016514:	0009883a 	mov	r4,zero
 1016518:	10129400 	call	1012940 <OSSemCreate>
 101651c:	1007883a 	mov	r3,r2
 1016520:	008040f4 	movhi	r2,259
 1016524:	10976704 	addi	r2,r2,23964
 1016528:	10c00015 	stw	r3,0(r2)

#if OS_EVENT_NAME_SIZE > 18
    OSEventNameSet(OSTmrSem,       (INT8U *)"uC/OS-II TmrLock",   &err);/* Assign names to semaphores                 */
 101652c:	008040f4 	movhi	r2,259
 1016530:	10977b04 	addi	r2,r2,24044
 1016534:	11000017 	ldw	r4,0(r2)
 1016538:	014040b4 	movhi	r5,258
 101653c:	2968ba04 	addi	r5,r5,-23832
 1016540:	e1bfff84 	addi	r6,fp,-2
 1016544:	100cef80 	call	100cef8 <OSEventNameSet>
    OSEventNameSet(OSTmrSem,       (INT8U *)"OS-TmrLock",         &err);
#endif
#endif

#if OS_EVENT_NAME_SIZE > 18
    OSEventNameSet(OSTmrSemSignal, (INT8U *)"uC/OS-II TmrSignal", &err);
 1016548:	008040f4 	movhi	r2,259
 101654c:	10976704 	addi	r2,r2,23964
 1016550:	11000017 	ldw	r4,0(r2)
 1016554:	014040b4 	movhi	r5,258
 1016558:	2968bf04 	addi	r5,r5,-23812
 101655c:	e1bfff84 	addi	r6,fp,-2
 1016560:	100cef80 	call	100cef8 <OSEventNameSet>
#if OS_EVENT_NAME_SIZE > 10
    OSEventNameSet(OSTmrSemSignal, (INT8U *)"OS-TmrSig",          &err);
#endif
#endif

    OSTmr_InitTask();
 1016564:	101657c0 	call	101657c <OSTmr_InitTask>
}
 1016568:	e037883a 	mov	sp,fp
 101656c:	dfc00117 	ldw	ra,4(sp)
 1016570:	df000017 	ldw	fp,0(sp)
 1016574:	dec00204 	addi	sp,sp,8
 1016578:	f800283a 	ret

0101657c <OSTmr_InitTask>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_InitTask (void)
{
 101657c:	f811883a 	mov	r8,ra
 1016580:	100c3d80 	call	100c3d8 <_mcount>
 1016584:	403f883a 	mov	ra,r8
 1016588:	defff804 	addi	sp,sp,-32
 101658c:	dfc00715 	stw	ra,28(sp)
 1016590:	df000615 	stw	fp,24(sp)
 1016594:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OSTmr_Task,
 1016598:	01804174 	movhi	r6,261
 101659c:	31a0cf04 	addi	r6,r6,-31940
 10165a0:	00bfff54 	movui	r2,65533
 10165a4:	d8800015 	stw	r2,0(sp)
 10165a8:	00804134 	movhi	r2,260
 10165ac:	109ed004 	addi	r2,r2,31552
 10165b0:	d8800115 	stw	r2,4(sp)
 10165b4:	00808004 	movi	r2,512
 10165b8:	d8800215 	stw	r2,8(sp)
 10165bc:	d8000315 	stw	zero,12(sp)
 10165c0:	008000c4 	movi	r2,3
 10165c4:	d8800415 	stw	r2,16(sp)
 10165c8:	01004074 	movhi	r4,257
 10165cc:	211a4104 	addi	r4,r4,26884
 10165d0:	000b883a 	mov	r5,zero
 10165d4:	000f883a 	mov	r7,zero
 10165d8:	1013bfc0 	call	1013bfc <OSTaskCreateExt>
                       OS_TASK_TMR_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 12
    OSTaskNameSet(OS_TASK_TMR_PRIO, (INT8U *)"uC/OS-II Tmr", &err);
 10165dc:	014040b4 	movhi	r5,258
 10165e0:	2968c404 	addi	r5,r5,-23792
 10165e4:	0009883a 	mov	r4,zero
 10165e8:	e1bfff04 	addi	r6,fp,-4
 10165ec:	10145600 	call	1014560 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 6
    OSTaskNameSet(OS_TASK_TMR_PRIO, (INT8U *)"OS-Tmr", &err);
#endif
#endif
}
 10165f0:	e037883a 	mov	sp,fp
 10165f4:	dfc00117 	ldw	ra,4(sp)
 10165f8:	df000017 	ldw	fp,0(sp)
 10165fc:	dec00204 	addi	sp,sp,8
 1016600:	f800283a 	ret

01016604 <OSTmr_Link>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Link (OS_TMR *ptmr, INT8U type)
{
 1016604:	f811883a 	mov	r8,ra
 1016608:	100c3d80 	call	100c3d8 <_mcount>
 101660c:	403f883a 	mov	ra,r8
 1016610:	defffa04 	addi	sp,sp,-24
 1016614:	df000515 	stw	fp,20(sp)
 1016618:	df000504 	addi	fp,sp,20
 101661c:	e13ffe15 	stw	r4,-8(fp)
 1016620:	e17fff05 	stb	r5,-4(fp)
    OS_TMR       *ptmr1;
    OS_TMR_WHEEL *pspoke;
    INT16U        spoke;


    ptmr->OSTmrState = OS_TMR_STATE_RUNNING;
 1016624:	e0fffe17 	ldw	r3,-8(fp)
 1016628:	008000c4 	movi	r2,3
 101662c:	18800c45 	stb	r2,49(r3)
    if (type == OS_TMR_LINK_PERIODIC) {                            /* Determine when timer will expire                */
 1016630:	e0bfff03 	ldbu	r2,-4(fp)
 1016634:	10800058 	cmpnei	r2,r2,1
 1016638:	1000091e 	bne	r2,zero,1016660 <OSTmr_Link+0x5c>
        ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
 101663c:	e0bffe17 	ldw	r2,-8(fp)
 1016640:	10c00717 	ldw	r3,28(r2)
 1016644:	008040f4 	movhi	r2,259
 1016648:	10977904 	addi	r2,r2,24036
 101664c:	10800017 	ldw	r2,0(r2)
 1016650:	1887883a 	add	r3,r3,r2
 1016654:	e0bffe17 	ldw	r2,-8(fp)
 1016658:	10c00515 	stw	r3,20(r2)
 101665c:	00001506 	br	10166b4 <OSTmr_Link+0xb0>
    } else {
        if (ptmr->OSTmrDly == 0) {
 1016660:	e0bffe17 	ldw	r2,-8(fp)
 1016664:	10800617 	ldw	r2,24(r2)
 1016668:	1004c03a 	cmpne	r2,r2,zero
 101666c:	1000091e 	bne	r2,zero,1016694 <OSTmr_Link+0x90>
            ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
 1016670:	e0bffe17 	ldw	r2,-8(fp)
 1016674:	10c00717 	ldw	r3,28(r2)
 1016678:	008040f4 	movhi	r2,259
 101667c:	10977904 	addi	r2,r2,24036
 1016680:	10800017 	ldw	r2,0(r2)
 1016684:	1887883a 	add	r3,r3,r2
 1016688:	e0bffe17 	ldw	r2,-8(fp)
 101668c:	10c00515 	stw	r3,20(r2)
 1016690:	00000806 	br	10166b4 <OSTmr_Link+0xb0>
        } else {
            ptmr->OSTmrMatch = ptmr->OSTmrDly    + OSTmrTime;
 1016694:	e0bffe17 	ldw	r2,-8(fp)
 1016698:	10c00617 	ldw	r3,24(r2)
 101669c:	008040f4 	movhi	r2,259
 10166a0:	10977904 	addi	r2,r2,24036
 10166a4:	10800017 	ldw	r2,0(r2)
 10166a8:	1887883a 	add	r3,r3,r2
 10166ac:	e0bffe17 	ldw	r2,-8(fp)
 10166b0:	10c00515 	stw	r3,20(r2)
        }
    }
    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
 10166b4:	e0bffe17 	ldw	r2,-8(fp)
 10166b8:	10800517 	ldw	r2,20(r2)
 10166bc:	1080004c 	andi	r2,r2,1
 10166c0:	e0bffb0d 	sth	r2,-20(fp)
    pspoke = &OSTmrWheelTbl[spoke];
 10166c4:	e0bffb0b 	ldhu	r2,-20(fp)
 10166c8:	100490fa 	slli	r2,r2,3
 10166cc:	1007883a 	mov	r3,r2
 10166d0:	00804134 	movhi	r2,260
 10166d4:	10979c04 	addi	r2,r2,24176
 10166d8:	1885883a 	add	r2,r3,r2
 10166dc:	e0bffc15 	stw	r2,-16(fp)

    if (pspoke->OSTmrFirst == (OS_TMR *)0) {                       /* Link into timer wheel                           */
 10166e0:	e0bffc17 	ldw	r2,-16(fp)
 10166e4:	10800017 	ldw	r2,0(r2)
 10166e8:	1004c03a 	cmpne	r2,r2,zero
 10166ec:	1000091e 	bne	r2,zero,1016714 <OSTmr_Link+0x110>
        pspoke->OSTmrFirst   = ptmr;
 10166f0:	e0fffc17 	ldw	r3,-16(fp)
 10166f4:	e0bffe17 	ldw	r2,-8(fp)
 10166f8:	18800015 	stw	r2,0(r3)
        ptmr->OSTmrNext      = (OS_TMR *)0;
 10166fc:	e0bffe17 	ldw	r2,-8(fp)
 1016700:	10000315 	stw	zero,12(r2)
        pspoke->OSTmrEntries = 1;
 1016704:	e0fffc17 	ldw	r3,-16(fp)
 1016708:	00800044 	movi	r2,1
 101670c:	1880010d 	sth	r2,4(r3)
 1016710:	00001206 	br	101675c <OSTmr_Link+0x158>
    } else {
        ptmr1                = pspoke->OSTmrFirst;                 /* Point to first timer in the spoke               */
 1016714:	e0bffc17 	ldw	r2,-16(fp)
 1016718:	10800017 	ldw	r2,0(r2)
 101671c:	e0bffd15 	stw	r2,-12(fp)
        pspoke->OSTmrFirst   = ptmr;
 1016720:	e0fffc17 	ldw	r3,-16(fp)
 1016724:	e0bffe17 	ldw	r2,-8(fp)
 1016728:	18800015 	stw	r2,0(r3)
        ptmr->OSTmrNext      = (void *)ptmr1;
 101672c:	e0fffe17 	ldw	r3,-8(fp)
 1016730:	e0bffd17 	ldw	r2,-12(fp)
 1016734:	18800315 	stw	r2,12(r3)
        ptmr1->OSTmrPrev     = (void *)ptmr;
 1016738:	e0fffd17 	ldw	r3,-12(fp)
 101673c:	e0bffe17 	ldw	r2,-8(fp)
 1016740:	18800415 	stw	r2,16(r3)
        pspoke->OSTmrEntries++;
 1016744:	e0bffc17 	ldw	r2,-16(fp)
 1016748:	1080010b 	ldhu	r2,4(r2)
 101674c:	10800044 	addi	r2,r2,1
 1016750:	1007883a 	mov	r3,r2
 1016754:	e0bffc17 	ldw	r2,-16(fp)
 1016758:	10c0010d 	sth	r3,4(r2)
    }
    ptmr->OSTmrPrev = (void *)0;                                   /* Timer always inserted as first node in list     */
 101675c:	e0bffe17 	ldw	r2,-8(fp)
 1016760:	10000415 	stw	zero,16(r2)
}
 1016764:	e037883a 	mov	sp,fp
 1016768:	df000017 	ldw	fp,0(sp)
 101676c:	dec00104 	addi	sp,sp,4
 1016770:	f800283a 	ret

01016774 <OSTmr_Unlink>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Unlink (OS_TMR *ptmr)
{
 1016774:	f811883a 	mov	r8,ra
 1016778:	100c3d80 	call	100c3d8 <_mcount>
 101677c:	403f883a 	mov	ra,r8
 1016780:	defffa04 	addi	sp,sp,-24
 1016784:	df000515 	stw	fp,20(sp)
 1016788:	df000504 	addi	fp,sp,20
 101678c:	e13fff15 	stw	r4,-4(fp)
    OS_TMR        *ptmr2;
    OS_TMR_WHEEL  *pspoke;
    INT16U         spoke;


    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
 1016790:	e0bfff17 	ldw	r2,-4(fp)
 1016794:	10800517 	ldw	r2,20(r2)
 1016798:	1080004c 	andi	r2,r2,1
 101679c:	e0bffb0d 	sth	r2,-20(fp)
    pspoke = &OSTmrWheelTbl[spoke];
 10167a0:	e0bffb0b 	ldhu	r2,-20(fp)
 10167a4:	100490fa 	slli	r2,r2,3
 10167a8:	1007883a 	mov	r3,r2
 10167ac:	00804134 	movhi	r2,260
 10167b0:	10979c04 	addi	r2,r2,24176
 10167b4:	1885883a 	add	r2,r3,r2
 10167b8:	e0bffc15 	stw	r2,-16(fp)

    if (pspoke->OSTmrFirst == ptmr) {                       /* See if timer to remove is at the beginning of list     */
 10167bc:	e0bffc17 	ldw	r2,-16(fp)
 10167c0:	10c00017 	ldw	r3,0(r2)
 10167c4:	e0bfff17 	ldw	r2,-4(fp)
 10167c8:	18800c1e 	bne	r3,r2,10167fc <OSTmr_Unlink+0x88>
        ptmr1              = (OS_TMR *)ptmr->OSTmrNext;
 10167cc:	e0bfff17 	ldw	r2,-4(fp)
 10167d0:	10800317 	ldw	r2,12(r2)
 10167d4:	e0bffe15 	stw	r2,-8(fp)
        pspoke->OSTmrFirst = (OS_TMR *)ptmr1;
 10167d8:	e0fffc17 	ldw	r3,-16(fp)
 10167dc:	e0bffe17 	ldw	r2,-8(fp)
 10167e0:	18800015 	stw	r2,0(r3)
        if (ptmr1 != (OS_TMR *)0) {
 10167e4:	e0bffe17 	ldw	r2,-8(fp)
 10167e8:	1005003a 	cmpeq	r2,r2,zero
 10167ec:	1000121e 	bne	r2,zero,1016838 <OSTmr_Unlink+0xc4>
            ptmr1->OSTmrPrev = (void *)0;
 10167f0:	e0bffe17 	ldw	r2,-8(fp)
 10167f4:	10000415 	stw	zero,16(r2)
 10167f8:	00000f06 	br	1016838 <OSTmr_Unlink+0xc4>
        }
    } else {
        ptmr1            = (OS_TMR *)ptmr->OSTmrPrev;       /* Remove timer from somewhere in the list                */
 10167fc:	e0bfff17 	ldw	r2,-4(fp)
 1016800:	10800417 	ldw	r2,16(r2)
 1016804:	e0bffe15 	stw	r2,-8(fp)
        ptmr2            = (OS_TMR *)ptmr->OSTmrNext;
 1016808:	e0bfff17 	ldw	r2,-4(fp)
 101680c:	10800317 	ldw	r2,12(r2)
 1016810:	e0bffd15 	stw	r2,-12(fp)
        ptmr1->OSTmrNext = ptmr2;
 1016814:	e0fffe17 	ldw	r3,-8(fp)
 1016818:	e0bffd17 	ldw	r2,-12(fp)
 101681c:	18800315 	stw	r2,12(r3)
        if (ptmr2 != (OS_TMR *)0) {
 1016820:	e0bffd17 	ldw	r2,-12(fp)
 1016824:	1005003a 	cmpeq	r2,r2,zero
 1016828:	1000031e 	bne	r2,zero,1016838 <OSTmr_Unlink+0xc4>
            ptmr2->OSTmrPrev = (void *)ptmr1;
 101682c:	e0fffd17 	ldw	r3,-12(fp)
 1016830:	e0bffe17 	ldw	r2,-8(fp)
 1016834:	18800415 	stw	r2,16(r3)
        }
    }
    ptmr->OSTmrState = OS_TMR_STATE_STOPPED;
 1016838:	e0ffff17 	ldw	r3,-4(fp)
 101683c:	00800044 	movi	r2,1
 1016840:	18800c45 	stb	r2,49(r3)
    ptmr->OSTmrNext  = (void *)0;
 1016844:	e0bfff17 	ldw	r2,-4(fp)
 1016848:	10000315 	stw	zero,12(r2)
    ptmr->OSTmrPrev  = (void *)0;
 101684c:	e0bfff17 	ldw	r2,-4(fp)
 1016850:	10000415 	stw	zero,16(r2)
    pspoke->OSTmrEntries--;
 1016854:	e0bffc17 	ldw	r2,-16(fp)
 1016858:	1080010b 	ldhu	r2,4(r2)
 101685c:	10bfffc4 	addi	r2,r2,-1
 1016860:	1007883a 	mov	r3,r2
 1016864:	e0bffc17 	ldw	r2,-16(fp)
 1016868:	10c0010d 	sth	r3,4(r2)
}
 101686c:	e037883a 	mov	sp,fp
 1016870:	df000017 	ldw	fp,0(sp)
 1016874:	dec00104 	addi	sp,sp,4
 1016878:	f800283a 	ret

0101687c <OSTmr_Lock>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Lock (void)
{
 101687c:	f811883a 	mov	r8,ra
 1016880:	100c3d80 	call	100c3d8 <_mcount>
 1016884:	403f883a 	mov	ra,r8
 1016888:	defffd04 	addi	sp,sp,-12
 101688c:	dfc00215 	stw	ra,8(sp)
 1016890:	df000115 	stw	fp,4(sp)
 1016894:	df000104 	addi	fp,sp,4
    INT8U  err;


    OSSemPend(OSTmrSem, 0, &err);
 1016898:	008040f4 	movhi	r2,259
 101689c:	10977b04 	addi	r2,r2,24044
 10168a0:	11000017 	ldw	r4,0(r2)
 10168a4:	000b883a 	mov	r5,zero
 10168a8:	e1bfff04 	addi	r6,fp,-4
 10168ac:	1012d0c0 	call	1012d0c <OSSemPend>
    (void)err;
}
 10168b0:	e037883a 	mov	sp,fp
 10168b4:	dfc00117 	ldw	ra,4(sp)
 10168b8:	df000017 	ldw	fp,0(sp)
 10168bc:	dec00204 	addi	sp,sp,8
 10168c0:	f800283a 	ret

010168c4 <OSTmr_Unlock>:



#if OS_TMR_EN > 0
static  void  OSTmr_Unlock (void)
{
 10168c4:	f811883a 	mov	r8,ra
 10168c8:	100c3d80 	call	100c3d8 <_mcount>
 10168cc:	403f883a 	mov	ra,r8
 10168d0:	defffe04 	addi	sp,sp,-8
 10168d4:	dfc00115 	stw	ra,4(sp)
 10168d8:	df000015 	stw	fp,0(sp)
 10168dc:	d839883a 	mov	fp,sp
    (void)OSSemPost(OSTmrSem);
 10168e0:	008040f4 	movhi	r2,259
 10168e4:	10977b04 	addi	r2,r2,24044
 10168e8:	11000017 	ldw	r4,0(r2)
 10168ec:	101311c0 	call	101311c <OSSemPost>
}
 10168f0:	e037883a 	mov	sp,fp
 10168f4:	dfc00117 	ldw	ra,4(sp)
 10168f8:	df000017 	ldw	fp,0(sp)
 10168fc:	dec00204 	addi	sp,sp,8
 1016900:	f800283a 	ret

01016904 <OSTmr_Task>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Task (void *p_arg)
{
 1016904:	f811883a 	mov	r8,ra
 1016908:	100c3d80 	call	100c3d8 <_mcount>
 101690c:	403f883a 	mov	ra,r8
 1016910:	defff704 	addi	sp,sp,-36
 1016914:	dfc00815 	stw	ra,32(sp)
 1016918:	df000715 	stw	fp,28(sp)
 101691c:	df000704 	addi	fp,sp,28
 1016920:	e13fff15 	stw	r4,-4(fp)
    INT16U           spoke;


    (void)p_arg;                                                 /* Not using 'p_arg', prevent compiler warning       */
    for (;;) {
        OSSemPend(OSTmrSemSignal, 0, &err);                      /* Wait for signal indicating time to update timers  */
 1016924:	008040f4 	movhi	r2,259
 1016928:	10976704 	addi	r2,r2,23964
 101692c:	11000017 	ldw	r4,0(r2)
 1016930:	e1bffe04 	addi	r6,fp,-8
 1016934:	000b883a 	mov	r5,zero
 1016938:	1012d0c0 	call	1012d0c <OSSemPend>
        OSTmr_Lock();
 101693c:	101687c0 	call	101687c <OSTmr_Lock>
        OSTmrTime++;                                             /* Increment the current time                        */
 1016940:	008040f4 	movhi	r2,259
 1016944:	10977904 	addi	r2,r2,24036
 1016948:	10800017 	ldw	r2,0(r2)
 101694c:	10c00044 	addi	r3,r2,1
 1016950:	008040f4 	movhi	r2,259
 1016954:	10977904 	addi	r2,r2,24036
 1016958:	10c00015 	stw	r3,0(r2)
        spoke  = (INT16U)(OSTmrTime % OS_TMR_CFG_WHEEL_SIZE);    /* Position on current timer wheel entry             */
 101695c:	008040f4 	movhi	r2,259
 1016960:	10977904 	addi	r2,r2,24036
 1016964:	10800017 	ldw	r2,0(r2)
 1016968:	1080004c 	andi	r2,r2,1
 101696c:	e0bff90d 	sth	r2,-28(fp)
        pspoke = &OSTmrWheelTbl[spoke];
 1016970:	e0bff90b 	ldhu	r2,-28(fp)
 1016974:	100490fa 	slli	r2,r2,3
 1016978:	1007883a 	mov	r3,r2
 101697c:	00804134 	movhi	r2,260
 1016980:	10979c04 	addi	r2,r2,24176
 1016984:	1885883a 	add	r2,r3,r2
 1016988:	e0bffa15 	stw	r2,-24(fp)
        ptmr   = pspoke->OSTmrFirst;
 101698c:	e0bffa17 	ldw	r2,-24(fp)
 1016990:	10800017 	ldw	r2,0(r2)
 1016994:	e0bffd15 	stw	r2,-12(fp)
        while (ptmr != (OS_TMR *)0) {
 1016998:	00002406 	br	1016a2c <OSTmr_Task+0x128>
            ptmr_next = (OS_TMR *)ptmr->OSTmrNext;               /* Point to next timer to update because current ... */
 101699c:	e0bffd17 	ldw	r2,-12(fp)
 10169a0:	10800317 	ldw	r2,12(r2)
 10169a4:	e0bffc15 	stw	r2,-16(fp)
                                                                 /* ... timer could get unlinked from the wheel.      */
            if (OSTmrTime == ptmr->OSTmrMatch) {                 /* Process each timer that expires                   */
 10169a8:	e0bffd17 	ldw	r2,-12(fp)
 10169ac:	10c00517 	ldw	r3,20(r2)
 10169b0:	008040f4 	movhi	r2,259
 10169b4:	10977904 	addi	r2,r2,24036
 10169b8:	10800017 	ldw	r2,0(r2)
 10169bc:	1880191e 	bne	r3,r2,1016a24 <OSTmr_Task+0x120>
                pfnct = ptmr->OSTmrCallback;                     /* Execute callback function if available            */
 10169c0:	e0bffd17 	ldw	r2,-12(fp)
 10169c4:	10800117 	ldw	r2,4(r2)
 10169c8:	e0bffb15 	stw	r2,-20(fp)
                if (pfnct != (OS_TMR_CALLBACK)0) {
 10169cc:	e0bffb17 	ldw	r2,-20(fp)
 10169d0:	1005003a 	cmpeq	r2,r2,zero
 10169d4:	1000051e 	bne	r2,zero,10169ec <OSTmr_Task+0xe8>
                    (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);
 10169d8:	e0bffd17 	ldw	r2,-12(fp)
 10169dc:	11400217 	ldw	r5,8(r2)
 10169e0:	e0bffb17 	ldw	r2,-20(fp)
 10169e4:	e13ffd17 	ldw	r4,-12(fp)
 10169e8:	103ee83a 	callr	r2
                }
                OSTmr_Unlink(ptmr);                              /* Remove from current wheel spoke                   */
 10169ec:	e13ffd17 	ldw	r4,-12(fp)
 10169f0:	10167740 	call	1016774 <OSTmr_Unlink>
                if (ptmr->OSTmrOpt == OS_TMR_OPT_PERIODIC) {
 10169f4:	e0bffd17 	ldw	r2,-12(fp)
 10169f8:	10800c03 	ldbu	r2,48(r2)
 10169fc:	10803fcc 	andi	r2,r2,255
 1016a00:	10800098 	cmpnei	r2,r2,2
 1016a04:	1000041e 	bne	r2,zero,1016a18 <OSTmr_Task+0x114>
                    OSTmr_Link(ptmr, OS_TMR_LINK_PERIODIC);      /* Recalculate new position of timer in wheel        */
 1016a08:	e13ffd17 	ldw	r4,-12(fp)
 1016a0c:	01400044 	movi	r5,1
 1016a10:	10166040 	call	1016604 <OSTmr_Link>
 1016a14:	00000306 	br	1016a24 <OSTmr_Task+0x120>
                } else {
                    ptmr->OSTmrState = OS_TMR_STATE_COMPLETED;   /* Indicate that the timer has completed             */
 1016a18:	e0fffd17 	ldw	r3,-12(fp)
 1016a1c:	00800084 	movi	r2,2
 1016a20:	18800c45 	stb	r2,49(r3)
                }
            }
            ptmr = ptmr_next;
 1016a24:	e0bffc17 	ldw	r2,-16(fp)
 1016a28:	e0bffd15 	stw	r2,-12(fp)
        OSTmr_Lock();
        OSTmrTime++;                                             /* Increment the current time                        */
        spoke  = (INT16U)(OSTmrTime % OS_TMR_CFG_WHEEL_SIZE);    /* Position on current timer wheel entry             */
        pspoke = &OSTmrWheelTbl[spoke];
        ptmr   = pspoke->OSTmrFirst;
        while (ptmr != (OS_TMR *)0) {
 1016a2c:	e0bffd17 	ldw	r2,-12(fp)
 1016a30:	1004c03a 	cmpne	r2,r2,zero
 1016a34:	103fd91e 	bne	r2,zero,101699c <OSTmr_Task+0x98>
                    ptmr->OSTmrState = OS_TMR_STATE_COMPLETED;   /* Indicate that the timer has completed             */
                }
            }
            ptmr = ptmr_next;
        }
        OSTmr_Unlock();
 1016a38:	10168c40 	call	10168c4 <OSTmr_Unlock>
    }
 1016a3c:	003fb906 	br	1016924 <OSTmr_Task+0x20>

01016a40 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 1016a40:	f811883a 	mov	r8,ra
 1016a44:	100c3d80 	call	100c3d8 <_mcount>
 1016a48:	403f883a 	mov	ra,r8
 1016a4c:	defffd04 	addi	sp,sp,-12
 1016a50:	dfc00215 	stw	ra,8(sp)
 1016a54:	df000115 	stw	fp,4(sp)
 1016a58:	df000104 	addi	fp,sp,4
 1016a5c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU_0, cpu_0);
 1016a60:	10190440 	call	1019044 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 1016a64:	00800044 	movi	r2,1
 1016a68:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 1016a6c:	e037883a 	mov	sp,fp
 1016a70:	dfc00117 	ldw	ra,4(sp)
 1016a74:	df000017 	ldw	fp,0(sp)
 1016a78:	dec00204 	addi	sp,sp,8
 1016a7c:	f800283a 	ret

01016a80 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 1016a80:	f811883a 	mov	r8,ra
 1016a84:	100c3d80 	call	100c3d8 <_mcount>
 1016a88:	403f883a 	mov	ra,r8
 1016a8c:	defffe04 	addi	sp,sp,-8
 1016a90:	dfc00115 	stw	ra,4(sp)
 1016a94:	df000015 	stw	fp,0(sp)
 1016a98:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0_A, timer_0_A);
 1016a9c:	01000434 	movhi	r4,16
 1016aa0:	21144804 	addi	r4,r4,20768
 1016aa4:	000b883a 	mov	r5,zero
 1016aa8:	01800084 	movi	r6,2
 1016aac:	01c0fa04 	movi	r7,1000
 1016ab0:	10180f00 	call	10180f0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_0_B, timer_0_B);
 1016ab4:	00c040f4 	movhi	r3,259
 1016ab8:	18d77f04 	addi	r3,r3,24060
 1016abc:	00800434 	movhi	r2,16
 1016ac0:	10944004 	addi	r2,r2,20736
 1016ac4:	18800015 	stw	r2,0(r3)
 1016ac8:	00c040f4 	movhi	r3,259
 1016acc:	18d78004 	addi	r3,r3,24064
 1016ad0:	0080bef4 	movhi	r2,763
 1016ad4:	10bc2004 	addi	r2,r2,-3968
 1016ad8:	18800015 	stw	r2,0(r3)
    ALTERA_AVALON_FIFO_INIT ( FIFO_0, fifo_0);
    ALTERA_AVALON_FIFO_INIT ( FIFO_1, fifo_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 1016adc:	010040b4 	movhi	r4,258
 1016ae0:	211bb204 	addi	r4,r4,28360
 1016ae4:	000b883a 	mov	r5,zero
 1016ae8:	01800144 	movi	r6,5
 1016aec:	1016e680 	call	1016e68 <altera_avalon_jtag_uart_init>
 1016af0:	010040b4 	movhi	r4,258
 1016af4:	211ba804 	addi	r4,r4,28320
 1016af8:	1016cac0 	call	1016cac <alt_dev_reg>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_0, mutex_0);
 1016afc:	010040b4 	movhi	r4,258
 1016b00:	211fc304 	addi	r4,r4,32524
 1016b04:	1016b800 	call	1016b80 <alt_avalon_mutex_reg>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_1, mutex_1);
 1016b08:	010040b4 	movhi	r4,258
 1016b0c:	211fc804 	addi	r4,r4,32544
 1016b10:	1016b800 	call	1016b80 <alt_avalon_mutex_reg>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_2, mutex_2);
 1016b14:	010040b4 	movhi	r4,258
 1016b18:	211fcd04 	addi	r4,r4,32564
 1016b1c:	1016b800 	call	1016b80 <alt_avalon_mutex_reg>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_3, mutex_3);
 1016b20:	010040b4 	movhi	r4,258
 1016b24:	211fd204 	addi	r4,r4,32584
 1016b28:	1016b800 	call	1016b80 <alt_avalon_mutex_reg>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_4, mutex_4);
 1016b2c:	010040b4 	movhi	r4,258
 1016b30:	211fd704 	addi	r4,r4,32604
 1016b34:	1016b800 	call	1016b80 <alt_avalon_mutex_reg>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER_0, performance_counter_0);
 1016b38:	00c00434 	movhi	r3,16
 1016b3c:	18d40004 	addi	r3,r3,20480
 1016b40:	00800044 	movi	r2,1
 1016b44:	18800035 	stwio	r2,0(r3)
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( BUTTONS, Buttons);
 1016b48:	010040b4 	movhi	r4,258
 1016b4c:	211fdc04 	addi	r4,r4,32624
 1016b50:	1016cac0 	call	1016cac <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
 1016b54:	010040b4 	movhi	r4,258
 1016b58:	211fe704 	addi	r4,r4,32668
 1016b5c:	1016cac0 	call	1016cac <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
 1016b60:	010040b4 	movhi	r4,258
 1016b64:	211ff204 	addi	r4,r4,32712
 1016b68:	1016cac0 	call	1016cac <alt_dev_reg>
}
 1016b6c:	e037883a 	mov	sp,fp
 1016b70:	dfc00117 	ldw	ra,4(sp)
 1016b74:	df000017 	ldw	fp,0(sp)
 1016b78:	dec00204 	addi	sp,sp,8
 1016b7c:	f800283a 	ret

01016b80 <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
 1016b80:	f811883a 	mov	r8,ra
 1016b84:	100c3d80 	call	100c3d8 <_mcount>
 1016b88:	403f883a 	mov	ra,r8
 1016b8c:	defff904 	addi	sp,sp,-28
 1016b90:	dfc00615 	stw	ra,24(sp)
 1016b94:	df000515 	stw	fp,20(sp)
 1016b98:	df000504 	addi	fp,sp,20
 1016b9c:	e13ffe15 	stw	r4,-8(fp)
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
 1016ba0:	e0bffe17 	ldw	r2,-8(fp)
 1016ba4:	10800404 	addi	r2,r2,16
 1016ba8:	e0bffb15 	stw	r2,-20(fp)
 1016bac:	00800044 	movi	r2,1
 1016bb0:	e0bffc0d 	sth	r2,-16(fp)
 1016bb4:	e13ffc0b 	ldhu	r4,-16(fp)
 1016bb8:	10129400 	call	1012940 <OSSemCreate>
 1016bbc:	1007883a 	mov	r3,r2
 1016bc0:	e0bffb17 	ldw	r2,-20(fp)
 1016bc4:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
 1016bc8:	e0bffb17 	ldw	r2,-20(fp)
 1016bcc:	10800017 	ldw	r2,0(r2)
 1016bd0:	1005003a 	cmpeq	r2,r2,zero
 1016bd4:	1000021e 	bne	r2,zero,1016be0 <alt_avalon_mutex_reg+0x60>
 1016bd8:	e03fff15 	stw	zero,-4(fp)
 1016bdc:	00000206 	br	1016be8 <alt_avalon_mutex_reg+0x68>
 1016be0:	00bfffc4 	movi	r2,-1
 1016be4:	e0bfff15 	stw	r2,-4(fp)
 1016be8:	e0bfff17 	ldw	r2,-4(fp)
 1016bec:	e0bffd15 	stw	r2,-12(fp)
  if (!ret_code)
 1016bf0:	e0bffd17 	ldw	r2,-12(fp)
 1016bf4:	1004c03a 	cmpne	r2,r2,zero
 1016bf8:	1000061e 	bne	r2,zero,1016c14 <alt_avalon_mutex_reg+0x94>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
 1016bfc:	e13ffe17 	ldw	r4,-8(fp)
 1016c00:	014040f4 	movhi	r5,259
 1016c04:	29603504 	addi	r5,r5,-32556
 1016c08:	101844c0 	call	101844c <alt_dev_llist_insert>
 1016c0c:	e0bffd15 	stw	r2,-12(fp)
 1016c10:	00000506 	br	1016c28 <alt_avalon_mutex_reg+0xa8>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
 1016c14:	1016c400 	call	1016c40 <alt_get_errno>
 1016c18:	00c00304 	movi	r3,12
 1016c1c:	10c00015 	stw	r3,0(r2)
    ret_code = -ENOMEM;
 1016c20:	00bffd04 	movi	r2,-12
 1016c24:	e0bffd15 	stw	r2,-12(fp)
  }

  return ret_code;
 1016c28:	e0bffd17 	ldw	r2,-12(fp)
}
 1016c2c:	e037883a 	mov	sp,fp
 1016c30:	dfc00117 	ldw	ra,4(sp)
 1016c34:	df000017 	ldw	fp,0(sp)
 1016c38:	dec00204 	addi	sp,sp,8
 1016c3c:	f800283a 	ret

01016c40 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1016c40:	f811883a 	mov	r8,ra
 1016c44:	100c3d80 	call	100c3d8 <_mcount>
 1016c48:	403f883a 	mov	ra,r8
 1016c4c:	defffd04 	addi	sp,sp,-12
 1016c50:	dfc00215 	stw	ra,8(sp)
 1016c54:	df000115 	stw	fp,4(sp)
 1016c58:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1016c5c:	008040f4 	movhi	r2,259
 1016c60:	10a01204 	addi	r2,r2,-32696
 1016c64:	10800017 	ldw	r2,0(r2)
 1016c68:	1005003a 	cmpeq	r2,r2,zero
 1016c6c:	1000061e 	bne	r2,zero,1016c88 <alt_get_errno+0x48>
 1016c70:	008040f4 	movhi	r2,259
 1016c74:	10a01204 	addi	r2,r2,-32696
 1016c78:	10800017 	ldw	r2,0(r2)
 1016c7c:	103ee83a 	callr	r2
 1016c80:	e0bfff15 	stw	r2,-4(fp)
 1016c84:	00000306 	br	1016c94 <alt_get_errno+0x54>
 1016c88:	008040f4 	movhi	r2,259
 1016c8c:	10975a04 	addi	r2,r2,23912
 1016c90:	e0bfff15 	stw	r2,-4(fp)
 1016c94:	e0bfff17 	ldw	r2,-4(fp)
}
 1016c98:	e037883a 	mov	sp,fp
 1016c9c:	dfc00117 	ldw	ra,4(sp)
 1016ca0:	df000017 	ldw	fp,0(sp)
 1016ca4:	dec00204 	addi	sp,sp,8
 1016ca8:	f800283a 	ret

01016cac <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 1016cac:	f811883a 	mov	r8,ra
 1016cb0:	100c3d80 	call	100c3d8 <_mcount>
 1016cb4:	403f883a 	mov	ra,r8
 1016cb8:	defffd04 	addi	sp,sp,-12
 1016cbc:	dfc00215 	stw	ra,8(sp)
 1016cc0:	df000115 	stw	fp,4(sp)
 1016cc4:	df000104 	addi	fp,sp,4
 1016cc8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 1016ccc:	e13fff17 	ldw	r4,-4(fp)
 1016cd0:	014040f4 	movhi	r5,259
 1016cd4:	29600f04 	addi	r5,r5,-32708
 1016cd8:	101844c0 	call	101844c <alt_dev_llist_insert>
}
 1016cdc:	e037883a 	mov	sp,fp
 1016ce0:	dfc00117 	ldw	ra,4(sp)
 1016ce4:	df000017 	ldw	fp,0(sp)
 1016ce8:	dec00204 	addi	sp,sp,8
 1016cec:	f800283a 	ret

01016cf0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 1016cf0:	f811883a 	mov	r8,ra
 1016cf4:	100c3d80 	call	100c3d8 <_mcount>
 1016cf8:	403f883a 	mov	ra,r8
 1016cfc:	defffa04 	addi	sp,sp,-24
 1016d00:	dfc00515 	stw	ra,20(sp)
 1016d04:	df000415 	stw	fp,16(sp)
 1016d08:	df000404 	addi	fp,sp,16
 1016d0c:	e13ffd15 	stw	r4,-12(fp)
 1016d10:	e17ffe15 	stw	r5,-8(fp)
 1016d14:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1016d18:	e0bffd17 	ldw	r2,-12(fp)
 1016d1c:	10800017 	ldw	r2,0(r2)
 1016d20:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 1016d24:	e0bffc17 	ldw	r2,-16(fp)
 1016d28:	11000a04 	addi	r4,r2,40
 1016d2c:	e0bffd17 	ldw	r2,-12(fp)
 1016d30:	11c00217 	ldw	r7,8(r2)
 1016d34:	e17ffe17 	ldw	r5,-8(fp)
 1016d38:	e1bfff17 	ldw	r6,-4(fp)
 1016d3c:	10175180 	call	1017518 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 1016d40:	e037883a 	mov	sp,fp
 1016d44:	dfc00117 	ldw	ra,4(sp)
 1016d48:	df000017 	ldw	fp,0(sp)
 1016d4c:	dec00204 	addi	sp,sp,8
 1016d50:	f800283a 	ret

01016d54 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 1016d54:	f811883a 	mov	r8,ra
 1016d58:	100c3d80 	call	100c3d8 <_mcount>
 1016d5c:	403f883a 	mov	ra,r8
 1016d60:	defffa04 	addi	sp,sp,-24
 1016d64:	dfc00515 	stw	ra,20(sp)
 1016d68:	df000415 	stw	fp,16(sp)
 1016d6c:	df000404 	addi	fp,sp,16
 1016d70:	e13ffd15 	stw	r4,-12(fp)
 1016d74:	e17ffe15 	stw	r5,-8(fp)
 1016d78:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1016d7c:	e0bffd17 	ldw	r2,-12(fp)
 1016d80:	10800017 	ldw	r2,0(r2)
 1016d84:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 1016d88:	e0bffc17 	ldw	r2,-16(fp)
 1016d8c:	11000a04 	addi	r4,r2,40
 1016d90:	e0bffd17 	ldw	r2,-12(fp)
 1016d94:	11c00217 	ldw	r7,8(r2)
 1016d98:	e17ffe17 	ldw	r5,-8(fp)
 1016d9c:	e1bfff17 	ldw	r6,-4(fp)
 1016da0:	10177e40 	call	10177e4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 1016da4:	e037883a 	mov	sp,fp
 1016da8:	dfc00117 	ldw	ra,4(sp)
 1016dac:	df000017 	ldw	fp,0(sp)
 1016db0:	dec00204 	addi	sp,sp,8
 1016db4:	f800283a 	ret

01016db8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 1016db8:	f811883a 	mov	r8,ra
 1016dbc:	100c3d80 	call	100c3d8 <_mcount>
 1016dc0:	403f883a 	mov	ra,r8
 1016dc4:	defffc04 	addi	sp,sp,-16
 1016dc8:	dfc00315 	stw	ra,12(sp)
 1016dcc:	df000215 	stw	fp,8(sp)
 1016dd0:	df000204 	addi	fp,sp,8
 1016dd4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1016dd8:	e0bfff17 	ldw	r2,-4(fp)
 1016ddc:	10800017 	ldw	r2,0(r2)
 1016de0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 1016de4:	e0bffe17 	ldw	r2,-8(fp)
 1016de8:	11000a04 	addi	r4,r2,40
 1016dec:	e0bfff17 	ldw	r2,-4(fp)
 1016df0:	11400217 	ldw	r5,8(r2)
 1016df4:	10173980 	call	1017398 <altera_avalon_jtag_uart_close>
}
 1016df8:	e037883a 	mov	sp,fp
 1016dfc:	dfc00117 	ldw	ra,4(sp)
 1016e00:	df000017 	ldw	fp,0(sp)
 1016e04:	dec00204 	addi	sp,sp,8
 1016e08:	f800283a 	ret

01016e0c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 1016e0c:	f811883a 	mov	r8,ra
 1016e10:	100c3d80 	call	100c3d8 <_mcount>
 1016e14:	403f883a 	mov	ra,r8
 1016e18:	defffa04 	addi	sp,sp,-24
 1016e1c:	dfc00515 	stw	ra,20(sp)
 1016e20:	df000415 	stw	fp,16(sp)
 1016e24:	df000404 	addi	fp,sp,16
 1016e28:	e13ffd15 	stw	r4,-12(fp)
 1016e2c:	e17ffe15 	stw	r5,-8(fp)
 1016e30:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 1016e34:	e0bffd17 	ldw	r2,-12(fp)
 1016e38:	10800017 	ldw	r2,0(r2)
 1016e3c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 1016e40:	e0bffc17 	ldw	r2,-16(fp)
 1016e44:	11000a04 	addi	r4,r2,40
 1016e48:	e17ffe17 	ldw	r5,-8(fp)
 1016e4c:	e1bfff17 	ldw	r6,-4(fp)
 1016e50:	10174180 	call	1017418 <altera_avalon_jtag_uart_ioctl>
}
 1016e54:	e037883a 	mov	sp,fp
 1016e58:	dfc00117 	ldw	ra,4(sp)
 1016e5c:	df000017 	ldw	fp,0(sp)
 1016e60:	dec00204 	addi	sp,sp,8
 1016e64:	f800283a 	ret

01016e68 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 1016e68:	f811883a 	mov	r8,ra
 1016e6c:	100c3d80 	call	100c3d8 <_mcount>
 1016e70:	403f883a 	mov	ra,r8
 1016e74:	defff504 	addi	sp,sp,-44
 1016e78:	dfc00a15 	stw	ra,40(sp)
 1016e7c:	df000915 	stw	fp,36(sp)
 1016e80:	df000904 	addi	fp,sp,36
 1016e84:	e13ffd15 	stw	r4,-12(fp)
 1016e88:	e17ffe15 	stw	r5,-8(fp)
 1016e8c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
 1016e90:	e0bffd17 	ldw	r2,-12(fp)
 1016e94:	10800c04 	addi	r2,r2,48
 1016e98:	e0bffb15 	stw	r2,-20(fp)
 1016e9c:	e03ffc0d 	sth	zero,-16(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
 1016ea0:	e13ffc0b 	ldhu	r4,-16(fp)
 1016ea4:	e17ffc84 	addi	r5,fp,-14
 1016ea8:	100f5c40 	call	100f5c4 <OSFlagCreate>
 1016eac:	1007883a 	mov	r3,r2
 1016eb0:	e0bffb17 	ldw	r2,-20(fp)
 1016eb4:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
 1016eb8:	e0bffd17 	ldw	r2,-12(fp)
 1016ebc:	10800a04 	addi	r2,r2,40
 1016ec0:	e0bff915 	stw	r2,-28(fp)
 1016ec4:	00800044 	movi	r2,1
 1016ec8:	e0bffa0d 	sth	r2,-24(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
 1016ecc:	e13ffa0b 	ldhu	r4,-24(fp)
 1016ed0:	10129400 	call	1012940 <OSSemCreate>
 1016ed4:	1007883a 	mov	r3,r2
 1016ed8:	e0bff917 	ldw	r2,-28(fp)
 1016edc:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
 1016ee0:	e0bffd17 	ldw	r2,-12(fp)
 1016ee4:	10800b04 	addi	r2,r2,44
 1016ee8:	e0bff715 	stw	r2,-36(fp)
 1016eec:	00800044 	movi	r2,1
 1016ef0:	e0bff80d 	sth	r2,-32(fp)
 1016ef4:	e13ff80b 	ldhu	r4,-32(fp)
 1016ef8:	10129400 	call	1012940 <OSSemCreate>
 1016efc:	1007883a 	mov	r3,r2
 1016f00:	e0bff717 	ldw	r2,-36(fp)
 1016f04:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1016f08:	e0fffd17 	ldw	r3,-12(fp)
 1016f0c:	00800044 	movi	r2,1
 1016f10:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 1016f14:	e0bffd17 	ldw	r2,-12(fp)
 1016f18:	10800017 	ldw	r2,0(r2)
 1016f1c:	11000104 	addi	r4,r2,4
 1016f20:	e0bffd17 	ldw	r2,-12(fp)
 1016f24:	10800817 	ldw	r2,32(r2)
 1016f28:	1007883a 	mov	r3,r2
 1016f2c:	2005883a 	mov	r2,r4
 1016f30:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
 1016f34:	e13fff17 	ldw	r4,-4(fp)
 1016f38:	e17ffd17 	ldw	r5,-12(fp)
 1016f3c:	01804074 	movhi	r6,257
 1016f40:	319be904 	addi	r6,r6,28580
 1016f44:	1018b700 	call	1018b70 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 1016f48:	e0bffd17 	ldw	r2,-12(fp)
 1016f4c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 1016f50:	e0bffd17 	ldw	r2,-12(fp)
 1016f54:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 1016f58:	008040f4 	movhi	r2,259
 1016f5c:	10975f04 	addi	r2,r2,23932
 1016f60:	10800017 	ldw	r2,0(r2)
 1016f64:	100b883a 	mov	r5,r2
 1016f68:	01804074 	movhi	r6,257
 1016f6c:	319c9e04 	addi	r6,r6,29304
 1016f70:	e1fffd17 	ldw	r7,-12(fp)
 1016f74:	100baf80 	call	100baf8 <alt_alarm_start>
 1016f78:	1004403a 	cmpge	r2,r2,zero
 1016f7c:	1000041e 	bne	r2,zero,1016f90 <altera_avalon_jtag_uart_init+0x128>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 1016f80:	e0fffd17 	ldw	r3,-12(fp)
 1016f84:	00a00034 	movhi	r2,32768
 1016f88:	10bfffc4 	addi	r2,r2,-1
 1016f8c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 1016f90:	e037883a 	mov	sp,fp
 1016f94:	dfc00117 	ldw	ra,4(sp)
 1016f98:	df000017 	ldw	fp,0(sp)
 1016f9c:	dec00204 	addi	sp,sp,8
 1016fa0:	f800283a 	ret

01016fa4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 1016fa4:	f811883a 	mov	r8,ra
 1016fa8:	100c3d80 	call	100c3d8 <_mcount>
 1016fac:	403f883a 	mov	ra,r8
 1016fb0:	defff104 	addi	sp,sp,-60
 1016fb4:	dfc00e15 	stw	ra,56(sp)
 1016fb8:	df000d15 	stw	fp,52(sp)
 1016fbc:	df000d04 	addi	fp,sp,52
 1016fc0:	e13ffe15 	stw	r4,-8(fp)
 1016fc4:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 1016fc8:	e0bffe17 	ldw	r2,-8(fp)
 1016fcc:	e0bffc15 	stw	r2,-16(fp)
  unsigned int base = sp->base;
 1016fd0:	e0bffc17 	ldw	r2,-16(fp)
 1016fd4:	10800017 	ldw	r2,0(r2)
 1016fd8:	e0bffb15 	stw	r2,-20(fp)
 1016fdc:	00000006 	br	1016fe0 <altera_avalon_jtag_uart_irq+0x3c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1016fe0:	e0bffb17 	ldw	r2,-20(fp)
 1016fe4:	10800104 	addi	r2,r2,4
 1016fe8:	10800037 	ldwio	r2,0(r2)
 1016fec:	e0bffa15 	stw	r2,-24(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 1016ff0:	e0bffa17 	ldw	r2,-24(fp)
 1016ff4:	1080c00c 	andi	r2,r2,768
 1016ff8:	1005003a 	cmpeq	r2,r2,zero
 1016ffc:	1000991e 	bne	r2,zero,1017264 <altera_avalon_jtag_uart_irq+0x2c0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 1017000:	e0bffa17 	ldw	r2,-24(fp)
 1017004:	1080400c 	andi	r2,r2,256
 1017008:	1005003a 	cmpeq	r2,r2,zero
 101700c:	1000481e 	bne	r2,zero,1017130 <altera_avalon_jtag_uart_irq+0x18c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 1017010:	00800074 	movhi	r2,1
 1017014:	e0bff915 	stw	r2,-28(fp)
 1017018:	00000006 	br	101701c <altera_avalon_jtag_uart_irq+0x78>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 101701c:	e0bffc17 	ldw	r2,-16(fp)
 1017020:	10800d17 	ldw	r2,52(r2)
 1017024:	10800044 	addi	r2,r2,1
 1017028:	1081ffcc 	andi	r2,r2,2047
 101702c:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
 1017030:	e0bffc17 	ldw	r2,-16(fp)
 1017034:	10c00e17 	ldw	r3,56(r2)
 1017038:	e0bff817 	ldw	r2,-32(fp)
 101703c:	18802826 	beq	r3,r2,10170e0 <altera_avalon_jtag_uart_irq+0x13c>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 1017040:	e0bffb17 	ldw	r2,-20(fp)
 1017044:	10800037 	ldwio	r2,0(r2)
 1017048:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 101704c:	e0bff917 	ldw	r2,-28(fp)
 1017050:	10a0000c 	andi	r2,r2,32768
 1017054:	1005003a 	cmpeq	r2,r2,zero
 1017058:	1000211e 	bne	r2,zero,10170e0 <altera_avalon_jtag_uart_irq+0x13c>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 101705c:	e0bffc17 	ldw	r2,-16(fp)
 1017060:	10c00d17 	ldw	r3,52(r2)
 1017064:	e0bff917 	ldw	r2,-28(fp)
 1017068:	1009883a 	mov	r4,r2
 101706c:	e0bffc17 	ldw	r2,-16(fp)
 1017070:	1885883a 	add	r2,r3,r2
 1017074:	10801104 	addi	r2,r2,68
 1017078:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 101707c:	e0bffc17 	ldw	r2,-16(fp)
 1017080:	10800d17 	ldw	r2,52(r2)
 1017084:	10800044 	addi	r2,r2,1
 1017088:	10c1ffcc 	andi	r3,r2,2047
 101708c:	e0bffc17 	ldw	r2,-16(fp)
 1017090:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
 1017094:	e0bffc17 	ldw	r2,-16(fp)
 1017098:	10800c17 	ldw	r2,48(r2)
 101709c:	e0bff515 	stw	r2,-44(fp)
 10170a0:	00800044 	movi	r2,1
 10170a4:	e0bff60d 	sth	r2,-40(fp)
 10170a8:	00800044 	movi	r2,1
 10170ac:	e0bff685 	stb	r2,-38(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 10170b0:	008040f4 	movhi	r2,259
 10170b4:	10976804 	addi	r2,r2,23968
 10170b8:	10800003 	ldbu	r2,0(r2)
 10170bc:	10803fcc 	andi	r2,r2,255
 10170c0:	1005003a 	cmpeq	r2,r2,zero
 10170c4:	103fd51e 	bne	r2,zero,101701c <altera_avalon_jtag_uart_irq+0x78>
  {
    OSFlagPost (group, flags, opt, &err);
 10170c8:	e17ff60b 	ldhu	r5,-40(fp)
 10170cc:	e1bff683 	ldbu	r6,-38(fp)
 10170d0:	e1fffd04 	addi	r7,fp,-12
 10170d4:	e13ff517 	ldw	r4,-44(fp)
 10170d8:	10103340 	call	1010334 <OSFlagPost>
    return err;
 10170dc:	003fcf06 	br	101701c <altera_avalon_jtag_uart_irq+0x78>
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 10170e0:	e0bff917 	ldw	r2,-28(fp)
 10170e4:	10bfffec 	andhi	r2,r2,65535
 10170e8:	1005003a 	cmpeq	r2,r2,zero
 10170ec:	1000101e 	bne	r2,zero,1017130 <altera_avalon_jtag_uart_irq+0x18c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 10170f0:	e0bffc17 	ldw	r2,-16(fp)
 10170f4:	10c00817 	ldw	r3,32(r2)
 10170f8:	00bfff84 	movi	r2,-2
 10170fc:	1886703a 	and	r3,r3,r2
 1017100:	e0bffc17 	ldw	r2,-16(fp)
 1017104:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 1017108:	e0bffb17 	ldw	r2,-20(fp)
 101710c:	11000104 	addi	r4,r2,4
 1017110:	e0bffc17 	ldw	r2,-16(fp)
 1017114:	10800817 	ldw	r2,32(r2)
 1017118:	1007883a 	mov	r3,r2
 101711c:	2005883a 	mov	r2,r4
 1017120:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1017124:	e0bffb17 	ldw	r2,-20(fp)
 1017128:	10800104 	addi	r2,r2,4
 101712c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 1017130:	e0bffa17 	ldw	r2,-24(fp)
 1017134:	1080800c 	andi	r2,r2,512
 1017138:	1005003a 	cmpeq	r2,r2,zero
 101713c:	103fa81e 	bne	r2,zero,1016fe0 <altera_avalon_jtag_uart_irq+0x3c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 1017140:	e0bffa17 	ldw	r2,-24(fp)
 1017144:	10bfffec 	andhi	r2,r2,65535
 1017148:	1004d43a 	srli	r2,r2,16
 101714c:	e0bff715 	stw	r2,-36(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 1017150:	00002706 	br	10171f0 <altera_avalon_jtag_uart_irq+0x24c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 1017154:	e13ffb17 	ldw	r4,-20(fp)
 1017158:	e0bffc17 	ldw	r2,-16(fp)
 101715c:	10c01017 	ldw	r3,64(r2)
 1017160:	e0bffc17 	ldw	r2,-16(fp)
 1017164:	1885883a 	add	r2,r3,r2
 1017168:	10821104 	addi	r2,r2,2116
 101716c:	10800003 	ldbu	r2,0(r2)
 1017170:	10c03fcc 	andi	r3,r2,255
 1017174:	18c0201c 	xori	r3,r3,128
 1017178:	18ffe004 	addi	r3,r3,-128
 101717c:	2005883a 	mov	r2,r4
 1017180:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1017184:	e0bffc17 	ldw	r2,-16(fp)
 1017188:	10801017 	ldw	r2,64(r2)
 101718c:	10800044 	addi	r2,r2,1
 1017190:	10c1ffcc 	andi	r3,r2,2047
 1017194:	e0bffc17 	ldw	r2,-16(fp)
 1017198:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
 101719c:	e0bffc17 	ldw	r2,-16(fp)
 10171a0:	10800c17 	ldw	r2,48(r2)
 10171a4:	e0bff315 	stw	r2,-52(fp)
 10171a8:	00800084 	movi	r2,2
 10171ac:	e0bff40d 	sth	r2,-48(fp)
 10171b0:	00800044 	movi	r2,1
 10171b4:	e0bff485 	stb	r2,-46(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 10171b8:	008040f4 	movhi	r2,259
 10171bc:	10976804 	addi	r2,r2,23968
 10171c0:	10800003 	ldbu	r2,0(r2)
 10171c4:	10803fcc 	andi	r2,r2,255
 10171c8:	1005003a 	cmpeq	r2,r2,zero
 10171cc:	1000051e 	bne	r2,zero,10171e4 <altera_avalon_jtag_uart_irq+0x240>
  {
    OSFlagPost (group, flags, opt, &err);
 10171d0:	e17ff40b 	ldhu	r5,-48(fp)
 10171d4:	e1bff483 	ldbu	r6,-46(fp)
 10171d8:	e1fffd44 	addi	r7,fp,-11
 10171dc:	e13ff317 	ldw	r4,-52(fp)
 10171e0:	10103340 	call	1010334 <OSFlagPost>

        space--;
 10171e4:	e0bff717 	ldw	r2,-36(fp)
 10171e8:	10bfffc4 	addi	r2,r2,-1
 10171ec:	e0bff715 	stw	r2,-36(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 10171f0:	e0bff717 	ldw	r2,-36(fp)
 10171f4:	1005003a 	cmpeq	r2,r2,zero
 10171f8:	1000051e 	bne	r2,zero,1017210 <altera_avalon_jtag_uart_irq+0x26c>
 10171fc:	e0bffc17 	ldw	r2,-16(fp)
 1017200:	10c01017 	ldw	r3,64(r2)
 1017204:	e0bffc17 	ldw	r2,-16(fp)
 1017208:	10800f17 	ldw	r2,60(r2)
 101720c:	18bfd11e 	bne	r3,r2,1017154 <altera_avalon_jtag_uart_irq+0x1b0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 1017210:	e0bff717 	ldw	r2,-36(fp)
 1017214:	1005003a 	cmpeq	r2,r2,zero
 1017218:	103f711e 	bne	r2,zero,1016fe0 <altera_avalon_jtag_uart_irq+0x3c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 101721c:	e0bffc17 	ldw	r2,-16(fp)
 1017220:	10c00817 	ldw	r3,32(r2)
 1017224:	00bfff44 	movi	r2,-3
 1017228:	1886703a 	and	r3,r3,r2
 101722c:	e0bffc17 	ldw	r2,-16(fp)
 1017230:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1017234:	e0bffc17 	ldw	r2,-16(fp)
 1017238:	10800017 	ldw	r2,0(r2)
 101723c:	11000104 	addi	r4,r2,4
 1017240:	e0bffc17 	ldw	r2,-16(fp)
 1017244:	10800817 	ldw	r2,32(r2)
 1017248:	1007883a 	mov	r3,r2
 101724c:	2005883a 	mov	r2,r4
 1017250:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1017254:	e0bffb17 	ldw	r2,-20(fp)
 1017258:	10800104 	addi	r2,r2,4
 101725c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 1017260:	003f5f06 	br	1016fe0 <altera_avalon_jtag_uart_irq+0x3c>
}
 1017264:	e037883a 	mov	sp,fp
 1017268:	dfc00117 	ldw	ra,4(sp)
 101726c:	df000017 	ldw	fp,0(sp)
 1017270:	dec00204 	addi	sp,sp,8
 1017274:	f800283a 	ret

01017278 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 1017278:	f811883a 	mov	r8,ra
 101727c:	100c3d80 	call	100c3d8 <_mcount>
 1017280:	403f883a 	mov	ra,r8
 1017284:	defff804 	addi	sp,sp,-32
 1017288:	dfc00715 	stw	ra,28(sp)
 101728c:	df000615 	stw	fp,24(sp)
 1017290:	df000604 	addi	fp,sp,24
 1017294:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 1017298:	e0bfff17 	ldw	r2,-4(fp)
 101729c:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 10172a0:	e0bffd17 	ldw	r2,-12(fp)
 10172a4:	10800017 	ldw	r2,0(r2)
 10172a8:	10800104 	addi	r2,r2,4
 10172ac:	10800037 	ldwio	r2,0(r2)
 10172b0:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 10172b4:	e0bffc17 	ldw	r2,-16(fp)
 10172b8:	1081000c 	andi	r2,r2,1024
 10172bc:	1005003a 	cmpeq	r2,r2,zero
 10172c0:	10000c1e 	bne	r2,zero,10172f4 <altera_avalon_jtag_uart_timeout+0x7c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 10172c4:	e0bffd17 	ldw	r2,-12(fp)
 10172c8:	10800017 	ldw	r2,0(r2)
 10172cc:	11000104 	addi	r4,r2,4
 10172d0:	e0bffd17 	ldw	r2,-12(fp)
 10172d4:	10800817 	ldw	r2,32(r2)
 10172d8:	10810014 	ori	r2,r2,1024
 10172dc:	1007883a 	mov	r3,r2
 10172e0:	2005883a 	mov	r2,r4
 10172e4:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 10172e8:	e0bffd17 	ldw	r2,-12(fp)
 10172ec:	10000915 	stw	zero,36(r2)
 10172f0:	00002106 	br	1017378 <altera_avalon_jtag_uart_timeout+0x100>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 10172f4:	e0bffd17 	ldw	r2,-12(fp)
 10172f8:	10c00917 	ldw	r3,36(r2)
 10172fc:	00a00034 	movhi	r2,32768
 1017300:	10bfff04 	addi	r2,r2,-4
 1017304:	10c01c36 	bltu	r2,r3,1017378 <altera_avalon_jtag_uart_timeout+0x100>
    sp->host_inactive++;
 1017308:	e0bffd17 	ldw	r2,-12(fp)
 101730c:	10800917 	ldw	r2,36(r2)
 1017310:	10c00044 	addi	r3,r2,1
 1017314:	e0bffd17 	ldw	r2,-12(fp)
 1017318:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
 101731c:	e0bffd17 	ldw	r2,-12(fp)
 1017320:	10c00917 	ldw	r3,36(r2)
 1017324:	e0bffd17 	ldw	r2,-12(fp)
 1017328:	10800117 	ldw	r2,4(r2)
 101732c:	18801236 	bltu	r3,r2,1017378 <altera_avalon_jtag_uart_timeout+0x100>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
 1017330:	e0bffd17 	ldw	r2,-12(fp)
 1017334:	10800c17 	ldw	r2,48(r2)
 1017338:	e0bffa15 	stw	r2,-24(fp)
 101733c:	00800104 	movi	r2,4
 1017340:	e0bffb0d 	sth	r2,-20(fp)
 1017344:	00800044 	movi	r2,1
 1017348:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 101734c:	008040f4 	movhi	r2,259
 1017350:	10976804 	addi	r2,r2,23968
 1017354:	10800003 	ldbu	r2,0(r2)
 1017358:	10803fcc 	andi	r2,r2,255
 101735c:	1005003a 	cmpeq	r2,r2,zero
 1017360:	1000051e 	bne	r2,zero,1017378 <altera_avalon_jtag_uart_timeout+0x100>
  {
    OSFlagPost (group, flags, opt, &err);
 1017364:	e17ffb0b 	ldhu	r5,-20(fp)
 1017368:	e1bffb83 	ldbu	r6,-18(fp)
 101736c:	e1fffe04 	addi	r7,fp,-8
 1017370:	e13ffa17 	ldw	r4,-24(fp)
 1017374:	10103340 	call	1010334 <OSFlagPost>
 1017378:	008040f4 	movhi	r2,259
 101737c:	10975f04 	addi	r2,r2,23932
 1017380:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
 1017384:	e037883a 	mov	sp,fp
 1017388:	dfc00117 	ldw	ra,4(sp)
 101738c:	df000017 	ldw	fp,0(sp)
 1017390:	dec00204 	addi	sp,sp,8
 1017394:	f800283a 	ret

01017398 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 1017398:	f811883a 	mov	r8,ra
 101739c:	100c3d80 	call	100c3d8 <_mcount>
 10173a0:	403f883a 	mov	ra,r8
 10173a4:	defffc04 	addi	sp,sp,-16
 10173a8:	df000315 	stw	fp,12(sp)
 10173ac:	df000304 	addi	fp,sp,12
 10173b0:	e13ffd15 	stw	r4,-12(fp)
 10173b4:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 10173b8:	00000706 	br	10173d8 <altera_avalon_jtag_uart_close+0x40>
    if (flags & O_NONBLOCK) {
 10173bc:	e0bffe17 	ldw	r2,-8(fp)
 10173c0:	1090000c 	andi	r2,r2,16384
 10173c4:	1005003a 	cmpeq	r2,r2,zero
 10173c8:	1000031e 	bne	r2,zero,10173d8 <altera_avalon_jtag_uart_close+0x40>
      return -EWOULDBLOCK; 
 10173cc:	00bffd44 	movi	r2,-11
 10173d0:	e0bfff15 	stw	r2,-4(fp)
 10173d4:	00000b06 	br	1017404 <altera_avalon_jtag_uart_close+0x6c>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 10173d8:	e0bffd17 	ldw	r2,-12(fp)
 10173dc:	10c01017 	ldw	r3,64(r2)
 10173e0:	e0bffd17 	ldw	r2,-12(fp)
 10173e4:	10800f17 	ldw	r2,60(r2)
 10173e8:	18800526 	beq	r3,r2,1017400 <altera_avalon_jtag_uart_close+0x68>
 10173ec:	e0bffd17 	ldw	r2,-12(fp)
 10173f0:	10c00917 	ldw	r3,36(r2)
 10173f4:	e0bffd17 	ldw	r2,-12(fp)
 10173f8:	10800117 	ldw	r2,4(r2)
 10173fc:	18bfef36 	bltu	r3,r2,10173bc <altera_avalon_jtag_uart_close+0x24>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 1017400:	e03fff15 	stw	zero,-4(fp)
 1017404:	e0bfff17 	ldw	r2,-4(fp)
}
 1017408:	e037883a 	mov	sp,fp
 101740c:	df000017 	ldw	fp,0(sp)
 1017410:	dec00104 	addi	sp,sp,4
 1017414:	f800283a 	ret

01017418 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 1017418:	f811883a 	mov	r8,ra
 101741c:	100c3d80 	call	100c3d8 <_mcount>
 1017420:	403f883a 	mov	ra,r8
 1017424:	defff804 	addi	sp,sp,-32
 1017428:	df000715 	stw	fp,28(sp)
 101742c:	df000704 	addi	fp,sp,28
 1017430:	e13ffb15 	stw	r4,-20(fp)
 1017434:	e17ffc15 	stw	r5,-16(fp)
 1017438:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 101743c:	00bff9c4 	movi	r2,-25
 1017440:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 1017444:	e0bffc17 	ldw	r2,-16(fp)
 1017448:	e0bfff15 	stw	r2,-4(fp)
 101744c:	e0ffff17 	ldw	r3,-4(fp)
 1017450:	189a8060 	cmpeqi	r2,r3,27137
 1017454:	1000041e 	bne	r2,zero,1017468 <altera_avalon_jtag_uart_ioctl+0x50>
 1017458:	e0ffff17 	ldw	r3,-4(fp)
 101745c:	189a80a0 	cmpeqi	r2,r3,27138
 1017460:	10001b1e 	bne	r2,zero,10174d0 <altera_avalon_jtag_uart_ioctl+0xb8>
 1017464:	00002706 	br	1017504 <altera_avalon_jtag_uart_ioctl+0xec>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 1017468:	e0bffb17 	ldw	r2,-20(fp)
 101746c:	10c00117 	ldw	r3,4(r2)
 1017470:	00a00034 	movhi	r2,32768
 1017474:	10bfffc4 	addi	r2,r2,-1
 1017478:	18802226 	beq	r3,r2,1017504 <altera_avalon_jtag_uart_ioctl+0xec>
    {
      int timeout = *((int *)arg);
 101747c:	e0bffd17 	ldw	r2,-12(fp)
 1017480:	10800017 	ldw	r2,0(r2)
 1017484:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 1017488:	e0bff917 	ldw	r2,-28(fp)
 101748c:	10800090 	cmplti	r2,r2,2
 1017490:	1000071e 	bne	r2,zero,10174b0 <altera_avalon_jtag_uart_ioctl+0x98>
 1017494:	e0fff917 	ldw	r3,-28(fp)
 1017498:	00a00034 	movhi	r2,32768
 101749c:	10bfffc4 	addi	r2,r2,-1
 10174a0:	18800326 	beq	r3,r2,10174b0 <altera_avalon_jtag_uart_ioctl+0x98>
 10174a4:	e0bff917 	ldw	r2,-28(fp)
 10174a8:	e0bffe15 	stw	r2,-8(fp)
 10174ac:	00000306 	br	10174bc <altera_avalon_jtag_uart_ioctl+0xa4>
 10174b0:	00e00034 	movhi	r3,32768
 10174b4:	18ffff84 	addi	r3,r3,-2
 10174b8:	e0fffe15 	stw	r3,-8(fp)
 10174bc:	e0bffb17 	ldw	r2,-20(fp)
 10174c0:	e0fffe17 	ldw	r3,-8(fp)
 10174c4:	10c00115 	stw	r3,4(r2)
      rc = 0;
 10174c8:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 10174cc:	00000d06 	br	1017504 <altera_avalon_jtag_uart_ioctl+0xec>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 10174d0:	e0bffb17 	ldw	r2,-20(fp)
 10174d4:	10c00117 	ldw	r3,4(r2)
 10174d8:	00a00034 	movhi	r2,32768
 10174dc:	10bfffc4 	addi	r2,r2,-1
 10174e0:	18800826 	beq	r3,r2,1017504 <altera_avalon_jtag_uart_ioctl+0xec>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 10174e4:	e13ffd17 	ldw	r4,-12(fp)
 10174e8:	e0bffb17 	ldw	r2,-20(fp)
 10174ec:	10c00917 	ldw	r3,36(r2)
 10174f0:	e0bffb17 	ldw	r2,-20(fp)
 10174f4:	10800117 	ldw	r2,4(r2)
 10174f8:	1885803a 	cmpltu	r2,r3,r2
 10174fc:	20800015 	stw	r2,0(r4)
      rc = 0;
 1017500:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 1017504:	e0bffa17 	ldw	r2,-24(fp)
}
 1017508:	e037883a 	mov	sp,fp
 101750c:	df000017 	ldw	fp,0(sp)
 1017510:	dec00104 	addi	sp,sp,4
 1017514:	f800283a 	ret

01017518 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 1017518:	f811883a 	mov	r8,ra
 101751c:	100c3d80 	call	100c3d8 <_mcount>
 1017520:	403f883a 	mov	ra,r8
 1017524:	deffeb04 	addi	sp,sp,-84
 1017528:	dfc01415 	stw	ra,80(sp)
 101752c:	df001315 	stw	fp,76(sp)
 1017530:	df001304 	addi	fp,sp,76
 1017534:	e13ffb15 	stw	r4,-20(fp)
 1017538:	e17ffc15 	stw	r5,-16(fp)
 101753c:	e1bffd15 	stw	r6,-12(fp)
 1017540:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 1017544:	e0bffc17 	ldw	r2,-16(fp)
 1017548:	e0bff915 	stw	r2,-28(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
 101754c:	e0bffb17 	ldw	r2,-20(fp)
 1017550:	10800a17 	ldw	r2,40(r2)
 1017554:	e0bff315 	stw	r2,-52(fp)
 1017558:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
 101755c:	e17ff40b 	ldhu	r5,-48(fp)
 1017560:	e1bffa44 	addi	r6,fp,-23
 1017564:	e13ff317 	ldw	r4,-52(fp)
 1017568:	1012d0c0 	call	1012d0c <OSSemPend>

  while (space > 0)
 101756c:	00006406 	br	1017700 <altera_avalon_jtag_uart_read+0x1e8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 1017570:	e0bffb17 	ldw	r2,-20(fp)
 1017574:	10800d17 	ldw	r2,52(r2)
 1017578:	e0bff615 	stw	r2,-40(fp)
      out = sp->rx_out;
 101757c:	e0bffb17 	ldw	r2,-20(fp)
 1017580:	10800e17 	ldw	r2,56(r2)
 1017584:	e0bff515 	stw	r2,-44(fp)

      if (in >= out)
 1017588:	e0fff617 	ldw	r3,-40(fp)
 101758c:	e0bff517 	ldw	r2,-44(fp)
 1017590:	18800536 	bltu	r3,r2,10175a8 <altera_avalon_jtag_uart_read+0x90>
        n = in - out;
 1017594:	e0bff617 	ldw	r2,-40(fp)
 1017598:	e0fff517 	ldw	r3,-44(fp)
 101759c:	10c5c83a 	sub	r2,r2,r3
 10175a0:	e0bff715 	stw	r2,-36(fp)
 10175a4:	00000406 	br	10175b8 <altera_avalon_jtag_uart_read+0xa0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 10175a8:	00820004 	movi	r2,2048
 10175ac:	e0fff517 	ldw	r3,-44(fp)
 10175b0:	10c5c83a 	sub	r2,r2,r3
 10175b4:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
 10175b8:	e0bff717 	ldw	r2,-36(fp)
 10175bc:	1005003a 	cmpeq	r2,r2,zero
 10175c0:	10001f1e 	bne	r2,zero,1017640 <altera_avalon_jtag_uart_read+0x128>
        break; /* No more data available */

      if (n > space)
 10175c4:	e0fffd17 	ldw	r3,-12(fp)
 10175c8:	e0bff717 	ldw	r2,-36(fp)
 10175cc:	1880022e 	bgeu	r3,r2,10175d8 <altera_avalon_jtag_uart_read+0xc0>
        n = space;
 10175d0:	e0bffd17 	ldw	r2,-12(fp)
 10175d4:	e0bff715 	stw	r2,-36(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 10175d8:	e0bffb17 	ldw	r2,-20(fp)
 10175dc:	10c01104 	addi	r3,r2,68
 10175e0:	e0bff517 	ldw	r2,-44(fp)
 10175e4:	1887883a 	add	r3,r3,r2
 10175e8:	e0bff917 	ldw	r2,-28(fp)
 10175ec:	1009883a 	mov	r4,r2
 10175f0:	180b883a 	mov	r5,r3
 10175f4:	e1bff717 	ldw	r6,-36(fp)
 10175f8:	10082f80 	call	10082f8 <memcpy>
      ptr   += n;
 10175fc:	e0fff717 	ldw	r3,-36(fp)
 1017600:	e0bff917 	ldw	r2,-28(fp)
 1017604:	10c5883a 	add	r2,r2,r3
 1017608:	e0bff915 	stw	r2,-28(fp)
      space -= n;
 101760c:	e0fffd17 	ldw	r3,-12(fp)
 1017610:	e0bff717 	ldw	r2,-36(fp)
 1017614:	1885c83a 	sub	r2,r3,r2
 1017618:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 101761c:	e0fff517 	ldw	r3,-44(fp)
 1017620:	e0bff717 	ldw	r2,-36(fp)
 1017624:	1885883a 	add	r2,r3,r2
 1017628:	10c1ffcc 	andi	r3,r2,2047
 101762c:	e0bffb17 	ldw	r2,-20(fp)
 1017630:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
 1017634:	e0bffd17 	ldw	r2,-12(fp)
 1017638:	10800048 	cmpgei	r2,r2,1
 101763c:	103fcc1e 	bne	r2,zero,1017570 <altera_avalon_jtag_uart_read+0x58>

    /* If we read any data then return it */
    if (ptr != buffer)
 1017640:	e0fff917 	ldw	r3,-28(fp)
 1017644:	e0bffc17 	ldw	r2,-16(fp)
 1017648:	1880301e 	bne	r3,r2,101770c <altera_avalon_jtag_uart_read+0x1f4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 101764c:	e0bffe17 	ldw	r2,-8(fp)
 1017650:	1090000c 	andi	r2,r2,16384
 1017654:	1004c03a 	cmpne	r2,r2,zero
 1017658:	10002c1e 	bne	r2,zero,101770c <altera_avalon_jtag_uart_read+0x1f4>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
 101765c:	008040f4 	movhi	r2,259
 1017660:	10976804 	addi	r2,r2,23968
 1017664:	10800003 	ldbu	r2,0(r2)
 1017668:	10803fcc 	andi	r2,r2,255
 101766c:	10800058 	cmpnei	r2,r2,1
 1017670:	1000161e 	bne	r2,zero,10176cc <altera_avalon_jtag_uart_read+0x1b4>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
 1017674:	e0bffb17 	ldw	r2,-20(fp)
 1017678:	10800c17 	ldw	r2,48(r2)
 101767c:	e0bff015 	stw	r2,-64(fp)
 1017680:	00800144 	movi	r2,5
 1017684:	e0bff10d 	sth	r2,-60(fp)
 1017688:	00bfe0c4 	movi	r2,-125
 101768c:	e0bff185 	stb	r2,-58(fp)
 1017690:	e03ff20d 	sth	zero,-56(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 1017694:	008040f4 	movhi	r2,259
 1017698:	10976804 	addi	r2,r2,23968
 101769c:	10800003 	ldbu	r2,0(r2)
 10176a0:	10803fcc 	andi	r2,r2,255
 10176a4:	1005003a 	cmpeq	r2,r2,zero
 10176a8:	1000111e 	bne	r2,zero,10176f0 <altera_avalon_jtag_uart_read+0x1d8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 10176ac:	e17ff10b 	ldhu	r5,-60(fp)
 10176b0:	e1bff183 	ldbu	r6,-58(fp)
 10176b4:	e1fff20b 	ldhu	r7,-56(fp)
 10176b8:	e0bffa04 	addi	r2,fp,-24
 10176bc:	d8800015 	stw	r2,0(sp)
 10176c0:	e13ff017 	ldw	r4,-64(fp)
 10176c4:	100fc700 	call	100fc70 <OSFlagPend>
    return err;
 10176c8:	00000906 	br	10176f0 <altera_avalon_jtag_uart_read+0x1d8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 10176cc:	e0bffb17 	ldw	r2,-20(fp)
 10176d0:	10c00d17 	ldw	r3,52(r2)
 10176d4:	e0bff617 	ldw	r2,-40(fp)
 10176d8:	1880051e 	bne	r3,r2,10176f0 <altera_avalon_jtag_uart_read+0x1d8>
 10176dc:	e0bffb17 	ldw	r2,-20(fp)
 10176e0:	10c00917 	ldw	r3,36(r2)
 10176e4:	e0bffb17 	ldw	r2,-20(fp)
 10176e8:	10800117 	ldw	r2,4(r2)
 10176ec:	18bff736 	bltu	r3,r2,10176cc <altera_avalon_jtag_uart_read+0x1b4>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 10176f0:	e0bffb17 	ldw	r2,-20(fp)
 10176f4:	10c00d17 	ldw	r3,52(r2)
 10176f8:	e0bff617 	ldw	r2,-40(fp)
 10176fc:	18800326 	beq	r3,r2,101770c <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 1017700:	e0bffd17 	ldw	r2,-12(fp)
 1017704:	10800048 	cmpgei	r2,r2,1
 1017708:	103f991e 	bne	r2,zero,1017570 <altera_avalon_jtag_uart_read+0x58>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
 101770c:	e0bffb17 	ldw	r2,-20(fp)
 1017710:	11000a17 	ldw	r4,40(r2)
 1017714:	101311c0 	call	101311c <OSSemPost>

  if (ptr != buffer)
 1017718:	e0fff917 	ldw	r3,-28(fp)
 101771c:	e0bffc17 	ldw	r2,-16(fp)
 1017720:	18801926 	beq	r3,r2,1017788 <altera_avalon_jtag_uart_read+0x270>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1017724:	0005303a 	rdctl	r2,status
 1017728:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101772c:	e0ffef17 	ldw	r3,-68(fp)
 1017730:	00bfff84 	movi	r2,-2
 1017734:	1884703a 	and	r2,r3,r2
 1017738:	1001703a 	wrctl	status,r2
  
  return context;
 101773c:	e0bfef17 	ldw	r2,-68(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 1017740:	e0bff815 	stw	r2,-32(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1017744:	e0bffb17 	ldw	r2,-20(fp)
 1017748:	10800817 	ldw	r2,32(r2)
 101774c:	10c00054 	ori	r3,r2,1
 1017750:	e0bffb17 	ldw	r2,-20(fp)
 1017754:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1017758:	e0bffb17 	ldw	r2,-20(fp)
 101775c:	10800017 	ldw	r2,0(r2)
 1017760:	11000104 	addi	r4,r2,4
 1017764:	e0bffb17 	ldw	r2,-20(fp)
 1017768:	10800817 	ldw	r2,32(r2)
 101776c:	1007883a 	mov	r3,r2
 1017770:	2005883a 	mov	r2,r4
 1017774:	10c00035 	stwio	r3,0(r2)
 1017778:	e0bff817 	ldw	r2,-32(fp)
 101777c:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1017780:	e0bfee17 	ldw	r2,-72(fp)
 1017784:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 1017788:	e0fff917 	ldw	r3,-28(fp)
 101778c:	e0bffc17 	ldw	r2,-16(fp)
 1017790:	18800526 	beq	r3,r2,10177a8 <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
 1017794:	e0fff917 	ldw	r3,-28(fp)
 1017798:	e0bffc17 	ldw	r2,-16(fp)
 101779c:	1887c83a 	sub	r3,r3,r2
 10177a0:	e0ffff15 	stw	r3,-4(fp)
 10177a4:	00000906 	br	10177cc <altera_avalon_jtag_uart_read+0x2b4>
  else if (flags & O_NONBLOCK)
 10177a8:	e0bffe17 	ldw	r2,-8(fp)
 10177ac:	1090000c 	andi	r2,r2,16384
 10177b0:	1005003a 	cmpeq	r2,r2,zero
 10177b4:	1000031e 	bne	r2,zero,10177c4 <altera_avalon_jtag_uart_read+0x2ac>
    return -EWOULDBLOCK;
 10177b8:	00bffd44 	movi	r2,-11
 10177bc:	e0bfff15 	stw	r2,-4(fp)
 10177c0:	00000206 	br	10177cc <altera_avalon_jtag_uart_read+0x2b4>
  else
    return -EIO;
 10177c4:	00bffec4 	movi	r2,-5
 10177c8:	e0bfff15 	stw	r2,-4(fp)
 10177cc:	e0bfff17 	ldw	r2,-4(fp)
}
 10177d0:	e037883a 	mov	sp,fp
 10177d4:	dfc00117 	ldw	ra,4(sp)
 10177d8:	df000017 	ldw	fp,0(sp)
 10177dc:	dec00204 	addi	sp,sp,8
 10177e0:	f800283a 	ret

010177e4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 10177e4:	f811883a 	mov	r8,ra
 10177e8:	100c3d80 	call	100c3d8 <_mcount>
 10177ec:	403f883a 	mov	ra,r8
 10177f0:	deffeb04 	addi	sp,sp,-84
 10177f4:	dfc01415 	stw	ra,80(sp)
 10177f8:	df001315 	stw	fp,76(sp)
 10177fc:	df001304 	addi	fp,sp,76
 1017800:	e13ffb15 	stw	r4,-20(fp)
 1017804:	e17ffc15 	stw	r5,-16(fp)
 1017808:	e1bffd15 	stw	r6,-12(fp)
 101780c:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 1017810:	e03ff815 	stw	zero,-32(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 1017814:	e0bffc17 	ldw	r2,-16(fp)
 1017818:	e0bff515 	stw	r2,-44(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
 101781c:	e0bffb17 	ldw	r2,-20(fp)
 1017820:	10800b17 	ldw	r2,44(r2)
 1017824:	e0bff315 	stw	r2,-52(fp)
 1017828:	e03ff40d 	sth	zero,-48(fp)
 101782c:	e17ff40b 	ldhu	r5,-48(fp)
 1017830:	e1bffa04 	addi	r6,fp,-24
 1017834:	e13ff317 	ldw	r4,-52(fp)
 1017838:	1012d0c0 	call	1012d0c <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 101783c:	00003a06 	br	1017928 <altera_avalon_jtag_uart_write+0x144>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 1017840:	e0bffb17 	ldw	r2,-20(fp)
 1017844:	10800f17 	ldw	r2,60(r2)
 1017848:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 101784c:	e0bffb17 	ldw	r2,-20(fp)
 1017850:	10801017 	ldw	r2,64(r2)
 1017854:	e0bff815 	stw	r2,-32(fp)

      if (in < out)
 1017858:	e0fff917 	ldw	r3,-28(fp)
 101785c:	e0bff817 	ldw	r2,-32(fp)
 1017860:	1880062e 	bgeu	r3,r2,101787c <altera_avalon_jtag_uart_write+0x98>
        n = out - 1 - in;
 1017864:	e0fff817 	ldw	r3,-32(fp)
 1017868:	e0bff917 	ldw	r2,-28(fp)
 101786c:	1885c83a 	sub	r2,r3,r2
 1017870:	10bfffc4 	addi	r2,r2,-1
 1017874:	e0bff715 	stw	r2,-36(fp)
 1017878:	00000c06 	br	10178ac <altera_avalon_jtag_uart_write+0xc8>
      else if (out > 0)
 101787c:	e0bff817 	ldw	r2,-32(fp)
 1017880:	1005003a 	cmpeq	r2,r2,zero
 1017884:	1000051e 	bne	r2,zero,101789c <altera_avalon_jtag_uart_write+0xb8>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 1017888:	00820004 	movi	r2,2048
 101788c:	e0fff917 	ldw	r3,-28(fp)
 1017890:	10c5c83a 	sub	r2,r2,r3
 1017894:	e0bff715 	stw	r2,-36(fp)
 1017898:	00000406 	br	10178ac <altera_avalon_jtag_uart_write+0xc8>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 101789c:	0081ffc4 	movi	r2,2047
 10178a0:	e0fff917 	ldw	r3,-28(fp)
 10178a4:	10c5c83a 	sub	r2,r2,r3
 10178a8:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
 10178ac:	e0bff717 	ldw	r2,-36(fp)
 10178b0:	1005003a 	cmpeq	r2,r2,zero
 10178b4:	10001f1e 	bne	r2,zero,1017934 <altera_avalon_jtag_uart_write+0x150>
        break;

      if (n > count)
 10178b8:	e0fffd17 	ldw	r3,-12(fp)
 10178bc:	e0bff717 	ldw	r2,-36(fp)
 10178c0:	1880022e 	bgeu	r3,r2,10178cc <altera_avalon_jtag_uart_write+0xe8>
        n = count;
 10178c4:	e0bffd17 	ldw	r2,-12(fp)
 10178c8:	e0bff715 	stw	r2,-36(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 10178cc:	e0bffb17 	ldw	r2,-20(fp)
 10178d0:	10c21104 	addi	r3,r2,2116
 10178d4:	e0bff917 	ldw	r2,-28(fp)
 10178d8:	1885883a 	add	r2,r3,r2
 10178dc:	e0fffc17 	ldw	r3,-16(fp)
 10178e0:	1009883a 	mov	r4,r2
 10178e4:	180b883a 	mov	r5,r3
 10178e8:	e1bff717 	ldw	r6,-36(fp)
 10178ec:	10082f80 	call	10082f8 <memcpy>
      ptr   += n;
 10178f0:	e0fff717 	ldw	r3,-36(fp)
 10178f4:	e0bffc17 	ldw	r2,-16(fp)
 10178f8:	10c5883a 	add	r2,r2,r3
 10178fc:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 1017900:	e0fffd17 	ldw	r3,-12(fp)
 1017904:	e0bff717 	ldw	r2,-36(fp)
 1017908:	1885c83a 	sub	r2,r3,r2
 101790c:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1017910:	e0fff917 	ldw	r3,-28(fp)
 1017914:	e0bff717 	ldw	r2,-36(fp)
 1017918:	1885883a 	add	r2,r3,r2
 101791c:	10c1ffcc 	andi	r3,r2,2047
 1017920:	e0bffb17 	ldw	r2,-20(fp)
 1017924:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 1017928:	e0bffd17 	ldw	r2,-12(fp)
 101792c:	10800048 	cmpgei	r2,r2,1
 1017930:	103fc31e 	bne	r2,zero,1017840 <altera_avalon_jtag_uart_write+0x5c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1017934:	0005303a 	rdctl	r2,status
 1017938:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101793c:	e0fff217 	ldw	r3,-56(fp)
 1017940:	00bfff84 	movi	r2,-2
 1017944:	1884703a 	and	r2,r3,r2
 1017948:	1001703a 	wrctl	status,r2
  
  return context;
 101794c:	e0bff217 	ldw	r2,-56(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 1017950:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 1017954:	e0bffb17 	ldw	r2,-20(fp)
 1017958:	10800817 	ldw	r2,32(r2)
 101795c:	10c00094 	ori	r3,r2,2
 1017960:	e0bffb17 	ldw	r2,-20(fp)
 1017964:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1017968:	e0bffb17 	ldw	r2,-20(fp)
 101796c:	10800017 	ldw	r2,0(r2)
 1017970:	11000104 	addi	r4,r2,4
 1017974:	e0bffb17 	ldw	r2,-20(fp)
 1017978:	10800817 	ldw	r2,32(r2)
 101797c:	1007883a 	mov	r3,r2
 1017980:	2005883a 	mov	r2,r4
 1017984:	10c00035 	stwio	r3,0(r2)
 1017988:	e0bff617 	ldw	r2,-40(fp)
 101798c:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1017990:	e0bff117 	ldw	r2,-60(fp)
 1017994:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 1017998:	e0bffd17 	ldw	r2,-12(fp)
 101799c:	10800050 	cmplti	r2,r2,1
 10179a0:	10002d1e 	bne	r2,zero,1017a58 <altera_avalon_jtag_uart_write+0x274>
    {
      if (flags & O_NONBLOCK)
 10179a4:	e0bffe17 	ldw	r2,-8(fp)
 10179a8:	1090000c 	andi	r2,r2,16384
 10179ac:	1004c03a 	cmpne	r2,r2,zero
 10179b0:	10002c1e 	bne	r2,zero,1017a64 <altera_avalon_jtag_uart_write+0x280>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
 10179b4:	008040f4 	movhi	r2,259
 10179b8:	10976804 	addi	r2,r2,23968
 10179bc:	10800003 	ldbu	r2,0(r2)
 10179c0:	10803fcc 	andi	r2,r2,255
 10179c4:	10800058 	cmpnei	r2,r2,1
 10179c8:	1000161e 	bne	r2,zero,1017a24 <altera_avalon_jtag_uart_write+0x240>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
 10179cc:	e0bffb17 	ldw	r2,-20(fp)
 10179d0:	10800c17 	ldw	r2,48(r2)
 10179d4:	e0bfee15 	stw	r2,-72(fp)
 10179d8:	00800184 	movi	r2,6
 10179dc:	e0bfef0d 	sth	r2,-68(fp)
 10179e0:	00bfe0c4 	movi	r2,-125
 10179e4:	e0bfef85 	stb	r2,-66(fp)
 10179e8:	e03ff00d 	sth	zero,-64(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 10179ec:	008040f4 	movhi	r2,259
 10179f0:	10976804 	addi	r2,r2,23968
 10179f4:	10800003 	ldbu	r2,0(r2)
 10179f8:	10803fcc 	andi	r2,r2,255
 10179fc:	1005003a 	cmpeq	r2,r2,zero
 1017a00:	1000111e 	bne	r2,zero,1017a48 <altera_avalon_jtag_uart_write+0x264>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 1017a04:	e17fef0b 	ldhu	r5,-68(fp)
 1017a08:	e1bfef83 	ldbu	r6,-66(fp)
 1017a0c:	e1fff00b 	ldhu	r7,-64(fp)
 1017a10:	e0bffa44 	addi	r2,fp,-23
 1017a14:	d8800015 	stw	r2,0(sp)
 1017a18:	e13fee17 	ldw	r4,-72(fp)
 1017a1c:	100fc700 	call	100fc70 <OSFlagPend>
    return err;
 1017a20:	00000906 	br	1017a48 <altera_avalon_jtag_uart_write+0x264>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 1017a24:	e0bffb17 	ldw	r2,-20(fp)
 1017a28:	10c01017 	ldw	r3,64(r2)
 1017a2c:	e0bff817 	ldw	r2,-32(fp)
 1017a30:	1880051e 	bne	r3,r2,1017a48 <altera_avalon_jtag_uart_write+0x264>
 1017a34:	e0bffb17 	ldw	r2,-20(fp)
 1017a38:	10c00917 	ldw	r3,36(r2)
 1017a3c:	e0bffb17 	ldw	r2,-20(fp)
 1017a40:	10800117 	ldw	r2,4(r2)
 1017a44:	18bff736 	bltu	r3,r2,1017a24 <altera_avalon_jtag_uart_write+0x240>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 1017a48:	e0bffb17 	ldw	r2,-20(fp)
 1017a4c:	10c01017 	ldw	r3,64(r2)
 1017a50:	e0bff817 	ldw	r2,-32(fp)
 1017a54:	18800326 	beq	r3,r2,1017a64 <altera_avalon_jtag_uart_write+0x280>
         break;
    }
  }
  while (count > 0);
 1017a58:	e0bffd17 	ldw	r2,-12(fp)
 1017a5c:	10800048 	cmpgei	r2,r2,1
 1017a60:	103fb11e 	bne	r2,zero,1017928 <altera_avalon_jtag_uart_write+0x144>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
 1017a64:	e0bffb17 	ldw	r2,-20(fp)
 1017a68:	11000b17 	ldw	r4,44(r2)
 1017a6c:	101311c0 	call	101311c <OSSemPost>

  if (ptr != start)
 1017a70:	e0fffc17 	ldw	r3,-16(fp)
 1017a74:	e0bff517 	ldw	r2,-44(fp)
 1017a78:	18800526 	beq	r3,r2,1017a90 <altera_avalon_jtag_uart_write+0x2ac>
    return ptr - start;
 1017a7c:	e0fffc17 	ldw	r3,-16(fp)
 1017a80:	e0bff517 	ldw	r2,-44(fp)
 1017a84:	1887c83a 	sub	r3,r3,r2
 1017a88:	e0ffff15 	stw	r3,-4(fp)
 1017a8c:	00000906 	br	1017ab4 <altera_avalon_jtag_uart_write+0x2d0>
  else if (flags & O_NONBLOCK)
 1017a90:	e0bffe17 	ldw	r2,-8(fp)
 1017a94:	1090000c 	andi	r2,r2,16384
 1017a98:	1005003a 	cmpeq	r2,r2,zero
 1017a9c:	1000031e 	bne	r2,zero,1017aac <altera_avalon_jtag_uart_write+0x2c8>
    return -EWOULDBLOCK;
 1017aa0:	00bffd44 	movi	r2,-11
 1017aa4:	e0bfff15 	stw	r2,-4(fp)
 1017aa8:	00000206 	br	1017ab4 <altera_avalon_jtag_uart_write+0x2d0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 1017aac:	00bffec4 	movi	r2,-5
 1017ab0:	e0bfff15 	stw	r2,-4(fp)
 1017ab4:	e0bfff17 	ldw	r2,-4(fp)
}
 1017ab8:	e037883a 	mov	sp,fp
 1017abc:	dfc00117 	ldw	ra,4(sp)
 1017ac0:	df000017 	ldw	fp,0(sp)
 1017ac4:	dec00204 	addi	sp,sp,8
 1017ac8:	f800283a 	ret

01017acc <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 1017acc:	f811883a 	mov	r8,ra
 1017ad0:	100c3d80 	call	100c3d8 <_mcount>
 1017ad4:	403f883a 	mov	ra,r8
 1017ad8:	defff904 	addi	sp,sp,-28
 1017adc:	df000615 	stw	fp,24(sp)
 1017ae0:	df000604 	addi	fp,sp,24
 1017ae4:	e13ffe15 	stw	r4,-8(fp)
 1017ae8:	e17fff15 	stw	r5,-4(fp)
  alt_u32 id, data, check;
  int ret_code = -1;
 1017aec:	00bfffc4 	movi	r2,-1
 1017af0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_READ_CPUID(id);
 1017af4:	0005317a 	rdctl	r2,cpuid
 1017af8:	e0bffd15 	stw	r2,-12(fp)

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
 1017afc:	e0bffd17 	ldw	r2,-12(fp)
 1017b00:	1006943a 	slli	r3,r2,16
 1017b04:	e0bfff17 	ldw	r2,-4(fp)
 1017b08:	1884b03a 	or	r2,r3,r2
 1017b0c:	e0bffc15 	stw	r2,-16(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
 1017b10:	e0bffe17 	ldw	r2,-8(fp)
 1017b14:	10800317 	ldw	r2,12(r2)
 1017b18:	e0fffc17 	ldw	r3,-16(fp)
 1017b1c:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 1017b20:	e0bffe17 	ldw	r2,-8(fp)
 1017b24:	10800317 	ldw	r2,12(r2)
 1017b28:	10800037 	ldwio	r2,0(r2)
 1017b2c:	e0bffb15 	stw	r2,-20(fp)

  if ( check == data)
 1017b30:	e0fffb17 	ldw	r3,-20(fp)
 1017b34:	e0bffc17 	ldw	r2,-16(fp)
 1017b38:	1880011e 	bne	r3,r2,1017b40 <alt_mutex_trylock+0x74>
  {
    ret_code = 0;
 1017b3c:	e03ffa15 	stw	zero,-24(fp)
  }

  return ret_code;
 1017b40:	e0bffa17 	ldw	r2,-24(fp)
}
 1017b44:	e037883a 	mov	sp,fp
 1017b48:	df000017 	ldw	fp,0(sp)
 1017b4c:	dec00104 	addi	sp,sp,4
 1017b50:	f800283a 	ret

01017b54 <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
 1017b54:	f811883a 	mov	r8,ra
 1017b58:	100c3d80 	call	100c3d8 <_mcount>
 1017b5c:	403f883a 	mov	ra,r8
 1017b60:	defffc04 	addi	sp,sp,-16
 1017b64:	dfc00315 	stw	ra,12(sp)
 1017b68:	df000215 	stw	fp,8(sp)
 1017b6c:	df000204 	addi	fp,sp,8
 1017b70:	e13fff15 	stw	r4,-4(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
 1017b74:	e13fff17 	ldw	r4,-4(fp)
 1017b78:	d1602f04 	addi	r5,gp,-32580
 1017b7c:	10186580 	call	1018658 <alt_find_dev>
 1017b80:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
 1017b84:	e0bffe17 	ldw	r2,-8(fp)
 1017b88:	1004c03a 	cmpne	r2,r2,zero
 1017b8c:	1000041e 	bne	r2,zero,1017ba0 <altera_avalon_mutex_open+0x4c>
  {
    ALT_ERRNO = ENODEV;
 1017b90:	1017bb80 	call	1017bb8 <alt_get_errno>
 1017b94:	1007883a 	mov	r3,r2
 1017b98:	008004c4 	movi	r2,19
 1017b9c:	18800015 	stw	r2,0(r3)
  }

  return dev;
 1017ba0:	e0bffe17 	ldw	r2,-8(fp)
}
 1017ba4:	e037883a 	mov	sp,fp
 1017ba8:	dfc00117 	ldw	ra,4(sp)
 1017bac:	df000017 	ldw	fp,0(sp)
 1017bb0:	dec00204 	addi	sp,sp,8
 1017bb4:	f800283a 	ret

01017bb8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1017bb8:	f811883a 	mov	r8,ra
 1017bbc:	100c3d80 	call	100c3d8 <_mcount>
 1017bc0:	403f883a 	mov	ra,r8
 1017bc4:	defffd04 	addi	sp,sp,-12
 1017bc8:	dfc00215 	stw	ra,8(sp)
 1017bcc:	df000115 	stw	fp,4(sp)
 1017bd0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1017bd4:	008040f4 	movhi	r2,259
 1017bd8:	10a01204 	addi	r2,r2,-32696
 1017bdc:	10800017 	ldw	r2,0(r2)
 1017be0:	1005003a 	cmpeq	r2,r2,zero
 1017be4:	1000061e 	bne	r2,zero,1017c00 <alt_get_errno+0x48>
 1017be8:	008040f4 	movhi	r2,259
 1017bec:	10a01204 	addi	r2,r2,-32696
 1017bf0:	10800017 	ldw	r2,0(r2)
 1017bf4:	103ee83a 	callr	r2
 1017bf8:	e0bfff15 	stw	r2,-4(fp)
 1017bfc:	00000306 	br	1017c0c <alt_get_errno+0x54>
 1017c00:	008040f4 	movhi	r2,259
 1017c04:	10975a04 	addi	r2,r2,23912
 1017c08:	e0bfff15 	stw	r2,-4(fp)
 1017c0c:	e0bfff17 	ldw	r2,-4(fp)
}
 1017c10:	e037883a 	mov	sp,fp
 1017c14:	dfc00117 	ldw	ra,4(sp)
 1017c18:	df000017 	ldw	fp,0(sp)
 1017c1c:	dec00204 	addi	sp,sp,8
 1017c20:	f800283a 	ret

01017c24 <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
 1017c24:	f811883a 	mov	r8,ra
 1017c28:	100c3d80 	call	100c3d8 <_mcount>
 1017c2c:	403f883a 	mov	ra,r8
 1017c30:	defffe04 	addi	sp,sp,-8
 1017c34:	df000115 	stw	fp,4(sp)
 1017c38:	df000104 	addi	fp,sp,4
 1017c3c:	e13fff15 	stw	r4,-4(fp)
  return;
}
 1017c40:	e037883a 	mov	sp,fp
 1017c44:	df000017 	ldw	fp,0(sp)
 1017c48:	dec00104 	addi	sp,sp,4
 1017c4c:	f800283a 	ret

01017c50 <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
 1017c50:	f811883a 	mov	r8,ra
 1017c54:	100c3d80 	call	100c3d8 <_mcount>
 1017c58:	403f883a 	mov	ra,r8
 1017c5c:	defffa04 	addi	sp,sp,-24
 1017c60:	dfc00515 	stw	ra,20(sp)
 1017c64:	df000415 	stw	fp,16(sp)
 1017c68:	df000404 	addi	fp,sp,16
 1017c6c:	e13ffe15 	stw	r4,-8(fp)
 1017c70:	e17fff15 	stw	r5,-4(fp)
  /*
   * When running in a multi threaded environment, obtain the "lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);
 1017c74:	e0bffe17 	ldw	r2,-8(fp)
 1017c78:	10800417 	ldw	r2,16(r2)
 1017c7c:	e0bffc15 	stw	r2,-16(fp)
 1017c80:	e03ffd0d 	sth	zero,-12(fp)
 1017c84:	e17ffd0b 	ldhu	r5,-12(fp)
 1017c88:	e1bffd84 	addi	r6,fp,-10
 1017c8c:	e13ffc17 	ldw	r4,-16(fp)
 1017c90:	1012d0c0 	call	1012d0c <OSSemPend>

  while ( alt_mutex_trylock( dev, value ) != 0);
 1017c94:	e13ffe17 	ldw	r4,-8(fp)
 1017c98:	e17fff17 	ldw	r5,-4(fp)
 1017c9c:	1017acc0 	call	1017acc <alt_mutex_trylock>
 1017ca0:	1004c03a 	cmpne	r2,r2,zero
 1017ca4:	103ffb1e 	bne	r2,zero,1017c94 <altera_avalon_mutex_lock+0x44>
}
 1017ca8:	e037883a 	mov	sp,fp
 1017cac:	dfc00117 	ldw	ra,4(sp)
 1017cb0:	df000017 	ldw	fp,0(sp)
 1017cb4:	dec00204 	addi	sp,sp,8
 1017cb8:	f800283a 	ret

01017cbc <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 1017cbc:	f811883a 	mov	r8,ra
 1017cc0:	100c3d80 	call	100c3d8 <_mcount>
 1017cc4:	403f883a 	mov	ra,r8
 1017cc8:	defff804 	addi	sp,sp,-32
 1017ccc:	dfc00715 	stw	ra,28(sp)
 1017cd0:	df000615 	stw	fp,24(sp)
 1017cd4:	df000604 	addi	fp,sp,24
 1017cd8:	e13ffe15 	stw	r4,-8(fp)
 1017cdc:	e17fff15 	stw	r5,-4(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);
 1017ce0:	e0bffe17 	ldw	r2,-8(fp)
 1017ce4:	10800417 	ldw	r2,16(r2)
 1017ce8:	e0bffa15 	stw	r2,-24(fp)
 1017cec:	e03ffb0d 	sth	zero,-20(fp)
 1017cf0:	e17ffb0b 	ldhu	r5,-20(fp)
 1017cf4:	e1bffd04 	addi	r6,fp,-12
 1017cf8:	e13ffa17 	ldw	r4,-24(fp)
 1017cfc:	1012d0c0 	call	1012d0c <OSSemPend>

  ret_code = alt_mutex_trylock( dev, value);
 1017d00:	e13ffe17 	ldw	r4,-8(fp)
 1017d04:	e17fff17 	ldw	r5,-4(fp)
 1017d08:	1017acc0 	call	1017acc <alt_mutex_trylock>
 1017d0c:	e0bffc15 	stw	r2,-16(fp)

  /*
  * If the try failed then release the thread Mutex  
  */
  if (ret_code)
 1017d10:	e0bffc17 	ldw	r2,-16(fp)
 1017d14:	1005003a 	cmpeq	r2,r2,zero
 1017d18:	1000031e 	bne	r2,zero,1017d28 <altera_avalon_mutex_trylock+0x6c>
  {
    ALT_SEM_POST (dev->lock);
 1017d1c:	e0bffe17 	ldw	r2,-8(fp)
 1017d20:	11000417 	ldw	r4,16(r2)
 1017d24:	101311c0 	call	101311c <OSSemPost>
  }

  return ret_code;
 1017d28:	e0bffc17 	ldw	r2,-16(fp)
}
 1017d2c:	e037883a 	mov	sp,fp
 1017d30:	dfc00117 	ldw	ra,4(sp)
 1017d34:	df000017 	ldw	fp,0(sp)
 1017d38:	dec00204 	addi	sp,sp,8
 1017d3c:	f800283a 	ret

01017d40 <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
 1017d40:	f811883a 	mov	r8,ra
 1017d44:	100c3d80 	call	100c3d8 <_mcount>
 1017d48:	403f883a 	mov	ra,r8
 1017d4c:	defffc04 	addi	sp,sp,-16
 1017d50:	dfc00315 	stw	ra,12(sp)
 1017d54:	df000215 	stw	fp,8(sp)
 1017d58:	df000204 	addi	fp,sp,8
 1017d5c:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id;
  NIOS2_READ_CPUID(id);
 1017d60:	0005317a 	rdctl	r2,cpuid
 1017d64:	e0bffe15 	stw	r2,-8(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
 1017d68:	e0bfff17 	ldw	r2,-4(fp)
 1017d6c:	10800317 	ldw	r2,12(r2)
 1017d70:	10800104 	addi	r2,r2,4
 1017d74:	1007883a 	mov	r3,r2
 1017d78:	00800044 	movi	r2,1
 1017d7c:	18800035 	stwio	r2,0(r3)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
 1017d80:	e0bfff17 	ldw	r2,-4(fp)
 1017d84:	11000317 	ldw	r4,12(r2)
 1017d88:	e0bffe17 	ldw	r2,-8(fp)
 1017d8c:	1004943a 	slli	r2,r2,16
 1017d90:	1007883a 	mov	r3,r2
 1017d94:	2005883a 	mov	r2,r4
 1017d98:	10c00035 	stwio	r3,0(r2)
                                  id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST);

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
 1017d9c:	e0bfff17 	ldw	r2,-4(fp)
 1017da0:	11000417 	ldw	r4,16(r2)
 1017da4:	101311c0 	call	101311c <OSSemPost>
}
 1017da8:	e037883a 	mov	sp,fp
 1017dac:	dfc00117 	ldw	ra,4(sp)
 1017db0:	df000017 	ldw	fp,0(sp)
 1017db4:	dec00204 	addi	sp,sp,8
 1017db8:	f800283a 	ret

01017dbc <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
 1017dbc:	f811883a 	mov	r8,ra
 1017dc0:	100c3d80 	call	100c3d8 <_mcount>
 1017dc4:	403f883a 	mov	ra,r8
 1017dc8:	defff904 	addi	sp,sp,-28
 1017dcc:	df000615 	stw	fp,24(sp)
 1017dd0:	df000604 	addi	fp,sp,24
 1017dd4:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id, data, owner, value;
  int ret_code = 0;
 1017dd8:	e03ffa15 	stw	zero,-24(fp)

  NIOS2_READ_CPUID(id);
 1017ddc:	0005317a 	rdctl	r2,cpuid
 1017de0:	e0bffe15 	stw	r2,-8(fp)

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 1017de4:	e0bfff17 	ldw	r2,-4(fp)
 1017de8:	10800317 	ldw	r2,12(r2)
 1017dec:	10800037 	ldwio	r2,0(r2)
 1017df0:	e0bffd15 	stw	r2,-12(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
 1017df4:	e0bffd17 	ldw	r2,-12(fp)
 1017df8:	10bfffec 	andhi	r2,r2,65535
 1017dfc:	1004d43a 	srli	r2,r2,16
 1017e00:	e0bffc15 	stw	r2,-16(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
 1017e04:	e0fffc17 	ldw	r3,-16(fp)
 1017e08:	e0bffe17 	ldw	r2,-8(fp)
 1017e0c:	1880081e 	bne	r3,r2,1017e30 <altera_avalon_mutex_is_mine+0x74>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
 1017e10:	e0bffd17 	ldw	r2,-12(fp)
 1017e14:	10bfffcc 	andi	r2,r2,65535
 1017e18:	e0bffb15 	stw	r2,-20(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
 1017e1c:	e0bffb17 	ldw	r2,-20(fp)
 1017e20:	1005003a 	cmpeq	r2,r2,zero
 1017e24:	1000021e 	bne	r2,zero,1017e30 <altera_avalon_mutex_is_mine+0x74>
    {
      ret_code = 1;
 1017e28:	00800044 	movi	r2,1
 1017e2c:	e0bffa15 	stw	r2,-24(fp)
    }
  }

  return ret_code;
 1017e30:	e0bffa17 	ldw	r2,-24(fp)
}
 1017e34:	e037883a 	mov	sp,fp
 1017e38:	df000017 	ldw	fp,0(sp)
 1017e3c:	dec00104 	addi	sp,sp,4
 1017e40:	f800283a 	ret

01017e44 <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
 1017e44:	f811883a 	mov	r8,ra
 1017e48:	100c3d80 	call	100c3d8 <_mcount>
 1017e4c:	403f883a 	mov	ra,r8
 1017e50:	defffc04 	addi	sp,sp,-16
 1017e54:	df000315 	stw	fp,12(sp)
 1017e58:	df000304 	addi	fp,sp,12
 1017e5c:	e13fff15 	stw	r4,-4(fp)
  alt_u32 data;
  int ret_code = 0;
 1017e60:	e03ffd15 	stw	zero,-12(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
 1017e64:	e0bfff17 	ldw	r2,-4(fp)
 1017e68:	10800317 	ldw	r2,12(r2)
 1017e6c:	10800104 	addi	r2,r2,4
 1017e70:	10800037 	ldwio	r2,0(r2)
 1017e74:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
 1017e78:	e0bffe17 	ldw	r2,-8(fp)
 1017e7c:	1080004c 	andi	r2,r2,1
 1017e80:	10803fcc 	andi	r2,r2,255
 1017e84:	1005003a 	cmpeq	r2,r2,zero
 1017e88:	1000021e 	bne	r2,zero,1017e94 <altera_avalon_mutex_first_lock+0x50>
  {
    ret_code = 1;
 1017e8c:	00800044 	movi	r2,1
 1017e90:	e0bffd15 	stw	r2,-12(fp)
  }

  return ret_code;
 1017e94:	e0bffd17 	ldw	r2,-12(fp)
}
 1017e98:	e037883a 	mov	sp,fp
 1017e9c:	df000017 	ldw	fp,0(sp)
 1017ea0:	dec00104 	addi	sp,sp,4
 1017ea4:	f800283a 	ret

01017ea8 <perf_get_section_time>:

#include "altera_avalon_performance_counter.h"
#include "system.h"

alt_u64 perf_get_section_time (void* hw_base_address, int which_section)
{
 1017ea8:	f811883a 	mov	r8,ra
 1017eac:	100c3d80 	call	100c3d8 <_mcount>
 1017eb0:	403f883a 	mov	ra,r8
 1017eb4:	defff904 	addi	sp,sp,-28
 1017eb8:	df000615 	stw	fp,24(sp)
 1017ebc:	df000604 	addi	fp,sp,24
 1017ec0:	e13ffe15 	stw	r4,-8(fp)
 1017ec4:	e17fff15 	stw	r5,-4(fp)
  alt_u32 lo;
  alt_u32 hi;
  alt_u64 result = 0;
 1017ec8:	e03ffa15 	stw	zero,-24(fp)
 1017ecc:	e03ffb15 	stw	zero,-20(fp)

  PERF_STOP_MEASURING(hw_base_address);
 1017ed0:	e0bffe17 	ldw	r2,-8(fp)
 1017ed4:	10000035 	stwio	zero,0(r2)
  lo = IORD(hw_base_address, ( which_section*4   ));
 1017ed8:	e0bfff17 	ldw	r2,-4(fp)
 1017edc:	1004913a 	slli	r2,r2,4
 1017ee0:	1007883a 	mov	r3,r2
 1017ee4:	e0bffe17 	ldw	r2,-8(fp)
 1017ee8:	1885883a 	add	r2,r3,r2
 1017eec:	10800037 	ldwio	r2,0(r2)
 1017ef0:	e0bffd15 	stw	r2,-12(fp)
  hi = IORD(hw_base_address, ((which_section*4)+1));
 1017ef4:	e0bfff17 	ldw	r2,-4(fp)
 1017ef8:	1004913a 	slli	r2,r2,4
 1017efc:	1007883a 	mov	r3,r2
 1017f00:	e0bffe17 	ldw	r2,-8(fp)
 1017f04:	1885883a 	add	r2,r3,r2
 1017f08:	10800104 	addi	r2,r2,4
 1017f0c:	10800037 	ldwio	r2,0(r2)
 1017f10:	e0bffc15 	stw	r2,-16(fp)

  result = ((alt_u64)(((alt_u64) hi) << ((alt_u64)32))) | 
 1017f14:	e0bffc17 	ldw	r2,-16(fp)
 1017f18:	0007883a 	mov	r3,zero
 1017f1c:	100a983a 	sll	r5,r2,zero
 1017f20:	0009883a 	mov	r4,zero
 1017f24:	e0bffd17 	ldw	r2,-12(fp)
 1017f28:	0007883a 	mov	r3,zero
 1017f2c:	208cb03a 	or	r6,r4,r2
 1017f30:	e1bffa15 	stw	r6,-24(fp)
 1017f34:	28c4b03a 	or	r2,r5,r3
 1017f38:	e0bffb15 	stw	r2,-20(fp)
           ((alt_u64)(((alt_u64) lo)                 ))  ;
  return result;
 1017f3c:	e17ffa17 	ldw	r5,-24(fp)
 1017f40:	e1bffb17 	ldw	r6,-20(fp)
 1017f44:	2807883a 	mov	r3,r5
 1017f48:	3009883a 	mov	r4,r6
}
 1017f4c:	1805883a 	mov	r2,r3
 1017f50:	2007883a 	mov	r3,r4
 1017f54:	e037883a 	mov	sp,fp
 1017f58:	df000017 	ldw	fp,0(sp)
 1017f5c:	dec00104 	addi	sp,sp,4
 1017f60:	f800283a 	ret

01017f64 <perf_get_total_time>:

alt_u64 perf_get_total_time   (void* hw_base_address)
{
 1017f64:	f811883a 	mov	r8,ra
 1017f68:	100c3d80 	call	100c3d8 <_mcount>
 1017f6c:	403f883a 	mov	ra,r8
 1017f70:	defffd04 	addi	sp,sp,-12
 1017f74:	dfc00215 	stw	ra,8(sp)
 1017f78:	df000115 	stw	fp,4(sp)
 1017f7c:	df000104 	addi	fp,sp,4
 1017f80:	e13fff15 	stw	r4,-4(fp)
  return perf_get_section_time (hw_base_address, 0);
 1017f84:	e13fff17 	ldw	r4,-4(fp)
 1017f88:	000b883a 	mov	r5,zero
 1017f8c:	1017ea80 	call	1017ea8 <perf_get_section_time>
 1017f90:	1009883a 	mov	r4,r2
 1017f94:	180b883a 	mov	r5,r3
 1017f98:	200d883a 	mov	r6,r4
 1017f9c:	280f883a 	mov	r7,r5
 1017fa0:	3007883a 	mov	r3,r6
 1017fa4:	3809883a 	mov	r4,r7
}
 1017fa8:	1805883a 	mov	r2,r3
 1017fac:	2007883a 	mov	r3,r4
 1017fb0:	e037883a 	mov	sp,fp
 1017fb4:	dfc00117 	ldw	ra,4(sp)
 1017fb8:	df000017 	ldw	fp,0(sp)
 1017fbc:	dec00204 	addi	sp,sp,8
 1017fc0:	f800283a 	ret

01017fc4 <perf_get_num_starts>:

alt_u32 perf_get_num_starts   (void* hw_base_address, int which_section)
{
 1017fc4:	f811883a 	mov	r8,ra
 1017fc8:	100c3d80 	call	100c3d8 <_mcount>
 1017fcc:	403f883a 	mov	ra,r8
 1017fd0:	defffd04 	addi	sp,sp,-12
 1017fd4:	df000215 	stw	fp,8(sp)
 1017fd8:	df000204 	addi	fp,sp,8
 1017fdc:	e13ffe15 	stw	r4,-8(fp)
 1017fe0:	e17fff15 	stw	r5,-4(fp)
  return IORD(hw_base_address, ((which_section*4)+2));
 1017fe4:	e0bfff17 	ldw	r2,-4(fp)
 1017fe8:	1004913a 	slli	r2,r2,4
 1017fec:	1007883a 	mov	r3,r2
 1017ff0:	e0bffe17 	ldw	r2,-8(fp)
 1017ff4:	1885883a 	add	r2,r3,r2
 1017ff8:	10800204 	addi	r2,r2,8
 1017ffc:	10800037 	ldwio	r2,0(r2)
}
 1018000:	e037883a 	mov	sp,fp
 1018004:	df000017 	ldw	fp,0(sp)
 1018008:	dec00104 	addi	sp,sp,4
 101800c:	f800283a 	ret

01018010 <alt_get_performance_counter_base>:
 * in Nios II IDE just like is done for the system clock timer and
 * timestamp timer.
 */
void* 
alt_get_performance_counter_base()
{
 1018010:	f811883a 	mov	r8,ra
 1018014:	100c3d80 	call	100c3d8 <_mcount>
 1018018:	403f883a 	mov	ra,r8
 101801c:	deffff04 	addi	sp,sp,-4
 1018020:	df000015 	stw	fp,0(sp)
 1018024:	d839883a 	mov	fp,sp
#ifdef PERFORMANCE_COUNTER_0_BASE
    return (void*)PERFORMANCE_COUNTER_0_BASE;
 1018028:	00800434 	movhi	r2,16
 101802c:	10940004 	addi	r2,r2,20480
#else
    return (void*)0;
#endif
}
 1018030:	e037883a 	mov	sp,fp
 1018034:	df000017 	ldw	fp,0(sp)
 1018038:	dec00104 	addi	sp,sp,4
 101803c:	f800283a 	ret

01018040 <alt_get_cpu_freq>:
 * If the performance counter peripheral is in a different time domain,
 * this won't necessarily be the same frequency of the CPU.
 */
alt_u32 
alt_get_cpu_freq()
{
 1018040:	f811883a 	mov	r8,ra
 1018044:	100c3d80 	call	100c3d8 <_mcount>
 1018048:	403f883a 	mov	ra,r8
 101804c:	deffff04 	addi	sp,sp,-4
 1018050:	df000015 	stw	fp,0(sp)
 1018054:	d839883a 	mov	fp,sp
    return ALT_CPU_FREQ;
 1018058:	0080bef4 	movhi	r2,763
 101805c:	10bc2004 	addi	r2,r2,-3968
}
 1018060:	e037883a 	mov	sp,fp
 1018064:	df000017 	ldw	fp,0(sp)
 1018068:	dec00104 	addi	sp,sp,4
 101806c:	f800283a 	ret

01018070 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 1018070:	f811883a 	mov	r8,ra
 1018074:	100c3d80 	call	100c3d8 <_mcount>
 1018078:	403f883a 	mov	ra,r8
 101807c:	defff904 	addi	sp,sp,-28
 1018080:	dfc00615 	stw	ra,24(sp)
 1018084:	df000515 	stw	fp,20(sp)
 1018088:	df000504 	addi	fp,sp,20
 101808c:	e13ffe15 	stw	r4,-8(fp)
 1018090:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 1018094:	e0bffe17 	ldw	r2,-8(fp)
 1018098:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 101809c:	e0bffe17 	ldw	r2,-8(fp)
 10180a0:	10800104 	addi	r2,r2,4
 10180a4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10180a8:	0005303a 	rdctl	r2,status
 10180ac:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10180b0:	e0fffc17 	ldw	r3,-16(fp)
 10180b4:	00bfff84 	movi	r2,-2
 10180b8:	1884703a 	and	r2,r3,r2
 10180bc:	1001703a 	wrctl	status,r2
  
  return context;
 10180c0:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 10180c4:	e0bffd15 	stw	r2,-12(fp)
  alt_tick ();
 10180c8:	100c7f40 	call	100c7f4 <alt_tick>
 10180cc:	e0bffd17 	ldw	r2,-12(fp)
 10180d0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10180d4:	e0bffb17 	ldw	r2,-20(fp)
 10180d8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 10180dc:	e037883a 	mov	sp,fp
 10180e0:	dfc00117 	ldw	ra,4(sp)
 10180e4:	df000017 	ldw	fp,0(sp)
 10180e8:	dec00204 	addi	sp,sp,8
 10180ec:	f800283a 	ret

010180f0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 10180f0:	f811883a 	mov	r8,ra
 10180f4:	100c3d80 	call	100c3d8 <_mcount>
 10180f8:	403f883a 	mov	ra,r8
 10180fc:	defff904 	addi	sp,sp,-28
 1018100:	dfc00615 	stw	ra,24(sp)
 1018104:	df000515 	stw	fp,20(sp)
 1018108:	df000504 	addi	fp,sp,20
 101810c:	e13ffc15 	stw	r4,-16(fp)
 1018110:	e17ffd15 	stw	r5,-12(fp)
 1018114:	e1bffe15 	stw	r6,-8(fp)
 1018118:	e1ffff15 	stw	r7,-4(fp)
 101811c:	e0bfff17 	ldw	r2,-4(fp)
 1018120:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 1018124:	008040f4 	movhi	r2,259
 1018128:	10975f04 	addi	r2,r2,23932
 101812c:	10800017 	ldw	r2,0(r2)
 1018130:	1004c03a 	cmpne	r2,r2,zero
 1018134:	1000041e 	bne	r2,zero,1018148 <alt_avalon_timer_sc_init+0x58>
  {
    _alt_tick_rate = nticks;
 1018138:	00c040f4 	movhi	r3,259
 101813c:	18d75f04 	addi	r3,r3,23932
 1018140:	e0bffb17 	ldw	r2,-20(fp)
 1018144:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 1018148:	e0bffc17 	ldw	r2,-16(fp)
 101814c:	10800104 	addi	r2,r2,4
 1018150:	1007883a 	mov	r3,r2
 1018154:	008001c4 	movi	r2,7
 1018158:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
 101815c:	e13ffe17 	ldw	r4,-8(fp)
 1018160:	e17ffc17 	ldw	r5,-16(fp)
 1018164:	018040b4 	movhi	r6,258
 1018168:	31a01c04 	addi	r6,r6,-32656
 101816c:	1018b700 	call	1018b70 <alt_irq_register>
#endif  
}
 1018170:	e037883a 	mov	sp,fp
 1018174:	dfc00117 	ldw	ra,4(sp)
 1018178:	df000017 	ldw	fp,0(sp)
 101817c:	dec00204 	addi	sp,sp,8
 1018180:	f800283a 	ret

01018184 <perf_print_formatted_report>:

#ifndef SMALL_C_LIB 
int perf_print_formatted_report (void* perf_base, 
                                 alt_u32 clock_freq_hertz,
                                 int num_sections, ...)
{
 1018184:	f811883a 	mov	r8,ra
 1018188:	100c3d80 	call	100c3d8 <_mcount>
 101818c:	403f883a 	mov	ra,r8
 1018190:	deffe504 	addi	sp,sp,-108
 1018194:	dfc01915 	stw	ra,100(sp)
 1018198:	df001815 	stw	fp,96(sp)
 101819c:	dcc01715 	stw	r19,92(sp)
 10181a0:	dc801615 	stw	r18,88(sp)
 10181a4:	dc401515 	stw	r17,84(sp)
 10181a8:	dc001415 	stw	r16,80(sp)
 10181ac:	df001404 	addi	fp,sp,80
 10181b0:	e13ffd15 	stw	r4,-12(fp)
 10181b4:	e17ffe15 	stw	r5,-8(fp)
 10181b8:	e1c00615 	stw	r7,24(fp)
 10181bc:	e1bfff15 	stw	r6,-4(fp)
  va_list name_args;
  double total_sec;
  alt_u64 total_clocks;
  alt_u64 section_clocks;
  char* section_name;
  int section_num = 1;
 10181c0:	00800044 	movi	r2,1
 10181c4:	e0bff415 	stw	r2,-48(fp)

  const char* separator = 
    "+---------------+-----+-----------+---------------+-----------+\n";
 10181c8:	008040b4 	movhi	r2,258
 10181cc:	10a8ed04 	addi	r2,r2,-23628
 10181d0:	e0bff315 	stw	r2,-52(fp)
  const char* column_header = 
    "| Section       |  %  | Time (sec)|  Time (clocks)|Occurrences|\n";
 10181d4:	008040b4 	movhi	r2,258
 10181d8:	10a8fe04 	addi	r2,r2,-23560
 10181dc:	e0bff215 	stw	r2,-56(fp)

  PERF_STOP_MEASURING (perf_base);
 10181e0:	e0bffd17 	ldw	r2,-12(fp)
 10181e4:	10000035 	stwio	zero,0(r2)

  va_start (name_args, num_sections);
 10181e8:	e0800604 	addi	r2,fp,24
 10181ec:	e0bffc15 	stw	r2,-16(fp)

  total_clocks = perf_get_total_time (perf_base);
 10181f0:	e13ffd17 	ldw	r4,-12(fp)
 10181f4:	1017f640 	call	1017f64 <perf_get_total_time>
 10181f8:	1009883a 	mov	r4,r2
 10181fc:	180b883a 	mov	r5,r3
 1018200:	e13ff815 	stw	r4,-32(fp)
 1018204:	e17ff915 	stw	r5,-28(fp)
  total_sec    = ((double)total_clocks) / clock_freq_hertz;
 1018208:	e13ff817 	ldw	r4,-32(fp)
 101820c:	e17ff917 	ldw	r5,-28(fp)
 1018210:	10017500 	call	1001750 <__floatundidf>
 1018214:	1021883a 	mov	r16,r2
 1018218:	1823883a 	mov	r17,r3
 101821c:	e13ffe17 	ldw	r4,-8(fp)
 1018220:	10023400 	call	1002340 <__floatunsidf>
 1018224:	100f883a 	mov	r7,r2
 1018228:	1811883a 	mov	r8,r3
 101822c:	8009883a 	mov	r4,r16
 1018230:	880b883a 	mov	r5,r17
 1018234:	380d883a 	mov	r6,r7
 1018238:	400f883a 	mov	r7,r8
 101823c:	10020dc0 	call	10020dc <__divdf3>
 1018240:	1009883a 	mov	r4,r2
 1018244:	180b883a 	mov	r5,r3
 1018248:	e13ffa15 	stw	r4,-24(fp)
 101824c:	e17ffb15 	stw	r5,-20(fp)

  // Print the total at the top:
  printf ("--Performance Counter Report--\nTotal Time: %3G seconds  (%lld clock-cycles)\n%s%s%s",
 1018250:	e0bff317 	ldw	r2,-52(fp)
 1018254:	d8800115 	stw	r2,4(sp)
 1018258:	e0bff217 	ldw	r2,-56(fp)
 101825c:	d8800215 	stw	r2,8(sp)
 1018260:	e0bff317 	ldw	r2,-52(fp)
 1018264:	d8800315 	stw	r2,12(sp)
 1018268:	e0bff917 	ldw	r2,-28(fp)
 101826c:	d8800015 	stw	r2,0(sp)
 1018270:	e1fff817 	ldw	r7,-32(fp)
 1018274:	010040b4 	movhi	r4,258
 1018278:	21290f04 	addi	r4,r4,-23492
 101827c:	e17ffa17 	ldw	r5,-24(fp)
 1018280:	e1bffb17 	ldw	r6,-20(fp)
 1018284:	1002ccc0 	call	1002ccc <printf>
          total_sec, total_clocks, separator, column_header, separator);

  section_name = va_arg(name_args, char*);
 1018288:	e0fffc17 	ldw	r3,-16(fp)
 101828c:	18800104 	addi	r2,r3,4
 1018290:	e0bffc15 	stw	r2,-16(fp)
 1018294:	1805883a 	mov	r2,r3
 1018298:	10800017 	ldw	r2,0(r2)
 101829c:	e0bff515 	stw	r2,-44(fp)

  for (section_num = 1; section_num <= num_sections; section_num++)
 10182a0:	00800044 	movi	r2,1
 10182a4:	e0bff415 	stw	r2,-48(fp)
 10182a8:	00005106 	br	10183f0 <perf_print_formatted_report+0x26c>
    {
      section_clocks = perf_get_section_time (perf_base, section_num);
 10182ac:	e13ffd17 	ldw	r4,-12(fp)
 10182b0:	e17ff417 	ldw	r5,-48(fp)
 10182b4:	1017ea80 	call	1017ea8 <perf_get_section_time>
 10182b8:	1009883a 	mov	r4,r2
 10182bc:	180b883a 	mov	r5,r3
 10182c0:	e13ff615 	stw	r4,-40(fp)
 10182c4:	e17ff715 	stw	r5,-36(fp)

      printf ("|%-15s|%5.3g|%11.5f|%15lld|%11u|\n%s",
 10182c8:	e13ff617 	ldw	r4,-40(fp)
 10182cc:	e17ff717 	ldw	r5,-36(fp)
 10182d0:	10017500 	call	1001750 <__floatundidf>
 10182d4:	100b883a 	mov	r5,r2
 10182d8:	180d883a 	mov	r6,r3
 10182dc:	2809883a 	mov	r4,r5
 10182e0:	300b883a 	mov	r5,r6
 10182e4:	000d883a 	mov	r6,zero
 10182e8:	01d01674 	movhi	r7,16473
 10182ec:	1001d0c0 	call	1001d0c <__muldf3>
 10182f0:	1009883a 	mov	r4,r2
 10182f4:	180b883a 	mov	r5,r3
 10182f8:	2021883a 	mov	r16,r4
 10182fc:	2823883a 	mov	r17,r5
 1018300:	e13ff817 	ldw	r4,-32(fp)
 1018304:	e17ff917 	ldw	r5,-28(fp)
 1018308:	10017500 	call	1001750 <__floatundidf>
 101830c:	100f883a 	mov	r7,r2
 1018310:	1811883a 	mov	r8,r3
 1018314:	8009883a 	mov	r4,r16
 1018318:	880b883a 	mov	r5,r17
 101831c:	380d883a 	mov	r6,r7
 1018320:	400f883a 	mov	r7,r8
 1018324:	10020dc0 	call	10020dc <__divdf3>
 1018328:	1009883a 	mov	r4,r2
 101832c:	180b883a 	mov	r5,r3
 1018330:	2025883a 	mov	r18,r4
 1018334:	2827883a 	mov	r19,r5
 1018338:	e13ff617 	ldw	r4,-40(fp)
 101833c:	e17ff717 	ldw	r5,-36(fp)
 1018340:	10017500 	call	1001750 <__floatundidf>
 1018344:	1021883a 	mov	r16,r2
 1018348:	1823883a 	mov	r17,r3
 101834c:	e13ffe17 	ldw	r4,-8(fp)
 1018350:	10023400 	call	1002340 <__floatunsidf>
 1018354:	100f883a 	mov	r7,r2
 1018358:	1811883a 	mov	r8,r3
 101835c:	8009883a 	mov	r4,r16
 1018360:	880b883a 	mov	r5,r17
 1018364:	380d883a 	mov	r6,r7
 1018368:	400f883a 	mov	r7,r8
 101836c:	10020dc0 	call	10020dc <__divdf3>
 1018370:	1009883a 	mov	r4,r2
 1018374:	180b883a 	mov	r5,r3
 1018378:	2021883a 	mov	r16,r4
 101837c:	2823883a 	mov	r17,r5
 1018380:	e13ffd17 	ldw	r4,-12(fp)
 1018384:	e17ff417 	ldw	r5,-48(fp)
 1018388:	1017fc40 	call	1017fc4 <perf_get_num_starts>
 101838c:	1007883a 	mov	r3,r2
 1018390:	dc000015 	stw	r16,0(sp)
 1018394:	dc400115 	stw	r17,4(sp)
 1018398:	e0bff617 	ldw	r2,-40(fp)
 101839c:	d8800215 	stw	r2,8(sp)
 10183a0:	e0bff717 	ldw	r2,-36(fp)
 10183a4:	d8800315 	stw	r2,12(sp)
 10183a8:	d8c00415 	stw	r3,16(sp)
 10183ac:	e0bff317 	ldw	r2,-52(fp)
 10183b0:	d8800515 	stw	r2,20(sp)
 10183b4:	010040b4 	movhi	r4,258
 10183b8:	21292404 	addi	r4,r4,-23408
 10183bc:	e17ff517 	ldw	r5,-44(fp)
 10183c0:	900d883a 	mov	r6,r18
 10183c4:	980f883a 	mov	r7,r19
 10183c8:	1002ccc0 	call	1002ccc <printf>
              section_clocks,
              (unsigned int) perf_get_num_starts (perf_base, section_num),
              separator
              );

      section_name = va_arg(name_args, char*);
 10183cc:	e0fffc17 	ldw	r3,-16(fp)
 10183d0:	18800104 	addi	r2,r3,4
 10183d4:	e0bffc15 	stw	r2,-16(fp)
 10183d8:	1805883a 	mov	r2,r3
 10183dc:	10800017 	ldw	r2,0(r2)
 10183e0:	e0bff515 	stw	r2,-44(fp)
  printf ("--Performance Counter Report--\nTotal Time: %3G seconds  (%lld clock-cycles)\n%s%s%s",
          total_sec, total_clocks, separator, column_header, separator);

  section_name = va_arg(name_args, char*);

  for (section_num = 1; section_num <= num_sections; section_num++)
 10183e4:	e0bff417 	ldw	r2,-48(fp)
 10183e8:	10800044 	addi	r2,r2,1
 10183ec:	e0bff415 	stw	r2,-48(fp)
 10183f0:	e0fff417 	ldw	r3,-48(fp)
 10183f4:	e0bfff17 	ldw	r2,-4(fp)
 10183f8:	10ffac0e 	bge	r2,r3,10182ac <perf_print_formatted_report+0x128>
      section_name = va_arg(name_args, char*);
    }

  va_end (name_args);

  return 0;
 10183fc:	0005883a 	mov	r2,zero
}
 1018400:	e037883a 	mov	sp,fp
 1018404:	dfc00517 	ldw	ra,20(sp)
 1018408:	df000417 	ldw	fp,16(sp)
 101840c:	dcc00317 	ldw	r19,12(sp)
 1018410:	dc800217 	ldw	r18,8(sp)
 1018414:	dc400117 	ldw	r17,4(sp)
 1018418:	dc000017 	ldw	r16,0(sp)
 101841c:	dec00704 	addi	sp,sp,28
 1018420:	f800283a 	ret

01018424 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 1018424:	f811883a 	mov	r8,ra
 1018428:	100c3d80 	call	100c3d8 <_mcount>
 101842c:	403f883a 	mov	ra,r8
 1018430:	deffff04 	addi	sp,sp,-4
 1018434:	df000015 	stw	fp,0(sp)
 1018438:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 101843c:	e037883a 	mov	sp,fp
 1018440:	df000017 	ldw	fp,0(sp)
 1018444:	dec00104 	addi	sp,sp,4
 1018448:	f800283a 	ret

0101844c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 101844c:	f811883a 	mov	r8,ra
 1018450:	100c3d80 	call	100c3d8 <_mcount>
 1018454:	403f883a 	mov	ra,r8
 1018458:	defff904 	addi	sp,sp,-28
 101845c:	dfc00615 	stw	ra,24(sp)
 1018460:	df000515 	stw	fp,20(sp)
 1018464:	df000504 	addi	fp,sp,20
 1018468:	e13ffd15 	stw	r4,-12(fp)
 101846c:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 1018470:	e0bffd17 	ldw	r2,-12(fp)
 1018474:	1005003a 	cmpeq	r2,r2,zero
 1018478:	1000041e 	bne	r2,zero,101848c <alt_dev_llist_insert+0x40>
 101847c:	e0bffd17 	ldw	r2,-12(fp)
 1018480:	10800217 	ldw	r2,8(r2)
 1018484:	1004c03a 	cmpne	r2,r2,zero
 1018488:	1000071e 	bne	r2,zero,10184a8 <alt_dev_llist_insert+0x5c>
  {
    ALT_ERRNO = EINVAL;
 101848c:	101850c0 	call	101850c <alt_get_errno>
 1018490:	1007883a 	mov	r3,r2
 1018494:	00800584 	movi	r2,22
 1018498:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 101849c:	00bffa84 	movi	r2,-22
 10184a0:	e0bfff15 	stw	r2,-4(fp)
 10184a4:	00001306 	br	10184f4 <alt_dev_llist_insert+0xa8>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 10184a8:	e0fffd17 	ldw	r3,-12(fp)
 10184ac:	e0bffe17 	ldw	r2,-8(fp)
 10184b0:	e0bffb15 	stw	r2,-20(fp)
 10184b4:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 10184b8:	e0fffc17 	ldw	r3,-16(fp)
 10184bc:	e0bffb17 	ldw	r2,-20(fp)
 10184c0:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 10184c4:	e0bffb17 	ldw	r2,-20(fp)
 10184c8:	10c00017 	ldw	r3,0(r2)
 10184cc:	e0bffc17 	ldw	r2,-16(fp)
 10184d0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 10184d4:	e0bffb17 	ldw	r2,-20(fp)
 10184d8:	10c00017 	ldw	r3,0(r2)
 10184dc:	e0bffc17 	ldw	r2,-16(fp)
 10184e0:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 10184e4:	e0fffb17 	ldw	r3,-20(fp)
 10184e8:	e0bffc17 	ldw	r2,-16(fp)
 10184ec:	18800015 	stw	r2,0(r3)

  return 0;  
 10184f0:	e03fff15 	stw	zero,-4(fp)
 10184f4:	e0bfff17 	ldw	r2,-4(fp)
}
 10184f8:	e037883a 	mov	sp,fp
 10184fc:	dfc00117 	ldw	ra,4(sp)
 1018500:	df000017 	ldw	fp,0(sp)
 1018504:	dec00204 	addi	sp,sp,8
 1018508:	f800283a 	ret

0101850c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 101850c:	f811883a 	mov	r8,ra
 1018510:	100c3d80 	call	100c3d8 <_mcount>
 1018514:	403f883a 	mov	ra,r8
 1018518:	defffd04 	addi	sp,sp,-12
 101851c:	dfc00215 	stw	ra,8(sp)
 1018520:	df000115 	stw	fp,4(sp)
 1018524:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1018528:	008040f4 	movhi	r2,259
 101852c:	10a01204 	addi	r2,r2,-32696
 1018530:	10800017 	ldw	r2,0(r2)
 1018534:	1005003a 	cmpeq	r2,r2,zero
 1018538:	1000061e 	bne	r2,zero,1018554 <alt_get_errno+0x48>
 101853c:	008040f4 	movhi	r2,259
 1018540:	10a01204 	addi	r2,r2,-32696
 1018544:	10800017 	ldw	r2,0(r2)
 1018548:	103ee83a 	callr	r2
 101854c:	e0bfff15 	stw	r2,-4(fp)
 1018550:	00000306 	br	1018560 <alt_get_errno+0x54>
 1018554:	008040f4 	movhi	r2,259
 1018558:	10975a04 	addi	r2,r2,23912
 101855c:	e0bfff15 	stw	r2,-4(fp)
 1018560:	e0bfff17 	ldw	r2,-4(fp)
}
 1018564:	e037883a 	mov	sp,fp
 1018568:	dfc00117 	ldw	ra,4(sp)
 101856c:	df000017 	ldw	fp,0(sp)
 1018570:	dec00204 	addi	sp,sp,8
 1018574:	f800283a 	ret

01018578 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 1018578:	f811883a 	mov	r8,ra
 101857c:	100c3d80 	call	100c3d8 <_mcount>
 1018580:	403f883a 	mov	ra,r8
 1018584:	defffd04 	addi	sp,sp,-12
 1018588:	dfc00215 	stw	ra,8(sp)
 101858c:	df000115 	stw	fp,4(sp)
 1018590:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 1018594:	00bfff04 	movi	r2,-4
 1018598:	00c040b4 	movhi	r3,258
 101859c:	18e77204 	addi	r3,r3,-25144
 10185a0:	1885883a 	add	r2,r3,r2
 10185a4:	e0bfff15 	stw	r2,-4(fp)
 10185a8:	00000606 	br	10185c4 <_do_ctors+0x4c>
        (*ctor) (); 
 10185ac:	e0bfff17 	ldw	r2,-4(fp)
 10185b0:	10800017 	ldw	r2,0(r2)
 10185b4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 10185b8:	e0bfff17 	ldw	r2,-4(fp)
 10185bc:	10bfff04 	addi	r2,r2,-4
 10185c0:	e0bfff15 	stw	r2,-4(fp)
 10185c4:	e0ffff17 	ldw	r3,-4(fp)
 10185c8:	008040b4 	movhi	r2,258
 10185cc:	10a77104 	addi	r2,r2,-25148
 10185d0:	18bff62e 	bgeu	r3,r2,10185ac <_do_ctors+0x34>
        (*ctor) (); 
}
 10185d4:	e037883a 	mov	sp,fp
 10185d8:	dfc00117 	ldw	ra,4(sp)
 10185dc:	df000017 	ldw	fp,0(sp)
 10185e0:	dec00204 	addi	sp,sp,8
 10185e4:	f800283a 	ret

010185e8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 10185e8:	f811883a 	mov	r8,ra
 10185ec:	100c3d80 	call	100c3d8 <_mcount>
 10185f0:	403f883a 	mov	ra,r8
 10185f4:	defffd04 	addi	sp,sp,-12
 10185f8:	dfc00215 	stw	ra,8(sp)
 10185fc:	df000115 	stw	fp,4(sp)
 1018600:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1018604:	00bfff04 	movi	r2,-4
 1018608:	00c040b4 	movhi	r3,258
 101860c:	18e77204 	addi	r3,r3,-25144
 1018610:	1885883a 	add	r2,r3,r2
 1018614:	e0bfff15 	stw	r2,-4(fp)
 1018618:	00000606 	br	1018634 <_do_dtors+0x4c>
        (*dtor) (); 
 101861c:	e0bfff17 	ldw	r2,-4(fp)
 1018620:	10800017 	ldw	r2,0(r2)
 1018624:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1018628:	e0bfff17 	ldw	r2,-4(fp)
 101862c:	10bfff04 	addi	r2,r2,-4
 1018630:	e0bfff15 	stw	r2,-4(fp)
 1018634:	e0ffff17 	ldw	r3,-4(fp)
 1018638:	008040b4 	movhi	r2,258
 101863c:	10a77204 	addi	r2,r2,-25144
 1018640:	18bff62e 	bgeu	r3,r2,101861c <_do_dtors+0x34>
        (*dtor) (); 
}
 1018644:	e037883a 	mov	sp,fp
 1018648:	dfc00117 	ldw	ra,4(sp)
 101864c:	df000017 	ldw	fp,0(sp)
 1018650:	dec00204 	addi	sp,sp,8
 1018654:	f800283a 	ret

01018658 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 1018658:	f811883a 	mov	r8,ra
 101865c:	100c3d80 	call	100c3d8 <_mcount>
 1018660:	403f883a 	mov	ra,r8
 1018664:	defff904 	addi	sp,sp,-28
 1018668:	dfc00615 	stw	ra,24(sp)
 101866c:	df000515 	stw	fp,20(sp)
 1018670:	df000504 	addi	fp,sp,20
 1018674:	e13ffd15 	stw	r4,-12(fp)
 1018678:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 101867c:	e0bffe17 	ldw	r2,-8(fp)
 1018680:	10800017 	ldw	r2,0(r2)
 1018684:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 1018688:	e13ffd17 	ldw	r4,-12(fp)
 101868c:	1002e640 	call	1002e64 <strlen>
 1018690:	10800044 	addi	r2,r2,1
 1018694:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1018698:	00000d06 	br	10186d0 <alt_find_dev+0x78>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 101869c:	e0bffc17 	ldw	r2,-16(fp)
 10186a0:	11000217 	ldw	r4,8(r2)
 10186a4:	e1bffb17 	ldw	r6,-20(fp)
 10186a8:	e17ffd17 	ldw	r5,-12(fp)
 10186ac:	10198c40 	call	10198c4 <memcmp>
 10186b0:	1004c03a 	cmpne	r2,r2,zero
 10186b4:	1000031e 	bne	r2,zero,10186c4 <alt_find_dev+0x6c>
    {
      /* match found */

      return next;
 10186b8:	e0bffc17 	ldw	r2,-16(fp)
 10186bc:	e0bfff15 	stw	r2,-4(fp)
 10186c0:	00000706 	br	10186e0 <alt_find_dev+0x88>
    }
    next = (alt_dev*) next->llist.next;
 10186c4:	e0bffc17 	ldw	r2,-16(fp)
 10186c8:	10800017 	ldw	r2,0(r2)
 10186cc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 10186d0:	e0fffe17 	ldw	r3,-8(fp)
 10186d4:	e0bffc17 	ldw	r2,-16(fp)
 10186d8:	10fff01e 	bne	r2,r3,101869c <alt_find_dev+0x44>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 10186dc:	e03fff15 	stw	zero,-4(fp)
 10186e0:	e0bfff17 	ldw	r2,-4(fp)
}
 10186e4:	e037883a 	mov	sp,fp
 10186e8:	dfc00117 	ldw	ra,4(sp)
 10186ec:	df000017 	ldw	fp,0(sp)
 10186f0:	dec00204 	addi	sp,sp,8
 10186f4:	f800283a 	ret

010186f8 <__mcount_record>:
 *
 * The fast case, where we have already allocated a function arc, has been
 * handled by the assmebler code.
 */
void __mcount_record(void * self_pc, void * from_pc, struct mcount_fn_entry * fn_entry, struct mcount_fn_entry * * fn_head)
{
 10186f8:	defff604 	addi	sp,sp,-40
 10186fc:	dfc00915 	stw	ra,36(sp)
 1018700:	df000815 	stw	fp,32(sp)
 1018704:	df000804 	addi	fp,sp,32
 1018708:	e13ffc15 	stw	r4,-16(fp)
 101870c:	e17ffd15 	stw	r5,-12(fp)
 1018710:	e1bffe15 	stw	r6,-8(fp)
 1018714:	e1ffff15 	stw	r7,-4(fp)
  struct mcount_fn_arc * arc_entry;

  /* Keep trying to start up the PC sampler until it is running.
   * (It can't start until the timer is going).
   */
  if (pcsample_need_init)
 1018718:	d0a03117 	ldw	r2,-32572(gp)
 101871c:	1005003a 	cmpeq	r2,r2,zero
 1018720:	1000031e 	bne	r2,zero,1018730 <__mcount_record+0x38>
  {
    pcsample_need_init = 0;
 1018724:	d0203115 	stw	zero,-32572(gp)
    pcsample_need_init = nios2_pcsample_init();
 1018728:	10188780 	call	1018878 <nios2_pcsample_init>
 101872c:	d0a03115 	stw	r2,-32572(gp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1018730:	0005303a 	rdctl	r2,status
 1018734:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1018738:	e0fff917 	ldw	r3,-28(fp)
 101873c:	00bfff84 	movi	r2,-2
 1018740:	1884703a 	and	r2,r3,r2
 1018744:	1001703a 	wrctl	status,r2
  
  return context;
 1018748:	e0bff917 	ldw	r2,-28(fp)
   * It's safe for the code above to be stepping through the chain and be
   * interrupted by this code modifying it - there is an edge case which will
   * leave two copies of the same arc on the list (both with count=1), but
   * this is dealt with on the host.
   */
  context = alt_irq_disable_all();
 101874c:	e0bffb15 	stw	r2,-20(fp)

  if (fn_entry == NULL)
 1018750:	e0bffe17 	ldw	r2,-8(fp)
 1018754:	1004c03a 	cmpne	r2,r2,zero
 1018758:	10000f1e 	bne	r2,zero,1018798 <__mcount_record+0xa0>
  {
    /* Add it to the list of functions we must output later. */
    fn_entry = (struct mcount_fn_entry *)mcount_allocate(sizeof(struct mcount_fn_entry));
 101875c:	01000304 	movi	r4,12
 1018760:	10187fc0 	call	10187fc <mcount_allocate>
 1018764:	e0bffe15 	stw	r2,-8(fp)

    fn_entry->self_pc = self_pc;
 1018768:	e0fffe17 	ldw	r3,-8(fp)
 101876c:	e0bffc17 	ldw	r2,-16(fp)
 1018770:	18800115 	stw	r2,4(r3)
    fn_entry->arc_head = NULL;
 1018774:	e0bffe17 	ldw	r2,-8(fp)
 1018778:	10000215 	stw	zero,8(r2)

    fn_entry->next = *fn_head;
 101877c:	e0bfff17 	ldw	r2,-4(fp)
 1018780:	10c00017 	ldw	r3,0(r2)
 1018784:	e0bffe17 	ldw	r2,-8(fp)
 1018788:	10c00015 	stw	r3,0(r2)
    *fn_head = fn_entry;
 101878c:	e0ffff17 	ldw	r3,-4(fp)
 1018790:	e0bffe17 	ldw	r2,-8(fp)
 1018794:	18800015 	stw	r2,0(r3)
  }

  /* We will need a new list entry - if there was a list entry before
   * then the assembler code would have handled it. */
  arc_entry = (struct mcount_fn_arc *)mcount_allocate(sizeof(struct mcount_fn_arc));
 1018798:	01000304 	movi	r4,12
 101879c:	10187fc0 	call	10187fc <mcount_allocate>
 10187a0:	e0bffa15 	stw	r2,-24(fp)

  arc_entry->from_pc = from_pc;
 10187a4:	e0fffa17 	ldw	r3,-24(fp)
 10187a8:	e0bffd17 	ldw	r2,-12(fp)
 10187ac:	18800115 	stw	r2,4(r3)
  arc_entry->count = 1;
 10187b0:	e0fffa17 	ldw	r3,-24(fp)
 10187b4:	00800044 	movi	r2,1
 10187b8:	18800215 	stw	r2,8(r3)

  arc_entry->next = fn_entry->arc_head;
 10187bc:	e0bffe17 	ldw	r2,-8(fp)
 10187c0:	10c00217 	ldw	r3,8(r2)
 10187c4:	e0bffa17 	ldw	r2,-24(fp)
 10187c8:	10c00015 	stw	r3,0(r2)
  fn_entry->arc_head = arc_entry;
 10187cc:	e0fffe17 	ldw	r3,-8(fp)
 10187d0:	e0bffa17 	ldw	r2,-24(fp)
 10187d4:	18800215 	stw	r2,8(r3)
 10187d8:	e0bffb17 	ldw	r2,-20(fp)
 10187dc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10187e0:	e0bff817 	ldw	r2,-32(fp)
 10187e4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(context);
}
 10187e8:	e037883a 	mov	sp,fp
 10187ec:	dfc00117 	ldw	ra,4(sp)
 10187f0:	df000017 	ldw	fp,0(sp)
 10187f4:	dec00204 	addi	sp,sp,8
 10187f8:	f800283a 	ret

010187fc <mcount_allocate>:
 * because that's interrupt safe (and because we never free anything).
 *
 * For speed, we allocate a block of data at once.
 */
static __inline__ void * mcount_allocate(unsigned int size)
{
 10187fc:	defffc04 	addi	sp,sp,-16
 1018800:	dfc00315 	stw	ra,12(sp)
 1018804:	df000215 	stw	fp,8(sp)
 1018808:	df000204 	addi	fp,sp,8
 101880c:	e13fff15 	stw	r4,-4(fp)
  void * data;

  if (size > mcount_slab_size)
 1018810:	d0977d17 	ldw	r2,24052(gp)
 1018814:	1007883a 	mov	r3,r2
 1018818:	e0bfff17 	ldw	r2,-4(fp)
 101881c:	1880052e 	bgeu	r3,r2,1018834 <mcount_allocate+0x38>
  {
    mcount_slab_ptr = sbrk(MCOUNT_SLAB_INCREMENT);
 1018820:	0100ff04 	movi	r4,1020
 1018824:	100c6940 	call	100c694 <sbrk>
 1018828:	d0977c15 	stw	r2,24048(gp)
    mcount_slab_size = MCOUNT_SLAB_INCREMENT;
 101882c:	0080ff04 	movi	r2,1020
 1018830:	d0977d15 	stw	r2,24052(gp)
  }

  data = mcount_slab_ptr;
 1018834:	d0977c17 	ldw	r2,24048(gp)
 1018838:	e0bffe15 	stw	r2,-8(fp)
  mcount_slab_ptr += size;
 101883c:	d0d77c17 	ldw	r3,24048(gp)
 1018840:	e0bfff17 	ldw	r2,-4(fp)
 1018844:	1885883a 	add	r2,r3,r2
 1018848:	d0977c15 	stw	r2,24048(gp)
  mcount_slab_size -= size;
 101884c:	d0977d17 	ldw	r2,24052(gp)
 1018850:	1007883a 	mov	r3,r2
 1018854:	e0bfff17 	ldw	r2,-4(fp)
 1018858:	1885c83a 	sub	r2,r3,r2
 101885c:	d0977d15 	stw	r2,24052(gp)

  return data;
 1018860:	e0bffe17 	ldw	r2,-8(fp)
}
 1018864:	e037883a 	mov	sp,fp
 1018868:	dfc00117 	ldw	ra,4(sp)
 101886c:	df000017 	ldw	fp,0(sp)
 1018870:	dec00204 	addi	sp,sp,8
 1018874:	f800283a 	ret

01018878 <nios2_pcsample_init>:
 * It is called the first time mcount is called, and on subsequent calls to
 * mcount until it returns zero. It initializes the pc histogram and turns on
 * timer driven pc sampling.
 */
static int nios2_pcsample_init(void)
{
 1018878:	defffb04 	addi	sp,sp,-20
 101887c:	dfc00415 	stw	ra,16(sp)
 1018880:	df000315 	stw	fp,12(sp)
 1018884:	df000304 	addi	fp,sp,12
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 1018888:	008040f4 	movhi	r2,259
 101888c:	10975f04 	addi	r2,r2,23932
 1018890:	10800017 	ldw	r2,0(r2)
  unsigned int pcsamples_size; 

  /* We sample the PC every tick */
  unsigned int prof_rate = alt_ticks_per_second();
 1018894:	e0bffd15 	stw	r2,-12(fp)
  if (prof_rate == 0)
 1018898:	e0bffd17 	ldw	r2,-12(fp)
 101889c:	1004c03a 	cmpne	r2,r2,zero
 10188a0:	1000031e 	bne	r2,zero,10188b0 <nios2_pcsample_init+0x38>
    return 1;
 10188a4:	00800044 	movi	r2,1
 10188a8:	e0bfff15 	stw	r2,-4(fp)
 10188ac:	00002506 	br	1018944 <nios2_pcsample_init+0xcc>

  /* allocate the histogram buffer s_pcsamples */
  pcsamples_size = (s_high_pc - s_low_pc)/PCSAMPLE_BYTES_PER_BUCKET;
 10188b0:	d0e03317 	ldw	r3,-32564(gp)
 10188b4:	d0a03217 	ldw	r2,-32568(gp)
 10188b8:	1885c83a 	sub	r2,r3,r2
 10188bc:	1004d17a 	srli	r2,r2,5
 10188c0:	e0bffe15 	stw	r2,-8(fp)
  s_pcsamples    = (unsigned short*)sbrk(pcsamples_size * sizeof(unsigned short));
 10188c4:	e0bffe17 	ldw	r2,-8(fp)
 10188c8:	1085883a 	add	r2,r2,r2
 10188cc:	1009883a 	mov	r4,r2
 10188d0:	100c6940 	call	100c694 <sbrk>
 10188d4:	d0977b15 	stw	r2,24044(gp)

  if (s_pcsamples != 0)
 10188d8:	d0977b17 	ldw	r2,24044(gp)
 10188dc:	1005003a 	cmpeq	r2,r2,zero
 10188e0:	1000171e 	bne	r2,zero,1018940 <nios2_pcsample_init+0xc8>
  {
    /* initialize the buffer to zero */
    memset(s_pcsamples, 0, pcsamples_size * sizeof(unsigned short));
 10188e4:	d0d77b17 	ldw	r3,24044(gp)
 10188e8:	e0bffe17 	ldw	r2,-8(fp)
 10188ec:	1085883a 	add	r2,r2,r2
 10188f0:	1809883a 	mov	r4,r3
 10188f4:	100d883a 	mov	r6,r2
 10188f8:	000b883a 	mov	r5,zero
 10188fc:	10084900 	call	1008490 <memset>

    alt_gmon_data[GMON_DATA_PROFILE_DATA] = (int)s_pcsamples;
 1018900:	d0977b17 	ldw	r2,24044(gp)
 1018904:	1007883a 	mov	r3,r2
 1018908:	008040b4 	movhi	r2,258
 101890c:	109ffd04 	addi	r2,r2,32756
 1018910:	10c00215 	stw	r3,8(r2)
    alt_gmon_data[GMON_DATA_PROFILE_RATE] = prof_rate;
 1018914:	00c040b4 	movhi	r3,258
 1018918:	18dffd04 	addi	r3,r3,32756
 101891c:	e0bffd17 	ldw	r2,-12(fp)
 1018920:	18800615 	stw	r2,24(r3)

    /* Sample every tick (it's cheap) */
    alt_alarm_start(&s_nios2_pcsample_alarm, 1, nios2_pcsample, 0);
 1018924:	010040f4 	movhi	r4,259
 1018928:	21179604 	addi	r4,r4,24152
 101892c:	01400044 	movi	r5,1
 1018930:	018040b4 	movhi	r6,258
 1018934:	31a25704 	addi	r6,r6,-30372
 1018938:	000f883a 	mov	r7,zero
 101893c:	100baf80 	call	100baf8 <alt_alarm_start>
  }

  return 0;
 1018940:	e03fff15 	stw	zero,-4(fp)
 1018944:	e0bfff17 	ldw	r2,-4(fp)
}
 1018948:	e037883a 	mov	sp,fp
 101894c:	dfc00117 	ldw	ra,4(sp)
 1018950:	df000017 	ldw	fp,0(sp)
 1018954:	dec00204 	addi	sp,sp,8
 1018958:	f800283a 	ret

0101895c <nios2_pcsample>:

/*
 * Sample the PC value and store it in the histogram
 */
static alt_u32 nios2_pcsample(void* context)
{
 101895c:	defffc04 	addi	sp,sp,-16
 1018960:	df000315 	stw	fp,12(sp)
 1018964:	df000304 	addi	fp,sp,12
 1018968:	e13fff15 	stw	r4,-4(fp)

  /* read the exception return address - this will be
   * inaccurate if there are nested interrupts but we
   * assume that this is rare and the inaccuracy will
   * not be great */
  NIOS2_READ_EA(pc);
 101896c:	e805883a 	mov	r2,ea
 1018970:	e0bffe15 	stw	r2,-8(fp)

  /*
   * If we're within the profilable range then increment the relevant
   * bucket in the histogram
   */
  if (pc >= s_low_pc && pc < s_high_pc && s_pcsamples != 0)
 1018974:	d0e03217 	ldw	r3,-32568(gp)
 1018978:	e0bffe17 	ldw	r2,-8(fp)
 101897c:	10c01336 	bltu	r2,r3,10189cc <nios2_pcsample+0x70>
 1018980:	d0e03317 	ldw	r3,-32564(gp)
 1018984:	e0bffe17 	ldw	r2,-8(fp)
 1018988:	10c0102e 	bgeu	r2,r3,10189cc <nios2_pcsample+0x70>
 101898c:	d0977b17 	ldw	r2,24044(gp)
 1018990:	1005003a 	cmpeq	r2,r2,zero
 1018994:	10000d1e 	bne	r2,zero,10189cc <nios2_pcsample+0x70>
  {
    bucket = (pc - s_low_pc)/PCSAMPLE_BYTES_PER_BUCKET;
 1018998:	d0e03217 	ldw	r3,-32568(gp)
 101899c:	e0bffe17 	ldw	r2,-8(fp)
 10189a0:	10c5c83a 	sub	r2,r2,r3
 10189a4:	1004d17a 	srli	r2,r2,5
 10189a8:	e0bffd15 	stw	r2,-12(fp)
    s_pcsamples[bucket]++;
 10189ac:	e0bffd17 	ldw	r2,-12(fp)
 10189b0:	1085883a 	add	r2,r2,r2
 10189b4:	1007883a 	mov	r3,r2
 10189b8:	d0977b17 	ldw	r2,24044(gp)
 10189bc:	1887883a 	add	r3,r3,r2
 10189c0:	1880000b 	ldhu	r2,0(r3)
 10189c4:	10800044 	addi	r2,r2,1
 10189c8:	1880000d 	sth	r2,0(r3)
  }

  /* Sample every tick */
  return 1;
 10189cc:	00800044 	movi	r2,1
}
 10189d0:	e037883a 	mov	sp,fp
 10189d4:	df000017 	ldw	fp,0(sp)
 10189d8:	dec00104 	addi	sp,sp,4
 10189dc:	f800283a 	ret

010189e0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 10189e0:	f811883a 	mov	r8,ra
 10189e4:	100c3d80 	call	100c3d8 <_mcount>
 10189e8:	403f883a 	mov	ra,r8
 10189ec:	deffff04 	addi	sp,sp,-4
 10189f0:	df000015 	stw	fp,0(sp)
 10189f4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 10189f8:	e037883a 	mov	sp,fp
 10189fc:	df000017 	ldw	fp,0(sp)
 1018a00:	dec00104 	addi	sp,sp,4
 1018a04:	f800283a 	ret

01018a08 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 1018a08:	f811883a 	mov	r8,ra
 1018a0c:	100c3d80 	call	100c3d8 <_mcount>
 1018a10:	403f883a 	mov	ra,r8
 1018a14:	defff804 	addi	sp,sp,-32
 1018a18:	dfc00715 	stw	ra,28(sp)
 1018a1c:	df000615 	stw	fp,24(sp)
 1018a20:	dc000515 	stw	r16,20(sp)
 1018a24:	df000504 	addi	fp,sp,20
 1018a28:	e13ffc15 	stw	r4,-16(fp)
 1018a2c:	e17ffd15 	stw	r5,-12(fp)
 1018a30:	e1bffe15 	stw	r6,-8(fp)
 1018a34:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 1018a38:	e13ffd17 	ldw	r4,-12(fp)
 1018a3c:	e17ffe17 	ldw	r5,-8(fp)
 1018a40:	e1bfff17 	ldw	r6,-4(fp)
 1018a44:	1018e400 	call	1018e40 <open>
 1018a48:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 1018a4c:	e0bffb17 	ldw	r2,-20(fp)
 1018a50:	1004803a 	cmplt	r2,r2,zero
 1018a54:	10001f1e 	bne	r2,zero,1018ad4 <alt_open_fd+0xcc>
  {
    fd->dev      = alt_fd_list[old].dev;
 1018a58:	e13ffb17 	ldw	r4,-20(fp)
 1018a5c:	040040b4 	movhi	r16,258
 1018a60:	841b4804 	addi	r16,r16,27936
 1018a64:	01400304 	movi	r5,12
 1018a68:	10026680 	call	1002668 <__mulsi3>
 1018a6c:	1405883a 	add	r2,r2,r16
 1018a70:	10c00017 	ldw	r3,0(r2)
 1018a74:	e0bffc17 	ldw	r2,-16(fp)
 1018a78:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 1018a7c:	e13ffb17 	ldw	r4,-20(fp)
 1018a80:	040040b4 	movhi	r16,258
 1018a84:	841b4804 	addi	r16,r16,27936
 1018a88:	01400304 	movi	r5,12
 1018a8c:	10026680 	call	1002668 <__mulsi3>
 1018a90:	1405883a 	add	r2,r2,r16
 1018a94:	10800104 	addi	r2,r2,4
 1018a98:	10c00017 	ldw	r3,0(r2)
 1018a9c:	e0bffc17 	ldw	r2,-16(fp)
 1018aa0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 1018aa4:	e13ffb17 	ldw	r4,-20(fp)
 1018aa8:	040040b4 	movhi	r16,258
 1018aac:	841b4804 	addi	r16,r16,27936
 1018ab0:	01400304 	movi	r5,12
 1018ab4:	10026680 	call	1002668 <__mulsi3>
 1018ab8:	1405883a 	add	r2,r2,r16
 1018abc:	10800204 	addi	r2,r2,8
 1018ac0:	10c00017 	ldw	r3,0(r2)
 1018ac4:	e0bffc17 	ldw	r2,-16(fp)
 1018ac8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 1018acc:	e13ffb17 	ldw	r4,-20(fp)
 1018ad0:	100c6100 	call	100c610 <alt_release_fd>
  }
} 
 1018ad4:	e037883a 	mov	sp,fp
 1018ad8:	dfc00217 	ldw	ra,8(sp)
 1018adc:	df000117 	ldw	fp,4(sp)
 1018ae0:	dc000017 	ldw	r16,0(sp)
 1018ae4:	dec00304 	addi	sp,sp,12
 1018ae8:	f800283a 	ret

01018aec <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 1018aec:	f811883a 	mov	r8,ra
 1018af0:	100c3d80 	call	100c3d8 <_mcount>
 1018af4:	403f883a 	mov	ra,r8
 1018af8:	defffb04 	addi	sp,sp,-20
 1018afc:	dfc00415 	stw	ra,16(sp)
 1018b00:	df000315 	stw	fp,12(sp)
 1018b04:	df000304 	addi	fp,sp,12
 1018b08:	e13ffd15 	stw	r4,-12(fp)
 1018b0c:	e17ffe15 	stw	r5,-8(fp)
 1018b10:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 1018b14:	010040b4 	movhi	r4,258
 1018b18:	211b4b04 	addi	r4,r4,27948
 1018b1c:	e17ffd17 	ldw	r5,-12(fp)
 1018b20:	01800044 	movi	r6,1
 1018b24:	01c07fc4 	movi	r7,511
 1018b28:	1018a080 	call	1018a08 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 1018b2c:	010040b4 	movhi	r4,258
 1018b30:	211b4804 	addi	r4,r4,27936
 1018b34:	e17ffe17 	ldw	r5,-8(fp)
 1018b38:	000d883a 	mov	r6,zero
 1018b3c:	01c07fc4 	movi	r7,511
 1018b40:	1018a080 	call	1018a08 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 1018b44:	010040b4 	movhi	r4,258
 1018b48:	211b4e04 	addi	r4,r4,27960
 1018b4c:	e17fff17 	ldw	r5,-4(fp)
 1018b50:	01800044 	movi	r6,1
 1018b54:	01c07fc4 	movi	r7,511
 1018b58:	1018a080 	call	1018a08 <alt_open_fd>
}  
 1018b5c:	e037883a 	mov	sp,fp
 1018b60:	dfc00117 	ldw	ra,4(sp)
 1018b64:	df000017 	ldw	fp,0(sp)
 1018b68:	dec00204 	addi	sp,sp,8
 1018b6c:	f800283a 	ret

01018b70 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 1018b70:	f811883a 	mov	r8,ra
 1018b74:	100c3d80 	call	100c3d8 <_mcount>
 1018b78:	403f883a 	mov	ra,r8
 1018b7c:	deffef04 	addi	sp,sp,-68
 1018b80:	df001015 	stw	fp,64(sp)
 1018b84:	df001004 	addi	fp,sp,64
 1018b88:	e13ffc15 	stw	r4,-16(fp)
 1018b8c:	e17ffd15 	stw	r5,-12(fp)
 1018b90:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
 1018b94:	00bffa84 	movi	r2,-22
 1018b98:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 1018b9c:	e0bffc17 	ldw	r2,-16(fp)
 1018ba0:	10800828 	cmpgeui	r2,r2,32
 1018ba4:	1000601e 	bne	r2,zero,1018d28 <alt_irq_register+0x1b8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1018ba8:	0005303a 	rdctl	r2,status
 1018bac:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1018bb0:	e0fff917 	ldw	r3,-28(fp)
 1018bb4:	00bfff84 	movi	r2,-2
 1018bb8:	1884703a 	and	r2,r3,r2
 1018bbc:	1001703a 	wrctl	status,r2
  
  return context;
 1018bc0:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 1018bc4:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
 1018bc8:	e0bffc17 	ldw	r2,-16(fp)
 1018bcc:	00c04174 	movhi	r3,261
 1018bd0:	18e73904 	addi	r3,r3,-25372
 1018bd4:	100490fa 	slli	r2,r2,3
 1018bd8:	10c7883a 	add	r3,r2,r3
 1018bdc:	e0bffe17 	ldw	r2,-8(fp)
 1018be0:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
 1018be4:	e0bffc17 	ldw	r2,-16(fp)
 1018be8:	00c04174 	movhi	r3,261
 1018bec:	18e73904 	addi	r3,r3,-25372
 1018bf0:	100490fa 	slli	r2,r2,3
 1018bf4:	10c5883a 	add	r2,r2,r3
 1018bf8:	10c00104 	addi	r3,r2,4
 1018bfc:	e0bffd17 	ldw	r2,-12(fp)
 1018c00:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 1018c04:	e0bffe17 	ldw	r2,-8(fp)
 1018c08:	1005003a 	cmpeq	r2,r2,zero
 1018c0c:	1000201e 	bne	r2,zero,1018c90 <alt_irq_register+0x120>
 1018c10:	e0bffc17 	ldw	r2,-16(fp)
 1018c14:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1018c18:	0005303a 	rdctl	r2,status
 1018c1c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1018c20:	e0fff617 	ldw	r3,-40(fp)
 1018c24:	00bfff84 	movi	r2,-2
 1018c28:	1884703a 	and	r2,r3,r2
 1018c2c:	1001703a 	wrctl	status,r2
  
  return context;
 1018c30:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1018c34:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 1018c38:	e0fff717 	ldw	r3,-36(fp)
 1018c3c:	00800044 	movi	r2,1
 1018c40:	10c4983a 	sll	r2,r2,r3
 1018c44:	1007883a 	mov	r3,r2
 1018c48:	008040f4 	movhi	r2,259
 1018c4c:	10978404 	addi	r2,r2,24080
 1018c50:	10800017 	ldw	r2,0(r2)
 1018c54:	1886b03a 	or	r3,r3,r2
 1018c58:	008040f4 	movhi	r2,259
 1018c5c:	10978404 	addi	r2,r2,24080
 1018c60:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1018c64:	008040f4 	movhi	r2,259
 1018c68:	10978404 	addi	r2,r2,24080
 1018c6c:	10800017 	ldw	r2,0(r2)
 1018c70:	100170fa 	wrctl	ienable,r2
 1018c74:	e0bff817 	ldw	r2,-32(fp)
 1018c78:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1018c7c:	e0bff517 	ldw	r2,-44(fp)
 1018c80:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1018c84:	0005883a 	mov	r2,zero
 1018c88:	e0bfff15 	stw	r2,-4(fp)
 1018c8c:	00002006 	br	1018d10 <alt_irq_register+0x1a0>
 1018c90:	e0bffc17 	ldw	r2,-16(fp)
 1018c94:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1018c98:	0005303a 	rdctl	r2,status
 1018c9c:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1018ca0:	e0fff217 	ldw	r3,-56(fp)
 1018ca4:	00bfff84 	movi	r2,-2
 1018ca8:	1884703a 	and	r2,r3,r2
 1018cac:	1001703a 	wrctl	status,r2
  
  return context;
 1018cb0:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1018cb4:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
 1018cb8:	e0fff317 	ldw	r3,-52(fp)
 1018cbc:	00800044 	movi	r2,1
 1018cc0:	10c4983a 	sll	r2,r2,r3
 1018cc4:	0084303a 	nor	r2,zero,r2
 1018cc8:	1007883a 	mov	r3,r2
 1018ccc:	008040f4 	movhi	r2,259
 1018cd0:	10978404 	addi	r2,r2,24080
 1018cd4:	10800017 	ldw	r2,0(r2)
 1018cd8:	1886703a 	and	r3,r3,r2
 1018cdc:	008040f4 	movhi	r2,259
 1018ce0:	10978404 	addi	r2,r2,24080
 1018ce4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1018ce8:	008040f4 	movhi	r2,259
 1018cec:	10978404 	addi	r2,r2,24080
 1018cf0:	10800017 	ldw	r2,0(r2)
 1018cf4:	100170fa 	wrctl	ienable,r2
 1018cf8:	e0bff417 	ldw	r2,-48(fp)
 1018cfc:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1018d00:	e0bff117 	ldw	r2,-60(fp)
 1018d04:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1018d08:	0005883a 	mov	r2,zero
 1018d0c:	e0bfff15 	stw	r2,-4(fp)
 1018d10:	e0bfff17 	ldw	r2,-4(fp)
 1018d14:	e0bffb15 	stw	r2,-20(fp)
 1018d18:	e0bffa17 	ldw	r2,-24(fp)
 1018d1c:	e0bff015 	stw	r2,-64(fp)
 1018d20:	e0bff017 	ldw	r2,-64(fp)
 1018d24:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 1018d28:	e0bffb17 	ldw	r2,-20(fp)
}
 1018d2c:	e037883a 	mov	sp,fp
 1018d30:	df000017 	ldw	fp,0(sp)
 1018d34:	dec00104 	addi	sp,sp,4
 1018d38:	f800283a 	ret

01018d3c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 1018d3c:	f811883a 	mov	r8,ra
 1018d40:	100c3d80 	call	100c3d8 <_mcount>
 1018d44:	403f883a 	mov	ra,r8
 1018d48:	defffa04 	addi	sp,sp,-24
 1018d4c:	dfc00515 	stw	ra,20(sp)
 1018d50:	df000415 	stw	fp,16(sp)
 1018d54:	dc000315 	stw	r16,12(sp)
 1018d58:	df000304 	addi	fp,sp,12
 1018d5c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 1018d60:	e0bffe17 	ldw	r2,-8(fp)
 1018d64:	10800217 	ldw	r2,8(r2)
 1018d68:	10d00034 	orhi	r3,r2,16384
 1018d6c:	e0bffe17 	ldw	r2,-8(fp)
 1018d70:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 1018d74:	e03ffd15 	stw	zero,-12(fp)
 1018d78:	00002306 	br	1018e08 <alt_file_locked+0xcc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 1018d7c:	e13ffd17 	ldw	r4,-12(fp)
 1018d80:	040040b4 	movhi	r16,258
 1018d84:	841b4804 	addi	r16,r16,27936
 1018d88:	01400304 	movi	r5,12
 1018d8c:	10026680 	call	1002668 <__mulsi3>
 1018d90:	1405883a 	add	r2,r2,r16
 1018d94:	10c00017 	ldw	r3,0(r2)
 1018d98:	e0bffe17 	ldw	r2,-8(fp)
 1018d9c:	10800017 	ldw	r2,0(r2)
 1018da0:	1880161e 	bne	r3,r2,1018dfc <alt_file_locked+0xc0>
 1018da4:	e13ffd17 	ldw	r4,-12(fp)
 1018da8:	040040b4 	movhi	r16,258
 1018dac:	841b4804 	addi	r16,r16,27936
 1018db0:	01400304 	movi	r5,12
 1018db4:	10026680 	call	1002668 <__mulsi3>
 1018db8:	1405883a 	add	r2,r2,r16
 1018dbc:	10800204 	addi	r2,r2,8
 1018dc0:	10800017 	ldw	r2,0(r2)
 1018dc4:	1004403a 	cmpge	r2,r2,zero
 1018dc8:	10000c1e 	bne	r2,zero,1018dfc <alt_file_locked+0xc0>
 1018dcc:	e13ffd17 	ldw	r4,-12(fp)
 1018dd0:	01400304 	movi	r5,12
 1018dd4:	10026680 	call	1002668 <__mulsi3>
 1018dd8:	1007883a 	mov	r3,r2
 1018ddc:	008040b4 	movhi	r2,258
 1018de0:	109b4804 	addi	r2,r2,27936
 1018de4:	1887883a 	add	r3,r3,r2
 1018de8:	e0bffe17 	ldw	r2,-8(fp)
 1018dec:	18800326 	beq	r3,r2,1018dfc <alt_file_locked+0xc0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 1018df0:	00bffcc4 	movi	r2,-13
 1018df4:	e0bfff15 	stw	r2,-4(fp)
 1018df8:	00000a06 	br	1018e24 <alt_file_locked+0xe8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 1018dfc:	e0bffd17 	ldw	r2,-12(fp)
 1018e00:	10800044 	addi	r2,r2,1
 1018e04:	e0bffd15 	stw	r2,-12(fp)
 1018e08:	008040f4 	movhi	r2,259
 1018e0c:	10a01104 	addi	r2,r2,-32700
 1018e10:	10800017 	ldw	r2,0(r2)
 1018e14:	1007883a 	mov	r3,r2
 1018e18:	e0bffd17 	ldw	r2,-12(fp)
 1018e1c:	18bfd72e 	bgeu	r3,r2,1018d7c <alt_file_locked+0x40>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 1018e20:	e03fff15 	stw	zero,-4(fp)
 1018e24:	e0bfff17 	ldw	r2,-4(fp)
}
 1018e28:	e037883a 	mov	sp,fp
 1018e2c:	dfc00217 	ldw	ra,8(sp)
 1018e30:	df000117 	ldw	fp,4(sp)
 1018e34:	dc000017 	ldw	r16,0(sp)
 1018e38:	dec00304 	addi	sp,sp,12
 1018e3c:	f800283a 	ret

01018e40 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 1018e40:	f811883a 	mov	r8,ra
 1018e44:	100c3d80 	call	100c3d8 <_mcount>
 1018e48:	403f883a 	mov	ra,r8
 1018e4c:	defff404 	addi	sp,sp,-48
 1018e50:	dfc00b15 	stw	ra,44(sp)
 1018e54:	df000a15 	stw	fp,40(sp)
 1018e58:	df000a04 	addi	fp,sp,40
 1018e5c:	e13ffb15 	stw	r4,-20(fp)
 1018e60:	e17ffc15 	stw	r5,-16(fp)
 1018e64:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 1018e68:	00bfffc4 	movi	r2,-1
 1018e6c:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 1018e70:	00bffb44 	movi	r2,-19
 1018e74:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 1018e78:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 1018e7c:	e13ffb17 	ldw	r4,-20(fp)
 1018e80:	014040f4 	movhi	r5,259
 1018e84:	29600f04 	addi	r5,r5,-32708
 1018e88:	10186580 	call	1018658 <alt_find_dev>
 1018e8c:	e0bffa15 	stw	r2,-24(fp)
 1018e90:	e0bffa17 	ldw	r2,-24(fp)
 1018e94:	1004c03a 	cmpne	r2,r2,zero
 1018e98:	1000051e 	bne	r2,zero,1018eb0 <open+0x70>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 1018e9c:	e13ffb17 	ldw	r4,-20(fp)
 1018ea0:	10196240 	call	1019624 <alt_find_file>
 1018ea4:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 1018ea8:	00800044 	movi	r2,1
 1018eac:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 1018eb0:	e0bffa17 	ldw	r2,-24(fp)
 1018eb4:	1005003a 	cmpeq	r2,r2,zero
 1018eb8:	1000311e 	bne	r2,zero,1018f80 <open+0x140>
  {
    if ((index = alt_get_fd (dev)) < 0)
 1018ebc:	e13ffa17 	ldw	r4,-24(fp)
 1018ec0:	10197500 	call	1019750 <alt_get_fd>
 1018ec4:	e0bff815 	stw	r2,-32(fp)
 1018ec8:	e0bff817 	ldw	r2,-32(fp)
 1018ecc:	1004403a 	cmpge	r2,r2,zero
 1018ed0:	1000031e 	bne	r2,zero,1018ee0 <open+0xa0>
    {
      status = index;
 1018ed4:	e0bff817 	ldw	r2,-32(fp)
 1018ed8:	e0bff715 	stw	r2,-36(fp)
 1018edc:	00002a06 	br	1018f88 <open+0x148>
    }
    else
    {
      fd = &alt_fd_list[index];
 1018ee0:	e13ff817 	ldw	r4,-32(fp)
 1018ee4:	01400304 	movi	r5,12
 1018ee8:	10026680 	call	1002668 <__mulsi3>
 1018eec:	1007883a 	mov	r3,r2
 1018ef0:	008040b4 	movhi	r2,258
 1018ef4:	109b4804 	addi	r2,r2,27936
 1018ef8:	1885883a 	add	r2,r3,r2
 1018efc:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 1018f00:	e0fffc17 	ldw	r3,-16(fp)
 1018f04:	00900034 	movhi	r2,16384
 1018f08:	10bfffc4 	addi	r2,r2,-1
 1018f0c:	1886703a 	and	r3,r3,r2
 1018f10:	e0bff917 	ldw	r2,-28(fp)
 1018f14:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 1018f18:	e0bff617 	ldw	r2,-40(fp)
 1018f1c:	1004c03a 	cmpne	r2,r2,zero
 1018f20:	1000061e 	bne	r2,zero,1018f3c <open+0xfc>
 1018f24:	e13ff917 	ldw	r4,-28(fp)
 1018f28:	1018d3c0 	call	1018d3c <alt_file_locked>
 1018f2c:	e0bff715 	stw	r2,-36(fp)
 1018f30:	e0bff717 	ldw	r2,-36(fp)
 1018f34:	1004803a 	cmplt	r2,r2,zero
 1018f38:	1000131e 	bne	r2,zero,1018f88 <open+0x148>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 1018f3c:	e0bffa17 	ldw	r2,-24(fp)
 1018f40:	10800317 	ldw	r2,12(r2)
 1018f44:	1005003a 	cmpeq	r2,r2,zero
 1018f48:	1000091e 	bne	r2,zero,1018f70 <open+0x130>
 1018f4c:	e0bffa17 	ldw	r2,-24(fp)
 1018f50:	10800317 	ldw	r2,12(r2)
 1018f54:	e13ff917 	ldw	r4,-28(fp)
 1018f58:	e17ffb17 	ldw	r5,-20(fp)
 1018f5c:	e1bffc17 	ldw	r6,-16(fp)
 1018f60:	e1fffd17 	ldw	r7,-12(fp)
 1018f64:	103ee83a 	callr	r2
 1018f68:	e0bfff15 	stw	r2,-4(fp)
 1018f6c:	00000106 	br	1018f74 <open+0x134>
 1018f70:	e03fff15 	stw	zero,-4(fp)
 1018f74:	e0bfff17 	ldw	r2,-4(fp)
 1018f78:	e0bff715 	stw	r2,-36(fp)
 1018f7c:	00000206 	br	1018f88 <open+0x148>
      }
    }
  }
  else
  {
    status = -ENODEV;
 1018f80:	00bffb44 	movi	r2,-19
 1018f84:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 1018f88:	e0bff717 	ldw	r2,-36(fp)
 1018f8c:	1004403a 	cmpge	r2,r2,zero
 1018f90:	1000091e 	bne	r2,zero,1018fb8 <open+0x178>
  {
    alt_release_fd (index);  
 1018f94:	e13ff817 	ldw	r4,-32(fp)
 1018f98:	100c6100 	call	100c610 <alt_release_fd>
    ALT_ERRNO = -status;
 1018f9c:	1018fd80 	call	1018fd8 <alt_get_errno>
 1018fa0:	e0fff717 	ldw	r3,-36(fp)
 1018fa4:	00c7c83a 	sub	r3,zero,r3
 1018fa8:	10c00015 	stw	r3,0(r2)
    return -1;
 1018fac:	00bfffc4 	movi	r2,-1
 1018fb0:	e0bffe15 	stw	r2,-8(fp)
 1018fb4:	00000206 	br	1018fc0 <open+0x180>
  }
  
  /* return the reference upon success */

  return index;
 1018fb8:	e0bff817 	ldw	r2,-32(fp)
 1018fbc:	e0bffe15 	stw	r2,-8(fp)
 1018fc0:	e0bffe17 	ldw	r2,-8(fp)
}
 1018fc4:	e037883a 	mov	sp,fp
 1018fc8:	dfc00117 	ldw	ra,4(sp)
 1018fcc:	df000017 	ldw	fp,0(sp)
 1018fd0:	dec00204 	addi	sp,sp,8
 1018fd4:	f800283a 	ret

01018fd8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1018fd8:	f811883a 	mov	r8,ra
 1018fdc:	100c3d80 	call	100c3d8 <_mcount>
 1018fe0:	403f883a 	mov	ra,r8
 1018fe4:	defffd04 	addi	sp,sp,-12
 1018fe8:	dfc00215 	stw	ra,8(sp)
 1018fec:	df000115 	stw	fp,4(sp)
 1018ff0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1018ff4:	008040f4 	movhi	r2,259
 1018ff8:	10a01204 	addi	r2,r2,-32696
 1018ffc:	10800017 	ldw	r2,0(r2)
 1019000:	1005003a 	cmpeq	r2,r2,zero
 1019004:	1000061e 	bne	r2,zero,1019020 <alt_get_errno+0x48>
 1019008:	008040f4 	movhi	r2,259
 101900c:	10a01204 	addi	r2,r2,-32696
 1019010:	10800017 	ldw	r2,0(r2)
 1019014:	103ee83a 	callr	r2
 1019018:	e0bfff15 	stw	r2,-4(fp)
 101901c:	00000306 	br	101902c <alt_get_errno+0x54>
 1019020:	008040f4 	movhi	r2,259
 1019024:	10975a04 	addi	r2,r2,23912
 1019028:	e0bfff15 	stw	r2,-4(fp)
 101902c:	e0bfff17 	ldw	r2,-4(fp)
}
 1019030:	e037883a 	mov	sp,fp
 1019034:	dfc00117 	ldw	ra,4(sp)
 1019038:	df000017 	ldw	fp,0(sp)
 101903c:	dec00204 	addi	sp,sp,8
 1019040:	f800283a 	ret

01019044 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 1019044:	f811883a 	mov	r8,ra
 1019048:	100c3d80 	call	100c3d8 <_mcount>
 101904c:	403f883a 	mov	ra,r8
 1019050:	deffff04 	addi	sp,sp,-4
 1019054:	df000015 	stw	fp,0(sp)
 1019058:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 101905c:	000170fa 	wrctl	ienable,zero
}
 1019060:	e037883a 	mov	sp,fp
 1019064:	df000017 	ldw	fp,0(sp)
 1019068:	dec00104 	addi	sp,sp,4
 101906c:	f800283a 	ret

01019070 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
 1019070:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
 1019074:	d0e00117 	ldw	r3,-32764(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
 1019078:	d1177217 	ldw	r4,24008(gp)

      stw ra,  0(sp)
 101907c:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
 1019080:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
 1019084:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
 1019088:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
 101908c:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
 1019090:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
 1019094:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
 1019098:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
 101909c:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
 10190a0:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
 10190a4:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
 10190a8:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 10190ac:	10194b40 	call	10194b4 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
 10190b0:	d1176d17 	ldw	r4,23988(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
 10190b4:	d1576487 	ldb	r5,23954(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
 10190b8:	d1177215 	stw	r4,24008(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
 10190bc:	d15764c5 	stb	r5,23955(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
 10190c0:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
 10190c4:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
 10190c8:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
 10190cc:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
 10190d0:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
 10190d4:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
 10190d8:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
 10190dc:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
 10190e0:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
 10190e4:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
 10190e8:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
 10190ec:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
 10190f0:	d0e00115 	stw	r3,-32764(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
 10190f4:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
 10190f8:	f800283a 	ret

010190fc <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
 10190fc:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
 1019100:	047fff84 	movi	r17,-2
      and   r18, r18, r17
 1019104:	9464703a 	and	r18,r18,r17
      wrctl status, r18
 1019108:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 101910c:	10194b40 	call	10194b4 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
 1019110:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
 1019114:	d4976205 	stb	r18,23944(gp)

      /*
       * start execution of the new task.
       */

      br 9b
 1019118:	003fe506 	br	10190b0 <OSCtxSw+0x40>

0101911c <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
 101911c:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
 1019120:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
 1019124:	10800054 	ori	r2,r2,1
      wrctl status, r2
 1019128:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
 101912c:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
 1019130:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
 1019134:	dec00204 	addi	sp,sp,8

      callr r2
 1019138:	103ee83a 	callr	r2

      nop
 101913c:	0001883a 	nop

01019140 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
 1019140:	f811883a 	mov	r8,ra
 1019144:	100c3d80 	call	100c3d8 <_mcount>
 1019148:	403f883a 	mov	ra,r8
 101914c:	defff704 	addi	sp,sp,-36
 1019150:	dfc00815 	stw	ra,32(sp)
 1019154:	df000715 	stw	fp,28(sp)
 1019158:	df000704 	addi	fp,sp,28
 101915c:	e13ffc15 	stw	r4,-16(fp)
 1019160:	e17ffd15 	stw	r5,-12(fp)
 1019164:	e1bffe15 	stw	r6,-8(fp)
 1019168:	e1ffff0d 	sth	r7,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
 101916c:	e0bffe17 	ldw	r2,-8(fp)
 1019170:	1007883a 	mov	r3,r2
 1019174:	00bfff04 	movi	r2,-4
 1019178:	1884703a 	and	r2,r3,r2
 101917c:	10bf0004 	addi	r2,r2,-1024
 1019180:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
 1019184:	e0bff917 	ldw	r2,-28(fp)
 1019188:	10000015 	stw	zero,0(r2)
 101918c:	e0bff917 	ldw	r2,-28(fp)
 1019190:	10c0bb04 	addi	r3,r2,748
 1019194:	e0bff917 	ldw	r2,-28(fp)
 1019198:	10c00115 	stw	r3,4(r2)
 101919c:	e0bff917 	ldw	r2,-28(fp)
 10191a0:	1080bb04 	addi	r2,r2,748
 10191a4:	10c01704 	addi	r3,r2,92
 10191a8:	e0bff917 	ldw	r2,-28(fp)
 10191ac:	10c00215 	stw	r3,8(r2)
 10191b0:	e0bff917 	ldw	r2,-28(fp)
 10191b4:	1080bb04 	addi	r2,r2,748
 10191b8:	10c02e04 	addi	r3,r2,184
 10191bc:	e0bff917 	ldw	r2,-28(fp)
 10191c0:	10c00315 	stw	r3,12(r2)
 10191c4:	e0bff917 	ldw	r2,-28(fp)
 10191c8:	10000415 	stw	zero,16(r2)
 10191cc:	e0bff917 	ldw	r2,-28(fp)
 10191d0:	10800504 	addi	r2,r2,20
 10191d4:	1009883a 	mov	r4,r2
 10191d8:	01800644 	movi	r6,25
 10191dc:	000b883a 	mov	r5,zero
 10191e0:	10084900 	call	1008490 <memset>
 10191e4:	e0bff917 	ldw	r2,-28(fp)
 10191e8:	10000c15 	stw	zero,48(r2)
 10191ec:	e0fff917 	ldw	r3,-28(fp)
 10191f0:	008040b4 	movhi	r2,258
 10191f4:	10a92d04 	addi	r2,r2,-23372
 10191f8:	18800d15 	stw	r2,52(r3)
 10191fc:	e0bff917 	ldw	r2,-28(fp)
 1019200:	10000e15 	stw	zero,56(r2)
 1019204:	e0bff917 	ldw	r2,-28(fp)
 1019208:	10000f15 	stw	zero,60(r2)
 101920c:	e0bff917 	ldw	r2,-28(fp)
 1019210:	10001015 	stw	zero,64(r2)
 1019214:	e0bff917 	ldw	r2,-28(fp)
 1019218:	10001115 	stw	zero,68(r2)
 101921c:	e0bff917 	ldw	r2,-28(fp)
 1019220:	10001215 	stw	zero,72(r2)
 1019224:	e0bff917 	ldw	r2,-28(fp)
 1019228:	10001315 	stw	zero,76(r2)
 101922c:	e0bff917 	ldw	r2,-28(fp)
 1019230:	10001415 	stw	zero,80(r2)
 1019234:	e0bff917 	ldw	r2,-28(fp)
 1019238:	10001515 	stw	zero,84(r2)
 101923c:	e0bff917 	ldw	r2,-28(fp)
 1019240:	10001615 	stw	zero,88(r2)
 1019244:	e0bff917 	ldw	r2,-28(fp)
 1019248:	10001715 	stw	zero,92(r2)
 101924c:	e0bff917 	ldw	r2,-28(fp)
 1019250:	10001805 	stb	zero,96(r2)
 1019254:	e0bff917 	ldw	r2,-28(fp)
 1019258:	10801f04 	addi	r2,r2,124
 101925c:	10000015 	stw	zero,0(r2)
 1019260:	10000115 	stw	zero,4(r2)
 1019264:	10000215 	stw	zero,8(r2)
 1019268:	10000315 	stw	zero,12(r2)
 101926c:	10000415 	stw	zero,16(r2)
 1019270:	10000515 	stw	zero,20(r2)
 1019274:	10000615 	stw	zero,24(r2)
 1019278:	10000715 	stw	zero,28(r2)
 101927c:	10000815 	stw	zero,32(r2)
 1019280:	e0bff917 	ldw	r2,-28(fp)
 1019284:	10002815 	stw	zero,160(r2)
 1019288:	e0fff917 	ldw	r3,-28(fp)
 101928c:	00800044 	movi	r2,1
 1019290:	18802915 	stw	r2,164(r3)
 1019294:	18002a15 	stw	zero,168(r3)
 1019298:	e0fff917 	ldw	r3,-28(fp)
 101929c:	008cc384 	movi	r2,13070
 10192a0:	18802b0d 	sth	r2,172(r3)
 10192a4:	e0fff917 	ldw	r3,-28(fp)
 10192a8:	00aaf344 	movi	r2,-21555
 10192ac:	18802b8d 	sth	r2,174(r3)
 10192b0:	e0fff917 	ldw	r3,-28(fp)
 10192b4:	00848d04 	movi	r2,4660
 10192b8:	18802c0d 	sth	r2,176(r3)
 10192bc:	e0fff917 	ldw	r3,-28(fp)
 10192c0:	00b99b44 	movi	r2,-6547
 10192c4:	18802c8d 	sth	r2,178(r3)
 10192c8:	e0fff917 	ldw	r3,-28(fp)
 10192cc:	00b7bb04 	movi	r2,-8468
 10192d0:	18802d0d 	sth	r2,180(r3)
 10192d4:	e0fff917 	ldw	r3,-28(fp)
 10192d8:	00800144 	movi	r2,5
 10192dc:	18802d8d 	sth	r2,182(r3)
 10192e0:	e0fff917 	ldw	r3,-28(fp)
 10192e4:	008002c4 	movi	r2,11
 10192e8:	18802e0d 	sth	r2,184(r3)
 10192ec:	e0bff917 	ldw	r2,-28(fp)
 10192f0:	10002f15 	stw	zero,188(r2)
 10192f4:	e0bff917 	ldw	r2,-28(fp)
 10192f8:	10003015 	stw	zero,192(r2)
 10192fc:	e0bff917 	ldw	r2,-28(fp)
 1019300:	10003115 	stw	zero,196(r2)
 1019304:	e0bff917 	ldw	r2,-28(fp)
 1019308:	10003215 	stw	zero,200(r2)
 101930c:	e0bff917 	ldw	r2,-28(fp)
 1019310:	10003315 	stw	zero,204(r2)
 1019314:	e0bff917 	ldw	r2,-28(fp)
 1019318:	10003415 	stw	zero,208(r2)
 101931c:	e0bff917 	ldw	r2,-28(fp)
 1019320:	10003e15 	stw	zero,248(r2)
 1019324:	e0bff917 	ldw	r2,-28(fp)
 1019328:	10003f15 	stw	zero,252(r2)
 101932c:	e0bff917 	ldw	r2,-28(fp)
 1019330:	10004015 	stw	zero,256(r2)
 1019334:	e0bff917 	ldw	r2,-28(fp)
 1019338:	10004115 	stw	zero,260(r2)
 101933c:	e0bff917 	ldw	r2,-28(fp)
 1019340:	10004215 	stw	zero,264(r2)
 1019344:	e0bff917 	ldw	r2,-28(fp)
 1019348:	10004315 	stw	zero,268(r2)
 101934c:	e0bff917 	ldw	r2,-28(fp)
 1019350:	10004415 	stw	zero,272(r2)
 1019354:	e0bff917 	ldw	r2,-28(fp)
 1019358:	10004515 	stw	zero,276(r2)
 101935c:	e0bff917 	ldw	r2,-28(fp)
 1019360:	10004615 	stw	zero,280(r2)
 1019364:	e0bff917 	ldw	r2,-28(fp)
 1019368:	10004715 	stw	zero,284(r2)
 101936c:	e0bff917 	ldw	r2,-28(fp)
 1019370:	10003505 	stb	zero,212(r2)
 1019374:	e0bff917 	ldw	r2,-28(fp)
 1019378:	10003705 	stb	zero,220(r2)
 101937c:	e0bff917 	ldw	r2,-28(fp)
 1019380:	10003d15 	stw	zero,244(r2)
 1019384:	e0bff917 	ldw	r2,-28(fp)
 1019388:	10005215 	stw	zero,328(r2)
 101938c:	e0bff917 	ldw	r2,-28(fp)
 1019390:	10005315 	stw	zero,332(r2)
 1019394:	e0bff917 	ldw	r2,-28(fp)
 1019398:	10005415 	stw	zero,336(r2)
 101939c:	e0bff917 	ldw	r2,-28(fp)
 10193a0:	10005515 	stw	zero,340(r2)
 10193a4:	e0bff917 	ldw	r2,-28(fp)
 10193a8:	1000b515 	stw	zero,724(r2)
 10193ac:	e0bff917 	ldw	r2,-28(fp)
 10193b0:	10007515 	stw	zero,468(r2)
 10193b4:	e0bff917 	ldw	r2,-28(fp)
 10193b8:	1000b715 	stw	zero,732(r2)
 10193bc:	e0bff917 	ldw	r2,-28(fp)
 10193c0:	1000b815 	stw	zero,736(r2)
 10193c4:	e0bff917 	ldw	r2,-28(fp)
 10193c8:	1000b915 	stw	zero,740(r2)
 10193cc:	e0bff917 	ldw	r2,-28(fp)
 10193d0:	1000ba15 	stw	zero,744(r2)
 10193d4:	e0bff917 	ldw	r2,-28(fp)
 10193d8:	1080bb04 	addi	r2,r2,748
 10193dc:	1009883a 	mov	r4,r2
 10193e0:	01804504 	movi	r6,276
 10193e4:	000b883a 	mov	r5,zero
 10193e8:	10084900 	call	1008490 <memset>
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
 10193ec:	e0bff917 	ldw	r2,-28(fp)
 10193f0:	e0bffb15 	stw	r2,-20(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
 10193f4:	e0bffb17 	ldw	r2,-20(fp)
 10193f8:	10bff304 	addi	r2,r2,-52
 10193fc:	e0bffa15 	stw	r2,-24(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
 1019400:	e0bffa17 	ldw	r2,-24(fp)
 1019404:	10c00c04 	addi	r3,r2,48
 1019408:	e0bffc17 	ldw	r2,-16(fp)
 101940c:	18800015 	stw	r2,0(r3)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
 1019410:	e0bffa17 	ldw	r2,-24(fp)
 1019414:	10c00b04 	addi	r3,r2,44
 1019418:	e0bffd17 	ldw	r2,-12(fp)
 101941c:	18800015 	stw	r2,0(r3)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
 1019420:	e0bffa17 	ldw	r2,-24(fp)
 1019424:	10c00a04 	addi	r3,r2,40
 1019428:	e0bff917 	ldw	r2,-28(fp)
 101942c:	18800015 	stw	r2,0(r3)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
 1019430:	008040b4 	movhi	r2,258
 1019434:	10a44704 	addi	r2,r2,-28388
 1019438:	10c00104 	addi	r3,r2,4
 101943c:	e0bffa17 	ldw	r2,-24(fp)
 1019440:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
 1019444:	e0bffa17 	ldw	r2,-24(fp)
}
 1019448:	e037883a 	mov	sp,fp
 101944c:	dfc00117 	ldw	ra,4(sp)
 1019450:	df000017 	ldw	fp,0(sp)
 1019454:	dec00204 	addi	sp,sp,8
 1019458:	f800283a 	ret

0101945c <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
 101945c:	f811883a 	mov	r8,ra
 1019460:	100c3d80 	call	100c3d8 <_mcount>
 1019464:	403f883a 	mov	ra,r8
 1019468:	defffe04 	addi	sp,sp,-8
 101946c:	df000115 	stw	fp,4(sp)
 1019470:	df000104 	addi	fp,sp,4
 1019474:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
 1019478:	e037883a 	mov	sp,fp
 101947c:	df000017 	ldw	fp,0(sp)
 1019480:	dec00104 	addi	sp,sp,4
 1019484:	f800283a 	ret

01019488 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
 1019488:	f811883a 	mov	r8,ra
 101948c:	100c3d80 	call	100c3d8 <_mcount>
 1019490:	403f883a 	mov	ra,r8
 1019494:	defffe04 	addi	sp,sp,-8
 1019498:	df000115 	stw	fp,4(sp)
 101949c:	df000104 	addi	fp,sp,4
 10194a0:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
 10194a4:	e037883a 	mov	sp,fp
 10194a8:	df000017 	ldw	fp,0(sp)
 10194ac:	dec00104 	addi	sp,sp,4
 10194b0:	f800283a 	ret

010194b4 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
 10194b4:	f811883a 	mov	r8,ra
 10194b8:	100c3d80 	call	100c3d8 <_mcount>
 10194bc:	403f883a 	mov	ra,r8
 10194c0:	deffff04 	addi	sp,sp,-4
 10194c4:	df000015 	stw	fp,0(sp)
 10194c8:	d839883a 	mov	fp,sp
}
 10194cc:	e037883a 	mov	sp,fp
 10194d0:	df000017 	ldw	fp,0(sp)
 10194d4:	dec00104 	addi	sp,sp,4
 10194d8:	f800283a 	ret

010194dc <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
 10194dc:	f811883a 	mov	r8,ra
 10194e0:	100c3d80 	call	100c3d8 <_mcount>
 10194e4:	403f883a 	mov	ra,r8
 10194e8:	deffff04 	addi	sp,sp,-4
 10194ec:	df000015 	stw	fp,0(sp)
 10194f0:	d839883a 	mov	fp,sp
}
 10194f4:	e037883a 	mov	sp,fp
 10194f8:	df000017 	ldw	fp,0(sp)
 10194fc:	dec00104 	addi	sp,sp,4
 1019500:	f800283a 	ret

01019504 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
 1019504:	f811883a 	mov	r8,ra
 1019508:	100c3d80 	call	100c3d8 <_mcount>
 101950c:	403f883a 	mov	ra,r8
 1019510:	defffe04 	addi	sp,sp,-8
 1019514:	dfc00115 	stw	ra,4(sp)
 1019518:	df000015 	stw	fp,0(sp)
 101951c:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr++;
 1019520:	d0977f0b 	ldhu	r2,24060(gp)
 1019524:	10800044 	addi	r2,r2,1
 1019528:	d0977f0d 	sth	r2,24060(gp)
    if (OSTmrCtr >= (OS_TICKS_PER_SEC / OS_TMR_CFG_TICKS_PER_SEC)) {
 101952c:	d0977f0b 	ldhu	r2,24060(gp)
 1019530:	113fffcc 	andi	r4,r2,65535
 1019534:	100b8340 	call	100b834 <__floatsidf>
 1019538:	100b883a 	mov	r5,r2
 101953c:	180d883a 	mov	r6,r3
 1019540:	2809883a 	mov	r4,r5
 1019544:	300b883a 	mov	r5,r6
 1019548:	000d883a 	mov	r6,zero
 101954c:	01d01674 	movhi	r7,16473
 1019550:	100b70c0 	call	100b70c <__gedf2>
 1019554:	1004403a 	cmpge	r2,r2,zero
 1019558:	1000011e 	bne	r2,zero,1019560 <OSTimeTickHook+0x5c>
 101955c:	00000206 	br	1019568 <OSTimeTickHook+0x64>
        OSTmrCtr = 0;
 1019560:	d0177f0d 	sth	zero,24060(gp)
        OSTmrSignal();
 1019564:	10161e40 	call	10161e4 <OSTmrSignal>
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
 1019568:	e037883a 	mov	sp,fp
 101956c:	dfc00117 	ldw	ra,4(sp)
 1019570:	df000017 	ldw	fp,0(sp)
 1019574:	dec00204 	addi	sp,sp,8
 1019578:	f800283a 	ret

0101957c <OSInitHookBegin>:

void OSInitHookBegin(void)
{
 101957c:	f811883a 	mov	r8,ra
 1019580:	100c3d80 	call	100c3d8 <_mcount>
 1019584:	403f883a 	mov	ra,r8
 1019588:	deffff04 	addi	sp,sp,-4
 101958c:	df000015 	stw	fp,0(sp)
 1019590:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
 1019594:	d0177f0d 	sth	zero,24060(gp)
#endif
}
 1019598:	e037883a 	mov	sp,fp
 101959c:	df000017 	ldw	fp,0(sp)
 10195a0:	dec00104 	addi	sp,sp,4
 10195a4:	f800283a 	ret

010195a8 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
 10195a8:	f811883a 	mov	r8,ra
 10195ac:	100c3d80 	call	100c3d8 <_mcount>
 10195b0:	403f883a 	mov	ra,r8
 10195b4:	deffff04 	addi	sp,sp,-4
 10195b8:	df000015 	stw	fp,0(sp)
 10195bc:	d839883a 	mov	fp,sp
}
 10195c0:	e037883a 	mov	sp,fp
 10195c4:	df000017 	ldw	fp,0(sp)
 10195c8:	dec00104 	addi	sp,sp,4
 10195cc:	f800283a 	ret

010195d0 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
 10195d0:	f811883a 	mov	r8,ra
 10195d4:	100c3d80 	call	100c3d8 <_mcount>
 10195d8:	403f883a 	mov	ra,r8
 10195dc:	deffff04 	addi	sp,sp,-4
 10195e0:	df000015 	stw	fp,0(sp)
 10195e4:	d839883a 	mov	fp,sp
}
 10195e8:	e037883a 	mov	sp,fp
 10195ec:	df000017 	ldw	fp,0(sp)
 10195f0:	dec00104 	addi	sp,sp,4
 10195f4:	f800283a 	ret

010195f8 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
 10195f8:	f811883a 	mov	r8,ra
 10195fc:	100c3d80 	call	100c3d8 <_mcount>
 1019600:	403f883a 	mov	ra,r8
 1019604:	defffe04 	addi	sp,sp,-8
 1019608:	df000115 	stw	fp,4(sp)
 101960c:	df000104 	addi	fp,sp,4
 1019610:	e13fff15 	stw	r4,-4(fp)
}
 1019614:	e037883a 	mov	sp,fp
 1019618:	df000017 	ldw	fp,0(sp)
 101961c:	dec00104 	addi	sp,sp,4
 1019620:	f800283a 	ret

01019624 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 1019624:	f811883a 	mov	r8,ra
 1019628:	100c3d80 	call	100c3d8 <_mcount>
 101962c:	403f883a 	mov	ra,r8
 1019630:	defffa04 	addi	sp,sp,-24
 1019634:	dfc00515 	stw	ra,20(sp)
 1019638:	df000415 	stw	fp,16(sp)
 101963c:	df000404 	addi	fp,sp,16
 1019640:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 1019644:	008040f4 	movhi	r2,259
 1019648:	10a00d04 	addi	r2,r2,-32716
 101964c:	10800017 	ldw	r2,0(r2)
 1019650:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1019654:	00003306 	br	1019724 <alt_find_file+0x100>
  {
    len = strlen(next->name);
 1019658:	e0bffd17 	ldw	r2,-12(fp)
 101965c:	11000217 	ldw	r4,8(r2)
 1019660:	1002e640 	call	1002e64 <strlen>
 1019664:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 1019668:	e0bffd17 	ldw	r2,-12(fp)
 101966c:	10c00217 	ldw	r3,8(r2)
 1019670:	e0bffc17 	ldw	r2,-16(fp)
 1019674:	1885883a 	add	r2,r3,r2
 1019678:	10bfffc4 	addi	r2,r2,-1
 101967c:	10800003 	ldbu	r2,0(r2)
 1019680:	10803fcc 	andi	r2,r2,255
 1019684:	1080201c 	xori	r2,r2,128
 1019688:	10bfe004 	addi	r2,r2,-128
 101968c:	10800bd8 	cmpnei	r2,r2,47
 1019690:	1000031e 	bne	r2,zero,10196a0 <alt_find_file+0x7c>
    {
      len -= 1;
 1019694:	e0bffc17 	ldw	r2,-16(fp)
 1019698:	10bfffc4 	addi	r2,r2,-1
 101969c:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 10196a0:	e0bffc17 	ldw	r2,-16(fp)
 10196a4:	1007883a 	mov	r3,r2
 10196a8:	e0bffe17 	ldw	r2,-8(fp)
 10196ac:	1885883a 	add	r2,r3,r2
 10196b0:	10800003 	ldbu	r2,0(r2)
 10196b4:	10803fcc 	andi	r2,r2,255
 10196b8:	1080201c 	xori	r2,r2,128
 10196bc:	10bfe004 	addi	r2,r2,-128
 10196c0:	10800be0 	cmpeqi	r2,r2,47
 10196c4:	10000a1e 	bne	r2,zero,10196f0 <alt_find_file+0xcc>
 10196c8:	e0bffc17 	ldw	r2,-16(fp)
 10196cc:	1007883a 	mov	r3,r2
 10196d0:	e0bffe17 	ldw	r2,-8(fp)
 10196d4:	1885883a 	add	r2,r3,r2
 10196d8:	10800003 	ldbu	r2,0(r2)
 10196dc:	10803fcc 	andi	r2,r2,255
 10196e0:	1080201c 	xori	r2,r2,128
 10196e4:	10bfe004 	addi	r2,r2,-128
 10196e8:	1004c03a 	cmpne	r2,r2,zero
 10196ec:	10000a1e 	bne	r2,zero,1019718 <alt_find_file+0xf4>
 10196f0:	e0bffd17 	ldw	r2,-12(fp)
 10196f4:	11000217 	ldw	r4,8(r2)
 10196f8:	e1bffc17 	ldw	r6,-16(fp)
 10196fc:	e17ffe17 	ldw	r5,-8(fp)
 1019700:	10198c40 	call	10198c4 <memcmp>
 1019704:	1004c03a 	cmpne	r2,r2,zero
 1019708:	1000031e 	bne	r2,zero,1019718 <alt_find_file+0xf4>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 101970c:	e0bffd17 	ldw	r2,-12(fp)
 1019710:	e0bfff15 	stw	r2,-4(fp)
 1019714:	00000806 	br	1019738 <alt_find_file+0x114>
    }
    next = (alt_dev*) next->llist.next;
 1019718:	e0bffd17 	ldw	r2,-12(fp)
 101971c:	10800017 	ldw	r2,0(r2)
 1019720:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1019724:	00c040f4 	movhi	r3,259
 1019728:	18e00d04 	addi	r3,r3,-32716
 101972c:	e0bffd17 	ldw	r2,-12(fp)
 1019730:	10ffc91e 	bne	r2,r3,1019658 <alt_find_file+0x34>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 1019734:	e03fff15 	stw	zero,-4(fp)
 1019738:	e0bfff17 	ldw	r2,-4(fp)
}
 101973c:	e037883a 	mov	sp,fp
 1019740:	dfc00117 	ldw	ra,4(sp)
 1019744:	df000017 	ldw	fp,0(sp)
 1019748:	dec00204 	addi	sp,sp,8
 101974c:	f800283a 	ret

01019750 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 1019750:	f811883a 	mov	r8,ra
 1019754:	100c3d80 	call	100c3d8 <_mcount>
 1019758:	403f883a 	mov	ra,r8
 101975c:	defff704 	addi	sp,sp,-36
 1019760:	dfc00815 	stw	ra,32(sp)
 1019764:	df000715 	stw	fp,28(sp)
 1019768:	dc000615 	stw	r16,24(sp)
 101976c:	df000604 	addi	fp,sp,24
 1019770:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 1019774:	00bffa04 	movi	r2,-24
 1019778:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
 101977c:	008040f4 	movhi	r2,259
 1019780:	10975b04 	addi	r2,r2,23916
 1019784:	10800017 	ldw	r2,0(r2)
 1019788:	e0bffa15 	stw	r2,-24(fp)
 101978c:	e03ffb0d 	sth	zero,-20(fp)
 1019790:	e17ffb0b 	ldhu	r5,-20(fp)
 1019794:	e1bffe04 	addi	r6,fp,-8
 1019798:	e13ffa17 	ldw	r4,-24(fp)
 101979c:	1012d0c0 	call	1012d0c <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 10197a0:	e03ffd15 	stw	zero,-12(fp)
 10197a4:	00002006 	br	1019828 <alt_get_fd+0xd8>
  {
    if (!alt_fd_list[i].dev)
 10197a8:	e13ffd17 	ldw	r4,-12(fp)
 10197ac:	040040b4 	movhi	r16,258
 10197b0:	841b4804 	addi	r16,r16,27936
 10197b4:	01400304 	movi	r5,12
 10197b8:	10026680 	call	1002668 <__mulsi3>
 10197bc:	1405883a 	add	r2,r2,r16
 10197c0:	10800017 	ldw	r2,0(r2)
 10197c4:	1004c03a 	cmpne	r2,r2,zero
 10197c8:	1000141e 	bne	r2,zero,101981c <alt_get_fd+0xcc>
    {
      alt_fd_list[i].dev = dev;
 10197cc:	e13ffd17 	ldw	r4,-12(fp)
 10197d0:	040040b4 	movhi	r16,258
 10197d4:	841b4804 	addi	r16,r16,27936
 10197d8:	01400304 	movi	r5,12
 10197dc:	10026680 	call	1002668 <__mulsi3>
 10197e0:	1407883a 	add	r3,r2,r16
 10197e4:	e0bfff17 	ldw	r2,-4(fp)
 10197e8:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 10197ec:	008040f4 	movhi	r2,259
 10197f0:	10a01104 	addi	r2,r2,-32700
 10197f4:	10c00017 	ldw	r3,0(r2)
 10197f8:	e0bffd17 	ldw	r2,-12(fp)
 10197fc:	1880040e 	bge	r3,r2,1019810 <alt_get_fd+0xc0>
      {
        alt_max_fd = i;
 1019800:	00c040f4 	movhi	r3,259
 1019804:	18e01104 	addi	r3,r3,-32700
 1019808:	e0bffd17 	ldw	r2,-12(fp)
 101980c:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 1019810:	e0bffd17 	ldw	r2,-12(fp)
 1019814:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
 1019818:	00000606 	br	1019834 <alt_get_fd+0xe4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 101981c:	e0bffd17 	ldw	r2,-12(fp)
 1019820:	10800044 	addi	r2,r2,1
 1019824:	e0bffd15 	stw	r2,-12(fp)
 1019828:	e0bffd17 	ldw	r2,-12(fp)
 101982c:	10800810 	cmplti	r2,r2,32
 1019830:	103fdd1e 	bne	r2,zero,10197a8 <alt_get_fd+0x58>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
 1019834:	008040f4 	movhi	r2,259
 1019838:	10975b04 	addi	r2,r2,23916
 101983c:	11000017 	ldw	r4,0(r2)
 1019840:	101311c0 	call	101311c <OSSemPost>

  return rc;
 1019844:	e0bffc17 	ldw	r2,-16(fp)
}
 1019848:	e037883a 	mov	sp,fp
 101984c:	dfc00217 	ldw	ra,8(sp)
 1019850:	df000117 	ldw	fp,4(sp)
 1019854:	dc000017 	ldw	r16,0(sp)
 1019858:	dec00304 	addi	sp,sp,12
 101985c:	f800283a 	ret

01019860 <atexit>:
 1019860:	f811883a 	mov	r8,ra
 1019864:	100c3d80 	call	100c3d8 <_mcount>
 1019868:	403f883a 	mov	ra,r8
 101986c:	000d883a 	mov	r6,zero
 1019870:	200b883a 	mov	r5,r4
 1019874:	000f883a 	mov	r7,zero
 1019878:	0009883a 	mov	r4,zero
 101987c:	10199441 	jmpi	1019944 <__register_exitproc>

01019880 <exit>:
 1019880:	f811883a 	mov	r8,ra
 1019884:	100c3d80 	call	100c3d8 <_mcount>
 1019888:	403f883a 	mov	ra,r8
 101988c:	defffe04 	addi	sp,sp,-8
 1019890:	dfc00115 	stw	ra,4(sp)
 1019894:	dc000015 	stw	r16,0(sp)
 1019898:	000b883a 	mov	r5,zero
 101989c:	2021883a 	mov	r16,r4
 10198a0:	1019a940 	call	1019a94 <__call_exitprocs>
 10198a4:	008040f4 	movhi	r2,259
 10198a8:	10a00804 	addi	r2,r2,-32736
 10198ac:	11000017 	ldw	r4,0(r2)
 10198b0:	20800f17 	ldw	r2,60(r4)
 10198b4:	10000126 	beq	r2,zero,10198bc <exit+0x3c>
 10198b8:	103ee83a 	callr	r2
 10198bc:	8009883a 	mov	r4,r16
 10198c0:	1019d8c0 	call	1019d8c <_exit>

010198c4 <memcmp>:
 10198c4:	f811883a 	mov	r8,ra
 10198c8:	100c3d80 	call	100c3d8 <_mcount>
 10198cc:	403f883a 	mov	ra,r8
 10198d0:	00c000c4 	movi	r3,3
 10198d4:	1980032e 	bgeu	r3,r6,10198e4 <memcmp+0x20>
 10198d8:	2144b03a 	or	r2,r4,r5
 10198dc:	10c4703a 	and	r2,r2,r3
 10198e0:	10000f26 	beq	r2,zero,1019920 <memcmp+0x5c>
 10198e4:	31ffffc4 	addi	r7,r6,-1
 10198e8:	3000061e 	bne	r6,zero,1019904 <memcmp+0x40>
 10198ec:	00000a06 	br	1019918 <memcmp+0x54>
 10198f0:	39ffffc4 	addi	r7,r7,-1
 10198f4:	00bfffc4 	movi	r2,-1
 10198f8:	21000044 	addi	r4,r4,1
 10198fc:	29400044 	addi	r5,r5,1
 1019900:	38800526 	beq	r7,r2,1019918 <memcmp+0x54>
 1019904:	20c00003 	ldbu	r3,0(r4)
 1019908:	28800003 	ldbu	r2,0(r5)
 101990c:	18bff826 	beq	r3,r2,10198f0 <memcmp+0x2c>
 1019910:	1885c83a 	sub	r2,r3,r2
 1019914:	f800283a 	ret
 1019918:	0005883a 	mov	r2,zero
 101991c:	f800283a 	ret
 1019920:	180f883a 	mov	r7,r3
 1019924:	20c00017 	ldw	r3,0(r4)
 1019928:	28800017 	ldw	r2,0(r5)
 101992c:	18bfed1e 	bne	r3,r2,10198e4 <memcmp+0x20>
 1019930:	31bfff04 	addi	r6,r6,-4
 1019934:	21000104 	addi	r4,r4,4
 1019938:	29400104 	addi	r5,r5,4
 101993c:	39bff936 	bltu	r7,r6,1019924 <memcmp+0x60>
 1019940:	003fe806 	br	10198e4 <memcmp+0x20>

01019944 <__register_exitproc>:
 1019944:	f811883a 	mov	r8,ra
 1019948:	100c3d80 	call	100c3d8 <_mcount>
 101994c:	403f883a 	mov	ra,r8
 1019950:	defffa04 	addi	sp,sp,-24
 1019954:	dfc00515 	stw	ra,20(sp)
 1019958:	dd000415 	stw	r20,16(sp)
 101995c:	dcc00315 	stw	r19,12(sp)
 1019960:	dc800215 	stw	r18,8(sp)
 1019964:	dc400115 	stw	r17,4(sp)
 1019968:	dc000015 	stw	r16,0(sp)
 101996c:	008040f4 	movhi	r2,259
 1019970:	10a00804 	addi	r2,r2,-32736
 1019974:	14000017 	ldw	r16,0(r2)
 1019978:	2829883a 	mov	r20,r5
 101997c:	2023883a 	mov	r17,r4
 1019980:	81405217 	ldw	r5,328(r16)
 1019984:	3027883a 	mov	r19,r6
 1019988:	3825883a 	mov	r18,r7
 101998c:	28002526 	beq	r5,zero,1019a24 <__register_exitproc+0xe0>
 1019990:	29000117 	ldw	r4,4(r5)
 1019994:	008007c4 	movi	r2,31
 1019998:	11002716 	blt	r2,r4,1019a38 <__register_exitproc+0xf4>
 101999c:	8800101e 	bne	r17,zero,10199e0 <__register_exitproc+0x9c>
 10199a0:	2105883a 	add	r2,r4,r4
 10199a4:	1085883a 	add	r2,r2,r2
 10199a8:	20c00044 	addi	r3,r4,1
 10199ac:	1145883a 	add	r2,r2,r5
 10199b0:	0009883a 	mov	r4,zero
 10199b4:	15000215 	stw	r20,8(r2)
 10199b8:	28c00115 	stw	r3,4(r5)
 10199bc:	2005883a 	mov	r2,r4
 10199c0:	dfc00517 	ldw	ra,20(sp)
 10199c4:	dd000417 	ldw	r20,16(sp)
 10199c8:	dcc00317 	ldw	r19,12(sp)
 10199cc:	dc800217 	ldw	r18,8(sp)
 10199d0:	dc400117 	ldw	r17,4(sp)
 10199d4:	dc000017 	ldw	r16,0(sp)
 10199d8:	dec00604 	addi	sp,sp,24
 10199dc:	f800283a 	ret
 10199e0:	29802204 	addi	r6,r5,136
 10199e4:	00800044 	movi	r2,1
 10199e8:	110e983a 	sll	r7,r2,r4
 10199ec:	30c04017 	ldw	r3,256(r6)
 10199f0:	2105883a 	add	r2,r4,r4
 10199f4:	1085883a 	add	r2,r2,r2
 10199f8:	1185883a 	add	r2,r2,r6
 10199fc:	19c6b03a 	or	r3,r3,r7
 1019a00:	14802015 	stw	r18,128(r2)
 1019a04:	14c00015 	stw	r19,0(r2)
 1019a08:	00800084 	movi	r2,2
 1019a0c:	30c04015 	stw	r3,256(r6)
 1019a10:	88bfe31e 	bne	r17,r2,10199a0 <__register_exitproc+0x5c>
 1019a14:	30804117 	ldw	r2,260(r6)
 1019a18:	11c4b03a 	or	r2,r2,r7
 1019a1c:	30804115 	stw	r2,260(r6)
 1019a20:	003fdf06 	br	10199a0 <__register_exitproc+0x5c>
 1019a24:	00804174 	movhi	r2,261
 1019a28:	10a77904 	addi	r2,r2,-25116
 1019a2c:	100b883a 	mov	r5,r2
 1019a30:	80805215 	stw	r2,328(r16)
 1019a34:	003fd606 	br	1019990 <__register_exitproc+0x4c>
 1019a38:	00800034 	movhi	r2,0
 1019a3c:	10800004 	addi	r2,r2,0
 1019a40:	1000021e 	bne	r2,zero,1019a4c <__register_exitproc+0x108>
 1019a44:	013fffc4 	movi	r4,-1
 1019a48:	003fdc06 	br	10199bc <__register_exitproc+0x78>
 1019a4c:	01006404 	movi	r4,400
 1019a50:	103ee83a 	callr	r2
 1019a54:	1007883a 	mov	r3,r2
 1019a58:	103ffa26 	beq	r2,zero,1019a44 <__register_exitproc+0x100>
 1019a5c:	80805217 	ldw	r2,328(r16)
 1019a60:	180b883a 	mov	r5,r3
 1019a64:	18000115 	stw	zero,4(r3)
 1019a68:	18800015 	stw	r2,0(r3)
 1019a6c:	80c05215 	stw	r3,328(r16)
 1019a70:	18006215 	stw	zero,392(r3)
 1019a74:	18006315 	stw	zero,396(r3)
 1019a78:	0009883a 	mov	r4,zero
 1019a7c:	883fc826 	beq	r17,zero,10199a0 <__register_exitproc+0x5c>
 1019a80:	003fd706 	br	10199e0 <__register_exitproc+0x9c>

01019a84 <register_fini>:
 1019a84:	f811883a 	mov	r8,ra
 1019a88:	100c3d80 	call	100c3d8 <_mcount>
 1019a8c:	403f883a 	mov	ra,r8
 1019a90:	f800283a 	ret

01019a94 <__call_exitprocs>:
 1019a94:	f811883a 	mov	r8,ra
 1019a98:	100c3d80 	call	100c3d8 <_mcount>
 1019a9c:	403f883a 	mov	ra,r8
 1019aa0:	defff304 	addi	sp,sp,-52
 1019aa4:	dfc00c15 	stw	ra,48(sp)
 1019aa8:	df000b15 	stw	fp,44(sp)
 1019aac:	ddc00a15 	stw	r23,40(sp)
 1019ab0:	dd800915 	stw	r22,36(sp)
 1019ab4:	dd400815 	stw	r21,32(sp)
 1019ab8:	dd000715 	stw	r20,28(sp)
 1019abc:	dcc00615 	stw	r19,24(sp)
 1019ac0:	dc800515 	stw	r18,20(sp)
 1019ac4:	dc400415 	stw	r17,16(sp)
 1019ac8:	dc000315 	stw	r16,12(sp)
 1019acc:	008040f4 	movhi	r2,259
 1019ad0:	10a00804 	addi	r2,r2,-32736
 1019ad4:	10800017 	ldw	r2,0(r2)
 1019ad8:	282b883a 	mov	r21,r5
 1019adc:	2039883a 	mov	fp,r4
 1019ae0:	d8800115 	stw	r2,4(sp)
 1019ae4:	00800034 	movhi	r2,0
 1019ae8:	10800004 	addi	r2,r2,0
 1019aec:	1005003a 	cmpeq	r2,r2,zero
 1019af0:	d8800215 	stw	r2,8(sp)
 1019af4:	d8800117 	ldw	r2,4(sp)
 1019af8:	2829003a 	cmpeq	r20,r5,zero
 1019afc:	10805204 	addi	r2,r2,328
 1019b00:	d8800015 	stw	r2,0(sp)
 1019b04:	d8800117 	ldw	r2,4(sp)
 1019b08:	14405217 	ldw	r17,328(r2)
 1019b0c:	88001026 	beq	r17,zero,1019b50 <__call_exitprocs+0xbc>
 1019b10:	ddc00017 	ldw	r23,0(sp)
 1019b14:	88800117 	ldw	r2,4(r17)
 1019b18:	8c802204 	addi	r18,r17,136
 1019b1c:	143fffc4 	addi	r16,r2,-1
 1019b20:	80000916 	blt	r16,zero,1019b48 <__call_exitprocs+0xb4>
 1019b24:	05bfffc4 	movi	r22,-1
 1019b28:	a000151e 	bne	r20,zero,1019b80 <__call_exitprocs+0xec>
 1019b2c:	8409883a 	add	r4,r16,r16
 1019b30:	2105883a 	add	r2,r4,r4
 1019b34:	1485883a 	add	r2,r2,r18
 1019b38:	10c02017 	ldw	r3,128(r2)
 1019b3c:	a8c01126 	beq	r21,r3,1019b84 <__call_exitprocs+0xf0>
 1019b40:	843fffc4 	addi	r16,r16,-1
 1019b44:	85bff81e 	bne	r16,r22,1019b28 <__call_exitprocs+0x94>
 1019b48:	d8800217 	ldw	r2,8(sp)
 1019b4c:	10003126 	beq	r2,zero,1019c14 <__call_exitprocs+0x180>
 1019b50:	dfc00c17 	ldw	ra,48(sp)
 1019b54:	df000b17 	ldw	fp,44(sp)
 1019b58:	ddc00a17 	ldw	r23,40(sp)
 1019b5c:	dd800917 	ldw	r22,36(sp)
 1019b60:	dd400817 	ldw	r21,32(sp)
 1019b64:	dd000717 	ldw	r20,28(sp)
 1019b68:	dcc00617 	ldw	r19,24(sp)
 1019b6c:	dc800517 	ldw	r18,20(sp)
 1019b70:	dc400417 	ldw	r17,16(sp)
 1019b74:	dc000317 	ldw	r16,12(sp)
 1019b78:	dec00d04 	addi	sp,sp,52
 1019b7c:	f800283a 	ret
 1019b80:	8409883a 	add	r4,r16,r16
 1019b84:	88c00117 	ldw	r3,4(r17)
 1019b88:	2105883a 	add	r2,r4,r4
 1019b8c:	1445883a 	add	r2,r2,r17
 1019b90:	18ffffc4 	addi	r3,r3,-1
 1019b94:	11800217 	ldw	r6,8(r2)
 1019b98:	1c001526 	beq	r3,r16,1019bf0 <__call_exitprocs+0x15c>
 1019b9c:	10000215 	stw	zero,8(r2)
 1019ba0:	303fe726 	beq	r6,zero,1019b40 <__call_exitprocs+0xac>
 1019ba4:	00c00044 	movi	r3,1
 1019ba8:	1c06983a 	sll	r3,r3,r16
 1019bac:	90804017 	ldw	r2,256(r18)
 1019bb0:	8cc00117 	ldw	r19,4(r17)
 1019bb4:	1884703a 	and	r2,r3,r2
 1019bb8:	10001426 	beq	r2,zero,1019c0c <__call_exitprocs+0x178>
 1019bbc:	90804117 	ldw	r2,260(r18)
 1019bc0:	1884703a 	and	r2,r3,r2
 1019bc4:	10000c1e 	bne	r2,zero,1019bf8 <__call_exitprocs+0x164>
 1019bc8:	2105883a 	add	r2,r4,r4
 1019bcc:	1485883a 	add	r2,r2,r18
 1019bd0:	11400017 	ldw	r5,0(r2)
 1019bd4:	e009883a 	mov	r4,fp
 1019bd8:	303ee83a 	callr	r6
 1019bdc:	88800117 	ldw	r2,4(r17)
 1019be0:	98bfc81e 	bne	r19,r2,1019b04 <__call_exitprocs+0x70>
 1019be4:	b8800017 	ldw	r2,0(r23)
 1019be8:	147fd526 	beq	r2,r17,1019b40 <__call_exitprocs+0xac>
 1019bec:	003fc506 	br	1019b04 <__call_exitprocs+0x70>
 1019bf0:	8c000115 	stw	r16,4(r17)
 1019bf4:	003fea06 	br	1019ba0 <__call_exitprocs+0x10c>
 1019bf8:	2105883a 	add	r2,r4,r4
 1019bfc:	1485883a 	add	r2,r2,r18
 1019c00:	11000017 	ldw	r4,0(r2)
 1019c04:	303ee83a 	callr	r6
 1019c08:	003ff406 	br	1019bdc <__call_exitprocs+0x148>
 1019c0c:	303ee83a 	callr	r6
 1019c10:	003ff206 	br	1019bdc <__call_exitprocs+0x148>
 1019c14:	88800117 	ldw	r2,4(r17)
 1019c18:	1000081e 	bne	r2,zero,1019c3c <__call_exitprocs+0x1a8>
 1019c1c:	89000017 	ldw	r4,0(r17)
 1019c20:	20000726 	beq	r4,zero,1019c40 <__call_exitprocs+0x1ac>
 1019c24:	b9000015 	stw	r4,0(r23)
 1019c28:	8809883a 	mov	r4,r17
 1019c2c:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 1019c30:	bc400017 	ldw	r17,0(r23)
 1019c34:	883fb71e 	bne	r17,zero,1019b14 <__call_exitprocs+0x80>
 1019c38:	003fc506 	br	1019b50 <__call_exitprocs+0xbc>
 1019c3c:	89000017 	ldw	r4,0(r17)
 1019c40:	882f883a 	mov	r23,r17
 1019c44:	2023883a 	mov	r17,r4
 1019c48:	883fb21e 	bne	r17,zero,1019b14 <__call_exitprocs+0x80>
 1019c4c:	003fc006 	br	1019b50 <__call_exitprocs+0xbc>

01019c50 <__fixunsdfsi>:
 1019c50:	f811883a 	mov	r8,ra
 1019c54:	100c3d80 	call	100c3d8 <_mcount>
 1019c58:	403f883a 	mov	ra,r8
 1019c5c:	defffb04 	addi	sp,sp,-20
 1019c60:	dfc00415 	stw	ra,16(sp)
 1019c64:	dcc00315 	stw	r19,12(sp)
 1019c68:	dc800215 	stw	r18,8(sp)
 1019c6c:	dc400115 	stw	r17,4(sp)
 1019c70:	dc000015 	stw	r16,0(sp)
 1019c74:	04507834 	movhi	r17,16864
 1019c78:	0021883a 	mov	r16,zero
 1019c7c:	800d883a 	mov	r6,r16
 1019c80:	880f883a 	mov	r7,r17
 1019c84:	2025883a 	mov	r18,r4
 1019c88:	2827883a 	mov	r19,r5
 1019c8c:	100b70c0 	call	100b70c <__gedf2>
 1019c90:	000d883a 	mov	r6,zero
 1019c94:	880f883a 	mov	r7,r17
 1019c98:	980b883a 	mov	r5,r19
 1019c9c:	9009883a 	mov	r4,r18
 1019ca0:	10000d16 	blt	r2,zero,1019cd8 <__fixunsdfsi+0x88>
 1019ca4:	1001c000 	call	1001c00 <__subdf3>
 1019ca8:	180b883a 	mov	r5,r3
 1019cac:	1009883a 	mov	r4,r2
 1019cb0:	100b9380 	call	100b938 <__fixdfsi>
 1019cb4:	00e00034 	movhi	r3,32768
 1019cb8:	10c5883a 	add	r2,r2,r3
 1019cbc:	dfc00417 	ldw	ra,16(sp)
 1019cc0:	dcc00317 	ldw	r19,12(sp)
 1019cc4:	dc800217 	ldw	r18,8(sp)
 1019cc8:	dc400117 	ldw	r17,4(sp)
 1019ccc:	dc000017 	ldw	r16,0(sp)
 1019cd0:	dec00504 	addi	sp,sp,20
 1019cd4:	f800283a 	ret
 1019cd8:	980b883a 	mov	r5,r19
 1019cdc:	9009883a 	mov	r4,r18
 1019ce0:	100b9380 	call	100b938 <__fixdfsi>
 1019ce4:	dfc00417 	ldw	ra,16(sp)
 1019ce8:	dcc00317 	ldw	r19,12(sp)
 1019cec:	dc800217 	ldw	r18,8(sp)
 1019cf0:	dc400117 	ldw	r17,4(sp)
 1019cf4:	dc000017 	ldw	r16,0(sp)
 1019cf8:	dec00504 	addi	sp,sp,20
 1019cfc:	f800283a 	ret

01019d00 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 1019d00:	f811883a 	mov	r8,ra
 1019d04:	100c3d80 	call	100c3d8 <_mcount>
 1019d08:	403f883a 	mov	ra,r8
 1019d0c:	defffb04 	addi	sp,sp,-20
 1019d10:	df000415 	stw	fp,16(sp)
 1019d14:	df000404 	addi	fp,sp,16
 1019d18:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 1019d1c:	e0bfff17 	ldw	r2,-4(fp)
 1019d20:	e0bffe15 	stw	r2,-8(fp)

#if defined(NIOS2_HAS_DEBUG_STUB) && (defined(ALT_BREAK_ON_EXIT) || defined(ALT_PROVIDE_GMON))

  int r3 = (1 << 2);
 1019d24:	00800104 	movi	r2,4
 1019d28:	e0bffd15 	stw	r2,-12(fp)

#ifdef ALT_PROVIDE_GMON
  extern unsigned int alt_gmon_data[];
  int r4 = (int)alt_gmon_data;
 1019d2c:	008040b4 	movhi	r2,258
 1019d30:	109ffd04 	addi	r2,r2,32756
 1019d34:	e0bffc15 	stw	r2,-16(fp)
  r3 |= (1 << 4);
 1019d38:	e0bffd17 	ldw	r2,-12(fp)
 1019d3c:	10800414 	ori	r2,r2,16
 1019d40:	e0bffd15 	stw	r2,-12(fp)
#define ALT_GMON_DATA ,"D04"(r4)
#else
#define ALT_GMON_DATA
#endif /* ALT_PROVIDE_GMON */

  if (r2) {
 1019d44:	e0bffe17 	ldw	r2,-8(fp)
 1019d48:	1005003a 	cmpeq	r2,r2,zero
 1019d4c:	1000021e 	bne	r2,zero,1019d58 <alt_sim_halt+0x58>
    ALT_SIM_FAIL();
 1019d50:	002af070 	cmpltui	zero,zero,43969
 1019d54:	00000106 	br	1019d5c <alt_sim_halt+0x5c>
  } else {
    ALT_SIM_PASS();
 1019d58:	002af0b0 	cmpltui	zero,zero,43970
  }

  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */
 1019d5c:	00800234 	movhi	r2,8
 1019d60:	10a84804 	addi	r2,r2,-24288
 1019d64:	10bfffc4 	addi	r2,r2,-1
 1019d68:	00bffe16 	blt	zero,r2,1019d64 <alt_sim_halt+0x64>

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );
 1019d6c:	e0bffe17 	ldw	r2,-8(fp)
 1019d70:	e0fffd17 	ldw	r3,-12(fp)
 1019d74:	e13ffc17 	ldw	r4,-16(fp)
 1019d78:	003da0ba 	break	2
    ALT_SIM_FAIL();
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
 1019d7c:	e037883a 	mov	sp,fp
 1019d80:	df000017 	ldw	fp,0(sp)
 1019d84:	dec00104 	addi	sp,sp,4
 1019d88:	f800283a 	ret

01019d8c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 1019d8c:	f811883a 	mov	r8,ra
 1019d90:	100c3d80 	call	100c3d8 <_mcount>
 1019d94:	403f883a 	mov	ra,r8
 1019d98:	defffd04 	addi	sp,sp,-12
 1019d9c:	dfc00215 	stw	ra,8(sp)
 1019da0:	df000115 	stw	fp,4(sp)
 1019da4:	df000104 	addi	fp,sp,4
 1019da8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 1019dac:	008040f4 	movhi	r2,259
 1019db0:	10976804 	addi	r2,r2,23968
 1019db4:	10000005 	stb	zero,0(r2)

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 1019db8:	e13fff17 	ldw	r4,-4(fp)
 1019dbc:	1019d000 	call	1019d00 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 1019dc0:	003fff06 	br	1019dc0 <_exit+0x34>
 1019dc4:	01019a84 	movi	r4,1642
