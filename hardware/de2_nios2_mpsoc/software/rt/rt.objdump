
rt.elf:     file format elf32-littlenios2
rt.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x010001ac

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x01000000 align 2**12
         filesz 0x000001ac memsz 0x000001ac flags r-x
    LOAD off    0x000021ac vaddr 0x010001ac paddr 0x010001ac align 2**12
         filesz 0x0001a150 memsz 0x0001a150 flags r-x
    LOAD off    0x0001c2fc vaddr 0x0101a2fc paddr 0x01027f30 align 2**12
         filesz 0x0000dc34 memsz 0x0000dc34 flags rw-
    LOAD off    0x0002ab64 vaddr 0x01035b64 paddr 0x01035b64 align 2**12
         filesz 0x00000000 memsz 0x00012248 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001ac  00080020  01000000  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00019a80  010001ac  010001ac  000021ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000006d0  01019c2c  01019c2c  0001bc2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000dc34  0101a2fc  01027f30  0001c2fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00012248  01035b64  01035b64  0002ab64  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00029f30  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000f38  00000000  00000000  00029f58  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00002623  00000000  00000000  0002ae90  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00034aa4  00000000  00000000  0002d4b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009e7b  00000000  00000000  00061f57  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001ddcd  00000000  00000000  0006bdd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002b4c  00000000  00000000  00089ba0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000026de  00000000  00000000  0008c6ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000dc28  00000000  00000000  0008edca  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0009c9f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009c8  00000000  00000000  0009ca08  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  000a29e8  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  000a29ee  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000a29f3  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000a29f4  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000a29f5  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000a29f9  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000a29fd  2**0
                  CONTENTS, READONLY
 24 .profiling_enabled 00000001  00000000  00000000  000a2a01  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  000a2a02  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  000a2a0d  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  000a2a18  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  000a2a23  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000040  00000000  00000000  000a2a2e  2**0
                  CONTENTS, READONLY
 30 .jdi          000175b7  00000000  00000000  000a2a6e  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00157894  00000000  00000000  000ba025  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
010001ac l    d  .text	00000000 .text
01019c2c l    d  .rodata	00000000 .rodata
0101a2fc l    d  .rwdata	00000000 .rwdata
01035b64 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
010001e4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 cpu_0.c
01035c50 l     O .bss	00000018 alarm.3462
00002ee0 l       *ABS*	00000000 delaycount
010015d8 l       .text	00000000 fin
010015c4 l       .text	00000000 inner
010015d0 l       .text	00000000 outer
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
01002058 l     F .text	00000088 udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0100292c l     F .text	00000064 __sprint_r
01019e62 l     O .rodata	00000010 blanks.3452
01019e52 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
010049d8 l     F .text	00000250 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
01006430 l     F .text	00000064 std
01006584 l     F .text	00000014 __fp_lock
01006598 l     F .text	00000014 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
01026328 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
01027e6c l     O .rwdata	00000004 charset
01019e98 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
01019fe0 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
0100a920 l     F .text	0000041c _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0100bb5c l     F .text	0000006c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0100bbc8 l     F .text	00000038 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0100bce4 l     F .text	0000006c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0100be20 l     F .text	0000006c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0100bf18 l     F .text	00000078 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0100c090 l     F .text	0000006c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
0100c39c l     F .text	0000006c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
01027e90 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
0100c838 l     F .text	0000006c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
01027e9c l     O .rwdata	00000004 lockid
01035bc4 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
01027ea0 l     O .rwdata	00000004 lockid
01035bcc l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
0100e3a0 l     F .text	00000050 OS_InitMisc
0100e3f0 l     F .text	00000078 OS_InitRdyList
0100e578 l     F .text	000000ec OS_InitTCBList
0100e2b8 l     F .text	000000e8 OS_InitEventList
0100e468 l     F .text	00000088 OS_InitTaskIdle
0100e4f0 l     F .text	00000088 OS_InitTaskStat
0100e81c l     F .text	0000007c OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
01010880 l     F .text	0000011c OS_FlagTaskRdy
010105c0 l     F .text	000001d0 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 os_tmr.c
01016674 l     F .text	00000048 OSTmr_Lock
01016024 l     F .text	000000c8 OSTmr_Alloc
010166bc l     F .text	00000040 OSTmr_Unlock
0101656c l     F .text	00000108 OSTmr_Unlink
010160ec l     F .text	000000dc OSTmr_Free
010163fc l     F .text	00000170 OSTmr_Link
01016374 l     F .text	00000088 OSTmr_InitTask
010166fc l     F .text	0000013c OSTmr_Task
00000000 l    df *ABS*	00000000 alt_sys_init.c
01026ce4 l     O .rwdata	0000106c jtag_uart_0
01027d50 l     O .rwdata	00000014 mutex_0
01027d64 l     O .rwdata	00000014 mutex_1
01027d78 l     O .rwdata	00000014 mutex_2
01027d8c l     O .rwdata	00000014 mutex_3
01027da0 l     O .rwdata	00000014 mutex_4
01027db4 l     O .rwdata	0000002c Buttons
01027de0 l     O .rwdata	0000002c HEX3_HEX0
01027e0c l     O .rwdata	0000002c HEX7_HEX4
01016a7c l     F .text	00000044 alt_dev_reg
01016950 l     F .text	000000c0 alt_avalon_mutex_reg
01016a10 l     F .text	0000006c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
01016d74 l     F .text	000002d4 altera_avalon_jtag_uart_irq
01017048 l     F .text	00000120 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
0101789c l     F .text	00000088 alt_mutex_trylock
01017988 l     F .text	0000006c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_performance_counter.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
01017e40 l     F .text	00000080 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 perf_print_formatted_report.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
010182dc l     F .text	0000006c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_gmon.c
01027f20 l     O .rwdata	00000004 pcsample_need_init
01035c3c l     O .bss	00000004 s_pcsamples
01027f24 l     O .rwdata	00000004 s_low_pc
01027f28 l     O .rwdata	00000004 s_high_pc
01035c40 l     O .bss	00000004 mcount_slab_ptr
01035c44 l     O .bss	00000004 mcount_slab_size
01018648 l     F .text	000000e4 nios2_pcsample_init
010185cc l     F .text	0000007c mcount_allocate
01035c90 l     O .bss	00000018 s_nios2_pcsample_alarm
0101872c l     F .text	00000084 nios2_pcsample
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
010187d8 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
01018b0c l     F .text	00000104 alt_file_locked
01018da8 l     F .text	0000006c alt_get_errno
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
01035c4c l     O .bss	00000002 OSTmrCtr
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
01019854 l     F .text	00000010 register_fini
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_exit.c
01019b64 l     F .text	0000008c alt_sim_halt
010027a4 g     F .text	00000028 putchar
010083dc g     F .text	000000a0 _mprec_log10
010010f4 g     F .text	00000050 PosMaxTask
01027eee g     O .rwdata	00000002 OSTaskNameSize
010084e0 g     F .text	00000098 __any_on
0100a130 g     F .text	0000007c _isatty_r
01019fb8 g     O .rodata	00000028 __mprec_tinytens
0100c0fc g     F .text	000000d4 alt_main
010027e0 g     F .text	000000ac _puts_r
01035bd4 g     O .bss	00000004 OSTmrFreeList
01047b1c g     O .bss	00000100 alt_irq
0100a1ac g     F .text	00000084 _lseek_r
01020312 g     O .rwdata	00003003 test_ppm_3
010111d4 g     F .text	000000e0 OS_MemInit
01027f30 g       *ABS*	00000000 __flash_rwdata_start
010153ac g     F .text	00000070 OSTimeSet
0100b218 g     F .text	00000094 __eqdf2
01043ca8 g     O .bss	00000010 OSTmrWheelTbl
0100ce40 g     F .text	000006c0 OSEventPendMulti
01047dac g       *ABS*	00000000 __alt_heap_start
0101922c g     F .text	0000002c OSTaskCreateHook
01002714 g     F .text	00000050 printf
01027ec6 g     O .rwdata	00000002 OSMboxEn
0100d564 g     F .text	00000088 OSIntEnter
00080000 g       *ABS*	00000000 __alt_mem_sram
01009a0c g     F .text	00000074 __sseek
010064d4 g     F .text	000000b0 __sinit
01017e10 g     F .text	00000030 alt_get_cpu_freq
01009c3c g     F .text	0000013c __swbuf_r
010015bc g       .text	00000000 delay1
01027ed6 g     O .rwdata	00000002 OSQEn
010072ac g     F .text	00000090 _setlocale_r
01006628 g     F .text	000000a8 __sfmoreglue
0100cad8 g     F .text	000000dc __malloc_unlock
010192ac g     F .text	00000028 OSTaskStatHook
01035bd8 g     O .bss	00000001 OSLockNesting
01035bdc g     O .bss	00000004 OSTmrSemSignal
01035b6c g     O .bss	00000004 PosMaxSem
01027f14 g     O .rwdata	00000002 OSDataSize
01035be0 g     O .bss	00000001 OSRunning
01007dec g     F .text	000000ec memmove
0101934c g     F .text	0000002c OSInitHookBegin
01017f54 g     F .text	000002a0 perf_print_formatted_report
01027f0c g     O .rwdata	00000002 OSTmrSize
0100660c g     F .text	0000001c _cleanup
01017a8c g     F .text	00000084 altera_avalon_mutex_trylock
01008578 g     F .text	000000c8 _Balloc
01035be4 g     O .bss	00000004 OSIdleCtr
0100b340 g     F .text	00000094 __gtdf2
01018eec g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
0100eb98 g     F .text	000002ec OS_TCBInit
01027e5d g     O .rwdata	00000001 sequence_length
00080000 g     F .entry	0000000c __reset
01035be8 g     O .bss	00000002 OSTmrUsed
01027f12 g     O .rwdata	00000002 OSTmrWheelTblSize
01017b8c g     F .text	00000088 altera_avalon_mutex_is_mine
01000000 g       *ABS*	00000000 __flash_exceptions_start
01027eb2 g     O .rwdata	00000002 OSEventSize
01035bea g     O .bss	00000001 OSPrioHighRdy
0100a0b0 g     F .text	00000080 _fstat_r
01019258 g     F .text	0000002c OSTaskDelHook
01035ba8 g     O .bss	00000004 errno
01018ecc g       .text	00000000 OSStartHighRdy
010139f4 g     F .text	0000020c OSTaskCreateExt
01001144 g     F .text	00000084 objectPos
010100b8 g     F .text	00000074 OSFlagPendGetFlagsRdy
01027ef2 g     O .rwdata	00000002 OSTaskStatStkSize
0100f07c g     F .text	00000340 OSFlagAccept
01011940 g     F .text	000000d4 OSQFlush
010112b4 g     F .text	00000160 OSQAccept
01035bb4 g     O .bss	00000004 alt_argv
0102fe5c g       *ABS*	00000000 _gp
01013814 g     F .text	000001e0 OSTaskCreate
01013294 g     F .text	00000580 OSTaskChangePrio
01035bd0 g     O .bss	00000004 alt_heapsem
0100ee84 g     F .text	000001f8 OSDebugInit
01013c00 g     F .text	00000418 OSTaskDel
01026b64 g     O .rwdata	00000180 alt_fd_list
01043cb8 g     O .bss	00000370 OSFlagTbl
010027cc g     F .text	00000014 _putchar_r
0100e070 g     F .text	000000c4 OS_EventTaskRemove
01018428 g     F .text	000000a0 alt_find_dev
01007d40 g     F .text	000000ac memcpy
01027edc g     O .rwdata	00000002 OSRdyTblSize
01044028 g     O .bss	00000340 OSTmrTbl
010065f4 g     F .text	00000018 _cleanup_r
0100b4fc g     F .text	00000104 __floatsidf
010188bc g     F .text	00000084 alt_io_redirect
0100b468 g     F .text	00000094 __ltdf2
01019c2c g       *ABS*	00000000 __DTOR_END__
0100288c g     F .text	00000020 puts
0100cbb4 g     F .text	0000013c OSEventNameGet
01027ec0 g     O .rwdata	00000002 OSFlagMax
01027e5c g     O .rwdata	00000001 NR_ASCII_CHARS
01008320 g     F .text	000000bc __ratio
0100d5ec g     F .text	0000010c OSIntExit
01027efa g     O .rwdata	00000002 OSTCBSize
01026318 g     O .rwdata	00000010 image_sequence
01035beb g     O .bss	00000001 OSPrioCur
010172e8 g     F .text	000002cc altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
01002764 g     F .text	00000040 _printf_r
010021b8 g     F .text	00000014 __udivsi3
0100bd50 g     F .text	000000d0 isatty
01027ee0 g     O .rwdata	00000002 OSStkWidth
01019ec8 g     O .rodata	000000c8 __mprec_tens
01027ed4 g     O .rwdata	00000002 OSPtrSize
01007264 g     F .text	00000014 __locale_charset
01027eb4 g     O .rwdata	00000002 OSEventTblSize
01019a20 g     F .text	000000b0 __fixunsdfsi
01018e40 g       .text	00000000 OSCtxSw
01035b9c g     O .bss	00000004 __malloc_top_pad
01035bec g     O .bss	00000004 OSTCBList
01015fdc g     F .text	00000048 OSTmrSignal
01017d94 g     F .text	0000004c perf_get_num_starts
01035bac g     O .bss	00000004 alt_fd_list_lock
01027e68 g     O .rwdata	00000004 __mb_cur_max
01007278 g     F .text	00000018 _localeconv_r
01008d18 g     F .text	00000048 __i2b
01006c24 g     F .text	000004a8 __sfvwrite_r
01044368 g     O .bss	00000c30 OSMemTbl
01035bf0 g     O .bss	00000001 OSTickStepState
0100997c g     F .text	0000007c _sbrk_r
01027ed8 g     O .rwdata	00000002 OSQMax
01044f98 g     O .bss	00000800 OSTaskStatStk
01000f58 g     F .text	0000019c posMax
01010d8c g     F .text	00000118 OSMemNameGet
01027eb8 g     O .rwdata	00000002 OSFlagEn
0100a230 g     F .text	00000084 _read_r
01027efe g     O .rwdata	00000002 OSTimeTickHookEn
01035b70 g     O .bss	00000004 CalcCoordSem
01011ec8 g     F .text	0000018c OSQPost
0101099c g     F .text	000000b8 OS_FlagUnlink
01026728 g     O .rwdata	0000000c __lc_ctype
01027e88 g     O .rwdata	00000004 alt_max_fd
0100e6c4 g     F .text	00000078 OS_MemCopy
01035b74 g     O .bss	00000004 objectPosSem
0100e73c g     F .text	000000e0 OS_Sched
010025d0 g     F .text	00000144 __unpack_d
01009f74 g     F .text	0000011c _fclose_r
01010c7c g     F .text	00000110 OSMemGet
01014358 g     F .text	000001d0 OSTaskNameSet
010063f0 g     F .text	00000040 fflush
01035ba0 g     O .bss	00000004 __malloc_max_sbrked_mem
01035bf4 g     O .bss	00000004 OSCtxSwCtr
010192d4 g     F .text	00000078 OSTimeTickHook
01018940 g     F .text	000001cc alt_irq_register
01027ec2 g     O .rwdata	00000002 OSFlagNameSize
0100e134 g     F .text	00000110 OS_EventTaskRemoveMulti
0100adc8 g     F .text	00000080 __adddf3
0100df10 g     F .text	00000160 OS_EventTaskWaitMulti
010081f4 g     F .text	0000012c __b2d
01027eda g     O .rwdata	00000002 OSQSize
0100a2b4 g     F .text	0000066c __umoddi3
0100bf90 g     F .text	00000100 lseek
010002fc g     F .text	000001c8 printAsciiHidden
01017c14 g     F .text	00000064 altera_avalon_mutex_first_lock
01012b04 g     F .text	00000288 OSSemPend
01027e64 g     O .rwdata	00000004 _global_impure_ptr
010092f4 g     F .text	00000600 _realloc_r
01027ec4 g     O .rwdata	00000002 OSLowestPrio
01047dac g       *ABS*	00000000 __bss_end
010193c8 g     F .text	0000002c OSTCBInitHook
01027f0a g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0100c5ec g     F .text	0000011c alt_tick
01000f08 g     F .text	00000050 xCorr2Task
010015dc g     F .text	00000678 __udivdi3
01027eac g     O .rwdata	00000002 OSEventEn
01019f90 g     O .rodata	00000028 __mprec_bigtens
01008fc4 g     F .text	0000012c __s2b
01027f06 g     O .rwdata	00000002 OSTmrCfgNameSize
01001eb8 g     F .text	000001a0 __floatunsidf
010080fc g     F .text	0000006c __mcmp
010065d0 g     F .text	00000024 __fp_lock_all
01027e5f g     O .rwdata	00000001 cropSIZE
01035bf8 g     O .bss	00000002 OSTmrFree
01010790 g     F .text	000000f0 OS_FlagInit
0100c548 g     F .text	000000a4 alt_alarm_stop
0101560c g     F .text	00000184 OSTmrDel
01027ee8 g     O .rwdata	00000002 OSTaskIdleStkSize
01035c48 g     O .bss	00000004 alt_irq_active
0101266c g     F .text	000000cc OSSemAccept
01010fd0 g     F .text	000000fc OSMemPut
01010a54 g     F .text	00000228 OSMemCreate
01035bfc g     O .bss	00000004 OSIdleCtrMax
000800ec g     F .exceptions	000000e0 alt_irq_handler
01026b3c g     O .rwdata	00000028 alt_dev_null
01027efc g     O .rwdata	00000002 OSTicksPerSec
01017924 g     F .text	00000064 altera_avalon_mutex_open
0101d30f g     O .rwdata	00003003 test_ppm_2
01035ca8 g     O .bss	00002000 xCorr2Task_stk
01018e40 g       .text	00000000 OSIntCtxSw
010181f4 g     F .text	00000028 alt_dcache_flush_all
01007fb0 g     F .text	0000007c __hi0bits
0100b600 g     F .text	000000e4 __fixdfsi
010001ac g       *ABS*	00000000 stext
01037ca8 g     O .bss	00002000 GrayTask_stk
010184c8 g     F .text	00000104 __mcount_record
01023315 g     O .rwdata	00003003 test_ppm_4
01035c00 g     O .bss	00000004 OSTCBFreeList
01027f30 g       *ABS*	00000000 __ram_rwdata_end
01012d8c g     F .text	00000188 OSSemPendAbort
01027e80 g     O .rwdata	00000008 alt_dev_list
0100c708 g     F .text	00000130 write
01035b78 g     O .bss	00000004 xCorr2Sem
01009200 g     F .text	000000f4 _putc_r
01027f00 g     O .rwdata	00000002 OSVersionNbr
01027f18 g     O .rwdata	00000008 alt_mutex_list
0101a2fc g       *ABS*	00000000 __ram_rodata_end
0100bc00 g     F .text	000000e4 fstat
01015908 g     F .text	00000208 OSTmrRemainGet
01027ea8 g     O .rwdata	00000004 OSEndiannessTest
01008e98 g     F .text	0000012c __pow5mult
01035b90 g     O .bss	00000004 __nlocale_changed
010021cc g     F .text	00000014 __umodsi3
01027eba g     O .rwdata	00000002 OSFlagGrpSize
01015b10 g     F .text	00000108 OSTmrStateGet
01047dac g       *ABS*	00000000 end
01016c38 g     F .text	0000013c altera_avalon_jtag_uart_init
0100e9f0 g     F .text	000000d4 OS_TaskStat
01019c28 g       *ABS*	00000000 __CTOR_LIST__
01800000 g       *ABS*	00000000 __alt_stack_pointer
01017ec0 g     F .text	00000094 alt_avalon_timer_sc_init
01002224 g     F .text	0000008c __clzsi2
010175b4 g     F .text	000002e8 altera_avalon_jtag_uart_write
010161c8 g     F .text	000001ac OSTmr_Init
01006494 g     F .text	00000010 __sfp_lock_acquire
01019c28 g       *ABS*	00000000 etext
01007c50 g     F .text	000000f0 memchr
0100e664 g     F .text	00000060 OS_MemClr
01002990 g     F .text	00001ed0 ___vfprintf_internal_r
01018f10 g     F .text	0000031c OSTaskStkInit
01000db4 g     F .text	00000154 xCorr2
01006904 g     F .text	00000320 _free_r
0100dc54 g     F .text	000001a0 OS_EventTaskRdy
01019864 g     F .text	000001bc __call_exitprocs
01035c04 g     O .bss	00000001 OSCPUUsage
01035b94 g     O .bss	00000004 __mlocale_changed
01027e74 g     O .rwdata	00000004 __malloc_sbrk_base
010001ac g     F .text	0000003c _start
01035bbc g     O .bss	00000004 _alt_tick_rate
01011a14 g     F .text	0000032c OSQPend
01014d64 g     F .text	00000158 OSTimeDly
01019ad0 g     F .text	00000094 __floatundidf
01008960 g     F .text	00000158 __lshift
01035bc0 g     O .bss	00000004 _alt_nticks
0100c26c g     F .text	00000130 read
01016878 g     F .text	000000d8 alt_sys_init
01035b7c g     O .bss	00000004 CropSem
01019714 g     F .text	00000140 __register_exitproc
01035c05 g     O .bss	00000001 OSTaskCtr
01027e38 g     O .rwdata	00000024 alt_gmon_data
01017b10 g     F .text	0000007c altera_avalon_mutex_unlock
01014ebc g     F .text	00000264 OSTimeDlyHMSM
01008ab8 g     F .text	00000260 __multiply
0100c1d0 g       .text	00000000 mcount
01017168 g     F .text	00000080 altera_avalon_jtag_uart_close
010021e0 g     F .text	00000044 __mulsi3
0101a2fc g       *ABS*	00000000 __ram_rwdata_start
01019c2c g       *ABS*	00000000 __ram_rodata_start
01035c68 g     O .bss	00000028 __malloc_current_mallinfo
01027eae g     O .rwdata	00000002 OSEventMax
01008640 g     F .text	00000188 __d2b
01012f14 g     F .text	00000134 OSSemPost
0100d790 g     F .text	000000f0 OSSchedUnlock
01016ac0 g     F .text	00000064 altera_avalon_jtag_uart_read_fd
01019520 g     F .text	00000110 alt_get_fd
01035c08 g     O .bss	00000004 OSMemFreeList
0100d8fc g     F .text	000000b8 OSStatInit
010104e0 g     F .text	000000e0 OSFlagQuery
0100b814 g     F .text	000000dc __fpcmp_parts_d
01027ee4 g     O .rwdata	00000002 OSTaskCreateExtEn
01009ef8 g     F .text	0000007c _close_r
01017c78 g     F .text	000000bc perf_get_section_time
01019694 g     F .text	00000080 memcmp
0100dc2c g     F .text	00000028 OS_Dummy
01016b88 g     F .text	00000054 altera_avalon_jtag_uart_close_fd
01047dac g       *ABS*	00000000 __alt_stack_base
01016bdc g     F .text	0000005c altera_avalon_jtag_uart_ioctl_fd
01000a24 g     F .text	0000011c crop
01004890 g     F .text	00000148 __swsetup_r
01045798 g     O .bss	000001e0 OSQTbl
01001c54 g     F .text	00000264 __divdf3
01039ca8 g     O .bss	00002000 CropTask_stk
010066d0 g     F .text	000000fc __sfp
0100847c g     F .text	00000064 __copybits
01017d34 g     F .text	00000060 perf_get_total_time
01026734 g     O .rwdata	00000408 __malloc_av_
010064c4 g     F .text	00000010 __sinit_lock_release
01035c0c g     O .bss	00000004 OSTCBHighRdy
0100ae48 g     F .text	000003d0 __muldf3
01009b08 g     F .text	0000006c __sread
01035b68 g     O .bss	00000004 counter
01035c10 g     O .bss	00000004 OSQFreeList
010193f4 g     F .text	0000012c alt_find_file
0101821c g     F .text	000000c0 alt_dev_llist_insert
0100c9c4 g     F .text	00000114 __malloc_lock
0100c48c g     F .text	000000bc sbrk
0100ccf0 g     F .text	00000150 OSEventNameSet
010061e8 g     F .text	00000208 _fflush_r
01009e24 g     F .text	000000d4 _calloc_r
01035c14 g     O .bss	00000001 OSRdyGrp
01015c18 g     F .text	0000018c OSTmrStart
01035b64 g       *ABS*	00000000 __bss_start
010009a4 g     F .text	00000080 CalcCoordTask
01007ed8 g     F .text	000000a4 memset
01035b80 g     O .bss	00000001 err
010014f4 g     F .text	000000c8 main
01035bb8 g     O .bss	00000004 alt_envp
01035ba4 g     O .bss	00000004 __malloc_max_total_mem
01016b24 g     F .text	00000064 altera_avalon_jtag_uart_write_fd
01009d78 g     F .text	00000028 __swbuf
0101a00c g     O .rodata	00000100 OSUnMapTbl
01027ede g     O .rwdata	00000002 OSSemEn
0101012c g     F .text	000003b4 OSFlagPost
010099f8 g     F .text	00000014 __sclose
01800000 g       *ABS*	00000000 __alt_heap_limit
0100a090 g     F .text	00000020 fclose
0100ddf4 g     F .text	0000011c OS_EventTaskWait
0100eac4 g     F .text	000000d4 OS_TaskStatStkChk
01047c1c g     O .bss	00000190 _atexit0
01017a20 g     F .text	0000006c altera_avalon_mutex_lock
01014018 g     F .text	0000017c OSTaskDelReq
01004c28 g     F .text	000015c0 _dtoa_r
01007504 g     F .text	0000074c _malloc_r
01027e8c g     O .rwdata	00000004 alt_errno
0100d880 g     F .text	0000007c OSStart
0100c95c g     F .text	00000068 __env_unlock
010071a0 g     F .text	000000c4 _fwalk
0103bca8 g     O .bss	00002000 StartTask_Stack
01014528 g     F .text	00000224 OSTaskResume
010110cc g     F .text	00000108 OSMemQuery
01027ef0 g     O .rwdata	00000002 OSTaskStatEn
01027eca g     O .rwdata	00000002 OSMemMax
01012054 g     F .text	00000194 OSQPostFront
010090f0 g     F .text	00000110 putc
010020e0 g     F .text	0000006c __divsi3
01035c15 g     O .bss	00000003 OSRdyTbl
01027ea4 g     O .rwdata	00000002 OSDebugEn
01019cdc g     O .rodata	00000014 __thenan_df
010067cc g     F .text	00000138 _malloc_trim_r
01019c2c g       *ABS*	00000000 __CTOR_END__
01027ebc g     O .rwdata	00000002 OSFlagNodeSize
01027f04 g     O .rwdata	00000002 OSTmrCfgMax
01009b74 g     F .text	000000c8 strcmp
01011414 g     F .text	00000220 OSQCreate
01014194 g     F .text	000001c4 OSTaskNameGet
0103dca8 g     O .bss	00002000 ObjectPosTask_stk
01019c2c g       *ABS*	00000000 __flash_rodata_start
010121e8 g     F .text	00000240 OSQPostOpt
0100d9b4 g     F .text	0000024c OSTimeTick
01027eec g     O .rwdata	00000002 OSTaskMax
01019c2c g       *ABS*	00000000 __DTOR_LIST__
01012738 g     F .text	00000120 OSSemCreate
01027f10 g     O .rwdata	00000002 OSTmrWheelSize
01035b84 g     O .bss	00000004 delay
0100b2ac g     F .text	00000094 __nedf2
01027ee6 g     O .rwdata	00000002 OSTaskDelEn
0101a30c g     O .rwdata	00003003 test_ppm_1
01013048 g     F .text	0000013c OSSemQuery
01011634 g     F .text	0000030c OSQDel
01011d40 g     F .text	00000188 OSQPendAbort
01016838 g     F .text	00000040 alt_irq_init
0100c408 g     F .text	00000084 alt_release_fd
00102000 g       *ABS*	00000000 __alt_mem_shared_onchip
01019cf0 g     O .rodata	00000100 __clz_tab
010001e8 g     F .text	00000114 printAscii
01035b98 g     O .bss	00000004 _PathLocale
01015da4 g     F .text	00000238 OSTmrStop
01019630 g     F .text	00000020 atexit
01009da0 g     F .text	00000084 _write_r
0100d6f8 g     F .text	00000098 OSSchedLock
0100733c g     F .text	00000028 setlocale
01045978 g     O .bss	00000800 OSTmrTaskStk
0100f3bc g     F .text	00000148 OSFlagCreate
01035b88 g     O .bss	00000004 Task1TmrSem
01000844 g     F .text	00000160 CalcCoord
01027e60 g     O .rwdata	00000004 _impure_ptr
01035b8c g     O .bss	00000004 GrayedSem
01035bb0 g     O .bss	00000004 alt_argc
010183b8 g     F .text	00000070 _do_dtors
01027eb6 g     O .rwdata	00000002 OSEventMultiEn
0101541c g     F .text	000001f0 OSTmrCreate
0100f504 g     F .text	000002b4 OSFlagDel
01035c18 g     O .bss	00000004 OSEventFreeList
00080020 g       .exceptions	00000000 alt_irq_entry
01008168 g     F .text	0000008c __ulp
010098f4 g     F .text	0000004c __isinfd
0100fa68 g     F .text	00000650 OSFlagPend
01027f02 g     O .rwdata	00000002 OSTmrEn
010065ac g     F .text	00000024 __fp_unlock_all
0103fca8 g     O .bss	00002000 PosMaxTask_stk
01027e78 g     O .rwdata	00000008 alt_fs_list
01015790 g     F .text	00000178 OSTmrNameGet
0100e898 g     F .text	0000008c OS_StrCopy
01027ecc g     O .rwdata	00000002 OSMemNameSize
01019378 g     F .text	00000028 OSInitHookEnd
00080020 g       *ABS*	00000000 __ram_exceptions_start
01027ef8 g     O .rwdata	00000002 OSTCBPrioTblMax
01007290 g     F .text	0000001c localeconv
01027ef4 g     O .rwdata	00000002 OSTaskStatStkChkEn
010004c4 g     F .text	0000003c alarm_handler
01027ec8 g     O .rwdata	00000002 OSMemEn
01027ed2 g     O .rwdata	00000002 OSMutexEn
01027f30 g       *ABS*	00000000 _edata
01047dac g       *ABS*	00000000 _end
01035c1c g     O .bss	00000001 OSIntNesting
000801cc g       *ABS*	00000000 __ram_exceptions_end
010171e8 g     F .text	00000100 altera_avalon_jtag_uart_ioctl
01015120 g     F .text	0000021c OSTimeDlyResume
0100f908 g     F .text	00000160 OSFlagNameSet
0101474c g     F .text	00000208 OSTaskStkChk
01027ece g     O .rwdata	00000002 OSMemSize
01009a80 g     F .text	00000088 __swrite
01027e70 g     O .rwdata	00000004 __malloc_trim_threshold
01017de0 g     F .text	00000030 alt_get_performance_counter_base
01018e14 g     F .text	0000002c altera_nios2_qsys_irq_init
01035c20 g     O .bss	00000004 OSTCBCur
01019650 g     F .text	00000044 exit
01027ed0 g     O .rwdata	00000002 OSMemTblSize
010070cc g     F .text	000000d4 _fwalk_reent
010087c8 g     F .text	00000198 __mdiff
0100214c g     F .text	0000006c __modsi3
01027e5e g     O .rwdata	00000001 dSPAN
01035b64 g     O .bss	00000004 current_image
01800000 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
010064a4 g     F .text	00000010 __sfp_lock_release
0100d500 g     F .text	00000064 OSInit
01035c24 g     O .bss	00000004 OSTmrTime
01000000 g       *ABS*	00000000 __alt_mem_sdram
01014b8c g     F .text	00000150 OSTaskQuery
010125b4 g     F .text	000000b8 OS_QInit
0100e924 g     F .text	00000064 OS_StrLen
01010ea4 g     F .text	0000012c OSMemNameSet
01027eea g     O .rwdata	00000002 OSTaskProfileEn
01035c28 g     O .bss	00000004 OSTime
01035c2c g     O .bss	00000004 OSTmrSem
01046178 g     O .bss	00000800 OSTaskIdleStk
01019bf0 g     F .text	00000038 _exit
01009940 g     F .text	0000003c __isnand
01041ca8 g     O .bss	00002000 CalcCoordTask_stk
0100f7b8 g     F .text	00000150 OSFlagNameGet
0100b8f0 g     F .text	00000160 alt_alarm_start
0101533c g     F .text	00000070 OSTimeGet
0100b6e4 g     F .text	00000130 __muldi3
01047a1c g     O .bss	00000100 __mcount_fn_head
01007364 g     F .text	000001a0 __smakebuf_r
01000500 g     F .text	000001cc Grayscale
010028ac g     F .text	00000080 strlen
01019284 g     F .text	00000028 OSTaskSwHook
01018c10 g     F .text	00000198 open
01046978 g     O .bss	00000b40 OSEventTbl
0100b3d4 g     F .text	00000094 __gedf2
010474b8 g     O .bss	00000510 OSTCBTbl
01013184 g     F .text	00000110 OSSemSet
01000b40 g     F .text	00000074 CropTask
01001258 g     F .text	0000029c StartTask
010187b0 g     F .text	00000028 alt_icache_flush_all
010006cc g     F .text	00000178 GrayTask
01027f2c g     O .rwdata	00000004 alt_priority_mask
010011c8 g     F .text	00000090 ObjectPosTask
01012858 g     F .text	000002ac OSSemDel
01035c30 g     O .bss	00000004 OSFlagFreeList
01027eb0 g     O .rwdata	00000002 OSEventNameSize
01004860 g     F .text	00000030 __vfprintf_internal
01035c34 g     O .bss	00000001 OSStatRdy
010179f4 g     F .text	0000002c altera_avalon_mutex_close
010479c8 g     O .bss	00000054 OSTCBPrioTbl
0100c8a4 g     F .text	000000b8 __env_lock
01027ef6 g     O .rwdata	00000002 OSTaskSwHookEn
0100ad3c g     F .text	0000008c __subdf3
0100802c g     F .text	000000d0 __lo0bits
0100c1d0 g       .text	00000000 _mcount
01027e94 g     O .rwdata	00000008 alt_alarm_list
01027ebe g     O .rwdata	00000002 OSFlagWidth
01018348 g     F .text	00000070 _do_ctors
01000bb4 g     F .text	00000200 stencilmat
0100ba50 g     F .text	0000010c close
01035bc8 g     O .bss	00000004 alt_envsem
01035c38 g     O .bss	00000004 OSIdleCtrRun
0100dc00 g     F .text	0000002c OSVersion
01027f08 g     O .rwdata	00000002 OSTmrCfgWheelSize
0100be8c g     F .text	0000008c alt_load
01014cdc g     F .text	00000088 OS_TaskStkClr
010022b0 g     F .text	00000320 __pack_d
01027ee2 g     O .rwdata	00000002 OSTaskCreateEn
0100e244 g     F .text	00000074 OS_EventWaitListInit
0101a2fc g     O .rwdata	00000010 asciiChars
010193a0 g     F .text	00000028 OSTaskIdleHook
00000000  w      *UND*	00000000 free
010064b4 g     F .text	00000010 __sinit_lock_acquire
01008d60 g     F .text	00000138 __multadd
01014954 g     F .text	00000238 OSTaskSuspend
01007f7c g     F .text	00000034 _Bfree
0100e988 g     F .text	00000068 OS_TaskIdle
01027f0e g     O .rwdata	00000002 OSTmrTblSize
01012428 g     F .text	0000018c OSQQuery



Disassembly of section .entry:

00080000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80000:	00404034 	movhi	at,256
    ori r1, r1, %lo(_start)
   80004:	08406b14 	ori	at,at,428
    jmp r1
   80008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00080020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   80044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800ec0 	call	800ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000306 	br	80098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   8008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   80094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   80098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   8009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   800c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   800e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800e8:	ef80083a 	eret

000800ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800ec:	f811883a 	mov	r8,ra
   800f0:	100c1d00 	call	100c1d0 <_mcount>
   800f4:	403f883a 	mov	ra,r8
   800f8:	defff904 	addi	sp,sp,-28
   800fc:	dfc00615 	stw	ra,24(sp)
   80100:	df000515 	stw	fp,20(sp)
   80104:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   80108:	100d5640 	call	100d564 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   8010c:	0005313a 	rdctl	r2,ipending
   80110:	e0bffc15 	stw	r2,-16(fp)

  return active;
   80114:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   80118:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   8011c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   80120:	00800044 	movi	r2,1
   80124:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   80128:	e0ffff17 	ldw	r3,-4(fp)
   8012c:	e0bffe17 	ldw	r2,-8(fp)
   80130:	1884703a 	and	r2,r3,r2
   80134:	1005003a 	cmpeq	r2,r2,zero
   80138:	1000171e 	bne	r2,zero,80198 <alt_irq_handler+0xac>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   8013c:	e0bffd17 	ldw	r2,-12(fp)
   80140:	00c04134 	movhi	r3,260
   80144:	18dec704 	addi	r3,r3,31516
   80148:	100490fa 	slli	r2,r2,3
   8014c:	10c5883a 	add	r2,r2,r3
   80150:	11800017 	ldw	r6,0(r2)
   80154:	e0bffd17 	ldw	r2,-12(fp)
   80158:	00c04134 	movhi	r3,260
   8015c:	18dec704 	addi	r3,r3,31516
   80160:	100490fa 	slli	r2,r2,3
   80164:	10c5883a 	add	r2,r2,r3
   80168:	10800104 	addi	r2,r2,4
   8016c:	11000017 	ldw	r4,0(r2)
   80170:	e17ffd17 	ldw	r5,-12(fp)
   80174:	303ee83a 	callr	r6
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80178:	0005313a 	rdctl	r2,ipending
   8017c:	e0bffb15 	stw	r2,-20(fp)

  return active;
   80180:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   80184:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   80188:	e0bfff17 	ldw	r2,-4(fp)
   8018c:	1004c03a 	cmpne	r2,r2,zero
   80190:	103fe21e 	bne	r2,zero,8011c <alt_irq_handler+0x30>
   80194:	00000706 	br	801b4 <alt_irq_handler+0xc8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   80198:	e0bffe17 	ldw	r2,-8(fp)
   8019c:	1085883a 	add	r2,r2,r2
   801a0:	e0bffe15 	stw	r2,-8(fp)
      i++;
   801a4:	e0bffd17 	ldw	r2,-12(fp)
   801a8:	10800044 	addi	r2,r2,1
   801ac:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   801b0:	003fdd06 	br	80128 <alt_irq_handler+0x3c>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   801b4:	100d5ec0 	call	100d5ec <OSIntExit>
}
   801b8:	e037883a 	mov	sp,fp
   801bc:	dfc00117 	ldw	ra,4(sp)
   801c0:	df000017 	ldw	fp,0(sp)
   801c4:	dec00204 	addi	sp,sp,8
   801c8:	f800283a 	ret

Disassembly of section .text:

010001ac <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 10001ac:	06c06034 	movhi	sp,384
    ori sp, sp, %lo(__alt_stack_pointer)
 10001b0:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 10001b4:	068040b4 	movhi	gp,258
    ori gp, gp, %lo(_gp)
 10001b8:	d6bf9714 	ori	gp,gp,65116
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 10001bc:	008040f4 	movhi	r2,259
    ori r2, r2, %lo(__bss_start)
 10001c0:	1096d914 	ori	r2,r2,23396

    movhi r3, %hi(__bss_end)
 10001c4:	00c04134 	movhi	r3,260
    ori r3, r3, %lo(__bss_end)
 10001c8:	18df6b14 	ori	r3,r3,32172

    beq r2, r3, 1f
 10001cc:	10c00326 	beq	r2,r3,10001dc <_start+0x30>

0:
    stw zero, (r2)
 10001d0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 10001d4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 10001d8:	10fffd36 	bltu	r2,r3,10001d0 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 10001dc:	100be8c0 	call	100be8c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 10001e0:	100c0fc0 	call	100c0fc <alt_main>

010001e4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 10001e4:	003fff06 	br	10001e4 <alt_after_alt_main>

010001e8 <printAscii>:
 * @brief Prints out an image of gray values into ASCII art format
 * @param image pointer to an image
 * @param x_dim image X dimention
 * @param y_dim image Y dimention
 */
void printAscii(unsigned int* image, int x_dim, int y_dim) {
 10001e8:	f811883a 	mov	r8,ra
 10001ec:	100c1d00 	call	100c1d0 <_mcount>
 10001f0:	403f883a 	mov	ra,r8
 10001f4:	defff804 	addi	sp,sp,-32
 10001f8:	dfc00715 	stw	ra,28(sp)
 10001fc:	df000615 	stw	fp,24(sp)
 1000200:	df000604 	addi	fp,sp,24
 1000204:	e13ffd15 	stw	r4,-12(fp)
 1000208:	e17ffe15 	stw	r5,-8(fp)
 100020c:	e1bfff15 	stw	r6,-4(fp)
  int k = 0;
 1000210:	e03ffc15 	stw	zero,-16(fp)
  int l = 0;
 1000214:	e03ffb15 	stw	zero,-20(fp)
  for(k = 0; k < y_dim; k++) {
 1000218:	e03ffc15 	stw	zero,-16(fp)
 100021c:	00002f06 	br	10002dc <printAscii+0xf4>
    for(l = 0; l < x_dim; l++) {
 1000220:	e03ffb15 	stw	zero,-20(fp)
 1000224:	00002506 	br	10002bc <printAscii+0xd4>
      unsigned char pixel = image[k * y_dim + l];
 1000228:	e13ffc17 	ldw	r4,-16(fp)
 100022c:	e17fff17 	ldw	r5,-4(fp)
 1000230:	10021e00 	call	10021e0 <__mulsi3>
 1000234:	1007883a 	mov	r3,r2
 1000238:	e0bffb17 	ldw	r2,-20(fp)
 100023c:	1885883a 	add	r2,r3,r2
 1000240:	1085883a 	add	r2,r2,r2
 1000244:	1085883a 	add	r2,r2,r2
 1000248:	1007883a 	mov	r3,r2
 100024c:	e0bffd17 	ldw	r2,-12(fp)
 1000250:	1885883a 	add	r2,r3,r2
 1000254:	10800017 	ldw	r2,0(r2)
 1000258:	e0bffa45 	stb	r2,-23(fp)
      // Clamp pixel value to 255
      unsigned char c_pixel = pixel > 255 ? 255 : pixel;
 100025c:	e0bffa43 	ldbu	r2,-23(fp)
 1000260:	e0bffa05 	stb	r2,-24(fp)
      // Print normalized value as ASCII character
      printf("%4c", asciiChars[((NR_ASCII_CHARS - 1) * c_pixel) / 255]);
 1000264:	d0a00003 	ldbu	r2,-32768(gp)
 1000268:	10803fcc 	andi	r2,r2,255
 100026c:	113fffc4 	addi	r4,r2,-1
 1000270:	e17ffa03 	ldbu	r5,-24(fp)
 1000274:	10021e00 	call	10021e0 <__mulsi3>
 1000278:	1009883a 	mov	r4,r2
 100027c:	01403fc4 	movi	r5,255
 1000280:	10020e00 	call	10020e0 <__divsi3>
 1000284:	1007883a 	mov	r3,r2
 1000288:	008040b4 	movhi	r2,258
 100028c:	10a8bf04 	addi	r2,r2,-23812
 1000290:	10c5883a 	add	r2,r2,r3
 1000294:	10800003 	ldbu	r2,0(r2)
 1000298:	11403fcc 	andi	r5,r2,255
 100029c:	2940201c 	xori	r5,r5,128
 10002a0:	297fe004 	addi	r5,r5,-128
 10002a4:	010040b4 	movhi	r4,258
 10002a8:	21270b04 	addi	r4,r4,-25556
 10002ac:	10027140 	call	1002714 <printf>
 */
void printAscii(unsigned int* image, int x_dim, int y_dim) {
  int k = 0;
  int l = 0;
  for(k = 0; k < y_dim; k++) {
    for(l = 0; l < x_dim; l++) {
 10002b0:	e0bffb17 	ldw	r2,-20(fp)
 10002b4:	10800044 	addi	r2,r2,1
 10002b8:	e0bffb15 	stw	r2,-20(fp)
 10002bc:	e0fffb17 	ldw	r3,-20(fp)
 10002c0:	e0bffe17 	ldw	r2,-8(fp)
 10002c4:	18bfd816 	blt	r3,r2,1000228 <printAscii+0x40>
      // Clamp pixel value to 255
      unsigned char c_pixel = pixel > 255 ? 255 : pixel;
      // Print normalized value as ASCII character
      printf("%4c", asciiChars[((NR_ASCII_CHARS - 1) * c_pixel) / 255]);
    }
    printf("\n");
 10002c8:	01000284 	movi	r4,10
 10002cc:	10027a40 	call	10027a4 <putchar>
 * @param y_dim image Y dimention
 */
void printAscii(unsigned int* image, int x_dim, int y_dim) {
  int k = 0;
  int l = 0;
  for(k = 0; k < y_dim; k++) {
 10002d0:	e0bffc17 	ldw	r2,-16(fp)
 10002d4:	10800044 	addi	r2,r2,1
 10002d8:	e0bffc15 	stw	r2,-16(fp)
 10002dc:	e0fffc17 	ldw	r3,-16(fp)
 10002e0:	e0bfff17 	ldw	r2,-4(fp)
 10002e4:	18bfce16 	blt	r3,r2,1000220 <printAscii+0x38>
      // Print normalized value as ASCII character
      printf("%4c", asciiChars[((NR_ASCII_CHARS - 1) * c_pixel) / 255]);
    }
    printf("\n");
  }
}
 10002e8:	e037883a 	mov	sp,fp
 10002ec:	dfc00117 	ldw	ra,4(sp)
 10002f0:	df000017 	ldw	fp,0(sp)
 10002f4:	dec00204 	addi	sp,sp,8
 10002f8:	f800283a 	ret

010002fc <printAsciiHidden>:
 * @param size radius of hidden patch
 * @param gray_value gray value of the hiding patch
 */
void printAsciiHidden(unsigned int* image, int x_dim, int y_dim,
		      int x_pos, int y_pos,
		      int size, unsigned int gray_value) {
 10002fc:	f811883a 	mov	r8,ra
 1000300:	100c1d00 	call	100c1d0 <_mcount>
 1000304:	403f883a 	mov	ra,r8
 1000308:	defff704 	addi	sp,sp,-36
 100030c:	dfc00815 	stw	ra,32(sp)
 1000310:	df000715 	stw	fp,28(sp)
 1000314:	df000704 	addi	fp,sp,28
 1000318:	e13ffc15 	stw	r4,-16(fp)
 100031c:	e17ffd15 	stw	r5,-12(fp)
 1000320:	e1bffe15 	stw	r6,-8(fp)
 1000324:	e1ffff15 	stw	r7,-4(fp)
  int k = 0;
 1000328:	e03ffb15 	stw	zero,-20(fp)
  int l = 0;
 100032c:	e03ffa15 	stw	zero,-24(fp)
  for(k = 0; k < y_dim; k++) {
 1000330:	e03ffb15 	stw	zero,-20(fp)
 1000334:	00005b06 	br	10004a4 <printAsciiHidden+0x1a8>
    for(l = 0; l < x_dim; l++) {	
 1000338:	e03ffa15 	stw	zero,-24(fp)
 100033c:	00005106 	br	1000484 <printAsciiHidden+0x188>
      if ((k >= y_pos - size) && (k < y_pos + size) && (l >= x_pos - size) && (l < x_pos + size)) {
 1000340:	e0c00217 	ldw	r3,8(fp)
 1000344:	e0800317 	ldw	r2,12(fp)
 1000348:	1887c83a 	sub	r3,r3,r2
 100034c:	e0bffb17 	ldw	r2,-20(fp)
 1000350:	10c02716 	blt	r2,r3,10003f0 <printAsciiHidden+0xf4>
 1000354:	e0c00217 	ldw	r3,8(fp)
 1000358:	e0800317 	ldw	r2,12(fp)
 100035c:	1887883a 	add	r3,r3,r2
 1000360:	e0bffb17 	ldw	r2,-20(fp)
 1000364:	10c0220e 	bge	r2,r3,10003f0 <printAsciiHidden+0xf4>
 1000368:	e0ffff17 	ldw	r3,-4(fp)
 100036c:	e0800317 	ldw	r2,12(fp)
 1000370:	1887c83a 	sub	r3,r3,r2
 1000374:	e0bffa17 	ldw	r2,-24(fp)
 1000378:	10c01d16 	blt	r2,r3,10003f0 <printAsciiHidden+0xf4>
 100037c:	e0ffff17 	ldw	r3,-4(fp)
 1000380:	e0800317 	ldw	r2,12(fp)
 1000384:	1887883a 	add	r3,r3,r2
 1000388:	e0bffa17 	ldw	r2,-24(fp)
 100038c:	10c0180e 	bge	r2,r3,10003f0 <printAsciiHidden+0xf4>
	unsigned char pixel = gray_value;
 1000390:	e0800417 	ldw	r2,16(fp)
 1000394:	e0bff9c5 	stb	r2,-25(fp)
	unsigned char c_pixel = pixel > 255 ? 255 : pixel;
 1000398:	e0bff9c3 	ldbu	r2,-25(fp)
 100039c:	e0bff985 	stb	r2,-26(fp)
	printf("%4c", asciiChars[((NR_ASCII_CHARS - 1) * c_pixel) / 255]);
 10003a0:	d0a00003 	ldbu	r2,-32768(gp)
 10003a4:	10803fcc 	andi	r2,r2,255
 10003a8:	113fffc4 	addi	r4,r2,-1
 10003ac:	e17ff983 	ldbu	r5,-26(fp)
 10003b0:	10021e00 	call	10021e0 <__mulsi3>
 10003b4:	1009883a 	mov	r4,r2
 10003b8:	01403fc4 	movi	r5,255
 10003bc:	10020e00 	call	10020e0 <__divsi3>
 10003c0:	1007883a 	mov	r3,r2
 10003c4:	008040b4 	movhi	r2,258
 10003c8:	10a8bf04 	addi	r2,r2,-23812
 10003cc:	10c5883a 	add	r2,r2,r3
 10003d0:	10800003 	ldbu	r2,0(r2)
 10003d4:	11403fcc 	andi	r5,r2,255
 10003d8:	2940201c 	xori	r5,r5,128
 10003dc:	297fe004 	addi	r5,r5,-128
 10003e0:	010040b4 	movhi	r4,258
 10003e4:	21270b04 	addi	r4,r4,-25556
 10003e8:	10027140 	call	1002714 <printf>
		      int size, unsigned int gray_value) {
  int k = 0;
  int l = 0;
  for(k = 0; k < y_dim; k++) {
    for(l = 0; l < x_dim; l++) {	
      if ((k >= y_pos - size) && (k < y_pos + size) && (l >= x_pos - size) && (l < x_pos + size)) {
 10003ec:	00002206 	br	1000478 <printAsciiHidden+0x17c>
	unsigned char pixel = gray_value;
	unsigned char c_pixel = pixel > 255 ? 255 : pixel;
	printf("%4c", asciiChars[((NR_ASCII_CHARS - 1) * c_pixel) / 255]);
      } else {
	unsigned char pixel = image[k * y_dim + l];
 10003f0:	e13ffb17 	ldw	r4,-20(fp)
 10003f4:	e17ffe17 	ldw	r5,-8(fp)
 10003f8:	10021e00 	call	10021e0 <__mulsi3>
 10003fc:	1007883a 	mov	r3,r2
 1000400:	e0bffa17 	ldw	r2,-24(fp)
 1000404:	1885883a 	add	r2,r3,r2
 1000408:	1085883a 	add	r2,r2,r2
 100040c:	1085883a 	add	r2,r2,r2
 1000410:	1007883a 	mov	r3,r2
 1000414:	e0bffc17 	ldw	r2,-16(fp)
 1000418:	1885883a 	add	r2,r3,r2
 100041c:	10800017 	ldw	r2,0(r2)
 1000420:	e0bff945 	stb	r2,-27(fp)
	unsigned char c_pixel = pixel > 255 ? 255 : pixel;
 1000424:	e0bff943 	ldbu	r2,-27(fp)
 1000428:	e0bff905 	stb	r2,-28(fp)
	printf("%4c", asciiChars[((NR_ASCII_CHARS - 1) * c_pixel) / 255]);	  
 100042c:	d0a00003 	ldbu	r2,-32768(gp)
 1000430:	10803fcc 	andi	r2,r2,255
 1000434:	113fffc4 	addi	r4,r2,-1
 1000438:	e17ff903 	ldbu	r5,-28(fp)
 100043c:	10021e00 	call	10021e0 <__mulsi3>
 1000440:	1009883a 	mov	r4,r2
 1000444:	01403fc4 	movi	r5,255
 1000448:	10020e00 	call	10020e0 <__divsi3>
 100044c:	1007883a 	mov	r3,r2
 1000450:	008040b4 	movhi	r2,258
 1000454:	10a8bf04 	addi	r2,r2,-23812
 1000458:	10c5883a 	add	r2,r2,r3
 100045c:	10800003 	ldbu	r2,0(r2)
 1000460:	11403fcc 	andi	r5,r2,255
 1000464:	2940201c 	xori	r5,r5,128
 1000468:	297fe004 	addi	r5,r5,-128
 100046c:	010040b4 	movhi	r4,258
 1000470:	21270b04 	addi	r4,r4,-25556
 1000474:	10027140 	call	1002714 <printf>
		      int x_pos, int y_pos,
		      int size, unsigned int gray_value) {
  int k = 0;
  int l = 0;
  for(k = 0; k < y_dim; k++) {
    for(l = 0; l < x_dim; l++) {	
 1000478:	e0bffa17 	ldw	r2,-24(fp)
 100047c:	10800044 	addi	r2,r2,1
 1000480:	e0bffa15 	stw	r2,-24(fp)
 1000484:	e0fffa17 	ldw	r3,-24(fp)
 1000488:	e0bffd17 	ldw	r2,-12(fp)
 100048c:	18bfac16 	blt	r3,r2,1000340 <printAsciiHidden+0x44>
	unsigned char pixel = image[k * y_dim + l];
	unsigned char c_pixel = pixel > 255 ? 255 : pixel;
	printf("%4c", asciiChars[((NR_ASCII_CHARS - 1) * c_pixel) / 255]);	  
      }
    }
    printf("\n");
 1000490:	01000284 	movi	r4,10
 1000494:	10027a40 	call	10027a4 <putchar>
void printAsciiHidden(unsigned int* image, int x_dim, int y_dim,
		      int x_pos, int y_pos,
		      int size, unsigned int gray_value) {
  int k = 0;
  int l = 0;
  for(k = 0; k < y_dim; k++) {
 1000498:	e0bffb17 	ldw	r2,-20(fp)
 100049c:	10800044 	addi	r2,r2,1
 10004a0:	e0bffb15 	stw	r2,-20(fp)
 10004a4:	e0fffb17 	ldw	r3,-20(fp)
 10004a8:	e0bffe17 	ldw	r2,-8(fp)
 10004ac:	18bfa216 	blt	r3,r2,1000338 <printAsciiHidden+0x3c>
	printf("%4c", asciiChars[((NR_ASCII_CHARS - 1) * c_pixel) / 255]);	  
      }
    }
    printf("\n");
  }
}
 10004b0:	e037883a 	mov	sp,fp
 10004b4:	dfc00117 	ldw	ra,4(sp)
 10004b8:	df000017 	ldw	fp,0(sp)
 10004bc:	dec00204 	addi	sp,sp,8
 10004c0:	f800283a 	ret

010004c4 <alarm_handler>:

/*
 * ISR for HW Timer
 */
alt_u32 alarm_handler(void* context)
{
 10004c4:	f811883a 	mov	r8,ra
 10004c8:	100c1d00 	call	100c1d0 <_mcount>
 10004cc:	403f883a 	mov	ra,r8
 10004d0:	defffd04 	addi	sp,sp,-12
 10004d4:	dfc00215 	stw	ra,8(sp)
 10004d8:	df000115 	stw	fp,4(sp)
 10004dc:	df000104 	addi	fp,sp,4
 10004e0:	e13fff15 	stw	r4,-4(fp)
  OSTmrSignal(); /* Signals a 'tick' to the SW timers */
 10004e4:	1015fdc0 	call	1015fdc <OSTmrSignal>

  return delay;
 10004e8:	d0974a17 	ldw	r2,23848(gp)
}
 10004ec:	e037883a 	mov	sp,fp
 10004f0:	dfc00117 	ldw	ra,4(sp)
 10004f4:	df000017 	ldw	fp,0(sp)
 10004f8:	dec00204 	addi	sp,sp,8
 10004fc:	f800283a 	ret

01000500 <Grayscale>:
Every task at the beginning block itself thanks to the utilization of semaphores
and once that the function has finished they increase the value of the semaphore
of the next task.
*/

void Grayscale(unsigned char* img){
 1000500:	f811883a 	mov	r8,ra
 1000504:	100c1d00 	call	100c1d0 <_mcount>
 1000508:	403f883a 	mov	ra,r8
 100050c:	defff704 	addi	sp,sp,-36
 1000510:	dfc00815 	stw	ra,32(sp)
 1000514:	df000715 	stw	fp,28(sp)
 1000518:	df000704 	addi	fp,sp,28
 100051c:	e13fff15 	stw	r4,-4(fp)
	int maxX=img[0];
 1000520:	e0bfff17 	ldw	r2,-4(fp)
 1000524:	10800003 	ldbu	r2,0(r2)
 1000528:	10803fcc 	andi	r2,r2,255
 100052c:	e0bffe15 	stw	r2,-8(fp)
	int maxY=img[1];
 1000530:	e0bfff17 	ldw	r2,-4(fp)
 1000534:	10800044 	addi	r2,r2,1
 1000538:	10800003 	ldbu	r2,0(r2)
 100053c:	10803fcc 	andi	r2,r2,255
 1000540:	e0bffd15 	stw	r2,-12(fp)
	int total= maxY*maxX*3;
 1000544:	e13ffd17 	ldw	r4,-12(fp)
 1000548:	e17ffe17 	ldw	r5,-8(fp)
 100054c:	10021e00 	call	10021e0 <__mulsi3>
 1000550:	1007883a 	mov	r3,r2
 1000554:	1805883a 	mov	r2,r3
 1000558:	1085883a 	add	r2,r2,r2
 100055c:	10c5883a 	add	r2,r2,r3
 1000560:	e0bffc15 	stw	r2,-16(fp)
	int moving_index=3;
 1000564:	008000c4 	movi	r2,3
 1000568:	e0bffb15 	stw	r2,-20(fp)
	int basic_index=0;
 100056c:	e03ffa15 	stw	zero,-24(fp)
	unsigned char* shared = (unsigned char)SHARED_ONCHIP_BASE;
 1000570:	e03ff915 	stw	zero,-28(fp)
	*shared++ = img[0];
 1000574:	e0bfff17 	ldw	r2,-4(fp)
 1000578:	10c00003 	ldbu	r3,0(r2)
 100057c:	e0bff917 	ldw	r2,-28(fp)
 1000580:	10c00005 	stb	r3,0(r2)
 1000584:	e0bff917 	ldw	r2,-28(fp)
 1000588:	10800044 	addi	r2,r2,1
 100058c:	e0bff915 	stw	r2,-28(fp)
	*shared++ = img[1];
 1000590:	e0bfff17 	ldw	r2,-4(fp)
 1000594:	10800044 	addi	r2,r2,1
 1000598:	10c00003 	ldbu	r3,0(r2)
 100059c:	e0bff917 	ldw	r2,-28(fp)
 10005a0:	10c00005 	stb	r3,0(r2)
 10005a4:	e0bff917 	ldw	r2,-28(fp)
 10005a8:	10800044 	addi	r2,r2,1
 10005ac:	e0bff915 	stw	r2,-28(fp)
	*shared++ = img[2];
 10005b0:	e0bfff17 	ldw	r2,-4(fp)
 10005b4:	10800084 	addi	r2,r2,2
 10005b8:	10c00003 	ldbu	r3,0(r2)
 10005bc:	e0bff917 	ldw	r2,-28(fp)
 10005c0:	10c00005 	stb	r3,0(r2)
 10005c4:	e0bff917 	ldw	r2,-28(fp)
 10005c8:	10800044 	addi	r2,r2,1
 10005cc:	e0bff915 	stw	r2,-28(fp)

	while(moving_index<total){
 10005d0:	00003606 	br	10006ac <Grayscale+0x1ac>

		shared[basic_index]=(unsigned char)(((img[moving_index])>>2)+((img[moving_index])>>4)+((img[moving_index+1])>>1)+((img[moving_index+1])>>4)+((img[moving_index+2])>>3));
 10005d4:	e0bffa17 	ldw	r2,-24(fp)
 10005d8:	1007883a 	mov	r3,r2
 10005dc:	e0bff917 	ldw	r2,-28(fp)
 10005e0:	188b883a 	add	r5,r3,r2
 10005e4:	e0bffb17 	ldw	r2,-20(fp)
 10005e8:	1007883a 	mov	r3,r2
 10005ec:	e0bfff17 	ldw	r2,-4(fp)
 10005f0:	1885883a 	add	r2,r3,r2
 10005f4:	10800003 	ldbu	r2,0(r2)
 10005f8:	10803fcc 	andi	r2,r2,255
 10005fc:	1004d0ba 	srli	r2,r2,2
 1000600:	1009883a 	mov	r4,r2
 1000604:	e0bffb17 	ldw	r2,-20(fp)
 1000608:	1007883a 	mov	r3,r2
 100060c:	e0bfff17 	ldw	r2,-4(fp)
 1000610:	1885883a 	add	r2,r3,r2
 1000614:	10800003 	ldbu	r2,0(r2)
 1000618:	10803fcc 	andi	r2,r2,255
 100061c:	1004d13a 	srli	r2,r2,4
 1000620:	2085883a 	add	r2,r4,r2
 1000624:	1009883a 	mov	r4,r2
 1000628:	e0fffb17 	ldw	r3,-20(fp)
 100062c:	e0bfff17 	ldw	r2,-4(fp)
 1000630:	1885883a 	add	r2,r3,r2
 1000634:	10800044 	addi	r2,r2,1
 1000638:	10800003 	ldbu	r2,0(r2)
 100063c:	10803fcc 	andi	r2,r2,255
 1000640:	1004d07a 	srli	r2,r2,1
 1000644:	2085883a 	add	r2,r4,r2
 1000648:	1009883a 	mov	r4,r2
 100064c:	e0fffb17 	ldw	r3,-20(fp)
 1000650:	e0bfff17 	ldw	r2,-4(fp)
 1000654:	1885883a 	add	r2,r3,r2
 1000658:	10800044 	addi	r2,r2,1
 100065c:	10800003 	ldbu	r2,0(r2)
 1000660:	10803fcc 	andi	r2,r2,255
 1000664:	1004d13a 	srli	r2,r2,4
 1000668:	2085883a 	add	r2,r4,r2
 100066c:	1009883a 	mov	r4,r2
 1000670:	e0fffb17 	ldw	r3,-20(fp)
 1000674:	e0bfff17 	ldw	r2,-4(fp)
 1000678:	1885883a 	add	r2,r3,r2
 100067c:	10800084 	addi	r2,r2,2
 1000680:	10800003 	ldbu	r2,0(r2)
 1000684:	10803fcc 	andi	r2,r2,255
 1000688:	1004d0fa 	srli	r2,r2,3
 100068c:	2085883a 	add	r2,r4,r2
 1000690:	28800005 	stb	r2,0(r5)
		basic_index++;
 1000694:	e0bffa17 	ldw	r2,-24(fp)
 1000698:	10800044 	addi	r2,r2,1
 100069c:	e0bffa15 	stw	r2,-24(fp)
		moving_index+=3;
 10006a0:	e0bffb17 	ldw	r2,-20(fp)
 10006a4:	108000c4 	addi	r2,r2,3
 10006a8:	e0bffb15 	stw	r2,-20(fp)
	unsigned char* shared = (unsigned char)SHARED_ONCHIP_BASE;
	*shared++ = img[0];
	*shared++ = img[1];
	*shared++ = img[2];

	while(moving_index<total){
 10006ac:	e0fffb17 	ldw	r3,-20(fp)
 10006b0:	e0bffc17 	ldw	r2,-16(fp)
 10006b4:	18bfc716 	blt	r3,r2,10005d4 <Grayscale+0xd4>
		moving_index+=3;

	}

	if(DEBUG) {printf("\n INPUT \n");printAscii(*shared, maxX,maxY); OSTimeDly(3000);}
}
 10006b8:	e037883a 	mov	sp,fp
 10006bc:	dfc00117 	ldw	ra,4(sp)
 10006c0:	df000017 	ldw	fp,0(sp)
 10006c4:	dec00204 	addi	sp,sp,8
 10006c8:	f800283a 	ret

010006cc <GrayTask>:


void GrayTask(void* pdata){
 10006cc:	f811883a 	mov	r8,ra
 10006d0:	100c1d00 	call	100c1d0 <_mcount>
 10006d4:	403f883a 	mov	ra,r8
 10006d8:	defffa04 	addi	sp,sp,-24
 10006dc:	dfc00515 	stw	ra,20(sp)
 10006e0:	df000415 	stw	fp,16(sp)
 10006e4:	dc400315 	stw	r17,12(sp)
 10006e8:	dc000215 	stw	r16,8(sp)
 10006ec:	df000204 	addi	fp,sp,8
 10006f0:	e13fff15 	stw	r4,-4(fp)

		PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
 10006f4:	00c00434 	movhi	r3,16
 10006f8:	18d40004 	addi	r3,r3,20480
 10006fc:	00800044 	movi	r2,1
 1000700:	18800035 	stwio	r2,0(r3)
		PERF_START_MEASURING (PERFORMANCE_COUNTER_0_BASE);
 1000704:	00800434 	movhi	r2,16
 1000708:	10940104 	addi	r2,r2,20484
 100070c:	10000035 	stwio	zero,0(r2)
		PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, SECTION_1);
 1000710:	00800434 	movhi	r2,16
 1000714:	10940504 	addi	r2,r2,20500
 1000718:	10000035 	stwio	zero,0(r2)

		if(PERFORMANCE){
			while(counter++<100){
 100071c:	00001406 	br	1000770 <GrayTask+0xa4>
					if(counter==0)PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, SECTION_2);
 1000720:	d0974317 	ldw	r2,23820(gp)
 1000724:	1004c03a 	cmpne	r2,r2,zero
 1000728:	1000031e 	bne	r2,zero,1000738 <GrayTask+0x6c>
 100072c:	00800434 	movhi	r2,16
 1000730:	10940904 	addi	r2,r2,20516
 1000734:	10000035 	stwio	zero,0(r2)
					Grayscale(image_sequence[current_image]);
 1000738:	d0974217 	ldw	r2,23816(gp)
 100073c:	00c040b4 	movhi	r3,258
 1000740:	18d8c604 	addi	r3,r3,25368
 1000744:	1085883a 	add	r2,r2,r2
 1000748:	1085883a 	add	r2,r2,r2
 100074c:	10c5883a 	add	r2,r2,r3
 1000750:	11000017 	ldw	r4,0(r2)
 1000754:	10005000 	call	1000500 <Grayscale>
					OSSemPost(CalcCoordSem);
 1000758:	d1174517 	ldw	r4,23828(gp)
 100075c:	1012f140 	call	1012f14 <OSSemPost>
					OSSemPend(GrayedSem,0,&err);
 1000760:	d1174c17 	ldw	r4,23856(gp)
 1000764:	000b883a 	mov	r5,zero
 1000768:	d1974904 	addi	r6,gp,23844
 100076c:	1012b040 	call	1012b04 <OSSemPend>
		PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
		PERF_START_MEASURING (PERFORMANCE_COUNTER_0_BASE);
		PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, SECTION_1);

		if(PERFORMANCE){
			while(counter++<100){
 1000770:	d0d74317 	ldw	r3,23820(gp)
 1000774:	18801910 	cmplti	r2,r3,100
 1000778:	1009883a 	mov	r4,r2
 100077c:	18800044 	addi	r2,r3,1
 1000780:	d0974315 	stw	r2,23820(gp)
 1000784:	20803fcc 	andi	r2,r4,255
 1000788:	1004c03a 	cmpne	r2,r2,zero
 100078c:	103fe41e 	bne	r2,zero,1000720 <GrayTask+0x54>
					if(counter==0)PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, SECTION_2);
					Grayscale(image_sequence[current_image]);
					OSSemPost(CalcCoordSem);
					OSSemPend(GrayedSem,0,&err);
				}
			PERF_END(PERFORMANCE_COUNTER_0_BASE, SECTION_1);
 1000790:	00800434 	movhi	r2,16
 1000794:	10940404 	addi	r2,r2,20496
 1000798:	10000035 	stwio	zero,0(r2)

			/* Print report */
			perf_print_formatted_report
 100079c:	008040b4 	movhi	r2,258
 10007a0:	10a70f04 	addi	r2,r2,-25540
 10007a4:	d8800015 	stw	r2,0(sp)
 10007a8:	01000434 	movhi	r4,16
 10007ac:	21140004 	addi	r4,r4,20480
 10007b0:	0140bef4 	movhi	r5,763
 10007b4:	297c2004 	addi	r5,r5,-3968
 10007b8:	01800084 	movi	r6,2
 10007bc:	01c040b4 	movhi	r7,258
 10007c0:	39e70c04 	addi	r7,r7,-25552
 10007c4:	1017f540 	call	1017f54 <perf_print_formatted_report>
			ALT_CPU_FREQ,        // defined in "system.h"
			2,                   // How many sections to print
			"Total time", "Time per iteration"        // Display-name of section(s).
			);

			printf("\nThroughtput=%d img/s", counter/perf_get_section_time(PERFORMANCE_COUNTER_0_BASE, SECTION_1) );
 10007c8:	d0974317 	ldw	r2,23820(gp)
 10007cc:	1007d7fa 	srai	r3,r2,31
 10007d0:	1021883a 	mov	r16,r2
 10007d4:	1823883a 	mov	r17,r3
 10007d8:	01000434 	movhi	r4,16
 10007dc:	21140004 	addi	r4,r4,20480
 10007e0:	01400044 	movi	r5,1
 10007e4:	1017c780 	call	1017c78 <perf_get_section_time>
 10007e8:	100f883a 	mov	r7,r2
 10007ec:	1811883a 	mov	r8,r3
 10007f0:	8009883a 	mov	r4,r16
 10007f4:	880b883a 	mov	r5,r17
 10007f8:	380d883a 	mov	r6,r7
 10007fc:	400f883a 	mov	r7,r8
 1000800:	10015dc0 	call	10015dc <__udivdi3>
 1000804:	1009883a 	mov	r4,r2
 1000808:	180b883a 	mov	r5,r3
 100080c:	2005883a 	mov	r2,r4
 1000810:	2807883a 	mov	r3,r5
 1000814:	010040b4 	movhi	r4,258
 1000818:	21271404 	addi	r4,r4,-25520
 100081c:	100b883a 	mov	r5,r2
 1000820:	180d883a 	mov	r6,r3
 1000824:	10027140 	call	1002714 <printf>
					Grayscale(image_sequence[current_image]);
					OSSemPost(CalcCoordSem);
					OSSemPend(GrayedSem,0,&err);
				}
		}
}
 1000828:	e037883a 	mov	sp,fp
 100082c:	dfc00317 	ldw	ra,12(sp)
 1000830:	df000217 	ldw	fp,8(sp)
 1000834:	dc400117 	ldw	r17,4(sp)
 1000838:	dc000017 	ldw	r16,0(sp)
 100083c:	dec00404 	addi	sp,sp,16
 1000840:	f800283a 	ret

01000844 <CalcCoord>:


void CalcCoord(){
 1000844:	f811883a 	mov	r8,ra
 1000848:	100c1d00 	call	100c1d0 <_mcount>
 100084c:	403f883a 	mov	ra,r8
 1000850:	defff804 	addi	sp,sp,-32
 1000854:	df000715 	stw	fp,28(sp)
 1000858:	df000704 	addi	fp,sp,28

	unsigned char* shared = (unsigned char)SHARED_ONCHIP_BASE;
 100085c:	e03ffd15 	stw	zero,-12(fp)
	int imgW=(int)shared[0];	  	//pic size
 1000860:	e0bffd17 	ldw	r2,-12(fp)
 1000864:	10800003 	ldbu	r2,0(r2)
 1000868:	10803fcc 	andi	r2,r2,255
 100086c:	e0bffc15 	stw	r2,-16(fp)
	int imgH=(int)shared[1];
 1000870:	e0bffd17 	ldw	r2,-12(fp)
 1000874:	10800044 	addi	r2,r2,1
 1000878:	10800003 	ldbu	r2,0(r2)
 100087c:	10803fcc 	andi	r2,r2,255
 1000880:	e0bffb15 	stw	r2,-20(fp)
	int Globcoords[2];
	int coordX= shared[FinalResultLocation];
 1000884:	e0bffd17 	ldw	r2,-12(fp)
 1000888:	108400c4 	addi	r2,r2,4099
 100088c:	10800003 	ldbu	r2,0(r2)
 1000890:	10803fcc 	andi	r2,r2,255
 1000894:	e0bffa15 	stw	r2,-24(fp)
	int coordY=shared[FinalResultLocation+1];
 1000898:	e0bffd17 	ldw	r2,-12(fp)
 100089c:	10840104 	addi	r2,r2,4100
 10008a0:	10800003 	ldbu	r2,0(r2)
 10008a4:	10803fcc 	andi	r2,r2,255
 10008a8:	e0bff915 	stw	r2,-28(fp)
	//equation used by the program below
	//printf("imgW=%d, imgH=%d, xvalue=%d, yvalue=%d\n",imgW,imgH,coordX,coordY);
	//OSTimeDly(2000);
	if(coordX <= dSPAN ){
 10008ac:	d0a00083 	ldbu	r2,-32766(gp)
 10008b0:	10c03fcc 	andi	r3,r2,255
 10008b4:	e0bffa17 	ldw	r2,-24(fp)
 10008b8:	18800216 	blt	r3,r2,10008c4 <CalcCoord+0x80>
		Globcoords[0] = 0;
 10008bc:	e03ffe15 	stw	zero,-8(fp)
 10008c0:	00001306 	br	1000910 <CalcCoord+0xcc>
	}
	else if ( coordX > imgW-dSPAN){
 10008c4:	d0a00083 	ldbu	r2,-32766(gp)
 10008c8:	10c03fcc 	andi	r3,r2,255
 10008cc:	e0bffc17 	ldw	r2,-16(fp)
 10008d0:	10c7c83a 	sub	r3,r2,r3
 10008d4:	e0bffa17 	ldw	r2,-24(fp)
 10008d8:	1880070e 	bge	r3,r2,10008f8 <CalcCoord+0xb4>
			Globcoords[0] =(imgW-cropSIZE-1);
 10008dc:	d0a000c3 	ldbu	r2,-32765(gp)
 10008e0:	10c03fcc 	andi	r3,r2,255
 10008e4:	e0bffc17 	ldw	r2,-16(fp)
 10008e8:	10c5c83a 	sub	r2,r2,r3
 10008ec:	10bfffc4 	addi	r2,r2,-1
 10008f0:	e0bffe15 	stw	r2,-8(fp)
 10008f4:	00000606 	br	1000910 <CalcCoord+0xcc>
		}
	else Globcoords[0] =(coordX-dSPAN-1);
 10008f8:	d0a00083 	ldbu	r2,-32766(gp)
 10008fc:	10c03fcc 	andi	r3,r2,255
 1000900:	e0bffa17 	ldw	r2,-24(fp)
 1000904:	10c5c83a 	sub	r2,r2,r3
 1000908:	10bfffc4 	addi	r2,r2,-1
 100090c:	e0bffe15 	stw	r2,-8(fp)



	if( coordY <= dSPAN ){
 1000910:	d0a00083 	ldbu	r2,-32766(gp)
 1000914:	10c03fcc 	andi	r3,r2,255
 1000918:	e0bff917 	ldw	r2,-28(fp)
 100091c:	18800216 	blt	r3,r2,1000928 <CalcCoord+0xe4>
		Globcoords[1] = 0;
 1000920:	e03fff15 	stw	zero,-4(fp)
 1000924:	00001306 	br	1000974 <CalcCoord+0x130>
	}
	else if ( coordY > imgH-dSPAN){
 1000928:	d0a00083 	ldbu	r2,-32766(gp)
 100092c:	10c03fcc 	andi	r3,r2,255
 1000930:	e0bffb17 	ldw	r2,-20(fp)
 1000934:	10c7c83a 	sub	r3,r2,r3
 1000938:	e0bff917 	ldw	r2,-28(fp)
 100093c:	1880070e 	bge	r3,r2,100095c <CalcCoord+0x118>
			Globcoords[1] =(imgH - cropSIZE -1);
 1000940:	d0a000c3 	ldbu	r2,-32765(gp)
 1000944:	10c03fcc 	andi	r3,r2,255
 1000948:	e0bffb17 	ldw	r2,-20(fp)
 100094c:	10c5c83a 	sub	r2,r2,r3
 1000950:	10bfffc4 	addi	r2,r2,-1
 1000954:	e0bfff15 	stw	r2,-4(fp)
 1000958:	00000606 	br	1000974 <CalcCoord+0x130>
		}
	else {
		Globcoords[1]=(coordY - dSPAN - 1);
 100095c:	d0a00083 	ldbu	r2,-32766(gp)
 1000960:	10c03fcc 	andi	r3,r2,255
 1000964:	e0bff917 	ldw	r2,-28(fp)
 1000968:	10c5c83a 	sub	r2,r2,r3
 100096c:	10bfffc4 	addi	r2,r2,-1
 1000970:	e0bfff15 	stw	r2,-4(fp)
	}
    shared[FinalResultLocation]=(unsigned char) Globcoords[0];
 1000974:	e0bffd17 	ldw	r2,-12(fp)
 1000978:	10c400c4 	addi	r3,r2,4099
 100097c:	e0bffe17 	ldw	r2,-8(fp)
 1000980:	18800005 	stb	r2,0(r3)
	shared[FinalResultLocation+1]=(unsigned char)Globcoords[1];
 1000984:	e0bffd17 	ldw	r2,-12(fp)
 1000988:	10c40104 	addi	r3,r2,4100
 100098c:	e0bfff17 	ldw	r2,-4(fp)
 1000990:	18800005 	stb	r2,0(r3)
	//printf("\nCoords: %d,%d\n", Globcoords[0], Globcoords[1]); OSTimeDly(2000);
}
 1000994:	e037883a 	mov	sp,fp
 1000998:	df000017 	ldw	fp,0(sp)
 100099c:	dec00104 	addi	sp,sp,4
 10009a0:	f800283a 	ret

010009a4 <CalcCoordTask>:

void CalcCoordTask(void *pdata){
 10009a4:	f811883a 	mov	r8,ra
 10009a8:	100c1d00 	call	100c1d0 <_mcount>
 10009ac:	403f883a 	mov	ra,r8
 10009b0:	defffc04 	addi	sp,sp,-16
 10009b4:	dfc00315 	stw	ra,12(sp)
 10009b8:	df000215 	stw	fp,8(sp)
 10009bc:	df000204 	addi	fp,sp,8
 10009c0:	e13fff15 	stw	r4,-4(fp)


	OSSemPend(CalcCoordSem,0,&err);
 10009c4:	d1174517 	ldw	r4,23828(gp)
 10009c8:	000b883a 	mov	r5,zero
 10009cc:	d1974904 	addi	r6,gp,23844
 10009d0:	1012b040 	call	1012b04 <OSSemPend>
	unsigned char* shared = (unsigned char)SHARED_ONCHIP_BASE;
 10009d4:	e03ffe15 	stw	zero,-8(fp)
	if((current_image)==0){
 10009d8:	d0974217 	ldw	r2,23816(gp)
 10009dc:	1004c03a 	cmpne	r2,r2,zero
 10009e0:	1000081e 	bne	r2,zero,1000a04 <CalcCoordTask+0x60>
		shared[FinalResultLocation]=dSPAN;
 10009e4:	e0bffe17 	ldw	r2,-8(fp)
 10009e8:	10c400c4 	addi	r3,r2,4099
 10009ec:	d0a00083 	ldbu	r2,-32766(gp)
 10009f0:	18800005 	stb	r2,0(r3)
		shared[FinalResultLocation+1]=dSPAN;
 10009f4:	e0bffe17 	ldw	r2,-8(fp)
 10009f8:	10c40104 	addi	r3,r2,4100
 10009fc:	d0a00083 	ldbu	r2,-32766(gp)
 1000a00:	18800005 	stb	r2,0(r3)
	}
	while(1){
		CalcCoord();
 1000a04:	10008440 	call	1000844 <CalcCoord>
		OSSemPost(CropSem);
 1000a08:	d1174817 	ldw	r4,23840(gp)
 1000a0c:	1012f140 	call	1012f14 <OSSemPost>
		OSSemPend(CalcCoordSem,0,&err);
 1000a10:	d1174517 	ldw	r4,23828(gp)
 1000a14:	000b883a 	mov	r5,zero
 1000a18:	d1974904 	addi	r6,gp,23844
 1000a1c:	1012b040 	call	1012b04 <OSSemPend>
	}
 1000a20:	003ff806 	br	1000a04 <CalcCoordTask+0x60>

01000a24 <crop>:
}

void crop (int coordX,int coordY){
 1000a24:	f811883a 	mov	r8,ra
 1000a28:	100c1d00 	call	100c1d0 <_mcount>
 1000a2c:	403f883a 	mov	ra,r8
 1000a30:	defff604 	addi	sp,sp,-40
 1000a34:	dfc00915 	stw	ra,36(sp)
 1000a38:	df000815 	stw	fp,32(sp)
 1000a3c:	df000804 	addi	fp,sp,32
 1000a40:	e13ffe15 	stw	r4,-8(fp)
 1000a44:	e17fff15 	stw	r5,-4(fp)

	unsigned char* shared = (unsigned char)SHARED_ONCHIP_BASE;
 1000a48:	e03ffd15 	stw	zero,-12(fp)
	int head;		//head to use as reference
	int jump;
	head=(shared[0]*coordY)+coordX+3;
 1000a4c:	e0bffd17 	ldw	r2,-12(fp)
 1000a50:	10800003 	ldbu	r2,0(r2)
 1000a54:	11003fcc 	andi	r4,r2,255
 1000a58:	e17fff17 	ldw	r5,-4(fp)
 1000a5c:	10021e00 	call	10021e0 <__mulsi3>
 1000a60:	1007883a 	mov	r3,r2
 1000a64:	e0bffe17 	ldw	r2,-8(fp)
 1000a68:	1885883a 	add	r2,r3,r2
 1000a6c:	108000c4 	addi	r2,r2,3
 1000a70:	e0bffc15 	stw	r2,-16(fp)
		//Goes directly to the coords given (+3 because the first three values are x,y and maxvalue)
		//defines how many values we need to skip once that the cropsize is over
		//Jump defines the gap between values to skip to have a perfect cropping
	jump=shared[0]-cropSIZE;
 1000a74:	e0bffd17 	ldw	r2,-12(fp)
 1000a78:	10800003 	ldbu	r2,0(r2)
 1000a7c:	10c03fcc 	andi	r3,r2,255
 1000a80:	d0a000c3 	ldbu	r2,-32765(gp)
 1000a84:	10803fcc 	andi	r2,r2,255
 1000a88:	1885c83a 	sub	r2,r3,r2
 1000a8c:	e0bffb15 	stw	r2,-20(fp)
	//printf("head: %d\njump:%d\n",head,jump); OSTimeDly(1000);
	int i,j;
	int following=0;
 1000a90:	e03ff815 	stw	zero,-32(fp)
	for(i=0;i<cropSIZE;i++){
 1000a94:	e03ffa15 	stw	zero,-24(fp)
 1000a98:	00002006 	br	1000b1c <crop+0xf8>
		for(j=0;j<cropSIZE;j++){
 1000a9c:	e03ff915 	stw	zero,-28(fp)
 1000aa0:	00001306 	br	1000af0 <crop+0xcc>
			shared[following]=(unsigned char)shared[head];
 1000aa4:	e0bff817 	ldw	r2,-32(fp)
 1000aa8:	1007883a 	mov	r3,r2
 1000aac:	e0bffd17 	ldw	r2,-12(fp)
 1000ab0:	1889883a 	add	r4,r3,r2
 1000ab4:	e0bffc17 	ldw	r2,-16(fp)
 1000ab8:	1007883a 	mov	r3,r2
 1000abc:	e0bffd17 	ldw	r2,-12(fp)
 1000ac0:	1885883a 	add	r2,r3,r2
 1000ac4:	10800003 	ldbu	r2,0(r2)
 1000ac8:	20800005 	stb	r2,0(r4)
			//printf("%d,", shared[head]);
			head++; following++;
 1000acc:	e0bffc17 	ldw	r2,-16(fp)
 1000ad0:	10800044 	addi	r2,r2,1
 1000ad4:	e0bffc15 	stw	r2,-16(fp)
 1000ad8:	e0bff817 	ldw	r2,-32(fp)
 1000adc:	10800044 	addi	r2,r2,1
 1000ae0:	e0bff815 	stw	r2,-32(fp)
	jump=shared[0]-cropSIZE;
	//printf("head: %d\njump:%d\n",head,jump); OSTimeDly(1000);
	int i,j;
	int following=0;
	for(i=0;i<cropSIZE;i++){
		for(j=0;j<cropSIZE;j++){
 1000ae4:	e0bff917 	ldw	r2,-28(fp)
 1000ae8:	10800044 	addi	r2,r2,1
 1000aec:	e0bff915 	stw	r2,-28(fp)
 1000af0:	d0a000c3 	ldbu	r2,-32765(gp)
 1000af4:	10c03fcc 	andi	r3,r2,255
 1000af8:	e0bff917 	ldw	r2,-28(fp)
 1000afc:	10ffe916 	blt	r2,r3,1000aa4 <crop+0x80>
			shared[following]=(unsigned char)shared[head];
			//printf("%d,", shared[head]);
			head++; following++;
		}
		//printf("\n");
		head+=jump;		//when we reach the border of the matrix we goes to the next line
 1000b00:	e0fffc17 	ldw	r3,-16(fp)
 1000b04:	e0bffb17 	ldw	r2,-20(fp)
 1000b08:	1885883a 	add	r2,r3,r2
 1000b0c:	e0bffc15 	stw	r2,-16(fp)
		//Jump defines the gap between values to skip to have a perfect cropping
	jump=shared[0]-cropSIZE;
	//printf("head: %d\njump:%d\n",head,jump); OSTimeDly(1000);
	int i,j;
	int following=0;
	for(i=0;i<cropSIZE;i++){
 1000b10:	e0bffa17 	ldw	r2,-24(fp)
 1000b14:	10800044 	addi	r2,r2,1
 1000b18:	e0bffa15 	stw	r2,-24(fp)
 1000b1c:	d0a000c3 	ldbu	r2,-32765(gp)
 1000b20:	10c03fcc 	andi	r3,r2,255
 1000b24:	e0bffa17 	ldw	r2,-24(fp)
 1000b28:	10ffdc16 	blt	r2,r3,1000a9c <crop+0x78>
		}
		//printf("\n");
		head+=jump;		//when we reach the border of the matrix we goes to the next line
	}
	//OSTimeDly(5000);
}
 1000b2c:	e037883a 	mov	sp,fp
 1000b30:	dfc00117 	ldw	ra,4(sp)
 1000b34:	df000017 	ldw	fp,0(sp)
 1000b38:	dec00204 	addi	sp,sp,8
 1000b3c:	f800283a 	ret

01000b40 <CropTask>:

void CropTask(void *pdata){
 1000b40:	f811883a 	mov	r8,ra
 1000b44:	100c1d00 	call	100c1d0 <_mcount>
 1000b48:	403f883a 	mov	ra,r8
 1000b4c:	defffc04 	addi	sp,sp,-16
 1000b50:	dfc00315 	stw	ra,12(sp)
 1000b54:	df000215 	stw	fp,8(sp)
 1000b58:	df000204 	addi	fp,sp,8
 1000b5c:	e13fff15 	stw	r4,-4(fp)

	OSSemPend(CropSem,0,&err);
 1000b60:	d1174817 	ldw	r4,23840(gp)
 1000b64:	000b883a 	mov	r5,zero
 1000b68:	d1974904 	addi	r6,gp,23844
 1000b6c:	1012b040 	call	1012b04 <OSSemPend>
	unsigned char* shared = (unsigned char)SHARED_ONCHIP_BASE;
 1000b70:	e03ffe15 	stw	zero,-8(fp)
	while(1){

		crop(shared[FinalResultLocation],shared[FinalResultLocation+1]);
 1000b74:	e0bffe17 	ldw	r2,-8(fp)
 1000b78:	108400c4 	addi	r2,r2,4099
 1000b7c:	10800003 	ldbu	r2,0(r2)
 1000b80:	11003fcc 	andi	r4,r2,255
 1000b84:	e0bffe17 	ldw	r2,-8(fp)
 1000b88:	10840104 	addi	r2,r2,4100
 1000b8c:	10800003 	ldbu	r2,0(r2)
 1000b90:	11403fcc 	andi	r5,r2,255
 1000b94:	1000a240 	call	1000a24 <crop>
		OSSemPost(xCorr2Sem);
 1000b98:	d1174717 	ldw	r4,23836(gp)
 1000b9c:	1012f140 	call	1012f14 <OSSemPost>
		OSSemPend(CropSem,0,&err);
 1000ba0:	d1174817 	ldw	r4,23840(gp)
 1000ba4:	000b883a 	mov	r5,zero
 1000ba8:	d1974904 	addi	r6,gp,23844
 1000bac:	1012b040 	call	1012b04 <OSSemPend>
	}
 1000bb0:	003ff006 	br	1000b74 <CropTask+0x34>

01000bb4 <stencilmat>:
}


unsigned int stencilmat(int i, int j,unsigned int cropped_matrix[31][31]){ //x,y,mat
 1000bb4:	f811883a 	mov	r8,ra
 1000bb8:	100c1d00 	call	100c1d0 <_mcount>
 1000bbc:	403f883a 	mov	ra,r8
 1000bc0:	defff904 	addi	sp,sp,-28
 1000bc4:	dfc00615 	stw	ra,24(sp)
 1000bc8:	df000515 	stw	fp,20(sp)
 1000bcc:	dc000415 	stw	r16,16(sp)
 1000bd0:	df000404 	addi	fp,sp,16
 1000bd4:	e13ffd15 	stw	r4,-12(fp)
 1000bd8:	e17ffe15 	stw	r5,-8(fp)
 1000bdc:	e1bfff15 	stw	r6,-4(fp)
	unsigned int sum;
	sum=(cropped_matrix[j][i+2] + cropped_matrix[j+1][i+1] + cropped_matrix[j+1][i+3] + cropped_matrix[j+2][i] + cropped_matrix[j+2][i+4] + cropped_matrix[j+3][i+1] + cropped_matrix[j+3][i+3] + cropped_matrix[j+4][i+2]);
 1000be0:	e13ffe17 	ldw	r4,-8(fp)
 1000be4:	01401f04 	movi	r5,124
 1000be8:	10021e00 	call	10021e0 <__mulsi3>
 1000bec:	1007883a 	mov	r3,r2
 1000bf0:	e0bfff17 	ldw	r2,-4(fp)
 1000bf4:	1887883a 	add	r3,r3,r2
 1000bf8:	e0bffd17 	ldw	r2,-12(fp)
 1000bfc:	10800084 	addi	r2,r2,2
 1000c00:	1085883a 	add	r2,r2,r2
 1000c04:	1085883a 	add	r2,r2,r2
 1000c08:	10c5883a 	add	r2,r2,r3
 1000c0c:	14000017 	ldw	r16,0(r2)
 1000c10:	e13ffe17 	ldw	r4,-8(fp)
 1000c14:	01401f04 	movi	r5,124
 1000c18:	10021e00 	call	10021e0 <__mulsi3>
 1000c1c:	1007883a 	mov	r3,r2
 1000c20:	e0bfff17 	ldw	r2,-4(fp)
 1000c24:	1885883a 	add	r2,r3,r2
 1000c28:	10c01f04 	addi	r3,r2,124
 1000c2c:	e0bffd17 	ldw	r2,-12(fp)
 1000c30:	10800044 	addi	r2,r2,1
 1000c34:	1085883a 	add	r2,r2,r2
 1000c38:	1085883a 	add	r2,r2,r2
 1000c3c:	10c5883a 	add	r2,r2,r3
 1000c40:	10800017 	ldw	r2,0(r2)
 1000c44:	80a1883a 	add	r16,r16,r2
 1000c48:	e13ffe17 	ldw	r4,-8(fp)
 1000c4c:	01401f04 	movi	r5,124
 1000c50:	10021e00 	call	10021e0 <__mulsi3>
 1000c54:	1007883a 	mov	r3,r2
 1000c58:	e0bfff17 	ldw	r2,-4(fp)
 1000c5c:	1885883a 	add	r2,r3,r2
 1000c60:	10c01f04 	addi	r3,r2,124
 1000c64:	e0bffd17 	ldw	r2,-12(fp)
 1000c68:	108000c4 	addi	r2,r2,3
 1000c6c:	1085883a 	add	r2,r2,r2
 1000c70:	1085883a 	add	r2,r2,r2
 1000c74:	10c5883a 	add	r2,r2,r3
 1000c78:	10800017 	ldw	r2,0(r2)
 1000c7c:	80a1883a 	add	r16,r16,r2
 1000c80:	e13ffe17 	ldw	r4,-8(fp)
 1000c84:	01401f04 	movi	r5,124
 1000c88:	10021e00 	call	10021e0 <__mulsi3>
 1000c8c:	1007883a 	mov	r3,r2
 1000c90:	e0bfff17 	ldw	r2,-4(fp)
 1000c94:	1885883a 	add	r2,r3,r2
 1000c98:	10c03e04 	addi	r3,r2,248
 1000c9c:	e0bffd17 	ldw	r2,-12(fp)
 1000ca0:	1085883a 	add	r2,r2,r2
 1000ca4:	1085883a 	add	r2,r2,r2
 1000ca8:	10c5883a 	add	r2,r2,r3
 1000cac:	10800017 	ldw	r2,0(r2)
 1000cb0:	80a1883a 	add	r16,r16,r2
 1000cb4:	e13ffe17 	ldw	r4,-8(fp)
 1000cb8:	01401f04 	movi	r5,124
 1000cbc:	10021e00 	call	10021e0 <__mulsi3>
 1000cc0:	1007883a 	mov	r3,r2
 1000cc4:	e0bfff17 	ldw	r2,-4(fp)
 1000cc8:	1885883a 	add	r2,r3,r2
 1000ccc:	10c03e04 	addi	r3,r2,248
 1000cd0:	e0bffd17 	ldw	r2,-12(fp)
 1000cd4:	10800104 	addi	r2,r2,4
 1000cd8:	1085883a 	add	r2,r2,r2
 1000cdc:	1085883a 	add	r2,r2,r2
 1000ce0:	10c5883a 	add	r2,r2,r3
 1000ce4:	10800017 	ldw	r2,0(r2)
 1000ce8:	80a1883a 	add	r16,r16,r2
 1000cec:	e13ffe17 	ldw	r4,-8(fp)
 1000cf0:	01401f04 	movi	r5,124
 1000cf4:	10021e00 	call	10021e0 <__mulsi3>
 1000cf8:	1007883a 	mov	r3,r2
 1000cfc:	e0bfff17 	ldw	r2,-4(fp)
 1000d00:	1885883a 	add	r2,r3,r2
 1000d04:	10c05d04 	addi	r3,r2,372
 1000d08:	e0bffd17 	ldw	r2,-12(fp)
 1000d0c:	10800044 	addi	r2,r2,1
 1000d10:	1085883a 	add	r2,r2,r2
 1000d14:	1085883a 	add	r2,r2,r2
 1000d18:	10c5883a 	add	r2,r2,r3
 1000d1c:	10800017 	ldw	r2,0(r2)
 1000d20:	80a1883a 	add	r16,r16,r2
 1000d24:	e13ffe17 	ldw	r4,-8(fp)
 1000d28:	01401f04 	movi	r5,124
 1000d2c:	10021e00 	call	10021e0 <__mulsi3>
 1000d30:	1007883a 	mov	r3,r2
 1000d34:	e0bfff17 	ldw	r2,-4(fp)
 1000d38:	1885883a 	add	r2,r3,r2
 1000d3c:	10c05d04 	addi	r3,r2,372
 1000d40:	e0bffd17 	ldw	r2,-12(fp)
 1000d44:	108000c4 	addi	r2,r2,3
 1000d48:	1085883a 	add	r2,r2,r2
 1000d4c:	1085883a 	add	r2,r2,r2
 1000d50:	10c5883a 	add	r2,r2,r3
 1000d54:	10800017 	ldw	r2,0(r2)
 1000d58:	80a1883a 	add	r16,r16,r2
 1000d5c:	e13ffe17 	ldw	r4,-8(fp)
 1000d60:	01401f04 	movi	r5,124
 1000d64:	10021e00 	call	10021e0 <__mulsi3>
 1000d68:	1007883a 	mov	r3,r2
 1000d6c:	e0bfff17 	ldw	r2,-4(fp)
 1000d70:	1885883a 	add	r2,r3,r2
 1000d74:	10c07c04 	addi	r3,r2,496
 1000d78:	e0bffd17 	ldw	r2,-12(fp)
 1000d7c:	10800084 	addi	r2,r2,2
 1000d80:	1085883a 	add	r2,r2,r2
 1000d84:	1085883a 	add	r2,r2,r2
 1000d88:	10c5883a 	add	r2,r2,r3
 1000d8c:	10800017 	ldw	r2,0(r2)
 1000d90:	8085883a 	add	r2,r16,r2
 1000d94:	e0bffc15 	stw	r2,-16(fp)

	return sum;
 1000d98:	e0bffc17 	ldw	r2,-16(fp)

}
 1000d9c:	e037883a 	mov	sp,fp
 1000da0:	dfc00217 	ldw	ra,8(sp)
 1000da4:	df000117 	ldw	fp,4(sp)
 1000da8:	dc000017 	ldw	r16,0(sp)
 1000dac:	dec00304 	addi	sp,sp,12
 1000db0:	f800283a 	ret

01000db4 <xCorr2>:

void xCorr2(){
 1000db4:	f811883a 	mov	r8,ra
 1000db8:	100c1d00 	call	100c1d0 <_mcount>
 1000dbc:	403f883a 	mov	ra,r8
 1000dc0:	defc3704 	addi	sp,sp,-3876
 1000dc4:	dfc3c815 	stw	ra,3872(sp)
 1000dc8:	df03c715 	stw	fp,3868(sp)
 1000dcc:	dc43c615 	stw	r17,3864(sp)
 1000dd0:	dc03c515 	stw	r16,3860(sp)
 1000dd4:	df03c504 	addi	fp,sp,3860

	int i,j;
	unsigned int matrix[31][31];
	unsigned char* shared = (unsigned char)SHARED_ONCHIP_BASE;
 1000dd8:	e03c3c15 	stw	zero,-3856(fp)
	for(i=0;i<cropSIZE;i++){
 1000ddc:	e03c3e15 	stw	zero,-3848(fp)
 1000de0:	00001d06 	br	1000e58 <xCorr2+0xa4>
		for(j=0;j<cropSIZE;j++){
 1000de4:	e03c3d15 	stw	zero,-3852(fp)
 1000de8:	00001406 	br	1000e3c <xCorr2+0x88>
			matrix[i][j]=(unsigned int)*shared;
 1000dec:	e13c3e17 	ldw	r4,-3848(fp)
 1000df0:	e43c3d17 	ldw	r16,-3852(fp)
 1000df4:	e0bc3c17 	ldw	r2,-3856(fp)
 1000df8:	10800003 	ldbu	r2,0(r2)
 1000dfc:	14403fcc 	andi	r17,r2,255
 1000e00:	014007c4 	movi	r5,31
 1000e04:	10021e00 	call	10021e0 <__mulsi3>
 1000e08:	1405883a 	add	r2,r2,r16
 1000e0c:	1085883a 	add	r2,r2,r2
 1000e10:	1085883a 	add	r2,r2,r2
 1000e14:	e0fc3b04 	addi	r3,fp,-3860
 1000e18:	10c5883a 	add	r2,r2,r3
 1000e1c:	10800404 	addi	r2,r2,16
 1000e20:	14400015 	stw	r17,0(r2)
			shared++;
 1000e24:	e0bc3c17 	ldw	r2,-3856(fp)
 1000e28:	10800044 	addi	r2,r2,1
 1000e2c:	e0bc3c15 	stw	r2,-3856(fp)

	int i,j;
	unsigned int matrix[31][31];
	unsigned char* shared = (unsigned char)SHARED_ONCHIP_BASE;
	for(i=0;i<cropSIZE;i++){
		for(j=0;j<cropSIZE;j++){
 1000e30:	e0bc3d17 	ldw	r2,-3852(fp)
 1000e34:	10800044 	addi	r2,r2,1
 1000e38:	e0bc3d15 	stw	r2,-3852(fp)
 1000e3c:	d0a000c3 	ldbu	r2,-32765(gp)
 1000e40:	10c03fcc 	andi	r3,r2,255
 1000e44:	e0bc3d17 	ldw	r2,-3852(fp)
 1000e48:	10ffe816 	blt	r2,r3,1000dec <xCorr2+0x38>
void xCorr2(){

	int i,j;
	unsigned int matrix[31][31];
	unsigned char* shared = (unsigned char)SHARED_ONCHIP_BASE;
	for(i=0;i<cropSIZE;i++){
 1000e4c:	e0bc3e17 	ldw	r2,-3848(fp)
 1000e50:	10800044 	addi	r2,r2,1
 1000e54:	e0bc3e15 	stw	r2,-3848(fp)
 1000e58:	d0a000c3 	ldbu	r2,-32765(gp)
 1000e5c:	10c03fcc 	andi	r3,r2,255
 1000e60:	e0bc3e17 	ldw	r2,-3848(fp)
 1000e64:	10ffdf16 	blt	r2,r3,1000de4 <xCorr2+0x30>
			shared++;

			}

	}
 	unsigned int* intshared = (unsigned int)SHARED_ONCHIP_BASE;
 1000e68:	00800434 	movhi	r2,16
 1000e6c:	10880004 	addi	r2,r2,8192
 1000e70:	e0bc3b15 	stw	r2,-3860(fp)
	for(i=0; i<cropSIZE-4;i++){
 1000e74:	e03c3e15 	stw	zero,-3848(fp)
 1000e78:	00001706 	br	1000ed8 <xCorr2+0x124>
		for(j=0; j<cropSIZE-4;j++){
 1000e7c:	e03c3d15 	stw	zero,-3852(fp)
 1000e80:	00000d06 	br	1000eb8 <xCorr2+0x104>
			*intshared++= stencilmat(j,i,matrix);
 1000e84:	e1bc3f04 	addi	r6,fp,-3844
 1000e88:	e13c3d17 	ldw	r4,-3852(fp)
 1000e8c:	e17c3e17 	ldw	r5,-3848(fp)
 1000e90:	1000bb40 	call	1000bb4 <stencilmat>
 1000e94:	1007883a 	mov	r3,r2
 1000e98:	e0bc3b17 	ldw	r2,-3860(fp)
 1000e9c:	10c00015 	stw	r3,0(r2)
 1000ea0:	e0bc3b17 	ldw	r2,-3860(fp)
 1000ea4:	10800104 	addi	r2,r2,4
 1000ea8:	e0bc3b15 	stw	r2,-3860(fp)
			}

	}
 	unsigned int* intshared = (unsigned int)SHARED_ONCHIP_BASE;
	for(i=0; i<cropSIZE-4;i++){
		for(j=0; j<cropSIZE-4;j++){
 1000eac:	e0bc3d17 	ldw	r2,-3852(fp)
 1000eb0:	10800044 	addi	r2,r2,1
 1000eb4:	e0bc3d15 	stw	r2,-3852(fp)
 1000eb8:	d0a000c3 	ldbu	r2,-32765(gp)
 1000ebc:	10803fcc 	andi	r2,r2,255
 1000ec0:	10ffff04 	addi	r3,r2,-4
 1000ec4:	e0bc3d17 	ldw	r2,-3852(fp)
 1000ec8:	10ffee16 	blt	r2,r3,1000e84 <xCorr2+0xd0>

			}

	}
 	unsigned int* intshared = (unsigned int)SHARED_ONCHIP_BASE;
	for(i=0; i<cropSIZE-4;i++){
 1000ecc:	e0bc3e17 	ldw	r2,-3848(fp)
 1000ed0:	10800044 	addi	r2,r2,1
 1000ed4:	e0bc3e15 	stw	r2,-3848(fp)
 1000ed8:	d0a000c3 	ldbu	r2,-32765(gp)
 1000edc:	10803fcc 	andi	r2,r2,255
 1000ee0:	10ffff04 	addi	r3,r2,-4
 1000ee4:	e0bc3e17 	ldw	r2,-3848(fp)
 1000ee8:	10ffe416 	blt	r2,r3,1000e7c <xCorr2+0xc8>

		}

	}

}
 1000eec:	e037883a 	mov	sp,fp
 1000ef0:	dfc00317 	ldw	ra,12(sp)
 1000ef4:	df000217 	ldw	fp,8(sp)
 1000ef8:	dc400117 	ldw	r17,4(sp)
 1000efc:	dc000017 	ldw	r16,0(sp)
 1000f00:	dec00404 	addi	sp,sp,16
 1000f04:	f800283a 	ret

01000f08 <xCorr2Task>:


void xCorr2Task(void *pdata){
 1000f08:	f811883a 	mov	r8,ra
 1000f0c:	100c1d00 	call	100c1d0 <_mcount>
 1000f10:	403f883a 	mov	ra,r8
 1000f14:	defffd04 	addi	sp,sp,-12
 1000f18:	dfc00215 	stw	ra,8(sp)
 1000f1c:	df000115 	stw	fp,4(sp)
 1000f20:	df000104 	addi	fp,sp,4
 1000f24:	e13fff15 	stw	r4,-4(fp)

		OSSemPend(xCorr2Sem,0,&err);
 1000f28:	d1174717 	ldw	r4,23836(gp)
 1000f2c:	000b883a 	mov	r5,zero
 1000f30:	d1974904 	addi	r6,gp,23844
 1000f34:	1012b040 	call	1012b04 <OSSemPend>
		while(1){
			xCorr2();
 1000f38:	1000db40 	call	1000db4 <xCorr2>
			OSSemPost(PosMaxSem);
 1000f3c:	d1174417 	ldw	r4,23824(gp)
 1000f40:	1012f140 	call	1012f14 <OSSemPost>
			OSSemPend(xCorr2Sem,0,&err);
 1000f44:	d1174717 	ldw	r4,23836(gp)
 1000f48:	000b883a 	mov	r5,zero
 1000f4c:	d1974904 	addi	r6,gp,23844
 1000f50:	1012b040 	call	1012b04 <OSSemPend>
		}
 1000f54:	003ff806 	br	1000f38 <xCorr2Task+0x30>

01000f58 <posMax>:

}

void posMax(){
 1000f58:	f811883a 	mov	r8,ra
 1000f5c:	100c1d00 	call	100c1d0 <_mcount>
 1000f60:	403f883a 	mov	ra,r8
 1000f64:	defd1d04 	addi	sp,sp,-2956
 1000f68:	dfc2e215 	stw	ra,2952(sp)
 1000f6c:	df02e115 	stw	fp,2948(sp)
 1000f70:	dc42e015 	stw	r17,2944(sp)
 1000f74:	dc02df15 	stw	r16,2940(sp)
 1000f78:	df02df04 	addi	fp,sp,2940
	unsigned int max=0;		//Variable used for the max
 1000f7c:	e03d2615 	stw	zero,-2920(fp)
	unsigned int maybemax;		//Variable that is a max of it's own matrix but not the biggest

	//The following finds the highest value between all the different matrix
	int i,j;
	unsigned int* shared = (unsigned int)SHARED_ONCHIP_BASE;
 1000f80:	00800434 	movhi	r2,16
 1000f84:	10880004 	addi	r2,r2,8192
 1000f88:	e0bd2215 	stw	r2,-2936(fp)
	int matrix[27][27];
	for(i=0;i<cropSIZE-4;i++){
 1000f8c:	e03d2415 	stw	zero,-2928(fp)
 1000f90:	00001e06 	br	100100c <posMax+0xb4>
		for(j=0;j<cropSIZE-4;j++){
 1000f94:	e03d2315 	stw	zero,-2932(fp)
 1000f98:	00001406 	br	1000fec <posMax+0x94>
			matrix[i][j]=*shared++;
 1000f9c:	e13d2417 	ldw	r4,-2928(fp)
 1000fa0:	e43d2317 	ldw	r16,-2932(fp)
 1000fa4:	e0bd2217 	ldw	r2,-2936(fp)
 1000fa8:	10800017 	ldw	r2,0(r2)
 1000fac:	1023883a 	mov	r17,r2
 1000fb0:	014006c4 	movi	r5,27
 1000fb4:	10021e00 	call	10021e0 <__mulsi3>
 1000fb8:	1405883a 	add	r2,r2,r16
 1000fbc:	1085883a 	add	r2,r2,r2
 1000fc0:	1085883a 	add	r2,r2,r2
 1000fc4:	e0fd2104 	addi	r3,fp,-2940
 1000fc8:	10c5883a 	add	r2,r2,r3
 1000fcc:	10800604 	addi	r2,r2,24
 1000fd0:	14400015 	stw	r17,0(r2)
 1000fd4:	e0bd2217 	ldw	r2,-2936(fp)
 1000fd8:	10800104 	addi	r2,r2,4
 1000fdc:	e0bd2215 	stw	r2,-2936(fp)
	//The following finds the highest value between all the different matrix
	int i,j;
	unsigned int* shared = (unsigned int)SHARED_ONCHIP_BASE;
	int matrix[27][27];
	for(i=0;i<cropSIZE-4;i++){
		for(j=0;j<cropSIZE-4;j++){
 1000fe0:	e0bd2317 	ldw	r2,-2932(fp)
 1000fe4:	10800044 	addi	r2,r2,1
 1000fe8:	e0bd2315 	stw	r2,-2932(fp)
 1000fec:	d0a000c3 	ldbu	r2,-32765(gp)
 1000ff0:	10803fcc 	andi	r2,r2,255
 1000ff4:	10ffff04 	addi	r3,r2,-4
 1000ff8:	e0bd2317 	ldw	r2,-2932(fp)
 1000ffc:	10ffe716 	blt	r2,r3,1000f9c <posMax+0x44>

	//The following finds the highest value between all the different matrix
	int i,j;
	unsigned int* shared = (unsigned int)SHARED_ONCHIP_BASE;
	int matrix[27][27];
	for(i=0;i<cropSIZE-4;i++){
 1001000:	e0bd2417 	ldw	r2,-2928(fp)
 1001004:	10800044 	addi	r2,r2,1
 1001008:	e0bd2415 	stw	r2,-2928(fp)
 100100c:	d0a000c3 	ldbu	r2,-32765(gp)
 1001010:	10803fcc 	andi	r2,r2,255
 1001014:	10ffff04 	addi	r3,r2,-4
 1001018:	e0bd2417 	ldw	r2,-2928(fp)
 100101c:	10ffdd16 	blt	r2,r3,1000f94 <posMax+0x3c>
		for(j=0;j<cropSIZE-4;j++){
			matrix[i][j]=*shared++;
			//shared++;
		}
	}
	unsigned char* charshared = (unsigned char)SHARED_ONCHIP_BASE;
 1001020:	e03d2115 	stw	zero,-2940(fp)
	for(i=0; i<cropSIZE-4;i++){
 1001024:	e03d2415 	stw	zero,-2928(fp)
 1001028:	00002606 	br	10010c4 <posMax+0x16c>
		for(j=0; j<cropSIZE-4;j++){
 100102c:	e03d2315 	stw	zero,-2932(fp)
 1001030:	00001c06 	br	10010a4 <posMax+0x14c>
			maybemax=matrix[i][j];
 1001034:	e13d2417 	ldw	r4,-2928(fp)
 1001038:	e43d2317 	ldw	r16,-2932(fp)
 100103c:	014006c4 	movi	r5,27
 1001040:	10021e00 	call	10021e0 <__mulsi3>
 1001044:	1405883a 	add	r2,r2,r16
 1001048:	1085883a 	add	r2,r2,r2
 100104c:	1085883a 	add	r2,r2,r2
 1001050:	e0fd2104 	addi	r3,fp,-2940
 1001054:	10c5883a 	add	r2,r2,r3
 1001058:	10800604 	addi	r2,r2,24
 100105c:	10800017 	ldw	r2,0(r2)
 1001060:	e0bd2515 	stw	r2,-2924(fp)

			if(maybemax> max){
 1001064:	e0fd2517 	ldw	r3,-2924(fp)
 1001068:	e0bd2617 	ldw	r2,-2920(fp)
 100106c:	10c00a2e 	bgeu	r2,r3,1001098 <posMax+0x140>
				 max=maybemax;
 1001070:	e0bd2517 	ldw	r2,-2924(fp)
 1001074:	e0bd2615 	stw	r2,-2920(fp)
				 charshared[ObjectLocation]=j;
 1001078:	e0bd2117 	ldw	r2,-2940(fp)
 100107c:	10c40144 	addi	r3,r2,4101
 1001080:	e0bd2317 	ldw	r2,-2932(fp)
 1001084:	18800005 	stb	r2,0(r3)
				 charshared[ObjectLocation+1]=i;
 1001088:	e0bd2117 	ldw	r2,-2940(fp)
 100108c:	10c40184 	addi	r3,r2,4102
 1001090:	e0bd2417 	ldw	r2,-2928(fp)
 1001094:	18800005 	stb	r2,0(r3)
			//shared++;
		}
	}
	unsigned char* charshared = (unsigned char)SHARED_ONCHIP_BASE;
	for(i=0; i<cropSIZE-4;i++){
		for(j=0; j<cropSIZE-4;j++){
 1001098:	e0bd2317 	ldw	r2,-2932(fp)
 100109c:	10800044 	addi	r2,r2,1
 10010a0:	e0bd2315 	stw	r2,-2932(fp)
 10010a4:	d0a000c3 	ldbu	r2,-32765(gp)
 10010a8:	10803fcc 	andi	r2,r2,255
 10010ac:	10ffff04 	addi	r3,r2,-4
 10010b0:	e0bd2317 	ldw	r2,-2932(fp)
 10010b4:	10ffdf16 	blt	r2,r3,1001034 <posMax+0xdc>
			matrix[i][j]=*shared++;
			//shared++;
		}
	}
	unsigned char* charshared = (unsigned char)SHARED_ONCHIP_BASE;
	for(i=0; i<cropSIZE-4;i++){
 10010b8:	e0bd2417 	ldw	r2,-2928(fp)
 10010bc:	10800044 	addi	r2,r2,1
 10010c0:	e0bd2415 	stw	r2,-2928(fp)
 10010c4:	d0a000c3 	ldbu	r2,-32765(gp)
 10010c8:	10803fcc 	andi	r2,r2,255
 10010cc:	10ffff04 	addi	r3,r2,-4
 10010d0:	e0bd2417 	ldw	r2,-2928(fp)
 10010d4:	10ffd516 	blt	r2,r3,100102c <posMax+0xd4>
			}
		}

	}
	if(DEBUG){printf("\nCROPPED OUTPUT\n");printAsciiHidden(charshared,cropSIZE-4,cropSIZE-4,charshared[ObjectLocation],charshared[ObjectLocation+1],3,max); OSTimeDly(3000);}
}
 10010d8:	e037883a 	mov	sp,fp
 10010dc:	dfc00317 	ldw	ra,12(sp)
 10010e0:	df000217 	ldw	fp,8(sp)
 10010e4:	dc400117 	ldw	r17,4(sp)
 10010e8:	dc000017 	ldw	r16,0(sp)
 10010ec:	dec00404 	addi	sp,sp,16
 10010f0:	f800283a 	ret

010010f4 <PosMaxTask>:


void PosMaxTask(void *pdata){
 10010f4:	f811883a 	mov	r8,ra
 10010f8:	100c1d00 	call	100c1d0 <_mcount>
 10010fc:	403f883a 	mov	ra,r8
 1001100:	defffd04 	addi	sp,sp,-12
 1001104:	dfc00215 	stw	ra,8(sp)
 1001108:	df000115 	stw	fp,4(sp)
 100110c:	df000104 	addi	fp,sp,4
 1001110:	e13fff15 	stw	r4,-4(fp)
	OSSemPend(PosMaxSem,0,&err);
 1001114:	d1174417 	ldw	r4,23824(gp)
 1001118:	000b883a 	mov	r5,zero
 100111c:	d1974904 	addi	r6,gp,23844
 1001120:	1012b040 	call	1012b04 <OSSemPend>
	while(1){
	posMax();
 1001124:	1000f580 	call	1000f58 <posMax>
	OSSemPost(objectPosSem);
 1001128:	d1174617 	ldw	r4,23832(gp)
 100112c:	1012f140 	call	1012f14 <OSSemPost>
	OSSemPend(PosMaxSem,0,&err);
 1001130:	d1174417 	ldw	r4,23824(gp)
 1001134:	000b883a 	mov	r5,zero
 1001138:	d1974904 	addi	r6,gp,23844
 100113c:	1012b040 	call	1012b04 <OSSemPend>
	}
 1001140:	003ff806 	br	1001124 <PosMaxTask+0x30>

01001144 <objectPos>:
}

void objectPos(){
 1001144:	f811883a 	mov	r8,ra
 1001148:	100c1d00 	call	100c1d0 <_mcount>
 100114c:	403f883a 	mov	ra,r8
 1001150:	defffe04 	addi	sp,sp,-8
 1001154:	df000115 	stw	fp,4(sp)
 1001158:	df000104 	addi	fp,sp,4
	unsigned char* shared = (unsigned char)SHARED_ONCHIP_BASE;
 100115c:	e03fff15 	stw	zero,-4(fp)
	//Equation given by the haskell code
	shared[FinalResultLocation]= shared[FinalResultLocation]+shared[ObjectLocation]+2;
 1001160:	e0bfff17 	ldw	r2,-4(fp)
 1001164:	110400c4 	addi	r4,r2,4099
 1001168:	e0bfff17 	ldw	r2,-4(fp)
 100116c:	108400c4 	addi	r2,r2,4099
 1001170:	10c00003 	ldbu	r3,0(r2)
 1001174:	e0bfff17 	ldw	r2,-4(fp)
 1001178:	10840144 	addi	r2,r2,4101
 100117c:	10800003 	ldbu	r2,0(r2)
 1001180:	1885883a 	add	r2,r3,r2
 1001184:	10800084 	addi	r2,r2,2
 1001188:	20800005 	stb	r2,0(r4)
	shared[FinalResultLocation+1]= shared[FinalResultLocation+1]+shared[ObjectLocation+1]+2;
 100118c:	e0bfff17 	ldw	r2,-4(fp)
 1001190:	11040104 	addi	r4,r2,4100
 1001194:	e0bfff17 	ldw	r2,-4(fp)
 1001198:	10840104 	addi	r2,r2,4100
 100119c:	10c00003 	ldbu	r3,0(r2)
 10011a0:	e0bfff17 	ldw	r2,-4(fp)
 10011a4:	10840184 	addi	r2,r2,4102
 10011a8:	10800003 	ldbu	r2,0(r2)
 10011ac:	1885883a 	add	r2,r3,r2
 10011b0:	10800084 	addi	r2,r2,2
 10011b4:	20800005 	stb	r2,0(r4)
	if(!PERFORMANCE) printf("\n[%d,%d]\n", shared[FinalResultLocation], shared[FinalResultLocation+1]);

}
 10011b8:	e037883a 	mov	sp,fp
 10011bc:	df000017 	ldw	fp,0(sp)
 10011c0:	dec00104 	addi	sp,sp,4
 10011c4:	f800283a 	ret

010011c8 <ObjectPosTask>:

void ObjectPosTask(void *pdata){
 10011c8:	f811883a 	mov	r8,ra
 10011cc:	100c1d00 	call	100c1d0 <_mcount>
 10011d0:	403f883a 	mov	ra,r8
 10011d4:	defffd04 	addi	sp,sp,-12
 10011d8:	dfc00215 	stw	ra,8(sp)
 10011dc:	df000115 	stw	fp,4(sp)
 10011e0:	df000104 	addi	fp,sp,4
 10011e4:	e13fff15 	stw	r4,-4(fp)

	OSSemPend(objectPosSem,0,&err);
 10011e8:	d1174617 	ldw	r4,23832(gp)
 10011ec:	000b883a 	mov	r5,zero
 10011f0:	d1974904 	addi	r6,gp,23844
 10011f4:	1012b040 	call	1012b04 <OSSemPend>
	while(1){
		objectPos();
 10011f8:	10011440 	call	1001144 <objectPos>
		current_image++;
 10011fc:	d0974217 	ldw	r2,23816(gp)
 1001200:	10800044 	addi	r2,r2,1
 1001204:	d0974215 	stw	r2,23816(gp)
		if(PERFORMANCE){
			 current_image%=sequence_length;
 1001208:	d1174217 	ldw	r4,23816(gp)
 100120c:	d0a00043 	ldbu	r2,-32767(gp)
 1001210:	11403fcc 	andi	r5,r2,255
 1001214:	2940201c 	xori	r5,r5,128
 1001218:	297fe004 	addi	r5,r5,-128
 100121c:	100214c0 	call	100214c <__modsi3>
 1001220:	d0974215 	stw	r2,23816(gp)
			 if(counter==0)PERF_END(PERFORMANCE_COUNTER_0_BASE, SECTION_2);
 1001224:	d0974317 	ldw	r2,23820(gp)
 1001228:	1004c03a 	cmpne	r2,r2,zero
 100122c:	1000031e 	bne	r2,zero,100123c <ObjectPosTask+0x74>
 1001230:	00800434 	movhi	r2,16
 1001234:	10940804 	addi	r2,r2,20512
 1001238:	10000035 	stwio	zero,0(r2)
			ALT_CPU_FREQ,        // defined in "system.h"
			1,                   // How many sections to print
			"Section 1"        // Display-name of section(s).
			);
		}
		OSSemPost(GrayedSem);
 100123c:	d1174c17 	ldw	r4,23856(gp)
 1001240:	1012f140 	call	1012f14 <OSSemPost>
		OSSemPend(objectPosSem,0,&err);
 1001244:	d1174617 	ldw	r4,23832(gp)
 1001248:	000b883a 	mov	r5,zero
 100124c:	d1974904 	addi	r6,gp,23844
 1001250:	1012b040 	call	1012b04 <OSSemPend>
	}
 1001254:	003fe806 	br	10011f8 <ObjectPosTask+0x30>

01001258 <StartTask>:
}


void StartTask(void* pdata)
{
 1001258:	f811883a 	mov	r8,ra
 100125c:	100c1d00 	call	100c1d0 <_mcount>
 1001260:	403f883a 	mov	ra,r8
 1001264:	defff704 	addi	sp,sp,-36
 1001268:	dfc00815 	stw	ra,32(sp)
 100126c:	df000715 	stw	fp,28(sp)
 1001270:	df000704 	addi	fp,sp,28
 1001274:	e13fff15 	stw	r4,-4(fp)

  void* context=0;
 1001278:	e03ffe15 	stw	zero,-8(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 100127c:	008040f4 	movhi	r2,259
 1001280:	1096ef04 	addi	r2,r2,23484
 1001284:	10800017 	ldw	r2,0(r2)
 1001288:	1009883a 	mov	r4,r2

  static alt_alarm alarm;     /* Is needed for timer ISR function */

  /* Base resolution for SW timer : HW_TIMER_PERIOD ms */
  delay = alt_ticks_per_second() * HW_TIMER_PERIOD / 1000;
 100128c:	01401904 	movi	r5,100
 1001290:	10021e00 	call	10021e0 <__mulsi3>
 1001294:	1009883a 	mov	r4,r2
 1001298:	0140fa04 	movi	r5,1000
 100129c:	10021b80 	call	10021b8 <__udivsi3>
 10012a0:	d0974a15 	stw	r2,23848(gp)
  printf("delay in ticks %d\n", delay);
 10012a4:	d1574a17 	ldw	r5,23848(gp)
 10012a8:	010040b4 	movhi	r4,258
 10012ac:	21271a04 	addi	r4,r4,-25496
 10012b0:	10027140 	call	1002714 <printf>

  /*
   * Create Hardware Timer with a period of 'delay'
   */
  if (alt_alarm_start (&alarm,
 10012b4:	d0974a17 	ldw	r2,23848(gp)
 10012b8:	100b883a 	mov	r5,r2
 10012bc:	010040f4 	movhi	r4,259
 10012c0:	21171404 	addi	r4,r4,23632
 10012c4:	01804034 	movhi	r6,256
 10012c8:	31813104 	addi	r6,r6,1220
 10012cc:	e1fffe17 	ldw	r7,-8(fp)
 10012d0:	100b8f00 	call	100b8f0 <alt_alarm_start>
 10012d4:	1004403a 	cmpge	r2,r2,zero
 10012d8:	1000031e 	bne	r2,zero,10012e8 <StartTask+0x90>
      delay,
      alarm_handler,
      context) < 0)
      {
          printf("No system clock available!n");
 10012dc:	010040b4 	movhi	r4,258
 10012e0:	21271f04 	addi	r4,r4,-25476
 10012e4:	10027140 	call	1002714 <printf>

   /*
   * Creation of Kernel Objects
   */

  GrayedSem= OSSemCreate(0);
 10012e8:	0009883a 	mov	r4,zero
 10012ec:	10127380 	call	1012738 <OSSemCreate>
 10012f0:	d0974c15 	stw	r2,23856(gp)
  CalcCoordSem= OSSemCreate(0);
 10012f4:	0009883a 	mov	r4,zero
 10012f8:	10127380 	call	1012738 <OSSemCreate>
 10012fc:	d0974515 	stw	r2,23828(gp)
  CropSem= OSSemCreate(0);
 1001300:	0009883a 	mov	r4,zero
 1001304:	10127380 	call	1012738 <OSSemCreate>
 1001308:	d0974815 	stw	r2,23840(gp)
  xCorr2Sem = OSSemCreate(0);
 100130c:	0009883a 	mov	r4,zero
 1001310:	10127380 	call	1012738 <OSSemCreate>
 1001314:	d0974715 	stw	r2,23836(gp)
  PosMaxSem = OSSemCreate(0);
 1001318:	0009883a 	mov	r4,zero
 100131c:	10127380 	call	1012738 <OSSemCreate>
 1001320:	d0974415 	stw	r2,23824(gp)
  objectPosSem = OSSemCreate(0);
 1001324:	0009883a 	mov	r4,zero
 1001328:	10127380 	call	1012738 <OSSemCreate>
 100132c:	d0974615 	stw	r2,23832(gp)
  /*
   * Create statistics task
   */

  OSStatInit();
 1001330:	100d8fc0 	call	100d8fc <OSStatInit>
  /*
   * Creating Tasks in the system
   */


	err=OSTaskCreateExt(CalcCoordTask,
 1001334:	01804134 	movhi	r6,260
 1001338:	318f2904 	addi	r6,r6,15524
 100133c:	008002c4 	movi	r2,11
 1001340:	d8800015 	stw	r2,0(sp)
 1001344:	00804134 	movhi	r2,260
 1001348:	10872a04 	addi	r2,r2,7336
 100134c:	d8800115 	stw	r2,4(sp)
 1001350:	00820004 	movi	r2,2048
 1001354:	d8800215 	stw	r2,8(sp)
 1001358:	d8000315 	stw	zero,12(sp)
 100135c:	d8000415 	stw	zero,16(sp)
 1001360:	01004034 	movhi	r4,256
 1001364:	21026904 	addi	r4,r4,2468
 1001368:	000b883a 	mov	r5,zero
 100136c:	01c002c4 	movi	r7,11
 1001370:	10139f40 	call	10139f4 <OSTaskCreateExt>
 1001374:	d0974905 	stb	r2,23844(gp)
	 if (DEBUG) {
     if (err == OS_ERR_NONE) { //if start successful
      printf("CalcCoordTask created\n");
    }}

	err=OSTaskCreateExt(xCorr2Task,
 1001378:	018040f4 	movhi	r6,259
 100137c:	319f2904 	addi	r6,r6,31908
 1001380:	00800344 	movi	r2,13
 1001384:	d8800015 	stw	r2,0(sp)
 1001388:	008040f4 	movhi	r2,259
 100138c:	10972a04 	addi	r2,r2,23720
 1001390:	d8800115 	stw	r2,4(sp)
 1001394:	00820004 	movi	r2,2048
 1001398:	d8800215 	stw	r2,8(sp)
 100139c:	d8000315 	stw	zero,12(sp)
 10013a0:	d8000415 	stw	zero,16(sp)
 10013a4:	01004034 	movhi	r4,256
 10013a8:	2103c204 	addi	r4,r4,3848
 10013ac:	000b883a 	mov	r5,zero
 10013b0:	01c00344 	movi	r7,13
 10013b4:	10139f40 	call	10139f4 <OSTaskCreateExt>
 10013b8:	d0974905 	stb	r2,23844(gp)
	 if (DEBUG) {
     if (err == OS_ERR_NONE) { //if start successful
      printf("xCorr2Task created\n");
    }}

	err=OSTaskCreateExt(CropTask,
 10013bc:	01804134 	movhi	r6,260
 10013c0:	31af2904 	addi	r6,r6,-17244
 10013c4:	00800304 	movi	r2,12
 10013c8:	d8800015 	stw	r2,0(sp)
 10013cc:	00804134 	movhi	r2,260
 10013d0:	10a72a04 	addi	r2,r2,-25432
 10013d4:	d8800115 	stw	r2,4(sp)
 10013d8:	00820004 	movi	r2,2048
 10013dc:	d8800215 	stw	r2,8(sp)
 10013e0:	d8000315 	stw	zero,12(sp)
 10013e4:	d8000415 	stw	zero,16(sp)
 10013e8:	01004034 	movhi	r4,256
 10013ec:	2102d004 	addi	r4,r4,2880
 10013f0:	000b883a 	mov	r5,zero
 10013f4:	01c00304 	movi	r7,12
 10013f8:	10139f40 	call	10139f4 <OSTaskCreateExt>
 10013fc:	d0974905 	stb	r2,23844(gp)
		 if (err == OS_ERR_NONE) { //if start successful
		  printf("CropTask created\n");
   		 }
	}

	err=OSTaskCreateExt(PosMaxTask,
 1001400:	01804134 	movhi	r6,260
 1001404:	31872904 	addi	r6,r6,7332
 1001408:	00800384 	movi	r2,14
 100140c:	d8800015 	stw	r2,0(sp)
 1001410:	00804134 	movhi	r2,260
 1001414:	10bf2a04 	addi	r2,r2,-856
 1001418:	d8800115 	stw	r2,4(sp)
 100141c:	00820004 	movi	r2,2048
 1001420:	d8800215 	stw	r2,8(sp)
 1001424:	d8000315 	stw	zero,12(sp)
 1001428:	d8000415 	stw	zero,16(sp)
 100142c:	01004034 	movhi	r4,256
 1001430:	21043d04 	addi	r4,r4,4340
 1001434:	000b883a 	mov	r5,zero
 1001438:	01c00384 	movi	r7,14
 100143c:	10139f40 	call	10139f4 <OSTaskCreateExt>
 1001440:	d0974905 	stb	r2,23844(gp)
     if (err == OS_ERR_NONE) { //if start successful
      printf("PosMaxTask created\n");
    }else printf("\n%d\n",err);}


	err=OSTaskCreateExt(GrayTask,
 1001444:	01804134 	movhi	r6,260
 1001448:	31a72904 	addi	r6,r6,-25436
 100144c:	00800284 	movi	r2,10
 1001450:	d8800015 	stw	r2,0(sp)
 1001454:	008040f4 	movhi	r2,259
 1001458:	109f2a04 	addi	r2,r2,31912
 100145c:	d8800115 	stw	r2,4(sp)
 1001460:	00820004 	movi	r2,2048
 1001464:	d8800215 	stw	r2,8(sp)
 1001468:	d8000315 	stw	zero,12(sp)
 100146c:	d8000415 	stw	zero,16(sp)
 1001470:	01004034 	movhi	r4,256
 1001474:	2101b304 	addi	r4,r4,1740
 1001478:	000b883a 	mov	r5,zero
 100147c:	01c00284 	movi	r7,10
 1001480:	10139f40 	call	10139f4 <OSTaskCreateExt>
 1001484:	d0974905 	stb	r2,23844(gp)

	 if (DEBUG) {
     if (err == OS_ERR_NONE) { //if start successful
      printf("GrayTask created\n");
    }}
	err=OSTaskCreateExt(ObjectPosTask,
 1001488:	01804134 	movhi	r6,260
 100148c:	31bf2904 	addi	r6,r6,-860
 1001490:	008003c4 	movi	r2,15
 1001494:	d8800015 	stw	r2,0(sp)
 1001498:	00804134 	movhi	r2,260
 100149c:	10b72a04 	addi	r2,r2,-9048
 10014a0:	d8800115 	stw	r2,4(sp)
 10014a4:	00820004 	movi	r2,2048
 10014a8:	d8800215 	stw	r2,8(sp)
 10014ac:	d8000315 	stw	zero,12(sp)
 10014b0:	d8000415 	stw	zero,16(sp)
 10014b4:	01004034 	movhi	r4,256
 10014b8:	21047204 	addi	r4,r4,4552
 10014bc:	000b883a 	mov	r5,zero
 10014c0:	01c003c4 	movi	r7,15
 10014c4:	10139f40 	call	10139f4 <OSTaskCreateExt>
 10014c8:	d0974905 	stb	r2,23844(gp)
	 if (DEBUG) {
     if (err == OS_ERR_NONE) { //if start successful
      printf("ObjectPosTask created\n");
    }}

  printf("All Tasks and Kernel Objects generated!\n");
 10014cc:	010040b4 	movhi	r4,258
 10014d0:	21272604 	addi	r4,r4,-25448
 10014d4:	100288c0 	call	100288c <puts>

  /* Task deletes itself */

  OSTaskDel(OS_PRIO_SELF);
 10014d8:	01003fc4 	movi	r4,255
 10014dc:	1013c000 	call	1013c00 <OSTaskDel>
}
 10014e0:	e037883a 	mov	sp,fp
 10014e4:	dfc00117 	ldw	ra,4(sp)
 10014e8:	df000017 	ldw	fp,0(sp)
 10014ec:	dec00204 	addi	sp,sp,8
 10014f0:	f800283a 	ret

010014f4 <main>:


int main(void) {
 10014f4:	f811883a 	mov	r8,ra
 10014f8:	100c1d00 	call	100c1d0 <_mcount>
 10014fc:	403f883a 	mov	ra,r8
 1001500:	defff904 	addi	sp,sp,-28
 1001504:	dfc00615 	stw	ra,24(sp)
 1001508:	df000515 	stw	fp,20(sp)
 100150c:	df000504 	addi	fp,sp,20

  printf("MicroC/OS-II-Vesion: %1.2f\n", (double) OSVersion()/100.0);
 1001510:	100dc000 	call	100dc00 <OSVersion>
 1001514:	113fffcc 	andi	r4,r2,65535
 1001518:	1001eb80 	call	1001eb8 <__floatunsidf>
 100151c:	100b883a 	mov	r5,r2
 1001520:	180d883a 	mov	r6,r3
 1001524:	2809883a 	mov	r4,r5
 1001528:	300b883a 	mov	r5,r6
 100152c:	000d883a 	mov	r6,zero
 1001530:	01d01674 	movhi	r7,16473
 1001534:	1001c540 	call	1001c54 <__divdf3>
 1001538:	1009883a 	mov	r4,r2
 100153c:	180b883a 	mov	r5,r3
 1001540:	2005883a 	mov	r2,r4
 1001544:	2807883a 	mov	r3,r5
 1001548:	010040b4 	movhi	r4,258
 100154c:	21273004 	addi	r4,r4,-25408
 1001550:	100b883a 	mov	r5,r2
 1001554:	180d883a 	mov	r6,r3
 1001558:	10027140 	call	1002714 <printf>

  OSTaskCreateExt(
 100155c:	01804134 	movhi	r6,260
 1001560:	31b72904 	addi	r6,r6,-9052
 1001564:	00800044 	movi	r2,1
 1001568:	d8800015 	stw	r2,0(sp)
 100156c:	00804134 	movhi	r2,260
 1001570:	10af2a04 	addi	r2,r2,-17240
 1001574:	d8800115 	stw	r2,4(sp)
 1001578:	00820004 	movi	r2,2048
 100157c:	d8800215 	stw	r2,8(sp)
 1001580:	d8000315 	stw	zero,12(sp)
 1001584:	008000c4 	movi	r2,3
 1001588:	d8800415 	stw	r2,16(sp)
 100158c:	01004034 	movhi	r4,256
 1001590:	21049604 	addi	r4,r4,4696
 1001594:	000b883a 	mov	r5,zero
 1001598:	01c00044 	movi	r7,1
 100159c:	10139f40 	call	10139f4 <OSTaskCreateExt>
         (void *)&StartTask_Stack[0],
         TASK_STACKSIZE,
         (void *) 0,
         OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);

  OSStart();
 10015a0:	100d8800 	call	100d880 <OSStart>

  return 0;
 10015a4:	0005883a 	mov	r2,zero
}
 10015a8:	e037883a 	mov	sp,fp
 10015ac:	dfc00117 	ldw	ra,4(sp)
 10015b0:	df000017 	ldw	fp,0(sp)
 10015b4:	dec00204 	addi	sp,sp,8
 10015b8:	f800283a 	ret

010015bc <delay1>:
        .equ    delaycount,     12000
#        .equ    delaycount,     170
        .text                   # Instructions follow
        .global delay1           # Makes "main" globally known

delay1:  beq     r4,r0,fin       # exit outer loop
 10015bc:	20000626 	beq	r4,zero,10015d8 <fin>

        movi    r8,delaycount   # delay estimation for 1ms
 10015c0:	020bb804 	movi	r8,12000

010015c4 <inner>:

inner:  beq     r8,r0,outer     # exit from inner loop
 10015c4:	40000226 	beq	r8,zero,10015d0 <outer>

        subi    r8,r8,1         # decrement inner counter
 10015c8:	423fffc4 	addi	r8,r8,-1
        
        br      inner
 10015cc:	003ffd06 	br	10015c4 <inner>

010015d0 <outer>:
        
outer:  subi    r4,r4,1         # decrement outer counter
 10015d0:	213fffc4 	addi	r4,r4,-1
        br      delay1
 10015d4:	003ff906 	br	10015bc <delay1>

010015d8 <fin>:


fin:    ret
 10015d8:	f800283a 	ret

010015dc <__udivdi3>:
 10015dc:	f811883a 	mov	r8,ra
 10015e0:	100c1d00 	call	100c1d0 <_mcount>
 10015e4:	403f883a 	mov	ra,r8
 10015e8:	defff104 	addi	sp,sp,-60
 10015ec:	dfc00e15 	stw	ra,56(sp)
 10015f0:	df000d15 	stw	fp,52(sp)
 10015f4:	ddc00c15 	stw	r23,48(sp)
 10015f8:	dd800b15 	stw	r22,44(sp)
 10015fc:	dd400a15 	stw	r21,40(sp)
 1001600:	dd000915 	stw	r20,36(sp)
 1001604:	dcc00815 	stw	r19,32(sp)
 1001608:	dc800715 	stw	r18,28(sp)
 100160c:	dc400615 	stw	r17,24(sp)
 1001610:	dc000515 	stw	r16,20(sp)
 1001614:	0015883a 	mov	r10,zero
 1001618:	2005883a 	mov	r2,r4
 100161c:	3011883a 	mov	r8,r6
 1001620:	da800315 	stw	r10,12(sp)
 1001624:	4027883a 	mov	r19,r8
 1001628:	1039883a 	mov	fp,r2
 100162c:	282b883a 	mov	r21,r5
 1001630:	da800415 	stw	r10,16(sp)
 1001634:	3800401e 	bne	r7,zero,1001738 <__udivdi3+0x15c>
 1001638:	2a006536 	bltu	r5,r8,10017d0 <__udivdi3+0x1f4>
 100163c:	4000b526 	beq	r8,zero,1001914 <__udivdi3+0x338>
 1001640:	00bfffd4 	movui	r2,65535
 1001644:	14c0ad36 	bltu	r2,r19,10018fc <__udivdi3+0x320>
 1001648:	00803fc4 	movi	r2,255
 100164c:	14c15e36 	bltu	r2,r19,1001bc8 <__udivdi3+0x5ec>
 1001650:	000b883a 	mov	r5,zero
 1001654:	0005883a 	mov	r2,zero
 1001658:	9884d83a 	srl	r2,r19,r2
 100165c:	010040b4 	movhi	r4,258
 1001660:	21273c04 	addi	r4,r4,-25360
 1001664:	01800804 	movi	r6,32
 1001668:	1105883a 	add	r2,r2,r4
 100166c:	10c00003 	ldbu	r3,0(r2)
 1001670:	28c7883a 	add	r3,r5,r3
 1001674:	30e9c83a 	sub	r20,r6,r3
 1001678:	a0010a1e 	bne	r20,zero,1001aa4 <__udivdi3+0x4c8>
 100167c:	982ed43a 	srli	r23,r19,16
 1001680:	acebc83a 	sub	r21,r21,r19
 1001684:	9dbfffcc 	andi	r22,r19,65535
 1001688:	05000044 	movi	r20,1
 100168c:	a809883a 	mov	r4,r21
 1001690:	b80b883a 	mov	r5,r23
 1001694:	10021b80 	call	10021b8 <__udivsi3>
 1001698:	100b883a 	mov	r5,r2
 100169c:	b009883a 	mov	r4,r22
 10016a0:	1021883a 	mov	r16,r2
 10016a4:	10021e00 	call	10021e0 <__mulsi3>
 10016a8:	a809883a 	mov	r4,r21
 10016ac:	b80b883a 	mov	r5,r23
 10016b0:	1023883a 	mov	r17,r2
 10016b4:	10021cc0 	call	10021cc <__umodsi3>
 10016b8:	1004943a 	slli	r2,r2,16
 10016bc:	e006d43a 	srli	r3,fp,16
 10016c0:	10c4b03a 	or	r2,r2,r3
 10016c4:	1440042e 	bgeu	r2,r17,10016d8 <__udivdi3+0xfc>
 10016c8:	14c5883a 	add	r2,r2,r19
 10016cc:	843fffc4 	addi	r16,r16,-1
 10016d0:	14c00136 	bltu	r2,r19,10016d8 <__udivdi3+0xfc>
 10016d4:	14415c36 	bltu	r2,r17,1001c48 <__udivdi3+0x66c>
 10016d8:	1463c83a 	sub	r17,r2,r17
 10016dc:	8809883a 	mov	r4,r17
 10016e0:	b80b883a 	mov	r5,r23
 10016e4:	10021b80 	call	10021b8 <__udivsi3>
 10016e8:	100b883a 	mov	r5,r2
 10016ec:	b009883a 	mov	r4,r22
 10016f0:	102b883a 	mov	r21,r2
 10016f4:	10021e00 	call	10021e0 <__mulsi3>
 10016f8:	8809883a 	mov	r4,r17
 10016fc:	b80b883a 	mov	r5,r23
 1001700:	1025883a 	mov	r18,r2
 1001704:	10021cc0 	call	10021cc <__umodsi3>
 1001708:	1004943a 	slli	r2,r2,16
 100170c:	e0ffffcc 	andi	r3,fp,65535
 1001710:	10c4b03a 	or	r2,r2,r3
 1001714:	1480042e 	bgeu	r2,r18,1001728 <__udivdi3+0x14c>
 1001718:	9885883a 	add	r2,r19,r2
 100171c:	ad7fffc4 	addi	r21,r21,-1
 1001720:	14c00136 	bltu	r2,r19,1001728 <__udivdi3+0x14c>
 1001724:	14813c36 	bltu	r2,r18,1001c18 <__udivdi3+0x63c>
 1001728:	8004943a 	slli	r2,r16,16
 100172c:	a009883a 	mov	r4,r20
 1001730:	a884b03a 	or	r2,r21,r2
 1001734:	00001506 	br	100178c <__udivdi3+0x1b0>
 1001738:	380d883a 	mov	r6,r7
 100173c:	29c06c36 	bltu	r5,r7,10018f0 <__udivdi3+0x314>
 1001740:	00bfffd4 	movui	r2,65535
 1001744:	11c06436 	bltu	r2,r7,10018d8 <__udivdi3+0x2fc>
 1001748:	00803fc4 	movi	r2,255
 100174c:	11c11836 	bltu	r2,r7,1001bb0 <__udivdi3+0x5d4>
 1001750:	000b883a 	mov	r5,zero
 1001754:	0005883a 	mov	r2,zero
 1001758:	3084d83a 	srl	r2,r6,r2
 100175c:	010040b4 	movhi	r4,258
 1001760:	21273c04 	addi	r4,r4,-25360
 1001764:	01c00804 	movi	r7,32
 1001768:	1105883a 	add	r2,r2,r4
 100176c:	10c00003 	ldbu	r3,0(r2)
 1001770:	28c7883a 	add	r3,r5,r3
 1001774:	38edc83a 	sub	r22,r7,r3
 1001778:	b000731e 	bne	r22,zero,1001948 <__udivdi3+0x36c>
 100177c:	35400136 	bltu	r6,r21,1001784 <__udivdi3+0x1a8>
 1001780:	e4c05b36 	bltu	fp,r19,10018f0 <__udivdi3+0x314>
 1001784:	00800044 	movi	r2,1
 1001788:	0009883a 	mov	r4,zero
 100178c:	d8800315 	stw	r2,12(sp)
 1001790:	d9400317 	ldw	r5,12(sp)
 1001794:	2007883a 	mov	r3,r4
 1001798:	d9000415 	stw	r4,16(sp)
 100179c:	2805883a 	mov	r2,r5
 10017a0:	dfc00e17 	ldw	ra,56(sp)
 10017a4:	df000d17 	ldw	fp,52(sp)
 10017a8:	ddc00c17 	ldw	r23,48(sp)
 10017ac:	dd800b17 	ldw	r22,44(sp)
 10017b0:	dd400a17 	ldw	r21,40(sp)
 10017b4:	dd000917 	ldw	r20,36(sp)
 10017b8:	dcc00817 	ldw	r19,32(sp)
 10017bc:	dc800717 	ldw	r18,28(sp)
 10017c0:	dc400617 	ldw	r17,24(sp)
 10017c4:	dc000517 	ldw	r16,20(sp)
 10017c8:	dec00f04 	addi	sp,sp,60
 10017cc:	f800283a 	ret
 10017d0:	00bfffd4 	movui	r2,65535
 10017d4:	12005636 	bltu	r2,r8,1001930 <__udivdi3+0x354>
 10017d8:	00803fc4 	movi	r2,255
 10017dc:	12010036 	bltu	r2,r8,1001be0 <__udivdi3+0x604>
 10017e0:	000b883a 	mov	r5,zero
 10017e4:	0005883a 	mov	r2,zero
 10017e8:	9884d83a 	srl	r2,r19,r2
 10017ec:	010040b4 	movhi	r4,258
 10017f0:	21273c04 	addi	r4,r4,-25360
 10017f4:	01800804 	movi	r6,32
 10017f8:	1105883a 	add	r2,r2,r4
 10017fc:	10c00003 	ldbu	r3,0(r2)
 1001800:	28c7883a 	add	r3,r5,r3
 1001804:	30cbc83a 	sub	r5,r6,r3
 1001808:	28000626 	beq	r5,zero,1001824 <__udivdi3+0x248>
 100180c:	3145c83a 	sub	r2,r6,r5
 1001810:	e084d83a 	srl	r2,fp,r2
 1001814:	a946983a 	sll	r3,r21,r5
 1001818:	e178983a 	sll	fp,fp,r5
 100181c:	9966983a 	sll	r19,r19,r5
 1001820:	18aab03a 	or	r21,r3,r2
 1001824:	982ed43a 	srli	r23,r19,16
 1001828:	a809883a 	mov	r4,r21
 100182c:	9cbfffcc 	andi	r18,r19,65535
 1001830:	b80b883a 	mov	r5,r23
 1001834:	10021b80 	call	10021b8 <__udivsi3>
 1001838:	100b883a 	mov	r5,r2
 100183c:	9009883a 	mov	r4,r18
 1001840:	1021883a 	mov	r16,r2
 1001844:	10021e00 	call	10021e0 <__mulsi3>
 1001848:	a809883a 	mov	r4,r21
 100184c:	b80b883a 	mov	r5,r23
 1001850:	1023883a 	mov	r17,r2
 1001854:	10021cc0 	call	10021cc <__umodsi3>
 1001858:	1004943a 	slli	r2,r2,16
 100185c:	e006d43a 	srli	r3,fp,16
 1001860:	10c4b03a 	or	r2,r2,r3
 1001864:	1440042e 	bgeu	r2,r17,1001878 <__udivdi3+0x29c>
 1001868:	14c5883a 	add	r2,r2,r19
 100186c:	843fffc4 	addi	r16,r16,-1
 1001870:	14c00136 	bltu	r2,r19,1001878 <__udivdi3+0x29c>
 1001874:	1440ea36 	bltu	r2,r17,1001c20 <__udivdi3+0x644>
 1001878:	1463c83a 	sub	r17,r2,r17
 100187c:	8809883a 	mov	r4,r17
 1001880:	b80b883a 	mov	r5,r23
 1001884:	10021b80 	call	10021b8 <__udivsi3>
 1001888:	100b883a 	mov	r5,r2
 100188c:	9009883a 	mov	r4,r18
 1001890:	102b883a 	mov	r21,r2
 1001894:	10021e00 	call	10021e0 <__mulsi3>
 1001898:	8809883a 	mov	r4,r17
 100189c:	b80b883a 	mov	r5,r23
 10018a0:	1025883a 	mov	r18,r2
 10018a4:	10021cc0 	call	10021cc <__umodsi3>
 10018a8:	1004943a 	slli	r2,r2,16
 10018ac:	e0ffffcc 	andi	r3,fp,65535
 10018b0:	10c4b03a 	or	r2,r2,r3
 10018b4:	1480042e 	bgeu	r2,r18,10018c8 <__udivdi3+0x2ec>
 10018b8:	9885883a 	add	r2,r19,r2
 10018bc:	ad7fffc4 	addi	r21,r21,-1
 10018c0:	14c00136 	bltu	r2,r19,10018c8 <__udivdi3+0x2ec>
 10018c4:	1480d936 	bltu	r2,r18,1001c2c <__udivdi3+0x650>
 10018c8:	8004943a 	slli	r2,r16,16
 10018cc:	0009883a 	mov	r4,zero
 10018d0:	a884b03a 	or	r2,r21,r2
 10018d4:	003fad06 	br	100178c <__udivdi3+0x1b0>
 10018d8:	00804034 	movhi	r2,256
 10018dc:	10bfffc4 	addi	r2,r2,-1
 10018e0:	11c0b636 	bltu	r2,r7,1001bbc <__udivdi3+0x5e0>
 10018e4:	01400404 	movi	r5,16
 10018e8:	2805883a 	mov	r2,r5
 10018ec:	003f9a06 	br	1001758 <__udivdi3+0x17c>
 10018f0:	0005883a 	mov	r2,zero
 10018f4:	0009883a 	mov	r4,zero
 10018f8:	003fa406 	br	100178c <__udivdi3+0x1b0>
 10018fc:	00804034 	movhi	r2,256
 1001900:	10bfffc4 	addi	r2,r2,-1
 1001904:	14c0b336 	bltu	r2,r19,1001bd4 <__udivdi3+0x5f8>
 1001908:	01400404 	movi	r5,16
 100190c:	2805883a 	mov	r2,r5
 1001910:	003f5106 	br	1001658 <__udivdi3+0x7c>
 1001914:	01000044 	movi	r4,1
 1001918:	000b883a 	mov	r5,zero
 100191c:	10021b80 	call	10021b8 <__udivsi3>
 1001920:	1027883a 	mov	r19,r2
 1001924:	00bfffd4 	movui	r2,65535
 1001928:	14fff436 	bltu	r2,r19,10018fc <__udivdi3+0x320>
 100192c:	003f4606 	br	1001648 <__udivdi3+0x6c>
 1001930:	00804034 	movhi	r2,256
 1001934:	10bfffc4 	addi	r2,r2,-1
 1001938:	1200ac36 	bltu	r2,r8,1001bec <__udivdi3+0x610>
 100193c:	01400404 	movi	r5,16
 1001940:	2805883a 	mov	r2,r5
 1001944:	003fa806 	br	10017e8 <__udivdi3+0x20c>
 1001948:	3d85c83a 	sub	r2,r7,r22
 100194c:	3588983a 	sll	r4,r6,r22
 1001950:	9886d83a 	srl	r3,r19,r2
 1001954:	a8a2d83a 	srl	r17,r21,r2
 1001958:	e084d83a 	srl	r2,fp,r2
 100195c:	20eeb03a 	or	r23,r4,r3
 1001960:	b824d43a 	srli	r18,r23,16
 1001964:	ad86983a 	sll	r3,r21,r22
 1001968:	8809883a 	mov	r4,r17
 100196c:	900b883a 	mov	r5,r18
 1001970:	1886b03a 	or	r3,r3,r2
 1001974:	d8c00115 	stw	r3,4(sp)
 1001978:	bc3fffcc 	andi	r16,r23,65535
 100197c:	10021b80 	call	10021b8 <__udivsi3>
 1001980:	100b883a 	mov	r5,r2
 1001984:	8009883a 	mov	r4,r16
 1001988:	1029883a 	mov	r20,r2
 100198c:	10021e00 	call	10021e0 <__mulsi3>
 1001990:	900b883a 	mov	r5,r18
 1001994:	8809883a 	mov	r4,r17
 1001998:	102b883a 	mov	r21,r2
 100199c:	10021cc0 	call	10021cc <__umodsi3>
 10019a0:	d9400117 	ldw	r5,4(sp)
 10019a4:	1004943a 	slli	r2,r2,16
 10019a8:	9da6983a 	sll	r19,r19,r22
 10019ac:	2806d43a 	srli	r3,r5,16
 10019b0:	10c4b03a 	or	r2,r2,r3
 10019b4:	1540032e 	bgeu	r2,r21,10019c4 <__udivdi3+0x3e8>
 10019b8:	15c5883a 	add	r2,r2,r23
 10019bc:	a53fffc4 	addi	r20,r20,-1
 10019c0:	15c0912e 	bgeu	r2,r23,1001c08 <__udivdi3+0x62c>
 10019c4:	1563c83a 	sub	r17,r2,r21
 10019c8:	8809883a 	mov	r4,r17
 10019cc:	900b883a 	mov	r5,r18
 10019d0:	10021b80 	call	10021b8 <__udivsi3>
 10019d4:	100b883a 	mov	r5,r2
 10019d8:	8009883a 	mov	r4,r16
 10019dc:	102b883a 	mov	r21,r2
 10019e0:	10021e00 	call	10021e0 <__mulsi3>
 10019e4:	8809883a 	mov	r4,r17
 10019e8:	900b883a 	mov	r5,r18
 10019ec:	1021883a 	mov	r16,r2
 10019f0:	10021cc0 	call	10021cc <__umodsi3>
 10019f4:	da800117 	ldw	r10,4(sp)
 10019f8:	1004943a 	slli	r2,r2,16
 10019fc:	50ffffcc 	andi	r3,r10,65535
 1001a00:	10c6b03a 	or	r3,r2,r3
 1001a04:	1c00032e 	bgeu	r3,r16,1001a14 <__udivdi3+0x438>
 1001a08:	1dc7883a 	add	r3,r3,r23
 1001a0c:	ad7fffc4 	addi	r21,r21,-1
 1001a10:	1dc0792e 	bgeu	r3,r23,1001bf8 <__udivdi3+0x61c>
 1001a14:	a004943a 	slli	r2,r20,16
 1001a18:	982ed43a 	srli	r23,r19,16
 1001a1c:	9cffffcc 	andi	r19,r19,65535
 1001a20:	a8a4b03a 	or	r18,r21,r2
 1001a24:	947fffcc 	andi	r17,r18,65535
 1001a28:	902ad43a 	srli	r21,r18,16
 1001a2c:	8809883a 	mov	r4,r17
 1001a30:	980b883a 	mov	r5,r19
 1001a34:	1c21c83a 	sub	r16,r3,r16
 1001a38:	10021e00 	call	10021e0 <__mulsi3>
 1001a3c:	8809883a 	mov	r4,r17
 1001a40:	b80b883a 	mov	r5,r23
 1001a44:	1029883a 	mov	r20,r2
 1001a48:	10021e00 	call	10021e0 <__mulsi3>
 1001a4c:	980b883a 	mov	r5,r19
 1001a50:	a809883a 	mov	r4,r21
 1001a54:	1023883a 	mov	r17,r2
 1001a58:	10021e00 	call	10021e0 <__mulsi3>
 1001a5c:	a809883a 	mov	r4,r21
 1001a60:	b80b883a 	mov	r5,r23
 1001a64:	1027883a 	mov	r19,r2
 1001a68:	10021e00 	call	10021e0 <__mulsi3>
 1001a6c:	1009883a 	mov	r4,r2
 1001a70:	a004d43a 	srli	r2,r20,16
 1001a74:	8ce3883a 	add	r17,r17,r19
 1001a78:	1447883a 	add	r3,r2,r17
 1001a7c:	1cc0022e 	bgeu	r3,r19,1001a88 <__udivdi3+0x4ac>
 1001a80:	00800074 	movhi	r2,1
 1001a84:	2089883a 	add	r4,r4,r2
 1001a88:	1804d43a 	srli	r2,r3,16
 1001a8c:	2085883a 	add	r2,r4,r2
 1001a90:	80804436 	bltu	r16,r2,1001ba4 <__udivdi3+0x5c8>
 1001a94:	80803e26 	beq	r16,r2,1001b90 <__udivdi3+0x5b4>
 1001a98:	9005883a 	mov	r2,r18
 1001a9c:	0009883a 	mov	r4,zero
 1001aa0:	003f3a06 	br	100178c <__udivdi3+0x1b0>
 1001aa4:	9d26983a 	sll	r19,r19,r20
 1001aa8:	3505c83a 	sub	r2,r6,r20
 1001aac:	a8a2d83a 	srl	r17,r21,r2
 1001ab0:	982ed43a 	srli	r23,r19,16
 1001ab4:	e084d83a 	srl	r2,fp,r2
 1001ab8:	ad06983a 	sll	r3,r21,r20
 1001abc:	8809883a 	mov	r4,r17
 1001ac0:	b80b883a 	mov	r5,r23
 1001ac4:	1886b03a 	or	r3,r3,r2
 1001ac8:	d8c00015 	stw	r3,0(sp)
 1001acc:	9dbfffcc 	andi	r22,r19,65535
 1001ad0:	10021b80 	call	10021b8 <__udivsi3>
 1001ad4:	100b883a 	mov	r5,r2
 1001ad8:	b009883a 	mov	r4,r22
 1001adc:	d8800215 	stw	r2,8(sp)
 1001ae0:	10021e00 	call	10021e0 <__mulsi3>
 1001ae4:	8809883a 	mov	r4,r17
 1001ae8:	b80b883a 	mov	r5,r23
 1001aec:	102b883a 	mov	r21,r2
 1001af0:	10021cc0 	call	10021cc <__umodsi3>
 1001af4:	d9000017 	ldw	r4,0(sp)
 1001af8:	1004943a 	slli	r2,r2,16
 1001afc:	2006d43a 	srli	r3,r4,16
 1001b00:	10c4b03a 	or	r2,r2,r3
 1001b04:	1540052e 	bgeu	r2,r21,1001b1c <__udivdi3+0x540>
 1001b08:	d9400217 	ldw	r5,8(sp)
 1001b0c:	14c5883a 	add	r2,r2,r19
 1001b10:	297fffc4 	addi	r5,r5,-1
 1001b14:	d9400215 	stw	r5,8(sp)
 1001b18:	14c0462e 	bgeu	r2,r19,1001c34 <__udivdi3+0x658>
 1001b1c:	1563c83a 	sub	r17,r2,r21
 1001b20:	8809883a 	mov	r4,r17
 1001b24:	b80b883a 	mov	r5,r23
 1001b28:	10021b80 	call	10021b8 <__udivsi3>
 1001b2c:	100b883a 	mov	r5,r2
 1001b30:	b009883a 	mov	r4,r22
 1001b34:	1025883a 	mov	r18,r2
 1001b38:	10021e00 	call	10021e0 <__mulsi3>
 1001b3c:	8809883a 	mov	r4,r17
 1001b40:	b80b883a 	mov	r5,r23
 1001b44:	1021883a 	mov	r16,r2
 1001b48:	10021cc0 	call	10021cc <__umodsi3>
 1001b4c:	da800017 	ldw	r10,0(sp)
 1001b50:	1004943a 	slli	r2,r2,16
 1001b54:	50ffffcc 	andi	r3,r10,65535
 1001b58:	10c6b03a 	or	r3,r2,r3
 1001b5c:	1c00062e 	bgeu	r3,r16,1001b78 <__udivdi3+0x59c>
 1001b60:	1cc7883a 	add	r3,r3,r19
 1001b64:	94bfffc4 	addi	r18,r18,-1
 1001b68:	1cc00336 	bltu	r3,r19,1001b78 <__udivdi3+0x59c>
 1001b6c:	1c00022e 	bgeu	r3,r16,1001b78 <__udivdi3+0x59c>
 1001b70:	94bfffc4 	addi	r18,r18,-1
 1001b74:	1cc7883a 	add	r3,r3,r19
 1001b78:	d9000217 	ldw	r4,8(sp)
 1001b7c:	e538983a 	sll	fp,fp,r20
 1001b80:	1c2bc83a 	sub	r21,r3,r16
 1001b84:	2004943a 	slli	r2,r4,16
 1001b88:	90a8b03a 	or	r20,r18,r2
 1001b8c:	003ebf06 	br	100168c <__udivdi3+0xb0>
 1001b90:	1804943a 	slli	r2,r3,16
 1001b94:	e588983a 	sll	r4,fp,r22
 1001b98:	a0ffffcc 	andi	r3,r20,65535
 1001b9c:	10c5883a 	add	r2,r2,r3
 1001ba0:	20bfbd2e 	bgeu	r4,r2,1001a98 <__udivdi3+0x4bc>
 1001ba4:	90bfffc4 	addi	r2,r18,-1
 1001ba8:	0009883a 	mov	r4,zero
 1001bac:	003ef706 	br	100178c <__udivdi3+0x1b0>
 1001bb0:	01400204 	movi	r5,8
 1001bb4:	2805883a 	mov	r2,r5
 1001bb8:	003ee706 	br	1001758 <__udivdi3+0x17c>
 1001bbc:	01400604 	movi	r5,24
 1001bc0:	2805883a 	mov	r2,r5
 1001bc4:	003ee406 	br	1001758 <__udivdi3+0x17c>
 1001bc8:	01400204 	movi	r5,8
 1001bcc:	2805883a 	mov	r2,r5
 1001bd0:	003ea106 	br	1001658 <__udivdi3+0x7c>
 1001bd4:	01400604 	movi	r5,24
 1001bd8:	2805883a 	mov	r2,r5
 1001bdc:	003e9e06 	br	1001658 <__udivdi3+0x7c>
 1001be0:	01400204 	movi	r5,8
 1001be4:	2805883a 	mov	r2,r5
 1001be8:	003eff06 	br	10017e8 <__udivdi3+0x20c>
 1001bec:	01400604 	movi	r5,24
 1001bf0:	2805883a 	mov	r2,r5
 1001bf4:	003efc06 	br	10017e8 <__udivdi3+0x20c>
 1001bf8:	1c3f862e 	bgeu	r3,r16,1001a14 <__udivdi3+0x438>
 1001bfc:	1dc7883a 	add	r3,r3,r23
 1001c00:	ad7fffc4 	addi	r21,r21,-1
 1001c04:	003f8306 	br	1001a14 <__udivdi3+0x438>
 1001c08:	157f6e2e 	bgeu	r2,r21,10019c4 <__udivdi3+0x3e8>
 1001c0c:	a53fffc4 	addi	r20,r20,-1
 1001c10:	15c5883a 	add	r2,r2,r23
 1001c14:	003f6b06 	br	10019c4 <__udivdi3+0x3e8>
 1001c18:	ad7fffc4 	addi	r21,r21,-1
 1001c1c:	003ec206 	br	1001728 <__udivdi3+0x14c>
 1001c20:	843fffc4 	addi	r16,r16,-1
 1001c24:	14c5883a 	add	r2,r2,r19
 1001c28:	003f1306 	br	1001878 <__udivdi3+0x29c>
 1001c2c:	ad7fffc4 	addi	r21,r21,-1
 1001c30:	003f2506 	br	10018c8 <__udivdi3+0x2ec>
 1001c34:	157fb92e 	bgeu	r2,r21,1001b1c <__udivdi3+0x540>
 1001c38:	297fffc4 	addi	r5,r5,-1
 1001c3c:	14c5883a 	add	r2,r2,r19
 1001c40:	d9400215 	stw	r5,8(sp)
 1001c44:	003fb506 	br	1001b1c <__udivdi3+0x540>
 1001c48:	843fffc4 	addi	r16,r16,-1
 1001c4c:	14c5883a 	add	r2,r2,r19
 1001c50:	003ea106 	br	10016d8 <__udivdi3+0xfc>

01001c54 <__divdf3>:
 1001c54:	f811883a 	mov	r8,ra
 1001c58:	100c1d00 	call	100c1d0 <_mcount>
 1001c5c:	403f883a 	mov	ra,r8
 1001c60:	deffed04 	addi	sp,sp,-76
 1001c64:	dfc01215 	stw	ra,72(sp)
 1001c68:	dcc01115 	stw	r19,68(sp)
 1001c6c:	dc801015 	stw	r18,64(sp)
 1001c70:	dc400f15 	stw	r17,60(sp)
 1001c74:	dc000e15 	stw	r16,56(sp)
 1001c78:	dcc00404 	addi	r19,sp,16
 1001c7c:	2011883a 	mov	r8,r4
 1001c80:	2813883a 	mov	r9,r5
 1001c84:	d809883a 	mov	r4,sp
 1001c88:	980b883a 	mov	r5,r19
 1001c8c:	dc000904 	addi	r16,sp,36
 1001c90:	da400115 	stw	r9,4(sp)
 1001c94:	d9c00315 	stw	r7,12(sp)
 1001c98:	da000015 	stw	r8,0(sp)
 1001c9c:	d9800215 	stw	r6,8(sp)
 1001ca0:	10025d00 	call	10025d0 <__unpack_d>
 1001ca4:	d9000204 	addi	r4,sp,8
 1001ca8:	800b883a 	mov	r5,r16
 1001cac:	10025d00 	call	10025d0 <__unpack_d>
 1001cb0:	d9000417 	ldw	r4,16(sp)
 1001cb4:	00800044 	movi	r2,1
 1001cb8:	11000b2e 	bgeu	r2,r4,1001ce8 <__divdf3+0x94>
 1001cbc:	d9400917 	ldw	r5,36(sp)
 1001cc0:	1140762e 	bgeu	r2,r5,1001e9c <__divdf3+0x248>
 1001cc4:	d8800517 	ldw	r2,20(sp)
 1001cc8:	d8c00a17 	ldw	r3,40(sp)
 1001ccc:	01800104 	movi	r6,4
 1001cd0:	10c4f03a 	xor	r2,r2,r3
 1001cd4:	d8800515 	stw	r2,20(sp)
 1001cd8:	21800226 	beq	r4,r6,1001ce4 <__divdf3+0x90>
 1001cdc:	00800084 	movi	r2,2
 1001ce0:	2080141e 	bne	r4,r2,1001d34 <__divdf3+0xe0>
 1001ce4:	29000926 	beq	r5,r4,1001d0c <__divdf3+0xb8>
 1001ce8:	9809883a 	mov	r4,r19
 1001cec:	10022b00 	call	10022b0 <__pack_d>
 1001cf0:	dfc01217 	ldw	ra,72(sp)
 1001cf4:	dcc01117 	ldw	r19,68(sp)
 1001cf8:	dc801017 	ldw	r18,64(sp)
 1001cfc:	dc400f17 	ldw	r17,60(sp)
 1001d00:	dc000e17 	ldw	r16,56(sp)
 1001d04:	dec01304 	addi	sp,sp,76
 1001d08:	f800283a 	ret
 1001d0c:	010040b4 	movhi	r4,258
 1001d10:	21273704 	addi	r4,r4,-25380
 1001d14:	10022b00 	call	10022b0 <__pack_d>
 1001d18:	dfc01217 	ldw	ra,72(sp)
 1001d1c:	dcc01117 	ldw	r19,68(sp)
 1001d20:	dc801017 	ldw	r18,64(sp)
 1001d24:	dc400f17 	ldw	r17,60(sp)
 1001d28:	dc000e17 	ldw	r16,56(sp)
 1001d2c:	dec01304 	addi	sp,sp,76
 1001d30:	f800283a 	ret
 1001d34:	29805b26 	beq	r5,r6,1001ea4 <__divdf3+0x250>
 1001d38:	28802d26 	beq	r5,r2,1001df0 <__divdf3+0x19c>
 1001d3c:	d8c00617 	ldw	r3,24(sp)
 1001d40:	d8800b17 	ldw	r2,44(sp)
 1001d44:	d9c00817 	ldw	r7,32(sp)
 1001d48:	dc400d17 	ldw	r17,52(sp)
 1001d4c:	188bc83a 	sub	r5,r3,r2
 1001d50:	d9800717 	ldw	r6,28(sp)
 1001d54:	dc000c17 	ldw	r16,48(sp)
 1001d58:	d9400615 	stw	r5,24(sp)
 1001d5c:	3c403836 	bltu	r7,r17,1001e40 <__divdf3+0x1ec>
 1001d60:	89c03626 	beq	r17,r7,1001e3c <__divdf3+0x1e8>
 1001d64:	0015883a 	mov	r10,zero
 1001d68:	001d883a 	mov	r14,zero
 1001d6c:	02c40034 	movhi	r11,4096
 1001d70:	001f883a 	mov	r15,zero
 1001d74:	003f883a 	mov	ra,zero
 1001d78:	04800f44 	movi	r18,61
 1001d7c:	00000f06 	br	1001dbc <__divdf3+0x168>
 1001d80:	601d883a 	mov	r14,r12
 1001d84:	681f883a 	mov	r15,r13
 1001d88:	400d883a 	mov	r6,r8
 1001d8c:	100f883a 	mov	r7,r2
 1001d90:	3191883a 	add	r8,r6,r6
 1001d94:	5808d07a 	srli	r4,r11,1
 1001d98:	4185803a 	cmpltu	r2,r8,r6
 1001d9c:	39d3883a 	add	r9,r7,r7
 1001da0:	28c6b03a 	or	r3,r5,r3
 1001da4:	1245883a 	add	r2,r2,r9
 1001da8:	1815883a 	mov	r10,r3
 1001dac:	2017883a 	mov	r11,r4
 1001db0:	400d883a 	mov	r6,r8
 1001db4:	100f883a 	mov	r7,r2
 1001db8:	fc801726 	beq	ra,r18,1001e18 <__divdf3+0x1c4>
 1001dbc:	580a97fa 	slli	r5,r11,31
 1001dc0:	5006d07a 	srli	r3,r10,1
 1001dc4:	ffc00044 	addi	ra,ra,1
 1001dc8:	3c7ff136 	bltu	r7,r17,1001d90 <__divdf3+0x13c>
 1001dcc:	3411c83a 	sub	r8,r6,r16
 1001dd0:	3205803a 	cmpltu	r2,r6,r8
 1001dd4:	3c53c83a 	sub	r9,r7,r17
 1001dd8:	7298b03a 	or	r12,r14,r10
 1001ddc:	7adab03a 	or	r13,r15,r11
 1001de0:	4885c83a 	sub	r2,r9,r2
 1001de4:	89ffe61e 	bne	r17,r7,1001d80 <__divdf3+0x12c>
 1001de8:	343fe936 	bltu	r6,r16,1001d90 <__divdf3+0x13c>
 1001dec:	003fe406 	br	1001d80 <__divdf3+0x12c>
 1001df0:	9809883a 	mov	r4,r19
 1001df4:	d9800415 	stw	r6,16(sp)
 1001df8:	10022b00 	call	10022b0 <__pack_d>
 1001dfc:	dfc01217 	ldw	ra,72(sp)
 1001e00:	dcc01117 	ldw	r19,68(sp)
 1001e04:	dc801017 	ldw	r18,64(sp)
 1001e08:	dc400f17 	ldw	r17,60(sp)
 1001e0c:	dc000e17 	ldw	r16,56(sp)
 1001e10:	dec01304 	addi	sp,sp,76
 1001e14:	f800283a 	ret
 1001e18:	00803fc4 	movi	r2,255
 1001e1c:	7090703a 	and	r8,r14,r2
 1001e20:	00802004 	movi	r2,128
 1001e24:	0007883a 	mov	r3,zero
 1001e28:	0013883a 	mov	r9,zero
 1001e2c:	40800d26 	beq	r8,r2,1001e64 <__divdf3+0x210>
 1001e30:	dbc00815 	stw	r15,32(sp)
 1001e34:	db800715 	stw	r14,28(sp)
 1001e38:	003fab06 	br	1001ce8 <__divdf3+0x94>
 1001e3c:	343fc92e 	bgeu	r6,r16,1001d64 <__divdf3+0x110>
 1001e40:	3185883a 	add	r2,r6,r6
 1001e44:	1189803a 	cmpltu	r4,r2,r6
 1001e48:	39c7883a 	add	r3,r7,r7
 1001e4c:	20c9883a 	add	r4,r4,r3
 1001e50:	297fffc4 	addi	r5,r5,-1
 1001e54:	100d883a 	mov	r6,r2
 1001e58:	200f883a 	mov	r7,r4
 1001e5c:	d9400615 	stw	r5,24(sp)
 1001e60:	003fc006 	br	1001d64 <__divdf3+0x110>
 1001e64:	483ff21e 	bne	r9,zero,1001e30 <__divdf3+0x1dc>
 1001e68:	01004004 	movi	r4,256
 1001e6c:	7104703a 	and	r2,r14,r4
 1001e70:	10c4b03a 	or	r2,r2,r3
 1001e74:	103fee1e 	bne	r2,zero,1001e30 <__divdf3+0x1dc>
 1001e78:	31c4b03a 	or	r2,r6,r7
 1001e7c:	103fec26 	beq	r2,zero,1001e30 <__divdf3+0x1dc>
 1001e80:	7205883a 	add	r2,r14,r8
 1001e84:	1391803a 	cmpltu	r8,r2,r14
 1001e88:	43d1883a 	add	r8,r8,r15
 1001e8c:	013fc004 	movi	r4,-256
 1001e90:	111c703a 	and	r14,r2,r4
 1001e94:	401f883a 	mov	r15,r8
 1001e98:	003fe506 	br	1001e30 <__divdf3+0x1dc>
 1001e9c:	8009883a 	mov	r4,r16
 1001ea0:	003f9206 	br	1001cec <__divdf3+0x98>
 1001ea4:	9809883a 	mov	r4,r19
 1001ea8:	d8000715 	stw	zero,28(sp)
 1001eac:	d8000815 	stw	zero,32(sp)
 1001eb0:	d8000615 	stw	zero,24(sp)
 1001eb4:	003f8d06 	br	1001cec <__divdf3+0x98>

01001eb8 <__floatunsidf>:
 1001eb8:	f811883a 	mov	r8,ra
 1001ebc:	100c1d00 	call	100c1d0 <_mcount>
 1001ec0:	403f883a 	mov	ra,r8
 1001ec4:	defff204 	addi	sp,sp,-56
 1001ec8:	dfc00d15 	stw	ra,52(sp)
 1001ecc:	ddc00c15 	stw	r23,48(sp)
 1001ed0:	dd800b15 	stw	r22,44(sp)
 1001ed4:	dd400a15 	stw	r21,40(sp)
 1001ed8:	dd000915 	stw	r20,36(sp)
 1001edc:	dcc00815 	stw	r19,32(sp)
 1001ee0:	dc800715 	stw	r18,28(sp)
 1001ee4:	dc400615 	stw	r17,24(sp)
 1001ee8:	dc000515 	stw	r16,20(sp)
 1001eec:	d8000115 	stw	zero,4(sp)
 1001ef0:	20000f1e 	bne	r4,zero,1001f30 <__floatunsidf+0x78>
 1001ef4:	00800084 	movi	r2,2
 1001ef8:	d8800015 	stw	r2,0(sp)
 1001efc:	d809883a 	mov	r4,sp
 1001f00:	10022b00 	call	10022b0 <__pack_d>
 1001f04:	dfc00d17 	ldw	ra,52(sp)
 1001f08:	ddc00c17 	ldw	r23,48(sp)
 1001f0c:	dd800b17 	ldw	r22,44(sp)
 1001f10:	dd400a17 	ldw	r21,40(sp)
 1001f14:	dd000917 	ldw	r20,36(sp)
 1001f18:	dcc00817 	ldw	r19,32(sp)
 1001f1c:	dc800717 	ldw	r18,28(sp)
 1001f20:	dc400617 	ldw	r17,24(sp)
 1001f24:	dc000517 	ldw	r16,20(sp)
 1001f28:	dec00e04 	addi	sp,sp,56
 1001f2c:	f800283a 	ret
 1001f30:	008000c4 	movi	r2,3
 1001f34:	00c00f04 	movi	r3,60
 1001f38:	002f883a 	mov	r23,zero
 1001f3c:	202d883a 	mov	r22,r4
 1001f40:	d8800015 	stw	r2,0(sp)
 1001f44:	d8c00215 	stw	r3,8(sp)
 1001f48:	d9000315 	stw	r4,12(sp)
 1001f4c:	ddc00415 	stw	r23,16(sp)
 1001f50:	10022240 	call	1002224 <__clzsi2>
 1001f54:	12400744 	addi	r9,r2,29
 1001f58:	48000b16 	blt	r9,zero,1001f88 <__floatunsidf+0xd0>
 1001f5c:	483fe726 	beq	r9,zero,1001efc <__floatunsidf+0x44>
 1001f60:	10bfff44 	addi	r2,r2,-3
 1001f64:	10002e16 	blt	r2,zero,1002020 <__floatunsidf+0x168>
 1001f68:	b0a2983a 	sll	r17,r22,r2
 1001f6c:	0021883a 	mov	r16,zero
 1001f70:	d8800217 	ldw	r2,8(sp)
 1001f74:	dc400415 	stw	r17,16(sp)
 1001f78:	dc000315 	stw	r16,12(sp)
 1001f7c:	1245c83a 	sub	r2,r2,r9
 1001f80:	d8800215 	stw	r2,8(sp)
 1001f84:	003fdd06 	br	1001efc <__floatunsidf+0x44>
 1001f88:	0255c83a 	sub	r10,zero,r9
 1001f8c:	51bff804 	addi	r6,r10,-32
 1001f90:	30001b16 	blt	r6,zero,1002000 <__floatunsidf+0x148>
 1001f94:	b9a8d83a 	srl	r20,r23,r6
 1001f98:	002b883a 	mov	r21,zero
 1001f9c:	000f883a 	mov	r7,zero
 1001fa0:	01000044 	movi	r4,1
 1001fa4:	0011883a 	mov	r8,zero
 1001fa8:	30002516 	blt	r6,zero,1002040 <__floatunsidf+0x188>
 1001fac:	21a6983a 	sll	r19,r4,r6
 1001fb0:	0025883a 	mov	r18,zero
 1001fb4:	00bfffc4 	movi	r2,-1
 1001fb8:	9089883a 	add	r4,r18,r2
 1001fbc:	988b883a 	add	r5,r19,r2
 1001fc0:	248d803a 	cmpltu	r6,r4,r18
 1001fc4:	314b883a 	add	r5,r6,r5
 1001fc8:	b104703a 	and	r2,r22,r4
 1001fcc:	b946703a 	and	r3,r23,r5
 1001fd0:	10c4b03a 	or	r2,r2,r3
 1001fd4:	10000226 	beq	r2,zero,1001fe0 <__floatunsidf+0x128>
 1001fd8:	01c00044 	movi	r7,1
 1001fdc:	0011883a 	mov	r8,zero
 1001fe0:	d9000217 	ldw	r4,8(sp)
 1001fe4:	a1c4b03a 	or	r2,r20,r7
 1001fe8:	aa06b03a 	or	r3,r21,r8
 1001fec:	2249c83a 	sub	r4,r4,r9
 1001ff0:	d8c00415 	stw	r3,16(sp)
 1001ff4:	d9000215 	stw	r4,8(sp)
 1001ff8:	d8800315 	stw	r2,12(sp)
 1001ffc:	003fbf06 	br	1001efc <__floatunsidf+0x44>
 1002000:	bdc7883a 	add	r3,r23,r23
 1002004:	008007c4 	movi	r2,31
 1002008:	1285c83a 	sub	r2,r2,r10
 100200c:	1886983a 	sll	r3,r3,r2
 1002010:	b2a8d83a 	srl	r20,r22,r10
 1002014:	baaad83a 	srl	r21,r23,r10
 1002018:	1d28b03a 	or	r20,r3,r20
 100201c:	003fdf06 	br	1001f9c <__floatunsidf+0xe4>
 1002020:	b006d07a 	srli	r3,r22,1
 1002024:	008007c4 	movi	r2,31
 1002028:	1245c83a 	sub	r2,r2,r9
 100202c:	1886d83a 	srl	r3,r3,r2
 1002030:	ba62983a 	sll	r17,r23,r9
 1002034:	b260983a 	sll	r16,r22,r9
 1002038:	1c62b03a 	or	r17,r3,r17
 100203c:	003fcc06 	br	1001f70 <__floatunsidf+0xb8>
 1002040:	2006d07a 	srli	r3,r4,1
 1002044:	008007c4 	movi	r2,31
 1002048:	1285c83a 	sub	r2,r2,r10
 100204c:	18a6d83a 	srl	r19,r3,r2
 1002050:	22a4983a 	sll	r18,r4,r10
 1002054:	003fd706 	br	1001fb4 <__floatunsidf+0xfc>

01002058 <udivmodsi4>:
 1002058:	f811883a 	mov	r8,ra
 100205c:	100c1d00 	call	100c1d0 <_mcount>
 1002060:	403f883a 	mov	ra,r8
 1002064:	29001b2e 	bgeu	r5,r4,10020d4 <udivmodsi4+0x7c>
 1002068:	28001a16 	blt	r5,zero,10020d4 <udivmodsi4+0x7c>
 100206c:	00800044 	movi	r2,1
 1002070:	0007883a 	mov	r3,zero
 1002074:	01c007c4 	movi	r7,31
 1002078:	00000306 	br	1002088 <udivmodsi4+0x30>
 100207c:	19c01326 	beq	r3,r7,10020cc <udivmodsi4+0x74>
 1002080:	18c00044 	addi	r3,r3,1
 1002084:	28000416 	blt	r5,zero,1002098 <udivmodsi4+0x40>
 1002088:	294b883a 	add	r5,r5,r5
 100208c:	1085883a 	add	r2,r2,r2
 1002090:	293ffa36 	bltu	r5,r4,100207c <udivmodsi4+0x24>
 1002094:	10000d26 	beq	r2,zero,10020cc <udivmodsi4+0x74>
 1002098:	0007883a 	mov	r3,zero
 100209c:	21400236 	bltu	r4,r5,10020a8 <udivmodsi4+0x50>
 10020a0:	2149c83a 	sub	r4,r4,r5
 10020a4:	1886b03a 	or	r3,r3,r2
 10020a8:	1004d07a 	srli	r2,r2,1
 10020ac:	280ad07a 	srli	r5,r5,1
 10020b0:	103ffa1e 	bne	r2,zero,100209c <udivmodsi4+0x44>
 10020b4:	30000226 	beq	r6,zero,10020c0 <udivmodsi4+0x68>
 10020b8:	2005883a 	mov	r2,r4
 10020bc:	f800283a 	ret
 10020c0:	1809883a 	mov	r4,r3
 10020c4:	2005883a 	mov	r2,r4
 10020c8:	f800283a 	ret
 10020cc:	0007883a 	mov	r3,zero
 10020d0:	003ff806 	br	10020b4 <udivmodsi4+0x5c>
 10020d4:	00800044 	movi	r2,1
 10020d8:	0007883a 	mov	r3,zero
 10020dc:	003fef06 	br	100209c <udivmodsi4+0x44>

010020e0 <__divsi3>:
 10020e0:	f811883a 	mov	r8,ra
 10020e4:	100c1d00 	call	100c1d0 <_mcount>
 10020e8:	403f883a 	mov	ra,r8
 10020ec:	defffe04 	addi	sp,sp,-8
 10020f0:	dfc00115 	stw	ra,4(sp)
 10020f4:	dc000015 	stw	r16,0(sp)
 10020f8:	0021883a 	mov	r16,zero
 10020fc:	20000c16 	blt	r4,zero,1002130 <__divsi3+0x50>
 1002100:	000d883a 	mov	r6,zero
 1002104:	28000e16 	blt	r5,zero,1002140 <__divsi3+0x60>
 1002108:	10020580 	call	1002058 <udivmodsi4>
 100210c:	1007883a 	mov	r3,r2
 1002110:	8005003a 	cmpeq	r2,r16,zero
 1002114:	1000011e 	bne	r2,zero,100211c <__divsi3+0x3c>
 1002118:	00c7c83a 	sub	r3,zero,r3
 100211c:	1805883a 	mov	r2,r3
 1002120:	dfc00117 	ldw	ra,4(sp)
 1002124:	dc000017 	ldw	r16,0(sp)
 1002128:	dec00204 	addi	sp,sp,8
 100212c:	f800283a 	ret
 1002130:	0109c83a 	sub	r4,zero,r4
 1002134:	04000044 	movi	r16,1
 1002138:	000d883a 	mov	r6,zero
 100213c:	283ff20e 	bge	r5,zero,1002108 <__divsi3+0x28>
 1002140:	014bc83a 	sub	r5,zero,r5
 1002144:	8021003a 	cmpeq	r16,r16,zero
 1002148:	003fef06 	br	1002108 <__divsi3+0x28>

0100214c <__modsi3>:
 100214c:	f811883a 	mov	r8,ra
 1002150:	100c1d00 	call	100c1d0 <_mcount>
 1002154:	403f883a 	mov	ra,r8
 1002158:	deffff04 	addi	sp,sp,-4
 100215c:	dfc00015 	stw	ra,0(sp)
 1002160:	01800044 	movi	r6,1
 1002164:	2807883a 	mov	r3,r5
 1002168:	20000416 	blt	r4,zero,100217c <__modsi3+0x30>
 100216c:	28000c16 	blt	r5,zero,10021a0 <__modsi3+0x54>
 1002170:	dfc00017 	ldw	ra,0(sp)
 1002174:	dec00104 	addi	sp,sp,4
 1002178:	10020581 	jmpi	1002058 <udivmodsi4>
 100217c:	0109c83a 	sub	r4,zero,r4
 1002180:	28000b16 	blt	r5,zero,10021b0 <__modsi3+0x64>
 1002184:	180b883a 	mov	r5,r3
 1002188:	01800044 	movi	r6,1
 100218c:	10020580 	call	1002058 <udivmodsi4>
 1002190:	0085c83a 	sub	r2,zero,r2
 1002194:	dfc00017 	ldw	ra,0(sp)
 1002198:	dec00104 	addi	sp,sp,4
 100219c:	f800283a 	ret
 10021a0:	014bc83a 	sub	r5,zero,r5
 10021a4:	dfc00017 	ldw	ra,0(sp)
 10021a8:	dec00104 	addi	sp,sp,4
 10021ac:	10020581 	jmpi	1002058 <udivmodsi4>
 10021b0:	0147c83a 	sub	r3,zero,r5
 10021b4:	003ff306 	br	1002184 <__modsi3+0x38>

010021b8 <__udivsi3>:
 10021b8:	f811883a 	mov	r8,ra
 10021bc:	100c1d00 	call	100c1d0 <_mcount>
 10021c0:	403f883a 	mov	ra,r8
 10021c4:	000d883a 	mov	r6,zero
 10021c8:	10020581 	jmpi	1002058 <udivmodsi4>

010021cc <__umodsi3>:
 10021cc:	f811883a 	mov	r8,ra
 10021d0:	100c1d00 	call	100c1d0 <_mcount>
 10021d4:	403f883a 	mov	ra,r8
 10021d8:	01800044 	movi	r6,1
 10021dc:	10020581 	jmpi	1002058 <udivmodsi4>

010021e0 <__mulsi3>:
 10021e0:	f811883a 	mov	r8,ra
 10021e4:	100c1d00 	call	100c1d0 <_mcount>
 10021e8:	403f883a 	mov	ra,r8
 10021ec:	20000a26 	beq	r4,zero,1002218 <__mulsi3+0x38>
 10021f0:	0007883a 	mov	r3,zero
 10021f4:	2080004c 	andi	r2,r4,1
 10021f8:	1005003a 	cmpeq	r2,r2,zero
 10021fc:	2008d07a 	srli	r4,r4,1
 1002200:	1000011e 	bne	r2,zero,1002208 <__mulsi3+0x28>
 1002204:	1947883a 	add	r3,r3,r5
 1002208:	294b883a 	add	r5,r5,r5
 100220c:	203ff91e 	bne	r4,zero,10021f4 <__mulsi3+0x14>
 1002210:	1805883a 	mov	r2,r3
 1002214:	f800283a 	ret
 1002218:	0007883a 	mov	r3,zero
 100221c:	1805883a 	mov	r2,r3
 1002220:	f800283a 	ret

01002224 <__clzsi2>:
 1002224:	f811883a 	mov	r8,ra
 1002228:	100c1d00 	call	100c1d0 <_mcount>
 100222c:	403f883a 	mov	ra,r8
 1002230:	00bfffd4 	movui	r2,65535
 1002234:	11000e36 	bltu	r2,r4,1002270 <__clzsi2+0x4c>
 1002238:	00803fc4 	movi	r2,255
 100223c:	01400204 	movi	r5,8
 1002240:	0007883a 	mov	r3,zero
 1002244:	11001036 	bltu	r2,r4,1002288 <__clzsi2+0x64>
 1002248:	000b883a 	mov	r5,zero
 100224c:	20c6d83a 	srl	r3,r4,r3
 1002250:	008040b4 	movhi	r2,258
 1002254:	10a73c04 	addi	r2,r2,-25360
 1002258:	1887883a 	add	r3,r3,r2
 100225c:	18800003 	ldbu	r2,0(r3)
 1002260:	00c00804 	movi	r3,32
 1002264:	2885883a 	add	r2,r5,r2
 1002268:	1885c83a 	sub	r2,r3,r2
 100226c:	f800283a 	ret
 1002270:	01400404 	movi	r5,16
 1002274:	00804034 	movhi	r2,256
 1002278:	10bfffc4 	addi	r2,r2,-1
 100227c:	2807883a 	mov	r3,r5
 1002280:	113ff22e 	bgeu	r2,r4,100224c <__clzsi2+0x28>
 1002284:	01400604 	movi	r5,24
 1002288:	2807883a 	mov	r3,r5
 100228c:	20c6d83a 	srl	r3,r4,r3
 1002290:	008040b4 	movhi	r2,258
 1002294:	10a73c04 	addi	r2,r2,-25360
 1002298:	1887883a 	add	r3,r3,r2
 100229c:	18800003 	ldbu	r2,0(r3)
 10022a0:	00c00804 	movi	r3,32
 10022a4:	2885883a 	add	r2,r5,r2
 10022a8:	1885c83a 	sub	r2,r3,r2
 10022ac:	f800283a 	ret

010022b0 <__pack_d>:
 10022b0:	f811883a 	mov	r8,ra
 10022b4:	100c1d00 	call	100c1d0 <_mcount>
 10022b8:	403f883a 	mov	ra,r8
 10022bc:	defffd04 	addi	sp,sp,-12
 10022c0:	dc800215 	stw	r18,8(sp)
 10022c4:	dc400115 	stw	r17,4(sp)
 10022c8:	dc000015 	stw	r16,0(sp)
 10022cc:	20c00017 	ldw	r3,0(r4)
 10022d0:	00800044 	movi	r2,1
 10022d4:	22000317 	ldw	r8,12(r4)
 10022d8:	001f883a 	mov	r15,zero
 10022dc:	22400417 	ldw	r9,16(r4)
 10022e0:	24000117 	ldw	r16,4(r4)
 10022e4:	10c0552e 	bgeu	r2,r3,100243c <__pack_d+0x18c>
 10022e8:	00800104 	movi	r2,4
 10022ec:	18804f26 	beq	r3,r2,100242c <__pack_d+0x17c>
 10022f0:	00800084 	movi	r2,2
 10022f4:	18800226 	beq	r3,r2,1002300 <__pack_d+0x50>
 10022f8:	4244b03a 	or	r2,r8,r9
 10022fc:	10001a1e 	bne	r2,zero,1002368 <__pack_d+0xb8>
 1002300:	000d883a 	mov	r6,zero
 1002304:	000f883a 	mov	r7,zero
 1002308:	0011883a 	mov	r8,zero
 100230c:	00800434 	movhi	r2,16
 1002310:	10bfffc4 	addi	r2,r2,-1
 1002314:	301d883a 	mov	r14,r6
 1002318:	3884703a 	and	r2,r7,r2
 100231c:	400a953a 	slli	r5,r8,20
 1002320:	79bffc2c 	andhi	r6,r15,65520
 1002324:	308cb03a 	or	r6,r6,r2
 1002328:	00e00434 	movhi	r3,32784
 100232c:	18ffffc4 	addi	r3,r3,-1
 1002330:	800497fa 	slli	r2,r16,31
 1002334:	30c6703a 	and	r3,r6,r3
 1002338:	1946b03a 	or	r3,r3,r5
 100233c:	01600034 	movhi	r5,32768
 1002340:	297fffc4 	addi	r5,r5,-1
 1002344:	194a703a 	and	r5,r3,r5
 1002348:	288ab03a 	or	r5,r5,r2
 100234c:	2807883a 	mov	r3,r5
 1002350:	7005883a 	mov	r2,r14
 1002354:	dc800217 	ldw	r18,8(sp)
 1002358:	dc400117 	ldw	r17,4(sp)
 100235c:	dc000017 	ldw	r16,0(sp)
 1002360:	dec00304 	addi	sp,sp,12
 1002364:	f800283a 	ret
 1002368:	21000217 	ldw	r4,8(r4)
 100236c:	00bf0084 	movi	r2,-1022
 1002370:	20803f16 	blt	r4,r2,1002470 <__pack_d+0x1c0>
 1002374:	0080ffc4 	movi	r2,1023
 1002378:	11002c16 	blt	r2,r4,100242c <__pack_d+0x17c>
 100237c:	00803fc4 	movi	r2,255
 1002380:	408c703a 	and	r6,r8,r2
 1002384:	00802004 	movi	r2,128
 1002388:	0007883a 	mov	r3,zero
 100238c:	000f883a 	mov	r7,zero
 1002390:	2280ffc4 	addi	r10,r4,1023
 1002394:	30801e26 	beq	r6,r2,1002410 <__pack_d+0x160>
 1002398:	00801fc4 	movi	r2,127
 100239c:	4089883a 	add	r4,r8,r2
 10023a0:	220d803a 	cmpltu	r6,r4,r8
 10023a4:	324d883a 	add	r6,r6,r9
 10023a8:	2011883a 	mov	r8,r4
 10023ac:	3013883a 	mov	r9,r6
 10023b0:	00880034 	movhi	r2,8192
 10023b4:	10bfffc4 	addi	r2,r2,-1
 10023b8:	12400d36 	bltu	r2,r9,10023f0 <__pack_d+0x140>
 10023bc:	4804963a 	slli	r2,r9,24
 10023c0:	400cd23a 	srli	r6,r8,8
 10023c4:	480ed23a 	srli	r7,r9,8
 10023c8:	013fffc4 	movi	r4,-1
 10023cc:	118cb03a 	or	r6,r2,r6
 10023d0:	01400434 	movhi	r5,16
 10023d4:	297fffc4 	addi	r5,r5,-1
 10023d8:	3104703a 	and	r2,r6,r4
 10023dc:	3946703a 	and	r3,r7,r5
 10023e0:	5201ffcc 	andi	r8,r10,2047
 10023e4:	100d883a 	mov	r6,r2
 10023e8:	180f883a 	mov	r7,r3
 10023ec:	003fc706 	br	100230c <__pack_d+0x5c>
 10023f0:	480897fa 	slli	r4,r9,31
 10023f4:	4004d07a 	srli	r2,r8,1
 10023f8:	4806d07a 	srli	r3,r9,1
 10023fc:	52800044 	addi	r10,r10,1
 1002400:	2084b03a 	or	r2,r4,r2
 1002404:	1011883a 	mov	r8,r2
 1002408:	1813883a 	mov	r9,r3
 100240c:	003feb06 	br	10023bc <__pack_d+0x10c>
 1002410:	383fe11e 	bne	r7,zero,1002398 <__pack_d+0xe8>
 1002414:	01004004 	movi	r4,256
 1002418:	4104703a 	and	r2,r8,r4
 100241c:	10c4b03a 	or	r2,r2,r3
 1002420:	103fe326 	beq	r2,zero,10023b0 <__pack_d+0x100>
 1002424:	3005883a 	mov	r2,r6
 1002428:	003fdc06 	br	100239c <__pack_d+0xec>
 100242c:	000d883a 	mov	r6,zero
 1002430:	000f883a 	mov	r7,zero
 1002434:	0201ffc4 	movi	r8,2047
 1002438:	003fb406 	br	100230c <__pack_d+0x5c>
 100243c:	0005883a 	mov	r2,zero
 1002440:	00c00234 	movhi	r3,8
 1002444:	408cb03a 	or	r6,r8,r2
 1002448:	48ceb03a 	or	r7,r9,r3
 100244c:	013fffc4 	movi	r4,-1
 1002450:	01400434 	movhi	r5,16
 1002454:	297fffc4 	addi	r5,r5,-1
 1002458:	3104703a 	and	r2,r6,r4
 100245c:	3946703a 	and	r3,r7,r5
 1002460:	100d883a 	mov	r6,r2
 1002464:	180f883a 	mov	r7,r3
 1002468:	0201ffc4 	movi	r8,2047
 100246c:	003fa706 	br	100230c <__pack_d+0x5c>
 1002470:	1109c83a 	sub	r4,r2,r4
 1002474:	00800e04 	movi	r2,56
 1002478:	11004316 	blt	r2,r4,1002588 <__pack_d+0x2d8>
 100247c:	21fff804 	addi	r7,r4,-32
 1002480:	38004516 	blt	r7,zero,1002598 <__pack_d+0x2e8>
 1002484:	49d8d83a 	srl	r12,r9,r7
 1002488:	001b883a 	mov	r13,zero
 100248c:	0023883a 	mov	r17,zero
 1002490:	01400044 	movi	r5,1
 1002494:	0025883a 	mov	r18,zero
 1002498:	38004716 	blt	r7,zero,10025b8 <__pack_d+0x308>
 100249c:	29d6983a 	sll	r11,r5,r7
 10024a0:	0015883a 	mov	r10,zero
 10024a4:	00bfffc4 	movi	r2,-1
 10024a8:	5089883a 	add	r4,r10,r2
 10024ac:	588b883a 	add	r5,r11,r2
 10024b0:	228d803a 	cmpltu	r6,r4,r10
 10024b4:	314b883a 	add	r5,r6,r5
 10024b8:	4104703a 	and	r2,r8,r4
 10024bc:	4946703a 	and	r3,r9,r5
 10024c0:	10c4b03a 	or	r2,r2,r3
 10024c4:	10000226 	beq	r2,zero,10024d0 <__pack_d+0x220>
 10024c8:	04400044 	movi	r17,1
 10024cc:	0025883a 	mov	r18,zero
 10024d0:	00803fc4 	movi	r2,255
 10024d4:	644eb03a 	or	r7,r12,r17
 10024d8:	3892703a 	and	r9,r7,r2
 10024dc:	00802004 	movi	r2,128
 10024e0:	6c90b03a 	or	r8,r13,r18
 10024e4:	0015883a 	mov	r10,zero
 10024e8:	48801626 	beq	r9,r2,1002544 <__pack_d+0x294>
 10024ec:	01001fc4 	movi	r4,127
 10024f0:	3905883a 	add	r2,r7,r4
 10024f4:	11cd803a 	cmpltu	r6,r2,r7
 10024f8:	320d883a 	add	r6,r6,r8
 10024fc:	100f883a 	mov	r7,r2
 1002500:	00840034 	movhi	r2,4096
 1002504:	10bfffc4 	addi	r2,r2,-1
 1002508:	3011883a 	mov	r8,r6
 100250c:	0007883a 	mov	r3,zero
 1002510:	11801b36 	bltu	r2,r6,1002580 <__pack_d+0x2d0>
 1002514:	4004963a 	slli	r2,r8,24
 1002518:	3808d23a 	srli	r4,r7,8
 100251c:	400ad23a 	srli	r5,r8,8
 1002520:	1813883a 	mov	r9,r3
 1002524:	1108b03a 	or	r4,r2,r4
 1002528:	00bfffc4 	movi	r2,-1
 100252c:	00c00434 	movhi	r3,16
 1002530:	18ffffc4 	addi	r3,r3,-1
 1002534:	208c703a 	and	r6,r4,r2
 1002538:	28ce703a 	and	r7,r5,r3
 100253c:	4a01ffcc 	andi	r8,r9,2047
 1002540:	003f7206 	br	100230c <__pack_d+0x5c>
 1002544:	503fe91e 	bne	r10,zero,10024ec <__pack_d+0x23c>
 1002548:	01004004 	movi	r4,256
 100254c:	3904703a 	and	r2,r7,r4
 1002550:	0007883a 	mov	r3,zero
 1002554:	10c4b03a 	or	r2,r2,r3
 1002558:	10000626 	beq	r2,zero,1002574 <__pack_d+0x2c4>
 100255c:	3a45883a 	add	r2,r7,r9
 1002560:	11cd803a 	cmpltu	r6,r2,r7
 1002564:	320d883a 	add	r6,r6,r8
 1002568:	100f883a 	mov	r7,r2
 100256c:	3011883a 	mov	r8,r6
 1002570:	0007883a 	mov	r3,zero
 1002574:	00840034 	movhi	r2,4096
 1002578:	10bfffc4 	addi	r2,r2,-1
 100257c:	123fe52e 	bgeu	r2,r8,1002514 <__pack_d+0x264>
 1002580:	00c00044 	movi	r3,1
 1002584:	003fe306 	br	1002514 <__pack_d+0x264>
 1002588:	0009883a 	mov	r4,zero
 100258c:	0013883a 	mov	r9,zero
 1002590:	000b883a 	mov	r5,zero
 1002594:	003fe406 	br	1002528 <__pack_d+0x278>
 1002598:	4a47883a 	add	r3,r9,r9
 100259c:	008007c4 	movi	r2,31
 10025a0:	1105c83a 	sub	r2,r2,r4
 10025a4:	1886983a 	sll	r3,r3,r2
 10025a8:	4118d83a 	srl	r12,r8,r4
 10025ac:	491ad83a 	srl	r13,r9,r4
 10025b0:	1b18b03a 	or	r12,r3,r12
 10025b4:	003fb506 	br	100248c <__pack_d+0x1dc>
 10025b8:	2806d07a 	srli	r3,r5,1
 10025bc:	008007c4 	movi	r2,31
 10025c0:	1105c83a 	sub	r2,r2,r4
 10025c4:	1896d83a 	srl	r11,r3,r2
 10025c8:	2914983a 	sll	r10,r5,r4
 10025cc:	003fb506 	br	10024a4 <__pack_d+0x1f4>

010025d0 <__unpack_d>:
 10025d0:	f811883a 	mov	r8,ra
 10025d4:	100c1d00 	call	100c1d0 <_mcount>
 10025d8:	403f883a 	mov	ra,r8
 10025dc:	20c00117 	ldw	r3,4(r4)
 10025e0:	22400017 	ldw	r9,0(r4)
 10025e4:	00800434 	movhi	r2,16
 10025e8:	10bfffc4 	addi	r2,r2,-1
 10025ec:	1808d53a 	srli	r4,r3,20
 10025f0:	180cd7fa 	srli	r6,r3,31
 10025f4:	1894703a 	and	r10,r3,r2
 10025f8:	2201ffcc 	andi	r8,r4,2047
 10025fc:	281b883a 	mov	r13,r5
 1002600:	4817883a 	mov	r11,r9
 1002604:	29800115 	stw	r6,4(r5)
 1002608:	5019883a 	mov	r12,r10
 100260c:	40001e1e 	bne	r8,zero,1002688 <__unpack_d+0xb8>
 1002610:	4a84b03a 	or	r2,r9,r10
 1002614:	10001926 	beq	r2,zero,100267c <__unpack_d+0xac>
 1002618:	4804d63a 	srli	r2,r9,24
 100261c:	500c923a 	slli	r6,r10,8
 1002620:	013f0084 	movi	r4,-1022
 1002624:	00c40034 	movhi	r3,4096
 1002628:	18ffffc4 	addi	r3,r3,-1
 100262c:	118cb03a 	or	r6,r2,r6
 1002630:	008000c4 	movi	r2,3
 1002634:	480a923a 	slli	r5,r9,8
 1002638:	68800015 	stw	r2,0(r13)
 100263c:	69000215 	stw	r4,8(r13)
 1002640:	19800b36 	bltu	r3,r6,1002670 <__unpack_d+0xa0>
 1002644:	200f883a 	mov	r7,r4
 1002648:	1811883a 	mov	r8,r3
 100264c:	2945883a 	add	r2,r5,r5
 1002650:	1149803a 	cmpltu	r4,r2,r5
 1002654:	3187883a 	add	r3,r6,r6
 1002658:	20c9883a 	add	r4,r4,r3
 100265c:	100b883a 	mov	r5,r2
 1002660:	200d883a 	mov	r6,r4
 1002664:	39ffffc4 	addi	r7,r7,-1
 1002668:	413ff82e 	bgeu	r8,r4,100264c <__unpack_d+0x7c>
 100266c:	69c00215 	stw	r7,8(r13)
 1002670:	69800415 	stw	r6,16(r13)
 1002674:	69400315 	stw	r5,12(r13)
 1002678:	f800283a 	ret
 100267c:	00800084 	movi	r2,2
 1002680:	28800015 	stw	r2,0(r5)
 1002684:	f800283a 	ret
 1002688:	0081ffc4 	movi	r2,2047
 100268c:	40800f26 	beq	r8,r2,10026cc <__unpack_d+0xfc>
 1002690:	480cd63a 	srli	r6,r9,24
 1002694:	5006923a 	slli	r3,r10,8
 1002698:	4804923a 	slli	r2,r9,8
 100269c:	0009883a 	mov	r4,zero
 10026a0:	30c6b03a 	or	r3,r6,r3
 10026a4:	01440034 	movhi	r5,4096
 10026a8:	110cb03a 	or	r6,r2,r4
 10026ac:	423f0044 	addi	r8,r8,-1023
 10026b0:	194eb03a 	or	r7,r3,r5
 10026b4:	008000c4 	movi	r2,3
 10026b8:	69c00415 	stw	r7,16(r13)
 10026bc:	6a000215 	stw	r8,8(r13)
 10026c0:	68800015 	stw	r2,0(r13)
 10026c4:	69800315 	stw	r6,12(r13)
 10026c8:	f800283a 	ret
 10026cc:	4a84b03a 	or	r2,r9,r10
 10026d0:	1000031e 	bne	r2,zero,10026e0 <__unpack_d+0x110>
 10026d4:	00800104 	movi	r2,4
 10026d8:	28800015 	stw	r2,0(r5)
 10026dc:	f800283a 	ret
 10026e0:	0009883a 	mov	r4,zero
 10026e4:	01400234 	movhi	r5,8
 10026e8:	4904703a 	and	r2,r9,r4
 10026ec:	5146703a 	and	r3,r10,r5
 10026f0:	10c4b03a 	or	r2,r2,r3
 10026f4:	10000526 	beq	r2,zero,100270c <__unpack_d+0x13c>
 10026f8:	00800044 	movi	r2,1
 10026fc:	68800015 	stw	r2,0(r13)
 1002700:	6b000415 	stw	r12,16(r13)
 1002704:	6ac00315 	stw	r11,12(r13)
 1002708:	f800283a 	ret
 100270c:	68000015 	stw	zero,0(r13)
 1002710:	003ffb06 	br	1002700 <__unpack_d+0x130>

01002714 <printf>:
 1002714:	f811883a 	mov	r8,ra
 1002718:	100c1d00 	call	100c1d0 <_mcount>
 100271c:	403f883a 	mov	ra,r8
 1002720:	defffb04 	addi	sp,sp,-20
 1002724:	dfc00115 	stw	ra,4(sp)
 1002728:	d9400215 	stw	r5,8(sp)
 100272c:	d9800315 	stw	r6,12(sp)
 1002730:	d9c00415 	stw	r7,16(sp)
 1002734:	008040b4 	movhi	r2,258
 1002738:	109f9804 	addi	r2,r2,32352
 100273c:	10c00017 	ldw	r3,0(r2)
 1002740:	200b883a 	mov	r5,r4
 1002744:	d8800204 	addi	r2,sp,8
 1002748:	19000217 	ldw	r4,8(r3)
 100274c:	100d883a 	mov	r6,r2
 1002750:	d8800015 	stw	r2,0(sp)
 1002754:	10048600 	call	1004860 <__vfprintf_internal>
 1002758:	dfc00117 	ldw	ra,4(sp)
 100275c:	dec00504 	addi	sp,sp,20
 1002760:	f800283a 	ret

01002764 <_printf_r>:
 1002764:	f811883a 	mov	r8,ra
 1002768:	100c1d00 	call	100c1d0 <_mcount>
 100276c:	403f883a 	mov	ra,r8
 1002770:	defffc04 	addi	sp,sp,-16
 1002774:	dfc00115 	stw	ra,4(sp)
 1002778:	d9800215 	stw	r6,8(sp)
 100277c:	d9c00315 	stw	r7,12(sp)
 1002780:	280d883a 	mov	r6,r5
 1002784:	21400217 	ldw	r5,8(r4)
 1002788:	d8c00204 	addi	r3,sp,8
 100278c:	180f883a 	mov	r7,r3
 1002790:	d8c00015 	stw	r3,0(sp)
 1002794:	10029900 	call	1002990 <___vfprintf_internal_r>
 1002798:	dfc00117 	ldw	ra,4(sp)
 100279c:	dec00404 	addi	sp,sp,16
 10027a0:	f800283a 	ret

010027a4 <putchar>:
 10027a4:	f811883a 	mov	r8,ra
 10027a8:	100c1d00 	call	100c1d0 <_mcount>
 10027ac:	403f883a 	mov	ra,r8
 10027b0:	008040b4 	movhi	r2,258
 10027b4:	109f9804 	addi	r2,r2,32352
 10027b8:	11800017 	ldw	r6,0(r2)
 10027bc:	200b883a 	mov	r5,r4
 10027c0:	3009883a 	mov	r4,r6
 10027c4:	31800217 	ldw	r6,8(r6)
 10027c8:	10092001 	jmpi	1009200 <_putc_r>

010027cc <_putchar_r>:
 10027cc:	f811883a 	mov	r8,ra
 10027d0:	100c1d00 	call	100c1d0 <_mcount>
 10027d4:	403f883a 	mov	ra,r8
 10027d8:	21800217 	ldw	r6,8(r4)
 10027dc:	10092001 	jmpi	1009200 <_putc_r>

010027e0 <_puts_r>:
 10027e0:	f811883a 	mov	r8,ra
 10027e4:	100c1d00 	call	100c1d0 <_mcount>
 10027e8:	403f883a 	mov	ra,r8
 10027ec:	defff604 	addi	sp,sp,-40
 10027f0:	dfc00915 	stw	ra,36(sp)
 10027f4:	dcc00815 	stw	r19,32(sp)
 10027f8:	dc400715 	stw	r17,28(sp)
 10027fc:	2023883a 	mov	r17,r4
 1002800:	2809883a 	mov	r4,r5
 1002804:	2827883a 	mov	r19,r5
 1002808:	10028ac0 	call	10028ac <strlen>
 100280c:	89400217 	ldw	r5,8(r17)
 1002810:	00c040b4 	movhi	r3,258
 1002814:	18e77c04 	addi	r3,r3,-25104
 1002818:	01c00044 	movi	r7,1
 100281c:	12000044 	addi	r8,r2,1
 1002820:	d8c00515 	stw	r3,20(sp)
 1002824:	d9c00615 	stw	r7,24(sp)
 1002828:	d8c00304 	addi	r3,sp,12
 100282c:	01c00084 	movi	r7,2
 1002830:	8809883a 	mov	r4,r17
 1002834:	d80d883a 	mov	r6,sp
 1002838:	d8c00015 	stw	r3,0(sp)
 100283c:	dcc00315 	stw	r19,12(sp)
 1002840:	da000215 	stw	r8,8(sp)
 1002844:	d9c00115 	stw	r7,4(sp)
 1002848:	d8800415 	stw	r2,16(sp)
 100284c:	1006c240 	call	1006c24 <__sfvwrite_r>
 1002850:	00ffffc4 	movi	r3,-1
 1002854:	10000626 	beq	r2,zero,1002870 <_puts_r+0x90>
 1002858:	1805883a 	mov	r2,r3
 100285c:	dfc00917 	ldw	ra,36(sp)
 1002860:	dcc00817 	ldw	r19,32(sp)
 1002864:	dc400717 	ldw	r17,28(sp)
 1002868:	dec00a04 	addi	sp,sp,40
 100286c:	f800283a 	ret
 1002870:	00c00284 	movi	r3,10
 1002874:	1805883a 	mov	r2,r3
 1002878:	dfc00917 	ldw	ra,36(sp)
 100287c:	dcc00817 	ldw	r19,32(sp)
 1002880:	dc400717 	ldw	r17,28(sp)
 1002884:	dec00a04 	addi	sp,sp,40
 1002888:	f800283a 	ret

0100288c <puts>:
 100288c:	f811883a 	mov	r8,ra
 1002890:	100c1d00 	call	100c1d0 <_mcount>
 1002894:	403f883a 	mov	ra,r8
 1002898:	008040b4 	movhi	r2,258
 100289c:	109f9804 	addi	r2,r2,32352
 10028a0:	200b883a 	mov	r5,r4
 10028a4:	11000017 	ldw	r4,0(r2)
 10028a8:	10027e01 	jmpi	10027e0 <_puts_r>

010028ac <strlen>:
 10028ac:	f811883a 	mov	r8,ra
 10028b0:	100c1d00 	call	100c1d0 <_mcount>
 10028b4:	403f883a 	mov	ra,r8
 10028b8:	208000cc 	andi	r2,r4,3
 10028bc:	2011883a 	mov	r8,r4
 10028c0:	1000161e 	bne	r2,zero,100291c <strlen+0x70>
 10028c4:	20c00017 	ldw	r3,0(r4)
 10028c8:	017fbff4 	movhi	r5,65279
 10028cc:	297fbfc4 	addi	r5,r5,-257
 10028d0:	01e02074 	movhi	r7,32897
 10028d4:	39e02004 	addi	r7,r7,-32640
 10028d8:	1945883a 	add	r2,r3,r5
 10028dc:	11c4703a 	and	r2,r2,r7
 10028e0:	00c6303a 	nor	r3,zero,r3
 10028e4:	1886703a 	and	r3,r3,r2
 10028e8:	18000c1e 	bne	r3,zero,100291c <strlen+0x70>
 10028ec:	280d883a 	mov	r6,r5
 10028f0:	380b883a 	mov	r5,r7
 10028f4:	21000104 	addi	r4,r4,4
 10028f8:	20800017 	ldw	r2,0(r4)
 10028fc:	1187883a 	add	r3,r2,r6
 1002900:	1946703a 	and	r3,r3,r5
 1002904:	0084303a 	nor	r2,zero,r2
 1002908:	10c4703a 	and	r2,r2,r3
 100290c:	103ff926 	beq	r2,zero,10028f4 <strlen+0x48>
 1002910:	20800007 	ldb	r2,0(r4)
 1002914:	10000326 	beq	r2,zero,1002924 <strlen+0x78>
 1002918:	21000044 	addi	r4,r4,1
 100291c:	20800007 	ldb	r2,0(r4)
 1002920:	103ffd1e 	bne	r2,zero,1002918 <strlen+0x6c>
 1002924:	2205c83a 	sub	r2,r4,r8
 1002928:	f800283a 	ret

0100292c <__sprint_r>:
 100292c:	f811883a 	mov	r8,ra
 1002930:	100c1d00 	call	100c1d0 <_mcount>
 1002934:	403f883a 	mov	ra,r8
 1002938:	defffe04 	addi	sp,sp,-8
 100293c:	dfc00115 	stw	ra,4(sp)
 1002940:	dc000015 	stw	r16,0(sp)
 1002944:	30800217 	ldw	r2,8(r6)
 1002948:	3021883a 	mov	r16,r6
 100294c:	0007883a 	mov	r3,zero
 1002950:	1000061e 	bne	r2,zero,100296c <__sprint_r+0x40>
 1002954:	1805883a 	mov	r2,r3
 1002958:	30000115 	stw	zero,4(r6)
 100295c:	dfc00117 	ldw	ra,4(sp)
 1002960:	dc000017 	ldw	r16,0(sp)
 1002964:	dec00204 	addi	sp,sp,8
 1002968:	f800283a 	ret
 100296c:	1006c240 	call	1006c24 <__sfvwrite_r>
 1002970:	1007883a 	mov	r3,r2
 1002974:	1805883a 	mov	r2,r3
 1002978:	80000115 	stw	zero,4(r16)
 100297c:	80000215 	stw	zero,8(r16)
 1002980:	dfc00117 	ldw	ra,4(sp)
 1002984:	dc000017 	ldw	r16,0(sp)
 1002988:	dec00204 	addi	sp,sp,8
 100298c:	f800283a 	ret

01002990 <___vfprintf_internal_r>:
 1002990:	f811883a 	mov	r8,ra
 1002994:	100c1d00 	call	100c1d0 <_mcount>
 1002998:	403f883a 	mov	ra,r8
 100299c:	defea404 	addi	sp,sp,-1392
 10029a0:	dfc15b15 	stw	ra,1388(sp)
 10029a4:	df015a15 	stw	fp,1384(sp)
 10029a8:	ddc15915 	stw	r23,1380(sp)
 10029ac:	dd815815 	stw	r22,1376(sp)
 10029b0:	dd415715 	stw	r21,1372(sp)
 10029b4:	dd015615 	stw	r20,1368(sp)
 10029b8:	dcc15515 	stw	r19,1364(sp)
 10029bc:	dc815415 	stw	r18,1360(sp)
 10029c0:	dc415315 	stw	r17,1356(sp)
 10029c4:	dc015215 	stw	r16,1352(sp)
 10029c8:	d9c15115 	stw	r7,1348(sp)
 10029cc:	282d883a 	mov	r22,r5
 10029d0:	3021883a 	mov	r16,r6
 10029d4:	d9014f15 	stw	r4,1340(sp)
 10029d8:	10072780 	call	1007278 <_localeconv_r>
 10029dc:	10800017 	ldw	r2,0(r2)
 10029e0:	d9c15117 	ldw	r7,1348(sp)
 10029e4:	d8814915 	stw	r2,1316(sp)
 10029e8:	d8814f17 	ldw	r2,1340(sp)
 10029ec:	10000226 	beq	r2,zero,10029f8 <___vfprintf_internal_r+0x68>
 10029f0:	10800e17 	ldw	r2,56(r2)
 10029f4:	10020d26 	beq	r2,zero,100322c <___vfprintf_internal_r+0x89c>
 10029f8:	b080030b 	ldhu	r2,12(r22)
 10029fc:	1080020c 	andi	r2,r2,8
 1002a00:	10020e26 	beq	r2,zero,100323c <___vfprintf_internal_r+0x8ac>
 1002a04:	b0800417 	ldw	r2,16(r22)
 1002a08:	10020c26 	beq	r2,zero,100323c <___vfprintf_internal_r+0x8ac>
 1002a0c:	b200030b 	ldhu	r8,12(r22)
 1002a10:	00800284 	movi	r2,10
 1002a14:	40c0068c 	andi	r3,r8,26
 1002a18:	18802f1e 	bne	r3,r2,1002ad8 <___vfprintf_internal_r+0x148>
 1002a1c:	b080038f 	ldh	r2,14(r22)
 1002a20:	10002d16 	blt	r2,zero,1002ad8 <___vfprintf_internal_r+0x148>
 1002a24:	b240038b 	ldhu	r9,14(r22)
 1002a28:	b2800717 	ldw	r10,28(r22)
 1002a2c:	b2c00917 	ldw	r11,36(r22)
 1002a30:	d9014f17 	ldw	r4,1340(sp)
 1002a34:	dc402904 	addi	r17,sp,164
 1002a38:	d8804004 	addi	r2,sp,256
 1002a3c:	00c10004 	movi	r3,1024
 1002a40:	423fff4c 	andi	r8,r8,65533
 1002a44:	800d883a 	mov	r6,r16
 1002a48:	880b883a 	mov	r5,r17
 1002a4c:	da002c0d 	sth	r8,176(sp)
 1002a50:	da402c8d 	sth	r9,178(sp)
 1002a54:	da803015 	stw	r10,192(sp)
 1002a58:	dac03215 	stw	r11,200(sp)
 1002a5c:	d8802d15 	stw	r2,180(sp)
 1002a60:	d8c02e15 	stw	r3,184(sp)
 1002a64:	d8802915 	stw	r2,164(sp)
 1002a68:	d8c02b15 	stw	r3,172(sp)
 1002a6c:	d8002f15 	stw	zero,188(sp)
 1002a70:	10029900 	call	1002990 <___vfprintf_internal_r>
 1002a74:	d8814b15 	stw	r2,1324(sp)
 1002a78:	10000416 	blt	r2,zero,1002a8c <___vfprintf_internal_r+0xfc>
 1002a7c:	d9014f17 	ldw	r4,1340(sp)
 1002a80:	880b883a 	mov	r5,r17
 1002a84:	10061e80 	call	10061e8 <_fflush_r>
 1002a88:	1002321e 	bne	r2,zero,1003354 <___vfprintf_internal_r+0x9c4>
 1002a8c:	d8802c0b 	ldhu	r2,176(sp)
 1002a90:	1080100c 	andi	r2,r2,64
 1002a94:	10000326 	beq	r2,zero,1002aa4 <___vfprintf_internal_r+0x114>
 1002a98:	b080030b 	ldhu	r2,12(r22)
 1002a9c:	10801014 	ori	r2,r2,64
 1002aa0:	b080030d 	sth	r2,12(r22)
 1002aa4:	d8814b17 	ldw	r2,1324(sp)
 1002aa8:	dfc15b17 	ldw	ra,1388(sp)
 1002aac:	df015a17 	ldw	fp,1384(sp)
 1002ab0:	ddc15917 	ldw	r23,1380(sp)
 1002ab4:	dd815817 	ldw	r22,1376(sp)
 1002ab8:	dd415717 	ldw	r21,1372(sp)
 1002abc:	dd015617 	ldw	r20,1368(sp)
 1002ac0:	dcc15517 	ldw	r19,1364(sp)
 1002ac4:	dc815417 	ldw	r18,1360(sp)
 1002ac8:	dc415317 	ldw	r17,1356(sp)
 1002acc:	dc015217 	ldw	r16,1352(sp)
 1002ad0:	dec15c04 	addi	sp,sp,1392
 1002ad4:	f800283a 	ret
 1002ad8:	0005883a 	mov	r2,zero
 1002adc:	0007883a 	mov	r3,zero
 1002ae0:	dd401904 	addi	r21,sp,100
 1002ae4:	d8814215 	stw	r2,1288(sp)
 1002ae8:	802f883a 	mov	r23,r16
 1002aec:	d8c14315 	stw	r3,1292(sp)
 1002af0:	d8014b15 	stw	zero,1324(sp)
 1002af4:	d8014815 	stw	zero,1312(sp)
 1002af8:	d8014415 	stw	zero,1296(sp)
 1002afc:	d8014715 	stw	zero,1308(sp)
 1002b00:	dd400c15 	stw	r21,48(sp)
 1002b04:	d8000e15 	stw	zero,56(sp)
 1002b08:	d8000d15 	stw	zero,52(sp)
 1002b0c:	b8800007 	ldb	r2,0(r23)
 1002b10:	10001926 	beq	r2,zero,1002b78 <___vfprintf_internal_r+0x1e8>
 1002b14:	00c00944 	movi	r3,37
 1002b18:	10c01726 	beq	r2,r3,1002b78 <___vfprintf_internal_r+0x1e8>
 1002b1c:	b821883a 	mov	r16,r23
 1002b20:	00000106 	br	1002b28 <___vfprintf_internal_r+0x198>
 1002b24:	10c00326 	beq	r2,r3,1002b34 <___vfprintf_internal_r+0x1a4>
 1002b28:	84000044 	addi	r16,r16,1
 1002b2c:	80800007 	ldb	r2,0(r16)
 1002b30:	103ffc1e 	bne	r2,zero,1002b24 <___vfprintf_internal_r+0x194>
 1002b34:	85e7c83a 	sub	r19,r16,r23
 1002b38:	98000e26 	beq	r19,zero,1002b74 <___vfprintf_internal_r+0x1e4>
 1002b3c:	dc800e17 	ldw	r18,56(sp)
 1002b40:	dc400d17 	ldw	r17,52(sp)
 1002b44:	008001c4 	movi	r2,7
 1002b48:	94e5883a 	add	r18,r18,r19
 1002b4c:	8c400044 	addi	r17,r17,1
 1002b50:	adc00015 	stw	r23,0(r21)
 1002b54:	dc800e15 	stw	r18,56(sp)
 1002b58:	acc00115 	stw	r19,4(r21)
 1002b5c:	dc400d15 	stw	r17,52(sp)
 1002b60:	14428b16 	blt	r2,r17,1003590 <___vfprintf_internal_r+0xc00>
 1002b64:	ad400204 	addi	r21,r21,8
 1002b68:	d9014b17 	ldw	r4,1324(sp)
 1002b6c:	24c9883a 	add	r4,r4,r19
 1002b70:	d9014b15 	stw	r4,1324(sp)
 1002b74:	802f883a 	mov	r23,r16
 1002b78:	b8800007 	ldb	r2,0(r23)
 1002b7c:	10013c26 	beq	r2,zero,1003070 <___vfprintf_internal_r+0x6e0>
 1002b80:	bdc00044 	addi	r23,r23,1
 1002b84:	d8000405 	stb	zero,16(sp)
 1002b88:	b8c00007 	ldb	r3,0(r23)
 1002b8c:	04ffffc4 	movi	r19,-1
 1002b90:	d8014c15 	stw	zero,1328(sp)
 1002b94:	d8014a15 	stw	zero,1320(sp)
 1002b98:	d8c14d15 	stw	r3,1332(sp)
 1002b9c:	bdc00044 	addi	r23,r23,1
 1002ba0:	d9414d17 	ldw	r5,1332(sp)
 1002ba4:	00801604 	movi	r2,88
 1002ba8:	28fff804 	addi	r3,r5,-32
 1002bac:	10c06036 	bltu	r2,r3,1002d30 <___vfprintf_internal_r+0x3a0>
 1002bb0:	18c5883a 	add	r2,r3,r3
 1002bb4:	1085883a 	add	r2,r2,r2
 1002bb8:	00c04034 	movhi	r3,256
 1002bbc:	18caf304 	addi	r3,r3,11212
 1002bc0:	10c5883a 	add	r2,r2,r3
 1002bc4:	11000017 	ldw	r4,0(r2)
 1002bc8:	2000683a 	jmp	r4
 1002bcc:	01003b40 	call	1003b4 <__ram_exceptions_end+0x801e8>
 1002bd0:	01002d30 	cmpltui	r4,zero,180
 1002bd4:	01002d30 	cmpltui	r4,zero,180
 1002bd8:	01003b2c 	andhi	r4,zero,236
 1002bdc:	01002d30 	cmpltui	r4,zero,180
 1002be0:	01002d30 	cmpltui	r4,zero,180
 1002be4:	01002d30 	cmpltui	r4,zero,180
 1002be8:	01002d30 	cmpltui	r4,zero,180
 1002bec:	01002d30 	cmpltui	r4,zero,180
 1002bf0:	01002d30 	cmpltui	r4,zero,180
 1002bf4:	0100390c 	andi	r4,zero,228
 1002bf8:	01003b1c 	xori	r4,zero,236
 1002bfc:	01002d30 	cmpltui	r4,zero,180
 1002c00:	01003924 	muli	r4,zero,228
 1002c04:	01003bc4 	movi	r4,239
 1002c08:	01002d30 	cmpltui	r4,zero,180
 1002c0c:	01003bb0 	cmpltui	r4,zero,238
 1002c10:	01003b6c 	andhi	r4,zero,237
 1002c14:	01003b6c 	andhi	r4,zero,237
 1002c18:	01003b6c 	andhi	r4,zero,237
 1002c1c:	01003b6c 	andhi	r4,zero,237
 1002c20:	01003b6c 	andhi	r4,zero,237
 1002c24:	01003b6c 	andhi	r4,zero,237
 1002c28:	01003b6c 	andhi	r4,zero,237
 1002c2c:	01003b6c 	andhi	r4,zero,237
 1002c30:	01003b6c 	andhi	r4,zero,237
 1002c34:	01002d30 	cmpltui	r4,zero,180
 1002c38:	01002d30 	cmpltui	r4,zero,180
 1002c3c:	01002d30 	cmpltui	r4,zero,180
 1002c40:	01002d30 	cmpltui	r4,zero,180
 1002c44:	01002d30 	cmpltui	r4,zero,180
 1002c48:	01002d30 	cmpltui	r4,zero,180
 1002c4c:	01002d30 	cmpltui	r4,zero,180
 1002c50:	01002d30 	cmpltui	r4,zero,180
 1002c54:	01002d30 	cmpltui	r4,zero,180
 1002c58:	01002d30 	cmpltui	r4,zero,180
 1002c5c:	01003388 	cmpgei	r4,zero,206
 1002c60:	010039f4 	movhi	r4,231
 1002c64:	01002d30 	cmpltui	r4,zero,180
 1002c68:	010039f4 	movhi	r4,231
 1002c6c:	01002d30 	cmpltui	r4,zero,180
 1002c70:	01002d30 	cmpltui	r4,zero,180
 1002c74:	01002d30 	cmpltui	r4,zero,180
 1002c78:	01002d30 	cmpltui	r4,zero,180
 1002c7c:	01003b58 	cmpnei	r4,zero,237
 1002c80:	01002d30 	cmpltui	r4,zero,180
 1002c84:	01002d30 	cmpltui	r4,zero,180
 1002c88:	0100343c 	xorhi	r4,zero,208
 1002c8c:	01002d30 	cmpltui	r4,zero,180
 1002c90:	01002d30 	cmpltui	r4,zero,180
 1002c94:	01002d30 	cmpltui	r4,zero,180
 1002c98:	01002d30 	cmpltui	r4,zero,180
 1002c9c:	01002d30 	cmpltui	r4,zero,180
 1002ca0:	01003488 	cmpgei	r4,zero,210
 1002ca4:	01002d30 	cmpltui	r4,zero,180
 1002ca8:	01002d30 	cmpltui	r4,zero,180
 1002cac:	01003aa8 	cmpgeui	r4,zero,234
 1002cb0:	01002d30 	cmpltui	r4,zero,180
 1002cb4:	01002d30 	cmpltui	r4,zero,180
 1002cb8:	01002d30 	cmpltui	r4,zero,180
 1002cbc:	01002d30 	cmpltui	r4,zero,180
 1002cc0:	01002d30 	cmpltui	r4,zero,180
 1002cc4:	01002d30 	cmpltui	r4,zero,180
 1002cc8:	01002d30 	cmpltui	r4,zero,180
 1002ccc:	01002d30 	cmpltui	r4,zero,180
 1002cd0:	01002d30 	cmpltui	r4,zero,180
 1002cd4:	01002d30 	cmpltui	r4,zero,180
 1002cd8:	01003a7c 	xorhi	r4,zero,233
 1002cdc:	01003394 	movui	r4,206
 1002ce0:	010039f4 	movhi	r4,231
 1002ce4:	010039f4 	movhi	r4,231
 1002ce8:	010039f4 	movhi	r4,231
 1002cec:	010039e0 	cmpeqi	r4,zero,231
 1002cf0:	01003394 	movui	r4,206
 1002cf4:	01002d30 	cmpltui	r4,zero,180
 1002cf8:	01002d30 	cmpltui	r4,zero,180
 1002cfc:	01003968 	cmpgeui	r4,zero,229
 1002d00:	01002d30 	cmpltui	r4,zero,180
 1002d04:	01003938 	rdprs	r4,zero,228
 1002d08:	01003448 	cmpgei	r4,zero,209
 1002d0c:	01003998 	cmpnei	r4,zero,230
 1002d10:	01003984 	movi	r4,230
 1002d14:	01002d30 	cmpltui	r4,zero,180
 1002d18:	01003c2c 	andhi	r4,zero,240
 1002d1c:	01002d30 	cmpltui	r4,zero,180
 1002d20:	01003494 	movui	r4,210
 1002d24:	01002d30 	cmpltui	r4,zero,180
 1002d28:	01002d30 	cmpltui	r4,zero,180
 1002d2c:	01003b0c 	andi	r4,zero,236
 1002d30:	d9014d17 	ldw	r4,1332(sp)
 1002d34:	2000ce26 	beq	r4,zero,1003070 <___vfprintf_internal_r+0x6e0>
 1002d38:	01400044 	movi	r5,1
 1002d3c:	d9800f04 	addi	r6,sp,60
 1002d40:	d9c14015 	stw	r7,1280(sp)
 1002d44:	d9414515 	stw	r5,1300(sp)
 1002d48:	d9814115 	stw	r6,1284(sp)
 1002d4c:	280f883a 	mov	r7,r5
 1002d50:	d9000f05 	stb	r4,60(sp)
 1002d54:	d8000405 	stb	zero,16(sp)
 1002d58:	d8014615 	stw	zero,1304(sp)
 1002d5c:	d8c14c17 	ldw	r3,1328(sp)
 1002d60:	1880008c 	andi	r2,r3,2
 1002d64:	1005003a 	cmpeq	r2,r2,zero
 1002d68:	d8815015 	stw	r2,1344(sp)
 1002d6c:	1000031e 	bne	r2,zero,1002d7c <___vfprintf_internal_r+0x3ec>
 1002d70:	d9014517 	ldw	r4,1300(sp)
 1002d74:	21000084 	addi	r4,r4,2
 1002d78:	d9014515 	stw	r4,1300(sp)
 1002d7c:	d9414c17 	ldw	r5,1328(sp)
 1002d80:	2940210c 	andi	r5,r5,132
 1002d84:	d9414e15 	stw	r5,1336(sp)
 1002d88:	28002d1e 	bne	r5,zero,1002e40 <___vfprintf_internal_r+0x4b0>
 1002d8c:	d9814a17 	ldw	r6,1320(sp)
 1002d90:	d8814517 	ldw	r2,1300(sp)
 1002d94:	30a1c83a 	sub	r16,r6,r2
 1002d98:	0400290e 	bge	zero,r16,1002e40 <___vfprintf_internal_r+0x4b0>
 1002d9c:	00800404 	movi	r2,16
 1002da0:	14045e0e 	bge	r2,r16,1003f1c <___vfprintf_internal_r+0x158c>
 1002da4:	dc800e17 	ldw	r18,56(sp)
 1002da8:	dc400d17 	ldw	r17,52(sp)
 1002dac:	1027883a 	mov	r19,r2
 1002db0:	070040b4 	movhi	fp,258
 1002db4:	e7279884 	addi	fp,fp,-24990
 1002db8:	050001c4 	movi	r20,7
 1002dbc:	00000306 	br	1002dcc <___vfprintf_internal_r+0x43c>
 1002dc0:	843ffc04 	addi	r16,r16,-16
 1002dc4:	ad400204 	addi	r21,r21,8
 1002dc8:	9c00130e 	bge	r19,r16,1002e18 <___vfprintf_internal_r+0x488>
 1002dcc:	94800404 	addi	r18,r18,16
 1002dd0:	8c400044 	addi	r17,r17,1
 1002dd4:	af000015 	stw	fp,0(r21)
 1002dd8:	acc00115 	stw	r19,4(r21)
 1002ddc:	dc800e15 	stw	r18,56(sp)
 1002de0:	dc400d15 	stw	r17,52(sp)
 1002de4:	a47ff60e 	bge	r20,r17,1002dc0 <___vfprintf_internal_r+0x430>
 1002de8:	d9014f17 	ldw	r4,1340(sp)
 1002dec:	b00b883a 	mov	r5,r22
 1002df0:	d9800c04 	addi	r6,sp,48
 1002df4:	d9c15115 	stw	r7,1348(sp)
 1002df8:	100292c0 	call	100292c <__sprint_r>
 1002dfc:	d9c15117 	ldw	r7,1348(sp)
 1002e00:	10009e1e 	bne	r2,zero,100307c <___vfprintf_internal_r+0x6ec>
 1002e04:	843ffc04 	addi	r16,r16,-16
 1002e08:	dc800e17 	ldw	r18,56(sp)
 1002e0c:	dc400d17 	ldw	r17,52(sp)
 1002e10:	dd401904 	addi	r21,sp,100
 1002e14:	9c3fed16 	blt	r19,r16,1002dcc <___vfprintf_internal_r+0x43c>
 1002e18:	9425883a 	add	r18,r18,r16
 1002e1c:	8c400044 	addi	r17,r17,1
 1002e20:	008001c4 	movi	r2,7
 1002e24:	af000015 	stw	fp,0(r21)
 1002e28:	ac000115 	stw	r16,4(r21)
 1002e2c:	dc800e15 	stw	r18,56(sp)
 1002e30:	dc400d15 	stw	r17,52(sp)
 1002e34:	1441f516 	blt	r2,r17,100360c <___vfprintf_internal_r+0xc7c>
 1002e38:	ad400204 	addi	r21,r21,8
 1002e3c:	00000206 	br	1002e48 <___vfprintf_internal_r+0x4b8>
 1002e40:	dc800e17 	ldw	r18,56(sp)
 1002e44:	dc400d17 	ldw	r17,52(sp)
 1002e48:	d8800407 	ldb	r2,16(sp)
 1002e4c:	10000b26 	beq	r2,zero,1002e7c <___vfprintf_internal_r+0x4ec>
 1002e50:	00800044 	movi	r2,1
 1002e54:	94800044 	addi	r18,r18,1
 1002e58:	8c400044 	addi	r17,r17,1
 1002e5c:	a8800115 	stw	r2,4(r21)
 1002e60:	d8c00404 	addi	r3,sp,16
 1002e64:	008001c4 	movi	r2,7
 1002e68:	a8c00015 	stw	r3,0(r21)
 1002e6c:	dc800e15 	stw	r18,56(sp)
 1002e70:	dc400d15 	stw	r17,52(sp)
 1002e74:	1441da16 	blt	r2,r17,10035e0 <___vfprintf_internal_r+0xc50>
 1002e78:	ad400204 	addi	r21,r21,8
 1002e7c:	d9015017 	ldw	r4,1344(sp)
 1002e80:	20000b1e 	bne	r4,zero,1002eb0 <___vfprintf_internal_r+0x520>
 1002e84:	d8800444 	addi	r2,sp,17
 1002e88:	94800084 	addi	r18,r18,2
 1002e8c:	8c400044 	addi	r17,r17,1
 1002e90:	a8800015 	stw	r2,0(r21)
 1002e94:	00c00084 	movi	r3,2
 1002e98:	008001c4 	movi	r2,7
 1002e9c:	a8c00115 	stw	r3,4(r21)
 1002ea0:	dc800e15 	stw	r18,56(sp)
 1002ea4:	dc400d15 	stw	r17,52(sp)
 1002ea8:	1441c216 	blt	r2,r17,10035b4 <___vfprintf_internal_r+0xc24>
 1002eac:	ad400204 	addi	r21,r21,8
 1002eb0:	d9414e17 	ldw	r5,1336(sp)
 1002eb4:	00802004 	movi	r2,128
 1002eb8:	2880b126 	beq	r5,r2,1003180 <___vfprintf_internal_r+0x7f0>
 1002ebc:	d8c14617 	ldw	r3,1304(sp)
 1002ec0:	19e1c83a 	sub	r16,r3,r7
 1002ec4:	0400260e 	bge	zero,r16,1002f60 <___vfprintf_internal_r+0x5d0>
 1002ec8:	00800404 	movi	r2,16
 1002ecc:	1403cf0e 	bge	r2,r16,1003e0c <___vfprintf_internal_r+0x147c>
 1002ed0:	1027883a 	mov	r19,r2
 1002ed4:	070040b4 	movhi	fp,258
 1002ed8:	e7279484 	addi	fp,fp,-25006
 1002edc:	050001c4 	movi	r20,7
 1002ee0:	00000306 	br	1002ef0 <___vfprintf_internal_r+0x560>
 1002ee4:	843ffc04 	addi	r16,r16,-16
 1002ee8:	ad400204 	addi	r21,r21,8
 1002eec:	9c00130e 	bge	r19,r16,1002f3c <___vfprintf_internal_r+0x5ac>
 1002ef0:	94800404 	addi	r18,r18,16
 1002ef4:	8c400044 	addi	r17,r17,1
 1002ef8:	af000015 	stw	fp,0(r21)
 1002efc:	acc00115 	stw	r19,4(r21)
 1002f00:	dc800e15 	stw	r18,56(sp)
 1002f04:	dc400d15 	stw	r17,52(sp)
 1002f08:	a47ff60e 	bge	r20,r17,1002ee4 <___vfprintf_internal_r+0x554>
 1002f0c:	d9014f17 	ldw	r4,1340(sp)
 1002f10:	b00b883a 	mov	r5,r22
 1002f14:	d9800c04 	addi	r6,sp,48
 1002f18:	d9c15115 	stw	r7,1348(sp)
 1002f1c:	100292c0 	call	100292c <__sprint_r>
 1002f20:	d9c15117 	ldw	r7,1348(sp)
 1002f24:	1000551e 	bne	r2,zero,100307c <___vfprintf_internal_r+0x6ec>
 1002f28:	843ffc04 	addi	r16,r16,-16
 1002f2c:	dc800e17 	ldw	r18,56(sp)
 1002f30:	dc400d17 	ldw	r17,52(sp)
 1002f34:	dd401904 	addi	r21,sp,100
 1002f38:	9c3fed16 	blt	r19,r16,1002ef0 <___vfprintf_internal_r+0x560>
 1002f3c:	9425883a 	add	r18,r18,r16
 1002f40:	8c400044 	addi	r17,r17,1
 1002f44:	008001c4 	movi	r2,7
 1002f48:	af000015 	stw	fp,0(r21)
 1002f4c:	ac000115 	stw	r16,4(r21)
 1002f50:	dc800e15 	stw	r18,56(sp)
 1002f54:	dc400d15 	stw	r17,52(sp)
 1002f58:	14418216 	blt	r2,r17,1003564 <___vfprintf_internal_r+0xbd4>
 1002f5c:	ad400204 	addi	r21,r21,8
 1002f60:	d9014c17 	ldw	r4,1328(sp)
 1002f64:	2080400c 	andi	r2,r4,256
 1002f68:	10004a1e 	bne	r2,zero,1003094 <___vfprintf_internal_r+0x704>
 1002f6c:	d9414117 	ldw	r5,1284(sp)
 1002f70:	91e5883a 	add	r18,r18,r7
 1002f74:	8c400044 	addi	r17,r17,1
 1002f78:	008001c4 	movi	r2,7
 1002f7c:	a9400015 	stw	r5,0(r21)
 1002f80:	a9c00115 	stw	r7,4(r21)
 1002f84:	dc800e15 	stw	r18,56(sp)
 1002f88:	dc400d15 	stw	r17,52(sp)
 1002f8c:	14416716 	blt	r2,r17,100352c <___vfprintf_internal_r+0xb9c>
 1002f90:	a8c00204 	addi	r3,r21,8
 1002f94:	d9814c17 	ldw	r6,1328(sp)
 1002f98:	3080010c 	andi	r2,r6,4
 1002f9c:	10002826 	beq	r2,zero,1003040 <___vfprintf_internal_r+0x6b0>
 1002fa0:	d8814a17 	ldw	r2,1320(sp)
 1002fa4:	d9014517 	ldw	r4,1300(sp)
 1002fa8:	1121c83a 	sub	r16,r2,r4
 1002fac:	0400240e 	bge	zero,r16,1003040 <___vfprintf_internal_r+0x6b0>
 1002fb0:	00800404 	movi	r2,16
 1002fb4:	1404550e 	bge	r2,r16,100410c <___vfprintf_internal_r+0x177c>
 1002fb8:	dc400d17 	ldw	r17,52(sp)
 1002fbc:	1027883a 	mov	r19,r2
 1002fc0:	070040b4 	movhi	fp,258
 1002fc4:	e7279884 	addi	fp,fp,-24990
 1002fc8:	050001c4 	movi	r20,7
 1002fcc:	00000306 	br	1002fdc <___vfprintf_internal_r+0x64c>
 1002fd0:	843ffc04 	addi	r16,r16,-16
 1002fd4:	18c00204 	addi	r3,r3,8
 1002fd8:	9c00110e 	bge	r19,r16,1003020 <___vfprintf_internal_r+0x690>
 1002fdc:	94800404 	addi	r18,r18,16
 1002fe0:	8c400044 	addi	r17,r17,1
 1002fe4:	1f000015 	stw	fp,0(r3)
 1002fe8:	1cc00115 	stw	r19,4(r3)
 1002fec:	dc800e15 	stw	r18,56(sp)
 1002ff0:	dc400d15 	stw	r17,52(sp)
 1002ff4:	a47ff60e 	bge	r20,r17,1002fd0 <___vfprintf_internal_r+0x640>
 1002ff8:	d9014f17 	ldw	r4,1340(sp)
 1002ffc:	b00b883a 	mov	r5,r22
 1003000:	d9800c04 	addi	r6,sp,48
 1003004:	100292c0 	call	100292c <__sprint_r>
 1003008:	10001c1e 	bne	r2,zero,100307c <___vfprintf_internal_r+0x6ec>
 100300c:	843ffc04 	addi	r16,r16,-16
 1003010:	dc800e17 	ldw	r18,56(sp)
 1003014:	dc400d17 	ldw	r17,52(sp)
 1003018:	d8c01904 	addi	r3,sp,100
 100301c:	9c3fef16 	blt	r19,r16,1002fdc <___vfprintf_internal_r+0x64c>
 1003020:	9425883a 	add	r18,r18,r16
 1003024:	8c400044 	addi	r17,r17,1
 1003028:	008001c4 	movi	r2,7
 100302c:	1f000015 	stw	fp,0(r3)
 1003030:	1c000115 	stw	r16,4(r3)
 1003034:	dc800e15 	stw	r18,56(sp)
 1003038:	dc400d15 	stw	r17,52(sp)
 100303c:	1440cb16 	blt	r2,r17,100336c <___vfprintf_internal_r+0x9dc>
 1003040:	d8814a17 	ldw	r2,1320(sp)
 1003044:	d9414517 	ldw	r5,1300(sp)
 1003048:	1140010e 	bge	r2,r5,1003050 <___vfprintf_internal_r+0x6c0>
 100304c:	2805883a 	mov	r2,r5
 1003050:	d9814b17 	ldw	r6,1324(sp)
 1003054:	308d883a 	add	r6,r6,r2
 1003058:	d9814b15 	stw	r6,1324(sp)
 100305c:	90013b1e 	bne	r18,zero,100354c <___vfprintf_internal_r+0xbbc>
 1003060:	d9c14017 	ldw	r7,1280(sp)
 1003064:	dd401904 	addi	r21,sp,100
 1003068:	d8000d15 	stw	zero,52(sp)
 100306c:	003ea706 	br	1002b0c <___vfprintf_internal_r+0x17c>
 1003070:	d8800e17 	ldw	r2,56(sp)
 1003074:	1005451e 	bne	r2,zero,100458c <___vfprintf_internal_r+0x1bfc>
 1003078:	d8000d15 	stw	zero,52(sp)
 100307c:	b080030b 	ldhu	r2,12(r22)
 1003080:	1080100c 	andi	r2,r2,64
 1003084:	103e8726 	beq	r2,zero,1002aa4 <___vfprintf_internal_r+0x114>
 1003088:	00bfffc4 	movi	r2,-1
 100308c:	d8814b15 	stw	r2,1324(sp)
 1003090:	003e8406 	br	1002aa4 <___vfprintf_internal_r+0x114>
 1003094:	d9814d17 	ldw	r6,1332(sp)
 1003098:	00801944 	movi	r2,101
 100309c:	11806e16 	blt	r2,r6,1003258 <___vfprintf_internal_r+0x8c8>
 10030a0:	d9414717 	ldw	r5,1308(sp)
 10030a4:	00c00044 	movi	r3,1
 10030a8:	1943490e 	bge	r3,r5,1003dd0 <___vfprintf_internal_r+0x1440>
 10030ac:	d8814117 	ldw	r2,1284(sp)
 10030b0:	94800044 	addi	r18,r18,1
 10030b4:	8c400044 	addi	r17,r17,1
 10030b8:	a8800015 	stw	r2,0(r21)
 10030bc:	008001c4 	movi	r2,7
 10030c0:	a8c00115 	stw	r3,4(r21)
 10030c4:	dc800e15 	stw	r18,56(sp)
 10030c8:	dc400d15 	stw	r17,52(sp)
 10030cc:	1441ca16 	blt	r2,r17,10037f8 <___vfprintf_internal_r+0xe68>
 10030d0:	a8c00204 	addi	r3,r21,8
 10030d4:	d9014917 	ldw	r4,1316(sp)
 10030d8:	00800044 	movi	r2,1
 10030dc:	94800044 	addi	r18,r18,1
 10030e0:	8c400044 	addi	r17,r17,1
 10030e4:	18800115 	stw	r2,4(r3)
 10030e8:	008001c4 	movi	r2,7
 10030ec:	19000015 	stw	r4,0(r3)
 10030f0:	dc800e15 	stw	r18,56(sp)
 10030f4:	dc400d15 	stw	r17,52(sp)
 10030f8:	1441b616 	blt	r2,r17,10037d4 <___vfprintf_internal_r+0xe44>
 10030fc:	1cc00204 	addi	r19,r3,8
 1003100:	d9014217 	ldw	r4,1288(sp)
 1003104:	d9414317 	ldw	r5,1292(sp)
 1003108:	000d883a 	mov	r6,zero
 100310c:	000f883a 	mov	r7,zero
 1003110:	100b2ac0 	call	100b2ac <__nedf2>
 1003114:	10017426 	beq	r2,zero,10036e8 <___vfprintf_internal_r+0xd58>
 1003118:	d9414717 	ldw	r5,1308(sp)
 100311c:	d9814117 	ldw	r6,1284(sp)
 1003120:	8c400044 	addi	r17,r17,1
 1003124:	2c85883a 	add	r2,r5,r18
 1003128:	14bfffc4 	addi	r18,r2,-1
 100312c:	28bfffc4 	addi	r2,r5,-1
 1003130:	30c00044 	addi	r3,r6,1
 1003134:	98800115 	stw	r2,4(r19)
 1003138:	008001c4 	movi	r2,7
 100313c:	98c00015 	stw	r3,0(r19)
 1003140:	dc800e15 	stw	r18,56(sp)
 1003144:	dc400d15 	stw	r17,52(sp)
 1003148:	14418e16 	blt	r2,r17,1003784 <___vfprintf_internal_r+0xdf4>
 100314c:	9cc00204 	addi	r19,r19,8
 1003150:	d9414817 	ldw	r5,1312(sp)
 1003154:	d8800804 	addi	r2,sp,32
 1003158:	8c400044 	addi	r17,r17,1
 100315c:	9165883a 	add	r18,r18,r5
 1003160:	98800015 	stw	r2,0(r19)
 1003164:	008001c4 	movi	r2,7
 1003168:	99400115 	stw	r5,4(r19)
 100316c:	dc800e15 	stw	r18,56(sp)
 1003170:	dc400d15 	stw	r17,52(sp)
 1003174:	1440ed16 	blt	r2,r17,100352c <___vfprintf_internal_r+0xb9c>
 1003178:	98c00204 	addi	r3,r19,8
 100317c:	003f8506 	br	1002f94 <___vfprintf_internal_r+0x604>
 1003180:	d9814a17 	ldw	r6,1320(sp)
 1003184:	d8814517 	ldw	r2,1300(sp)
 1003188:	30a1c83a 	sub	r16,r6,r2
 100318c:	043f4b0e 	bge	zero,r16,1002ebc <___vfprintf_internal_r+0x52c>
 1003190:	00800404 	movi	r2,16
 1003194:	14043a0e 	bge	r2,r16,1004280 <___vfprintf_internal_r+0x18f0>
 1003198:	1027883a 	mov	r19,r2
 100319c:	070040b4 	movhi	fp,258
 10031a0:	e7279484 	addi	fp,fp,-25006
 10031a4:	050001c4 	movi	r20,7
 10031a8:	00000306 	br	10031b8 <___vfprintf_internal_r+0x828>
 10031ac:	843ffc04 	addi	r16,r16,-16
 10031b0:	ad400204 	addi	r21,r21,8
 10031b4:	9c00130e 	bge	r19,r16,1003204 <___vfprintf_internal_r+0x874>
 10031b8:	94800404 	addi	r18,r18,16
 10031bc:	8c400044 	addi	r17,r17,1
 10031c0:	af000015 	stw	fp,0(r21)
 10031c4:	acc00115 	stw	r19,4(r21)
 10031c8:	dc800e15 	stw	r18,56(sp)
 10031cc:	dc400d15 	stw	r17,52(sp)
 10031d0:	a47ff60e 	bge	r20,r17,10031ac <___vfprintf_internal_r+0x81c>
 10031d4:	d9014f17 	ldw	r4,1340(sp)
 10031d8:	b00b883a 	mov	r5,r22
 10031dc:	d9800c04 	addi	r6,sp,48
 10031e0:	d9c15115 	stw	r7,1348(sp)
 10031e4:	100292c0 	call	100292c <__sprint_r>
 10031e8:	d9c15117 	ldw	r7,1348(sp)
 10031ec:	103fa31e 	bne	r2,zero,100307c <___vfprintf_internal_r+0x6ec>
 10031f0:	843ffc04 	addi	r16,r16,-16
 10031f4:	dc800e17 	ldw	r18,56(sp)
 10031f8:	dc400d17 	ldw	r17,52(sp)
 10031fc:	dd401904 	addi	r21,sp,100
 1003200:	9c3fed16 	blt	r19,r16,10031b8 <___vfprintf_internal_r+0x828>
 1003204:	9425883a 	add	r18,r18,r16
 1003208:	8c400044 	addi	r17,r17,1
 100320c:	008001c4 	movi	r2,7
 1003210:	af000015 	stw	fp,0(r21)
 1003214:	ac000115 	stw	r16,4(r21)
 1003218:	dc800e15 	stw	r18,56(sp)
 100321c:	dc400d15 	stw	r17,52(sp)
 1003220:	14416116 	blt	r2,r17,10037a8 <___vfprintf_internal_r+0xe18>
 1003224:	ad400204 	addi	r21,r21,8
 1003228:	003f2406 	br	1002ebc <___vfprintf_internal_r+0x52c>
 100322c:	d9014f17 	ldw	r4,1340(sp)
 1003230:	10064d40 	call	10064d4 <__sinit>
 1003234:	d9c15117 	ldw	r7,1348(sp)
 1003238:	003def06 	br	10029f8 <___vfprintf_internal_r+0x68>
 100323c:	d9014f17 	ldw	r4,1340(sp)
 1003240:	b00b883a 	mov	r5,r22
 1003244:	d9c15115 	stw	r7,1348(sp)
 1003248:	10048900 	call	1004890 <__swsetup_r>
 100324c:	d9c15117 	ldw	r7,1348(sp)
 1003250:	103dee26 	beq	r2,zero,1002a0c <___vfprintf_internal_r+0x7c>
 1003254:	003f8c06 	br	1003088 <___vfprintf_internal_r+0x6f8>
 1003258:	d9014217 	ldw	r4,1288(sp)
 100325c:	d9414317 	ldw	r5,1292(sp)
 1003260:	000d883a 	mov	r6,zero
 1003264:	000f883a 	mov	r7,zero
 1003268:	100b2180 	call	100b218 <__eqdf2>
 100326c:	1000f21e 	bne	r2,zero,1003638 <___vfprintf_internal_r+0xca8>
 1003270:	008040b4 	movhi	r2,258
 1003274:	10a79404 	addi	r2,r2,-25008
 1003278:	94800044 	addi	r18,r18,1
 100327c:	8c400044 	addi	r17,r17,1
 1003280:	a8800015 	stw	r2,0(r21)
 1003284:	00c00044 	movi	r3,1
 1003288:	008001c4 	movi	r2,7
 100328c:	a8c00115 	stw	r3,4(r21)
 1003290:	dc800e15 	stw	r18,56(sp)
 1003294:	dc400d15 	stw	r17,52(sp)
 1003298:	14430016 	blt	r2,r17,1003e9c <___vfprintf_internal_r+0x150c>
 100329c:	a8c00204 	addi	r3,r21,8
 10032a0:	d8800517 	ldw	r2,20(sp)
 10032a4:	d9014717 	ldw	r4,1308(sp)
 10032a8:	11015c0e 	bge	r2,r4,100381c <___vfprintf_internal_r+0xe8c>
 10032ac:	dc400d17 	ldw	r17,52(sp)
 10032b0:	d9814917 	ldw	r6,1316(sp)
 10032b4:	00800044 	movi	r2,1
 10032b8:	94800044 	addi	r18,r18,1
 10032bc:	8c400044 	addi	r17,r17,1
 10032c0:	18800115 	stw	r2,4(r3)
 10032c4:	008001c4 	movi	r2,7
 10032c8:	19800015 	stw	r6,0(r3)
 10032cc:	dc800e15 	stw	r18,56(sp)
 10032d0:	dc400d15 	stw	r17,52(sp)
 10032d4:	14431616 	blt	r2,r17,1003f30 <___vfprintf_internal_r+0x15a0>
 10032d8:	18c00204 	addi	r3,r3,8
 10032dc:	d8814717 	ldw	r2,1308(sp)
 10032e0:	143fffc4 	addi	r16,r2,-1
 10032e4:	043f2b0e 	bge	zero,r16,1002f94 <___vfprintf_internal_r+0x604>
 10032e8:	00800404 	movi	r2,16
 10032ec:	1402a80e 	bge	r2,r16,1003d90 <___vfprintf_internal_r+0x1400>
 10032f0:	dc400d17 	ldw	r17,52(sp)
 10032f4:	1027883a 	mov	r19,r2
 10032f8:	070040b4 	movhi	fp,258
 10032fc:	e7279484 	addi	fp,fp,-25006
 1003300:	050001c4 	movi	r20,7
 1003304:	00000306 	br	1003314 <___vfprintf_internal_r+0x984>
 1003308:	18c00204 	addi	r3,r3,8
 100330c:	843ffc04 	addi	r16,r16,-16
 1003310:	9c02a20e 	bge	r19,r16,1003d9c <___vfprintf_internal_r+0x140c>
 1003314:	94800404 	addi	r18,r18,16
 1003318:	8c400044 	addi	r17,r17,1
 100331c:	1f000015 	stw	fp,0(r3)
 1003320:	1cc00115 	stw	r19,4(r3)
 1003324:	dc800e15 	stw	r18,56(sp)
 1003328:	dc400d15 	stw	r17,52(sp)
 100332c:	a47ff60e 	bge	r20,r17,1003308 <___vfprintf_internal_r+0x978>
 1003330:	d9014f17 	ldw	r4,1340(sp)
 1003334:	b00b883a 	mov	r5,r22
 1003338:	d9800c04 	addi	r6,sp,48
 100333c:	100292c0 	call	100292c <__sprint_r>
 1003340:	103f4e1e 	bne	r2,zero,100307c <___vfprintf_internal_r+0x6ec>
 1003344:	dc800e17 	ldw	r18,56(sp)
 1003348:	dc400d17 	ldw	r17,52(sp)
 100334c:	d8c01904 	addi	r3,sp,100
 1003350:	003fee06 	br	100330c <___vfprintf_internal_r+0x97c>
 1003354:	d8802c0b 	ldhu	r2,176(sp)
 1003358:	00ffffc4 	movi	r3,-1
 100335c:	d8c14b15 	stw	r3,1324(sp)
 1003360:	1080100c 	andi	r2,r2,64
 1003364:	103dcc1e 	bne	r2,zero,1002a98 <___vfprintf_internal_r+0x108>
 1003368:	003dce06 	br	1002aa4 <___vfprintf_internal_r+0x114>
 100336c:	d9014f17 	ldw	r4,1340(sp)
 1003370:	b00b883a 	mov	r5,r22
 1003374:	d9800c04 	addi	r6,sp,48
 1003378:	100292c0 	call	100292c <__sprint_r>
 100337c:	103f3f1e 	bne	r2,zero,100307c <___vfprintf_internal_r+0x6ec>
 1003380:	dc800e17 	ldw	r18,56(sp)
 1003384:	003f2e06 	br	1003040 <___vfprintf_internal_r+0x6b0>
 1003388:	d9414c17 	ldw	r5,1328(sp)
 100338c:	29400414 	ori	r5,r5,16
 1003390:	d9414c15 	stw	r5,1328(sp)
 1003394:	d9814c17 	ldw	r6,1328(sp)
 1003398:	3080080c 	andi	r2,r6,32
 100339c:	10014f1e 	bne	r2,zero,10038dc <___vfprintf_internal_r+0xf4c>
 10033a0:	d8c14c17 	ldw	r3,1328(sp)
 10033a4:	1880040c 	andi	r2,r3,16
 10033a8:	1002f01e 	bne	r2,zero,1003f6c <___vfprintf_internal_r+0x15dc>
 10033ac:	d9014c17 	ldw	r4,1328(sp)
 10033b0:	2080100c 	andi	r2,r4,64
 10033b4:	1002ed26 	beq	r2,zero,1003f6c <___vfprintf_internal_r+0x15dc>
 10033b8:	3880000f 	ldh	r2,0(r7)
 10033bc:	39c00104 	addi	r7,r7,4
 10033c0:	d9c14015 	stw	r7,1280(sp)
 10033c4:	1023d7fa 	srai	r17,r2,31
 10033c8:	1021883a 	mov	r16,r2
 10033cc:	88037816 	blt	r17,zero,10041b0 <___vfprintf_internal_r+0x1820>
 10033d0:	01000044 	movi	r4,1
 10033d4:	98000416 	blt	r19,zero,10033e8 <___vfprintf_internal_r+0xa58>
 10033d8:	d8c14c17 	ldw	r3,1328(sp)
 10033dc:	00bfdfc4 	movi	r2,-129
 10033e0:	1886703a 	and	r3,r3,r2
 10033e4:	d8c14c15 	stw	r3,1328(sp)
 10033e8:	8444b03a 	or	r2,r16,r17
 10033ec:	10022c1e 	bne	r2,zero,1003ca0 <___vfprintf_internal_r+0x1310>
 10033f0:	98022b1e 	bne	r19,zero,1003ca0 <___vfprintf_internal_r+0x1310>
 10033f4:	20803fcc 	andi	r2,r4,255
 10033f8:	1002a126 	beq	r2,zero,1003e80 <___vfprintf_internal_r+0x14f0>
 10033fc:	d8c01904 	addi	r3,sp,100
 1003400:	dd000f04 	addi	r20,sp,60
 1003404:	d8c14115 	stw	r3,1284(sp)
 1003408:	d8c14117 	ldw	r3,1284(sp)
 100340c:	dcc14515 	stw	r19,1300(sp)
 1003410:	a0c5c83a 	sub	r2,r20,r3
 1003414:	11c00a04 	addi	r7,r2,40
 1003418:	99c0010e 	bge	r19,r7,1003420 <___vfprintf_internal_r+0xa90>
 100341c:	d9c14515 	stw	r7,1300(sp)
 1003420:	dcc14615 	stw	r19,1304(sp)
 1003424:	d8800407 	ldb	r2,16(sp)
 1003428:	103e4c26 	beq	r2,zero,1002d5c <___vfprintf_internal_r+0x3cc>
 100342c:	d8814517 	ldw	r2,1300(sp)
 1003430:	10800044 	addi	r2,r2,1
 1003434:	d8814515 	stw	r2,1300(sp)
 1003438:	003e4806 	br	1002d5c <___vfprintf_internal_r+0x3cc>
 100343c:	d9814c17 	ldw	r6,1328(sp)
 1003440:	31800414 	ori	r6,r6,16
 1003444:	d9814c15 	stw	r6,1328(sp)
 1003448:	d8c14c17 	ldw	r3,1328(sp)
 100344c:	1880080c 	andi	r2,r3,32
 1003450:	1001271e 	bne	r2,zero,10038f0 <___vfprintf_internal_r+0xf60>
 1003454:	d9414c17 	ldw	r5,1328(sp)
 1003458:	2880040c 	andi	r2,r5,16
 100345c:	1002bc1e 	bne	r2,zero,1003f50 <___vfprintf_internal_r+0x15c0>
 1003460:	d9814c17 	ldw	r6,1328(sp)
 1003464:	3080100c 	andi	r2,r6,64
 1003468:	1002b926 	beq	r2,zero,1003f50 <___vfprintf_internal_r+0x15c0>
 100346c:	3c00000b 	ldhu	r16,0(r7)
 1003470:	0009883a 	mov	r4,zero
 1003474:	39c00104 	addi	r7,r7,4
 1003478:	0023883a 	mov	r17,zero
 100347c:	d9c14015 	stw	r7,1280(sp)
 1003480:	d8000405 	stb	zero,16(sp)
 1003484:	003fd306 	br	10033d4 <___vfprintf_internal_r+0xa44>
 1003488:	d9014c17 	ldw	r4,1328(sp)
 100348c:	21000414 	ori	r4,r4,16
 1003490:	d9014c15 	stw	r4,1328(sp)
 1003494:	d9414c17 	ldw	r5,1328(sp)
 1003498:	2880080c 	andi	r2,r5,32
 100349c:	1001081e 	bne	r2,zero,10038c0 <___vfprintf_internal_r+0xf30>
 10034a0:	d8c14c17 	ldw	r3,1328(sp)
 10034a4:	1880040c 	andi	r2,r3,16
 10034a8:	1002b61e 	bne	r2,zero,1003f84 <___vfprintf_internal_r+0x15f4>
 10034ac:	d9014c17 	ldw	r4,1328(sp)
 10034b0:	2080100c 	andi	r2,r4,64
 10034b4:	1002b326 	beq	r2,zero,1003f84 <___vfprintf_internal_r+0x15f4>
 10034b8:	3c00000b 	ldhu	r16,0(r7)
 10034bc:	01000044 	movi	r4,1
 10034c0:	39c00104 	addi	r7,r7,4
 10034c4:	0023883a 	mov	r17,zero
 10034c8:	d9c14015 	stw	r7,1280(sp)
 10034cc:	d8000405 	stb	zero,16(sp)
 10034d0:	003fc006 	br	10033d4 <___vfprintf_internal_r+0xa44>
 10034d4:	d9014f17 	ldw	r4,1340(sp)
 10034d8:	b00b883a 	mov	r5,r22
 10034dc:	d9800c04 	addi	r6,sp,48
 10034e0:	100292c0 	call	100292c <__sprint_r>
 10034e4:	103ee51e 	bne	r2,zero,100307c <___vfprintf_internal_r+0x6ec>
 10034e8:	dc800e17 	ldw	r18,56(sp)
 10034ec:	d8c01904 	addi	r3,sp,100
 10034f0:	d9814c17 	ldw	r6,1328(sp)
 10034f4:	3080004c 	andi	r2,r6,1
 10034f8:	1005003a 	cmpeq	r2,r2,zero
 10034fc:	103ea51e 	bne	r2,zero,1002f94 <___vfprintf_internal_r+0x604>
 1003500:	00800044 	movi	r2,1
 1003504:	dc400d17 	ldw	r17,52(sp)
 1003508:	18800115 	stw	r2,4(r3)
 100350c:	d8814917 	ldw	r2,1316(sp)
 1003510:	94800044 	addi	r18,r18,1
 1003514:	8c400044 	addi	r17,r17,1
 1003518:	18800015 	stw	r2,0(r3)
 100351c:	008001c4 	movi	r2,7
 1003520:	dc800e15 	stw	r18,56(sp)
 1003524:	dc400d15 	stw	r17,52(sp)
 1003528:	1442240e 	bge	r2,r17,1003dbc <___vfprintf_internal_r+0x142c>
 100352c:	d9014f17 	ldw	r4,1340(sp)
 1003530:	b00b883a 	mov	r5,r22
 1003534:	d9800c04 	addi	r6,sp,48
 1003538:	100292c0 	call	100292c <__sprint_r>
 100353c:	103ecf1e 	bne	r2,zero,100307c <___vfprintf_internal_r+0x6ec>
 1003540:	dc800e17 	ldw	r18,56(sp)
 1003544:	d8c01904 	addi	r3,sp,100
 1003548:	003e9206 	br	1002f94 <___vfprintf_internal_r+0x604>
 100354c:	d9014f17 	ldw	r4,1340(sp)
 1003550:	b00b883a 	mov	r5,r22
 1003554:	d9800c04 	addi	r6,sp,48
 1003558:	100292c0 	call	100292c <__sprint_r>
 100355c:	103ec026 	beq	r2,zero,1003060 <___vfprintf_internal_r+0x6d0>
 1003560:	003ec606 	br	100307c <___vfprintf_internal_r+0x6ec>
 1003564:	d9014f17 	ldw	r4,1340(sp)
 1003568:	b00b883a 	mov	r5,r22
 100356c:	d9800c04 	addi	r6,sp,48
 1003570:	d9c15115 	stw	r7,1348(sp)
 1003574:	100292c0 	call	100292c <__sprint_r>
 1003578:	d9c15117 	ldw	r7,1348(sp)
 100357c:	103ebf1e 	bne	r2,zero,100307c <___vfprintf_internal_r+0x6ec>
 1003580:	dc800e17 	ldw	r18,56(sp)
 1003584:	dc400d17 	ldw	r17,52(sp)
 1003588:	dd401904 	addi	r21,sp,100
 100358c:	003e7406 	br	1002f60 <___vfprintf_internal_r+0x5d0>
 1003590:	d9014f17 	ldw	r4,1340(sp)
 1003594:	b00b883a 	mov	r5,r22
 1003598:	d9800c04 	addi	r6,sp,48
 100359c:	d9c15115 	stw	r7,1348(sp)
 10035a0:	100292c0 	call	100292c <__sprint_r>
 10035a4:	d9c15117 	ldw	r7,1348(sp)
 10035a8:	103eb41e 	bne	r2,zero,100307c <___vfprintf_internal_r+0x6ec>
 10035ac:	dd401904 	addi	r21,sp,100
 10035b0:	003d6d06 	br	1002b68 <___vfprintf_internal_r+0x1d8>
 10035b4:	d9014f17 	ldw	r4,1340(sp)
 10035b8:	b00b883a 	mov	r5,r22
 10035bc:	d9800c04 	addi	r6,sp,48
 10035c0:	d9c15115 	stw	r7,1348(sp)
 10035c4:	100292c0 	call	100292c <__sprint_r>
 10035c8:	d9c15117 	ldw	r7,1348(sp)
 10035cc:	103eab1e 	bne	r2,zero,100307c <___vfprintf_internal_r+0x6ec>
 10035d0:	dc800e17 	ldw	r18,56(sp)
 10035d4:	dc400d17 	ldw	r17,52(sp)
 10035d8:	dd401904 	addi	r21,sp,100
 10035dc:	003e3406 	br	1002eb0 <___vfprintf_internal_r+0x520>
 10035e0:	d9014f17 	ldw	r4,1340(sp)
 10035e4:	b00b883a 	mov	r5,r22
 10035e8:	d9800c04 	addi	r6,sp,48
 10035ec:	d9c15115 	stw	r7,1348(sp)
 10035f0:	100292c0 	call	100292c <__sprint_r>
 10035f4:	d9c15117 	ldw	r7,1348(sp)
 10035f8:	103ea01e 	bne	r2,zero,100307c <___vfprintf_internal_r+0x6ec>
 10035fc:	dc800e17 	ldw	r18,56(sp)
 1003600:	dc400d17 	ldw	r17,52(sp)
 1003604:	dd401904 	addi	r21,sp,100
 1003608:	003e1c06 	br	1002e7c <___vfprintf_internal_r+0x4ec>
 100360c:	d9014f17 	ldw	r4,1340(sp)
 1003610:	b00b883a 	mov	r5,r22
 1003614:	d9800c04 	addi	r6,sp,48
 1003618:	d9c15115 	stw	r7,1348(sp)
 100361c:	100292c0 	call	100292c <__sprint_r>
 1003620:	d9c15117 	ldw	r7,1348(sp)
 1003624:	103e951e 	bne	r2,zero,100307c <___vfprintf_internal_r+0x6ec>
 1003628:	dc800e17 	ldw	r18,56(sp)
 100362c:	dc400d17 	ldw	r17,52(sp)
 1003630:	dd401904 	addi	r21,sp,100
 1003634:	003e0406 	br	1002e48 <___vfprintf_internal_r+0x4b8>
 1003638:	d9000517 	ldw	r4,20(sp)
 100363c:	0102580e 	bge	zero,r4,1003fa0 <___vfprintf_internal_r+0x1610>
 1003640:	d9814717 	ldw	r6,1308(sp)
 1003644:	21807a16 	blt	r4,r6,1003830 <___vfprintf_internal_r+0xea0>
 1003648:	d8814117 	ldw	r2,1284(sp)
 100364c:	91a5883a 	add	r18,r18,r6
 1003650:	8c400044 	addi	r17,r17,1
 1003654:	a8800015 	stw	r2,0(r21)
 1003658:	008001c4 	movi	r2,7
 100365c:	a9800115 	stw	r6,4(r21)
 1003660:	dc800e15 	stw	r18,56(sp)
 1003664:	dc400d15 	stw	r17,52(sp)
 1003668:	1442fc16 	blt	r2,r17,100425c <___vfprintf_internal_r+0x18cc>
 100366c:	a8c00204 	addi	r3,r21,8
 1003670:	d9414717 	ldw	r5,1308(sp)
 1003674:	2161c83a 	sub	r16,r4,r5
 1003678:	043f9d0e 	bge	zero,r16,10034f0 <___vfprintf_internal_r+0xb60>
 100367c:	00800404 	movi	r2,16
 1003680:	1402190e 	bge	r2,r16,1003ee8 <___vfprintf_internal_r+0x1558>
 1003684:	dc400d17 	ldw	r17,52(sp)
 1003688:	1027883a 	mov	r19,r2
 100368c:	070040b4 	movhi	fp,258
 1003690:	e7279484 	addi	fp,fp,-25006
 1003694:	050001c4 	movi	r20,7
 1003698:	00000306 	br	10036a8 <___vfprintf_internal_r+0xd18>
 100369c:	18c00204 	addi	r3,r3,8
 10036a0:	843ffc04 	addi	r16,r16,-16
 10036a4:	9c02130e 	bge	r19,r16,1003ef4 <___vfprintf_internal_r+0x1564>
 10036a8:	94800404 	addi	r18,r18,16
 10036ac:	8c400044 	addi	r17,r17,1
 10036b0:	1f000015 	stw	fp,0(r3)
 10036b4:	1cc00115 	stw	r19,4(r3)
 10036b8:	dc800e15 	stw	r18,56(sp)
 10036bc:	dc400d15 	stw	r17,52(sp)
 10036c0:	a47ff60e 	bge	r20,r17,100369c <___vfprintf_internal_r+0xd0c>
 10036c4:	d9014f17 	ldw	r4,1340(sp)
 10036c8:	b00b883a 	mov	r5,r22
 10036cc:	d9800c04 	addi	r6,sp,48
 10036d0:	100292c0 	call	100292c <__sprint_r>
 10036d4:	103e691e 	bne	r2,zero,100307c <___vfprintf_internal_r+0x6ec>
 10036d8:	dc800e17 	ldw	r18,56(sp)
 10036dc:	dc400d17 	ldw	r17,52(sp)
 10036e0:	d8c01904 	addi	r3,sp,100
 10036e4:	003fee06 	br	10036a0 <___vfprintf_internal_r+0xd10>
 10036e8:	d8814717 	ldw	r2,1308(sp)
 10036ec:	143fffc4 	addi	r16,r2,-1
 10036f0:	043e970e 	bge	zero,r16,1003150 <___vfprintf_internal_r+0x7c0>
 10036f4:	00800404 	movi	r2,16
 10036f8:	1400180e 	bge	r2,r16,100375c <___vfprintf_internal_r+0xdcc>
 10036fc:	1029883a 	mov	r20,r2
 1003700:	070040b4 	movhi	fp,258
 1003704:	e7279484 	addi	fp,fp,-25006
 1003708:	054001c4 	movi	r21,7
 100370c:	00000306 	br	100371c <___vfprintf_internal_r+0xd8c>
 1003710:	9cc00204 	addi	r19,r19,8
 1003714:	843ffc04 	addi	r16,r16,-16
 1003718:	a400120e 	bge	r20,r16,1003764 <___vfprintf_internal_r+0xdd4>
 100371c:	94800404 	addi	r18,r18,16
 1003720:	8c400044 	addi	r17,r17,1
 1003724:	9f000015 	stw	fp,0(r19)
 1003728:	9d000115 	stw	r20,4(r19)
 100372c:	dc800e15 	stw	r18,56(sp)
 1003730:	dc400d15 	stw	r17,52(sp)
 1003734:	ac7ff60e 	bge	r21,r17,1003710 <___vfprintf_internal_r+0xd80>
 1003738:	d9014f17 	ldw	r4,1340(sp)
 100373c:	b00b883a 	mov	r5,r22
 1003740:	d9800c04 	addi	r6,sp,48
 1003744:	100292c0 	call	100292c <__sprint_r>
 1003748:	103e4c1e 	bne	r2,zero,100307c <___vfprintf_internal_r+0x6ec>
 100374c:	dc800e17 	ldw	r18,56(sp)
 1003750:	dc400d17 	ldw	r17,52(sp)
 1003754:	dcc01904 	addi	r19,sp,100
 1003758:	003fee06 	br	1003714 <___vfprintf_internal_r+0xd84>
 100375c:	070040b4 	movhi	fp,258
 1003760:	e7279484 	addi	fp,fp,-25006
 1003764:	9425883a 	add	r18,r18,r16
 1003768:	8c400044 	addi	r17,r17,1
 100376c:	008001c4 	movi	r2,7
 1003770:	9f000015 	stw	fp,0(r19)
 1003774:	9c000115 	stw	r16,4(r19)
 1003778:	dc800e15 	stw	r18,56(sp)
 100377c:	dc400d15 	stw	r17,52(sp)
 1003780:	147e720e 	bge	r2,r17,100314c <___vfprintf_internal_r+0x7bc>
 1003784:	d9014f17 	ldw	r4,1340(sp)
 1003788:	b00b883a 	mov	r5,r22
 100378c:	d9800c04 	addi	r6,sp,48
 1003790:	100292c0 	call	100292c <__sprint_r>
 1003794:	103e391e 	bne	r2,zero,100307c <___vfprintf_internal_r+0x6ec>
 1003798:	dc800e17 	ldw	r18,56(sp)
 100379c:	dc400d17 	ldw	r17,52(sp)
 10037a0:	dcc01904 	addi	r19,sp,100
 10037a4:	003e6a06 	br	1003150 <___vfprintf_internal_r+0x7c0>
 10037a8:	d9014f17 	ldw	r4,1340(sp)
 10037ac:	b00b883a 	mov	r5,r22
 10037b0:	d9800c04 	addi	r6,sp,48
 10037b4:	d9c15115 	stw	r7,1348(sp)
 10037b8:	100292c0 	call	100292c <__sprint_r>
 10037bc:	d9c15117 	ldw	r7,1348(sp)
 10037c0:	103e2e1e 	bne	r2,zero,100307c <___vfprintf_internal_r+0x6ec>
 10037c4:	dc800e17 	ldw	r18,56(sp)
 10037c8:	dc400d17 	ldw	r17,52(sp)
 10037cc:	dd401904 	addi	r21,sp,100
 10037d0:	003dba06 	br	1002ebc <___vfprintf_internal_r+0x52c>
 10037d4:	d9014f17 	ldw	r4,1340(sp)
 10037d8:	b00b883a 	mov	r5,r22
 10037dc:	d9800c04 	addi	r6,sp,48
 10037e0:	100292c0 	call	100292c <__sprint_r>
 10037e4:	103e251e 	bne	r2,zero,100307c <___vfprintf_internal_r+0x6ec>
 10037e8:	dc800e17 	ldw	r18,56(sp)
 10037ec:	dc400d17 	ldw	r17,52(sp)
 10037f0:	dcc01904 	addi	r19,sp,100
 10037f4:	003e4206 	br	1003100 <___vfprintf_internal_r+0x770>
 10037f8:	d9014f17 	ldw	r4,1340(sp)
 10037fc:	b00b883a 	mov	r5,r22
 1003800:	d9800c04 	addi	r6,sp,48
 1003804:	100292c0 	call	100292c <__sprint_r>
 1003808:	103e1c1e 	bne	r2,zero,100307c <___vfprintf_internal_r+0x6ec>
 100380c:	dc800e17 	ldw	r18,56(sp)
 1003810:	dc400d17 	ldw	r17,52(sp)
 1003814:	d8c01904 	addi	r3,sp,100
 1003818:	003e2e06 	br	10030d4 <___vfprintf_internal_r+0x744>
 100381c:	d9414c17 	ldw	r5,1328(sp)
 1003820:	2880004c 	andi	r2,r5,1
 1003824:	1005003a 	cmpeq	r2,r2,zero
 1003828:	103dda1e 	bne	r2,zero,1002f94 <___vfprintf_internal_r+0x604>
 100382c:	003e9f06 	br	10032ac <___vfprintf_internal_r+0x91c>
 1003830:	d8c14117 	ldw	r3,1284(sp)
 1003834:	9125883a 	add	r18,r18,r4
 1003838:	8c400044 	addi	r17,r17,1
 100383c:	008001c4 	movi	r2,7
 1003840:	a8c00015 	stw	r3,0(r21)
 1003844:	a9000115 	stw	r4,4(r21)
 1003848:	dc800e15 	stw	r18,56(sp)
 100384c:	dc400d15 	stw	r17,52(sp)
 1003850:	14426c16 	blt	r2,r17,1004204 <___vfprintf_internal_r+0x1874>
 1003854:	a8c00204 	addi	r3,r21,8
 1003858:	d9414917 	ldw	r5,1316(sp)
 100385c:	00800044 	movi	r2,1
 1003860:	94800044 	addi	r18,r18,1
 1003864:	8c400044 	addi	r17,r17,1
 1003868:	18800115 	stw	r2,4(r3)
 100386c:	008001c4 	movi	r2,7
 1003870:	19400015 	stw	r5,0(r3)
 1003874:	dc800e15 	stw	r18,56(sp)
 1003878:	dc400d15 	stw	r17,52(sp)
 100387c:	2021883a 	mov	r16,r4
 1003880:	14425616 	blt	r2,r17,10041dc <___vfprintf_internal_r+0x184c>
 1003884:	19400204 	addi	r5,r3,8
 1003888:	d9814717 	ldw	r6,1308(sp)
 100388c:	8c400044 	addi	r17,r17,1
 1003890:	dc400d15 	stw	r17,52(sp)
 1003894:	3107c83a 	sub	r3,r6,r4
 1003898:	d9014117 	ldw	r4,1284(sp)
 100389c:	90e5883a 	add	r18,r18,r3
 10038a0:	28c00115 	stw	r3,4(r5)
 10038a4:	8105883a 	add	r2,r16,r4
 10038a8:	28800015 	stw	r2,0(r5)
 10038ac:	008001c4 	movi	r2,7
 10038b0:	dc800e15 	stw	r18,56(sp)
 10038b4:	147f1d16 	blt	r2,r17,100352c <___vfprintf_internal_r+0xb9c>
 10038b8:	28c00204 	addi	r3,r5,8
 10038bc:	003db506 	br	1002f94 <___vfprintf_internal_r+0x604>
 10038c0:	3c000017 	ldw	r16,0(r7)
 10038c4:	3c400117 	ldw	r17,4(r7)
 10038c8:	39800204 	addi	r6,r7,8
 10038cc:	01000044 	movi	r4,1
 10038d0:	d9814015 	stw	r6,1280(sp)
 10038d4:	d8000405 	stb	zero,16(sp)
 10038d8:	003ebe06 	br	10033d4 <___vfprintf_internal_r+0xa44>
 10038dc:	3c000017 	ldw	r16,0(r7)
 10038e0:	3c400117 	ldw	r17,4(r7)
 10038e4:	38800204 	addi	r2,r7,8
 10038e8:	d8814015 	stw	r2,1280(sp)
 10038ec:	003eb706 	br	10033cc <___vfprintf_internal_r+0xa3c>
 10038f0:	3c000017 	ldw	r16,0(r7)
 10038f4:	3c400117 	ldw	r17,4(r7)
 10038f8:	39000204 	addi	r4,r7,8
 10038fc:	d9014015 	stw	r4,1280(sp)
 1003900:	0009883a 	mov	r4,zero
 1003904:	d8000405 	stb	zero,16(sp)
 1003908:	003eb206 	br	10033d4 <___vfprintf_internal_r+0xa44>
 100390c:	38c00017 	ldw	r3,0(r7)
 1003910:	39c00104 	addi	r7,r7,4
 1003914:	d8c14a15 	stw	r3,1320(sp)
 1003918:	1800d70e 	bge	r3,zero,1003c78 <___vfprintf_internal_r+0x12e8>
 100391c:	00c7c83a 	sub	r3,zero,r3
 1003920:	d8c14a15 	stw	r3,1320(sp)
 1003924:	d9014c17 	ldw	r4,1328(sp)
 1003928:	b8c00007 	ldb	r3,0(r23)
 100392c:	21000114 	ori	r4,r4,4
 1003930:	d9014c15 	stw	r4,1328(sp)
 1003934:	003c9806 	br	1002b98 <___vfprintf_internal_r+0x208>
 1003938:	d9814c17 	ldw	r6,1328(sp)
 100393c:	3080080c 	andi	r2,r6,32
 1003940:	1001f626 	beq	r2,zero,100411c <___vfprintf_internal_r+0x178c>
 1003944:	d9014b17 	ldw	r4,1324(sp)
 1003948:	38800017 	ldw	r2,0(r7)
 100394c:	39c00104 	addi	r7,r7,4
 1003950:	d9c14015 	stw	r7,1280(sp)
 1003954:	2007d7fa 	srai	r3,r4,31
 1003958:	d9c14017 	ldw	r7,1280(sp)
 100395c:	11000015 	stw	r4,0(r2)
 1003960:	10c00115 	stw	r3,4(r2)
 1003964:	003c6906 	br	1002b0c <___vfprintf_internal_r+0x17c>
 1003968:	b8c00007 	ldb	r3,0(r23)
 100396c:	00801b04 	movi	r2,108
 1003970:	18825526 	beq	r3,r2,10042c8 <___vfprintf_internal_r+0x1938>
 1003974:	d9414c17 	ldw	r5,1328(sp)
 1003978:	29400414 	ori	r5,r5,16
 100397c:	d9414c15 	stw	r5,1328(sp)
 1003980:	003c8506 	br	1002b98 <___vfprintf_internal_r+0x208>
 1003984:	d9814c17 	ldw	r6,1328(sp)
 1003988:	b8c00007 	ldb	r3,0(r23)
 100398c:	31800814 	ori	r6,r6,32
 1003990:	d9814c15 	stw	r6,1328(sp)
 1003994:	003c8006 	br	1002b98 <___vfprintf_internal_r+0x208>
 1003998:	d8814c17 	ldw	r2,1328(sp)
 100399c:	3c000017 	ldw	r16,0(r7)
 10039a0:	00c01e04 	movi	r3,120
 10039a4:	10800094 	ori	r2,r2,2
 10039a8:	d8814c15 	stw	r2,1328(sp)
 10039ac:	39c00104 	addi	r7,r7,4
 10039b0:	014040b4 	movhi	r5,258
 10039b4:	29677d04 	addi	r5,r5,-25100
 10039b8:	00800c04 	movi	r2,48
 10039bc:	0023883a 	mov	r17,zero
 10039c0:	01000084 	movi	r4,2
 10039c4:	d9c14015 	stw	r7,1280(sp)
 10039c8:	d8c14d15 	stw	r3,1332(sp)
 10039cc:	d9414415 	stw	r5,1296(sp)
 10039d0:	d8800445 	stb	r2,17(sp)
 10039d4:	d8c00485 	stb	r3,18(sp)
 10039d8:	d8000405 	stb	zero,16(sp)
 10039dc:	003e7d06 	br	10033d4 <___vfprintf_internal_r+0xa44>
 10039e0:	d8814c17 	ldw	r2,1328(sp)
 10039e4:	b8c00007 	ldb	r3,0(r23)
 10039e8:	10801014 	ori	r2,r2,64
 10039ec:	d8814c15 	stw	r2,1328(sp)
 10039f0:	003c6906 	br	1002b98 <___vfprintf_internal_r+0x208>
 10039f4:	d9414c17 	ldw	r5,1328(sp)
 10039f8:	2880020c 	andi	r2,r5,8
 10039fc:	1001e526 	beq	r2,zero,1004194 <___vfprintf_internal_r+0x1804>
 1003a00:	39800017 	ldw	r6,0(r7)
 1003a04:	38800204 	addi	r2,r7,8
 1003a08:	d8814015 	stw	r2,1280(sp)
 1003a0c:	d9814215 	stw	r6,1288(sp)
 1003a10:	39c00117 	ldw	r7,4(r7)
 1003a14:	d9c14315 	stw	r7,1292(sp)
 1003a18:	d9014217 	ldw	r4,1288(sp)
 1003a1c:	d9414317 	ldw	r5,1292(sp)
 1003a20:	10098f40 	call	10098f4 <__isinfd>
 1003a24:	10021d26 	beq	r2,zero,100429c <___vfprintf_internal_r+0x190c>
 1003a28:	d9014217 	ldw	r4,1288(sp)
 1003a2c:	d9414317 	ldw	r5,1292(sp)
 1003a30:	000d883a 	mov	r6,zero
 1003a34:	000f883a 	mov	r7,zero
 1003a38:	100b4680 	call	100b468 <__ltdf2>
 1003a3c:	1002d016 	blt	r2,zero,1004580 <___vfprintf_internal_r+0x1bf0>
 1003a40:	d9414d17 	ldw	r5,1332(sp)
 1003a44:	008011c4 	movi	r2,71
 1003a48:	11421016 	blt	r2,r5,100428c <___vfprintf_internal_r+0x18fc>
 1003a4c:	018040b4 	movhi	r6,258
 1003a50:	31a78204 	addi	r6,r6,-25080
 1003a54:	d9814115 	stw	r6,1284(sp)
 1003a58:	d9014c17 	ldw	r4,1328(sp)
 1003a5c:	00c000c4 	movi	r3,3
 1003a60:	00bfdfc4 	movi	r2,-129
 1003a64:	2088703a 	and	r4,r4,r2
 1003a68:	180f883a 	mov	r7,r3
 1003a6c:	d8c14515 	stw	r3,1300(sp)
 1003a70:	d9014c15 	stw	r4,1328(sp)
 1003a74:	d8014615 	stw	zero,1304(sp)
 1003a78:	003e6a06 	br	1003424 <___vfprintf_internal_r+0xa94>
 1003a7c:	38800017 	ldw	r2,0(r7)
 1003a80:	00c00044 	movi	r3,1
 1003a84:	39c00104 	addi	r7,r7,4
 1003a88:	d9c14015 	stw	r7,1280(sp)
 1003a8c:	d9000f04 	addi	r4,sp,60
 1003a90:	180f883a 	mov	r7,r3
 1003a94:	d8c14515 	stw	r3,1300(sp)
 1003a98:	d9014115 	stw	r4,1284(sp)
 1003a9c:	d8800f05 	stb	r2,60(sp)
 1003aa0:	d8000405 	stb	zero,16(sp)
 1003aa4:	003cac06 	br	1002d58 <___vfprintf_internal_r+0x3c8>
 1003aa8:	014040b4 	movhi	r5,258
 1003aac:	29678804 	addi	r5,r5,-25056
 1003ab0:	d9414415 	stw	r5,1296(sp)
 1003ab4:	d9814c17 	ldw	r6,1328(sp)
 1003ab8:	3080080c 	andi	r2,r6,32
 1003abc:	1000ff26 	beq	r2,zero,1003ebc <___vfprintf_internal_r+0x152c>
 1003ac0:	3c000017 	ldw	r16,0(r7)
 1003ac4:	3c400117 	ldw	r17,4(r7)
 1003ac8:	38800204 	addi	r2,r7,8
 1003acc:	d8814015 	stw	r2,1280(sp)
 1003ad0:	d9414c17 	ldw	r5,1328(sp)
 1003ad4:	2880004c 	andi	r2,r5,1
 1003ad8:	1005003a 	cmpeq	r2,r2,zero
 1003adc:	1000b91e 	bne	r2,zero,1003dc4 <___vfprintf_internal_r+0x1434>
 1003ae0:	8444b03a 	or	r2,r16,r17
 1003ae4:	1000b726 	beq	r2,zero,1003dc4 <___vfprintf_internal_r+0x1434>
 1003ae8:	d9814d17 	ldw	r6,1332(sp)
 1003aec:	29400094 	ori	r5,r5,2
 1003af0:	00800c04 	movi	r2,48
 1003af4:	01000084 	movi	r4,2
 1003af8:	d9414c15 	stw	r5,1328(sp)
 1003afc:	d8800445 	stb	r2,17(sp)
 1003b00:	d9800485 	stb	r6,18(sp)
 1003b04:	d8000405 	stb	zero,16(sp)
 1003b08:	003e3206 	br	10033d4 <___vfprintf_internal_r+0xa44>
 1003b0c:	018040b4 	movhi	r6,258
 1003b10:	31a77d04 	addi	r6,r6,-25100
 1003b14:	d9814415 	stw	r6,1296(sp)
 1003b18:	003fe606 	br	1003ab4 <___vfprintf_internal_r+0x1124>
 1003b1c:	00800ac4 	movi	r2,43
 1003b20:	d8800405 	stb	r2,16(sp)
 1003b24:	b8c00007 	ldb	r3,0(r23)
 1003b28:	003c1b06 	br	1002b98 <___vfprintf_internal_r+0x208>
 1003b2c:	d8814c17 	ldw	r2,1328(sp)
 1003b30:	b8c00007 	ldb	r3,0(r23)
 1003b34:	10800054 	ori	r2,r2,1
 1003b38:	d8814c15 	stw	r2,1328(sp)
 1003b3c:	003c1606 	br	1002b98 <___vfprintf_internal_r+0x208>
 1003b40:	d8800407 	ldb	r2,16(sp)
 1003b44:	10004c1e 	bne	r2,zero,1003c78 <___vfprintf_internal_r+0x12e8>
 1003b48:	00800804 	movi	r2,32
 1003b4c:	d8800405 	stb	r2,16(sp)
 1003b50:	b8c00007 	ldb	r3,0(r23)
 1003b54:	003c1006 	br	1002b98 <___vfprintf_internal_r+0x208>
 1003b58:	d9814c17 	ldw	r6,1328(sp)
 1003b5c:	b8c00007 	ldb	r3,0(r23)
 1003b60:	31800214 	ori	r6,r6,8
 1003b64:	d9814c15 	stw	r6,1328(sp)
 1003b68:	003c0b06 	br	1002b98 <___vfprintf_internal_r+0x208>
 1003b6c:	0009883a 	mov	r4,zero
 1003b70:	04000244 	movi	r16,9
 1003b74:	01400284 	movi	r5,10
 1003b78:	d9c15115 	stw	r7,1348(sp)
 1003b7c:	10021e00 	call	10021e0 <__mulsi3>
 1003b80:	b9000007 	ldb	r4,0(r23)
 1003b84:	d8c14d17 	ldw	r3,1332(sp)
 1003b88:	bdc00044 	addi	r23,r23,1
 1003b8c:	d9014d15 	stw	r4,1332(sp)
 1003b90:	d9414d17 	ldw	r5,1332(sp)
 1003b94:	1885883a 	add	r2,r3,r2
 1003b98:	113ff404 	addi	r4,r2,-48
 1003b9c:	28bff404 	addi	r2,r5,-48
 1003ba0:	d9c15117 	ldw	r7,1348(sp)
 1003ba4:	80bff32e 	bgeu	r16,r2,1003b74 <___vfprintf_internal_r+0x11e4>
 1003ba8:	d9014a15 	stw	r4,1320(sp)
 1003bac:	003bfc06 	br	1002ba0 <___vfprintf_internal_r+0x210>
 1003bb0:	d8814c17 	ldw	r2,1328(sp)
 1003bb4:	b8c00007 	ldb	r3,0(r23)
 1003bb8:	10802014 	ori	r2,r2,128
 1003bbc:	d8814c15 	stw	r2,1328(sp)
 1003bc0:	003bf506 	br	1002b98 <___vfprintf_internal_r+0x208>
 1003bc4:	b8c00007 	ldb	r3,0(r23)
 1003bc8:	00800a84 	movi	r2,42
 1003bcc:	bdc00044 	addi	r23,r23,1
 1003bd0:	18831826 	beq	r3,r2,1004834 <___vfprintf_internal_r+0x1ea4>
 1003bd4:	d8c14d15 	stw	r3,1332(sp)
 1003bd8:	18bff404 	addi	r2,r3,-48
 1003bdc:	00c00244 	movi	r3,9
 1003be0:	18827b36 	bltu	r3,r2,10045d0 <___vfprintf_internal_r+0x1c40>
 1003be4:	1821883a 	mov	r16,r3
 1003be8:	0009883a 	mov	r4,zero
 1003bec:	01400284 	movi	r5,10
 1003bf0:	d9c15115 	stw	r7,1348(sp)
 1003bf4:	10021e00 	call	10021e0 <__mulsi3>
 1003bf8:	d9414d17 	ldw	r5,1332(sp)
 1003bfc:	b9800007 	ldb	r6,0(r23)
 1003c00:	d9c15117 	ldw	r7,1348(sp)
 1003c04:	1145883a 	add	r2,r2,r5
 1003c08:	113ff404 	addi	r4,r2,-48
 1003c0c:	30bff404 	addi	r2,r6,-48
 1003c10:	d9814d15 	stw	r6,1332(sp)
 1003c14:	bdc00044 	addi	r23,r23,1
 1003c18:	80bff42e 	bgeu	r16,r2,1003bec <___vfprintf_internal_r+0x125c>
 1003c1c:	2027883a 	mov	r19,r4
 1003c20:	203bdf0e 	bge	r4,zero,1002ba0 <___vfprintf_internal_r+0x210>
 1003c24:	04ffffc4 	movi	r19,-1
 1003c28:	003bdd06 	br	1002ba0 <___vfprintf_internal_r+0x210>
 1003c2c:	d8000405 	stb	zero,16(sp)
 1003c30:	39800017 	ldw	r6,0(r7)
 1003c34:	39c00104 	addi	r7,r7,4
 1003c38:	d9c14015 	stw	r7,1280(sp)
 1003c3c:	d9814115 	stw	r6,1284(sp)
 1003c40:	3001c926 	beq	r6,zero,1004368 <___vfprintf_internal_r+0x19d8>
 1003c44:	98000e16 	blt	r19,zero,1003c80 <___vfprintf_internal_r+0x12f0>
 1003c48:	d9014117 	ldw	r4,1284(sp)
 1003c4c:	000b883a 	mov	r5,zero
 1003c50:	980d883a 	mov	r6,r19
 1003c54:	1007c500 	call	1007c50 <memchr>
 1003c58:	10025926 	beq	r2,zero,10045c0 <___vfprintf_internal_r+0x1c30>
 1003c5c:	d8c14117 	ldw	r3,1284(sp)
 1003c60:	10cfc83a 	sub	r7,r2,r3
 1003c64:	99c19e16 	blt	r19,r7,10042e0 <___vfprintf_internal_r+0x1950>
 1003c68:	d9c14515 	stw	r7,1300(sp)
 1003c6c:	38000916 	blt	r7,zero,1003c94 <___vfprintf_internal_r+0x1304>
 1003c70:	d8014615 	stw	zero,1304(sp)
 1003c74:	003deb06 	br	1003424 <___vfprintf_internal_r+0xa94>
 1003c78:	b8c00007 	ldb	r3,0(r23)
 1003c7c:	003bc606 	br	1002b98 <___vfprintf_internal_r+0x208>
 1003c80:	d9014117 	ldw	r4,1284(sp)
 1003c84:	10028ac0 	call	10028ac <strlen>
 1003c88:	d8814515 	stw	r2,1300(sp)
 1003c8c:	100f883a 	mov	r7,r2
 1003c90:	103ff70e 	bge	r2,zero,1003c70 <___vfprintf_internal_r+0x12e0>
 1003c94:	d8014515 	stw	zero,1300(sp)
 1003c98:	d8014615 	stw	zero,1304(sp)
 1003c9c:	003de106 	br	1003424 <___vfprintf_internal_r+0xa94>
 1003ca0:	20c03fcc 	andi	r3,r4,255
 1003ca4:	00800044 	movi	r2,1
 1003ca8:	18802d26 	beq	r3,r2,1003d60 <___vfprintf_internal_r+0x13d0>
 1003cac:	18800e36 	bltu	r3,r2,1003ce8 <___vfprintf_internal_r+0x1358>
 1003cb0:	00800084 	movi	r2,2
 1003cb4:	1880fa26 	beq	r3,r2,10040a0 <___vfprintf_internal_r+0x1710>
 1003cb8:	010040b4 	movhi	r4,258
 1003cbc:	21278d04 	addi	r4,r4,-25036
 1003cc0:	10028ac0 	call	10028ac <strlen>
 1003cc4:	100f883a 	mov	r7,r2
 1003cc8:	dcc14515 	stw	r19,1300(sp)
 1003ccc:	9880010e 	bge	r19,r2,1003cd4 <___vfprintf_internal_r+0x1344>
 1003cd0:	d8814515 	stw	r2,1300(sp)
 1003cd4:	008040b4 	movhi	r2,258
 1003cd8:	10a78d04 	addi	r2,r2,-25036
 1003cdc:	dcc14615 	stw	r19,1304(sp)
 1003ce0:	d8814115 	stw	r2,1284(sp)
 1003ce4:	003dcf06 	br	1003424 <___vfprintf_internal_r+0xa94>
 1003ce8:	d9401904 	addi	r5,sp,100
 1003cec:	dd000f04 	addi	r20,sp,60
 1003cf0:	d9414115 	stw	r5,1284(sp)
 1003cf4:	880a977a 	slli	r5,r17,29
 1003cf8:	d9814117 	ldw	r6,1284(sp)
 1003cfc:	8004d0fa 	srli	r2,r16,3
 1003d00:	8806d0fa 	srli	r3,r17,3
 1003d04:	810001cc 	andi	r4,r16,7
 1003d08:	2884b03a 	or	r2,r5,r2
 1003d0c:	31bfffc4 	addi	r6,r6,-1
 1003d10:	21000c04 	addi	r4,r4,48
 1003d14:	d9814115 	stw	r6,1284(sp)
 1003d18:	10cab03a 	or	r5,r2,r3
 1003d1c:	31000005 	stb	r4,0(r6)
 1003d20:	1021883a 	mov	r16,r2
 1003d24:	1823883a 	mov	r17,r3
 1003d28:	283ff21e 	bne	r5,zero,1003cf4 <___vfprintf_internal_r+0x1364>
 1003d2c:	d8c14c17 	ldw	r3,1328(sp)
 1003d30:	1880004c 	andi	r2,r3,1
 1003d34:	1005003a 	cmpeq	r2,r2,zero
 1003d38:	103db31e 	bne	r2,zero,1003408 <___vfprintf_internal_r+0xa78>
 1003d3c:	20803fcc 	andi	r2,r4,255
 1003d40:	1080201c 	xori	r2,r2,128
 1003d44:	10bfe004 	addi	r2,r2,-128
 1003d48:	00c00c04 	movi	r3,48
 1003d4c:	10fdae26 	beq	r2,r3,1003408 <___vfprintf_internal_r+0xa78>
 1003d50:	31bfffc4 	addi	r6,r6,-1
 1003d54:	d9814115 	stw	r6,1284(sp)
 1003d58:	30c00005 	stb	r3,0(r6)
 1003d5c:	003daa06 	br	1003408 <___vfprintf_internal_r+0xa78>
 1003d60:	88800068 	cmpgeui	r2,r17,1
 1003d64:	10002c1e 	bne	r2,zero,1003e18 <___vfprintf_internal_r+0x1488>
 1003d68:	8800021e 	bne	r17,zero,1003d74 <___vfprintf_internal_r+0x13e4>
 1003d6c:	00800244 	movi	r2,9
 1003d70:	14002936 	bltu	r2,r16,1003e18 <___vfprintf_internal_r+0x1488>
 1003d74:	d90018c4 	addi	r4,sp,99
 1003d78:	dd000f04 	addi	r20,sp,60
 1003d7c:	d9014115 	stw	r4,1284(sp)
 1003d80:	d9014117 	ldw	r4,1284(sp)
 1003d84:	80800c04 	addi	r2,r16,48
 1003d88:	20800005 	stb	r2,0(r4)
 1003d8c:	003d9e06 	br	1003408 <___vfprintf_internal_r+0xa78>
 1003d90:	dc400d17 	ldw	r17,52(sp)
 1003d94:	070040b4 	movhi	fp,258
 1003d98:	e7279484 	addi	fp,fp,-25006
 1003d9c:	9425883a 	add	r18,r18,r16
 1003da0:	8c400044 	addi	r17,r17,1
 1003da4:	008001c4 	movi	r2,7
 1003da8:	1f000015 	stw	fp,0(r3)
 1003dac:	1c000115 	stw	r16,4(r3)
 1003db0:	dc800e15 	stw	r18,56(sp)
 1003db4:	dc400d15 	stw	r17,52(sp)
 1003db8:	147ddc16 	blt	r2,r17,100352c <___vfprintf_internal_r+0xb9c>
 1003dbc:	18c00204 	addi	r3,r3,8
 1003dc0:	003c7406 	br	1002f94 <___vfprintf_internal_r+0x604>
 1003dc4:	01000084 	movi	r4,2
 1003dc8:	d8000405 	stb	zero,16(sp)
 1003dcc:	003d8106 	br	10033d4 <___vfprintf_internal_r+0xa44>
 1003dd0:	d9814c17 	ldw	r6,1328(sp)
 1003dd4:	30c4703a 	and	r2,r6,r3
 1003dd8:	1005003a 	cmpeq	r2,r2,zero
 1003ddc:	103cb326 	beq	r2,zero,10030ac <___vfprintf_internal_r+0x71c>
 1003de0:	d9014117 	ldw	r4,1284(sp)
 1003de4:	94800044 	addi	r18,r18,1
 1003de8:	8c400044 	addi	r17,r17,1
 1003dec:	008001c4 	movi	r2,7
 1003df0:	a9000015 	stw	r4,0(r21)
 1003df4:	a8c00115 	stw	r3,4(r21)
 1003df8:	dc800e15 	stw	r18,56(sp)
 1003dfc:	dc400d15 	stw	r17,52(sp)
 1003e00:	147e6016 	blt	r2,r17,1003784 <___vfprintf_internal_r+0xdf4>
 1003e04:	acc00204 	addi	r19,r21,8
 1003e08:	003cd106 	br	1003150 <___vfprintf_internal_r+0x7c0>
 1003e0c:	070040b4 	movhi	fp,258
 1003e10:	e7279484 	addi	fp,fp,-25006
 1003e14:	003c4906 	br	1002f3c <___vfprintf_internal_r+0x5ac>
 1003e18:	dd000f04 	addi	r20,sp,60
 1003e1c:	dc801904 	addi	r18,sp,100
 1003e20:	8009883a 	mov	r4,r16
 1003e24:	880b883a 	mov	r5,r17
 1003e28:	01800284 	movi	r6,10
 1003e2c:	000f883a 	mov	r7,zero
 1003e30:	100a2b40 	call	100a2b4 <__umoddi3>
 1003e34:	12000c04 	addi	r8,r2,48
 1003e38:	94bfffc4 	addi	r18,r18,-1
 1003e3c:	8009883a 	mov	r4,r16
 1003e40:	880b883a 	mov	r5,r17
 1003e44:	01800284 	movi	r6,10
 1003e48:	000f883a 	mov	r7,zero
 1003e4c:	92000005 	stb	r8,0(r18)
 1003e50:	10015dc0 	call	10015dc <__udivdi3>
 1003e54:	1009883a 	mov	r4,r2
 1003e58:	1021883a 	mov	r16,r2
 1003e5c:	18800068 	cmpgeui	r2,r3,1
 1003e60:	1823883a 	mov	r17,r3
 1003e64:	103fee1e 	bne	r2,zero,1003e20 <___vfprintf_internal_r+0x1490>
 1003e68:	1800021e 	bne	r3,zero,1003e74 <___vfprintf_internal_r+0x14e4>
 1003e6c:	00800244 	movi	r2,9
 1003e70:	113feb36 	bltu	r2,r4,1003e20 <___vfprintf_internal_r+0x1490>
 1003e74:	94bfffc4 	addi	r18,r18,-1
 1003e78:	dc814115 	stw	r18,1284(sp)
 1003e7c:	003fc006 	br	1003d80 <___vfprintf_internal_r+0x13f0>
 1003e80:	d9014c17 	ldw	r4,1328(sp)
 1003e84:	2080004c 	andi	r2,r4,1
 1003e88:	10009a1e 	bne	r2,zero,10040f4 <___vfprintf_internal_r+0x1764>
 1003e8c:	d9401904 	addi	r5,sp,100
 1003e90:	dd000f04 	addi	r20,sp,60
 1003e94:	d9414115 	stw	r5,1284(sp)
 1003e98:	003d5b06 	br	1003408 <___vfprintf_internal_r+0xa78>
 1003e9c:	d9014f17 	ldw	r4,1340(sp)
 1003ea0:	b00b883a 	mov	r5,r22
 1003ea4:	d9800c04 	addi	r6,sp,48
 1003ea8:	100292c0 	call	100292c <__sprint_r>
 1003eac:	103c731e 	bne	r2,zero,100307c <___vfprintf_internal_r+0x6ec>
 1003eb0:	dc800e17 	ldw	r18,56(sp)
 1003eb4:	d8c01904 	addi	r3,sp,100
 1003eb8:	003cf906 	br	10032a0 <___vfprintf_internal_r+0x910>
 1003ebc:	d8c14c17 	ldw	r3,1328(sp)
 1003ec0:	1880040c 	andi	r2,r3,16
 1003ec4:	1000711e 	bne	r2,zero,100408c <___vfprintf_internal_r+0x16fc>
 1003ec8:	d9014c17 	ldw	r4,1328(sp)
 1003ecc:	2080100c 	andi	r2,r4,64
 1003ed0:	10006e26 	beq	r2,zero,100408c <___vfprintf_internal_r+0x16fc>
 1003ed4:	3c00000b 	ldhu	r16,0(r7)
 1003ed8:	0023883a 	mov	r17,zero
 1003edc:	39c00104 	addi	r7,r7,4
 1003ee0:	d9c14015 	stw	r7,1280(sp)
 1003ee4:	003efa06 	br	1003ad0 <___vfprintf_internal_r+0x1140>
 1003ee8:	dc400d17 	ldw	r17,52(sp)
 1003eec:	070040b4 	movhi	fp,258
 1003ef0:	e7279484 	addi	fp,fp,-25006
 1003ef4:	9425883a 	add	r18,r18,r16
 1003ef8:	8c400044 	addi	r17,r17,1
 1003efc:	008001c4 	movi	r2,7
 1003f00:	1f000015 	stw	fp,0(r3)
 1003f04:	1c000115 	stw	r16,4(r3)
 1003f08:	dc800e15 	stw	r18,56(sp)
 1003f0c:	dc400d15 	stw	r17,52(sp)
 1003f10:	147d7016 	blt	r2,r17,10034d4 <___vfprintf_internal_r+0xb44>
 1003f14:	18c00204 	addi	r3,r3,8
 1003f18:	003d7506 	br	10034f0 <___vfprintf_internal_r+0xb60>
 1003f1c:	dc800e17 	ldw	r18,56(sp)
 1003f20:	dc400d17 	ldw	r17,52(sp)
 1003f24:	070040b4 	movhi	fp,258
 1003f28:	e7279884 	addi	fp,fp,-24990
 1003f2c:	003bba06 	br	1002e18 <___vfprintf_internal_r+0x488>
 1003f30:	d9014f17 	ldw	r4,1340(sp)
 1003f34:	b00b883a 	mov	r5,r22
 1003f38:	d9800c04 	addi	r6,sp,48
 1003f3c:	100292c0 	call	100292c <__sprint_r>
 1003f40:	103c4e1e 	bne	r2,zero,100307c <___vfprintf_internal_r+0x6ec>
 1003f44:	dc800e17 	ldw	r18,56(sp)
 1003f48:	d8c01904 	addi	r3,sp,100
 1003f4c:	003ce306 	br	10032dc <___vfprintf_internal_r+0x94c>
 1003f50:	3c000017 	ldw	r16,0(r7)
 1003f54:	0009883a 	mov	r4,zero
 1003f58:	39c00104 	addi	r7,r7,4
 1003f5c:	0023883a 	mov	r17,zero
 1003f60:	d9c14015 	stw	r7,1280(sp)
 1003f64:	d8000405 	stb	zero,16(sp)
 1003f68:	003d1a06 	br	10033d4 <___vfprintf_internal_r+0xa44>
 1003f6c:	38800017 	ldw	r2,0(r7)
 1003f70:	39c00104 	addi	r7,r7,4
 1003f74:	d9c14015 	stw	r7,1280(sp)
 1003f78:	1023d7fa 	srai	r17,r2,31
 1003f7c:	1021883a 	mov	r16,r2
 1003f80:	003d1206 	br	10033cc <___vfprintf_internal_r+0xa3c>
 1003f84:	3c000017 	ldw	r16,0(r7)
 1003f88:	01000044 	movi	r4,1
 1003f8c:	39c00104 	addi	r7,r7,4
 1003f90:	0023883a 	mov	r17,zero
 1003f94:	d9c14015 	stw	r7,1280(sp)
 1003f98:	d8000405 	stb	zero,16(sp)
 1003f9c:	003d0d06 	br	10033d4 <___vfprintf_internal_r+0xa44>
 1003fa0:	008040b4 	movhi	r2,258
 1003fa4:	10a79404 	addi	r2,r2,-25008
 1003fa8:	94800044 	addi	r18,r18,1
 1003fac:	8c400044 	addi	r17,r17,1
 1003fb0:	a8800015 	stw	r2,0(r21)
 1003fb4:	00c00044 	movi	r3,1
 1003fb8:	008001c4 	movi	r2,7
 1003fbc:	a8c00115 	stw	r3,4(r21)
 1003fc0:	dc800e15 	stw	r18,56(sp)
 1003fc4:	dc400d15 	stw	r17,52(sp)
 1003fc8:	1440ca16 	blt	r2,r17,10042f4 <___vfprintf_internal_r+0x1964>
 1003fcc:	a8c00204 	addi	r3,r21,8
 1003fd0:	2000061e 	bne	r4,zero,1003fec <___vfprintf_internal_r+0x165c>
 1003fd4:	d9414717 	ldw	r5,1308(sp)
 1003fd8:	2800041e 	bne	r5,zero,1003fec <___vfprintf_internal_r+0x165c>
 1003fdc:	d9814c17 	ldw	r6,1328(sp)
 1003fe0:	3080004c 	andi	r2,r6,1
 1003fe4:	1005003a 	cmpeq	r2,r2,zero
 1003fe8:	103bea1e 	bne	r2,zero,1002f94 <___vfprintf_internal_r+0x604>
 1003fec:	00800044 	movi	r2,1
 1003ff0:	dc400d17 	ldw	r17,52(sp)
 1003ff4:	18800115 	stw	r2,4(r3)
 1003ff8:	d8814917 	ldw	r2,1316(sp)
 1003ffc:	94800044 	addi	r18,r18,1
 1004000:	8c400044 	addi	r17,r17,1
 1004004:	18800015 	stw	r2,0(r3)
 1004008:	008001c4 	movi	r2,7
 100400c:	dc800e15 	stw	r18,56(sp)
 1004010:	dc400d15 	stw	r17,52(sp)
 1004014:	1440ca16 	blt	r2,r17,1004340 <___vfprintf_internal_r+0x19b0>
 1004018:	18c00204 	addi	r3,r3,8
 100401c:	0121c83a 	sub	r16,zero,r4
 1004020:	0400500e 	bge	zero,r16,1004164 <___vfprintf_internal_r+0x17d4>
 1004024:	00800404 	movi	r2,16
 1004028:	1400800e 	bge	r2,r16,100422c <___vfprintf_internal_r+0x189c>
 100402c:	1027883a 	mov	r19,r2
 1004030:	070040b4 	movhi	fp,258
 1004034:	e7279484 	addi	fp,fp,-25006
 1004038:	050001c4 	movi	r20,7
 100403c:	00000306 	br	100404c <___vfprintf_internal_r+0x16bc>
 1004040:	18c00204 	addi	r3,r3,8
 1004044:	843ffc04 	addi	r16,r16,-16
 1004048:	9c007a0e 	bge	r19,r16,1004234 <___vfprintf_internal_r+0x18a4>
 100404c:	94800404 	addi	r18,r18,16
 1004050:	8c400044 	addi	r17,r17,1
 1004054:	1f000015 	stw	fp,0(r3)
 1004058:	1cc00115 	stw	r19,4(r3)
 100405c:	dc800e15 	stw	r18,56(sp)
 1004060:	dc400d15 	stw	r17,52(sp)
 1004064:	a47ff60e 	bge	r20,r17,1004040 <___vfprintf_internal_r+0x16b0>
 1004068:	d9014f17 	ldw	r4,1340(sp)
 100406c:	b00b883a 	mov	r5,r22
 1004070:	d9800c04 	addi	r6,sp,48
 1004074:	100292c0 	call	100292c <__sprint_r>
 1004078:	103c001e 	bne	r2,zero,100307c <___vfprintf_internal_r+0x6ec>
 100407c:	dc800e17 	ldw	r18,56(sp)
 1004080:	dc400d17 	ldw	r17,52(sp)
 1004084:	d8c01904 	addi	r3,sp,100
 1004088:	003fee06 	br	1004044 <___vfprintf_internal_r+0x16b4>
 100408c:	3c000017 	ldw	r16,0(r7)
 1004090:	0023883a 	mov	r17,zero
 1004094:	39c00104 	addi	r7,r7,4
 1004098:	d9c14015 	stw	r7,1280(sp)
 100409c:	003e8c06 	br	1003ad0 <___vfprintf_internal_r+0x1140>
 10040a0:	d9401904 	addi	r5,sp,100
 10040a4:	dd000f04 	addi	r20,sp,60
 10040a8:	d9414115 	stw	r5,1284(sp)
 10040ac:	d9814417 	ldw	r6,1296(sp)
 10040b0:	880a973a 	slli	r5,r17,28
 10040b4:	8004d13a 	srli	r2,r16,4
 10040b8:	810003cc 	andi	r4,r16,15
 10040bc:	3109883a 	add	r4,r6,r4
 10040c0:	2884b03a 	or	r2,r5,r2
 10040c4:	21400003 	ldbu	r5,0(r4)
 10040c8:	d9014117 	ldw	r4,1284(sp)
 10040cc:	8806d13a 	srli	r3,r17,4
 10040d0:	1021883a 	mov	r16,r2
 10040d4:	213fffc4 	addi	r4,r4,-1
 10040d8:	d9014115 	stw	r4,1284(sp)
 10040dc:	d9814117 	ldw	r6,1284(sp)
 10040e0:	10c8b03a 	or	r4,r2,r3
 10040e4:	1823883a 	mov	r17,r3
 10040e8:	31400005 	stb	r5,0(r6)
 10040ec:	203fef1e 	bne	r4,zero,10040ac <___vfprintf_internal_r+0x171c>
 10040f0:	003cc506 	br	1003408 <___vfprintf_internal_r+0xa78>
 10040f4:	00800c04 	movi	r2,48
 10040f8:	d98018c4 	addi	r6,sp,99
 10040fc:	dd000f04 	addi	r20,sp,60
 1004100:	d88018c5 	stb	r2,99(sp)
 1004104:	d9814115 	stw	r6,1284(sp)
 1004108:	003cbf06 	br	1003408 <___vfprintf_internal_r+0xa78>
 100410c:	dc400d17 	ldw	r17,52(sp)
 1004110:	070040b4 	movhi	fp,258
 1004114:	e7279884 	addi	fp,fp,-24990
 1004118:	003bc106 	br	1003020 <___vfprintf_internal_r+0x690>
 100411c:	d9414c17 	ldw	r5,1328(sp)
 1004120:	2880040c 	andi	r2,r5,16
 1004124:	10007c26 	beq	r2,zero,1004318 <___vfprintf_internal_r+0x1988>
 1004128:	38800017 	ldw	r2,0(r7)
 100412c:	39c00104 	addi	r7,r7,4
 1004130:	d9c14015 	stw	r7,1280(sp)
 1004134:	d9814b17 	ldw	r6,1324(sp)
 1004138:	d9c14017 	ldw	r7,1280(sp)
 100413c:	11800015 	stw	r6,0(r2)
 1004140:	003a7206 	br	1002b0c <___vfprintf_internal_r+0x17c>
 1004144:	d9014f17 	ldw	r4,1340(sp)
 1004148:	b00b883a 	mov	r5,r22
 100414c:	d9800c04 	addi	r6,sp,48
 1004150:	100292c0 	call	100292c <__sprint_r>
 1004154:	103bc91e 	bne	r2,zero,100307c <___vfprintf_internal_r+0x6ec>
 1004158:	dc800e17 	ldw	r18,56(sp)
 100415c:	dc400d17 	ldw	r17,52(sp)
 1004160:	d8c01904 	addi	r3,sp,100
 1004164:	d9014717 	ldw	r4,1308(sp)
 1004168:	d9414117 	ldw	r5,1284(sp)
 100416c:	8c400044 	addi	r17,r17,1
 1004170:	9125883a 	add	r18,r18,r4
 1004174:	008001c4 	movi	r2,7
 1004178:	19400015 	stw	r5,0(r3)
 100417c:	19000115 	stw	r4,4(r3)
 1004180:	dc800e15 	stw	r18,56(sp)
 1004184:	dc400d15 	stw	r17,52(sp)
 1004188:	147ce816 	blt	r2,r17,100352c <___vfprintf_internal_r+0xb9c>
 100418c:	18c00204 	addi	r3,r3,8
 1004190:	003b8006 	br	1002f94 <___vfprintf_internal_r+0x604>
 1004194:	38c00017 	ldw	r3,0(r7)
 1004198:	39000204 	addi	r4,r7,8
 100419c:	d9014015 	stw	r4,1280(sp)
 10041a0:	d8c14215 	stw	r3,1288(sp)
 10041a4:	39c00117 	ldw	r7,4(r7)
 10041a8:	d9c14315 	stw	r7,1292(sp)
 10041ac:	003e1a06 	br	1003a18 <___vfprintf_internal_r+0x1088>
 10041b0:	0005883a 	mov	r2,zero
 10041b4:	1409c83a 	sub	r4,r2,r16
 10041b8:	1105803a 	cmpltu	r2,r2,r4
 10041bc:	044bc83a 	sub	r5,zero,r17
 10041c0:	2885c83a 	sub	r2,r5,r2
 10041c4:	2021883a 	mov	r16,r4
 10041c8:	1023883a 	mov	r17,r2
 10041cc:	01000044 	movi	r4,1
 10041d0:	00800b44 	movi	r2,45
 10041d4:	d8800405 	stb	r2,16(sp)
 10041d8:	003c7e06 	br	10033d4 <___vfprintf_internal_r+0xa44>
 10041dc:	d9014f17 	ldw	r4,1340(sp)
 10041e0:	b00b883a 	mov	r5,r22
 10041e4:	d9800c04 	addi	r6,sp,48
 10041e8:	100292c0 	call	100292c <__sprint_r>
 10041ec:	103ba31e 	bne	r2,zero,100307c <___vfprintf_internal_r+0x6ec>
 10041f0:	dc800e17 	ldw	r18,56(sp)
 10041f4:	dc400d17 	ldw	r17,52(sp)
 10041f8:	d9000517 	ldw	r4,20(sp)
 10041fc:	d9401904 	addi	r5,sp,100
 1004200:	003da106 	br	1003888 <___vfprintf_internal_r+0xef8>
 1004204:	d9014f17 	ldw	r4,1340(sp)
 1004208:	b00b883a 	mov	r5,r22
 100420c:	d9800c04 	addi	r6,sp,48
 1004210:	100292c0 	call	100292c <__sprint_r>
 1004214:	103b991e 	bne	r2,zero,100307c <___vfprintf_internal_r+0x6ec>
 1004218:	dc800e17 	ldw	r18,56(sp)
 100421c:	dc400d17 	ldw	r17,52(sp)
 1004220:	d9000517 	ldw	r4,20(sp)
 1004224:	d8c01904 	addi	r3,sp,100
 1004228:	003d8b06 	br	1003858 <___vfprintf_internal_r+0xec8>
 100422c:	070040b4 	movhi	fp,258
 1004230:	e7279484 	addi	fp,fp,-25006
 1004234:	9425883a 	add	r18,r18,r16
 1004238:	8c400044 	addi	r17,r17,1
 100423c:	008001c4 	movi	r2,7
 1004240:	1f000015 	stw	fp,0(r3)
 1004244:	1c000115 	stw	r16,4(r3)
 1004248:	dc800e15 	stw	r18,56(sp)
 100424c:	dc400d15 	stw	r17,52(sp)
 1004250:	147fbc16 	blt	r2,r17,1004144 <___vfprintf_internal_r+0x17b4>
 1004254:	18c00204 	addi	r3,r3,8
 1004258:	003fc206 	br	1004164 <___vfprintf_internal_r+0x17d4>
 100425c:	d9014f17 	ldw	r4,1340(sp)
 1004260:	b00b883a 	mov	r5,r22
 1004264:	d9800c04 	addi	r6,sp,48
 1004268:	100292c0 	call	100292c <__sprint_r>
 100426c:	103b831e 	bne	r2,zero,100307c <___vfprintf_internal_r+0x6ec>
 1004270:	dc800e17 	ldw	r18,56(sp)
 1004274:	d9000517 	ldw	r4,20(sp)
 1004278:	d8c01904 	addi	r3,sp,100
 100427c:	003cfc06 	br	1003670 <___vfprintf_internal_r+0xce0>
 1004280:	070040b4 	movhi	fp,258
 1004284:	e7279484 	addi	fp,fp,-25006
 1004288:	003bde06 	br	1003204 <___vfprintf_internal_r+0x874>
 100428c:	008040b4 	movhi	r2,258
 1004290:	10a78304 	addi	r2,r2,-25076
 1004294:	d8814115 	stw	r2,1284(sp)
 1004298:	003def06 	br	1003a58 <___vfprintf_internal_r+0x10c8>
 100429c:	d9014217 	ldw	r4,1288(sp)
 10042a0:	d9414317 	ldw	r5,1292(sp)
 10042a4:	10099400 	call	1009940 <__isnand>
 10042a8:	10003926 	beq	r2,zero,1004390 <___vfprintf_internal_r+0x1a00>
 10042ac:	d9414d17 	ldw	r5,1332(sp)
 10042b0:	008011c4 	movi	r2,71
 10042b4:	1140ce16 	blt	r2,r5,10045f0 <___vfprintf_internal_r+0x1c60>
 10042b8:	018040b4 	movhi	r6,258
 10042bc:	31a78404 	addi	r6,r6,-25072
 10042c0:	d9814115 	stw	r6,1284(sp)
 10042c4:	003de406 	br	1003a58 <___vfprintf_internal_r+0x10c8>
 10042c8:	d9014c17 	ldw	r4,1328(sp)
 10042cc:	bdc00044 	addi	r23,r23,1
 10042d0:	b8c00007 	ldb	r3,0(r23)
 10042d4:	21000814 	ori	r4,r4,32
 10042d8:	d9014c15 	stw	r4,1328(sp)
 10042dc:	003a2e06 	br	1002b98 <___vfprintf_internal_r+0x208>
 10042e0:	dcc14515 	stw	r19,1300(sp)
 10042e4:	98011016 	blt	r19,zero,1004728 <___vfprintf_internal_r+0x1d98>
 10042e8:	980f883a 	mov	r7,r19
 10042ec:	d8014615 	stw	zero,1304(sp)
 10042f0:	003c4c06 	br	1003424 <___vfprintf_internal_r+0xa94>
 10042f4:	d9014f17 	ldw	r4,1340(sp)
 10042f8:	b00b883a 	mov	r5,r22
 10042fc:	d9800c04 	addi	r6,sp,48
 1004300:	100292c0 	call	100292c <__sprint_r>
 1004304:	103b5d1e 	bne	r2,zero,100307c <___vfprintf_internal_r+0x6ec>
 1004308:	dc800e17 	ldw	r18,56(sp)
 100430c:	d9000517 	ldw	r4,20(sp)
 1004310:	d8c01904 	addi	r3,sp,100
 1004314:	003f2e06 	br	1003fd0 <___vfprintf_internal_r+0x1640>
 1004318:	d8c14c17 	ldw	r3,1328(sp)
 100431c:	1880100c 	andi	r2,r3,64
 1004320:	1000a026 	beq	r2,zero,10045a4 <___vfprintf_internal_r+0x1c14>
 1004324:	38800017 	ldw	r2,0(r7)
 1004328:	39c00104 	addi	r7,r7,4
 100432c:	d9c14015 	stw	r7,1280(sp)
 1004330:	d9014b17 	ldw	r4,1324(sp)
 1004334:	d9c14017 	ldw	r7,1280(sp)
 1004338:	1100000d 	sth	r4,0(r2)
 100433c:	0039f306 	br	1002b0c <___vfprintf_internal_r+0x17c>
 1004340:	d9014f17 	ldw	r4,1340(sp)
 1004344:	b00b883a 	mov	r5,r22
 1004348:	d9800c04 	addi	r6,sp,48
 100434c:	100292c0 	call	100292c <__sprint_r>
 1004350:	103b4a1e 	bne	r2,zero,100307c <___vfprintf_internal_r+0x6ec>
 1004354:	dc800e17 	ldw	r18,56(sp)
 1004358:	dc400d17 	ldw	r17,52(sp)
 100435c:	d9000517 	ldw	r4,20(sp)
 1004360:	d8c01904 	addi	r3,sp,100
 1004364:	003f2d06 	br	100401c <___vfprintf_internal_r+0x168c>
 1004368:	00800184 	movi	r2,6
 100436c:	14c09a36 	bltu	r2,r19,10045d8 <___vfprintf_internal_r+0x1c48>
 1004370:	dcc14515 	stw	r19,1300(sp)
 1004374:	9800010e 	bge	r19,zero,100437c <___vfprintf_internal_r+0x19ec>
 1004378:	d8014515 	stw	zero,1300(sp)
 100437c:	008040b4 	movhi	r2,258
 1004380:	10a78604 	addi	r2,r2,-25064
 1004384:	980f883a 	mov	r7,r19
 1004388:	d8814115 	stw	r2,1284(sp)
 100438c:	003a7206 	br	1002d58 <___vfprintf_internal_r+0x3c8>
 1004390:	00bfffc4 	movi	r2,-1
 1004394:	9880e226 	beq	r19,r2,1004720 <___vfprintf_internal_r+0x1d90>
 1004398:	d9414d17 	ldw	r5,1332(sp)
 100439c:	008019c4 	movi	r2,103
 10043a0:	2880dc26 	beq	r5,r2,1004714 <___vfprintf_internal_r+0x1d84>
 10043a4:	008011c4 	movi	r2,71
 10043a8:	2880da26 	beq	r5,r2,1004714 <___vfprintf_internal_r+0x1d84>
 10043ac:	d9414c17 	ldw	r5,1328(sp)
 10043b0:	d9014317 	ldw	r4,1292(sp)
 10043b4:	d9814217 	ldw	r6,1288(sp)
 10043b8:	29404014 	ori	r5,r5,256
 10043bc:	d9414c15 	stw	r5,1328(sp)
 10043c0:	2000cc16 	blt	r4,zero,10046f4 <___vfprintf_internal_r+0x1d64>
 10043c4:	3021883a 	mov	r16,r6
 10043c8:	2023883a 	mov	r17,r4
 10043cc:	0039883a 	mov	fp,zero
 10043d0:	d9414d17 	ldw	r5,1332(sp)
 10043d4:	00801984 	movi	r2,102
 10043d8:	2880b726 	beq	r5,r2,10046b8 <___vfprintf_internal_r+0x1d28>
 10043dc:	00801184 	movi	r2,70
 10043e0:	2880b526 	beq	r5,r2,10046b8 <___vfprintf_internal_r+0x1d28>
 10043e4:	00801944 	movi	r2,101
 10043e8:	2880c826 	beq	r5,r2,100470c <___vfprintf_internal_r+0x1d7c>
 10043ec:	00801144 	movi	r2,69
 10043f0:	2880c626 	beq	r5,r2,100470c <___vfprintf_internal_r+0x1d7c>
 10043f4:	9829883a 	mov	r20,r19
 10043f8:	d9014f17 	ldw	r4,1340(sp)
 10043fc:	d8800504 	addi	r2,sp,20
 1004400:	880d883a 	mov	r6,r17
 1004404:	d8800115 	stw	r2,4(sp)
 1004408:	d8c00604 	addi	r3,sp,24
 100440c:	d8800704 	addi	r2,sp,28
 1004410:	800b883a 	mov	r5,r16
 1004414:	01c00084 	movi	r7,2
 1004418:	d8c00215 	stw	r3,8(sp)
 100441c:	d8800315 	stw	r2,12(sp)
 1004420:	dd000015 	stw	r20,0(sp)
 1004424:	1004c280 	call	1004c28 <_dtoa_r>
 1004428:	d9814d17 	ldw	r6,1332(sp)
 100442c:	d8814115 	stw	r2,1284(sp)
 1004430:	008019c4 	movi	r2,103
 1004434:	30809526 	beq	r6,r2,100468c <___vfprintf_internal_r+0x1cfc>
 1004438:	d8c14d17 	ldw	r3,1332(sp)
 100443c:	008011c4 	movi	r2,71
 1004440:	18809226 	beq	r3,r2,100468c <___vfprintf_internal_r+0x1cfc>
 1004444:	d9414117 	ldw	r5,1284(sp)
 1004448:	d9814d17 	ldw	r6,1332(sp)
 100444c:	00801984 	movi	r2,102
 1004450:	2d25883a 	add	r18,r5,r20
 1004454:	30808626 	beq	r6,r2,1004670 <___vfprintf_internal_r+0x1ce0>
 1004458:	00801184 	movi	r2,70
 100445c:	30808426 	beq	r6,r2,1004670 <___vfprintf_internal_r+0x1ce0>
 1004460:	000d883a 	mov	r6,zero
 1004464:	000f883a 	mov	r7,zero
 1004468:	880b883a 	mov	r5,r17
 100446c:	8009883a 	mov	r4,r16
 1004470:	100b2180 	call	100b218 <__eqdf2>
 1004474:	1000751e 	bne	r2,zero,100464c <___vfprintf_internal_r+0x1cbc>
 1004478:	9005883a 	mov	r2,r18
 100447c:	dc800715 	stw	r18,28(sp)
 1004480:	d9014117 	ldw	r4,1284(sp)
 1004484:	d9414d17 	ldw	r5,1332(sp)
 1004488:	00c019c4 	movi	r3,103
 100448c:	1125c83a 	sub	r18,r2,r4
 1004490:	28c06826 	beq	r5,r3,1004634 <___vfprintf_internal_r+0x1ca4>
 1004494:	008011c4 	movi	r2,71
 1004498:	28806626 	beq	r5,r2,1004634 <___vfprintf_internal_r+0x1ca4>
 100449c:	d9000517 	ldw	r4,20(sp)
 10044a0:	d8c14d17 	ldw	r3,1332(sp)
 10044a4:	00801944 	movi	r2,101
 10044a8:	10c05516 	blt	r2,r3,1004600 <___vfprintf_internal_r+0x1c70>
 10044ac:	213fffc4 	addi	r4,r4,-1
 10044b0:	d9000515 	stw	r4,20(sp)
 10044b4:	d8c00805 	stb	r3,32(sp)
 10044b8:	2021883a 	mov	r16,r4
 10044bc:	2000c116 	blt	r4,zero,10047c4 <___vfprintf_internal_r+0x1e34>
 10044c0:	00800ac4 	movi	r2,43
 10044c4:	d8800845 	stb	r2,33(sp)
 10044c8:	00800244 	movi	r2,9
 10044cc:	1400af0e 	bge	r2,r16,100478c <___vfprintf_internal_r+0x1dfc>
 10044d0:	1027883a 	mov	r19,r2
 10044d4:	dc400b84 	addi	r17,sp,46
 10044d8:	8009883a 	mov	r4,r16
 10044dc:	01400284 	movi	r5,10
 10044e0:	100214c0 	call	100214c <__modsi3>
 10044e4:	10800c04 	addi	r2,r2,48
 10044e8:	8c7fffc4 	addi	r17,r17,-1
 10044ec:	8009883a 	mov	r4,r16
 10044f0:	01400284 	movi	r5,10
 10044f4:	88800005 	stb	r2,0(r17)
 10044f8:	10020e00 	call	10020e0 <__divsi3>
 10044fc:	1021883a 	mov	r16,r2
 1004500:	98bff516 	blt	r19,r2,10044d8 <___vfprintf_internal_r+0x1b48>
 1004504:	10c00c04 	addi	r3,r2,48
 1004508:	d88009c4 	addi	r2,sp,39
 100450c:	108001c4 	addi	r2,r2,7
 1004510:	897fffc4 	addi	r5,r17,-1
 1004514:	88ffffc5 	stb	r3,-1(r17)
 1004518:	2880a72e 	bgeu	r5,r2,10047b8 <___vfprintf_internal_r+0x1e28>
 100451c:	1009883a 	mov	r4,r2
 1004520:	d9800804 	addi	r6,sp,32
 1004524:	d8c00884 	addi	r3,sp,34
 1004528:	28800003 	ldbu	r2,0(r5)
 100452c:	29400044 	addi	r5,r5,1
 1004530:	18800005 	stb	r2,0(r3)
 1004534:	18c00044 	addi	r3,r3,1
 1004538:	293ffb36 	bltu	r5,r4,1004528 <___vfprintf_internal_r+0x1b98>
 100453c:	1987c83a 	sub	r3,r3,r6
 1004540:	00800044 	movi	r2,1
 1004544:	d8c14815 	stw	r3,1312(sp)
 1004548:	90cf883a 	add	r7,r18,r3
 100454c:	1480960e 	bge	r2,r18,10047a8 <___vfprintf_internal_r+0x1e18>
 1004550:	39c00044 	addi	r7,r7,1
 1004554:	d9c14515 	stw	r7,1300(sp)
 1004558:	38003416 	blt	r7,zero,100462c <___vfprintf_internal_r+0x1c9c>
 100455c:	e0803fcc 	andi	r2,fp,255
 1004560:	1080201c 	xori	r2,r2,128
 1004564:	10bfe004 	addi	r2,r2,-128
 1004568:	10004e26 	beq	r2,zero,10046a4 <___vfprintf_internal_r+0x1d14>
 100456c:	00800b44 	movi	r2,45
 1004570:	dc814715 	stw	r18,1308(sp)
 1004574:	d8014615 	stw	zero,1304(sp)
 1004578:	d8800405 	stb	r2,16(sp)
 100457c:	003bab06 	br	100342c <___vfprintf_internal_r+0xa9c>
 1004580:	00800b44 	movi	r2,45
 1004584:	d8800405 	stb	r2,16(sp)
 1004588:	003d2d06 	br	1003a40 <___vfprintf_internal_r+0x10b0>
 100458c:	d9014f17 	ldw	r4,1340(sp)
 1004590:	b00b883a 	mov	r5,r22
 1004594:	d9800c04 	addi	r6,sp,48
 1004598:	100292c0 	call	100292c <__sprint_r>
 100459c:	103ab71e 	bne	r2,zero,100307c <___vfprintf_internal_r+0x6ec>
 10045a0:	003ab506 	br	1003078 <___vfprintf_internal_r+0x6e8>
 10045a4:	38800017 	ldw	r2,0(r7)
 10045a8:	39c00104 	addi	r7,r7,4
 10045ac:	d9c14015 	stw	r7,1280(sp)
 10045b0:	d9414b17 	ldw	r5,1324(sp)
 10045b4:	d9c14017 	ldw	r7,1280(sp)
 10045b8:	11400015 	stw	r5,0(r2)
 10045bc:	00395306 	br	1002b0c <___vfprintf_internal_r+0x17c>
 10045c0:	980f883a 	mov	r7,r19
 10045c4:	dcc14515 	stw	r19,1300(sp)
 10045c8:	d8014615 	stw	zero,1304(sp)
 10045cc:	003b9506 	br	1003424 <___vfprintf_internal_r+0xa94>
 10045d0:	0027883a 	mov	r19,zero
 10045d4:	00397206 	br	1002ba0 <___vfprintf_internal_r+0x210>
 10045d8:	00c040b4 	movhi	r3,258
 10045dc:	18e78604 	addi	r3,r3,-25064
 10045e0:	100f883a 	mov	r7,r2
 10045e4:	d8814515 	stw	r2,1300(sp)
 10045e8:	d8c14115 	stw	r3,1284(sp)
 10045ec:	0039da06 	br	1002d58 <___vfprintf_internal_r+0x3c8>
 10045f0:	008040b4 	movhi	r2,258
 10045f4:	10a78504 	addi	r2,r2,-25068
 10045f8:	d8814115 	stw	r2,1284(sp)
 10045fc:	003d1606 	br	1003a58 <___vfprintf_internal_r+0x10c8>
 1004600:	d9414d17 	ldw	r5,1332(sp)
 1004604:	00801984 	movi	r2,102
 1004608:	28804926 	beq	r5,r2,1004730 <___vfprintf_internal_r+0x1da0>
 100460c:	200f883a 	mov	r7,r4
 1004610:	24805716 	blt	r4,r18,1004770 <___vfprintf_internal_r+0x1de0>
 1004614:	d9414c17 	ldw	r5,1328(sp)
 1004618:	2880004c 	andi	r2,r5,1
 100461c:	10000126 	beq	r2,zero,1004624 <___vfprintf_internal_r+0x1c94>
 1004620:	21c00044 	addi	r7,r4,1
 1004624:	d9c14515 	stw	r7,1300(sp)
 1004628:	383fcc0e 	bge	r7,zero,100455c <___vfprintf_internal_r+0x1bcc>
 100462c:	d8014515 	stw	zero,1300(sp)
 1004630:	003fca06 	br	100455c <___vfprintf_internal_r+0x1bcc>
 1004634:	d9000517 	ldw	r4,20(sp)
 1004638:	00bfff04 	movi	r2,-4
 100463c:	1100480e 	bge	r2,r4,1004760 <___vfprintf_internal_r+0x1dd0>
 1004640:	99004716 	blt	r19,r4,1004760 <___vfprintf_internal_r+0x1dd0>
 1004644:	d8c14d15 	stw	r3,1332(sp)
 1004648:	003ff006 	br	100460c <___vfprintf_internal_r+0x1c7c>
 100464c:	d8800717 	ldw	r2,28(sp)
 1004650:	14bf8b2e 	bgeu	r2,r18,1004480 <___vfprintf_internal_r+0x1af0>
 1004654:	9007883a 	mov	r3,r18
 1004658:	01000c04 	movi	r4,48
 100465c:	11000005 	stb	r4,0(r2)
 1004660:	10800044 	addi	r2,r2,1
 1004664:	d8800715 	stw	r2,28(sp)
 1004668:	18bffc1e 	bne	r3,r2,100465c <___vfprintf_internal_r+0x1ccc>
 100466c:	003f8406 	br	1004480 <___vfprintf_internal_r+0x1af0>
 1004670:	d8814117 	ldw	r2,1284(sp)
 1004674:	10c00007 	ldb	r3,0(r2)
 1004678:	00800c04 	movi	r2,48
 100467c:	18805b26 	beq	r3,r2,10047ec <___vfprintf_internal_r+0x1e5c>
 1004680:	d9000517 	ldw	r4,20(sp)
 1004684:	9125883a 	add	r18,r18,r4
 1004688:	003f7506 	br	1004460 <___vfprintf_internal_r+0x1ad0>
 100468c:	d9014c17 	ldw	r4,1328(sp)
 1004690:	2080004c 	andi	r2,r4,1
 1004694:	1005003a 	cmpeq	r2,r2,zero
 1004698:	103f6a26 	beq	r2,zero,1004444 <___vfprintf_internal_r+0x1ab4>
 100469c:	d8800717 	ldw	r2,28(sp)
 10046a0:	003f7706 	br	1004480 <___vfprintf_internal_r+0x1af0>
 10046a4:	d9c14515 	stw	r7,1300(sp)
 10046a8:	38004d16 	blt	r7,zero,10047e0 <___vfprintf_internal_r+0x1e50>
 10046ac:	dc814715 	stw	r18,1308(sp)
 10046b0:	d8014615 	stw	zero,1304(sp)
 10046b4:	003b5b06 	br	1003424 <___vfprintf_internal_r+0xa94>
 10046b8:	d9014f17 	ldw	r4,1340(sp)
 10046bc:	d8800504 	addi	r2,sp,20
 10046c0:	d8800115 	stw	r2,4(sp)
 10046c4:	d8c00604 	addi	r3,sp,24
 10046c8:	d8800704 	addi	r2,sp,28
 10046cc:	800b883a 	mov	r5,r16
 10046d0:	880d883a 	mov	r6,r17
 10046d4:	01c000c4 	movi	r7,3
 10046d8:	d8c00215 	stw	r3,8(sp)
 10046dc:	d8800315 	stw	r2,12(sp)
 10046e0:	dcc00015 	stw	r19,0(sp)
 10046e4:	9829883a 	mov	r20,r19
 10046e8:	1004c280 	call	1004c28 <_dtoa_r>
 10046ec:	d8814115 	stw	r2,1284(sp)
 10046f0:	003f5106 	br	1004438 <___vfprintf_internal_r+0x1aa8>
 10046f4:	d8c14217 	ldw	r3,1288(sp)
 10046f8:	d9014317 	ldw	r4,1292(sp)
 10046fc:	07000b44 	movi	fp,45
 1004700:	1821883a 	mov	r16,r3
 1004704:	2460003c 	xorhi	r17,r4,32768
 1004708:	003f3106 	br	10043d0 <___vfprintf_internal_r+0x1a40>
 100470c:	9d000044 	addi	r20,r19,1
 1004710:	003f3906 	br	10043f8 <___vfprintf_internal_r+0x1a68>
 1004714:	983f251e 	bne	r19,zero,10043ac <___vfprintf_internal_r+0x1a1c>
 1004718:	04c00044 	movi	r19,1
 100471c:	003f2306 	br	10043ac <___vfprintf_internal_r+0x1a1c>
 1004720:	04c00184 	movi	r19,6
 1004724:	003f2106 	br	10043ac <___vfprintf_internal_r+0x1a1c>
 1004728:	d8014515 	stw	zero,1300(sp)
 100472c:	003eee06 	br	10042e8 <___vfprintf_internal_r+0x1958>
 1004730:	200f883a 	mov	r7,r4
 1004734:	0100370e 	bge	zero,r4,1004814 <___vfprintf_internal_r+0x1e84>
 1004738:	9800031e 	bne	r19,zero,1004748 <___vfprintf_internal_r+0x1db8>
 100473c:	d9814c17 	ldw	r6,1328(sp)
 1004740:	3080004c 	andi	r2,r6,1
 1004744:	103fb726 	beq	r2,zero,1004624 <___vfprintf_internal_r+0x1c94>
 1004748:	20800044 	addi	r2,r4,1
 100474c:	98a7883a 	add	r19,r19,r2
 1004750:	dcc14515 	stw	r19,1300(sp)
 1004754:	980f883a 	mov	r7,r19
 1004758:	983f800e 	bge	r19,zero,100455c <___vfprintf_internal_r+0x1bcc>
 100475c:	003fb306 	br	100462c <___vfprintf_internal_r+0x1c9c>
 1004760:	d9814d17 	ldw	r6,1332(sp)
 1004764:	31bfff84 	addi	r6,r6,-2
 1004768:	d9814d15 	stw	r6,1332(sp)
 100476c:	003f4c06 	br	10044a0 <___vfprintf_internal_r+0x1b10>
 1004770:	0100180e 	bge	zero,r4,10047d4 <___vfprintf_internal_r+0x1e44>
 1004774:	00800044 	movi	r2,1
 1004778:	1485883a 	add	r2,r2,r18
 100477c:	d8814515 	stw	r2,1300(sp)
 1004780:	100f883a 	mov	r7,r2
 1004784:	103f750e 	bge	r2,zero,100455c <___vfprintf_internal_r+0x1bcc>
 1004788:	003fa806 	br	100462c <___vfprintf_internal_r+0x1c9c>
 100478c:	80c00c04 	addi	r3,r16,48
 1004790:	00800c04 	movi	r2,48
 1004794:	d8c008c5 	stb	r3,35(sp)
 1004798:	d9800804 	addi	r6,sp,32
 100479c:	d8c00904 	addi	r3,sp,36
 10047a0:	d8800885 	stb	r2,34(sp)
 10047a4:	003f6506 	br	100453c <___vfprintf_internal_r+0x1bac>
 10047a8:	d9014c17 	ldw	r4,1328(sp)
 10047ac:	2084703a 	and	r2,r4,r2
 10047b0:	103f9c26 	beq	r2,zero,1004624 <___vfprintf_internal_r+0x1c94>
 10047b4:	003f6606 	br	1004550 <___vfprintf_internal_r+0x1bc0>
 10047b8:	d9800804 	addi	r6,sp,32
 10047bc:	d8c00884 	addi	r3,sp,34
 10047c0:	003f5e06 	br	100453c <___vfprintf_internal_r+0x1bac>
 10047c4:	00800b44 	movi	r2,45
 10047c8:	0121c83a 	sub	r16,zero,r4
 10047cc:	d8800845 	stb	r2,33(sp)
 10047d0:	003f3d06 	br	10044c8 <___vfprintf_internal_r+0x1b38>
 10047d4:	00800084 	movi	r2,2
 10047d8:	1105c83a 	sub	r2,r2,r4
 10047dc:	003fe606 	br	1004778 <___vfprintf_internal_r+0x1de8>
 10047e0:	d8014515 	stw	zero,1300(sp)
 10047e4:	dc814715 	stw	r18,1308(sp)
 10047e8:	003fb106 	br	10046b0 <___vfprintf_internal_r+0x1d20>
 10047ec:	000d883a 	mov	r6,zero
 10047f0:	000f883a 	mov	r7,zero
 10047f4:	8009883a 	mov	r4,r16
 10047f8:	880b883a 	mov	r5,r17
 10047fc:	100b2ac0 	call	100b2ac <__nedf2>
 1004800:	103f9f26 	beq	r2,zero,1004680 <___vfprintf_internal_r+0x1cf0>
 1004804:	00800044 	movi	r2,1
 1004808:	1509c83a 	sub	r4,r2,r20
 100480c:	d9000515 	stw	r4,20(sp)
 1004810:	003f9b06 	br	1004680 <___vfprintf_internal_r+0x1cf0>
 1004814:	98000d1e 	bne	r19,zero,100484c <___vfprintf_internal_r+0x1ebc>
 1004818:	d8c14c17 	ldw	r3,1328(sp)
 100481c:	1880004c 	andi	r2,r3,1
 1004820:	10000a1e 	bne	r2,zero,100484c <___vfprintf_internal_r+0x1ebc>
 1004824:	01000044 	movi	r4,1
 1004828:	200f883a 	mov	r7,r4
 100482c:	d9014515 	stw	r4,1300(sp)
 1004830:	003f4a06 	br	100455c <___vfprintf_internal_r+0x1bcc>
 1004834:	3cc00017 	ldw	r19,0(r7)
 1004838:	39c00104 	addi	r7,r7,4
 100483c:	983d0e0e 	bge	r19,zero,1003c78 <___vfprintf_internal_r+0x12e8>
 1004840:	b8c00007 	ldb	r3,0(r23)
 1004844:	04ffffc4 	movi	r19,-1
 1004848:	0038d306 	br	1002b98 <___vfprintf_internal_r+0x208>
 100484c:	9cc00084 	addi	r19,r19,2
 1004850:	dcc14515 	stw	r19,1300(sp)
 1004854:	980f883a 	mov	r7,r19
 1004858:	983f400e 	bge	r19,zero,100455c <___vfprintf_internal_r+0x1bcc>
 100485c:	003f7306 	br	100462c <___vfprintf_internal_r+0x1c9c>

01004860 <__vfprintf_internal>:
 1004860:	f811883a 	mov	r8,ra
 1004864:	100c1d00 	call	100c1d0 <_mcount>
 1004868:	403f883a 	mov	ra,r8
 100486c:	008040b4 	movhi	r2,258
 1004870:	109f9804 	addi	r2,r2,32352
 1004874:	2013883a 	mov	r9,r4
 1004878:	11000017 	ldw	r4,0(r2)
 100487c:	2805883a 	mov	r2,r5
 1004880:	300f883a 	mov	r7,r6
 1004884:	480b883a 	mov	r5,r9
 1004888:	100d883a 	mov	r6,r2
 100488c:	10029901 	jmpi	1002990 <___vfprintf_internal_r>

01004890 <__swsetup_r>:
 1004890:	f811883a 	mov	r8,ra
 1004894:	100c1d00 	call	100c1d0 <_mcount>
 1004898:	403f883a 	mov	ra,r8
 100489c:	defffd04 	addi	sp,sp,-12
 10048a0:	dfc00215 	stw	ra,8(sp)
 10048a4:	dc400115 	stw	r17,4(sp)
 10048a8:	dc000015 	stw	r16,0(sp)
 10048ac:	008040b4 	movhi	r2,258
 10048b0:	109f9804 	addi	r2,r2,32352
 10048b4:	10c00017 	ldw	r3,0(r2)
 10048b8:	2023883a 	mov	r17,r4
 10048bc:	2821883a 	mov	r16,r5
 10048c0:	18000226 	beq	r3,zero,10048cc <__swsetup_r+0x3c>
 10048c4:	18800e17 	ldw	r2,56(r3)
 10048c8:	10001f26 	beq	r2,zero,1004948 <__swsetup_r+0xb8>
 10048cc:	8100030b 	ldhu	r4,12(r16)
 10048d0:	2080020c 	andi	r2,r4,8
 10048d4:	10002826 	beq	r2,zero,1004978 <__swsetup_r+0xe8>
 10048d8:	81400417 	ldw	r5,16(r16)
 10048dc:	28001d26 	beq	r5,zero,1004954 <__swsetup_r+0xc4>
 10048e0:	2080004c 	andi	r2,r4,1
 10048e4:	1005003a 	cmpeq	r2,r2,zero
 10048e8:	10000b26 	beq	r2,zero,1004918 <__swsetup_r+0x88>
 10048ec:	2080008c 	andi	r2,r4,2
 10048f0:	10001226 	beq	r2,zero,100493c <__swsetup_r+0xac>
 10048f4:	0005883a 	mov	r2,zero
 10048f8:	80800215 	stw	r2,8(r16)
 10048fc:	28000b26 	beq	r5,zero,100492c <__swsetup_r+0x9c>
 1004900:	0005883a 	mov	r2,zero
 1004904:	dfc00217 	ldw	ra,8(sp)
 1004908:	dc400117 	ldw	r17,4(sp)
 100490c:	dc000017 	ldw	r16,0(sp)
 1004910:	dec00304 	addi	sp,sp,12
 1004914:	f800283a 	ret
 1004918:	80800517 	ldw	r2,20(r16)
 100491c:	80000215 	stw	zero,8(r16)
 1004920:	0085c83a 	sub	r2,zero,r2
 1004924:	80800615 	stw	r2,24(r16)
 1004928:	283ff51e 	bne	r5,zero,1004900 <__swsetup_r+0x70>
 100492c:	2080200c 	andi	r2,r4,128
 1004930:	103ff326 	beq	r2,zero,1004900 <__swsetup_r+0x70>
 1004934:	00bfffc4 	movi	r2,-1
 1004938:	003ff206 	br	1004904 <__swsetup_r+0x74>
 100493c:	80800517 	ldw	r2,20(r16)
 1004940:	80800215 	stw	r2,8(r16)
 1004944:	003fed06 	br	10048fc <__swsetup_r+0x6c>
 1004948:	1809883a 	mov	r4,r3
 100494c:	10064d40 	call	10064d4 <__sinit>
 1004950:	003fde06 	br	10048cc <__swsetup_r+0x3c>
 1004954:	20c0a00c 	andi	r3,r4,640
 1004958:	00808004 	movi	r2,512
 100495c:	18bfe026 	beq	r3,r2,10048e0 <__swsetup_r+0x50>
 1004960:	8809883a 	mov	r4,r17
 1004964:	800b883a 	mov	r5,r16
 1004968:	10073640 	call	1007364 <__smakebuf_r>
 100496c:	8100030b 	ldhu	r4,12(r16)
 1004970:	81400417 	ldw	r5,16(r16)
 1004974:	003fda06 	br	10048e0 <__swsetup_r+0x50>
 1004978:	2080040c 	andi	r2,r4,16
 100497c:	103fed26 	beq	r2,zero,1004934 <__swsetup_r+0xa4>
 1004980:	2080010c 	andi	r2,r4,4
 1004984:	10001226 	beq	r2,zero,10049d0 <__swsetup_r+0x140>
 1004988:	81400c17 	ldw	r5,48(r16)
 100498c:	28000526 	beq	r5,zero,10049a4 <__swsetup_r+0x114>
 1004990:	80801004 	addi	r2,r16,64
 1004994:	28800226 	beq	r5,r2,10049a0 <__swsetup_r+0x110>
 1004998:	8809883a 	mov	r4,r17
 100499c:	10069040 	call	1006904 <_free_r>
 10049a0:	80000c15 	stw	zero,48(r16)
 10049a4:	8080030b 	ldhu	r2,12(r16)
 10049a8:	81400417 	ldw	r5,16(r16)
 10049ac:	80000115 	stw	zero,4(r16)
 10049b0:	10bff6cc 	andi	r2,r2,65499
 10049b4:	8080030d 	sth	r2,12(r16)
 10049b8:	81400015 	stw	r5,0(r16)
 10049bc:	8080030b 	ldhu	r2,12(r16)
 10049c0:	10800214 	ori	r2,r2,8
 10049c4:	113fffcc 	andi	r4,r2,65535
 10049c8:	8080030d 	sth	r2,12(r16)
 10049cc:	003fc306 	br	10048dc <__swsetup_r+0x4c>
 10049d0:	81400417 	ldw	r5,16(r16)
 10049d4:	003ff906 	br	10049bc <__swsetup_r+0x12c>

010049d8 <quorem>:
 10049d8:	f811883a 	mov	r8,ra
 10049dc:	100c1d00 	call	100c1d0 <_mcount>
 10049e0:	403f883a 	mov	ra,r8
 10049e4:	defff104 	addi	sp,sp,-60
 10049e8:	dfc00e15 	stw	ra,56(sp)
 10049ec:	df000d15 	stw	fp,52(sp)
 10049f0:	ddc00c15 	stw	r23,48(sp)
 10049f4:	dd800b15 	stw	r22,44(sp)
 10049f8:	dd400a15 	stw	r21,40(sp)
 10049fc:	dd000915 	stw	r20,36(sp)
 1004a00:	dcc00815 	stw	r19,32(sp)
 1004a04:	dc800715 	stw	r18,28(sp)
 1004a08:	dc400615 	stw	r17,24(sp)
 1004a0c:	dc000515 	stw	r16,20(sp)
 1004a10:	28c00417 	ldw	r3,16(r5)
 1004a14:	20800417 	ldw	r2,16(r4)
 1004a18:	d9000315 	stw	r4,12(sp)
 1004a1c:	d9400415 	stw	r5,16(sp)
 1004a20:	10c07f16 	blt	r2,r3,1004c20 <quorem+0x248>
 1004a24:	1d3fffc4 	addi	r20,r3,-1
 1004a28:	d8c00417 	ldw	r3,16(sp)
 1004a2c:	d9000317 	ldw	r4,12(sp)
 1004a30:	a505883a 	add	r2,r20,r20
 1004a34:	1085883a 	add	r2,r2,r2
 1004a38:	1cc00504 	addi	r19,r3,20
 1004a3c:	25c00504 	addi	r23,r4,20
 1004a40:	98ad883a 	add	r22,r19,r2
 1004a44:	15c7883a 	add	r3,r2,r23
 1004a48:	b1400017 	ldw	r5,0(r22)
 1004a4c:	19000017 	ldw	r4,0(r3)
 1004a50:	d8c00015 	stw	r3,0(sp)
 1004a54:	29400044 	addi	r5,r5,1
 1004a58:	d9000215 	stw	r4,8(sp)
 1004a5c:	10021b80 	call	10021b8 <__udivsi3>
 1004a60:	1039883a 	mov	fp,r2
 1004a64:	10003d1e 	bne	r2,zero,1004b5c <quorem+0x184>
 1004a68:	d9400417 	ldw	r5,16(sp)
 1004a6c:	d9000317 	ldw	r4,12(sp)
 1004a70:	10080fc0 	call	10080fc <__mcmp>
 1004a74:	10002c16 	blt	r2,zero,1004b28 <quorem+0x150>
 1004a78:	e7000044 	addi	fp,fp,1
 1004a7c:	b80f883a 	mov	r7,r23
 1004a80:	0011883a 	mov	r8,zero
 1004a84:	0009883a 	mov	r4,zero
 1004a88:	99400017 	ldw	r5,0(r19)
 1004a8c:	38c00017 	ldw	r3,0(r7)
 1004a90:	9cc00104 	addi	r19,r19,4
 1004a94:	28bfffcc 	andi	r2,r5,65535
 1004a98:	2085883a 	add	r2,r4,r2
 1004a9c:	11bfffcc 	andi	r6,r2,65535
 1004aa0:	193fffcc 	andi	r4,r3,65535
 1004aa4:	1004d43a 	srli	r2,r2,16
 1004aa8:	280ad43a 	srli	r5,r5,16
 1004aac:	2189c83a 	sub	r4,r4,r6
 1004ab0:	2209883a 	add	r4,r4,r8
 1004ab4:	1806d43a 	srli	r3,r3,16
 1004ab8:	288b883a 	add	r5,r5,r2
 1004abc:	200dd43a 	srai	r6,r4,16
 1004ac0:	28bfffcc 	andi	r2,r5,65535
 1004ac4:	1887c83a 	sub	r3,r3,r2
 1004ac8:	1987883a 	add	r3,r3,r6
 1004acc:	3900000d 	sth	r4,0(r7)
 1004ad0:	38c0008d 	sth	r3,2(r7)
 1004ad4:	2808d43a 	srli	r4,r5,16
 1004ad8:	39c00104 	addi	r7,r7,4
 1004adc:	1811d43a 	srai	r8,r3,16
 1004ae0:	b4ffe92e 	bgeu	r22,r19,1004a88 <quorem+0xb0>
 1004ae4:	a505883a 	add	r2,r20,r20
 1004ae8:	1085883a 	add	r2,r2,r2
 1004aec:	b885883a 	add	r2,r23,r2
 1004af0:	10c00017 	ldw	r3,0(r2)
 1004af4:	18000c1e 	bne	r3,zero,1004b28 <quorem+0x150>
 1004af8:	113fff04 	addi	r4,r2,-4
 1004afc:	b900082e 	bgeu	r23,r4,1004b20 <quorem+0x148>
 1004b00:	10bfff17 	ldw	r2,-4(r2)
 1004b04:	10000326 	beq	r2,zero,1004b14 <quorem+0x13c>
 1004b08:	00000506 	br	1004b20 <quorem+0x148>
 1004b0c:	20800017 	ldw	r2,0(r4)
 1004b10:	1000031e 	bne	r2,zero,1004b20 <quorem+0x148>
 1004b14:	213fff04 	addi	r4,r4,-4
 1004b18:	a53fffc4 	addi	r20,r20,-1
 1004b1c:	b93ffb36 	bltu	r23,r4,1004b0c <quorem+0x134>
 1004b20:	d9000317 	ldw	r4,12(sp)
 1004b24:	25000415 	stw	r20,16(r4)
 1004b28:	e005883a 	mov	r2,fp
 1004b2c:	dfc00e17 	ldw	ra,56(sp)
 1004b30:	df000d17 	ldw	fp,52(sp)
 1004b34:	ddc00c17 	ldw	r23,48(sp)
 1004b38:	dd800b17 	ldw	r22,44(sp)
 1004b3c:	dd400a17 	ldw	r21,40(sp)
 1004b40:	dd000917 	ldw	r20,36(sp)
 1004b44:	dcc00817 	ldw	r19,32(sp)
 1004b48:	dc800717 	ldw	r18,28(sp)
 1004b4c:	dc400617 	ldw	r17,24(sp)
 1004b50:	dc000517 	ldw	r16,20(sp)
 1004b54:	dec00f04 	addi	sp,sp,60
 1004b58:	f800283a 	ret
 1004b5c:	b823883a 	mov	r17,r23
 1004b60:	9825883a 	mov	r18,r19
 1004b64:	d8000115 	stw	zero,4(sp)
 1004b68:	002b883a 	mov	r21,zero
 1004b6c:	94000017 	ldw	r16,0(r18)
 1004b70:	e009883a 	mov	r4,fp
 1004b74:	94800104 	addi	r18,r18,4
 1004b78:	817fffcc 	andi	r5,r16,65535
 1004b7c:	10021e00 	call	10021e0 <__mulsi3>
 1004b80:	800ad43a 	srli	r5,r16,16
 1004b84:	e009883a 	mov	r4,fp
 1004b88:	a8a1883a 	add	r16,r21,r2
 1004b8c:	10021e00 	call	10021e0 <__mulsi3>
 1004b90:	89000017 	ldw	r4,0(r17)
 1004b94:	80ffffcc 	andi	r3,r16,65535
 1004b98:	8020d43a 	srli	r16,r16,16
 1004b9c:	217fffcc 	andi	r5,r4,65535
 1004ba0:	28cbc83a 	sub	r5,r5,r3
 1004ba4:	d8c00117 	ldw	r3,4(sp)
 1004ba8:	2008d43a 	srli	r4,r4,16
 1004bac:	1405883a 	add	r2,r2,r16
 1004bb0:	28cb883a 	add	r5,r5,r3
 1004bb4:	280dd43a 	srai	r6,r5,16
 1004bb8:	10ffffcc 	andi	r3,r2,65535
 1004bbc:	20c9c83a 	sub	r4,r4,r3
 1004bc0:	2189883a 	add	r4,r4,r6
 1004bc4:	8900008d 	sth	r4,2(r17)
 1004bc8:	2009d43a 	srai	r4,r4,16
 1004bcc:	8940000d 	sth	r5,0(r17)
 1004bd0:	102ad43a 	srli	r21,r2,16
 1004bd4:	8c400104 	addi	r17,r17,4
 1004bd8:	d9000115 	stw	r4,4(sp)
 1004bdc:	b4bfe32e 	bgeu	r22,r18,1004b6c <quorem+0x194>
 1004be0:	d9000217 	ldw	r4,8(sp)
 1004be4:	203fa01e 	bne	r4,zero,1004a68 <quorem+0x90>
 1004be8:	d8800017 	ldw	r2,0(sp)
 1004bec:	10ffff04 	addi	r3,r2,-4
 1004bf0:	b8c0082e 	bgeu	r23,r3,1004c14 <quorem+0x23c>
 1004bf4:	10bfff17 	ldw	r2,-4(r2)
 1004bf8:	10000326 	beq	r2,zero,1004c08 <quorem+0x230>
 1004bfc:	00000506 	br	1004c14 <quorem+0x23c>
 1004c00:	18800017 	ldw	r2,0(r3)
 1004c04:	1000031e 	bne	r2,zero,1004c14 <quorem+0x23c>
 1004c08:	18ffff04 	addi	r3,r3,-4
 1004c0c:	a53fffc4 	addi	r20,r20,-1
 1004c10:	b8fffb36 	bltu	r23,r3,1004c00 <quorem+0x228>
 1004c14:	d8c00317 	ldw	r3,12(sp)
 1004c18:	1d000415 	stw	r20,16(r3)
 1004c1c:	003f9206 	br	1004a68 <quorem+0x90>
 1004c20:	0005883a 	mov	r2,zero
 1004c24:	003fc106 	br	1004b2c <quorem+0x154>

01004c28 <_dtoa_r>:
 1004c28:	f811883a 	mov	r8,ra
 1004c2c:	100c1d00 	call	100c1d0 <_mcount>
 1004c30:	403f883a 	mov	ra,r8
 1004c34:	deffda04 	addi	sp,sp,-152
 1004c38:	dfc02515 	stw	ra,148(sp)
 1004c3c:	df002415 	stw	fp,144(sp)
 1004c40:	ddc02315 	stw	r23,140(sp)
 1004c44:	dd802215 	stw	r22,136(sp)
 1004c48:	dd402115 	stw	r21,132(sp)
 1004c4c:	dd002015 	stw	r20,128(sp)
 1004c50:	dcc01f15 	stw	r19,124(sp)
 1004c54:	dc801e15 	stw	r18,120(sp)
 1004c58:	dc401d15 	stw	r17,116(sp)
 1004c5c:	dc001c15 	stw	r16,112(sp)
 1004c60:	22001017 	ldw	r8,64(r4)
 1004c64:	d9001615 	stw	r4,88(sp)
 1004c68:	3023883a 	mov	r17,r6
 1004c6c:	2829883a 	mov	r20,r5
 1004c70:	d9c01715 	stw	r7,92(sp)
 1004c74:	dc802817 	ldw	r18,160(sp)
 1004c78:	302b883a 	mov	r21,r6
 1004c7c:	40000a26 	beq	r8,zero,1004ca8 <_dtoa_r+0x80>
 1004c80:	20801117 	ldw	r2,68(r4)
 1004c84:	400b883a 	mov	r5,r8
 1004c88:	40800115 	stw	r2,4(r8)
 1004c8c:	20c01117 	ldw	r3,68(r4)
 1004c90:	00800044 	movi	r2,1
 1004c94:	10c4983a 	sll	r2,r2,r3
 1004c98:	40800215 	stw	r2,8(r8)
 1004c9c:	1007f7c0 	call	1007f7c <_Bfree>
 1004ca0:	d8c01617 	ldw	r3,88(sp)
 1004ca4:	18001015 	stw	zero,64(r3)
 1004ca8:	8800a316 	blt	r17,zero,1004f38 <_dtoa_r+0x310>
 1004cac:	90000015 	stw	zero,0(r18)
 1004cb0:	a8dffc2c 	andhi	r3,r21,32752
 1004cb4:	009ffc34 	movhi	r2,32752
 1004cb8:	18809126 	beq	r3,r2,1004f00 <_dtoa_r+0x2d8>
 1004cbc:	000d883a 	mov	r6,zero
 1004cc0:	000f883a 	mov	r7,zero
 1004cc4:	a009883a 	mov	r4,r20
 1004cc8:	a80b883a 	mov	r5,r21
 1004ccc:	dd001215 	stw	r20,72(sp)
 1004cd0:	dd401315 	stw	r21,76(sp)
 1004cd4:	100b2ac0 	call	100b2ac <__nedf2>
 1004cd8:	1000171e 	bne	r2,zero,1004d38 <_dtoa_r+0x110>
 1004cdc:	d9802717 	ldw	r6,156(sp)
 1004ce0:	00800044 	movi	r2,1
 1004ce4:	30800015 	stw	r2,0(r6)
 1004ce8:	d8802917 	ldw	r2,164(sp)
 1004cec:	10029b26 	beq	r2,zero,100575c <_dtoa_r+0xb34>
 1004cf0:	d9002917 	ldw	r4,164(sp)
 1004cf4:	008040b4 	movhi	r2,258
 1004cf8:	10a79444 	addi	r2,r2,-25007
 1004cfc:	10ffffc4 	addi	r3,r2,-1
 1004d00:	20800015 	stw	r2,0(r4)
 1004d04:	1805883a 	mov	r2,r3
 1004d08:	dfc02517 	ldw	ra,148(sp)
 1004d0c:	df002417 	ldw	fp,144(sp)
 1004d10:	ddc02317 	ldw	r23,140(sp)
 1004d14:	dd802217 	ldw	r22,136(sp)
 1004d18:	dd402117 	ldw	r21,132(sp)
 1004d1c:	dd002017 	ldw	r20,128(sp)
 1004d20:	dcc01f17 	ldw	r19,124(sp)
 1004d24:	dc801e17 	ldw	r18,120(sp)
 1004d28:	dc401d17 	ldw	r17,116(sp)
 1004d2c:	dc001c17 	ldw	r16,112(sp)
 1004d30:	dec02604 	addi	sp,sp,152
 1004d34:	f800283a 	ret
 1004d38:	d9001617 	ldw	r4,88(sp)
 1004d3c:	d9401217 	ldw	r5,72(sp)
 1004d40:	d8800104 	addi	r2,sp,4
 1004d44:	a80d883a 	mov	r6,r21
 1004d48:	d9c00204 	addi	r7,sp,8
 1004d4c:	d8800015 	stw	r2,0(sp)
 1004d50:	10086400 	call	1008640 <__d2b>
 1004d54:	d8800715 	stw	r2,28(sp)
 1004d58:	a804d53a 	srli	r2,r21,20
 1004d5c:	1101ffcc 	andi	r4,r2,2047
 1004d60:	20008626 	beq	r4,zero,1004f7c <_dtoa_r+0x354>
 1004d64:	d8c01217 	ldw	r3,72(sp)
 1004d68:	00800434 	movhi	r2,16
 1004d6c:	10bfffc4 	addi	r2,r2,-1
 1004d70:	ddc00117 	ldw	r23,4(sp)
 1004d74:	a884703a 	and	r2,r21,r2
 1004d78:	1811883a 	mov	r8,r3
 1004d7c:	124ffc34 	orhi	r9,r2,16368
 1004d80:	25bf0044 	addi	r22,r4,-1023
 1004d84:	d8000815 	stw	zero,32(sp)
 1004d88:	0005883a 	mov	r2,zero
 1004d8c:	00cffe34 	movhi	r3,16376
 1004d90:	480b883a 	mov	r5,r9
 1004d94:	4009883a 	mov	r4,r8
 1004d98:	180f883a 	mov	r7,r3
 1004d9c:	100d883a 	mov	r6,r2
 1004da0:	100ad3c0 	call	100ad3c <__subdf3>
 1004da4:	0218dbf4 	movhi	r8,25455
 1004da8:	4210d844 	addi	r8,r8,17249
 1004dac:	024ff4f4 	movhi	r9,16339
 1004db0:	4a61e9c4 	addi	r9,r9,-30809
 1004db4:	480f883a 	mov	r7,r9
 1004db8:	400d883a 	mov	r6,r8
 1004dbc:	180b883a 	mov	r5,r3
 1004dc0:	1009883a 	mov	r4,r2
 1004dc4:	100ae480 	call	100ae48 <__muldf3>
 1004dc8:	0222d874 	movhi	r8,35681
 1004dcc:	42322cc4 	addi	r8,r8,-14157
 1004dd0:	024ff1f4 	movhi	r9,16327
 1004dd4:	4a628a04 	addi	r9,r9,-30168
 1004dd8:	480f883a 	mov	r7,r9
 1004ddc:	400d883a 	mov	r6,r8
 1004de0:	180b883a 	mov	r5,r3
 1004de4:	1009883a 	mov	r4,r2
 1004de8:	100adc80 	call	100adc8 <__adddf3>
 1004dec:	b009883a 	mov	r4,r22
 1004df0:	1021883a 	mov	r16,r2
 1004df4:	1823883a 	mov	r17,r3
 1004df8:	100b4fc0 	call	100b4fc <__floatsidf>
 1004dfc:	021427f4 	movhi	r8,20639
 1004e00:	421e7ec4 	addi	r8,r8,31227
 1004e04:	024ff4f4 	movhi	r9,16339
 1004e08:	4a5104c4 	addi	r9,r9,17427
 1004e0c:	480f883a 	mov	r7,r9
 1004e10:	400d883a 	mov	r6,r8
 1004e14:	180b883a 	mov	r5,r3
 1004e18:	1009883a 	mov	r4,r2
 1004e1c:	100ae480 	call	100ae48 <__muldf3>
 1004e20:	180f883a 	mov	r7,r3
 1004e24:	880b883a 	mov	r5,r17
 1004e28:	100d883a 	mov	r6,r2
 1004e2c:	8009883a 	mov	r4,r16
 1004e30:	100adc80 	call	100adc8 <__adddf3>
 1004e34:	1009883a 	mov	r4,r2
 1004e38:	180b883a 	mov	r5,r3
 1004e3c:	1021883a 	mov	r16,r2
 1004e40:	1823883a 	mov	r17,r3
 1004e44:	100b6000 	call	100b600 <__fixdfsi>
 1004e48:	000d883a 	mov	r6,zero
 1004e4c:	000f883a 	mov	r7,zero
 1004e50:	8009883a 	mov	r4,r16
 1004e54:	880b883a 	mov	r5,r17
 1004e58:	d8800d15 	stw	r2,52(sp)
 1004e5c:	100b4680 	call	100b468 <__ltdf2>
 1004e60:	10031716 	blt	r2,zero,1005ac0 <_dtoa_r+0xe98>
 1004e64:	d8c00d17 	ldw	r3,52(sp)
 1004e68:	00800584 	movi	r2,22
 1004e6c:	10c1482e 	bgeu	r2,r3,1005390 <_dtoa_r+0x768>
 1004e70:	01000044 	movi	r4,1
 1004e74:	d9000c15 	stw	r4,48(sp)
 1004e78:	bd85c83a 	sub	r2,r23,r22
 1004e7c:	11bfffc4 	addi	r6,r2,-1
 1004e80:	30030b16 	blt	r6,zero,1005ab0 <_dtoa_r+0xe88>
 1004e84:	d9800a15 	stw	r6,40(sp)
 1004e88:	d8001115 	stw	zero,68(sp)
 1004e8c:	d8c00d17 	ldw	r3,52(sp)
 1004e90:	1802ff16 	blt	r3,zero,1005a90 <_dtoa_r+0xe68>
 1004e94:	d9000a17 	ldw	r4,40(sp)
 1004e98:	d8c00915 	stw	r3,36(sp)
 1004e9c:	d8001015 	stw	zero,64(sp)
 1004ea0:	20c9883a 	add	r4,r4,r3
 1004ea4:	d9000a15 	stw	r4,40(sp)
 1004ea8:	d9001717 	ldw	r4,92(sp)
 1004eac:	00800244 	movi	r2,9
 1004eb0:	11004636 	bltu	r2,r4,1004fcc <_dtoa_r+0x3a4>
 1004eb4:	00800144 	movi	r2,5
 1004eb8:	11020416 	blt	r2,r4,10056cc <_dtoa_r+0xaa4>
 1004ebc:	04400044 	movi	r17,1
 1004ec0:	d8c01717 	ldw	r3,92(sp)
 1004ec4:	00800144 	movi	r2,5
 1004ec8:	10c1ed36 	bltu	r2,r3,1005680 <_dtoa_r+0xa58>
 1004ecc:	18c5883a 	add	r2,r3,r3
 1004ed0:	1085883a 	add	r2,r2,r2
 1004ed4:	00c04034 	movhi	r3,256
 1004ed8:	18d3ba04 	addi	r3,r3,20200
 1004edc:	10c5883a 	add	r2,r2,r3
 1004ee0:	11000017 	ldw	r4,0(r2)
 1004ee4:	2000683a 	jmp	r4
 1004ee8:	01004fd4 	movui	r4,319
 1004eec:	01004fd4 	movui	r4,319
 1004ef0:	010059d4 	movui	r4,359
 1004ef4:	010059ac 	andhi	r4,zero,358
 1004ef8:	010059f0 	cmpltui	r4,zero,359
 1004efc:	010059fc 	xorhi	r4,zero,359
 1004f00:	d9002717 	ldw	r4,156(sp)
 1004f04:	0089c3c4 	movi	r2,9999
 1004f08:	20800015 	stw	r2,0(r4)
 1004f0c:	a0001026 	beq	r20,zero,1004f50 <_dtoa_r+0x328>
 1004f10:	00c040b4 	movhi	r3,258
 1004f14:	18e7a004 	addi	r3,r3,-24960
 1004f18:	d9802917 	ldw	r6,164(sp)
 1004f1c:	303f7926 	beq	r6,zero,1004d04 <_dtoa_r+0xdc>
 1004f20:	188000c7 	ldb	r2,3(r3)
 1004f24:	190000c4 	addi	r4,r3,3
 1004f28:	1000101e 	bne	r2,zero,1004f6c <_dtoa_r+0x344>
 1004f2c:	d8802917 	ldw	r2,164(sp)
 1004f30:	11000015 	stw	r4,0(r2)
 1004f34:	003f7306 	br	1004d04 <_dtoa_r+0xdc>
 1004f38:	00a00034 	movhi	r2,32768
 1004f3c:	10bfffc4 	addi	r2,r2,-1
 1004f40:	00c00044 	movi	r3,1
 1004f44:	88aa703a 	and	r21,r17,r2
 1004f48:	90c00015 	stw	r3,0(r18)
 1004f4c:	003f5806 	br	1004cb0 <_dtoa_r+0x88>
 1004f50:	00800434 	movhi	r2,16
 1004f54:	10bfffc4 	addi	r2,r2,-1
 1004f58:	a884703a 	and	r2,r21,r2
 1004f5c:	103fec1e 	bne	r2,zero,1004f10 <_dtoa_r+0x2e8>
 1004f60:	00c040b4 	movhi	r3,258
 1004f64:	18e79d04 	addi	r3,r3,-24972
 1004f68:	003feb06 	br	1004f18 <_dtoa_r+0x2f0>
 1004f6c:	d8802917 	ldw	r2,164(sp)
 1004f70:	19000204 	addi	r4,r3,8
 1004f74:	11000015 	stw	r4,0(r2)
 1004f78:	003f6206 	br	1004d04 <_dtoa_r+0xdc>
 1004f7c:	ddc00117 	ldw	r23,4(sp)
 1004f80:	d8800217 	ldw	r2,8(sp)
 1004f84:	01000804 	movi	r4,32
 1004f88:	b8c10c84 	addi	r3,r23,1074
 1004f8c:	18a3883a 	add	r17,r3,r2
 1004f90:	2441b80e 	bge	r4,r17,1005674 <_dtoa_r+0xa4c>
 1004f94:	00c01004 	movi	r3,64
 1004f98:	1c47c83a 	sub	r3,r3,r17
 1004f9c:	88bff804 	addi	r2,r17,-32
 1004fa0:	a8c6983a 	sll	r3,r21,r3
 1004fa4:	a084d83a 	srl	r2,r20,r2
 1004fa8:	1888b03a 	or	r4,r3,r2
 1004fac:	1001eb80 	call	1001eb8 <__floatunsidf>
 1004fb0:	1011883a 	mov	r8,r2
 1004fb4:	00bf8434 	movhi	r2,65040
 1004fb8:	01000044 	movi	r4,1
 1004fbc:	10d3883a 	add	r9,r2,r3
 1004fc0:	8dbef344 	addi	r22,r17,-1075
 1004fc4:	d9000815 	stw	r4,32(sp)
 1004fc8:	003f6f06 	br	1004d88 <_dtoa_r+0x160>
 1004fcc:	d8001715 	stw	zero,92(sp)
 1004fd0:	04400044 	movi	r17,1
 1004fd4:	00bfffc4 	movi	r2,-1
 1004fd8:	00c00044 	movi	r3,1
 1004fdc:	d8800e15 	stw	r2,56(sp)
 1004fe0:	d8002615 	stw	zero,152(sp)
 1004fe4:	d8800f15 	stw	r2,60(sp)
 1004fe8:	d8c00b15 	stw	r3,44(sp)
 1004fec:	1021883a 	mov	r16,r2
 1004ff0:	d8801617 	ldw	r2,88(sp)
 1004ff4:	10001115 	stw	zero,68(r2)
 1004ff8:	d8801617 	ldw	r2,88(sp)
 1004ffc:	11401117 	ldw	r5,68(r2)
 1005000:	1009883a 	mov	r4,r2
 1005004:	10085780 	call	1008578 <_Balloc>
 1005008:	d8c01617 	ldw	r3,88(sp)
 100500c:	d8800515 	stw	r2,20(sp)
 1005010:	18801015 	stw	r2,64(r3)
 1005014:	00800384 	movi	r2,14
 1005018:	14006836 	bltu	r2,r16,10051bc <_dtoa_r+0x594>
 100501c:	8805003a 	cmpeq	r2,r17,zero
 1005020:	1000661e 	bne	r2,zero,10051bc <_dtoa_r+0x594>
 1005024:	d9000d17 	ldw	r4,52(sp)
 1005028:	0102300e 	bge	zero,r4,10058ec <_dtoa_r+0xcc4>
 100502c:	208003cc 	andi	r2,r4,15
 1005030:	100490fa 	slli	r2,r2,3
 1005034:	2025d13a 	srai	r18,r4,4
 1005038:	00c040b4 	movhi	r3,258
 100503c:	18e7b204 	addi	r3,r3,-24888
 1005040:	10c5883a 	add	r2,r2,r3
 1005044:	90c0040c 	andi	r3,r18,16
 1005048:	14000017 	ldw	r16,0(r2)
 100504c:	14400117 	ldw	r17,4(r2)
 1005050:	18036a1e 	bne	r3,zero,1005dfc <_dtoa_r+0x11d4>
 1005054:	05800084 	movi	r22,2
 1005058:	90001026 	beq	r18,zero,100509c <_dtoa_r+0x474>
 100505c:	04c040b4 	movhi	r19,258
 1005060:	9ce7e404 	addi	r19,r19,-24688
 1005064:	9080004c 	andi	r2,r18,1
 1005068:	1005003a 	cmpeq	r2,r2,zero
 100506c:	1000081e 	bne	r2,zero,1005090 <_dtoa_r+0x468>
 1005070:	99800017 	ldw	r6,0(r19)
 1005074:	99c00117 	ldw	r7,4(r19)
 1005078:	880b883a 	mov	r5,r17
 100507c:	8009883a 	mov	r4,r16
 1005080:	100ae480 	call	100ae48 <__muldf3>
 1005084:	1021883a 	mov	r16,r2
 1005088:	b5800044 	addi	r22,r22,1
 100508c:	1823883a 	mov	r17,r3
 1005090:	9025d07a 	srai	r18,r18,1
 1005094:	9cc00204 	addi	r19,r19,8
 1005098:	903ff21e 	bne	r18,zero,1005064 <_dtoa_r+0x43c>
 100509c:	a80b883a 	mov	r5,r21
 10050a0:	a009883a 	mov	r4,r20
 10050a4:	880f883a 	mov	r7,r17
 10050a8:	800d883a 	mov	r6,r16
 10050ac:	1001c540 	call	1001c54 <__divdf3>
 10050b0:	1029883a 	mov	r20,r2
 10050b4:	182b883a 	mov	r21,r3
 10050b8:	d8c00c17 	ldw	r3,48(sp)
 10050bc:	1805003a 	cmpeq	r2,r3,zero
 10050c0:	1000081e 	bne	r2,zero,10050e4 <_dtoa_r+0x4bc>
 10050c4:	0005883a 	mov	r2,zero
 10050c8:	00cffc34 	movhi	r3,16368
 10050cc:	180f883a 	mov	r7,r3
 10050d0:	a009883a 	mov	r4,r20
 10050d4:	a80b883a 	mov	r5,r21
 10050d8:	100d883a 	mov	r6,r2
 10050dc:	100b4680 	call	100b468 <__ltdf2>
 10050e0:	1003fe16 	blt	r2,zero,10060dc <_dtoa_r+0x14b4>
 10050e4:	b009883a 	mov	r4,r22
 10050e8:	100b4fc0 	call	100b4fc <__floatsidf>
 10050ec:	180b883a 	mov	r5,r3
 10050f0:	1009883a 	mov	r4,r2
 10050f4:	a00d883a 	mov	r6,r20
 10050f8:	a80f883a 	mov	r7,r21
 10050fc:	100ae480 	call	100ae48 <__muldf3>
 1005100:	0011883a 	mov	r8,zero
 1005104:	02500734 	movhi	r9,16412
 1005108:	1009883a 	mov	r4,r2
 100510c:	180b883a 	mov	r5,r3
 1005110:	480f883a 	mov	r7,r9
 1005114:	400d883a 	mov	r6,r8
 1005118:	100adc80 	call	100adc8 <__adddf3>
 100511c:	d9000f17 	ldw	r4,60(sp)
 1005120:	102d883a 	mov	r22,r2
 1005124:	00bf3034 	movhi	r2,64704
 1005128:	18b9883a 	add	fp,r3,r2
 100512c:	e02f883a 	mov	r23,fp
 1005130:	20028f1e 	bne	r4,zero,1005b70 <_dtoa_r+0xf48>
 1005134:	0005883a 	mov	r2,zero
 1005138:	00d00534 	movhi	r3,16404
 100513c:	a009883a 	mov	r4,r20
 1005140:	a80b883a 	mov	r5,r21
 1005144:	180f883a 	mov	r7,r3
 1005148:	100d883a 	mov	r6,r2
 100514c:	100ad3c0 	call	100ad3c <__subdf3>
 1005150:	1009883a 	mov	r4,r2
 1005154:	e00f883a 	mov	r7,fp
 1005158:	180b883a 	mov	r5,r3
 100515c:	b00d883a 	mov	r6,r22
 1005160:	1025883a 	mov	r18,r2
 1005164:	1827883a 	mov	r19,r3
 1005168:	100b3400 	call	100b340 <__gtdf2>
 100516c:	00834f16 	blt	zero,r2,1005eac <_dtoa_r+0x1284>
 1005170:	e0e0003c 	xorhi	r3,fp,32768
 1005174:	9009883a 	mov	r4,r18
 1005178:	980b883a 	mov	r5,r19
 100517c:	180f883a 	mov	r7,r3
 1005180:	b00d883a 	mov	r6,r22
 1005184:	100b4680 	call	100b468 <__ltdf2>
 1005188:	1000080e 	bge	r2,zero,10051ac <_dtoa_r+0x584>
 100518c:	0027883a 	mov	r19,zero
 1005190:	0025883a 	mov	r18,zero
 1005194:	d8802617 	ldw	r2,152(sp)
 1005198:	df000517 	ldw	fp,20(sp)
 100519c:	d8000615 	stw	zero,24(sp)
 10051a0:	0084303a 	nor	r2,zero,r2
 10051a4:	d8800d15 	stw	r2,52(sp)
 10051a8:	00019b06 	br	1005818 <_dtoa_r+0xbf0>
 10051ac:	d9801217 	ldw	r6,72(sp)
 10051b0:	d8801317 	ldw	r2,76(sp)
 10051b4:	3029883a 	mov	r20,r6
 10051b8:	102b883a 	mov	r21,r2
 10051bc:	d8c00217 	ldw	r3,8(sp)
 10051c0:	18008516 	blt	r3,zero,10053d8 <_dtoa_r+0x7b0>
 10051c4:	d9000d17 	ldw	r4,52(sp)
 10051c8:	00800384 	movi	r2,14
 10051cc:	11008216 	blt	r2,r4,10053d8 <_dtoa_r+0x7b0>
 10051d0:	200490fa 	slli	r2,r4,3
 10051d4:	d9802617 	ldw	r6,152(sp)
 10051d8:	00c040b4 	movhi	r3,258
 10051dc:	18e7b204 	addi	r3,r3,-24888
 10051e0:	10c5883a 	add	r2,r2,r3
 10051e4:	14800017 	ldw	r18,0(r2)
 10051e8:	14c00117 	ldw	r19,4(r2)
 10051ec:	30031e16 	blt	r6,zero,1005e68 <_dtoa_r+0x1240>
 10051f0:	d9000517 	ldw	r4,20(sp)
 10051f4:	d8c00f17 	ldw	r3,60(sp)
 10051f8:	a823883a 	mov	r17,r21
 10051fc:	a021883a 	mov	r16,r20
 1005200:	192b883a 	add	r21,r3,r4
 1005204:	2039883a 	mov	fp,r4
 1005208:	00000f06 	br	1005248 <_dtoa_r+0x620>
 100520c:	0005883a 	mov	r2,zero
 1005210:	00d00934 	movhi	r3,16420
 1005214:	5009883a 	mov	r4,r10
 1005218:	580b883a 	mov	r5,r11
 100521c:	180f883a 	mov	r7,r3
 1005220:	100d883a 	mov	r6,r2
 1005224:	100ae480 	call	100ae48 <__muldf3>
 1005228:	180b883a 	mov	r5,r3
 100522c:	000d883a 	mov	r6,zero
 1005230:	000f883a 	mov	r7,zero
 1005234:	1009883a 	mov	r4,r2
 1005238:	1021883a 	mov	r16,r2
 100523c:	1823883a 	mov	r17,r3
 1005240:	100b2ac0 	call	100b2ac <__nedf2>
 1005244:	10004526 	beq	r2,zero,100535c <_dtoa_r+0x734>
 1005248:	900d883a 	mov	r6,r18
 100524c:	980f883a 	mov	r7,r19
 1005250:	8009883a 	mov	r4,r16
 1005254:	880b883a 	mov	r5,r17
 1005258:	1001c540 	call	1001c54 <__divdf3>
 100525c:	180b883a 	mov	r5,r3
 1005260:	1009883a 	mov	r4,r2
 1005264:	100b6000 	call	100b600 <__fixdfsi>
 1005268:	1009883a 	mov	r4,r2
 100526c:	1029883a 	mov	r20,r2
 1005270:	100b4fc0 	call	100b4fc <__floatsidf>
 1005274:	180f883a 	mov	r7,r3
 1005278:	9009883a 	mov	r4,r18
 100527c:	980b883a 	mov	r5,r19
 1005280:	100d883a 	mov	r6,r2
 1005284:	100ae480 	call	100ae48 <__muldf3>
 1005288:	180f883a 	mov	r7,r3
 100528c:	880b883a 	mov	r5,r17
 1005290:	8009883a 	mov	r4,r16
 1005294:	100d883a 	mov	r6,r2
 1005298:	100ad3c0 	call	100ad3c <__subdf3>
 100529c:	1015883a 	mov	r10,r2
 10052a0:	a0800c04 	addi	r2,r20,48
 10052a4:	e0800005 	stb	r2,0(fp)
 10052a8:	e7000044 	addi	fp,fp,1
 10052ac:	1817883a 	mov	r11,r3
 10052b0:	e57fd61e 	bne	fp,r21,100520c <_dtoa_r+0x5e4>
 10052b4:	500d883a 	mov	r6,r10
 10052b8:	180f883a 	mov	r7,r3
 10052bc:	5009883a 	mov	r4,r10
 10052c0:	180b883a 	mov	r5,r3
 10052c4:	100adc80 	call	100adc8 <__adddf3>
 10052c8:	100d883a 	mov	r6,r2
 10052cc:	9009883a 	mov	r4,r18
 10052d0:	980b883a 	mov	r5,r19
 10052d4:	180f883a 	mov	r7,r3
 10052d8:	1021883a 	mov	r16,r2
 10052dc:	1823883a 	mov	r17,r3
 10052e0:	100b4680 	call	100b468 <__ltdf2>
 10052e4:	10000816 	blt	r2,zero,1005308 <_dtoa_r+0x6e0>
 10052e8:	980b883a 	mov	r5,r19
 10052ec:	800d883a 	mov	r6,r16
 10052f0:	880f883a 	mov	r7,r17
 10052f4:	9009883a 	mov	r4,r18
 10052f8:	100b2180 	call	100b218 <__eqdf2>
 10052fc:	1000171e 	bne	r2,zero,100535c <_dtoa_r+0x734>
 1005300:	a080004c 	andi	r2,r20,1
 1005304:	10001526 	beq	r2,zero,100535c <_dtoa_r+0x734>
 1005308:	d8800d17 	ldw	r2,52(sp)
 100530c:	d8800415 	stw	r2,16(sp)
 1005310:	e009883a 	mov	r4,fp
 1005314:	213fffc4 	addi	r4,r4,-1
 1005318:	20c00007 	ldb	r3,0(r4)
 100531c:	00800e44 	movi	r2,57
 1005320:	1880081e 	bne	r3,r2,1005344 <_dtoa_r+0x71c>
 1005324:	d8800517 	ldw	r2,20(sp)
 1005328:	113ffa1e 	bne	r2,r4,1005314 <_dtoa_r+0x6ec>
 100532c:	d8c00417 	ldw	r3,16(sp)
 1005330:	d9800517 	ldw	r6,20(sp)
 1005334:	00800c04 	movi	r2,48
 1005338:	18c00044 	addi	r3,r3,1
 100533c:	d8c00415 	stw	r3,16(sp)
 1005340:	30800005 	stb	r2,0(r6)
 1005344:	20800003 	ldbu	r2,0(r4)
 1005348:	d8c00417 	ldw	r3,16(sp)
 100534c:	27000044 	addi	fp,r4,1
 1005350:	10800044 	addi	r2,r2,1
 1005354:	d8c00d15 	stw	r3,52(sp)
 1005358:	20800005 	stb	r2,0(r4)
 100535c:	d9001617 	ldw	r4,88(sp)
 1005360:	d9400717 	ldw	r5,28(sp)
 1005364:	1007f7c0 	call	1007f7c <_Bfree>
 1005368:	e0000005 	stb	zero,0(fp)
 100536c:	d9800d17 	ldw	r6,52(sp)
 1005370:	d8c02717 	ldw	r3,156(sp)
 1005374:	d9002917 	ldw	r4,164(sp)
 1005378:	30800044 	addi	r2,r6,1
 100537c:	18800015 	stw	r2,0(r3)
 1005380:	20029c26 	beq	r4,zero,1005df4 <_dtoa_r+0x11cc>
 1005384:	d8c00517 	ldw	r3,20(sp)
 1005388:	27000015 	stw	fp,0(r4)
 100538c:	003e5d06 	br	1004d04 <_dtoa_r+0xdc>
 1005390:	d9800d17 	ldw	r6,52(sp)
 1005394:	00c040b4 	movhi	r3,258
 1005398:	18e7b204 	addi	r3,r3,-24888
 100539c:	d9001217 	ldw	r4,72(sp)
 10053a0:	300490fa 	slli	r2,r6,3
 10053a4:	d9401317 	ldw	r5,76(sp)
 10053a8:	10c5883a 	add	r2,r2,r3
 10053ac:	12000017 	ldw	r8,0(r2)
 10053b0:	12400117 	ldw	r9,4(r2)
 10053b4:	400d883a 	mov	r6,r8
 10053b8:	480f883a 	mov	r7,r9
 10053bc:	100b4680 	call	100b468 <__ltdf2>
 10053c0:	1000030e 	bge	r2,zero,10053d0 <_dtoa_r+0x7a8>
 10053c4:	d8800d17 	ldw	r2,52(sp)
 10053c8:	10bfffc4 	addi	r2,r2,-1
 10053cc:	d8800d15 	stw	r2,52(sp)
 10053d0:	d8000c15 	stw	zero,48(sp)
 10053d4:	003ea806 	br	1004e78 <_dtoa_r+0x250>
 10053d8:	d9000b17 	ldw	r4,44(sp)
 10053dc:	202cc03a 	cmpne	r22,r4,zero
 10053e0:	b000c71e 	bne	r22,zero,1005700 <_dtoa_r+0xad8>
 10053e4:	dc001117 	ldw	r16,68(sp)
 10053e8:	dc801017 	ldw	r18,64(sp)
 10053ec:	0027883a 	mov	r19,zero
 10053f0:	04000b0e 	bge	zero,r16,1005420 <_dtoa_r+0x7f8>
 10053f4:	d8c00a17 	ldw	r3,40(sp)
 10053f8:	00c0090e 	bge	zero,r3,1005420 <_dtoa_r+0x7f8>
 10053fc:	8005883a 	mov	r2,r16
 1005400:	1c011316 	blt	r3,r16,1005850 <_dtoa_r+0xc28>
 1005404:	d9000a17 	ldw	r4,40(sp)
 1005408:	d9801117 	ldw	r6,68(sp)
 100540c:	80a1c83a 	sub	r16,r16,r2
 1005410:	2089c83a 	sub	r4,r4,r2
 1005414:	308dc83a 	sub	r6,r6,r2
 1005418:	d9000a15 	stw	r4,40(sp)
 100541c:	d9801115 	stw	r6,68(sp)
 1005420:	d8801017 	ldw	r2,64(sp)
 1005424:	0080150e 	bge	zero,r2,100547c <_dtoa_r+0x854>
 1005428:	d8c00b17 	ldw	r3,44(sp)
 100542c:	1805003a 	cmpeq	r2,r3,zero
 1005430:	1001c91e 	bne	r2,zero,1005b58 <_dtoa_r+0xf30>
 1005434:	04800e0e 	bge	zero,r18,1005470 <_dtoa_r+0x848>
 1005438:	d9001617 	ldw	r4,88(sp)
 100543c:	980b883a 	mov	r5,r19
 1005440:	900d883a 	mov	r6,r18
 1005444:	1008e980 	call	1008e98 <__pow5mult>
 1005448:	d9001617 	ldw	r4,88(sp)
 100544c:	d9800717 	ldw	r6,28(sp)
 1005450:	100b883a 	mov	r5,r2
 1005454:	1027883a 	mov	r19,r2
 1005458:	1008ab80 	call	1008ab8 <__multiply>
 100545c:	d9001617 	ldw	r4,88(sp)
 1005460:	d9400717 	ldw	r5,28(sp)
 1005464:	1023883a 	mov	r17,r2
 1005468:	1007f7c0 	call	1007f7c <_Bfree>
 100546c:	dc400715 	stw	r17,28(sp)
 1005470:	d9001017 	ldw	r4,64(sp)
 1005474:	248dc83a 	sub	r6,r4,r18
 1005478:	30010e1e 	bne	r6,zero,10058b4 <_dtoa_r+0xc8c>
 100547c:	d9001617 	ldw	r4,88(sp)
 1005480:	04400044 	movi	r17,1
 1005484:	880b883a 	mov	r5,r17
 1005488:	1008d180 	call	1008d18 <__i2b>
 100548c:	d9800917 	ldw	r6,36(sp)
 1005490:	1025883a 	mov	r18,r2
 1005494:	0180040e 	bge	zero,r6,10054a8 <_dtoa_r+0x880>
 1005498:	d9001617 	ldw	r4,88(sp)
 100549c:	100b883a 	mov	r5,r2
 10054a0:	1008e980 	call	1008e98 <__pow5mult>
 10054a4:	1025883a 	mov	r18,r2
 10054a8:	d8801717 	ldw	r2,92(sp)
 10054ac:	8880f30e 	bge	r17,r2,100587c <_dtoa_r+0xc54>
 10054b0:	0023883a 	mov	r17,zero
 10054b4:	d9800917 	ldw	r6,36(sp)
 10054b8:	30019e1e 	bne	r6,zero,1005b34 <_dtoa_r+0xf0c>
 10054bc:	00c00044 	movi	r3,1
 10054c0:	d9000a17 	ldw	r4,40(sp)
 10054c4:	20c5883a 	add	r2,r4,r3
 10054c8:	10c007cc 	andi	r3,r2,31
 10054cc:	1800841e 	bne	r3,zero,10056e0 <_dtoa_r+0xab8>
 10054d0:	00800704 	movi	r2,28
 10054d4:	d9000a17 	ldw	r4,40(sp)
 10054d8:	d9801117 	ldw	r6,68(sp)
 10054dc:	80a1883a 	add	r16,r16,r2
 10054e0:	2089883a 	add	r4,r4,r2
 10054e4:	308d883a 	add	r6,r6,r2
 10054e8:	d9000a15 	stw	r4,40(sp)
 10054ec:	d9801115 	stw	r6,68(sp)
 10054f0:	d8801117 	ldw	r2,68(sp)
 10054f4:	0080050e 	bge	zero,r2,100550c <_dtoa_r+0x8e4>
 10054f8:	d9400717 	ldw	r5,28(sp)
 10054fc:	d9001617 	ldw	r4,88(sp)
 1005500:	100d883a 	mov	r6,r2
 1005504:	10089600 	call	1008960 <__lshift>
 1005508:	d8800715 	stw	r2,28(sp)
 100550c:	d8c00a17 	ldw	r3,40(sp)
 1005510:	00c0050e 	bge	zero,r3,1005528 <_dtoa_r+0x900>
 1005514:	d9001617 	ldw	r4,88(sp)
 1005518:	900b883a 	mov	r5,r18
 100551c:	180d883a 	mov	r6,r3
 1005520:	10089600 	call	1008960 <__lshift>
 1005524:	1025883a 	mov	r18,r2
 1005528:	d9000c17 	ldw	r4,48(sp)
 100552c:	2005003a 	cmpeq	r2,r4,zero
 1005530:	10016f26 	beq	r2,zero,1005af0 <_dtoa_r+0xec8>
 1005534:	d9000f17 	ldw	r4,60(sp)
 1005538:	0102170e 	bge	zero,r4,1005d98 <_dtoa_r+0x1170>
 100553c:	d9800b17 	ldw	r6,44(sp)
 1005540:	3005003a 	cmpeq	r2,r6,zero
 1005544:	1000881e 	bne	r2,zero,1005768 <_dtoa_r+0xb40>
 1005548:	0400050e 	bge	zero,r16,1005560 <_dtoa_r+0x938>
 100554c:	d9001617 	ldw	r4,88(sp)
 1005550:	980b883a 	mov	r5,r19
 1005554:	800d883a 	mov	r6,r16
 1005558:	10089600 	call	1008960 <__lshift>
 100555c:	1027883a 	mov	r19,r2
 1005560:	8804c03a 	cmpne	r2,r17,zero
 1005564:	1002541e 	bne	r2,zero,1005eb8 <_dtoa_r+0x1290>
 1005568:	980b883a 	mov	r5,r19
 100556c:	dd800517 	ldw	r22,20(sp)
 1005570:	dcc00615 	stw	r19,24(sp)
 1005574:	a700004c 	andi	fp,r20,1
 1005578:	2827883a 	mov	r19,r5
 100557c:	d9000717 	ldw	r4,28(sp)
 1005580:	900b883a 	mov	r5,r18
 1005584:	10049d80 	call	10049d8 <quorem>
 1005588:	d9000717 	ldw	r4,28(sp)
 100558c:	d9400617 	ldw	r5,24(sp)
 1005590:	1023883a 	mov	r17,r2
 1005594:	8dc00c04 	addi	r23,r17,48
 1005598:	10080fc0 	call	10080fc <__mcmp>
 100559c:	d9001617 	ldw	r4,88(sp)
 10055a0:	900b883a 	mov	r5,r18
 10055a4:	980d883a 	mov	r6,r19
 10055a8:	1029883a 	mov	r20,r2
 10055ac:	10087c80 	call	10087c8 <__mdiff>
 10055b0:	102b883a 	mov	r21,r2
 10055b4:	10800317 	ldw	r2,12(r2)
 10055b8:	1001281e 	bne	r2,zero,1005a5c <_dtoa_r+0xe34>
 10055bc:	d9000717 	ldw	r4,28(sp)
 10055c0:	a80b883a 	mov	r5,r21
 10055c4:	10080fc0 	call	10080fc <__mcmp>
 10055c8:	d9001617 	ldw	r4,88(sp)
 10055cc:	1021883a 	mov	r16,r2
 10055d0:	a80b883a 	mov	r5,r21
 10055d4:	1007f7c0 	call	1007f7c <_Bfree>
 10055d8:	8000041e 	bne	r16,zero,10055ec <_dtoa_r+0x9c4>
 10055dc:	d8801717 	ldw	r2,92(sp)
 10055e0:	1000021e 	bne	r2,zero,10055ec <_dtoa_r+0x9c4>
 10055e4:	e004c03a 	cmpne	r2,fp,zero
 10055e8:	10011726 	beq	r2,zero,1005a48 <_dtoa_r+0xe20>
 10055ec:	a0010616 	blt	r20,zero,1005a08 <_dtoa_r+0xde0>
 10055f0:	a000041e 	bne	r20,zero,1005604 <_dtoa_r+0x9dc>
 10055f4:	d8c01717 	ldw	r3,92(sp)
 10055f8:	1800021e 	bne	r3,zero,1005604 <_dtoa_r+0x9dc>
 10055fc:	e004c03a 	cmpne	r2,fp,zero
 1005600:	10010126 	beq	r2,zero,1005a08 <_dtoa_r+0xde0>
 1005604:	04023d16 	blt	zero,r16,1005efc <_dtoa_r+0x12d4>
 1005608:	b5c00005 	stb	r23,0(r22)
 100560c:	d9800517 	ldw	r6,20(sp)
 1005610:	d9000f17 	ldw	r4,60(sp)
 1005614:	b5800044 	addi	r22,r22,1
 1005618:	3105883a 	add	r2,r6,r4
 100561c:	b0806526 	beq	r22,r2,10057b4 <_dtoa_r+0xb8c>
 1005620:	d9400717 	ldw	r5,28(sp)
 1005624:	d9001617 	ldw	r4,88(sp)
 1005628:	01800284 	movi	r6,10
 100562c:	000f883a 	mov	r7,zero
 1005630:	1008d600 	call	1008d60 <__multadd>
 1005634:	d8800715 	stw	r2,28(sp)
 1005638:	d8800617 	ldw	r2,24(sp)
 100563c:	14c10c26 	beq	r2,r19,1005a70 <_dtoa_r+0xe48>
 1005640:	d9400617 	ldw	r5,24(sp)
 1005644:	d9001617 	ldw	r4,88(sp)
 1005648:	01800284 	movi	r6,10
 100564c:	000f883a 	mov	r7,zero
 1005650:	1008d600 	call	1008d60 <__multadd>
 1005654:	d9001617 	ldw	r4,88(sp)
 1005658:	980b883a 	mov	r5,r19
 100565c:	01800284 	movi	r6,10
 1005660:	000f883a 	mov	r7,zero
 1005664:	d8800615 	stw	r2,24(sp)
 1005668:	1008d600 	call	1008d60 <__multadd>
 100566c:	1027883a 	mov	r19,r2
 1005670:	003fc206 	br	100557c <_dtoa_r+0x954>
 1005674:	2445c83a 	sub	r2,r4,r17
 1005678:	a088983a 	sll	r4,r20,r2
 100567c:	003e4b06 	br	1004fac <_dtoa_r+0x384>
 1005680:	01bfffc4 	movi	r6,-1
 1005684:	00800044 	movi	r2,1
 1005688:	d9800e15 	stw	r6,56(sp)
 100568c:	d9800f15 	stw	r6,60(sp)
 1005690:	d8800b15 	stw	r2,44(sp)
 1005694:	d8c01617 	ldw	r3,88(sp)
 1005698:	008005c4 	movi	r2,23
 100569c:	18001115 	stw	zero,68(r3)
 10056a0:	1580082e 	bgeu	r2,r22,10056c4 <_dtoa_r+0xa9c>
 10056a4:	00c00104 	movi	r3,4
 10056a8:	0009883a 	mov	r4,zero
 10056ac:	18c7883a 	add	r3,r3,r3
 10056b0:	18800504 	addi	r2,r3,20
 10056b4:	21000044 	addi	r4,r4,1
 10056b8:	b0bffc2e 	bgeu	r22,r2,10056ac <_dtoa_r+0xa84>
 10056bc:	d9801617 	ldw	r6,88(sp)
 10056c0:	31001115 	stw	r4,68(r6)
 10056c4:	dc000f17 	ldw	r16,60(sp)
 10056c8:	003e4b06 	br	1004ff8 <_dtoa_r+0x3d0>
 10056cc:	d9801717 	ldw	r6,92(sp)
 10056d0:	0023883a 	mov	r17,zero
 10056d4:	31bfff04 	addi	r6,r6,-4
 10056d8:	d9801715 	stw	r6,92(sp)
 10056dc:	003df806 	br	1004ec0 <_dtoa_r+0x298>
 10056e0:	00800804 	movi	r2,32
 10056e4:	10c9c83a 	sub	r4,r2,r3
 10056e8:	00c00104 	movi	r3,4
 10056ec:	19005a16 	blt	r3,r4,1005858 <_dtoa_r+0xc30>
 10056f0:	008000c4 	movi	r2,3
 10056f4:	113f7e16 	blt	r2,r4,10054f0 <_dtoa_r+0x8c8>
 10056f8:	20800704 	addi	r2,r4,28
 10056fc:	003f7506 	br	10054d4 <_dtoa_r+0x8ac>
 1005700:	d9801717 	ldw	r6,92(sp)
 1005704:	00800044 	movi	r2,1
 1005708:	1180a10e 	bge	r2,r6,1005990 <_dtoa_r+0xd68>
 100570c:	d9800f17 	ldw	r6,60(sp)
 1005710:	d8c01017 	ldw	r3,64(sp)
 1005714:	30bfffc4 	addi	r2,r6,-1
 1005718:	1881c616 	blt	r3,r2,1005e34 <_dtoa_r+0x120c>
 100571c:	18a5c83a 	sub	r18,r3,r2
 1005720:	d8800f17 	ldw	r2,60(sp)
 1005724:	10026216 	blt	r2,zero,10060b0 <_dtoa_r+0x1488>
 1005728:	dc001117 	ldw	r16,68(sp)
 100572c:	1007883a 	mov	r3,r2
 1005730:	d9800a17 	ldw	r6,40(sp)
 1005734:	d8801117 	ldw	r2,68(sp)
 1005738:	d9001617 	ldw	r4,88(sp)
 100573c:	30cd883a 	add	r6,r6,r3
 1005740:	10c5883a 	add	r2,r2,r3
 1005744:	01400044 	movi	r5,1
 1005748:	d9800a15 	stw	r6,40(sp)
 100574c:	d8801115 	stw	r2,68(sp)
 1005750:	1008d180 	call	1008d18 <__i2b>
 1005754:	1027883a 	mov	r19,r2
 1005758:	003f2506 	br	10053f0 <_dtoa_r+0x7c8>
 100575c:	00c040b4 	movhi	r3,258
 1005760:	18e79404 	addi	r3,r3,-25008
 1005764:	003d6706 	br	1004d04 <_dtoa_r+0xdc>
 1005768:	dd800517 	ldw	r22,20(sp)
 100576c:	04000044 	movi	r16,1
 1005770:	00000706 	br	1005790 <_dtoa_r+0xb68>
 1005774:	d9400717 	ldw	r5,28(sp)
 1005778:	d9001617 	ldw	r4,88(sp)
 100577c:	01800284 	movi	r6,10
 1005780:	000f883a 	mov	r7,zero
 1005784:	1008d600 	call	1008d60 <__multadd>
 1005788:	d8800715 	stw	r2,28(sp)
 100578c:	84000044 	addi	r16,r16,1
 1005790:	d9000717 	ldw	r4,28(sp)
 1005794:	900b883a 	mov	r5,r18
 1005798:	10049d80 	call	10049d8 <quorem>
 100579c:	15c00c04 	addi	r23,r2,48
 10057a0:	b5c00005 	stb	r23,0(r22)
 10057a4:	d8c00f17 	ldw	r3,60(sp)
 10057a8:	b5800044 	addi	r22,r22,1
 10057ac:	80fff116 	blt	r16,r3,1005774 <_dtoa_r+0xb4c>
 10057b0:	d8000615 	stw	zero,24(sp)
 10057b4:	d9400717 	ldw	r5,28(sp)
 10057b8:	d9001617 	ldw	r4,88(sp)
 10057bc:	01800044 	movi	r6,1
 10057c0:	10089600 	call	1008960 <__lshift>
 10057c4:	1009883a 	mov	r4,r2
 10057c8:	900b883a 	mov	r5,r18
 10057cc:	d8800715 	stw	r2,28(sp)
 10057d0:	10080fc0 	call	10080fc <__mcmp>
 10057d4:	00803c0e 	bge	zero,r2,10058c8 <_dtoa_r+0xca0>
 10057d8:	b009883a 	mov	r4,r22
 10057dc:	213fffc4 	addi	r4,r4,-1
 10057e0:	21400003 	ldbu	r5,0(r4)
 10057e4:	00800e44 	movi	r2,57
 10057e8:	28c03fcc 	andi	r3,r5,255
 10057ec:	18c0201c 	xori	r3,r3,128
 10057f0:	18ffe004 	addi	r3,r3,-128
 10057f4:	1881981e 	bne	r3,r2,1005e58 <_dtoa_r+0x1230>
 10057f8:	d9800517 	ldw	r6,20(sp)
 10057fc:	21bff71e 	bne	r4,r6,10057dc <_dtoa_r+0xbb4>
 1005800:	d8800d17 	ldw	r2,52(sp)
 1005804:	37000044 	addi	fp,r6,1
 1005808:	10800044 	addi	r2,r2,1
 100580c:	d8800d15 	stw	r2,52(sp)
 1005810:	00800c44 	movi	r2,49
 1005814:	30800005 	stb	r2,0(r6)
 1005818:	d9001617 	ldw	r4,88(sp)
 100581c:	900b883a 	mov	r5,r18
 1005820:	1007f7c0 	call	1007f7c <_Bfree>
 1005824:	983ecd26 	beq	r19,zero,100535c <_dtoa_r+0x734>
 1005828:	d8c00617 	ldw	r3,24(sp)
 100582c:	18000426 	beq	r3,zero,1005840 <_dtoa_r+0xc18>
 1005830:	1cc00326 	beq	r3,r19,1005840 <_dtoa_r+0xc18>
 1005834:	d9001617 	ldw	r4,88(sp)
 1005838:	180b883a 	mov	r5,r3
 100583c:	1007f7c0 	call	1007f7c <_Bfree>
 1005840:	d9001617 	ldw	r4,88(sp)
 1005844:	980b883a 	mov	r5,r19
 1005848:	1007f7c0 	call	1007f7c <_Bfree>
 100584c:	003ec306 	br	100535c <_dtoa_r+0x734>
 1005850:	1805883a 	mov	r2,r3
 1005854:	003eeb06 	br	1005404 <_dtoa_r+0x7dc>
 1005858:	d9800a17 	ldw	r6,40(sp)
 100585c:	d8c01117 	ldw	r3,68(sp)
 1005860:	20bfff04 	addi	r2,r4,-4
 1005864:	308d883a 	add	r6,r6,r2
 1005868:	1887883a 	add	r3,r3,r2
 100586c:	80a1883a 	add	r16,r16,r2
 1005870:	d9800a15 	stw	r6,40(sp)
 1005874:	d8c01115 	stw	r3,68(sp)
 1005878:	003f1d06 	br	10054f0 <_dtoa_r+0x8c8>
 100587c:	a03f0c1e 	bne	r20,zero,10054b0 <_dtoa_r+0x888>
 1005880:	00800434 	movhi	r2,16
 1005884:	10bfffc4 	addi	r2,r2,-1
 1005888:	a884703a 	and	r2,r21,r2
 100588c:	103f081e 	bne	r2,zero,10054b0 <_dtoa_r+0x888>
 1005890:	a89ffc2c 	andhi	r2,r21,32752
 1005894:	103f0626 	beq	r2,zero,10054b0 <_dtoa_r+0x888>
 1005898:	d8c01117 	ldw	r3,68(sp)
 100589c:	d9000a17 	ldw	r4,40(sp)
 10058a0:	18c00044 	addi	r3,r3,1
 10058a4:	21000044 	addi	r4,r4,1
 10058a8:	d8c01115 	stw	r3,68(sp)
 10058ac:	d9000a15 	stw	r4,40(sp)
 10058b0:	003f0006 	br	10054b4 <_dtoa_r+0x88c>
 10058b4:	d9400717 	ldw	r5,28(sp)
 10058b8:	d9001617 	ldw	r4,88(sp)
 10058bc:	1008e980 	call	1008e98 <__pow5mult>
 10058c0:	d8800715 	stw	r2,28(sp)
 10058c4:	003eed06 	br	100547c <_dtoa_r+0x854>
 10058c8:	1000021e 	bne	r2,zero,10058d4 <_dtoa_r+0xcac>
 10058cc:	b880004c 	andi	r2,r23,1
 10058d0:	103fc11e 	bne	r2,zero,10057d8 <_dtoa_r+0xbb0>
 10058d4:	b5bfffc4 	addi	r22,r22,-1
 10058d8:	b0c00007 	ldb	r3,0(r22)
 10058dc:	00800c04 	movi	r2,48
 10058e0:	18bffc26 	beq	r3,r2,10058d4 <_dtoa_r+0xcac>
 10058e4:	b7000044 	addi	fp,r22,1
 10058e8:	003fcb06 	br	1005818 <_dtoa_r+0xbf0>
 10058ec:	d9800d17 	ldw	r6,52(sp)
 10058f0:	018fc83a 	sub	r7,zero,r6
 10058f4:	3801f726 	beq	r7,zero,10060d4 <_dtoa_r+0x14ac>
 10058f8:	398003cc 	andi	r6,r7,15
 10058fc:	300c90fa 	slli	r6,r6,3
 1005900:	014040b4 	movhi	r5,258
 1005904:	2967b204 	addi	r5,r5,-24888
 1005908:	d9001217 	ldw	r4,72(sp)
 100590c:	314d883a 	add	r6,r6,r5
 1005910:	30c00117 	ldw	r3,4(r6)
 1005914:	30800017 	ldw	r2,0(r6)
 1005918:	d9401317 	ldw	r5,76(sp)
 100591c:	3821d13a 	srai	r16,r7,4
 1005920:	100d883a 	mov	r6,r2
 1005924:	180f883a 	mov	r7,r3
 1005928:	100ae480 	call	100ae48 <__muldf3>
 100592c:	1011883a 	mov	r8,r2
 1005930:	1813883a 	mov	r9,r3
 1005934:	1029883a 	mov	r20,r2
 1005938:	182b883a 	mov	r21,r3
 100593c:	8001e526 	beq	r16,zero,10060d4 <_dtoa_r+0x14ac>
 1005940:	05800084 	movi	r22,2
 1005944:	044040b4 	movhi	r17,258
 1005948:	8c67e404 	addi	r17,r17,-24688
 100594c:	8080004c 	andi	r2,r16,1
 1005950:	1005003a 	cmpeq	r2,r2,zero
 1005954:	1000081e 	bne	r2,zero,1005978 <_dtoa_r+0xd50>
 1005958:	89800017 	ldw	r6,0(r17)
 100595c:	89c00117 	ldw	r7,4(r17)
 1005960:	480b883a 	mov	r5,r9
 1005964:	4009883a 	mov	r4,r8
 1005968:	100ae480 	call	100ae48 <__muldf3>
 100596c:	1011883a 	mov	r8,r2
 1005970:	b5800044 	addi	r22,r22,1
 1005974:	1813883a 	mov	r9,r3
 1005978:	8021d07a 	srai	r16,r16,1
 100597c:	8c400204 	addi	r17,r17,8
 1005980:	803ff21e 	bne	r16,zero,100594c <_dtoa_r+0xd24>
 1005984:	4029883a 	mov	r20,r8
 1005988:	482b883a 	mov	r21,r9
 100598c:	003dca06 	br	10050b8 <_dtoa_r+0x490>
 1005990:	d9000817 	ldw	r4,32(sp)
 1005994:	2005003a 	cmpeq	r2,r4,zero
 1005998:	1001f61e 	bne	r2,zero,1006174 <_dtoa_r+0x154c>
 100599c:	dc001117 	ldw	r16,68(sp)
 10059a0:	dc801017 	ldw	r18,64(sp)
 10059a4:	18c10cc4 	addi	r3,r3,1075
 10059a8:	003f6106 	br	1005730 <_dtoa_r+0xb08>
 10059ac:	d8000b15 	stw	zero,44(sp)
 10059b0:	d9802617 	ldw	r6,152(sp)
 10059b4:	d8c00d17 	ldw	r3,52(sp)
 10059b8:	30800044 	addi	r2,r6,1
 10059bc:	18ad883a 	add	r22,r3,r2
 10059c0:	b13fffc4 	addi	r4,r22,-1
 10059c4:	d9000e15 	stw	r4,56(sp)
 10059c8:	0581f60e 	bge	zero,r22,10061a4 <_dtoa_r+0x157c>
 10059cc:	dd800f15 	stw	r22,60(sp)
 10059d0:	003f3006 	br	1005694 <_dtoa_r+0xa6c>
 10059d4:	d8000b15 	stw	zero,44(sp)
 10059d8:	d9002617 	ldw	r4,152(sp)
 10059dc:	0101eb0e 	bge	zero,r4,100618c <_dtoa_r+0x1564>
 10059e0:	202d883a 	mov	r22,r4
 10059e4:	d9000e15 	stw	r4,56(sp)
 10059e8:	d9000f15 	stw	r4,60(sp)
 10059ec:	003f2906 	br	1005694 <_dtoa_r+0xa6c>
 10059f0:	01800044 	movi	r6,1
 10059f4:	d9800b15 	stw	r6,44(sp)
 10059f8:	003ff706 	br	10059d8 <_dtoa_r+0xdb0>
 10059fc:	01000044 	movi	r4,1
 1005a00:	d9000b15 	stw	r4,44(sp)
 1005a04:	003fea06 	br	10059b0 <_dtoa_r+0xd88>
 1005a08:	04000c0e 	bge	zero,r16,1005a3c <_dtoa_r+0xe14>
 1005a0c:	d9400717 	ldw	r5,28(sp)
 1005a10:	d9001617 	ldw	r4,88(sp)
 1005a14:	01800044 	movi	r6,1
 1005a18:	10089600 	call	1008960 <__lshift>
 1005a1c:	1009883a 	mov	r4,r2
 1005a20:	900b883a 	mov	r5,r18
 1005a24:	d8800715 	stw	r2,28(sp)
 1005a28:	10080fc0 	call	10080fc <__mcmp>
 1005a2c:	0081e00e 	bge	zero,r2,10061b0 <_dtoa_r+0x1588>
 1005a30:	bdc00044 	addi	r23,r23,1
 1005a34:	00800e84 	movi	r2,58
 1005a38:	b881a226 	beq	r23,r2,10060c4 <_dtoa_r+0x149c>
 1005a3c:	b7000044 	addi	fp,r22,1
 1005a40:	b5c00005 	stb	r23,0(r22)
 1005a44:	003f7406 	br	1005818 <_dtoa_r+0xbf0>
 1005a48:	00800e44 	movi	r2,57
 1005a4c:	b8819d26 	beq	r23,r2,10060c4 <_dtoa_r+0x149c>
 1005a50:	053ffa0e 	bge	zero,r20,1005a3c <_dtoa_r+0xe14>
 1005a54:	8dc00c44 	addi	r23,r17,49
 1005a58:	003ff806 	br	1005a3c <_dtoa_r+0xe14>
 1005a5c:	d9001617 	ldw	r4,88(sp)
 1005a60:	a80b883a 	mov	r5,r21
 1005a64:	04000044 	movi	r16,1
 1005a68:	1007f7c0 	call	1007f7c <_Bfree>
 1005a6c:	003edf06 	br	10055ec <_dtoa_r+0x9c4>
 1005a70:	d9001617 	ldw	r4,88(sp)
 1005a74:	980b883a 	mov	r5,r19
 1005a78:	01800284 	movi	r6,10
 1005a7c:	000f883a 	mov	r7,zero
 1005a80:	1008d600 	call	1008d60 <__multadd>
 1005a84:	1027883a 	mov	r19,r2
 1005a88:	d8800615 	stw	r2,24(sp)
 1005a8c:	003ebb06 	br	100557c <_dtoa_r+0x954>
 1005a90:	d9801117 	ldw	r6,68(sp)
 1005a94:	d8800d17 	ldw	r2,52(sp)
 1005a98:	d8000915 	stw	zero,36(sp)
 1005a9c:	308dc83a 	sub	r6,r6,r2
 1005aa0:	0087c83a 	sub	r3,zero,r2
 1005aa4:	d9801115 	stw	r6,68(sp)
 1005aa8:	d8c01015 	stw	r3,64(sp)
 1005aac:	003cfe06 	br	1004ea8 <_dtoa_r+0x280>
 1005ab0:	018dc83a 	sub	r6,zero,r6
 1005ab4:	d9801115 	stw	r6,68(sp)
 1005ab8:	d8000a15 	stw	zero,40(sp)
 1005abc:	003cf306 	br	1004e8c <_dtoa_r+0x264>
 1005ac0:	d9000d17 	ldw	r4,52(sp)
 1005ac4:	100b4fc0 	call	100b4fc <__floatsidf>
 1005ac8:	880b883a 	mov	r5,r17
 1005acc:	8009883a 	mov	r4,r16
 1005ad0:	180f883a 	mov	r7,r3
 1005ad4:	100d883a 	mov	r6,r2
 1005ad8:	100b2ac0 	call	100b2ac <__nedf2>
 1005adc:	103ce126 	beq	r2,zero,1004e64 <_dtoa_r+0x23c>
 1005ae0:	d9800d17 	ldw	r6,52(sp)
 1005ae4:	31bfffc4 	addi	r6,r6,-1
 1005ae8:	d9800d15 	stw	r6,52(sp)
 1005aec:	003cdd06 	br	1004e64 <_dtoa_r+0x23c>
 1005af0:	d9000717 	ldw	r4,28(sp)
 1005af4:	900b883a 	mov	r5,r18
 1005af8:	10080fc0 	call	10080fc <__mcmp>
 1005afc:	103e8d0e 	bge	r2,zero,1005534 <_dtoa_r+0x90c>
 1005b00:	d9400717 	ldw	r5,28(sp)
 1005b04:	d9001617 	ldw	r4,88(sp)
 1005b08:	01800284 	movi	r6,10
 1005b0c:	000f883a 	mov	r7,zero
 1005b10:	1008d600 	call	1008d60 <__multadd>
 1005b14:	d9800d17 	ldw	r6,52(sp)
 1005b18:	d8800715 	stw	r2,28(sp)
 1005b1c:	31bfffc4 	addi	r6,r6,-1
 1005b20:	d9800d15 	stw	r6,52(sp)
 1005b24:	b001a71e 	bne	r22,zero,10061c4 <_dtoa_r+0x159c>
 1005b28:	d8800e17 	ldw	r2,56(sp)
 1005b2c:	d8800f15 	stw	r2,60(sp)
 1005b30:	003e8006 	br	1005534 <_dtoa_r+0x90c>
 1005b34:	90800417 	ldw	r2,16(r18)
 1005b38:	1085883a 	add	r2,r2,r2
 1005b3c:	1085883a 	add	r2,r2,r2
 1005b40:	1485883a 	add	r2,r2,r18
 1005b44:	11000417 	ldw	r4,16(r2)
 1005b48:	1007fb00 	call	1007fb0 <__hi0bits>
 1005b4c:	00c00804 	movi	r3,32
 1005b50:	1887c83a 	sub	r3,r3,r2
 1005b54:	003e5a06 	br	10054c0 <_dtoa_r+0x898>
 1005b58:	d9400717 	ldw	r5,28(sp)
 1005b5c:	d9801017 	ldw	r6,64(sp)
 1005b60:	d9001617 	ldw	r4,88(sp)
 1005b64:	1008e980 	call	1008e98 <__pow5mult>
 1005b68:	d8800715 	stw	r2,28(sp)
 1005b6c:	003e4306 	br	100547c <_dtoa_r+0x854>
 1005b70:	d9800f17 	ldw	r6,60(sp)
 1005b74:	d8800d17 	ldw	r2,52(sp)
 1005b78:	d9800315 	stw	r6,12(sp)
 1005b7c:	d8800415 	stw	r2,16(sp)
 1005b80:	d8c00b17 	ldw	r3,44(sp)
 1005b84:	1805003a 	cmpeq	r2,r3,zero
 1005b88:	1000e21e 	bne	r2,zero,1005f14 <_dtoa_r+0x12ec>
 1005b8c:	d9000317 	ldw	r4,12(sp)
 1005b90:	0005883a 	mov	r2,zero
 1005b94:	00cff834 	movhi	r3,16352
 1005b98:	200c90fa 	slli	r6,r4,3
 1005b9c:	010040b4 	movhi	r4,258
 1005ba0:	2127b204 	addi	r4,r4,-24888
 1005ba4:	180b883a 	mov	r5,r3
 1005ba8:	310d883a 	add	r6,r6,r4
 1005bac:	327fff17 	ldw	r9,-4(r6)
 1005bb0:	323ffe17 	ldw	r8,-8(r6)
 1005bb4:	1009883a 	mov	r4,r2
 1005bb8:	480f883a 	mov	r7,r9
 1005bbc:	400d883a 	mov	r6,r8
 1005bc0:	1001c540 	call	1001c54 <__divdf3>
 1005bc4:	180b883a 	mov	r5,r3
 1005bc8:	b00d883a 	mov	r6,r22
 1005bcc:	b80f883a 	mov	r7,r23
 1005bd0:	1009883a 	mov	r4,r2
 1005bd4:	100ad3c0 	call	100ad3c <__subdf3>
 1005bd8:	a80b883a 	mov	r5,r21
 1005bdc:	a009883a 	mov	r4,r20
 1005be0:	d8c01915 	stw	r3,100(sp)
 1005be4:	d8801815 	stw	r2,96(sp)
 1005be8:	100b6000 	call	100b600 <__fixdfsi>
 1005bec:	1009883a 	mov	r4,r2
 1005bf0:	1027883a 	mov	r19,r2
 1005bf4:	100b4fc0 	call	100b4fc <__floatsidf>
 1005bf8:	a80b883a 	mov	r5,r21
 1005bfc:	a009883a 	mov	r4,r20
 1005c00:	180f883a 	mov	r7,r3
 1005c04:	100d883a 	mov	r6,r2
 1005c08:	100ad3c0 	call	100ad3c <__subdf3>
 1005c0c:	d9801817 	ldw	r6,96(sp)
 1005c10:	1823883a 	mov	r17,r3
 1005c14:	d8801415 	stw	r2,80(sp)
 1005c18:	302d883a 	mov	r22,r6
 1005c1c:	d9800517 	ldw	r6,20(sp)
 1005c20:	9cc00c04 	addi	r19,r19,48
 1005c24:	dc401515 	stw	r17,84(sp)
 1005c28:	d8c01917 	ldw	r3,100(sp)
 1005c2c:	34c00005 	stb	r19,0(r6)
 1005c30:	d8800517 	ldw	r2,20(sp)
 1005c34:	d9401917 	ldw	r5,100(sp)
 1005c38:	d9801417 	ldw	r6,80(sp)
 1005c3c:	b009883a 	mov	r4,r22
 1005c40:	880f883a 	mov	r7,r17
 1005c44:	182f883a 	mov	r23,r3
 1005c48:	17000044 	addi	fp,r2,1
 1005c4c:	100b3400 	call	100b340 <__gtdf2>
 1005c50:	00804e16 	blt	zero,r2,1005d8c <_dtoa_r+0x1164>
 1005c54:	d9801417 	ldw	r6,80(sp)
 1005c58:	0005883a 	mov	r2,zero
 1005c5c:	00cffc34 	movhi	r3,16368
 1005c60:	180b883a 	mov	r5,r3
 1005c64:	880f883a 	mov	r7,r17
 1005c68:	1009883a 	mov	r4,r2
 1005c6c:	100ad3c0 	call	100ad3c <__subdf3>
 1005c70:	d9401917 	ldw	r5,100(sp)
 1005c74:	180f883a 	mov	r7,r3
 1005c78:	b009883a 	mov	r4,r22
 1005c7c:	100d883a 	mov	r6,r2
 1005c80:	100b3400 	call	100b340 <__gtdf2>
 1005c84:	00bda216 	blt	zero,r2,1005310 <_dtoa_r+0x6e8>
 1005c88:	d8c00317 	ldw	r3,12(sp)
 1005c8c:	00800044 	movi	r2,1
 1005c90:	10c01216 	blt	r2,r3,1005cdc <_dtoa_r+0x10b4>
 1005c94:	003d4506 	br	10051ac <_dtoa_r+0x584>
 1005c98:	d9801417 	ldw	r6,80(sp)
 1005c9c:	0005883a 	mov	r2,zero
 1005ca0:	00cffc34 	movhi	r3,16368
 1005ca4:	180b883a 	mov	r5,r3
 1005ca8:	880f883a 	mov	r7,r17
 1005cac:	1009883a 	mov	r4,r2
 1005cb0:	100ad3c0 	call	100ad3c <__subdf3>
 1005cb4:	d9c01b17 	ldw	r7,108(sp)
 1005cb8:	180b883a 	mov	r5,r3
 1005cbc:	1009883a 	mov	r4,r2
 1005cc0:	b00d883a 	mov	r6,r22
 1005cc4:	100b4680 	call	100b468 <__ltdf2>
 1005cc8:	103d9116 	blt	r2,zero,1005310 <_dtoa_r+0x6e8>
 1005ccc:	d9800517 	ldw	r6,20(sp)
 1005cd0:	d9000317 	ldw	r4,12(sp)
 1005cd4:	3105883a 	add	r2,r6,r4
 1005cd8:	e0bd3426 	beq	fp,r2,10051ac <_dtoa_r+0x584>
 1005cdc:	04500934 	movhi	r17,16420
 1005ce0:	0021883a 	mov	r16,zero
 1005ce4:	b80b883a 	mov	r5,r23
 1005ce8:	b009883a 	mov	r4,r22
 1005cec:	800d883a 	mov	r6,r16
 1005cf0:	880f883a 	mov	r7,r17
 1005cf4:	100ae480 	call	100ae48 <__muldf3>
 1005cf8:	d9401517 	ldw	r5,84(sp)
 1005cfc:	d9001417 	ldw	r4,80(sp)
 1005d00:	880f883a 	mov	r7,r17
 1005d04:	000d883a 	mov	r6,zero
 1005d08:	d8801a15 	stw	r2,104(sp)
 1005d0c:	d8c01b15 	stw	r3,108(sp)
 1005d10:	100ae480 	call	100ae48 <__muldf3>
 1005d14:	180b883a 	mov	r5,r3
 1005d18:	1009883a 	mov	r4,r2
 1005d1c:	1823883a 	mov	r17,r3
 1005d20:	1021883a 	mov	r16,r2
 1005d24:	100b6000 	call	100b600 <__fixdfsi>
 1005d28:	1009883a 	mov	r4,r2
 1005d2c:	102b883a 	mov	r21,r2
 1005d30:	100b4fc0 	call	100b4fc <__floatsidf>
 1005d34:	880b883a 	mov	r5,r17
 1005d38:	8009883a 	mov	r4,r16
 1005d3c:	180f883a 	mov	r7,r3
 1005d40:	100d883a 	mov	r6,r2
 1005d44:	100ad3c0 	call	100ad3c <__subdf3>
 1005d48:	1021883a 	mov	r16,r2
 1005d4c:	d9001b17 	ldw	r4,108(sp)
 1005d50:	1823883a 	mov	r17,r3
 1005d54:	dc001415 	stw	r16,80(sp)
 1005d58:	ad400c04 	addi	r21,r21,48
 1005d5c:	dc401515 	stw	r17,84(sp)
 1005d60:	d8801a17 	ldw	r2,104(sp)
 1005d64:	e5400005 	stb	r21,0(fp)
 1005d68:	202f883a 	mov	r23,r4
 1005d6c:	d9c01b17 	ldw	r7,108(sp)
 1005d70:	d9001417 	ldw	r4,80(sp)
 1005d74:	880b883a 	mov	r5,r17
 1005d78:	100d883a 	mov	r6,r2
 1005d7c:	102d883a 	mov	r22,r2
 1005d80:	e7000044 	addi	fp,fp,1
 1005d84:	100b4680 	call	100b468 <__ltdf2>
 1005d88:	103fc30e 	bge	r2,zero,1005c98 <_dtoa_r+0x1070>
 1005d8c:	d9000417 	ldw	r4,16(sp)
 1005d90:	d9000d15 	stw	r4,52(sp)
 1005d94:	003d7106 	br	100535c <_dtoa_r+0x734>
 1005d98:	d9801717 	ldw	r6,92(sp)
 1005d9c:	00800084 	movi	r2,2
 1005da0:	11bde60e 	bge	r2,r6,100553c <_dtoa_r+0x914>
 1005da4:	203cfb1e 	bne	r4,zero,1005194 <_dtoa_r+0x56c>
 1005da8:	d9001617 	ldw	r4,88(sp)
 1005dac:	900b883a 	mov	r5,r18
 1005db0:	01800144 	movi	r6,5
 1005db4:	000f883a 	mov	r7,zero
 1005db8:	1008d600 	call	1008d60 <__multadd>
 1005dbc:	d9000717 	ldw	r4,28(sp)
 1005dc0:	100b883a 	mov	r5,r2
 1005dc4:	1025883a 	mov	r18,r2
 1005dc8:	10080fc0 	call	10080fc <__mcmp>
 1005dcc:	00bcf10e 	bge	zero,r2,1005194 <_dtoa_r+0x56c>
 1005dd0:	d8c00d17 	ldw	r3,52(sp)
 1005dd4:	d9000517 	ldw	r4,20(sp)
 1005dd8:	d8000615 	stw	zero,24(sp)
 1005ddc:	18c00044 	addi	r3,r3,1
 1005de0:	d8c00d15 	stw	r3,52(sp)
 1005de4:	00800c44 	movi	r2,49
 1005de8:	27000044 	addi	fp,r4,1
 1005dec:	20800005 	stb	r2,0(r4)
 1005df0:	003e8906 	br	1005818 <_dtoa_r+0xbf0>
 1005df4:	d8c00517 	ldw	r3,20(sp)
 1005df8:	003bc206 	br	1004d04 <_dtoa_r+0xdc>
 1005dfc:	018040b4 	movhi	r6,258
 1005e00:	31a7e404 	addi	r6,r6,-24688
 1005e04:	30c00917 	ldw	r3,36(r6)
 1005e08:	30800817 	ldw	r2,32(r6)
 1005e0c:	d9001217 	ldw	r4,72(sp)
 1005e10:	d9401317 	ldw	r5,76(sp)
 1005e14:	180f883a 	mov	r7,r3
 1005e18:	100d883a 	mov	r6,r2
 1005e1c:	1001c540 	call	1001c54 <__divdf3>
 1005e20:	948003cc 	andi	r18,r18,15
 1005e24:	058000c4 	movi	r22,3
 1005e28:	1029883a 	mov	r20,r2
 1005e2c:	182b883a 	mov	r21,r3
 1005e30:	003c8906 	br	1005058 <_dtoa_r+0x430>
 1005e34:	d9001017 	ldw	r4,64(sp)
 1005e38:	d9800917 	ldw	r6,36(sp)
 1005e3c:	0025883a 	mov	r18,zero
 1005e40:	1105c83a 	sub	r2,r2,r4
 1005e44:	2089883a 	add	r4,r4,r2
 1005e48:	308d883a 	add	r6,r6,r2
 1005e4c:	d9001015 	stw	r4,64(sp)
 1005e50:	d9800915 	stw	r6,36(sp)
 1005e54:	003e3206 	br	1005720 <_dtoa_r+0xaf8>
 1005e58:	28800044 	addi	r2,r5,1
 1005e5c:	27000044 	addi	fp,r4,1
 1005e60:	20800005 	stb	r2,0(r4)
 1005e64:	003e6c06 	br	1005818 <_dtoa_r+0xbf0>
 1005e68:	d8800f17 	ldw	r2,60(sp)
 1005e6c:	00bce016 	blt	zero,r2,10051f0 <_dtoa_r+0x5c8>
 1005e70:	d9800f17 	ldw	r6,60(sp)
 1005e74:	303cc51e 	bne	r6,zero,100518c <_dtoa_r+0x564>
 1005e78:	0005883a 	mov	r2,zero
 1005e7c:	00d00534 	movhi	r3,16404
 1005e80:	980b883a 	mov	r5,r19
 1005e84:	180f883a 	mov	r7,r3
 1005e88:	9009883a 	mov	r4,r18
 1005e8c:	100d883a 	mov	r6,r2
 1005e90:	100ae480 	call	100ae48 <__muldf3>
 1005e94:	180b883a 	mov	r5,r3
 1005e98:	a80f883a 	mov	r7,r21
 1005e9c:	1009883a 	mov	r4,r2
 1005ea0:	a00d883a 	mov	r6,r20
 1005ea4:	100b3d40 	call	100b3d4 <__gedf2>
 1005ea8:	103cb80e 	bge	r2,zero,100518c <_dtoa_r+0x564>
 1005eac:	0027883a 	mov	r19,zero
 1005eb0:	0025883a 	mov	r18,zero
 1005eb4:	003fc606 	br	1005dd0 <_dtoa_r+0x11a8>
 1005eb8:	99400117 	ldw	r5,4(r19)
 1005ebc:	d9001617 	ldw	r4,88(sp)
 1005ec0:	10085780 	call	1008578 <_Balloc>
 1005ec4:	99800417 	ldw	r6,16(r19)
 1005ec8:	11000304 	addi	r4,r2,12
 1005ecc:	99400304 	addi	r5,r19,12
 1005ed0:	318d883a 	add	r6,r6,r6
 1005ed4:	318d883a 	add	r6,r6,r6
 1005ed8:	31800204 	addi	r6,r6,8
 1005edc:	1023883a 	mov	r17,r2
 1005ee0:	1007d400 	call	1007d40 <memcpy>
 1005ee4:	d9001617 	ldw	r4,88(sp)
 1005ee8:	880b883a 	mov	r5,r17
 1005eec:	01800044 	movi	r6,1
 1005ef0:	10089600 	call	1008960 <__lshift>
 1005ef4:	100b883a 	mov	r5,r2
 1005ef8:	003d9c06 	br	100556c <_dtoa_r+0x944>
 1005efc:	00800e44 	movi	r2,57
 1005f00:	b8807026 	beq	r23,r2,10060c4 <_dtoa_r+0x149c>
 1005f04:	b8800044 	addi	r2,r23,1
 1005f08:	b7000044 	addi	fp,r22,1
 1005f0c:	b0800005 	stb	r2,0(r22)
 1005f10:	003e4106 	br	1005818 <_dtoa_r+0xbf0>
 1005f14:	d8800317 	ldw	r2,12(sp)
 1005f18:	018040b4 	movhi	r6,258
 1005f1c:	31a7b204 	addi	r6,r6,-24888
 1005f20:	b009883a 	mov	r4,r22
 1005f24:	100e90fa 	slli	r7,r2,3
 1005f28:	b80b883a 	mov	r5,r23
 1005f2c:	398f883a 	add	r7,r7,r6
 1005f30:	38bffe17 	ldw	r2,-8(r7)
 1005f34:	d9800517 	ldw	r6,20(sp)
 1005f38:	38ffff17 	ldw	r3,-4(r7)
 1005f3c:	37000044 	addi	fp,r6,1
 1005f40:	180f883a 	mov	r7,r3
 1005f44:	100d883a 	mov	r6,r2
 1005f48:	100ae480 	call	100ae48 <__muldf3>
 1005f4c:	a80b883a 	mov	r5,r21
 1005f50:	a009883a 	mov	r4,r20
 1005f54:	182f883a 	mov	r23,r3
 1005f58:	102d883a 	mov	r22,r2
 1005f5c:	100b6000 	call	100b600 <__fixdfsi>
 1005f60:	1009883a 	mov	r4,r2
 1005f64:	1027883a 	mov	r19,r2
 1005f68:	100b4fc0 	call	100b4fc <__floatsidf>
 1005f6c:	a80b883a 	mov	r5,r21
 1005f70:	a009883a 	mov	r4,r20
 1005f74:	180f883a 	mov	r7,r3
 1005f78:	100d883a 	mov	r6,r2
 1005f7c:	100ad3c0 	call	100ad3c <__subdf3>
 1005f80:	180b883a 	mov	r5,r3
 1005f84:	d8c00517 	ldw	r3,20(sp)
 1005f88:	9cc00c04 	addi	r19,r19,48
 1005f8c:	1009883a 	mov	r4,r2
 1005f90:	1cc00005 	stb	r19,0(r3)
 1005f94:	2021883a 	mov	r16,r4
 1005f98:	d9000317 	ldw	r4,12(sp)
 1005f9c:	00800044 	movi	r2,1
 1005fa0:	2823883a 	mov	r17,r5
 1005fa4:	20802226 	beq	r4,r2,1006030 <_dtoa_r+0x1408>
 1005fa8:	1029883a 	mov	r20,r2
 1005fac:	0005883a 	mov	r2,zero
 1005fb0:	00d00934 	movhi	r3,16420
 1005fb4:	180f883a 	mov	r7,r3
 1005fb8:	100d883a 	mov	r6,r2
 1005fbc:	880b883a 	mov	r5,r17
 1005fc0:	8009883a 	mov	r4,r16
 1005fc4:	100ae480 	call	100ae48 <__muldf3>
 1005fc8:	180b883a 	mov	r5,r3
 1005fcc:	1009883a 	mov	r4,r2
 1005fd0:	1823883a 	mov	r17,r3
 1005fd4:	1021883a 	mov	r16,r2
 1005fd8:	100b6000 	call	100b600 <__fixdfsi>
 1005fdc:	1009883a 	mov	r4,r2
 1005fe0:	102b883a 	mov	r21,r2
 1005fe4:	100b4fc0 	call	100b4fc <__floatsidf>
 1005fe8:	880b883a 	mov	r5,r17
 1005fec:	8009883a 	mov	r4,r16
 1005ff0:	180f883a 	mov	r7,r3
 1005ff4:	100d883a 	mov	r6,r2
 1005ff8:	100ad3c0 	call	100ad3c <__subdf3>
 1005ffc:	180b883a 	mov	r5,r3
 1006000:	d8c00517 	ldw	r3,20(sp)
 1006004:	1009883a 	mov	r4,r2
 1006008:	ad400c04 	addi	r21,r21,48
 100600c:	1d05883a 	add	r2,r3,r20
 1006010:	15400005 	stb	r21,0(r2)
 1006014:	2021883a 	mov	r16,r4
 1006018:	d9000317 	ldw	r4,12(sp)
 100601c:	a5000044 	addi	r20,r20,1
 1006020:	2823883a 	mov	r17,r5
 1006024:	a13fe11e 	bne	r20,r4,1005fac <_dtoa_r+0x1384>
 1006028:	e505883a 	add	r2,fp,r20
 100602c:	173fffc4 	addi	fp,r2,-1
 1006030:	0025883a 	mov	r18,zero
 1006034:	04cff834 	movhi	r19,16352
 1006038:	b009883a 	mov	r4,r22
 100603c:	b80b883a 	mov	r5,r23
 1006040:	900d883a 	mov	r6,r18
 1006044:	980f883a 	mov	r7,r19
 1006048:	100adc80 	call	100adc8 <__adddf3>
 100604c:	180b883a 	mov	r5,r3
 1006050:	1009883a 	mov	r4,r2
 1006054:	800d883a 	mov	r6,r16
 1006058:	880f883a 	mov	r7,r17
 100605c:	100b4680 	call	100b468 <__ltdf2>
 1006060:	103cab16 	blt	r2,zero,1005310 <_dtoa_r+0x6e8>
 1006064:	0009883a 	mov	r4,zero
 1006068:	980b883a 	mov	r5,r19
 100606c:	b80f883a 	mov	r7,r23
 1006070:	b00d883a 	mov	r6,r22
 1006074:	100ad3c0 	call	100ad3c <__subdf3>
 1006078:	180b883a 	mov	r5,r3
 100607c:	880f883a 	mov	r7,r17
 1006080:	1009883a 	mov	r4,r2
 1006084:	800d883a 	mov	r6,r16
 1006088:	100b3400 	call	100b340 <__gtdf2>
 100608c:	00bc470e 	bge	zero,r2,10051ac <_dtoa_r+0x584>
 1006090:	00c00c04 	movi	r3,48
 1006094:	e73fffc4 	addi	fp,fp,-1
 1006098:	e0800007 	ldb	r2,0(fp)
 100609c:	10fffd26 	beq	r2,r3,1006094 <_dtoa_r+0x146c>
 10060a0:	d9800417 	ldw	r6,16(sp)
 10060a4:	e7000044 	addi	fp,fp,1
 10060a8:	d9800d15 	stw	r6,52(sp)
 10060ac:	003cab06 	br	100535c <_dtoa_r+0x734>
 10060b0:	d8c00f17 	ldw	r3,60(sp)
 10060b4:	d9001117 	ldw	r4,68(sp)
 10060b8:	20e1c83a 	sub	r16,r4,r3
 10060bc:	0007883a 	mov	r3,zero
 10060c0:	003d9b06 	br	1005730 <_dtoa_r+0xb08>
 10060c4:	00800e44 	movi	r2,57
 10060c8:	b0800005 	stb	r2,0(r22)
 10060cc:	b5800044 	addi	r22,r22,1
 10060d0:	003dc106 	br	10057d8 <_dtoa_r+0xbb0>
 10060d4:	05800084 	movi	r22,2
 10060d8:	003bf706 	br	10050b8 <_dtoa_r+0x490>
 10060dc:	d9000f17 	ldw	r4,60(sp)
 10060e0:	013c000e 	bge	zero,r4,10050e4 <_dtoa_r+0x4bc>
 10060e4:	d9800e17 	ldw	r6,56(sp)
 10060e8:	01bc300e 	bge	zero,r6,10051ac <_dtoa_r+0x584>
 10060ec:	0005883a 	mov	r2,zero
 10060f0:	00d00934 	movhi	r3,16420
 10060f4:	a80b883a 	mov	r5,r21
 10060f8:	180f883a 	mov	r7,r3
 10060fc:	a009883a 	mov	r4,r20
 1006100:	100d883a 	mov	r6,r2
 1006104:	100ae480 	call	100ae48 <__muldf3>
 1006108:	b1000044 	addi	r4,r22,1
 100610c:	1021883a 	mov	r16,r2
 1006110:	1823883a 	mov	r17,r3
 1006114:	100b4fc0 	call	100b4fc <__floatsidf>
 1006118:	880b883a 	mov	r5,r17
 100611c:	8009883a 	mov	r4,r16
 1006120:	180f883a 	mov	r7,r3
 1006124:	100d883a 	mov	r6,r2
 1006128:	100ae480 	call	100ae48 <__muldf3>
 100612c:	0011883a 	mov	r8,zero
 1006130:	02500734 	movhi	r9,16412
 1006134:	180b883a 	mov	r5,r3
 1006138:	480f883a 	mov	r7,r9
 100613c:	1009883a 	mov	r4,r2
 1006140:	400d883a 	mov	r6,r8
 1006144:	100adc80 	call	100adc8 <__adddf3>
 1006148:	102d883a 	mov	r22,r2
 100614c:	00bf3034 	movhi	r2,64704
 1006150:	10ef883a 	add	r23,r2,r3
 1006154:	d8800d17 	ldw	r2,52(sp)
 1006158:	d8c00e17 	ldw	r3,56(sp)
 100615c:	8029883a 	mov	r20,r16
 1006160:	10bfffc4 	addi	r2,r2,-1
 1006164:	882b883a 	mov	r21,r17
 1006168:	d8800415 	stw	r2,16(sp)
 100616c:	d8c00315 	stw	r3,12(sp)
 1006170:	003e8306 	br	1005b80 <_dtoa_r+0xf58>
 1006174:	d8800117 	ldw	r2,4(sp)
 1006178:	dc001117 	ldw	r16,68(sp)
 100617c:	dc801017 	ldw	r18,64(sp)
 1006180:	00c00d84 	movi	r3,54
 1006184:	1887c83a 	sub	r3,r3,r2
 1006188:	003d6906 	br	1005730 <_dtoa_r+0xb08>
 100618c:	01800044 	movi	r6,1
 1006190:	3021883a 	mov	r16,r6
 1006194:	d9800f15 	stw	r6,60(sp)
 1006198:	d9802615 	stw	r6,152(sp)
 100619c:	d9800e15 	stw	r6,56(sp)
 10061a0:	003b9306 	br	1004ff0 <_dtoa_r+0x3c8>
 10061a4:	b021883a 	mov	r16,r22
 10061a8:	dd800f15 	stw	r22,60(sp)
 10061ac:	003b9006 	br	1004ff0 <_dtoa_r+0x3c8>
 10061b0:	103e221e 	bne	r2,zero,1005a3c <_dtoa_r+0xe14>
 10061b4:	b880004c 	andi	r2,r23,1
 10061b8:	1005003a 	cmpeq	r2,r2,zero
 10061bc:	103e1f1e 	bne	r2,zero,1005a3c <_dtoa_r+0xe14>
 10061c0:	003e1b06 	br	1005a30 <_dtoa_r+0xe08>
 10061c4:	d9001617 	ldw	r4,88(sp)
 10061c8:	980b883a 	mov	r5,r19
 10061cc:	01800284 	movi	r6,10
 10061d0:	000f883a 	mov	r7,zero
 10061d4:	1008d600 	call	1008d60 <__multadd>
 10061d8:	d8c00e17 	ldw	r3,56(sp)
 10061dc:	1027883a 	mov	r19,r2
 10061e0:	d8c00f15 	stw	r3,60(sp)
 10061e4:	003cd306 	br	1005534 <_dtoa_r+0x90c>

010061e8 <_fflush_r>:
 10061e8:	f811883a 	mov	r8,ra
 10061ec:	100c1d00 	call	100c1d0 <_mcount>
 10061f0:	403f883a 	mov	ra,r8
 10061f4:	defffb04 	addi	sp,sp,-20
 10061f8:	dfc00415 	stw	ra,16(sp)
 10061fc:	dcc00315 	stw	r19,12(sp)
 1006200:	dc800215 	stw	r18,8(sp)
 1006204:	dc400115 	stw	r17,4(sp)
 1006208:	dc000015 	stw	r16,0(sp)
 100620c:	2027883a 	mov	r19,r4
 1006210:	2825883a 	mov	r18,r5
 1006214:	20000226 	beq	r4,zero,1006220 <_fflush_r+0x38>
 1006218:	20800e17 	ldw	r2,56(r4)
 100621c:	10005626 	beq	r2,zero,1006378 <_fflush_r+0x190>
 1006220:	9100030b 	ldhu	r4,12(r18)
 1006224:	20ffffcc 	andi	r3,r4,65535
 1006228:	18e0001c 	xori	r3,r3,32768
 100622c:	18e00004 	addi	r3,r3,-32768
 1006230:	1880020c 	andi	r2,r3,8
 1006234:	1000261e 	bne	r2,zero,10062d0 <_fflush_r+0xe8>
 1006238:	90c00117 	ldw	r3,4(r18)
 100623c:	20820014 	ori	r2,r4,2048
 1006240:	9080030d 	sth	r2,12(r18)
 1006244:	1009883a 	mov	r4,r2
 1006248:	00c0400e 	bge	zero,r3,100634c <_fflush_r+0x164>
 100624c:	92000a17 	ldw	r8,40(r18)
 1006250:	40004026 	beq	r8,zero,1006354 <_fflush_r+0x16c>
 1006254:	2084000c 	andi	r2,r4,4096
 1006258:	10005326 	beq	r2,zero,10063a8 <_fflush_r+0x1c0>
 100625c:	94001417 	ldw	r16,80(r18)
 1006260:	9080030b 	ldhu	r2,12(r18)
 1006264:	1080010c 	andi	r2,r2,4
 1006268:	1000481e 	bne	r2,zero,100638c <_fflush_r+0x1a4>
 100626c:	91400717 	ldw	r5,28(r18)
 1006270:	9809883a 	mov	r4,r19
 1006274:	800d883a 	mov	r6,r16
 1006278:	000f883a 	mov	r7,zero
 100627c:	403ee83a 	callr	r8
 1006280:	8080261e 	bne	r16,r2,100631c <_fflush_r+0x134>
 1006284:	9080030b 	ldhu	r2,12(r18)
 1006288:	91000417 	ldw	r4,16(r18)
 100628c:	90000115 	stw	zero,4(r18)
 1006290:	10bdffcc 	andi	r2,r2,63487
 1006294:	10ffffcc 	andi	r3,r2,65535
 1006298:	18c4000c 	andi	r3,r3,4096
 100629c:	9080030d 	sth	r2,12(r18)
 10062a0:	91000015 	stw	r4,0(r18)
 10062a4:	18002b26 	beq	r3,zero,1006354 <_fflush_r+0x16c>
 10062a8:	0007883a 	mov	r3,zero
 10062ac:	1805883a 	mov	r2,r3
 10062b0:	94001415 	stw	r16,80(r18)
 10062b4:	dfc00417 	ldw	ra,16(sp)
 10062b8:	dcc00317 	ldw	r19,12(sp)
 10062bc:	dc800217 	ldw	r18,8(sp)
 10062c0:	dc400117 	ldw	r17,4(sp)
 10062c4:	dc000017 	ldw	r16,0(sp)
 10062c8:	dec00504 	addi	sp,sp,20
 10062cc:	f800283a 	ret
 10062d0:	94400417 	ldw	r17,16(r18)
 10062d4:	88001f26 	beq	r17,zero,1006354 <_fflush_r+0x16c>
 10062d8:	90800017 	ldw	r2,0(r18)
 10062dc:	18c000cc 	andi	r3,r3,3
 10062e0:	94400015 	stw	r17,0(r18)
 10062e4:	1461c83a 	sub	r16,r2,r17
 10062e8:	18002526 	beq	r3,zero,1006380 <_fflush_r+0x198>
 10062ec:	0005883a 	mov	r2,zero
 10062f0:	90800215 	stw	r2,8(r18)
 10062f4:	0400170e 	bge	zero,r16,1006354 <_fflush_r+0x16c>
 10062f8:	90c00917 	ldw	r3,36(r18)
 10062fc:	91400717 	ldw	r5,28(r18)
 1006300:	880d883a 	mov	r6,r17
 1006304:	800f883a 	mov	r7,r16
 1006308:	9809883a 	mov	r4,r19
 100630c:	183ee83a 	callr	r3
 1006310:	88a3883a 	add	r17,r17,r2
 1006314:	80a1c83a 	sub	r16,r16,r2
 1006318:	00bff616 	blt	zero,r2,10062f4 <_fflush_r+0x10c>
 100631c:	9080030b 	ldhu	r2,12(r18)
 1006320:	00ffffc4 	movi	r3,-1
 1006324:	10801014 	ori	r2,r2,64
 1006328:	9080030d 	sth	r2,12(r18)
 100632c:	1805883a 	mov	r2,r3
 1006330:	dfc00417 	ldw	ra,16(sp)
 1006334:	dcc00317 	ldw	r19,12(sp)
 1006338:	dc800217 	ldw	r18,8(sp)
 100633c:	dc400117 	ldw	r17,4(sp)
 1006340:	dc000017 	ldw	r16,0(sp)
 1006344:	dec00504 	addi	sp,sp,20
 1006348:	f800283a 	ret
 100634c:	90800f17 	ldw	r2,60(r18)
 1006350:	00bfbe16 	blt	zero,r2,100624c <_fflush_r+0x64>
 1006354:	0007883a 	mov	r3,zero
 1006358:	1805883a 	mov	r2,r3
 100635c:	dfc00417 	ldw	ra,16(sp)
 1006360:	dcc00317 	ldw	r19,12(sp)
 1006364:	dc800217 	ldw	r18,8(sp)
 1006368:	dc400117 	ldw	r17,4(sp)
 100636c:	dc000017 	ldw	r16,0(sp)
 1006370:	dec00504 	addi	sp,sp,20
 1006374:	f800283a 	ret
 1006378:	10064d40 	call	10064d4 <__sinit>
 100637c:	003fa806 	br	1006220 <_fflush_r+0x38>
 1006380:	90800517 	ldw	r2,20(r18)
 1006384:	90800215 	stw	r2,8(r18)
 1006388:	003fda06 	br	10062f4 <_fflush_r+0x10c>
 100638c:	90800117 	ldw	r2,4(r18)
 1006390:	90c00c17 	ldw	r3,48(r18)
 1006394:	80a1c83a 	sub	r16,r16,r2
 1006398:	183fb426 	beq	r3,zero,100626c <_fflush_r+0x84>
 100639c:	90800f17 	ldw	r2,60(r18)
 10063a0:	80a1c83a 	sub	r16,r16,r2
 10063a4:	003fb106 	br	100626c <_fflush_r+0x84>
 10063a8:	91400717 	ldw	r5,28(r18)
 10063ac:	9809883a 	mov	r4,r19
 10063b0:	000d883a 	mov	r6,zero
 10063b4:	01c00044 	movi	r7,1
 10063b8:	403ee83a 	callr	r8
 10063bc:	1021883a 	mov	r16,r2
 10063c0:	00bfffc4 	movi	r2,-1
 10063c4:	80800226 	beq	r16,r2,10063d0 <_fflush_r+0x1e8>
 10063c8:	92000a17 	ldw	r8,40(r18)
 10063cc:	003fa406 	br	1006260 <_fflush_r+0x78>
 10063d0:	98c00017 	ldw	r3,0(r19)
 10063d4:	00800744 	movi	r2,29
 10063d8:	18bfde26 	beq	r3,r2,1006354 <_fflush_r+0x16c>
 10063dc:	9080030b 	ldhu	r2,12(r18)
 10063e0:	8007883a 	mov	r3,r16
 10063e4:	10801014 	ori	r2,r2,64
 10063e8:	9080030d 	sth	r2,12(r18)
 10063ec:	003fcf06 	br	100632c <_fflush_r+0x144>

010063f0 <fflush>:
 10063f0:	f811883a 	mov	r8,ra
 10063f4:	100c1d00 	call	100c1d0 <_mcount>
 10063f8:	403f883a 	mov	ra,r8
 10063fc:	01404034 	movhi	r5,256
 1006400:	29587a04 	addi	r5,r5,25064
 1006404:	2007883a 	mov	r3,r4
 1006408:	20000526 	beq	r4,zero,1006420 <fflush+0x30>
 100640c:	008040b4 	movhi	r2,258
 1006410:	109f9804 	addi	r2,r2,32352
 1006414:	11000017 	ldw	r4,0(r2)
 1006418:	180b883a 	mov	r5,r3
 100641c:	10061e81 	jmpi	10061e8 <_fflush_r>
 1006420:	008040b4 	movhi	r2,258
 1006424:	109f9904 	addi	r2,r2,32356
 1006428:	11000017 	ldw	r4,0(r2)
 100642c:	10070cc1 	jmpi	10070cc <_fwalk_reent>

01006430 <std>:
 1006430:	f811883a 	mov	r8,ra
 1006434:	100c1d00 	call	100c1d0 <_mcount>
 1006438:	403f883a 	mov	ra,r8
 100643c:	00804074 	movhi	r2,257
 1006440:	10a67e04 	addi	r2,r2,-26120
 1006444:	20800b15 	stw	r2,44(r4)
 1006448:	00804074 	movhi	r2,257
 100644c:	10a6c204 	addi	r2,r2,-25848
 1006450:	20800815 	stw	r2,32(r4)
 1006454:	00c04074 	movhi	r3,257
 1006458:	18e6a004 	addi	r3,r3,-25984
 100645c:	00804074 	movhi	r2,257
 1006460:	10a68304 	addi	r2,r2,-26100
 1006464:	2140030d 	sth	r5,12(r4)
 1006468:	2180038d 	sth	r6,14(r4)
 100646c:	20c00915 	stw	r3,36(r4)
 1006470:	20800a15 	stw	r2,40(r4)
 1006474:	20000015 	stw	zero,0(r4)
 1006478:	20000115 	stw	zero,4(r4)
 100647c:	20000215 	stw	zero,8(r4)
 1006480:	20000415 	stw	zero,16(r4)
 1006484:	20000515 	stw	zero,20(r4)
 1006488:	20000615 	stw	zero,24(r4)
 100648c:	21000715 	stw	r4,28(r4)
 1006490:	f800283a 	ret

01006494 <__sfp_lock_acquire>:
 1006494:	f811883a 	mov	r8,ra
 1006498:	100c1d00 	call	100c1d0 <_mcount>
 100649c:	403f883a 	mov	ra,r8
 10064a0:	f800283a 	ret

010064a4 <__sfp_lock_release>:
 10064a4:	f811883a 	mov	r8,ra
 10064a8:	100c1d00 	call	100c1d0 <_mcount>
 10064ac:	403f883a 	mov	ra,r8
 10064b0:	f800283a 	ret

010064b4 <__sinit_lock_acquire>:
 10064b4:	f811883a 	mov	r8,ra
 10064b8:	100c1d00 	call	100c1d0 <_mcount>
 10064bc:	403f883a 	mov	ra,r8
 10064c0:	f800283a 	ret

010064c4 <__sinit_lock_release>:
 10064c4:	f811883a 	mov	r8,ra
 10064c8:	100c1d00 	call	100c1d0 <_mcount>
 10064cc:	403f883a 	mov	ra,r8
 10064d0:	f800283a 	ret

010064d4 <__sinit>:
 10064d4:	f811883a 	mov	r8,ra
 10064d8:	100c1d00 	call	100c1d0 <_mcount>
 10064dc:	403f883a 	mov	ra,r8
 10064e0:	defffd04 	addi	sp,sp,-12
 10064e4:	dfc00215 	stw	ra,8(sp)
 10064e8:	dc400115 	stw	r17,4(sp)
 10064ec:	dc000015 	stw	r16,0(sp)
 10064f0:	20800e17 	ldw	r2,56(r4)
 10064f4:	04400044 	movi	r17,1
 10064f8:	01400104 	movi	r5,4
 10064fc:	000d883a 	mov	r6,zero
 1006500:	2021883a 	mov	r16,r4
 1006504:	2200bb04 	addi	r8,r4,748
 1006508:	200f883a 	mov	r7,r4
 100650c:	10000526 	beq	r2,zero,1006524 <__sinit+0x50>
 1006510:	dfc00217 	ldw	ra,8(sp)
 1006514:	dc400117 	ldw	r17,4(sp)
 1006518:	dc000017 	ldw	r16,0(sp)
 100651c:	dec00304 	addi	sp,sp,12
 1006520:	f800283a 	ret
 1006524:	21000117 	ldw	r4,4(r4)
 1006528:	00804034 	movhi	r2,256
 100652c:	10997d04 	addi	r2,r2,26100
 1006530:	00c000c4 	movi	r3,3
 1006534:	80800f15 	stw	r2,60(r16)
 1006538:	80c0b915 	stw	r3,740(r16)
 100653c:	8200ba15 	stw	r8,744(r16)
 1006540:	84400e15 	stw	r17,56(r16)
 1006544:	8000b815 	stw	zero,736(r16)
 1006548:	10064300 	call	1006430 <std>
 100654c:	81000217 	ldw	r4,8(r16)
 1006550:	880d883a 	mov	r6,r17
 1006554:	800f883a 	mov	r7,r16
 1006558:	01400284 	movi	r5,10
 100655c:	10064300 	call	1006430 <std>
 1006560:	81000317 	ldw	r4,12(r16)
 1006564:	800f883a 	mov	r7,r16
 1006568:	01400484 	movi	r5,18
 100656c:	01800084 	movi	r6,2
 1006570:	dfc00217 	ldw	ra,8(sp)
 1006574:	dc400117 	ldw	r17,4(sp)
 1006578:	dc000017 	ldw	r16,0(sp)
 100657c:	dec00304 	addi	sp,sp,12
 1006580:	10064301 	jmpi	1006430 <std>

01006584 <__fp_lock>:
 1006584:	f811883a 	mov	r8,ra
 1006588:	100c1d00 	call	100c1d0 <_mcount>
 100658c:	403f883a 	mov	ra,r8
 1006590:	0005883a 	mov	r2,zero
 1006594:	f800283a 	ret

01006598 <__fp_unlock>:
 1006598:	f811883a 	mov	r8,ra
 100659c:	100c1d00 	call	100c1d0 <_mcount>
 10065a0:	403f883a 	mov	ra,r8
 10065a4:	0005883a 	mov	r2,zero
 10065a8:	f800283a 	ret

010065ac <__fp_unlock_all>:
 10065ac:	f811883a 	mov	r8,ra
 10065b0:	100c1d00 	call	100c1d0 <_mcount>
 10065b4:	403f883a 	mov	ra,r8
 10065b8:	008040b4 	movhi	r2,258
 10065bc:	109f9804 	addi	r2,r2,32352
 10065c0:	11000017 	ldw	r4,0(r2)
 10065c4:	01404034 	movhi	r5,256
 10065c8:	29596604 	addi	r5,r5,26008
 10065cc:	10071a01 	jmpi	10071a0 <_fwalk>

010065d0 <__fp_lock_all>:
 10065d0:	f811883a 	mov	r8,ra
 10065d4:	100c1d00 	call	100c1d0 <_mcount>
 10065d8:	403f883a 	mov	ra,r8
 10065dc:	008040b4 	movhi	r2,258
 10065e0:	109f9804 	addi	r2,r2,32352
 10065e4:	11000017 	ldw	r4,0(r2)
 10065e8:	01404034 	movhi	r5,256
 10065ec:	29596104 	addi	r5,r5,25988
 10065f0:	10071a01 	jmpi	10071a0 <_fwalk>

010065f4 <_cleanup_r>:
 10065f4:	f811883a 	mov	r8,ra
 10065f8:	100c1d00 	call	100c1d0 <_mcount>
 10065fc:	403f883a 	mov	ra,r8
 1006600:	01404074 	movhi	r5,257
 1006604:	29682404 	addi	r5,r5,-24432
 1006608:	10071a01 	jmpi	10071a0 <_fwalk>

0100660c <_cleanup>:
 100660c:	f811883a 	mov	r8,ra
 1006610:	100c1d00 	call	100c1d0 <_mcount>
 1006614:	403f883a 	mov	ra,r8
 1006618:	008040b4 	movhi	r2,258
 100661c:	109f9904 	addi	r2,r2,32356
 1006620:	11000017 	ldw	r4,0(r2)
 1006624:	10065f41 	jmpi	10065f4 <_cleanup_r>

01006628 <__sfmoreglue>:
 1006628:	f811883a 	mov	r8,ra
 100662c:	100c1d00 	call	100c1d0 <_mcount>
 1006630:	403f883a 	mov	ra,r8
 1006634:	defffc04 	addi	sp,sp,-16
 1006638:	dfc00315 	stw	ra,12(sp)
 100663c:	dcc00215 	stw	r19,8(sp)
 1006640:	dc400115 	stw	r17,4(sp)
 1006644:	dc000015 	stw	r16,0(sp)
 1006648:	2821883a 	mov	r16,r5
 100664c:	2023883a 	mov	r17,r4
 1006650:	01401704 	movi	r5,92
 1006654:	8009883a 	mov	r4,r16
 1006658:	10021e00 	call	10021e0 <__mulsi3>
 100665c:	11400304 	addi	r5,r2,12
 1006660:	8809883a 	mov	r4,r17
 1006664:	1027883a 	mov	r19,r2
 1006668:	10075040 	call	1007504 <_malloc_r>
 100666c:	10c00304 	addi	r3,r2,12
 1006670:	1023883a 	mov	r17,r2
 1006674:	1809883a 	mov	r4,r3
 1006678:	980d883a 	mov	r6,r19
 100667c:	000b883a 	mov	r5,zero
 1006680:	10000b26 	beq	r2,zero,10066b0 <__sfmoreglue+0x88>
 1006684:	14000115 	stw	r16,4(r2)
 1006688:	10c00215 	stw	r3,8(r2)
 100668c:	10000015 	stw	zero,0(r2)
 1006690:	1007ed80 	call	1007ed8 <memset>
 1006694:	8805883a 	mov	r2,r17
 1006698:	dfc00317 	ldw	ra,12(sp)
 100669c:	dcc00217 	ldw	r19,8(sp)
 10066a0:	dc400117 	ldw	r17,4(sp)
 10066a4:	dc000017 	ldw	r16,0(sp)
 10066a8:	dec00404 	addi	sp,sp,16
 10066ac:	f800283a 	ret
 10066b0:	0023883a 	mov	r17,zero
 10066b4:	8805883a 	mov	r2,r17
 10066b8:	dfc00317 	ldw	ra,12(sp)
 10066bc:	dcc00217 	ldw	r19,8(sp)
 10066c0:	dc400117 	ldw	r17,4(sp)
 10066c4:	dc000017 	ldw	r16,0(sp)
 10066c8:	dec00404 	addi	sp,sp,16
 10066cc:	f800283a 	ret

010066d0 <__sfp>:
 10066d0:	f811883a 	mov	r8,ra
 10066d4:	100c1d00 	call	100c1d0 <_mcount>
 10066d8:	403f883a 	mov	ra,r8
 10066dc:	defffd04 	addi	sp,sp,-12
 10066e0:	dfc00215 	stw	ra,8(sp)
 10066e4:	dc400115 	stw	r17,4(sp)
 10066e8:	dc000015 	stw	r16,0(sp)
 10066ec:	008040b4 	movhi	r2,258
 10066f0:	109f9904 	addi	r2,r2,32356
 10066f4:	14000017 	ldw	r16,0(r2)
 10066f8:	2023883a 	mov	r17,r4
 10066fc:	80800e17 	ldw	r2,56(r16)
 1006700:	10002626 	beq	r2,zero,100679c <__sfp+0xcc>
 1006704:	8400b804 	addi	r16,r16,736
 1006708:	80800117 	ldw	r2,4(r16)
 100670c:	81000217 	ldw	r4,8(r16)
 1006710:	10ffffc4 	addi	r3,r2,-1
 1006714:	18000916 	blt	r3,zero,100673c <__sfp+0x6c>
 1006718:	2080030f 	ldh	r2,12(r4)
 100671c:	10000b26 	beq	r2,zero,100674c <__sfp+0x7c>
 1006720:	017fffc4 	movi	r5,-1
 1006724:	00000206 	br	1006730 <__sfp+0x60>
 1006728:	2080030f 	ldh	r2,12(r4)
 100672c:	10000726 	beq	r2,zero,100674c <__sfp+0x7c>
 1006730:	18ffffc4 	addi	r3,r3,-1
 1006734:	21001704 	addi	r4,r4,92
 1006738:	197ffb1e 	bne	r3,r5,1006728 <__sfp+0x58>
 100673c:	80800017 	ldw	r2,0(r16)
 1006740:	10001926 	beq	r2,zero,10067a8 <__sfp+0xd8>
 1006744:	1021883a 	mov	r16,r2
 1006748:	003fef06 	br	1006708 <__sfp+0x38>
 100674c:	00bfffc4 	movi	r2,-1
 1006750:	00c00044 	movi	r3,1
 1006754:	2080038d 	sth	r2,14(r4)
 1006758:	20c0030d 	sth	r3,12(r4)
 100675c:	20000015 	stw	zero,0(r4)
 1006760:	20000215 	stw	zero,8(r4)
 1006764:	20000115 	stw	zero,4(r4)
 1006768:	20000415 	stw	zero,16(r4)
 100676c:	20000515 	stw	zero,20(r4)
 1006770:	20000615 	stw	zero,24(r4)
 1006774:	20000c15 	stw	zero,48(r4)
 1006778:	20000d15 	stw	zero,52(r4)
 100677c:	20001115 	stw	zero,68(r4)
 1006780:	20001215 	stw	zero,72(r4)
 1006784:	2005883a 	mov	r2,r4
 1006788:	dfc00217 	ldw	ra,8(sp)
 100678c:	dc400117 	ldw	r17,4(sp)
 1006790:	dc000017 	ldw	r16,0(sp)
 1006794:	dec00304 	addi	sp,sp,12
 1006798:	f800283a 	ret
 100679c:	8009883a 	mov	r4,r16
 10067a0:	10064d40 	call	10064d4 <__sinit>
 10067a4:	003fd706 	br	1006704 <__sfp+0x34>
 10067a8:	8809883a 	mov	r4,r17
 10067ac:	01400104 	movi	r5,4
 10067b0:	10066280 	call	1006628 <__sfmoreglue>
 10067b4:	80800015 	stw	r2,0(r16)
 10067b8:	103fe21e 	bne	r2,zero,1006744 <__sfp+0x74>
 10067bc:	00800304 	movi	r2,12
 10067c0:	0009883a 	mov	r4,zero
 10067c4:	88800015 	stw	r2,0(r17)
 10067c8:	003fee06 	br	1006784 <__sfp+0xb4>

010067cc <_malloc_trim_r>:
 10067cc:	f811883a 	mov	r8,ra
 10067d0:	100c1d00 	call	100c1d0 <_mcount>
 10067d4:	403f883a 	mov	ra,r8
 10067d8:	defffb04 	addi	sp,sp,-20
 10067dc:	dfc00415 	stw	ra,16(sp)
 10067e0:	dcc00315 	stw	r19,12(sp)
 10067e4:	dc800215 	stw	r18,8(sp)
 10067e8:	dc400115 	stw	r17,4(sp)
 10067ec:	dc000015 	stw	r16,0(sp)
 10067f0:	04c040b4 	movhi	r19,258
 10067f4:	9cd9cd04 	addi	r19,r19,26420
 10067f8:	2823883a 	mov	r17,r5
 10067fc:	2025883a 	mov	r18,r4
 1006800:	100c9c40 	call	100c9c4 <__malloc_lock>
 1006804:	98800217 	ldw	r2,8(r19)
 1006808:	9009883a 	mov	r4,r18
 100680c:	000b883a 	mov	r5,zero
 1006810:	10c00117 	ldw	r3,4(r2)
 1006814:	00bfff04 	movi	r2,-4
 1006818:	18a0703a 	and	r16,r3,r2
 100681c:	8463c83a 	sub	r17,r16,r17
 1006820:	8c43fbc4 	addi	r17,r17,4079
 1006824:	8822d33a 	srli	r17,r17,12
 1006828:	0083ffc4 	movi	r2,4095
 100682c:	8c7fffc4 	addi	r17,r17,-1
 1006830:	8822933a 	slli	r17,r17,12
 1006834:	1440060e 	bge	r2,r17,1006850 <_malloc_trim_r+0x84>
 1006838:	100997c0 	call	100997c <_sbrk_r>
 100683c:	98c00217 	ldw	r3,8(r19)
 1006840:	9009883a 	mov	r4,r18
 1006844:	044bc83a 	sub	r5,zero,r17
 1006848:	80c7883a 	add	r3,r16,r3
 100684c:	10c00926 	beq	r2,r3,1006874 <_malloc_trim_r+0xa8>
 1006850:	100cad80 	call	100cad8 <__malloc_unlock>
 1006854:	0005883a 	mov	r2,zero
 1006858:	dfc00417 	ldw	ra,16(sp)
 100685c:	dcc00317 	ldw	r19,12(sp)
 1006860:	dc800217 	ldw	r18,8(sp)
 1006864:	dc400117 	ldw	r17,4(sp)
 1006868:	dc000017 	ldw	r16,0(sp)
 100686c:	dec00504 	addi	sp,sp,20
 1006870:	f800283a 	ret
 1006874:	9009883a 	mov	r4,r18
 1006878:	100997c0 	call	100997c <_sbrk_r>
 100687c:	844dc83a 	sub	r6,r16,r17
 1006880:	00ffffc4 	movi	r3,-1
 1006884:	9009883a 	mov	r4,r18
 1006888:	000b883a 	mov	r5,zero
 100688c:	01c040f4 	movhi	r7,259
 1006890:	39d71a04 	addi	r7,r7,23656
 1006894:	31800054 	ori	r6,r6,1
 1006898:	10c00926 	beq	r2,r3,10068c0 <_malloc_trim_r+0xf4>
 100689c:	38800017 	ldw	r2,0(r7)
 10068a0:	98c00217 	ldw	r3,8(r19)
 10068a4:	9009883a 	mov	r4,r18
 10068a8:	1445c83a 	sub	r2,r2,r17
 10068ac:	38800015 	stw	r2,0(r7)
 10068b0:	19800115 	stw	r6,4(r3)
 10068b4:	100cad80 	call	100cad8 <__malloc_unlock>
 10068b8:	00800044 	movi	r2,1
 10068bc:	003fe606 	br	1006858 <_malloc_trim_r+0x8c>
 10068c0:	100997c0 	call	100997c <_sbrk_r>
 10068c4:	99800217 	ldw	r6,8(r19)
 10068c8:	100f883a 	mov	r7,r2
 10068cc:	9009883a 	mov	r4,r18
 10068d0:	1187c83a 	sub	r3,r2,r6
 10068d4:	008003c4 	movi	r2,15
 10068d8:	19400054 	ori	r5,r3,1
 10068dc:	10ffdc0e 	bge	r2,r3,1006850 <_malloc_trim_r+0x84>
 10068e0:	008040b4 	movhi	r2,258
 10068e4:	109f9d04 	addi	r2,r2,32372
 10068e8:	10c00017 	ldw	r3,0(r2)
 10068ec:	008040f4 	movhi	r2,259
 10068f0:	10971a04 	addi	r2,r2,23656
 10068f4:	31400115 	stw	r5,4(r6)
 10068f8:	38c7c83a 	sub	r3,r7,r3
 10068fc:	10c00015 	stw	r3,0(r2)
 1006900:	003fd306 	br	1006850 <_malloc_trim_r+0x84>

01006904 <_free_r>:
 1006904:	f811883a 	mov	r8,ra
 1006908:	100c1d00 	call	100c1d0 <_mcount>
 100690c:	403f883a 	mov	ra,r8
 1006910:	defffd04 	addi	sp,sp,-12
 1006914:	dfc00215 	stw	ra,8(sp)
 1006918:	dc400115 	stw	r17,4(sp)
 100691c:	dc000015 	stw	r16,0(sp)
 1006920:	2821883a 	mov	r16,r5
 1006924:	2023883a 	mov	r17,r4
 1006928:	28005a26 	beq	r5,zero,1006a94 <_free_r+0x190>
 100692c:	100c9c40 	call	100c9c4 <__malloc_lock>
 1006930:	823ffe04 	addi	r8,r16,-8
 1006934:	41400117 	ldw	r5,4(r8)
 1006938:	00bfff84 	movi	r2,-2
 100693c:	028040b4 	movhi	r10,258
 1006940:	5299cd04 	addi	r10,r10,26420
 1006944:	288e703a 	and	r7,r5,r2
 1006948:	41cd883a 	add	r6,r8,r7
 100694c:	30c00117 	ldw	r3,4(r6)
 1006950:	51000217 	ldw	r4,8(r10)
 1006954:	00bfff04 	movi	r2,-4
 1006958:	1892703a 	and	r9,r3,r2
 100695c:	5017883a 	mov	r11,r10
 1006960:	31006726 	beq	r6,r4,1006b00 <_free_r+0x1fc>
 1006964:	2880004c 	andi	r2,r5,1
 1006968:	1005003a 	cmpeq	r2,r2,zero
 100696c:	32400115 	stw	r9,4(r6)
 1006970:	10001a1e 	bne	r2,zero,10069dc <_free_r+0xd8>
 1006974:	000b883a 	mov	r5,zero
 1006978:	3247883a 	add	r3,r6,r9
 100697c:	18800117 	ldw	r2,4(r3)
 1006980:	1080004c 	andi	r2,r2,1
 1006984:	1000231e 	bne	r2,zero,1006a14 <_free_r+0x110>
 1006988:	280ac03a 	cmpne	r5,r5,zero
 100698c:	3a4f883a 	add	r7,r7,r9
 1006990:	2800451e 	bne	r5,zero,1006aa8 <_free_r+0x1a4>
 1006994:	31000217 	ldw	r4,8(r6)
 1006998:	008040b4 	movhi	r2,258
 100699c:	1099cf04 	addi	r2,r2,26428
 10069a0:	20807b26 	beq	r4,r2,1006b90 <_free_r+0x28c>
 10069a4:	30800317 	ldw	r2,12(r6)
 10069a8:	3a07883a 	add	r3,r7,r8
 10069ac:	19c00015 	stw	r7,0(r3)
 10069b0:	11000215 	stw	r4,8(r2)
 10069b4:	20800315 	stw	r2,12(r4)
 10069b8:	38800054 	ori	r2,r7,1
 10069bc:	40800115 	stw	r2,4(r8)
 10069c0:	28001a26 	beq	r5,zero,1006a2c <_free_r+0x128>
 10069c4:	8809883a 	mov	r4,r17
 10069c8:	dfc00217 	ldw	ra,8(sp)
 10069cc:	dc400117 	ldw	r17,4(sp)
 10069d0:	dc000017 	ldw	r16,0(sp)
 10069d4:	dec00304 	addi	sp,sp,12
 10069d8:	100cad81 	jmpi	100cad8 <__malloc_unlock>
 10069dc:	80bffe17 	ldw	r2,-8(r16)
 10069e0:	50c00204 	addi	r3,r10,8
 10069e4:	4091c83a 	sub	r8,r8,r2
 10069e8:	41000217 	ldw	r4,8(r8)
 10069ec:	388f883a 	add	r7,r7,r2
 10069f0:	20c06126 	beq	r4,r3,1006b78 <_free_r+0x274>
 10069f4:	40800317 	ldw	r2,12(r8)
 10069f8:	3247883a 	add	r3,r6,r9
 10069fc:	000b883a 	mov	r5,zero
 1006a00:	11000215 	stw	r4,8(r2)
 1006a04:	20800315 	stw	r2,12(r4)
 1006a08:	18800117 	ldw	r2,4(r3)
 1006a0c:	1080004c 	andi	r2,r2,1
 1006a10:	103fdd26 	beq	r2,zero,1006988 <_free_r+0x84>
 1006a14:	38800054 	ori	r2,r7,1
 1006a18:	3a07883a 	add	r3,r7,r8
 1006a1c:	280ac03a 	cmpne	r5,r5,zero
 1006a20:	40800115 	stw	r2,4(r8)
 1006a24:	19c00015 	stw	r7,0(r3)
 1006a28:	283fe61e 	bne	r5,zero,10069c4 <_free_r+0xc0>
 1006a2c:	00807fc4 	movi	r2,511
 1006a30:	11c01f2e 	bgeu	r2,r7,1006ab0 <_free_r+0x1ac>
 1006a34:	3806d27a 	srli	r3,r7,9
 1006a38:	1800481e 	bne	r3,zero,1006b5c <_free_r+0x258>
 1006a3c:	3804d0fa 	srli	r2,r7,3
 1006a40:	100690fa 	slli	r3,r2,3
 1006a44:	1acd883a 	add	r6,r3,r11
 1006a48:	31400217 	ldw	r5,8(r6)
 1006a4c:	31405926 	beq	r6,r5,1006bb4 <_free_r+0x2b0>
 1006a50:	28800117 	ldw	r2,4(r5)
 1006a54:	00ffff04 	movi	r3,-4
 1006a58:	10c4703a 	and	r2,r2,r3
 1006a5c:	3880022e 	bgeu	r7,r2,1006a68 <_free_r+0x164>
 1006a60:	29400217 	ldw	r5,8(r5)
 1006a64:	317ffa1e 	bne	r6,r5,1006a50 <_free_r+0x14c>
 1006a68:	29800317 	ldw	r6,12(r5)
 1006a6c:	41800315 	stw	r6,12(r8)
 1006a70:	41400215 	stw	r5,8(r8)
 1006a74:	8809883a 	mov	r4,r17
 1006a78:	2a000315 	stw	r8,12(r5)
 1006a7c:	32000215 	stw	r8,8(r6)
 1006a80:	dfc00217 	ldw	ra,8(sp)
 1006a84:	dc400117 	ldw	r17,4(sp)
 1006a88:	dc000017 	ldw	r16,0(sp)
 1006a8c:	dec00304 	addi	sp,sp,12
 1006a90:	100cad81 	jmpi	100cad8 <__malloc_unlock>
 1006a94:	dfc00217 	ldw	ra,8(sp)
 1006a98:	dc400117 	ldw	r17,4(sp)
 1006a9c:	dc000017 	ldw	r16,0(sp)
 1006aa0:	dec00304 	addi	sp,sp,12
 1006aa4:	f800283a 	ret
 1006aa8:	31000217 	ldw	r4,8(r6)
 1006aac:	003fbd06 	br	10069a4 <_free_r+0xa0>
 1006ab0:	3806d0fa 	srli	r3,r7,3
 1006ab4:	00800044 	movi	r2,1
 1006ab8:	51400117 	ldw	r5,4(r10)
 1006abc:	180890fa 	slli	r4,r3,3
 1006ac0:	1807d0ba 	srai	r3,r3,2
 1006ac4:	22c9883a 	add	r4,r4,r11
 1006ac8:	21800217 	ldw	r6,8(r4)
 1006acc:	10c4983a 	sll	r2,r2,r3
 1006ad0:	41000315 	stw	r4,12(r8)
 1006ad4:	41800215 	stw	r6,8(r8)
 1006ad8:	288ab03a 	or	r5,r5,r2
 1006adc:	22000215 	stw	r8,8(r4)
 1006ae0:	8809883a 	mov	r4,r17
 1006ae4:	51400115 	stw	r5,4(r10)
 1006ae8:	32000315 	stw	r8,12(r6)
 1006aec:	dfc00217 	ldw	ra,8(sp)
 1006af0:	dc400117 	ldw	r17,4(sp)
 1006af4:	dc000017 	ldw	r16,0(sp)
 1006af8:	dec00304 	addi	sp,sp,12
 1006afc:	100cad81 	jmpi	100cad8 <__malloc_unlock>
 1006b00:	2880004c 	andi	r2,r5,1
 1006b04:	3a4d883a 	add	r6,r7,r9
 1006b08:	1000071e 	bne	r2,zero,1006b28 <_free_r+0x224>
 1006b0c:	80bffe17 	ldw	r2,-8(r16)
 1006b10:	4091c83a 	sub	r8,r8,r2
 1006b14:	41000317 	ldw	r4,12(r8)
 1006b18:	40c00217 	ldw	r3,8(r8)
 1006b1c:	308d883a 	add	r6,r6,r2
 1006b20:	20c00215 	stw	r3,8(r4)
 1006b24:	19000315 	stw	r4,12(r3)
 1006b28:	008040b4 	movhi	r2,258
 1006b2c:	109f9c04 	addi	r2,r2,32368
 1006b30:	11000017 	ldw	r4,0(r2)
 1006b34:	30c00054 	ori	r3,r6,1
 1006b38:	52000215 	stw	r8,8(r10)
 1006b3c:	40c00115 	stw	r3,4(r8)
 1006b40:	313fa036 	bltu	r6,r4,10069c4 <_free_r+0xc0>
 1006b44:	008040f4 	movhi	r2,259
 1006b48:	1096e704 	addi	r2,r2,23452
 1006b4c:	11400017 	ldw	r5,0(r2)
 1006b50:	8809883a 	mov	r4,r17
 1006b54:	10067cc0 	call	10067cc <_malloc_trim_r>
 1006b58:	003f9a06 	br	10069c4 <_free_r+0xc0>
 1006b5c:	00800104 	movi	r2,4
 1006b60:	10c0072e 	bgeu	r2,r3,1006b80 <_free_r+0x27c>
 1006b64:	00800504 	movi	r2,20
 1006b68:	10c01936 	bltu	r2,r3,1006bd0 <_free_r+0x2cc>
 1006b6c:	188016c4 	addi	r2,r3,91
 1006b70:	100690fa 	slli	r3,r2,3
 1006b74:	003fb306 	br	1006a44 <_free_r+0x140>
 1006b78:	01400044 	movi	r5,1
 1006b7c:	003f7e06 	br	1006978 <_free_r+0x74>
 1006b80:	3804d1ba 	srli	r2,r7,6
 1006b84:	10800e04 	addi	r2,r2,56
 1006b88:	100690fa 	slli	r3,r2,3
 1006b8c:	003fad06 	br	1006a44 <_free_r+0x140>
 1006b90:	22000315 	stw	r8,12(r4)
 1006b94:	22000215 	stw	r8,8(r4)
 1006b98:	3a05883a 	add	r2,r7,r8
 1006b9c:	38c00054 	ori	r3,r7,1
 1006ba0:	11c00015 	stw	r7,0(r2)
 1006ba4:	41000215 	stw	r4,8(r8)
 1006ba8:	40c00115 	stw	r3,4(r8)
 1006bac:	41000315 	stw	r4,12(r8)
 1006bb0:	003f8406 	br	10069c4 <_free_r+0xc0>
 1006bb4:	1005d0ba 	srai	r2,r2,2
 1006bb8:	00c00044 	movi	r3,1
 1006bbc:	51000117 	ldw	r4,4(r10)
 1006bc0:	1886983a 	sll	r3,r3,r2
 1006bc4:	20c8b03a 	or	r4,r4,r3
 1006bc8:	51000115 	stw	r4,4(r10)
 1006bcc:	003fa706 	br	1006a6c <_free_r+0x168>
 1006bd0:	00801504 	movi	r2,84
 1006bd4:	10c00436 	bltu	r2,r3,1006be8 <_free_r+0x2e4>
 1006bd8:	3804d33a 	srli	r2,r7,12
 1006bdc:	10801b84 	addi	r2,r2,110
 1006be0:	100690fa 	slli	r3,r2,3
 1006be4:	003f9706 	br	1006a44 <_free_r+0x140>
 1006be8:	00805504 	movi	r2,340
 1006bec:	10c00436 	bltu	r2,r3,1006c00 <_free_r+0x2fc>
 1006bf0:	3804d3fa 	srli	r2,r7,15
 1006bf4:	10801dc4 	addi	r2,r2,119
 1006bf8:	100690fa 	slli	r3,r2,3
 1006bfc:	003f9106 	br	1006a44 <_free_r+0x140>
 1006c00:	00815504 	movi	r2,1364
 1006c04:	10c0032e 	bgeu	r2,r3,1006c14 <_free_r+0x310>
 1006c08:	00801f84 	movi	r2,126
 1006c0c:	00c0fc04 	movi	r3,1008
 1006c10:	003f8c06 	br	1006a44 <_free_r+0x140>
 1006c14:	3804d4ba 	srli	r2,r7,18
 1006c18:	10801f04 	addi	r2,r2,124
 1006c1c:	100690fa 	slli	r3,r2,3
 1006c20:	003f8806 	br	1006a44 <_free_r+0x140>

01006c24 <__sfvwrite_r>:
 1006c24:	f811883a 	mov	r8,ra
 1006c28:	100c1d00 	call	100c1d0 <_mcount>
 1006c2c:	403f883a 	mov	ra,r8
 1006c30:	defff504 	addi	sp,sp,-44
 1006c34:	dfc00a15 	stw	ra,40(sp)
 1006c38:	df000915 	stw	fp,36(sp)
 1006c3c:	ddc00815 	stw	r23,32(sp)
 1006c40:	dd800715 	stw	r22,28(sp)
 1006c44:	dd400615 	stw	r21,24(sp)
 1006c48:	dd000515 	stw	r20,20(sp)
 1006c4c:	dcc00415 	stw	r19,16(sp)
 1006c50:	dc800315 	stw	r18,12(sp)
 1006c54:	dc400215 	stw	r17,8(sp)
 1006c58:	dc000115 	stw	r16,4(sp)
 1006c5c:	30800217 	ldw	r2,8(r6)
 1006c60:	302d883a 	mov	r22,r6
 1006c64:	2039883a 	mov	fp,r4
 1006c68:	2825883a 	mov	r18,r5
 1006c6c:	10001c26 	beq	r2,zero,1006ce0 <__sfvwrite_r+0xbc>
 1006c70:	29c0030b 	ldhu	r7,12(r5)
 1006c74:	3880020c 	andi	r2,r7,8
 1006c78:	10002726 	beq	r2,zero,1006d18 <__sfvwrite_r+0xf4>
 1006c7c:	28800417 	ldw	r2,16(r5)
 1006c80:	10002526 	beq	r2,zero,1006d18 <__sfvwrite_r+0xf4>
 1006c84:	3880008c 	andi	r2,r7,2
 1006c88:	b5400017 	ldw	r21,0(r22)
 1006c8c:	10002826 	beq	r2,zero,1006d30 <__sfvwrite_r+0x10c>
 1006c90:	0021883a 	mov	r16,zero
 1006c94:	0023883a 	mov	r17,zero
 1006c98:	880d883a 	mov	r6,r17
 1006c9c:	e009883a 	mov	r4,fp
 1006ca0:	00810004 	movi	r2,1024
 1006ca4:	80006e26 	beq	r16,zero,1006e60 <__sfvwrite_r+0x23c>
 1006ca8:	800f883a 	mov	r7,r16
 1006cac:	91400717 	ldw	r5,28(r18)
 1006cb0:	1400012e 	bgeu	r2,r16,1006cb8 <__sfvwrite_r+0x94>
 1006cb4:	100f883a 	mov	r7,r2
 1006cb8:	90c00917 	ldw	r3,36(r18)
 1006cbc:	183ee83a 	callr	r3
 1006cc0:	1007883a 	mov	r3,r2
 1006cc4:	80a1c83a 	sub	r16,r16,r2
 1006cc8:	88a3883a 	add	r17,r17,r2
 1006ccc:	00806d0e 	bge	zero,r2,1006e84 <__sfvwrite_r+0x260>
 1006cd0:	b0800217 	ldw	r2,8(r22)
 1006cd4:	10c5c83a 	sub	r2,r2,r3
 1006cd8:	b0800215 	stw	r2,8(r22)
 1006cdc:	103fee1e 	bne	r2,zero,1006c98 <__sfvwrite_r+0x74>
 1006ce0:	0009883a 	mov	r4,zero
 1006ce4:	2005883a 	mov	r2,r4
 1006ce8:	dfc00a17 	ldw	ra,40(sp)
 1006cec:	df000917 	ldw	fp,36(sp)
 1006cf0:	ddc00817 	ldw	r23,32(sp)
 1006cf4:	dd800717 	ldw	r22,28(sp)
 1006cf8:	dd400617 	ldw	r21,24(sp)
 1006cfc:	dd000517 	ldw	r20,20(sp)
 1006d00:	dcc00417 	ldw	r19,16(sp)
 1006d04:	dc800317 	ldw	r18,12(sp)
 1006d08:	dc400217 	ldw	r17,8(sp)
 1006d0c:	dc000117 	ldw	r16,4(sp)
 1006d10:	dec00b04 	addi	sp,sp,44
 1006d14:	f800283a 	ret
 1006d18:	10048900 	call	1004890 <__swsetup_r>
 1006d1c:	1000e41e 	bne	r2,zero,10070b0 <__sfvwrite_r+0x48c>
 1006d20:	91c0030b 	ldhu	r7,12(r18)
 1006d24:	b5400017 	ldw	r21,0(r22)
 1006d28:	3880008c 	andi	r2,r7,2
 1006d2c:	103fd81e 	bne	r2,zero,1006c90 <__sfvwrite_r+0x6c>
 1006d30:	3880004c 	andi	r2,r7,1
 1006d34:	1005003a 	cmpeq	r2,r2,zero
 1006d38:	10005726 	beq	r2,zero,1006e98 <__sfvwrite_r+0x274>
 1006d3c:	0029883a 	mov	r20,zero
 1006d40:	002f883a 	mov	r23,zero
 1006d44:	a0004226 	beq	r20,zero,1006e50 <__sfvwrite_r+0x22c>
 1006d48:	3880800c 	andi	r2,r7,512
 1006d4c:	94000217 	ldw	r16,8(r18)
 1006d50:	10008b26 	beq	r2,zero,1006f80 <__sfvwrite_r+0x35c>
 1006d54:	800d883a 	mov	r6,r16
 1006d58:	a400a536 	bltu	r20,r16,1006ff0 <__sfvwrite_r+0x3cc>
 1006d5c:	3881200c 	andi	r2,r7,1152
 1006d60:	10002726 	beq	r2,zero,1006e00 <__sfvwrite_r+0x1dc>
 1006d64:	90800517 	ldw	r2,20(r18)
 1006d68:	92000417 	ldw	r8,16(r18)
 1006d6c:	91400017 	ldw	r5,0(r18)
 1006d70:	1087883a 	add	r3,r2,r2
 1006d74:	1887883a 	add	r3,r3,r2
 1006d78:	1808d7fa 	srli	r4,r3,31
 1006d7c:	2a21c83a 	sub	r16,r5,r8
 1006d80:	80800044 	addi	r2,r16,1
 1006d84:	20c9883a 	add	r4,r4,r3
 1006d88:	2027d07a 	srai	r19,r4,1
 1006d8c:	a085883a 	add	r2,r20,r2
 1006d90:	980d883a 	mov	r6,r19
 1006d94:	9880022e 	bgeu	r19,r2,1006da0 <__sfvwrite_r+0x17c>
 1006d98:	1027883a 	mov	r19,r2
 1006d9c:	100d883a 	mov	r6,r2
 1006da0:	3881000c 	andi	r2,r7,1024
 1006da4:	1000b826 	beq	r2,zero,1007088 <__sfvwrite_r+0x464>
 1006da8:	300b883a 	mov	r5,r6
 1006dac:	e009883a 	mov	r4,fp
 1006db0:	10075040 	call	1007504 <_malloc_r>
 1006db4:	10003126 	beq	r2,zero,1006e7c <__sfvwrite_r+0x258>
 1006db8:	91400417 	ldw	r5,16(r18)
 1006dbc:	1009883a 	mov	r4,r2
 1006dc0:	800d883a 	mov	r6,r16
 1006dc4:	1023883a 	mov	r17,r2
 1006dc8:	1007d400 	call	1007d40 <memcpy>
 1006dcc:	90c0030b 	ldhu	r3,12(r18)
 1006dd0:	00beffc4 	movi	r2,-1025
 1006dd4:	1886703a 	and	r3,r3,r2
 1006dd8:	18c02014 	ori	r3,r3,128
 1006ddc:	90c0030d 	sth	r3,12(r18)
 1006de0:	9c07c83a 	sub	r3,r19,r16
 1006de4:	8c05883a 	add	r2,r17,r16
 1006de8:	a00d883a 	mov	r6,r20
 1006dec:	a021883a 	mov	r16,r20
 1006df0:	90800015 	stw	r2,0(r18)
 1006df4:	90c00215 	stw	r3,8(r18)
 1006df8:	94400415 	stw	r17,16(r18)
 1006dfc:	94c00515 	stw	r19,20(r18)
 1006e00:	91000017 	ldw	r4,0(r18)
 1006e04:	b80b883a 	mov	r5,r23
 1006e08:	a023883a 	mov	r17,r20
 1006e0c:	1007dec0 	call	1007dec <memmove>
 1006e10:	90c00217 	ldw	r3,8(r18)
 1006e14:	90800017 	ldw	r2,0(r18)
 1006e18:	a027883a 	mov	r19,r20
 1006e1c:	1c07c83a 	sub	r3,r3,r16
 1006e20:	1405883a 	add	r2,r2,r16
 1006e24:	90c00215 	stw	r3,8(r18)
 1006e28:	a021883a 	mov	r16,r20
 1006e2c:	90800015 	stw	r2,0(r18)
 1006e30:	b0800217 	ldw	r2,8(r22)
 1006e34:	1405c83a 	sub	r2,r2,r16
 1006e38:	b0800215 	stw	r2,8(r22)
 1006e3c:	103fa826 	beq	r2,zero,1006ce0 <__sfvwrite_r+0xbc>
 1006e40:	a469c83a 	sub	r20,r20,r17
 1006e44:	91c0030b 	ldhu	r7,12(r18)
 1006e48:	bcef883a 	add	r23,r23,r19
 1006e4c:	a03fbe1e 	bne	r20,zero,1006d48 <__sfvwrite_r+0x124>
 1006e50:	adc00017 	ldw	r23,0(r21)
 1006e54:	ad000117 	ldw	r20,4(r21)
 1006e58:	ad400204 	addi	r21,r21,8
 1006e5c:	003fb906 	br	1006d44 <__sfvwrite_r+0x120>
 1006e60:	ac400017 	ldw	r17,0(r21)
 1006e64:	ac000117 	ldw	r16,4(r21)
 1006e68:	ad400204 	addi	r21,r21,8
 1006e6c:	003f8a06 	br	1006c98 <__sfvwrite_r+0x74>
 1006e70:	91400417 	ldw	r5,16(r18)
 1006e74:	e009883a 	mov	r4,fp
 1006e78:	10069040 	call	1006904 <_free_r>
 1006e7c:	00800304 	movi	r2,12
 1006e80:	e0800015 	stw	r2,0(fp)
 1006e84:	9080030b 	ldhu	r2,12(r18)
 1006e88:	013fffc4 	movi	r4,-1
 1006e8c:	10801014 	ori	r2,r2,64
 1006e90:	9080030d 	sth	r2,12(r18)
 1006e94:	003f9306 	br	1006ce4 <__sfvwrite_r+0xc0>
 1006e98:	0027883a 	mov	r19,zero
 1006e9c:	002f883a 	mov	r23,zero
 1006ea0:	d8000015 	stw	zero,0(sp)
 1006ea4:	0029883a 	mov	r20,zero
 1006ea8:	98001e26 	beq	r19,zero,1006f24 <__sfvwrite_r+0x300>
 1006eac:	d8c00017 	ldw	r3,0(sp)
 1006eb0:	1804c03a 	cmpne	r2,r3,zero
 1006eb4:	10005e26 	beq	r2,zero,1007030 <__sfvwrite_r+0x40c>
 1006eb8:	9821883a 	mov	r16,r19
 1006ebc:	a4c0012e 	bgeu	r20,r19,1006ec4 <__sfvwrite_r+0x2a0>
 1006ec0:	a021883a 	mov	r16,r20
 1006ec4:	91000017 	ldw	r4,0(r18)
 1006ec8:	90800417 	ldw	r2,16(r18)
 1006ecc:	91800217 	ldw	r6,8(r18)
 1006ed0:	91c00517 	ldw	r7,20(r18)
 1006ed4:	1100022e 	bgeu	r2,r4,1006ee0 <__sfvwrite_r+0x2bc>
 1006ed8:	31e3883a 	add	r17,r6,r7
 1006edc:	8c001616 	blt	r17,r16,1006f38 <__sfvwrite_r+0x314>
 1006ee0:	81c03816 	blt	r16,r7,1006fc4 <__sfvwrite_r+0x3a0>
 1006ee4:	90c00917 	ldw	r3,36(r18)
 1006ee8:	91400717 	ldw	r5,28(r18)
 1006eec:	e009883a 	mov	r4,fp
 1006ef0:	b80d883a 	mov	r6,r23
 1006ef4:	183ee83a 	callr	r3
 1006ef8:	1023883a 	mov	r17,r2
 1006efc:	00bfe10e 	bge	zero,r2,1006e84 <__sfvwrite_r+0x260>
 1006f00:	a469c83a 	sub	r20,r20,r17
 1006f04:	a0001826 	beq	r20,zero,1006f68 <__sfvwrite_r+0x344>
 1006f08:	b0800217 	ldw	r2,8(r22)
 1006f0c:	1445c83a 	sub	r2,r2,r17
 1006f10:	b0800215 	stw	r2,8(r22)
 1006f14:	103f7226 	beq	r2,zero,1006ce0 <__sfvwrite_r+0xbc>
 1006f18:	9c67c83a 	sub	r19,r19,r17
 1006f1c:	bc6f883a 	add	r23,r23,r17
 1006f20:	983fe21e 	bne	r19,zero,1006eac <__sfvwrite_r+0x288>
 1006f24:	adc00017 	ldw	r23,0(r21)
 1006f28:	acc00117 	ldw	r19,4(r21)
 1006f2c:	ad400204 	addi	r21,r21,8
 1006f30:	d8000015 	stw	zero,0(sp)
 1006f34:	003fdc06 	br	1006ea8 <__sfvwrite_r+0x284>
 1006f38:	b80b883a 	mov	r5,r23
 1006f3c:	880d883a 	mov	r6,r17
 1006f40:	1007dec0 	call	1007dec <memmove>
 1006f44:	90c00017 	ldw	r3,0(r18)
 1006f48:	e009883a 	mov	r4,fp
 1006f4c:	900b883a 	mov	r5,r18
 1006f50:	1c47883a 	add	r3,r3,r17
 1006f54:	90c00015 	stw	r3,0(r18)
 1006f58:	10061e80 	call	10061e8 <_fflush_r>
 1006f5c:	103fc91e 	bne	r2,zero,1006e84 <__sfvwrite_r+0x260>
 1006f60:	a469c83a 	sub	r20,r20,r17
 1006f64:	a03fe81e 	bne	r20,zero,1006f08 <__sfvwrite_r+0x2e4>
 1006f68:	e009883a 	mov	r4,fp
 1006f6c:	900b883a 	mov	r5,r18
 1006f70:	10061e80 	call	10061e8 <_fflush_r>
 1006f74:	103fc31e 	bne	r2,zero,1006e84 <__sfvwrite_r+0x260>
 1006f78:	d8000015 	stw	zero,0(sp)
 1006f7c:	003fe206 	br	1006f08 <__sfvwrite_r+0x2e4>
 1006f80:	91000017 	ldw	r4,0(r18)
 1006f84:	90800417 	ldw	r2,16(r18)
 1006f88:	1100022e 	bgeu	r2,r4,1006f94 <__sfvwrite_r+0x370>
 1006f8c:	8023883a 	mov	r17,r16
 1006f90:	85003136 	bltu	r16,r20,1007058 <__sfvwrite_r+0x434>
 1006f94:	91c00517 	ldw	r7,20(r18)
 1006f98:	a1c01836 	bltu	r20,r7,1006ffc <__sfvwrite_r+0x3d8>
 1006f9c:	90c00917 	ldw	r3,36(r18)
 1006fa0:	91400717 	ldw	r5,28(r18)
 1006fa4:	e009883a 	mov	r4,fp
 1006fa8:	b80d883a 	mov	r6,r23
 1006fac:	183ee83a 	callr	r3
 1006fb0:	1021883a 	mov	r16,r2
 1006fb4:	00bfb30e 	bge	zero,r2,1006e84 <__sfvwrite_r+0x260>
 1006fb8:	1023883a 	mov	r17,r2
 1006fbc:	1027883a 	mov	r19,r2
 1006fc0:	003f9b06 	br	1006e30 <__sfvwrite_r+0x20c>
 1006fc4:	b80b883a 	mov	r5,r23
 1006fc8:	800d883a 	mov	r6,r16
 1006fcc:	1007dec0 	call	1007dec <memmove>
 1006fd0:	90c00217 	ldw	r3,8(r18)
 1006fd4:	90800017 	ldw	r2,0(r18)
 1006fd8:	8023883a 	mov	r17,r16
 1006fdc:	1c07c83a 	sub	r3,r3,r16
 1006fe0:	1405883a 	add	r2,r2,r16
 1006fe4:	90c00215 	stw	r3,8(r18)
 1006fe8:	90800015 	stw	r2,0(r18)
 1006fec:	003fc406 	br	1006f00 <__sfvwrite_r+0x2dc>
 1006ff0:	a00d883a 	mov	r6,r20
 1006ff4:	a021883a 	mov	r16,r20
 1006ff8:	003f8106 	br	1006e00 <__sfvwrite_r+0x1dc>
 1006ffc:	b80b883a 	mov	r5,r23
 1007000:	a00d883a 	mov	r6,r20
 1007004:	1007dec0 	call	1007dec <memmove>
 1007008:	90c00217 	ldw	r3,8(r18)
 100700c:	90800017 	ldw	r2,0(r18)
 1007010:	a021883a 	mov	r16,r20
 1007014:	1d07c83a 	sub	r3,r3,r20
 1007018:	1505883a 	add	r2,r2,r20
 100701c:	a023883a 	mov	r17,r20
 1007020:	a027883a 	mov	r19,r20
 1007024:	90c00215 	stw	r3,8(r18)
 1007028:	90800015 	stw	r2,0(r18)
 100702c:	003f8006 	br	1006e30 <__sfvwrite_r+0x20c>
 1007030:	b809883a 	mov	r4,r23
 1007034:	01400284 	movi	r5,10
 1007038:	980d883a 	mov	r6,r19
 100703c:	1007c500 	call	1007c50 <memchr>
 1007040:	10001726 	beq	r2,zero,10070a0 <__sfvwrite_r+0x47c>
 1007044:	15c5c83a 	sub	r2,r2,r23
 1007048:	15000044 	addi	r20,r2,1
 100704c:	00800044 	movi	r2,1
 1007050:	d8800015 	stw	r2,0(sp)
 1007054:	003f9806 	br	1006eb8 <__sfvwrite_r+0x294>
 1007058:	b80b883a 	mov	r5,r23
 100705c:	800d883a 	mov	r6,r16
 1007060:	1007dec0 	call	1007dec <memmove>
 1007064:	90c00017 	ldw	r3,0(r18)
 1007068:	e009883a 	mov	r4,fp
 100706c:	900b883a 	mov	r5,r18
 1007070:	1c07883a 	add	r3,r3,r16
 1007074:	90c00015 	stw	r3,0(r18)
 1007078:	8027883a 	mov	r19,r16
 100707c:	10061e80 	call	10061e8 <_fflush_r>
 1007080:	103f6b26 	beq	r2,zero,1006e30 <__sfvwrite_r+0x20c>
 1007084:	003f7f06 	br	1006e84 <__sfvwrite_r+0x260>
 1007088:	400b883a 	mov	r5,r8
 100708c:	e009883a 	mov	r4,fp
 1007090:	10092f40 	call	10092f4 <_realloc_r>
 1007094:	103f7626 	beq	r2,zero,1006e70 <__sfvwrite_r+0x24c>
 1007098:	1023883a 	mov	r17,r2
 100709c:	003f5006 	br	1006de0 <__sfvwrite_r+0x1bc>
 10070a0:	00c00044 	movi	r3,1
 10070a4:	9d000044 	addi	r20,r19,1
 10070a8:	d8c00015 	stw	r3,0(sp)
 10070ac:	003f8206 	br	1006eb8 <__sfvwrite_r+0x294>
 10070b0:	9080030b 	ldhu	r2,12(r18)
 10070b4:	00c00244 	movi	r3,9
 10070b8:	013fffc4 	movi	r4,-1
 10070bc:	10801014 	ori	r2,r2,64
 10070c0:	9080030d 	sth	r2,12(r18)
 10070c4:	e0c00015 	stw	r3,0(fp)
 10070c8:	003f0606 	br	1006ce4 <__sfvwrite_r+0xc0>

010070cc <_fwalk_reent>:
 10070cc:	f811883a 	mov	r8,ra
 10070d0:	100c1d00 	call	100c1d0 <_mcount>
 10070d4:	403f883a 	mov	ra,r8
 10070d8:	defff704 	addi	sp,sp,-36
 10070dc:	dfc00815 	stw	ra,32(sp)
 10070e0:	ddc00715 	stw	r23,28(sp)
 10070e4:	dd800615 	stw	r22,24(sp)
 10070e8:	dd400515 	stw	r21,20(sp)
 10070ec:	dd000415 	stw	r20,16(sp)
 10070f0:	dcc00315 	stw	r19,12(sp)
 10070f4:	dc800215 	stw	r18,8(sp)
 10070f8:	dc400115 	stw	r17,4(sp)
 10070fc:	dc000015 	stw	r16,0(sp)
 1007100:	24c0b804 	addi	r19,r4,736
 1007104:	202b883a 	mov	r21,r4
 1007108:	282d883a 	mov	r22,r5
 100710c:	10064940 	call	1006494 <__sfp_lock_acquire>
 1007110:	98002126 	beq	r19,zero,1007198 <_fwalk_reent+0xcc>
 1007114:	002f883a 	mov	r23,zero
 1007118:	9c800117 	ldw	r18,4(r19)
 100711c:	9c000217 	ldw	r16,8(r19)
 1007120:	90bfffc4 	addi	r2,r18,-1
 1007124:	10000d16 	blt	r2,zero,100715c <_fwalk_reent+0x90>
 1007128:	0023883a 	mov	r17,zero
 100712c:	053fffc4 	movi	r20,-1
 1007130:	8080030f 	ldh	r2,12(r16)
 1007134:	8c400044 	addi	r17,r17,1
 1007138:	10000626 	beq	r2,zero,1007154 <_fwalk_reent+0x88>
 100713c:	8080038f 	ldh	r2,14(r16)
 1007140:	800b883a 	mov	r5,r16
 1007144:	a809883a 	mov	r4,r21
 1007148:	15000226 	beq	r2,r20,1007154 <_fwalk_reent+0x88>
 100714c:	b03ee83a 	callr	r22
 1007150:	b8aeb03a 	or	r23,r23,r2
 1007154:	84001704 	addi	r16,r16,92
 1007158:	947ff51e 	bne	r18,r17,1007130 <_fwalk_reent+0x64>
 100715c:	9cc00017 	ldw	r19,0(r19)
 1007160:	983fed1e 	bne	r19,zero,1007118 <_fwalk_reent+0x4c>
 1007164:	10064a40 	call	10064a4 <__sfp_lock_release>
 1007168:	b805883a 	mov	r2,r23
 100716c:	dfc00817 	ldw	ra,32(sp)
 1007170:	ddc00717 	ldw	r23,28(sp)
 1007174:	dd800617 	ldw	r22,24(sp)
 1007178:	dd400517 	ldw	r21,20(sp)
 100717c:	dd000417 	ldw	r20,16(sp)
 1007180:	dcc00317 	ldw	r19,12(sp)
 1007184:	dc800217 	ldw	r18,8(sp)
 1007188:	dc400117 	ldw	r17,4(sp)
 100718c:	dc000017 	ldw	r16,0(sp)
 1007190:	dec00904 	addi	sp,sp,36
 1007194:	f800283a 	ret
 1007198:	002f883a 	mov	r23,zero
 100719c:	003ff106 	br	1007164 <_fwalk_reent+0x98>

010071a0 <_fwalk>:
 10071a0:	f811883a 	mov	r8,ra
 10071a4:	100c1d00 	call	100c1d0 <_mcount>
 10071a8:	403f883a 	mov	ra,r8
 10071ac:	defff804 	addi	sp,sp,-32
 10071b0:	dfc00715 	stw	ra,28(sp)
 10071b4:	dd800615 	stw	r22,24(sp)
 10071b8:	dd400515 	stw	r21,20(sp)
 10071bc:	dd000415 	stw	r20,16(sp)
 10071c0:	dcc00315 	stw	r19,12(sp)
 10071c4:	dc800215 	stw	r18,8(sp)
 10071c8:	dc400115 	stw	r17,4(sp)
 10071cc:	dc000015 	stw	r16,0(sp)
 10071d0:	24c0b804 	addi	r19,r4,736
 10071d4:	282b883a 	mov	r21,r5
 10071d8:	10064940 	call	1006494 <__sfp_lock_acquire>
 10071dc:	98001f26 	beq	r19,zero,100725c <_fwalk+0xbc>
 10071e0:	002d883a 	mov	r22,zero
 10071e4:	9c800117 	ldw	r18,4(r19)
 10071e8:	9c000217 	ldw	r16,8(r19)
 10071ec:	90bfffc4 	addi	r2,r18,-1
 10071f0:	10000c16 	blt	r2,zero,1007224 <_fwalk+0x84>
 10071f4:	0023883a 	mov	r17,zero
 10071f8:	053fffc4 	movi	r20,-1
 10071fc:	8080030f 	ldh	r2,12(r16)
 1007200:	8c400044 	addi	r17,r17,1
 1007204:	10000526 	beq	r2,zero,100721c <_fwalk+0x7c>
 1007208:	8080038f 	ldh	r2,14(r16)
 100720c:	8009883a 	mov	r4,r16
 1007210:	15000226 	beq	r2,r20,100721c <_fwalk+0x7c>
 1007214:	a83ee83a 	callr	r21
 1007218:	b0acb03a 	or	r22,r22,r2
 100721c:	84001704 	addi	r16,r16,92
 1007220:	947ff61e 	bne	r18,r17,10071fc <_fwalk+0x5c>
 1007224:	9cc00017 	ldw	r19,0(r19)
 1007228:	983fee1e 	bne	r19,zero,10071e4 <_fwalk+0x44>
 100722c:	10064a40 	call	10064a4 <__sfp_lock_release>
 1007230:	b005883a 	mov	r2,r22
 1007234:	dfc00717 	ldw	ra,28(sp)
 1007238:	dd800617 	ldw	r22,24(sp)
 100723c:	dd400517 	ldw	r21,20(sp)
 1007240:	dd000417 	ldw	r20,16(sp)
 1007244:	dcc00317 	ldw	r19,12(sp)
 1007248:	dc800217 	ldw	r18,8(sp)
 100724c:	dc400117 	ldw	r17,4(sp)
 1007250:	dc000017 	ldw	r16,0(sp)
 1007254:	dec00804 	addi	sp,sp,32
 1007258:	f800283a 	ret
 100725c:	002d883a 	mov	r22,zero
 1007260:	003ff206 	br	100722c <_fwalk+0x8c>

01007264 <__locale_charset>:
 1007264:	f811883a 	mov	r8,ra
 1007268:	100c1d00 	call	100c1d0 <_mcount>
 100726c:	403f883a 	mov	ra,r8
 1007270:	d0a00417 	ldw	r2,-32752(gp)
 1007274:	f800283a 	ret

01007278 <_localeconv_r>:
 1007278:	f811883a 	mov	r8,ra
 100727c:	100c1d00 	call	100c1d0 <_mcount>
 1007280:	403f883a 	mov	ra,r8
 1007284:	008040b4 	movhi	r2,258
 1007288:	10a7a604 	addi	r2,r2,-24936
 100728c:	f800283a 	ret

01007290 <localeconv>:
 1007290:	f811883a 	mov	r8,ra
 1007294:	100c1d00 	call	100c1d0 <_mcount>
 1007298:	403f883a 	mov	ra,r8
 100729c:	008040b4 	movhi	r2,258
 10072a0:	109f9804 	addi	r2,r2,32352
 10072a4:	11000017 	ldw	r4,0(r2)
 10072a8:	10072781 	jmpi	1007278 <_localeconv_r>

010072ac <_setlocale_r>:
 10072ac:	f811883a 	mov	r8,ra
 10072b0:	100c1d00 	call	100c1d0 <_mcount>
 10072b4:	403f883a 	mov	ra,r8
 10072b8:	defffc04 	addi	sp,sp,-16
 10072bc:	dfc00315 	stw	ra,12(sp)
 10072c0:	dc800215 	stw	r18,8(sp)
 10072c4:	dc400115 	stw	r17,4(sp)
 10072c8:	dc000015 	stw	r16,0(sp)
 10072cc:	00c040b4 	movhi	r3,258
 10072d0:	18e7a104 	addi	r3,r3,-24956
 10072d4:	2023883a 	mov	r17,r4
 10072d8:	2825883a 	mov	r18,r5
 10072dc:	3021883a 	mov	r16,r6
 10072e0:	3009883a 	mov	r4,r6
 10072e4:	180b883a 	mov	r5,r3
 10072e8:	30000926 	beq	r6,zero,1007310 <_setlocale_r+0x64>
 10072ec:	1009b740 	call	1009b74 <strcmp>
 10072f0:	8009883a 	mov	r4,r16
 10072f4:	014040b4 	movhi	r5,258
 10072f8:	29678c04 	addi	r5,r5,-25040
 10072fc:	10000b1e 	bne	r2,zero,100732c <_setlocale_r+0x80>
 1007300:	8c000d15 	stw	r16,52(r17)
 1007304:	8c800c15 	stw	r18,48(r17)
 1007308:	00c040b4 	movhi	r3,258
 100730c:	18e7a104 	addi	r3,r3,-24956
 1007310:	1805883a 	mov	r2,r3
 1007314:	dfc00317 	ldw	ra,12(sp)
 1007318:	dc800217 	ldw	r18,8(sp)
 100731c:	dc400117 	ldw	r17,4(sp)
 1007320:	dc000017 	ldw	r16,0(sp)
 1007324:	dec00404 	addi	sp,sp,16
 1007328:	f800283a 	ret
 100732c:	1009b740 	call	1009b74 <strcmp>
 1007330:	0007883a 	mov	r3,zero
 1007334:	103ff226 	beq	r2,zero,1007300 <_setlocale_r+0x54>
 1007338:	003ff506 	br	1007310 <_setlocale_r+0x64>

0100733c <setlocale>:
 100733c:	f811883a 	mov	r8,ra
 1007340:	100c1d00 	call	100c1d0 <_mcount>
 1007344:	403f883a 	mov	ra,r8
 1007348:	018040b4 	movhi	r6,258
 100734c:	319f9804 	addi	r6,r6,32352
 1007350:	2007883a 	mov	r3,r4
 1007354:	31000017 	ldw	r4,0(r6)
 1007358:	280d883a 	mov	r6,r5
 100735c:	180b883a 	mov	r5,r3
 1007360:	10072ac1 	jmpi	10072ac <_setlocale_r>

01007364 <__smakebuf_r>:
 1007364:	f811883a 	mov	r8,ra
 1007368:	100c1d00 	call	100c1d0 <_mcount>
 100736c:	403f883a 	mov	ra,r8
 1007370:	deffed04 	addi	sp,sp,-76
 1007374:	dfc01215 	stw	ra,72(sp)
 1007378:	dc801115 	stw	r18,68(sp)
 100737c:	dc401015 	stw	r17,64(sp)
 1007380:	dc000f15 	stw	r16,60(sp)
 1007384:	2880030b 	ldhu	r2,12(r5)
 1007388:	2821883a 	mov	r16,r5
 100738c:	2023883a 	mov	r17,r4
 1007390:	1080008c 	andi	r2,r2,2
 1007394:	10000b26 	beq	r2,zero,10073c4 <__smakebuf_r+0x60>
 1007398:	28c010c4 	addi	r3,r5,67
 100739c:	00800044 	movi	r2,1
 10073a0:	28800515 	stw	r2,20(r5)
 10073a4:	28c00415 	stw	r3,16(r5)
 10073a8:	28c00015 	stw	r3,0(r5)
 10073ac:	dfc01217 	ldw	ra,72(sp)
 10073b0:	dc801117 	ldw	r18,68(sp)
 10073b4:	dc401017 	ldw	r17,64(sp)
 10073b8:	dc000f17 	ldw	r16,60(sp)
 10073bc:	dec01304 	addi	sp,sp,76
 10073c0:	f800283a 	ret
 10073c4:	2940038f 	ldh	r5,14(r5)
 10073c8:	28002116 	blt	r5,zero,1007450 <__smakebuf_r+0xec>
 10073cc:	d80d883a 	mov	r6,sp
 10073d0:	100a0b00 	call	100a0b0 <_fstat_r>
 10073d4:	10001e16 	blt	r2,zero,1007450 <__smakebuf_r+0xec>
 10073d8:	d8800117 	ldw	r2,4(sp)
 10073dc:	00e00014 	movui	r3,32768
 10073e0:	113c000c 	andi	r4,r2,61440
 10073e4:	20c03126 	beq	r4,r3,10074ac <__smakebuf_r+0x148>
 10073e8:	8080030b 	ldhu	r2,12(r16)
 10073ec:	00c80004 	movi	r3,8192
 10073f0:	10820014 	ori	r2,r2,2048
 10073f4:	8080030d 	sth	r2,12(r16)
 10073f8:	20c01e26 	beq	r4,r3,1007474 <__smakebuf_r+0x110>
 10073fc:	04810004 	movi	r18,1024
 1007400:	8809883a 	mov	r4,r17
 1007404:	900b883a 	mov	r5,r18
 1007408:	10075040 	call	1007504 <_malloc_r>
 100740c:	1009883a 	mov	r4,r2
 1007410:	10003126 	beq	r2,zero,10074d8 <__smakebuf_r+0x174>
 1007414:	80c0030b 	ldhu	r3,12(r16)
 1007418:	00804034 	movhi	r2,256
 100741c:	10997d04 	addi	r2,r2,26100
 1007420:	88800f15 	stw	r2,60(r17)
 1007424:	18c02014 	ori	r3,r3,128
 1007428:	84800515 	stw	r18,20(r16)
 100742c:	80c0030d 	sth	r3,12(r16)
 1007430:	81000415 	stw	r4,16(r16)
 1007434:	81000015 	stw	r4,0(r16)
 1007438:	dfc01217 	ldw	ra,72(sp)
 100743c:	dc801117 	ldw	r18,68(sp)
 1007440:	dc401017 	ldw	r17,64(sp)
 1007444:	dc000f17 	ldw	r16,60(sp)
 1007448:	dec01304 	addi	sp,sp,76
 100744c:	f800283a 	ret
 1007450:	80c0030b 	ldhu	r3,12(r16)
 1007454:	1880200c 	andi	r2,r3,128
 1007458:	10000426 	beq	r2,zero,100746c <__smakebuf_r+0x108>
 100745c:	04801004 	movi	r18,64
 1007460:	18820014 	ori	r2,r3,2048
 1007464:	8080030d 	sth	r2,12(r16)
 1007468:	003fe506 	br	1007400 <__smakebuf_r+0x9c>
 100746c:	04810004 	movi	r18,1024
 1007470:	003ffb06 	br	1007460 <__smakebuf_r+0xfc>
 1007474:	8140038f 	ldh	r5,14(r16)
 1007478:	8809883a 	mov	r4,r17
 100747c:	100a1300 	call	100a130 <_isatty_r>
 1007480:	103fde26 	beq	r2,zero,10073fc <__smakebuf_r+0x98>
 1007484:	8080030b 	ldhu	r2,12(r16)
 1007488:	80c010c4 	addi	r3,r16,67
 100748c:	04810004 	movi	r18,1024
 1007490:	10800054 	ori	r2,r2,1
 1007494:	8080030d 	sth	r2,12(r16)
 1007498:	00800044 	movi	r2,1
 100749c:	80c00415 	stw	r3,16(r16)
 10074a0:	80800515 	stw	r2,20(r16)
 10074a4:	80c00015 	stw	r3,0(r16)
 10074a8:	003fd506 	br	1007400 <__smakebuf_r+0x9c>
 10074ac:	80c00a17 	ldw	r3,40(r16)
 10074b0:	00804074 	movhi	r2,257
 10074b4:	10a68304 	addi	r2,r2,-26100
 10074b8:	18bfcb1e 	bne	r3,r2,10073e8 <__smakebuf_r+0x84>
 10074bc:	8080030b 	ldhu	r2,12(r16)
 10074c0:	00c10004 	movi	r3,1024
 10074c4:	1825883a 	mov	r18,r3
 10074c8:	10c4b03a 	or	r2,r2,r3
 10074cc:	8080030d 	sth	r2,12(r16)
 10074d0:	80c01315 	stw	r3,76(r16)
 10074d4:	003fca06 	br	1007400 <__smakebuf_r+0x9c>
 10074d8:	8100030b 	ldhu	r4,12(r16)
 10074dc:	2080800c 	andi	r2,r4,512
 10074e0:	103fb21e 	bne	r2,zero,10073ac <__smakebuf_r+0x48>
 10074e4:	80c010c4 	addi	r3,r16,67
 10074e8:	21000094 	ori	r4,r4,2
 10074ec:	00800044 	movi	r2,1
 10074f0:	80800515 	stw	r2,20(r16)
 10074f4:	8100030d 	sth	r4,12(r16)
 10074f8:	80c00415 	stw	r3,16(r16)
 10074fc:	80c00015 	stw	r3,0(r16)
 1007500:	003faa06 	br	10073ac <__smakebuf_r+0x48>

01007504 <_malloc_r>:
 1007504:	f811883a 	mov	r8,ra
 1007508:	100c1d00 	call	100c1d0 <_mcount>
 100750c:	403f883a 	mov	ra,r8
 1007510:	defff604 	addi	sp,sp,-40
 1007514:	dfc00915 	stw	ra,36(sp)
 1007518:	df000815 	stw	fp,32(sp)
 100751c:	ddc00715 	stw	r23,28(sp)
 1007520:	dd800615 	stw	r22,24(sp)
 1007524:	dd400515 	stw	r21,20(sp)
 1007528:	dd000415 	stw	r20,16(sp)
 100752c:	dcc00315 	stw	r19,12(sp)
 1007530:	dc800215 	stw	r18,8(sp)
 1007534:	dc400115 	stw	r17,4(sp)
 1007538:	dc000015 	stw	r16,0(sp)
 100753c:	00800584 	movi	r2,22
 1007540:	28c002c4 	addi	r3,r5,11
 1007544:	2025883a 	mov	r18,r4
 1007548:	10c01236 	bltu	r2,r3,1007594 <_malloc_r+0x90>
 100754c:	04400404 	movi	r17,16
 1007550:	8940142e 	bgeu	r17,r5,10075a4 <_malloc_r+0xa0>
 1007554:	00800304 	movi	r2,12
 1007558:	0007883a 	mov	r3,zero
 100755c:	90800015 	stw	r2,0(r18)
 1007560:	1805883a 	mov	r2,r3
 1007564:	dfc00917 	ldw	ra,36(sp)
 1007568:	df000817 	ldw	fp,32(sp)
 100756c:	ddc00717 	ldw	r23,28(sp)
 1007570:	dd800617 	ldw	r22,24(sp)
 1007574:	dd400517 	ldw	r21,20(sp)
 1007578:	dd000417 	ldw	r20,16(sp)
 100757c:	dcc00317 	ldw	r19,12(sp)
 1007580:	dc800217 	ldw	r18,8(sp)
 1007584:	dc400117 	ldw	r17,4(sp)
 1007588:	dc000017 	ldw	r16,0(sp)
 100758c:	dec00a04 	addi	sp,sp,40
 1007590:	f800283a 	ret
 1007594:	00bffe04 	movi	r2,-8
 1007598:	18a2703a 	and	r17,r3,r2
 100759c:	883fed16 	blt	r17,zero,1007554 <_malloc_r+0x50>
 10075a0:	897fec36 	bltu	r17,r5,1007554 <_malloc_r+0x50>
 10075a4:	9009883a 	mov	r4,r18
 10075a8:	100c9c40 	call	100c9c4 <__malloc_lock>
 10075ac:	00807dc4 	movi	r2,503
 10075b0:	14402b2e 	bgeu	r2,r17,1007660 <_malloc_r+0x15c>
 10075b4:	8806d27a 	srli	r3,r17,9
 10075b8:	18003f1e 	bne	r3,zero,10076b8 <_malloc_r+0x1b4>
 10075bc:	880cd0fa 	srli	r6,r17,3
 10075c0:	300490fa 	slli	r2,r6,3
 10075c4:	02c040b4 	movhi	r11,258
 10075c8:	5ad9cd04 	addi	r11,r11,26420
 10075cc:	12cb883a 	add	r5,r2,r11
 10075d0:	2c000317 	ldw	r16,12(r5)
 10075d4:	580f883a 	mov	r7,r11
 10075d8:	2c00041e 	bne	r5,r16,10075ec <_malloc_r+0xe8>
 10075dc:	00000a06 	br	1007608 <_malloc_r+0x104>
 10075e0:	1800860e 	bge	r3,zero,10077fc <_malloc_r+0x2f8>
 10075e4:	84000317 	ldw	r16,12(r16)
 10075e8:	2c000726 	beq	r5,r16,1007608 <_malloc_r+0x104>
 10075ec:	80800117 	ldw	r2,4(r16)
 10075f0:	00ffff04 	movi	r3,-4
 10075f4:	10c8703a 	and	r4,r2,r3
 10075f8:	2447c83a 	sub	r3,r4,r17
 10075fc:	008003c4 	movi	r2,15
 1007600:	10fff70e 	bge	r2,r3,10075e0 <_malloc_r+0xdc>
 1007604:	31bfffc4 	addi	r6,r6,-1
 1007608:	32400044 	addi	r9,r6,1
 100760c:	028040b4 	movhi	r10,258
 1007610:	5299cf04 	addi	r10,r10,26428
 1007614:	54000217 	ldw	r16,8(r10)
 1007618:	8280a026 	beq	r16,r10,100789c <_malloc_r+0x398>
 100761c:	80800117 	ldw	r2,4(r16)
 1007620:	00ffff04 	movi	r3,-4
 1007624:	10ca703a 	and	r5,r2,r3
 1007628:	2c4dc83a 	sub	r6,r5,r17
 100762c:	008003c4 	movi	r2,15
 1007630:	11808316 	blt	r2,r6,1007840 <_malloc_r+0x33c>
 1007634:	52800315 	stw	r10,12(r10)
 1007638:	52800215 	stw	r10,8(r10)
 100763c:	30002916 	blt	r6,zero,10076e4 <_malloc_r+0x1e0>
 1007640:	8147883a 	add	r3,r16,r5
 1007644:	18800117 	ldw	r2,4(r3)
 1007648:	9009883a 	mov	r4,r18
 100764c:	10800054 	ori	r2,r2,1
 1007650:	18800115 	stw	r2,4(r3)
 1007654:	100cad80 	call	100cad8 <__malloc_unlock>
 1007658:	80c00204 	addi	r3,r16,8
 100765c:	003fc006 	br	1007560 <_malloc_r+0x5c>
 1007660:	02c040b4 	movhi	r11,258
 1007664:	5ad9cd04 	addi	r11,r11,26420
 1007668:	8ac5883a 	add	r2,r17,r11
 100766c:	14000317 	ldw	r16,12(r2)
 1007670:	580f883a 	mov	r7,r11
 1007674:	8806d0fa 	srli	r3,r17,3
 1007678:	14006c26 	beq	r2,r16,100782c <_malloc_r+0x328>
 100767c:	80c00117 	ldw	r3,4(r16)
 1007680:	00bfff04 	movi	r2,-4
 1007684:	81800317 	ldw	r6,12(r16)
 1007688:	1886703a 	and	r3,r3,r2
 100768c:	80c7883a 	add	r3,r16,r3
 1007690:	18800117 	ldw	r2,4(r3)
 1007694:	81400217 	ldw	r5,8(r16)
 1007698:	9009883a 	mov	r4,r18
 100769c:	10800054 	ori	r2,r2,1
 10076a0:	18800115 	stw	r2,4(r3)
 10076a4:	31400215 	stw	r5,8(r6)
 10076a8:	29800315 	stw	r6,12(r5)
 10076ac:	100cad80 	call	100cad8 <__malloc_unlock>
 10076b0:	80c00204 	addi	r3,r16,8
 10076b4:	003faa06 	br	1007560 <_malloc_r+0x5c>
 10076b8:	00800104 	movi	r2,4
 10076bc:	10c0052e 	bgeu	r2,r3,10076d4 <_malloc_r+0x1d0>
 10076c0:	00800504 	movi	r2,20
 10076c4:	10c07836 	bltu	r2,r3,10078a8 <_malloc_r+0x3a4>
 10076c8:	198016c4 	addi	r6,r3,91
 10076cc:	300490fa 	slli	r2,r6,3
 10076d0:	003fbc06 	br	10075c4 <_malloc_r+0xc0>
 10076d4:	8804d1ba 	srli	r2,r17,6
 10076d8:	11800e04 	addi	r6,r2,56
 10076dc:	300490fa 	slli	r2,r6,3
 10076e0:	003fb806 	br	10075c4 <_malloc_r+0xc0>
 10076e4:	00807fc4 	movi	r2,511
 10076e8:	1140bb36 	bltu	r2,r5,10079d8 <_malloc_r+0x4d4>
 10076ec:	2806d0fa 	srli	r3,r5,3
 10076f0:	573ffe04 	addi	fp,r10,-8
 10076f4:	00800044 	movi	r2,1
 10076f8:	180890fa 	slli	r4,r3,3
 10076fc:	1807d0ba 	srai	r3,r3,2
 1007700:	e1c00117 	ldw	r7,4(fp)
 1007704:	5909883a 	add	r4,r11,r4
 1007708:	21400217 	ldw	r5,8(r4)
 100770c:	10c4983a 	sll	r2,r2,r3
 1007710:	81000315 	stw	r4,12(r16)
 1007714:	81400215 	stw	r5,8(r16)
 1007718:	388eb03a 	or	r7,r7,r2
 100771c:	2c000315 	stw	r16,12(r5)
 1007720:	24000215 	stw	r16,8(r4)
 1007724:	e1c00115 	stw	r7,4(fp)
 1007728:	4807883a 	mov	r3,r9
 100772c:	4800cd16 	blt	r9,zero,1007a64 <_malloc_r+0x560>
 1007730:	1807d0ba 	srai	r3,r3,2
 1007734:	00800044 	movi	r2,1
 1007738:	10c8983a 	sll	r4,r2,r3
 100773c:	39004436 	bltu	r7,r4,1007850 <_malloc_r+0x34c>
 1007740:	21c4703a 	and	r2,r4,r7
 1007744:	10000a1e 	bne	r2,zero,1007770 <_malloc_r+0x26c>
 1007748:	2109883a 	add	r4,r4,r4
 100774c:	00bfff04 	movi	r2,-4
 1007750:	4884703a 	and	r2,r9,r2
 1007754:	3906703a 	and	r3,r7,r4
 1007758:	12400104 	addi	r9,r2,4
 100775c:	1800041e 	bne	r3,zero,1007770 <_malloc_r+0x26c>
 1007760:	2109883a 	add	r4,r4,r4
 1007764:	3904703a 	and	r2,r7,r4
 1007768:	4a400104 	addi	r9,r9,4
 100776c:	103ffc26 	beq	r2,zero,1007760 <_malloc_r+0x25c>
 1007770:	480490fa 	slli	r2,r9,3
 1007774:	4819883a 	mov	r12,r9
 1007778:	023fff04 	movi	r8,-4
 100777c:	589b883a 	add	r13,r11,r2
 1007780:	6807883a 	mov	r3,r13
 1007784:	014003c4 	movi	r5,15
 1007788:	1c000317 	ldw	r16,12(r3)
 100778c:	1c00041e 	bne	r3,r16,10077a0 <_malloc_r+0x29c>
 1007790:	0000a706 	br	1007a30 <_malloc_r+0x52c>
 1007794:	3000ab0e 	bge	r6,zero,1007a44 <_malloc_r+0x540>
 1007798:	84000317 	ldw	r16,12(r16)
 100779c:	1c00a426 	beq	r3,r16,1007a30 <_malloc_r+0x52c>
 10077a0:	80800117 	ldw	r2,4(r16)
 10077a4:	1204703a 	and	r2,r2,r8
 10077a8:	144dc83a 	sub	r6,r2,r17
 10077ac:	29bff90e 	bge	r5,r6,1007794 <_malloc_r+0x290>
 10077b0:	81000317 	ldw	r4,12(r16)
 10077b4:	80c00217 	ldw	r3,8(r16)
 10077b8:	89400054 	ori	r5,r17,1
 10077bc:	8445883a 	add	r2,r16,r17
 10077c0:	20c00215 	stw	r3,8(r4)
 10077c4:	19000315 	stw	r4,12(r3)
 10077c8:	81400115 	stw	r5,4(r16)
 10077cc:	1187883a 	add	r3,r2,r6
 10077d0:	31000054 	ori	r4,r6,1
 10077d4:	50800315 	stw	r2,12(r10)
 10077d8:	50800215 	stw	r2,8(r10)
 10077dc:	19800015 	stw	r6,0(r3)
 10077e0:	11000115 	stw	r4,4(r2)
 10077e4:	12800215 	stw	r10,8(r2)
 10077e8:	12800315 	stw	r10,12(r2)
 10077ec:	9009883a 	mov	r4,r18
 10077f0:	100cad80 	call	100cad8 <__malloc_unlock>
 10077f4:	80c00204 	addi	r3,r16,8
 10077f8:	003f5906 	br	1007560 <_malloc_r+0x5c>
 10077fc:	8109883a 	add	r4,r16,r4
 1007800:	20800117 	ldw	r2,4(r4)
 1007804:	80c00217 	ldw	r3,8(r16)
 1007808:	81400317 	ldw	r5,12(r16)
 100780c:	10800054 	ori	r2,r2,1
 1007810:	20800115 	stw	r2,4(r4)
 1007814:	28c00215 	stw	r3,8(r5)
 1007818:	19400315 	stw	r5,12(r3)
 100781c:	9009883a 	mov	r4,r18
 1007820:	100cad80 	call	100cad8 <__malloc_unlock>
 1007824:	80c00204 	addi	r3,r16,8
 1007828:	003f4d06 	br	1007560 <_malloc_r+0x5c>
 100782c:	80800204 	addi	r2,r16,8
 1007830:	14000317 	ldw	r16,12(r2)
 1007834:	143f911e 	bne	r2,r16,100767c <_malloc_r+0x178>
 1007838:	1a400084 	addi	r9,r3,2
 100783c:	003f7306 	br	100760c <_malloc_r+0x108>
 1007840:	88c00054 	ori	r3,r17,1
 1007844:	8445883a 	add	r2,r16,r17
 1007848:	80c00115 	stw	r3,4(r16)
 100784c:	003fdf06 	br	10077cc <_malloc_r+0x2c8>
 1007850:	e4000217 	ldw	r16,8(fp)
 1007854:	00bfff04 	movi	r2,-4
 1007858:	80c00117 	ldw	r3,4(r16)
 100785c:	802d883a 	mov	r22,r16
 1007860:	18aa703a 	and	r21,r3,r2
 1007864:	ac401636 	bltu	r21,r17,10078c0 <_malloc_r+0x3bc>
 1007868:	ac49c83a 	sub	r4,r21,r17
 100786c:	008003c4 	movi	r2,15
 1007870:	1100130e 	bge	r2,r4,10078c0 <_malloc_r+0x3bc>
 1007874:	88800054 	ori	r2,r17,1
 1007878:	8447883a 	add	r3,r16,r17
 100787c:	80800115 	stw	r2,4(r16)
 1007880:	20800054 	ori	r2,r4,1
 1007884:	18800115 	stw	r2,4(r3)
 1007888:	e0c00215 	stw	r3,8(fp)
 100788c:	9009883a 	mov	r4,r18
 1007890:	100cad80 	call	100cad8 <__malloc_unlock>
 1007894:	80c00204 	addi	r3,r16,8
 1007898:	003f3106 	br	1007560 <_malloc_r+0x5c>
 100789c:	39c00117 	ldw	r7,4(r7)
 10078a0:	573ffe04 	addi	fp,r10,-8
 10078a4:	003fa006 	br	1007728 <_malloc_r+0x224>
 10078a8:	00801504 	movi	r2,84
 10078ac:	10c06736 	bltu	r2,r3,1007a4c <_malloc_r+0x548>
 10078b0:	8804d33a 	srli	r2,r17,12
 10078b4:	11801b84 	addi	r6,r2,110
 10078b8:	300490fa 	slli	r2,r6,3
 10078bc:	003f4106 	br	10075c4 <_malloc_r+0xc0>
 10078c0:	d0975017 	ldw	r2,23872(gp)
 10078c4:	d0e00617 	ldw	r3,-32744(gp)
 10078c8:	053fffc4 	movi	r20,-1
 10078cc:	10800404 	addi	r2,r2,16
 10078d0:	88a7883a 	add	r19,r17,r2
 10078d4:	1d000326 	beq	r3,r20,10078e4 <_malloc_r+0x3e0>
 10078d8:	98c3ffc4 	addi	r3,r19,4095
 10078dc:	00bc0004 	movi	r2,-4096
 10078e0:	18a6703a 	and	r19,r3,r2
 10078e4:	9009883a 	mov	r4,r18
 10078e8:	980b883a 	mov	r5,r19
 10078ec:	100997c0 	call	100997c <_sbrk_r>
 10078f0:	1009883a 	mov	r4,r2
 10078f4:	15000426 	beq	r2,r20,1007908 <_malloc_r+0x404>
 10078f8:	854b883a 	add	r5,r16,r21
 10078fc:	1029883a 	mov	r20,r2
 1007900:	11405a2e 	bgeu	r2,r5,1007a6c <_malloc_r+0x568>
 1007904:	87000c26 	beq	r16,fp,1007938 <_malloc_r+0x434>
 1007908:	e4000217 	ldw	r16,8(fp)
 100790c:	80c00117 	ldw	r3,4(r16)
 1007910:	00bfff04 	movi	r2,-4
 1007914:	1884703a 	and	r2,r3,r2
 1007918:	14400336 	bltu	r2,r17,1007928 <_malloc_r+0x424>
 100791c:	1449c83a 	sub	r4,r2,r17
 1007920:	008003c4 	movi	r2,15
 1007924:	113fd316 	blt	r2,r4,1007874 <_malloc_r+0x370>
 1007928:	9009883a 	mov	r4,r18
 100792c:	100cad80 	call	100cad8 <__malloc_unlock>
 1007930:	0007883a 	mov	r3,zero
 1007934:	003f0a06 	br	1007560 <_malloc_r+0x5c>
 1007938:	05c040f4 	movhi	r23,259
 100793c:	bdd71a04 	addi	r23,r23,23656
 1007940:	b8800017 	ldw	r2,0(r23)
 1007944:	988d883a 	add	r6,r19,r2
 1007948:	b9800015 	stw	r6,0(r23)
 100794c:	d0e00617 	ldw	r3,-32744(gp)
 1007950:	00bfffc4 	movi	r2,-1
 1007954:	18808e26 	beq	r3,r2,1007b90 <_malloc_r+0x68c>
 1007958:	2145c83a 	sub	r2,r4,r5
 100795c:	3085883a 	add	r2,r6,r2
 1007960:	b8800015 	stw	r2,0(r23)
 1007964:	20c001cc 	andi	r3,r4,7
 1007968:	18005f1e 	bne	r3,zero,1007ae8 <_malloc_r+0x5e4>
 100796c:	000b883a 	mov	r5,zero
 1007970:	a4c5883a 	add	r2,r20,r19
 1007974:	1083ffcc 	andi	r2,r2,4095
 1007978:	00c40004 	movi	r3,4096
 100797c:	1887c83a 	sub	r3,r3,r2
 1007980:	28e7883a 	add	r19,r5,r3
 1007984:	9009883a 	mov	r4,r18
 1007988:	980b883a 	mov	r5,r19
 100798c:	100997c0 	call	100997c <_sbrk_r>
 1007990:	1007883a 	mov	r3,r2
 1007994:	00bfffc4 	movi	r2,-1
 1007998:	18807a26 	beq	r3,r2,1007b84 <_malloc_r+0x680>
 100799c:	1d05c83a 	sub	r2,r3,r20
 10079a0:	9885883a 	add	r2,r19,r2
 10079a4:	10c00054 	ori	r3,r2,1
 10079a8:	b8800017 	ldw	r2,0(r23)
 10079ac:	a021883a 	mov	r16,r20
 10079b0:	a0c00115 	stw	r3,4(r20)
 10079b4:	9885883a 	add	r2,r19,r2
 10079b8:	b8800015 	stw	r2,0(r23)
 10079bc:	e5000215 	stw	r20,8(fp)
 10079c0:	b7003626 	beq	r22,fp,1007a9c <_malloc_r+0x598>
 10079c4:	018003c4 	movi	r6,15
 10079c8:	35404b36 	bltu	r6,r21,1007af8 <_malloc_r+0x5f4>
 10079cc:	00800044 	movi	r2,1
 10079d0:	a0800115 	stw	r2,4(r20)
 10079d4:	003fcd06 	br	100790c <_malloc_r+0x408>
 10079d8:	2808d27a 	srli	r4,r5,9
 10079dc:	2000371e 	bne	r4,zero,1007abc <_malloc_r+0x5b8>
 10079e0:	2808d0fa 	srli	r4,r5,3
 10079e4:	200690fa 	slli	r3,r4,3
 10079e8:	1ad1883a 	add	r8,r3,r11
 10079ec:	41800217 	ldw	r6,8(r8)
 10079f0:	41805b26 	beq	r8,r6,1007b60 <_malloc_r+0x65c>
 10079f4:	30800117 	ldw	r2,4(r6)
 10079f8:	00ffff04 	movi	r3,-4
 10079fc:	10c4703a 	and	r2,r2,r3
 1007a00:	2880022e 	bgeu	r5,r2,1007a0c <_malloc_r+0x508>
 1007a04:	31800217 	ldw	r6,8(r6)
 1007a08:	41bffa1e 	bne	r8,r6,10079f4 <_malloc_r+0x4f0>
 1007a0c:	32000317 	ldw	r8,12(r6)
 1007a10:	39c00117 	ldw	r7,4(r7)
 1007a14:	82000315 	stw	r8,12(r16)
 1007a18:	81800215 	stw	r6,8(r16)
 1007a1c:	070040b4 	movhi	fp,258
 1007a20:	e719cd04 	addi	fp,fp,26420
 1007a24:	34000315 	stw	r16,12(r6)
 1007a28:	44000215 	stw	r16,8(r8)
 1007a2c:	003f3e06 	br	1007728 <_malloc_r+0x224>
 1007a30:	63000044 	addi	r12,r12,1
 1007a34:	608000cc 	andi	r2,r12,3
 1007a38:	10005d26 	beq	r2,zero,1007bb0 <_malloc_r+0x6ac>
 1007a3c:	18c00204 	addi	r3,r3,8
 1007a40:	003f5106 	br	1007788 <_malloc_r+0x284>
 1007a44:	8089883a 	add	r4,r16,r2
 1007a48:	003f6d06 	br	1007800 <_malloc_r+0x2fc>
 1007a4c:	00805504 	movi	r2,340
 1007a50:	10c02036 	bltu	r2,r3,1007ad4 <_malloc_r+0x5d0>
 1007a54:	8804d3fa 	srli	r2,r17,15
 1007a58:	11801dc4 	addi	r6,r2,119
 1007a5c:	300490fa 	slli	r2,r6,3
 1007a60:	003ed806 	br	10075c4 <_malloc_r+0xc0>
 1007a64:	48c000c4 	addi	r3,r9,3
 1007a68:	003f3106 	br	1007730 <_malloc_r+0x22c>
 1007a6c:	05c040f4 	movhi	r23,259
 1007a70:	bdd71a04 	addi	r23,r23,23656
 1007a74:	b8800017 	ldw	r2,0(r23)
 1007a78:	988d883a 	add	r6,r19,r2
 1007a7c:	b9800015 	stw	r6,0(r23)
 1007a80:	293fb21e 	bne	r5,r4,100794c <_malloc_r+0x448>
 1007a84:	2083ffcc 	andi	r2,r4,4095
 1007a88:	103fb01e 	bne	r2,zero,100794c <_malloc_r+0x448>
 1007a8c:	e4000217 	ldw	r16,8(fp)
 1007a90:	9d45883a 	add	r2,r19,r21
 1007a94:	10800054 	ori	r2,r2,1
 1007a98:	80800115 	stw	r2,4(r16)
 1007a9c:	b8c00017 	ldw	r3,0(r23)
 1007aa0:	d0975117 	ldw	r2,23876(gp)
 1007aa4:	10c0012e 	bgeu	r2,r3,1007aac <_malloc_r+0x5a8>
 1007aa8:	d0d75115 	stw	r3,23876(gp)
 1007aac:	d0975217 	ldw	r2,23880(gp)
 1007ab0:	10ff962e 	bgeu	r2,r3,100790c <_malloc_r+0x408>
 1007ab4:	d0d75215 	stw	r3,23880(gp)
 1007ab8:	003f9406 	br	100790c <_malloc_r+0x408>
 1007abc:	00800104 	movi	r2,4
 1007ac0:	11001e36 	bltu	r2,r4,1007b3c <_malloc_r+0x638>
 1007ac4:	2804d1ba 	srli	r2,r5,6
 1007ac8:	11000e04 	addi	r4,r2,56
 1007acc:	200690fa 	slli	r3,r4,3
 1007ad0:	003fc506 	br	10079e8 <_malloc_r+0x4e4>
 1007ad4:	00815504 	movi	r2,1364
 1007ad8:	10c01d2e 	bgeu	r2,r3,1007b50 <_malloc_r+0x64c>
 1007adc:	01801f84 	movi	r6,126
 1007ae0:	0080fc04 	movi	r2,1008
 1007ae4:	003eb706 	br	10075c4 <_malloc_r+0xc0>
 1007ae8:	00800204 	movi	r2,8
 1007aec:	10cbc83a 	sub	r5,r2,r3
 1007af0:	2169883a 	add	r20,r4,r5
 1007af4:	003f9e06 	br	1007970 <_malloc_r+0x46c>
 1007af8:	00bffe04 	movi	r2,-8
 1007afc:	a93ffd04 	addi	r4,r21,-12
 1007b00:	2088703a 	and	r4,r4,r2
 1007b04:	b10b883a 	add	r5,r22,r4
 1007b08:	00c00144 	movi	r3,5
 1007b0c:	28c00215 	stw	r3,8(r5)
 1007b10:	28c00115 	stw	r3,4(r5)
 1007b14:	b0800117 	ldw	r2,4(r22)
 1007b18:	1080004c 	andi	r2,r2,1
 1007b1c:	2084b03a 	or	r2,r4,r2
 1007b20:	b0800115 	stw	r2,4(r22)
 1007b24:	313fdd2e 	bgeu	r6,r4,1007a9c <_malloc_r+0x598>
 1007b28:	b1400204 	addi	r5,r22,8
 1007b2c:	9009883a 	mov	r4,r18
 1007b30:	10069040 	call	1006904 <_free_r>
 1007b34:	e4000217 	ldw	r16,8(fp)
 1007b38:	003fd806 	br	1007a9c <_malloc_r+0x598>
 1007b3c:	00800504 	movi	r2,20
 1007b40:	11001536 	bltu	r2,r4,1007b98 <_malloc_r+0x694>
 1007b44:	210016c4 	addi	r4,r4,91
 1007b48:	200690fa 	slli	r3,r4,3
 1007b4c:	003fa606 	br	10079e8 <_malloc_r+0x4e4>
 1007b50:	8804d4ba 	srli	r2,r17,18
 1007b54:	11801f04 	addi	r6,r2,124
 1007b58:	300490fa 	slli	r2,r6,3
 1007b5c:	003e9906 	br	10075c4 <_malloc_r+0xc0>
 1007b60:	2009d0ba 	srai	r4,r4,2
 1007b64:	014040b4 	movhi	r5,258
 1007b68:	2959cd04 	addi	r5,r5,26420
 1007b6c:	00c00044 	movi	r3,1
 1007b70:	28800117 	ldw	r2,4(r5)
 1007b74:	1906983a 	sll	r3,r3,r4
 1007b78:	10c4b03a 	or	r2,r2,r3
 1007b7c:	28800115 	stw	r2,4(r5)
 1007b80:	003fa306 	br	1007a10 <_malloc_r+0x50c>
 1007b84:	0027883a 	mov	r19,zero
 1007b88:	00c00044 	movi	r3,1
 1007b8c:	003f8606 	br	10079a8 <_malloc_r+0x4a4>
 1007b90:	d1200615 	stw	r4,-32744(gp)
 1007b94:	003f7306 	br	1007964 <_malloc_r+0x460>
 1007b98:	00801504 	movi	r2,84
 1007b9c:	11001936 	bltu	r2,r4,1007c04 <_malloc_r+0x700>
 1007ba0:	2804d33a 	srli	r2,r5,12
 1007ba4:	11001b84 	addi	r4,r2,110
 1007ba8:	200690fa 	slli	r3,r4,3
 1007bac:	003f8e06 	br	10079e8 <_malloc_r+0x4e4>
 1007bb0:	480b883a 	mov	r5,r9
 1007bb4:	6807883a 	mov	r3,r13
 1007bb8:	288000cc 	andi	r2,r5,3
 1007bbc:	18fffe04 	addi	r3,r3,-8
 1007bc0:	297fffc4 	addi	r5,r5,-1
 1007bc4:	10001526 	beq	r2,zero,1007c1c <_malloc_r+0x718>
 1007bc8:	18800217 	ldw	r2,8(r3)
 1007bcc:	10fffa26 	beq	r2,r3,1007bb8 <_malloc_r+0x6b4>
 1007bd0:	2109883a 	add	r4,r4,r4
 1007bd4:	393f1e36 	bltu	r7,r4,1007850 <_malloc_r+0x34c>
 1007bd8:	203f1d26 	beq	r4,zero,1007850 <_malloc_r+0x34c>
 1007bdc:	21c4703a 	and	r2,r4,r7
 1007be0:	10000226 	beq	r2,zero,1007bec <_malloc_r+0x6e8>
 1007be4:	6013883a 	mov	r9,r12
 1007be8:	003ee106 	br	1007770 <_malloc_r+0x26c>
 1007bec:	2109883a 	add	r4,r4,r4
 1007bf0:	3904703a 	and	r2,r7,r4
 1007bf4:	63000104 	addi	r12,r12,4
 1007bf8:	103ffc26 	beq	r2,zero,1007bec <_malloc_r+0x6e8>
 1007bfc:	6013883a 	mov	r9,r12
 1007c00:	003edb06 	br	1007770 <_malloc_r+0x26c>
 1007c04:	00805504 	movi	r2,340
 1007c08:	11000836 	bltu	r2,r4,1007c2c <_malloc_r+0x728>
 1007c0c:	2804d3fa 	srli	r2,r5,15
 1007c10:	11001dc4 	addi	r4,r2,119
 1007c14:	200690fa 	slli	r3,r4,3
 1007c18:	003f7306 	br	10079e8 <_malloc_r+0x4e4>
 1007c1c:	0104303a 	nor	r2,zero,r4
 1007c20:	388e703a 	and	r7,r7,r2
 1007c24:	e1c00115 	stw	r7,4(fp)
 1007c28:	003fe906 	br	1007bd0 <_malloc_r+0x6cc>
 1007c2c:	00815504 	movi	r2,1364
 1007c30:	1100032e 	bgeu	r2,r4,1007c40 <_malloc_r+0x73c>
 1007c34:	01001f84 	movi	r4,126
 1007c38:	00c0fc04 	movi	r3,1008
 1007c3c:	003f6a06 	br	10079e8 <_malloc_r+0x4e4>
 1007c40:	2804d4ba 	srli	r2,r5,18
 1007c44:	11001f04 	addi	r4,r2,124
 1007c48:	200690fa 	slli	r3,r4,3
 1007c4c:	003f6606 	br	10079e8 <_malloc_r+0x4e4>

01007c50 <memchr>:
 1007c50:	f811883a 	mov	r8,ra
 1007c54:	100c1d00 	call	100c1d0 <_mcount>
 1007c58:	403f883a 	mov	ra,r8
 1007c5c:	008000c4 	movi	r2,3
 1007c60:	29403fcc 	andi	r5,r5,255
 1007c64:	2007883a 	mov	r3,r4
 1007c68:	1180022e 	bgeu	r2,r6,1007c74 <memchr+0x24>
 1007c6c:	2084703a 	and	r2,r4,r2
 1007c70:	10000b26 	beq	r2,zero,1007ca0 <memchr+0x50>
 1007c74:	313fffc4 	addi	r4,r6,-1
 1007c78:	3000051e 	bne	r6,zero,1007c90 <memchr+0x40>
 1007c7c:	00002c06 	br	1007d30 <memchr+0xe0>
 1007c80:	213fffc4 	addi	r4,r4,-1
 1007c84:	00bfffc4 	movi	r2,-1
 1007c88:	18c00044 	addi	r3,r3,1
 1007c8c:	20802826 	beq	r4,r2,1007d30 <memchr+0xe0>
 1007c90:	18800003 	ldbu	r2,0(r3)
 1007c94:	28bffa1e 	bne	r5,r2,1007c80 <memchr+0x30>
 1007c98:	1805883a 	mov	r2,r3
 1007c9c:	f800283a 	ret
 1007ca0:	0011883a 	mov	r8,zero
 1007ca4:	0007883a 	mov	r3,zero
 1007ca8:	01c00104 	movi	r7,4
 1007cac:	4004923a 	slli	r2,r8,8
 1007cb0:	18c00044 	addi	r3,r3,1
 1007cb4:	1151883a 	add	r8,r2,r5
 1007cb8:	19fffc1e 	bne	r3,r7,1007cac <memchr+0x5c>
 1007cbc:	02bfbff4 	movhi	r10,65279
 1007cc0:	52bfbfc4 	addi	r10,r10,-257
 1007cc4:	02602074 	movhi	r9,32897
 1007cc8:	4a602004 	addi	r9,r9,-32640
 1007ccc:	02c000c4 	movi	r11,3
 1007cd0:	20800017 	ldw	r2,0(r4)
 1007cd4:	31bfff04 	addi	r6,r6,-4
 1007cd8:	200f883a 	mov	r7,r4
 1007cdc:	1204f03a 	xor	r2,r2,r8
 1007ce0:	1287883a 	add	r3,r2,r10
 1007ce4:	1a46703a 	and	r3,r3,r9
 1007ce8:	0084303a 	nor	r2,zero,r2
 1007cec:	10c4703a 	and	r2,r2,r3
 1007cf0:	10000b26 	beq	r2,zero,1007d20 <memchr+0xd0>
 1007cf4:	20800003 	ldbu	r2,0(r4)
 1007cf8:	28800f26 	beq	r5,r2,1007d38 <memchr+0xe8>
 1007cfc:	20800043 	ldbu	r2,1(r4)
 1007d00:	21c00044 	addi	r7,r4,1
 1007d04:	28800c26 	beq	r5,r2,1007d38 <memchr+0xe8>
 1007d08:	20800083 	ldbu	r2,2(r4)
 1007d0c:	21c00084 	addi	r7,r4,2
 1007d10:	28800926 	beq	r5,r2,1007d38 <memchr+0xe8>
 1007d14:	208000c3 	ldbu	r2,3(r4)
 1007d18:	21c000c4 	addi	r7,r4,3
 1007d1c:	28800626 	beq	r5,r2,1007d38 <memchr+0xe8>
 1007d20:	21000104 	addi	r4,r4,4
 1007d24:	59bfea36 	bltu	r11,r6,1007cd0 <memchr+0x80>
 1007d28:	2007883a 	mov	r3,r4
 1007d2c:	003fd106 	br	1007c74 <memchr+0x24>
 1007d30:	0005883a 	mov	r2,zero
 1007d34:	f800283a 	ret
 1007d38:	3805883a 	mov	r2,r7
 1007d3c:	f800283a 	ret

01007d40 <memcpy>:
 1007d40:	f811883a 	mov	r8,ra
 1007d44:	100c1d00 	call	100c1d0 <_mcount>
 1007d48:	403f883a 	mov	ra,r8
 1007d4c:	01c003c4 	movi	r7,15
 1007d50:	2007883a 	mov	r3,r4
 1007d54:	3980032e 	bgeu	r7,r6,1007d64 <memcpy+0x24>
 1007d58:	2904b03a 	or	r2,r5,r4
 1007d5c:	108000cc 	andi	r2,r2,3
 1007d60:	10000926 	beq	r2,zero,1007d88 <memcpy+0x48>
 1007d64:	30000626 	beq	r6,zero,1007d80 <memcpy+0x40>
 1007d68:	30cd883a 	add	r6,r6,r3
 1007d6c:	28800003 	ldbu	r2,0(r5)
 1007d70:	29400044 	addi	r5,r5,1
 1007d74:	18800005 	stb	r2,0(r3)
 1007d78:	18c00044 	addi	r3,r3,1
 1007d7c:	30fffb1e 	bne	r6,r3,1007d6c <memcpy+0x2c>
 1007d80:	2005883a 	mov	r2,r4
 1007d84:	f800283a 	ret
 1007d88:	3811883a 	mov	r8,r7
 1007d8c:	200f883a 	mov	r7,r4
 1007d90:	28c00017 	ldw	r3,0(r5)
 1007d94:	31bffc04 	addi	r6,r6,-16
 1007d98:	38c00015 	stw	r3,0(r7)
 1007d9c:	28800117 	ldw	r2,4(r5)
 1007da0:	38800115 	stw	r2,4(r7)
 1007da4:	28c00217 	ldw	r3,8(r5)
 1007da8:	38c00215 	stw	r3,8(r7)
 1007dac:	28800317 	ldw	r2,12(r5)
 1007db0:	29400404 	addi	r5,r5,16
 1007db4:	38800315 	stw	r2,12(r7)
 1007db8:	39c00404 	addi	r7,r7,16
 1007dbc:	41bff436 	bltu	r8,r6,1007d90 <memcpy+0x50>
 1007dc0:	008000c4 	movi	r2,3
 1007dc4:	1180072e 	bgeu	r2,r6,1007de4 <memcpy+0xa4>
 1007dc8:	1007883a 	mov	r3,r2
 1007dcc:	28800017 	ldw	r2,0(r5)
 1007dd0:	31bfff04 	addi	r6,r6,-4
 1007dd4:	29400104 	addi	r5,r5,4
 1007dd8:	38800015 	stw	r2,0(r7)
 1007ddc:	39c00104 	addi	r7,r7,4
 1007de0:	19bffa36 	bltu	r3,r6,1007dcc <memcpy+0x8c>
 1007de4:	3807883a 	mov	r3,r7
 1007de8:	003fde06 	br	1007d64 <memcpy+0x24>

01007dec <memmove>:
 1007dec:	f811883a 	mov	r8,ra
 1007df0:	100c1d00 	call	100c1d0 <_mcount>
 1007df4:	403f883a 	mov	ra,r8
 1007df8:	2807883a 	mov	r3,r5
 1007dfc:	2011883a 	mov	r8,r4
 1007e00:	29000c2e 	bgeu	r5,r4,1007e34 <memmove+0x48>
 1007e04:	298f883a 	add	r7,r5,r6
 1007e08:	21c00a2e 	bgeu	r4,r7,1007e34 <memmove+0x48>
 1007e0c:	30000726 	beq	r6,zero,1007e2c <memmove+0x40>
 1007e10:	2187883a 	add	r3,r4,r6
 1007e14:	198dc83a 	sub	r6,r3,r6
 1007e18:	39ffffc4 	addi	r7,r7,-1
 1007e1c:	38800003 	ldbu	r2,0(r7)
 1007e20:	18ffffc4 	addi	r3,r3,-1
 1007e24:	18800005 	stb	r2,0(r3)
 1007e28:	19bffb1e 	bne	r3,r6,1007e18 <memmove+0x2c>
 1007e2c:	2005883a 	mov	r2,r4
 1007e30:	f800283a 	ret
 1007e34:	01c003c4 	movi	r7,15
 1007e38:	39800a36 	bltu	r7,r6,1007e64 <memmove+0x78>
 1007e3c:	303ffb26 	beq	r6,zero,1007e2c <memmove+0x40>
 1007e40:	400f883a 	mov	r7,r8
 1007e44:	320d883a 	add	r6,r6,r8
 1007e48:	28800003 	ldbu	r2,0(r5)
 1007e4c:	29400044 	addi	r5,r5,1
 1007e50:	38800005 	stb	r2,0(r7)
 1007e54:	39c00044 	addi	r7,r7,1
 1007e58:	39bffb1e 	bne	r7,r6,1007e48 <memmove+0x5c>
 1007e5c:	2005883a 	mov	r2,r4
 1007e60:	f800283a 	ret
 1007e64:	1904b03a 	or	r2,r3,r4
 1007e68:	108000cc 	andi	r2,r2,3
 1007e6c:	103ff31e 	bne	r2,zero,1007e3c <memmove+0x50>
 1007e70:	3811883a 	mov	r8,r7
 1007e74:	180b883a 	mov	r5,r3
 1007e78:	200f883a 	mov	r7,r4
 1007e7c:	28c00017 	ldw	r3,0(r5)
 1007e80:	31bffc04 	addi	r6,r6,-16
 1007e84:	38c00015 	stw	r3,0(r7)
 1007e88:	28800117 	ldw	r2,4(r5)
 1007e8c:	38800115 	stw	r2,4(r7)
 1007e90:	28c00217 	ldw	r3,8(r5)
 1007e94:	38c00215 	stw	r3,8(r7)
 1007e98:	28800317 	ldw	r2,12(r5)
 1007e9c:	29400404 	addi	r5,r5,16
 1007ea0:	38800315 	stw	r2,12(r7)
 1007ea4:	39c00404 	addi	r7,r7,16
 1007ea8:	41bff436 	bltu	r8,r6,1007e7c <memmove+0x90>
 1007eac:	008000c4 	movi	r2,3
 1007eb0:	1180072e 	bgeu	r2,r6,1007ed0 <memmove+0xe4>
 1007eb4:	1007883a 	mov	r3,r2
 1007eb8:	28800017 	ldw	r2,0(r5)
 1007ebc:	31bfff04 	addi	r6,r6,-4
 1007ec0:	29400104 	addi	r5,r5,4
 1007ec4:	38800015 	stw	r2,0(r7)
 1007ec8:	39c00104 	addi	r7,r7,4
 1007ecc:	19bffa36 	bltu	r3,r6,1007eb8 <memmove+0xcc>
 1007ed0:	3811883a 	mov	r8,r7
 1007ed4:	003fd906 	br	1007e3c <memmove+0x50>

01007ed8 <memset>:
 1007ed8:	f811883a 	mov	r8,ra
 1007edc:	100c1d00 	call	100c1d0 <_mcount>
 1007ee0:	403f883a 	mov	ra,r8
 1007ee4:	008000c4 	movi	r2,3
 1007ee8:	29403fcc 	andi	r5,r5,255
 1007eec:	2007883a 	mov	r3,r4
 1007ef0:	1180022e 	bgeu	r2,r6,1007efc <memset+0x24>
 1007ef4:	2084703a 	and	r2,r4,r2
 1007ef8:	10000826 	beq	r2,zero,1007f1c <memset+0x44>
 1007efc:	30000526 	beq	r6,zero,1007f14 <memset+0x3c>
 1007f00:	2805883a 	mov	r2,r5
 1007f04:	30cd883a 	add	r6,r6,r3
 1007f08:	18800005 	stb	r2,0(r3)
 1007f0c:	18c00044 	addi	r3,r3,1
 1007f10:	19bffd1e 	bne	r3,r6,1007f08 <memset+0x30>
 1007f14:	2005883a 	mov	r2,r4
 1007f18:	f800283a 	ret
 1007f1c:	2804923a 	slli	r2,r5,8
 1007f20:	020003c4 	movi	r8,15
 1007f24:	200f883a 	mov	r7,r4
 1007f28:	2884b03a 	or	r2,r5,r2
 1007f2c:	1006943a 	slli	r3,r2,16
 1007f30:	10c6b03a 	or	r3,r2,r3
 1007f34:	41800a2e 	bgeu	r8,r6,1007f60 <memset+0x88>
 1007f38:	4005883a 	mov	r2,r8
 1007f3c:	31bffc04 	addi	r6,r6,-16
 1007f40:	38c00015 	stw	r3,0(r7)
 1007f44:	38c00115 	stw	r3,4(r7)
 1007f48:	38c00215 	stw	r3,8(r7)
 1007f4c:	38c00315 	stw	r3,12(r7)
 1007f50:	39c00404 	addi	r7,r7,16
 1007f54:	11bff936 	bltu	r2,r6,1007f3c <memset+0x64>
 1007f58:	008000c4 	movi	r2,3
 1007f5c:	1180052e 	bgeu	r2,r6,1007f74 <memset+0x9c>
 1007f60:	31bfff04 	addi	r6,r6,-4
 1007f64:	008000c4 	movi	r2,3
 1007f68:	38c00015 	stw	r3,0(r7)
 1007f6c:	39c00104 	addi	r7,r7,4
 1007f70:	11bffb36 	bltu	r2,r6,1007f60 <memset+0x88>
 1007f74:	3807883a 	mov	r3,r7
 1007f78:	003fe006 	br	1007efc <memset+0x24>

01007f7c <_Bfree>:
 1007f7c:	f811883a 	mov	r8,ra
 1007f80:	100c1d00 	call	100c1d0 <_mcount>
 1007f84:	403f883a 	mov	ra,r8
 1007f88:	28000826 	beq	r5,zero,1007fac <_Bfree+0x30>
 1007f8c:	28800117 	ldw	r2,4(r5)
 1007f90:	21001317 	ldw	r4,76(r4)
 1007f94:	1085883a 	add	r2,r2,r2
 1007f98:	1085883a 	add	r2,r2,r2
 1007f9c:	1105883a 	add	r2,r2,r4
 1007fa0:	10c00017 	ldw	r3,0(r2)
 1007fa4:	28c00015 	stw	r3,0(r5)
 1007fa8:	11400015 	stw	r5,0(r2)
 1007fac:	f800283a 	ret

01007fb0 <__hi0bits>:
 1007fb0:	f811883a 	mov	r8,ra
 1007fb4:	100c1d00 	call	100c1d0 <_mcount>
 1007fb8:	403f883a 	mov	ra,r8
 1007fbc:	20bfffec 	andhi	r2,r4,65535
 1007fc0:	10001426 	beq	r2,zero,1008014 <__hi0bits+0x64>
 1007fc4:	0007883a 	mov	r3,zero
 1007fc8:	20bfc02c 	andhi	r2,r4,65280
 1007fcc:	1000021e 	bne	r2,zero,1007fd8 <__hi0bits+0x28>
 1007fd0:	2008923a 	slli	r4,r4,8
 1007fd4:	18c00204 	addi	r3,r3,8
 1007fd8:	20bc002c 	andhi	r2,r4,61440
 1007fdc:	1000021e 	bne	r2,zero,1007fe8 <__hi0bits+0x38>
 1007fe0:	2008913a 	slli	r4,r4,4
 1007fe4:	18c00104 	addi	r3,r3,4
 1007fe8:	20b0002c 	andhi	r2,r4,49152
 1007fec:	1000031e 	bne	r2,zero,1007ffc <__hi0bits+0x4c>
 1007ff0:	2105883a 	add	r2,r4,r4
 1007ff4:	18c00084 	addi	r3,r3,2
 1007ff8:	1089883a 	add	r4,r2,r2
 1007ffc:	20000316 	blt	r4,zero,100800c <__hi0bits+0x5c>
 1008000:	2090002c 	andhi	r2,r4,16384
 1008004:	10000626 	beq	r2,zero,1008020 <__hi0bits+0x70>
 1008008:	18c00044 	addi	r3,r3,1
 100800c:	1805883a 	mov	r2,r3
 1008010:	f800283a 	ret
 1008014:	2008943a 	slli	r4,r4,16
 1008018:	00c00404 	movi	r3,16
 100801c:	003fea06 	br	1007fc8 <__hi0bits+0x18>
 1008020:	00c00804 	movi	r3,32
 1008024:	1805883a 	mov	r2,r3
 1008028:	f800283a 	ret

0100802c <__lo0bits>:
 100802c:	f811883a 	mov	r8,ra
 1008030:	100c1d00 	call	100c1d0 <_mcount>
 1008034:	403f883a 	mov	ra,r8
 1008038:	20c00017 	ldw	r3,0(r4)
 100803c:	188001cc 	andi	r2,r3,7
 1008040:	10000a26 	beq	r2,zero,100806c <__lo0bits+0x40>
 1008044:	1880004c 	andi	r2,r3,1
 1008048:	1005003a 	cmpeq	r2,r2,zero
 100804c:	10002126 	beq	r2,zero,10080d4 <__lo0bits+0xa8>
 1008050:	1880008c 	andi	r2,r3,2
 1008054:	1000251e 	bne	r2,zero,10080ec <__lo0bits+0xc0>
 1008058:	1804d0ba 	srli	r2,r3,2
 100805c:	01400084 	movi	r5,2
 1008060:	20800015 	stw	r2,0(r4)
 1008064:	2805883a 	mov	r2,r5
 1008068:	f800283a 	ret
 100806c:	18bfffcc 	andi	r2,r3,65535
 1008070:	10001526 	beq	r2,zero,10080c8 <__lo0bits+0x9c>
 1008074:	000b883a 	mov	r5,zero
 1008078:	18803fcc 	andi	r2,r3,255
 100807c:	1000021e 	bne	r2,zero,1008088 <__lo0bits+0x5c>
 1008080:	1806d23a 	srli	r3,r3,8
 1008084:	29400204 	addi	r5,r5,8
 1008088:	188003cc 	andi	r2,r3,15
 100808c:	1000021e 	bne	r2,zero,1008098 <__lo0bits+0x6c>
 1008090:	1806d13a 	srli	r3,r3,4
 1008094:	29400104 	addi	r5,r5,4
 1008098:	188000cc 	andi	r2,r3,3
 100809c:	1000021e 	bne	r2,zero,10080a8 <__lo0bits+0x7c>
 10080a0:	1806d0ba 	srli	r3,r3,2
 10080a4:	29400084 	addi	r5,r5,2
 10080a8:	1880004c 	andi	r2,r3,1
 10080ac:	1000031e 	bne	r2,zero,10080bc <__lo0bits+0x90>
 10080b0:	1806d07a 	srli	r3,r3,1
 10080b4:	18000a26 	beq	r3,zero,10080e0 <__lo0bits+0xb4>
 10080b8:	29400044 	addi	r5,r5,1
 10080bc:	2805883a 	mov	r2,r5
 10080c0:	20c00015 	stw	r3,0(r4)
 10080c4:	f800283a 	ret
 10080c8:	1806d43a 	srli	r3,r3,16
 10080cc:	01400404 	movi	r5,16
 10080d0:	003fe906 	br	1008078 <__lo0bits+0x4c>
 10080d4:	000b883a 	mov	r5,zero
 10080d8:	2805883a 	mov	r2,r5
 10080dc:	f800283a 	ret
 10080e0:	01400804 	movi	r5,32
 10080e4:	2805883a 	mov	r2,r5
 10080e8:	f800283a 	ret
 10080ec:	1804d07a 	srli	r2,r3,1
 10080f0:	01400044 	movi	r5,1
 10080f4:	20800015 	stw	r2,0(r4)
 10080f8:	003fda06 	br	1008064 <__lo0bits+0x38>

010080fc <__mcmp>:
 10080fc:	f811883a 	mov	r8,ra
 1008100:	100c1d00 	call	100c1d0 <_mcount>
 1008104:	403f883a 	mov	ra,r8
 1008108:	20800417 	ldw	r2,16(r4)
 100810c:	28c00417 	ldw	r3,16(r5)
 1008110:	10cfc83a 	sub	r7,r2,r3
 1008114:	38000c1e 	bne	r7,zero,1008148 <__mcmp+0x4c>
 1008118:	18c5883a 	add	r2,r3,r3
 100811c:	1085883a 	add	r2,r2,r2
 1008120:	10c00504 	addi	r3,r2,20
 1008124:	21000504 	addi	r4,r4,20
 1008128:	28cb883a 	add	r5,r5,r3
 100812c:	2085883a 	add	r2,r4,r2
 1008130:	10bfff04 	addi	r2,r2,-4
 1008134:	297fff04 	addi	r5,r5,-4
 1008138:	11800017 	ldw	r6,0(r2)
 100813c:	28c00017 	ldw	r3,0(r5)
 1008140:	30c0031e 	bne	r6,r3,1008150 <__mcmp+0x54>
 1008144:	20bffa36 	bltu	r4,r2,1008130 <__mcmp+0x34>
 1008148:	3805883a 	mov	r2,r7
 100814c:	f800283a 	ret
 1008150:	30c00336 	bltu	r6,r3,1008160 <__mcmp+0x64>
 1008154:	01c00044 	movi	r7,1
 1008158:	3805883a 	mov	r2,r7
 100815c:	f800283a 	ret
 1008160:	01ffffc4 	movi	r7,-1
 1008164:	003ff806 	br	1008148 <__mcmp+0x4c>

01008168 <__ulp>:
 1008168:	f811883a 	mov	r8,ra
 100816c:	100c1d00 	call	100c1d0 <_mcount>
 1008170:	403f883a 	mov	ra,r8
 1008174:	013f3034 	movhi	r4,64704
 1008178:	295ffc2c 	andhi	r5,r5,32752
 100817c:	290b883a 	add	r5,r5,r4
 1008180:	0145c83a 	sub	r2,zero,r5
 1008184:	1007d53a 	srai	r3,r2,20
 1008188:	000d883a 	mov	r6,zero
 100818c:	0140040e 	bge	zero,r5,10081a0 <__ulp+0x38>
 1008190:	280f883a 	mov	r7,r5
 1008194:	3807883a 	mov	r3,r7
 1008198:	3005883a 	mov	r2,r6
 100819c:	f800283a 	ret
 10081a0:	008004c4 	movi	r2,19
 10081a4:	193ffb04 	addi	r4,r3,-20
 10081a8:	10c00c0e 	bge	r2,r3,10081dc <__ulp+0x74>
 10081ac:	008007c4 	movi	r2,31
 10081b0:	1107c83a 	sub	r3,r2,r4
 10081b4:	00800784 	movi	r2,30
 10081b8:	01400044 	movi	r5,1
 10081bc:	11000216 	blt	r2,r4,10081c8 <__ulp+0x60>
 10081c0:	00800044 	movi	r2,1
 10081c4:	10ca983a 	sll	r5,r2,r3
 10081c8:	000f883a 	mov	r7,zero
 10081cc:	280d883a 	mov	r6,r5
 10081d0:	3807883a 	mov	r3,r7
 10081d4:	3005883a 	mov	r2,r6
 10081d8:	f800283a 	ret
 10081dc:	00800234 	movhi	r2,8
 10081e0:	10cfd83a 	sra	r7,r2,r3
 10081e4:	000d883a 	mov	r6,zero
 10081e8:	3005883a 	mov	r2,r6
 10081ec:	3807883a 	mov	r3,r7
 10081f0:	f800283a 	ret

010081f4 <__b2d>:
 10081f4:	f811883a 	mov	r8,ra
 10081f8:	100c1d00 	call	100c1d0 <_mcount>
 10081fc:	403f883a 	mov	ra,r8
 1008200:	defff904 	addi	sp,sp,-28
 1008204:	dfc00615 	stw	ra,24(sp)
 1008208:	dd400515 	stw	r21,20(sp)
 100820c:	dd000415 	stw	r20,16(sp)
 1008210:	dcc00315 	stw	r19,12(sp)
 1008214:	dc800215 	stw	r18,8(sp)
 1008218:	dc400115 	stw	r17,4(sp)
 100821c:	dc000015 	stw	r16,0(sp)
 1008220:	20800417 	ldw	r2,16(r4)
 1008224:	25000504 	addi	r20,r4,20
 1008228:	2823883a 	mov	r17,r5
 100822c:	1085883a 	add	r2,r2,r2
 1008230:	1085883a 	add	r2,r2,r2
 1008234:	a0a1883a 	add	r16,r20,r2
 1008238:	857fff17 	ldw	r21,-4(r16)
 100823c:	a809883a 	mov	r4,r21
 1008240:	1007fb00 	call	1007fb0 <__hi0bits>
 1008244:	100b883a 	mov	r5,r2
 1008248:	00800804 	movi	r2,32
 100824c:	1145c83a 	sub	r2,r2,r5
 1008250:	88800015 	stw	r2,0(r17)
 1008254:	00800284 	movi	r2,10
 1008258:	80ffff04 	addi	r3,r16,-4
 100825c:	11401416 	blt	r2,r5,10082b0 <__b2d+0xbc>
 1008260:	008002c4 	movi	r2,11
 1008264:	1149c83a 	sub	r4,r2,r5
 1008268:	a0c02736 	bltu	r20,r3,1008308 <__b2d+0x114>
 100826c:	000d883a 	mov	r6,zero
 1008270:	28800544 	addi	r2,r5,21
 1008274:	a906d83a 	srl	r3,r21,r4
 1008278:	a884983a 	sll	r2,r21,r2
 100827c:	1ccffc34 	orhi	r19,r3,16368
 1008280:	11a4b03a 	or	r18,r2,r6
 1008284:	9005883a 	mov	r2,r18
 1008288:	9807883a 	mov	r3,r19
 100828c:	dfc00617 	ldw	ra,24(sp)
 1008290:	dd400517 	ldw	r21,20(sp)
 1008294:	dd000417 	ldw	r20,16(sp)
 1008298:	dcc00317 	ldw	r19,12(sp)
 100829c:	dc800217 	ldw	r18,8(sp)
 10082a0:	dc400117 	ldw	r17,4(sp)
 10082a4:	dc000017 	ldw	r16,0(sp)
 10082a8:	dec00704 	addi	sp,sp,28
 10082ac:	f800283a 	ret
 10082b0:	a0c00e36 	bltu	r20,r3,10082ec <__b2d+0xf8>
 10082b4:	293ffd44 	addi	r4,r5,-11
 10082b8:	000d883a 	mov	r6,zero
 10082bc:	20000f26 	beq	r4,zero,10082fc <__b2d+0x108>
 10082c0:	00800804 	movi	r2,32
 10082c4:	110bc83a 	sub	r5,r2,r4
 10082c8:	a0c01236 	bltu	r20,r3,1008314 <__b2d+0x120>
 10082cc:	000f883a 	mov	r7,zero
 10082d0:	a904983a 	sll	r2,r21,r4
 10082d4:	3146d83a 	srl	r3,r6,r5
 10082d8:	3108983a 	sll	r4,r6,r4
 10082dc:	108ffc34 	orhi	r2,r2,16368
 10082e0:	18a6b03a 	or	r19,r3,r2
 10082e4:	3924b03a 	or	r18,r7,r4
 10082e8:	003fe606 	br	1008284 <__b2d+0x90>
 10082ec:	293ffd44 	addi	r4,r5,-11
 10082f0:	81bffe17 	ldw	r6,-8(r16)
 10082f4:	80fffe04 	addi	r3,r16,-8
 10082f8:	203ff11e 	bne	r4,zero,10082c0 <__b2d+0xcc>
 10082fc:	accffc34 	orhi	r19,r21,16368
 1008300:	3025883a 	mov	r18,r6
 1008304:	003fdf06 	br	1008284 <__b2d+0x90>
 1008308:	18bfff17 	ldw	r2,-4(r3)
 100830c:	110cd83a 	srl	r6,r2,r4
 1008310:	003fd706 	br	1008270 <__b2d+0x7c>
 1008314:	18bfff17 	ldw	r2,-4(r3)
 1008318:	114ed83a 	srl	r7,r2,r5
 100831c:	003fec06 	br	10082d0 <__b2d+0xdc>

01008320 <__ratio>:
 1008320:	f811883a 	mov	r8,ra
 1008324:	100c1d00 	call	100c1d0 <_mcount>
 1008328:	403f883a 	mov	ra,r8
 100832c:	defff904 	addi	sp,sp,-28
 1008330:	dfc00615 	stw	ra,24(sp)
 1008334:	dd000515 	stw	r20,20(sp)
 1008338:	dcc00415 	stw	r19,16(sp)
 100833c:	dc800315 	stw	r18,12(sp)
 1008340:	dc400215 	stw	r17,8(sp)
 1008344:	2823883a 	mov	r17,r5
 1008348:	d80b883a 	mov	r5,sp
 100834c:	2025883a 	mov	r18,r4
 1008350:	10081f40 	call	10081f4 <__b2d>
 1008354:	8809883a 	mov	r4,r17
 1008358:	d9400104 	addi	r5,sp,4
 100835c:	1027883a 	mov	r19,r2
 1008360:	1829883a 	mov	r20,r3
 1008364:	10081f40 	call	10081f4 <__b2d>
 1008368:	89000417 	ldw	r4,16(r17)
 100836c:	91c00417 	ldw	r7,16(r18)
 1008370:	d9800117 	ldw	r6,4(sp)
 1008374:	180b883a 	mov	r5,r3
 1008378:	390fc83a 	sub	r7,r7,r4
 100837c:	1009883a 	mov	r4,r2
 1008380:	d8800017 	ldw	r2,0(sp)
 1008384:	380e917a 	slli	r7,r7,5
 1008388:	2011883a 	mov	r8,r4
 100838c:	1185c83a 	sub	r2,r2,r6
 1008390:	11c5883a 	add	r2,r2,r7
 1008394:	1006953a 	slli	r3,r2,20
 1008398:	2813883a 	mov	r9,r5
 100839c:	00800d0e 	bge	zero,r2,10083d4 <__ratio+0xb4>
 10083a0:	1d29883a 	add	r20,r3,r20
 10083a4:	a00b883a 	mov	r5,r20
 10083a8:	480f883a 	mov	r7,r9
 10083ac:	9809883a 	mov	r4,r19
 10083b0:	400d883a 	mov	r6,r8
 10083b4:	1001c540 	call	1001c54 <__divdf3>
 10083b8:	dfc00617 	ldw	ra,24(sp)
 10083bc:	dd000517 	ldw	r20,20(sp)
 10083c0:	dcc00417 	ldw	r19,16(sp)
 10083c4:	dc800317 	ldw	r18,12(sp)
 10083c8:	dc400217 	ldw	r17,8(sp)
 10083cc:	dec00704 	addi	sp,sp,28
 10083d0:	f800283a 	ret
 10083d4:	28d3c83a 	sub	r9,r5,r3
 10083d8:	003ff206 	br	10083a4 <__ratio+0x84>

010083dc <_mprec_log10>:
 10083dc:	f811883a 	mov	r8,ra
 10083e0:	100c1d00 	call	100c1d0 <_mcount>
 10083e4:	403f883a 	mov	ra,r8
 10083e8:	defffe04 	addi	sp,sp,-8
 10083ec:	dfc00115 	stw	ra,4(sp)
 10083f0:	dc000015 	stw	r16,0(sp)
 10083f4:	008005c4 	movi	r2,23
 10083f8:	2021883a 	mov	r16,r4
 10083fc:	11000c16 	blt	r2,r4,1008430 <_mprec_log10+0x54>
 1008400:	200490fa 	slli	r2,r4,3
 1008404:	00c040b4 	movhi	r3,258
 1008408:	18e7b204 	addi	r3,r3,-24888
 100840c:	10c5883a 	add	r2,r2,r3
 1008410:	12400117 	ldw	r9,4(r2)
 1008414:	12000017 	ldw	r8,0(r2)
 1008418:	4807883a 	mov	r3,r9
 100841c:	4005883a 	mov	r2,r8
 1008420:	dfc00117 	ldw	ra,4(sp)
 1008424:	dc000017 	ldw	r16,0(sp)
 1008428:	dec00204 	addi	sp,sp,8
 100842c:	f800283a 	ret
 1008430:	0011883a 	mov	r8,zero
 1008434:	024ffc34 	movhi	r9,16368
 1008438:	0005883a 	mov	r2,zero
 100843c:	00d00934 	movhi	r3,16420
 1008440:	480b883a 	mov	r5,r9
 1008444:	4009883a 	mov	r4,r8
 1008448:	180f883a 	mov	r7,r3
 100844c:	100d883a 	mov	r6,r2
 1008450:	100ae480 	call	100ae48 <__muldf3>
 1008454:	843fffc4 	addi	r16,r16,-1
 1008458:	1011883a 	mov	r8,r2
 100845c:	1813883a 	mov	r9,r3
 1008460:	803ff51e 	bne	r16,zero,1008438 <_mprec_log10+0x5c>
 1008464:	4005883a 	mov	r2,r8
 1008468:	4807883a 	mov	r3,r9
 100846c:	dfc00117 	ldw	ra,4(sp)
 1008470:	dc000017 	ldw	r16,0(sp)
 1008474:	dec00204 	addi	sp,sp,8
 1008478:	f800283a 	ret

0100847c <__copybits>:
 100847c:	f811883a 	mov	r8,ra
 1008480:	100c1d00 	call	100c1d0 <_mcount>
 1008484:	403f883a 	mov	ra,r8
 1008488:	297fffc4 	addi	r5,r5,-1
 100848c:	30800417 	ldw	r2,16(r6)
 1008490:	280bd17a 	srai	r5,r5,5
 1008494:	31800504 	addi	r6,r6,20
 1008498:	1085883a 	add	r2,r2,r2
 100849c:	294b883a 	add	r5,r5,r5
 10084a0:	294b883a 	add	r5,r5,r5
 10084a4:	1085883a 	add	r2,r2,r2
 10084a8:	290b883a 	add	r5,r5,r4
 10084ac:	3087883a 	add	r3,r6,r2
 10084b0:	29400104 	addi	r5,r5,4
 10084b4:	30c0052e 	bgeu	r6,r3,10084cc <__copybits+0x50>
 10084b8:	30800017 	ldw	r2,0(r6)
 10084bc:	31800104 	addi	r6,r6,4
 10084c0:	20800015 	stw	r2,0(r4)
 10084c4:	21000104 	addi	r4,r4,4
 10084c8:	30fffb36 	bltu	r6,r3,10084b8 <__copybits+0x3c>
 10084cc:	2140032e 	bgeu	r4,r5,10084dc <__copybits+0x60>
 10084d0:	20000015 	stw	zero,0(r4)
 10084d4:	21000104 	addi	r4,r4,4
 10084d8:	217ffd36 	bltu	r4,r5,10084d0 <__copybits+0x54>
 10084dc:	f800283a 	ret

010084e0 <__any_on>:
 10084e0:	f811883a 	mov	r8,ra
 10084e4:	100c1d00 	call	100c1d0 <_mcount>
 10084e8:	403f883a 	mov	ra,r8
 10084ec:	20800417 	ldw	r2,16(r4)
 10084f0:	2807d17a 	srai	r3,r5,5
 10084f4:	21000504 	addi	r4,r4,20
 10084f8:	10c00d0e 	bge	r2,r3,1008530 <__any_on+0x50>
 10084fc:	1085883a 	add	r2,r2,r2
 1008500:	1085883a 	add	r2,r2,r2
 1008504:	208d883a 	add	r6,r4,r2
 1008508:	2180192e 	bgeu	r4,r6,1008570 <__any_on+0x90>
 100850c:	30bfff17 	ldw	r2,-4(r6)
 1008510:	30ffff04 	addi	r3,r6,-4
 1008514:	1000041e 	bne	r2,zero,1008528 <__any_on+0x48>
 1008518:	20c0152e 	bgeu	r4,r3,1008570 <__any_on+0x90>
 100851c:	18ffff04 	addi	r3,r3,-4
 1008520:	18800017 	ldw	r2,0(r3)
 1008524:	103ffc26 	beq	r2,zero,1008518 <__any_on+0x38>
 1008528:	00800044 	movi	r2,1
 100852c:	f800283a 	ret
 1008530:	18800b0e 	bge	r3,r2,1008560 <__any_on+0x80>
 1008534:	294007cc 	andi	r5,r5,31
 1008538:	28000926 	beq	r5,zero,1008560 <__any_on+0x80>
 100853c:	18c5883a 	add	r2,r3,r3
 1008540:	1085883a 	add	r2,r2,r2
 1008544:	208d883a 	add	r6,r4,r2
 1008548:	30c00017 	ldw	r3,0(r6)
 100854c:	1944d83a 	srl	r2,r3,r5
 1008550:	1144983a 	sll	r2,r2,r5
 1008554:	18bfec26 	beq	r3,r2,1008508 <__any_on+0x28>
 1008558:	00800044 	movi	r2,1
 100855c:	003ff306 	br	100852c <__any_on+0x4c>
 1008560:	18c5883a 	add	r2,r3,r3
 1008564:	1085883a 	add	r2,r2,r2
 1008568:	208d883a 	add	r6,r4,r2
 100856c:	003fe606 	br	1008508 <__any_on+0x28>
 1008570:	0005883a 	mov	r2,zero
 1008574:	f800283a 	ret

01008578 <_Balloc>:
 1008578:	f811883a 	mov	r8,ra
 100857c:	100c1d00 	call	100c1d0 <_mcount>
 1008580:	403f883a 	mov	ra,r8
 1008584:	defffb04 	addi	sp,sp,-20
 1008588:	dfc00415 	stw	ra,16(sp)
 100858c:	dcc00315 	stw	r19,12(sp)
 1008590:	dc800215 	stw	r18,8(sp)
 1008594:	dc400115 	stw	r17,4(sp)
 1008598:	dc000015 	stw	r16,0(sp)
 100859c:	20c01317 	ldw	r3,76(r4)
 10085a0:	2825883a 	mov	r18,r5
 10085a4:	2027883a 	mov	r19,r4
 10085a8:	01800404 	movi	r6,16
 10085ac:	01400104 	movi	r5,4
 10085b0:	18001726 	beq	r3,zero,1008610 <_Balloc+0x98>
 10085b4:	01400044 	movi	r5,1
 10085b8:	9485883a 	add	r2,r18,r18
 10085bc:	2ca2983a 	sll	r17,r5,r18
 10085c0:	1085883a 	add	r2,r2,r2
 10085c4:	10c7883a 	add	r3,r2,r3
 10085c8:	1c000017 	ldw	r16,0(r3)
 10085cc:	8c4d883a 	add	r6,r17,r17
 10085d0:	318d883a 	add	r6,r6,r6
 10085d4:	9809883a 	mov	r4,r19
 10085d8:	31800504 	addi	r6,r6,20
 10085dc:	80001226 	beq	r16,zero,1008628 <_Balloc+0xb0>
 10085e0:	80800017 	ldw	r2,0(r16)
 10085e4:	18800015 	stw	r2,0(r3)
 10085e8:	80000415 	stw	zero,16(r16)
 10085ec:	80000315 	stw	zero,12(r16)
 10085f0:	8005883a 	mov	r2,r16
 10085f4:	dfc00417 	ldw	ra,16(sp)
 10085f8:	dcc00317 	ldw	r19,12(sp)
 10085fc:	dc800217 	ldw	r18,8(sp)
 1008600:	dc400117 	ldw	r17,4(sp)
 1008604:	dc000017 	ldw	r16,0(sp)
 1008608:	dec00504 	addi	sp,sp,20
 100860c:	f800283a 	ret
 1008610:	1009e240 	call	1009e24 <_calloc_r>
 1008614:	1007883a 	mov	r3,r2
 1008618:	0021883a 	mov	r16,zero
 100861c:	98801315 	stw	r2,76(r19)
 1008620:	103fe41e 	bne	r2,zero,10085b4 <_Balloc+0x3c>
 1008624:	003ff206 	br	10085f0 <_Balloc+0x78>
 1008628:	1009e240 	call	1009e24 <_calloc_r>
 100862c:	103ff026 	beq	r2,zero,10085f0 <_Balloc+0x78>
 1008630:	1021883a 	mov	r16,r2
 1008634:	14800115 	stw	r18,4(r2)
 1008638:	14400215 	stw	r17,8(r2)
 100863c:	003fea06 	br	10085e8 <_Balloc+0x70>

01008640 <__d2b>:
 1008640:	f811883a 	mov	r8,ra
 1008644:	100c1d00 	call	100c1d0 <_mcount>
 1008648:	403f883a 	mov	ra,r8
 100864c:	defff504 	addi	sp,sp,-44
 1008650:	dfc00a15 	stw	ra,40(sp)
 1008654:	ddc00915 	stw	r23,36(sp)
 1008658:	dd800815 	stw	r22,32(sp)
 100865c:	dd400715 	stw	r21,28(sp)
 1008660:	dd000615 	stw	r20,24(sp)
 1008664:	dcc00515 	stw	r19,20(sp)
 1008668:	dc800415 	stw	r18,16(sp)
 100866c:	dc400315 	stw	r17,12(sp)
 1008670:	dc000215 	stw	r16,8(sp)
 1008674:	04c00044 	movi	r19,1
 1008678:	2821883a 	mov	r16,r5
 100867c:	980b883a 	mov	r5,r19
 1008680:	3023883a 	mov	r17,r6
 1008684:	382d883a 	mov	r22,r7
 1008688:	ddc00b17 	ldw	r23,44(sp)
 100868c:	10085780 	call	1008578 <_Balloc>
 1008690:	1025883a 	mov	r18,r2
 1008694:	00a00034 	movhi	r2,32768
 1008698:	10bfffc4 	addi	r2,r2,-1
 100869c:	8888703a 	and	r4,r17,r2
 10086a0:	202ad53a 	srli	r21,r4,20
 10086a4:	00800434 	movhi	r2,16
 10086a8:	10bfffc4 	addi	r2,r2,-1
 10086ac:	8886703a 	and	r3,r17,r2
 10086b0:	a829003a 	cmpeq	r20,r21,zero
 10086b4:	800b883a 	mov	r5,r16
 10086b8:	d8c00115 	stw	r3,4(sp)
 10086bc:	94000504 	addi	r16,r18,20
 10086c0:	a000021e 	bne	r20,zero,10086cc <__d2b+0x8c>
 10086c4:	18c00434 	orhi	r3,r3,16
 10086c8:	d8c00115 	stw	r3,4(sp)
 10086cc:	28002726 	beq	r5,zero,100876c <__d2b+0x12c>
 10086d0:	d809883a 	mov	r4,sp
 10086d4:	d9400015 	stw	r5,0(sp)
 10086d8:	100802c0 	call	100802c <__lo0bits>
 10086dc:	100d883a 	mov	r6,r2
 10086e0:	10003526 	beq	r2,zero,10087b8 <__d2b+0x178>
 10086e4:	d8c00117 	ldw	r3,4(sp)
 10086e8:	00800804 	movi	r2,32
 10086ec:	1185c83a 	sub	r2,r2,r6
 10086f0:	d9000017 	ldw	r4,0(sp)
 10086f4:	1886983a 	sll	r3,r3,r2
 10086f8:	1906b03a 	or	r3,r3,r4
 10086fc:	90c00515 	stw	r3,20(r18)
 1008700:	d8c00117 	ldw	r3,4(sp)
 1008704:	1986d83a 	srl	r3,r3,r6
 1008708:	d8c00115 	stw	r3,4(sp)
 100870c:	180b003a 	cmpeq	r5,r3,zero
 1008710:	00800084 	movi	r2,2
 1008714:	114bc83a 	sub	r5,r2,r5
 1008718:	80c00115 	stw	r3,4(r16)
 100871c:	91400415 	stw	r5,16(r18)
 1008720:	a0001a1e 	bne	r20,zero,100878c <__d2b+0x14c>
 1008724:	3545883a 	add	r2,r6,r21
 1008728:	10bef344 	addi	r2,r2,-1075
 100872c:	00c00d44 	movi	r3,53
 1008730:	b0800015 	stw	r2,0(r22)
 1008734:	1987c83a 	sub	r3,r3,r6
 1008738:	b8c00015 	stw	r3,0(r23)
 100873c:	9005883a 	mov	r2,r18
 1008740:	dfc00a17 	ldw	ra,40(sp)
 1008744:	ddc00917 	ldw	r23,36(sp)
 1008748:	dd800817 	ldw	r22,32(sp)
 100874c:	dd400717 	ldw	r21,28(sp)
 1008750:	dd000617 	ldw	r20,24(sp)
 1008754:	dcc00517 	ldw	r19,20(sp)
 1008758:	dc800417 	ldw	r18,16(sp)
 100875c:	dc400317 	ldw	r17,12(sp)
 1008760:	dc000217 	ldw	r16,8(sp)
 1008764:	dec00b04 	addi	sp,sp,44
 1008768:	f800283a 	ret
 100876c:	d9000104 	addi	r4,sp,4
 1008770:	100802c0 	call	100802c <__lo0bits>
 1008774:	11800804 	addi	r6,r2,32
 1008778:	d8800117 	ldw	r2,4(sp)
 100877c:	94c00415 	stw	r19,16(r18)
 1008780:	980b883a 	mov	r5,r19
 1008784:	90800515 	stw	r2,20(r18)
 1008788:	a03fe626 	beq	r20,zero,1008724 <__d2b+0xe4>
 100878c:	2945883a 	add	r2,r5,r5
 1008790:	1085883a 	add	r2,r2,r2
 1008794:	1405883a 	add	r2,r2,r16
 1008798:	113fff17 	ldw	r4,-4(r2)
 100879c:	30fef384 	addi	r3,r6,-1074
 10087a0:	2820917a 	slli	r16,r5,5
 10087a4:	b0c00015 	stw	r3,0(r22)
 10087a8:	1007fb00 	call	1007fb0 <__hi0bits>
 10087ac:	80a1c83a 	sub	r16,r16,r2
 10087b0:	bc000015 	stw	r16,0(r23)
 10087b4:	003fe106 	br	100873c <__d2b+0xfc>
 10087b8:	d8800017 	ldw	r2,0(sp)
 10087bc:	90800515 	stw	r2,20(r18)
 10087c0:	d8c00117 	ldw	r3,4(sp)
 10087c4:	003fd106 	br	100870c <__d2b+0xcc>

010087c8 <__mdiff>:
 10087c8:	f811883a 	mov	r8,ra
 10087cc:	100c1d00 	call	100c1d0 <_mcount>
 10087d0:	403f883a 	mov	ra,r8
 10087d4:	defffb04 	addi	sp,sp,-20
 10087d8:	dfc00415 	stw	ra,16(sp)
 10087dc:	dcc00315 	stw	r19,12(sp)
 10087e0:	dc800215 	stw	r18,8(sp)
 10087e4:	dc400115 	stw	r17,4(sp)
 10087e8:	dc000015 	stw	r16,0(sp)
 10087ec:	2821883a 	mov	r16,r5
 10087f0:	2025883a 	mov	r18,r4
 10087f4:	300b883a 	mov	r5,r6
 10087f8:	8009883a 	mov	r4,r16
 10087fc:	3023883a 	mov	r17,r6
 1008800:	10080fc0 	call	10080fc <__mcmp>
 1008804:	10004226 	beq	r2,zero,1008910 <__mdiff+0x148>
 1008808:	10005016 	blt	r2,zero,100894c <__mdiff+0x184>
 100880c:	0027883a 	mov	r19,zero
 1008810:	81400117 	ldw	r5,4(r16)
 1008814:	9009883a 	mov	r4,r18
 1008818:	10085780 	call	1008578 <_Balloc>
 100881c:	1019883a 	mov	r12,r2
 1008820:	82800417 	ldw	r10,16(r16)
 1008824:	88800417 	ldw	r2,16(r17)
 1008828:	81800504 	addi	r6,r16,20
 100882c:	5287883a 	add	r3,r10,r10
 1008830:	1085883a 	add	r2,r2,r2
 1008834:	18c7883a 	add	r3,r3,r3
 1008838:	1085883a 	add	r2,r2,r2
 100883c:	8a000504 	addi	r8,r17,20
 1008840:	64c00315 	stw	r19,12(r12)
 1008844:	30db883a 	add	r13,r6,r3
 1008848:	4097883a 	add	r11,r8,r2
 100884c:	61c00504 	addi	r7,r12,20
 1008850:	0013883a 	mov	r9,zero
 1008854:	31000017 	ldw	r4,0(r6)
 1008858:	41400017 	ldw	r5,0(r8)
 100885c:	42000104 	addi	r8,r8,4
 1008860:	20bfffcc 	andi	r2,r4,65535
 1008864:	28ffffcc 	andi	r3,r5,65535
 1008868:	10c5c83a 	sub	r2,r2,r3
 100886c:	1245883a 	add	r2,r2,r9
 1008870:	2008d43a 	srli	r4,r4,16
 1008874:	280ad43a 	srli	r5,r5,16
 1008878:	1007d43a 	srai	r3,r2,16
 100887c:	3880000d 	sth	r2,0(r7)
 1008880:	2149c83a 	sub	r4,r4,r5
 1008884:	20c9883a 	add	r4,r4,r3
 1008888:	3900008d 	sth	r4,2(r7)
 100888c:	31800104 	addi	r6,r6,4
 1008890:	39c00104 	addi	r7,r7,4
 1008894:	2013d43a 	srai	r9,r4,16
 1008898:	42ffee36 	bltu	r8,r11,1008854 <__mdiff+0x8c>
 100889c:	33400c2e 	bgeu	r6,r13,10088d0 <__mdiff+0x108>
 10088a0:	30800017 	ldw	r2,0(r6)
 10088a4:	31800104 	addi	r6,r6,4
 10088a8:	10ffffcc 	andi	r3,r2,65535
 10088ac:	1a47883a 	add	r3,r3,r9
 10088b0:	1004d43a 	srli	r2,r2,16
 10088b4:	1809d43a 	srai	r4,r3,16
 10088b8:	38c0000d 	sth	r3,0(r7)
 10088bc:	1105883a 	add	r2,r2,r4
 10088c0:	3880008d 	sth	r2,2(r7)
 10088c4:	1013d43a 	srai	r9,r2,16
 10088c8:	39c00104 	addi	r7,r7,4
 10088cc:	337ff436 	bltu	r6,r13,10088a0 <__mdiff+0xd8>
 10088d0:	38bfff17 	ldw	r2,-4(r7)
 10088d4:	38ffff04 	addi	r3,r7,-4
 10088d8:	1000041e 	bne	r2,zero,10088ec <__mdiff+0x124>
 10088dc:	18ffff04 	addi	r3,r3,-4
 10088e0:	18800017 	ldw	r2,0(r3)
 10088e4:	52bfffc4 	addi	r10,r10,-1
 10088e8:	103ffc26 	beq	r2,zero,10088dc <__mdiff+0x114>
 10088ec:	6005883a 	mov	r2,r12
 10088f0:	62800415 	stw	r10,16(r12)
 10088f4:	dfc00417 	ldw	ra,16(sp)
 10088f8:	dcc00317 	ldw	r19,12(sp)
 10088fc:	dc800217 	ldw	r18,8(sp)
 1008900:	dc400117 	ldw	r17,4(sp)
 1008904:	dc000017 	ldw	r16,0(sp)
 1008908:	dec00504 	addi	sp,sp,20
 100890c:	f800283a 	ret
 1008910:	9009883a 	mov	r4,r18
 1008914:	000b883a 	mov	r5,zero
 1008918:	10085780 	call	1008578 <_Balloc>
 100891c:	1019883a 	mov	r12,r2
 1008920:	00800044 	movi	r2,1
 1008924:	60800415 	stw	r2,16(r12)
 1008928:	6005883a 	mov	r2,r12
 100892c:	60000515 	stw	zero,20(r12)
 1008930:	dfc00417 	ldw	ra,16(sp)
 1008934:	dcc00317 	ldw	r19,12(sp)
 1008938:	dc800217 	ldw	r18,8(sp)
 100893c:	dc400117 	ldw	r17,4(sp)
 1008940:	dc000017 	ldw	r16,0(sp)
 1008944:	dec00504 	addi	sp,sp,20
 1008948:	f800283a 	ret
 100894c:	880d883a 	mov	r6,r17
 1008950:	04c00044 	movi	r19,1
 1008954:	8023883a 	mov	r17,r16
 1008958:	3021883a 	mov	r16,r6
 100895c:	003fac06 	br	1008810 <__mdiff+0x48>

01008960 <__lshift>:
 1008960:	f811883a 	mov	r8,ra
 1008964:	100c1d00 	call	100c1d0 <_mcount>
 1008968:	403f883a 	mov	ra,r8
 100896c:	defff904 	addi	sp,sp,-28
 1008970:	dfc00615 	stw	ra,24(sp)
 1008974:	dd400515 	stw	r21,20(sp)
 1008978:	dd000415 	stw	r20,16(sp)
 100897c:	dcc00315 	stw	r19,12(sp)
 1008980:	dc800215 	stw	r18,8(sp)
 1008984:	dc400115 	stw	r17,4(sp)
 1008988:	dc000015 	stw	r16,0(sp)
 100898c:	28800417 	ldw	r2,16(r5)
 1008990:	3021d17a 	srai	r16,r6,5
 1008994:	28c00217 	ldw	r3,8(r5)
 1008998:	10800044 	addi	r2,r2,1
 100899c:	80a3883a 	add	r17,r16,r2
 10089a0:	2825883a 	mov	r18,r5
 10089a4:	3029883a 	mov	r20,r6
 10089a8:	202b883a 	mov	r21,r4
 10089ac:	29400117 	ldw	r5,4(r5)
 10089b0:	1c40030e 	bge	r3,r17,10089c0 <__lshift+0x60>
 10089b4:	18c7883a 	add	r3,r3,r3
 10089b8:	29400044 	addi	r5,r5,1
 10089bc:	1c7ffd16 	blt	r3,r17,10089b4 <__lshift+0x54>
 10089c0:	a809883a 	mov	r4,r21
 10089c4:	10085780 	call	1008578 <_Balloc>
 10089c8:	1027883a 	mov	r19,r2
 10089cc:	11400504 	addi	r5,r2,20
 10089d0:	0400090e 	bge	zero,r16,10089f8 <__lshift+0x98>
 10089d4:	2805883a 	mov	r2,r5
 10089d8:	0007883a 	mov	r3,zero
 10089dc:	18c00044 	addi	r3,r3,1
 10089e0:	10000015 	stw	zero,0(r2)
 10089e4:	10800104 	addi	r2,r2,4
 10089e8:	80fffc1e 	bne	r16,r3,10089dc <__lshift+0x7c>
 10089ec:	8405883a 	add	r2,r16,r16
 10089f0:	1085883a 	add	r2,r2,r2
 10089f4:	288b883a 	add	r5,r5,r2
 10089f8:	90800417 	ldw	r2,16(r18)
 10089fc:	91000504 	addi	r4,r18,20
 1008a00:	a18007cc 	andi	r6,r20,31
 1008a04:	1085883a 	add	r2,r2,r2
 1008a08:	1085883a 	add	r2,r2,r2
 1008a0c:	208f883a 	add	r7,r4,r2
 1008a10:	30001e26 	beq	r6,zero,1008a8c <__lshift+0x12c>
 1008a14:	00800804 	movi	r2,32
 1008a18:	1191c83a 	sub	r8,r2,r6
 1008a1c:	0007883a 	mov	r3,zero
 1008a20:	20800017 	ldw	r2,0(r4)
 1008a24:	1184983a 	sll	r2,r2,r6
 1008a28:	1884b03a 	or	r2,r3,r2
 1008a2c:	28800015 	stw	r2,0(r5)
 1008a30:	20c00017 	ldw	r3,0(r4)
 1008a34:	21000104 	addi	r4,r4,4
 1008a38:	29400104 	addi	r5,r5,4
 1008a3c:	1a06d83a 	srl	r3,r3,r8
 1008a40:	21fff736 	bltu	r4,r7,1008a20 <__lshift+0xc0>
 1008a44:	28c00015 	stw	r3,0(r5)
 1008a48:	18000126 	beq	r3,zero,1008a50 <__lshift+0xf0>
 1008a4c:	8c400044 	addi	r17,r17,1
 1008a50:	88bfffc4 	addi	r2,r17,-1
 1008a54:	98800415 	stw	r2,16(r19)
 1008a58:	a809883a 	mov	r4,r21
 1008a5c:	900b883a 	mov	r5,r18
 1008a60:	1007f7c0 	call	1007f7c <_Bfree>
 1008a64:	9805883a 	mov	r2,r19
 1008a68:	dfc00617 	ldw	ra,24(sp)
 1008a6c:	dd400517 	ldw	r21,20(sp)
 1008a70:	dd000417 	ldw	r20,16(sp)
 1008a74:	dcc00317 	ldw	r19,12(sp)
 1008a78:	dc800217 	ldw	r18,8(sp)
 1008a7c:	dc400117 	ldw	r17,4(sp)
 1008a80:	dc000017 	ldw	r16,0(sp)
 1008a84:	dec00704 	addi	sp,sp,28
 1008a88:	f800283a 	ret
 1008a8c:	20800017 	ldw	r2,0(r4)
 1008a90:	21000104 	addi	r4,r4,4
 1008a94:	28800015 	stw	r2,0(r5)
 1008a98:	29400104 	addi	r5,r5,4
 1008a9c:	21ffec2e 	bgeu	r4,r7,1008a50 <__lshift+0xf0>
 1008aa0:	20800017 	ldw	r2,0(r4)
 1008aa4:	21000104 	addi	r4,r4,4
 1008aa8:	28800015 	stw	r2,0(r5)
 1008aac:	29400104 	addi	r5,r5,4
 1008ab0:	21fff636 	bltu	r4,r7,1008a8c <__lshift+0x12c>
 1008ab4:	003fe606 	br	1008a50 <__lshift+0xf0>

01008ab8 <__multiply>:
 1008ab8:	f811883a 	mov	r8,ra
 1008abc:	100c1d00 	call	100c1d0 <_mcount>
 1008ac0:	403f883a 	mov	ra,r8
 1008ac4:	defff004 	addi	sp,sp,-64
 1008ac8:	dfc00f15 	stw	ra,60(sp)
 1008acc:	df000e15 	stw	fp,56(sp)
 1008ad0:	ddc00d15 	stw	r23,52(sp)
 1008ad4:	dd800c15 	stw	r22,48(sp)
 1008ad8:	dd400b15 	stw	r21,44(sp)
 1008adc:	dd000a15 	stw	r20,40(sp)
 1008ae0:	dcc00915 	stw	r19,36(sp)
 1008ae4:	dc800815 	stw	r18,32(sp)
 1008ae8:	dc400715 	stw	r17,28(sp)
 1008aec:	dc000615 	stw	r16,24(sp)
 1008af0:	2c800417 	ldw	r18,16(r5)
 1008af4:	34400417 	ldw	r17,16(r6)
 1008af8:	2821883a 	mov	r16,r5
 1008afc:	3027883a 	mov	r19,r6
 1008b00:	9440040e 	bge	r18,r17,1008b14 <__multiply+0x5c>
 1008b04:	8825883a 	mov	r18,r17
 1008b08:	2c400417 	ldw	r17,16(r5)
 1008b0c:	2827883a 	mov	r19,r5
 1008b10:	3021883a 	mov	r16,r6
 1008b14:	80800217 	ldw	r2,8(r16)
 1008b18:	9447883a 	add	r3,r18,r17
 1008b1c:	d8c00415 	stw	r3,16(sp)
 1008b20:	81400117 	ldw	r5,4(r16)
 1008b24:	10c0010e 	bge	r2,r3,1008b2c <__multiply+0x74>
 1008b28:	29400044 	addi	r5,r5,1
 1008b2c:	10085780 	call	1008578 <_Balloc>
 1008b30:	d8800515 	stw	r2,20(sp)
 1008b34:	d9000417 	ldw	r4,16(sp)
 1008b38:	d8c00517 	ldw	r3,20(sp)
 1008b3c:	2105883a 	add	r2,r4,r4
 1008b40:	1085883a 	add	r2,r2,r2
 1008b44:	19000504 	addi	r4,r3,20
 1008b48:	2085883a 	add	r2,r4,r2
 1008b4c:	d8800315 	stw	r2,12(sp)
 1008b50:	2080052e 	bgeu	r4,r2,1008b68 <__multiply+0xb0>
 1008b54:	2005883a 	mov	r2,r4
 1008b58:	d8c00317 	ldw	r3,12(sp)
 1008b5c:	10000015 	stw	zero,0(r2)
 1008b60:	10800104 	addi	r2,r2,4
 1008b64:	10fffc36 	bltu	r2,r3,1008b58 <__multiply+0xa0>
 1008b68:	8c45883a 	add	r2,r17,r17
 1008b6c:	9487883a 	add	r3,r18,r18
 1008b70:	9dc00504 	addi	r23,r19,20
 1008b74:	1085883a 	add	r2,r2,r2
 1008b78:	84000504 	addi	r16,r16,20
 1008b7c:	18c7883a 	add	r3,r3,r3
 1008b80:	b885883a 	add	r2,r23,r2
 1008b84:	dc000015 	stw	r16,0(sp)
 1008b88:	d8800215 	stw	r2,8(sp)
 1008b8c:	80f9883a 	add	fp,r16,r3
 1008b90:	b880432e 	bgeu	r23,r2,1008ca0 <__multiply+0x1e8>
 1008b94:	d9000115 	stw	r4,4(sp)
 1008b98:	b9000017 	ldw	r4,0(r23)
 1008b9c:	253fffcc 	andi	r20,r4,65535
 1008ba0:	a0001a26 	beq	r20,zero,1008c0c <__multiply+0x154>
 1008ba4:	dcc00017 	ldw	r19,0(sp)
 1008ba8:	dc800117 	ldw	r18,4(sp)
 1008bac:	002b883a 	mov	r21,zero
 1008bb0:	9c400017 	ldw	r17,0(r19)
 1008bb4:	94000017 	ldw	r16,0(r18)
 1008bb8:	a009883a 	mov	r4,r20
 1008bbc:	897fffcc 	andi	r5,r17,65535
 1008bc0:	10021e00 	call	10021e0 <__mulsi3>
 1008bc4:	880ad43a 	srli	r5,r17,16
 1008bc8:	80ffffcc 	andi	r3,r16,65535
 1008bcc:	a8c7883a 	add	r3,r21,r3
 1008bd0:	a009883a 	mov	r4,r20
 1008bd4:	10e3883a 	add	r17,r2,r3
 1008bd8:	8020d43a 	srli	r16,r16,16
 1008bdc:	10021e00 	call	10021e0 <__mulsi3>
 1008be0:	8806d43a 	srli	r3,r17,16
 1008be4:	1405883a 	add	r2,r2,r16
 1008be8:	9cc00104 	addi	r19,r19,4
 1008bec:	1887883a 	add	r3,r3,r2
 1008bf0:	90c0008d 	sth	r3,2(r18)
 1008bf4:	9440000d 	sth	r17,0(r18)
 1008bf8:	182ad43a 	srli	r21,r3,16
 1008bfc:	94800104 	addi	r18,r18,4
 1008c00:	9f3feb36 	bltu	r19,fp,1008bb0 <__multiply+0xf8>
 1008c04:	95400015 	stw	r21,0(r18)
 1008c08:	b9000017 	ldw	r4,0(r23)
 1008c0c:	202ad43a 	srli	r21,r4,16
 1008c10:	a8001c26 	beq	r21,zero,1008c84 <__multiply+0x1cc>
 1008c14:	d9000117 	ldw	r4,4(sp)
 1008c18:	dd000017 	ldw	r20,0(sp)
 1008c1c:	002d883a 	mov	r22,zero
 1008c20:	24c00017 	ldw	r19,0(r4)
 1008c24:	2025883a 	mov	r18,r4
 1008c28:	9823883a 	mov	r17,r19
 1008c2c:	a4000017 	ldw	r16,0(r20)
 1008c30:	a809883a 	mov	r4,r21
 1008c34:	a5000104 	addi	r20,r20,4
 1008c38:	817fffcc 	andi	r5,r16,65535
 1008c3c:	10021e00 	call	10021e0 <__mulsi3>
 1008c40:	8806d43a 	srli	r3,r17,16
 1008c44:	800ad43a 	srli	r5,r16,16
 1008c48:	94c0000d 	sth	r19,0(r18)
 1008c4c:	b0c7883a 	add	r3,r22,r3
 1008c50:	10e1883a 	add	r16,r2,r3
 1008c54:	9400008d 	sth	r16,2(r18)
 1008c58:	a809883a 	mov	r4,r21
 1008c5c:	94800104 	addi	r18,r18,4
 1008c60:	10021e00 	call	10021e0 <__mulsi3>
 1008c64:	94400017 	ldw	r17,0(r18)
 1008c68:	8020d43a 	srli	r16,r16,16
 1008c6c:	88ffffcc 	andi	r3,r17,65535
 1008c70:	10c5883a 	add	r2,r2,r3
 1008c74:	80a7883a 	add	r19,r16,r2
 1008c78:	982cd43a 	srli	r22,r19,16
 1008c7c:	a73feb36 	bltu	r20,fp,1008c2c <__multiply+0x174>
 1008c80:	94c00015 	stw	r19,0(r18)
 1008c84:	d8800217 	ldw	r2,8(sp)
 1008c88:	bdc00104 	addi	r23,r23,4
 1008c8c:	b880042e 	bgeu	r23,r2,1008ca0 <__multiply+0x1e8>
 1008c90:	d8c00117 	ldw	r3,4(sp)
 1008c94:	18c00104 	addi	r3,r3,4
 1008c98:	d8c00115 	stw	r3,4(sp)
 1008c9c:	003fbe06 	br	1008b98 <__multiply+0xe0>
 1008ca0:	d9000417 	ldw	r4,16(sp)
 1008ca4:	01000c0e 	bge	zero,r4,1008cd8 <__multiply+0x220>
 1008ca8:	d8c00317 	ldw	r3,12(sp)
 1008cac:	18bfff17 	ldw	r2,-4(r3)
 1008cb0:	18ffff04 	addi	r3,r3,-4
 1008cb4:	10000326 	beq	r2,zero,1008cc4 <__multiply+0x20c>
 1008cb8:	00000706 	br	1008cd8 <__multiply+0x220>
 1008cbc:	18800017 	ldw	r2,0(r3)
 1008cc0:	1000051e 	bne	r2,zero,1008cd8 <__multiply+0x220>
 1008cc4:	d9000417 	ldw	r4,16(sp)
 1008cc8:	18ffff04 	addi	r3,r3,-4
 1008ccc:	213fffc4 	addi	r4,r4,-1
 1008cd0:	d9000415 	stw	r4,16(sp)
 1008cd4:	203ff91e 	bne	r4,zero,1008cbc <__multiply+0x204>
 1008cd8:	d8800417 	ldw	r2,16(sp)
 1008cdc:	d8c00517 	ldw	r3,20(sp)
 1008ce0:	18800415 	stw	r2,16(r3)
 1008ce4:	1805883a 	mov	r2,r3
 1008ce8:	dfc00f17 	ldw	ra,60(sp)
 1008cec:	df000e17 	ldw	fp,56(sp)
 1008cf0:	ddc00d17 	ldw	r23,52(sp)
 1008cf4:	dd800c17 	ldw	r22,48(sp)
 1008cf8:	dd400b17 	ldw	r21,44(sp)
 1008cfc:	dd000a17 	ldw	r20,40(sp)
 1008d00:	dcc00917 	ldw	r19,36(sp)
 1008d04:	dc800817 	ldw	r18,32(sp)
 1008d08:	dc400717 	ldw	r17,28(sp)
 1008d0c:	dc000617 	ldw	r16,24(sp)
 1008d10:	dec01004 	addi	sp,sp,64
 1008d14:	f800283a 	ret

01008d18 <__i2b>:
 1008d18:	f811883a 	mov	r8,ra
 1008d1c:	100c1d00 	call	100c1d0 <_mcount>
 1008d20:	403f883a 	mov	ra,r8
 1008d24:	defffd04 	addi	sp,sp,-12
 1008d28:	dfc00215 	stw	ra,8(sp)
 1008d2c:	dc800115 	stw	r18,4(sp)
 1008d30:	dc000015 	stw	r16,0(sp)
 1008d34:	04000044 	movi	r16,1
 1008d38:	2825883a 	mov	r18,r5
 1008d3c:	800b883a 	mov	r5,r16
 1008d40:	10085780 	call	1008578 <_Balloc>
 1008d44:	14000415 	stw	r16,16(r2)
 1008d48:	14800515 	stw	r18,20(r2)
 1008d4c:	dfc00217 	ldw	ra,8(sp)
 1008d50:	dc800117 	ldw	r18,4(sp)
 1008d54:	dc000017 	ldw	r16,0(sp)
 1008d58:	dec00304 	addi	sp,sp,12
 1008d5c:	f800283a 	ret

01008d60 <__multadd>:
 1008d60:	f811883a 	mov	r8,ra
 1008d64:	100c1d00 	call	100c1d0 <_mcount>
 1008d68:	403f883a 	mov	ra,r8
 1008d6c:	defff604 	addi	sp,sp,-40
 1008d70:	dfc00915 	stw	ra,36(sp)
 1008d74:	df000815 	stw	fp,32(sp)
 1008d78:	ddc00715 	stw	r23,28(sp)
 1008d7c:	dd800615 	stw	r22,24(sp)
 1008d80:	dd400515 	stw	r21,20(sp)
 1008d84:	dd000415 	stw	r20,16(sp)
 1008d88:	dcc00315 	stw	r19,12(sp)
 1008d8c:	dc800215 	stw	r18,8(sp)
 1008d90:	dc400115 	stw	r17,4(sp)
 1008d94:	dc000015 	stw	r16,0(sp)
 1008d98:	2d800417 	ldw	r22,16(r5)
 1008d9c:	282f883a 	mov	r23,r5
 1008da0:	2039883a 	mov	fp,r4
 1008da4:	302b883a 	mov	r21,r6
 1008da8:	3829883a 	mov	r20,r7
 1008dac:	2c800504 	addi	r18,r5,20
 1008db0:	0027883a 	mov	r19,zero
 1008db4:	94400017 	ldw	r17,0(r18)
 1008db8:	a80b883a 	mov	r5,r21
 1008dbc:	9cc00044 	addi	r19,r19,1
 1008dc0:	893fffcc 	andi	r4,r17,65535
 1008dc4:	10021e00 	call	10021e0 <__mulsi3>
 1008dc8:	8808d43a 	srli	r4,r17,16
 1008dcc:	1521883a 	add	r16,r2,r20
 1008dd0:	a80b883a 	mov	r5,r21
 1008dd4:	10021e00 	call	10021e0 <__mulsi3>
 1008dd8:	8008d43a 	srli	r4,r16,16
 1008ddc:	843fffcc 	andi	r16,r16,65535
 1008de0:	1105883a 	add	r2,r2,r4
 1008de4:	1006943a 	slli	r3,r2,16
 1008de8:	1028d43a 	srli	r20,r2,16
 1008dec:	1c07883a 	add	r3,r3,r16
 1008df0:	90c00015 	stw	r3,0(r18)
 1008df4:	94800104 	addi	r18,r18,4
 1008df8:	9dbfee16 	blt	r19,r22,1008db4 <__multadd+0x54>
 1008dfc:	a0000826 	beq	r20,zero,1008e20 <__multadd+0xc0>
 1008e00:	b8800217 	ldw	r2,8(r23)
 1008e04:	b080130e 	bge	r22,r2,1008e54 <__multadd+0xf4>
 1008e08:	b585883a 	add	r2,r22,r22
 1008e0c:	1085883a 	add	r2,r2,r2
 1008e10:	15c5883a 	add	r2,r2,r23
 1008e14:	b0c00044 	addi	r3,r22,1
 1008e18:	15000515 	stw	r20,20(r2)
 1008e1c:	b8c00415 	stw	r3,16(r23)
 1008e20:	b805883a 	mov	r2,r23
 1008e24:	dfc00917 	ldw	ra,36(sp)
 1008e28:	df000817 	ldw	fp,32(sp)
 1008e2c:	ddc00717 	ldw	r23,28(sp)
 1008e30:	dd800617 	ldw	r22,24(sp)
 1008e34:	dd400517 	ldw	r21,20(sp)
 1008e38:	dd000417 	ldw	r20,16(sp)
 1008e3c:	dcc00317 	ldw	r19,12(sp)
 1008e40:	dc800217 	ldw	r18,8(sp)
 1008e44:	dc400117 	ldw	r17,4(sp)
 1008e48:	dc000017 	ldw	r16,0(sp)
 1008e4c:	dec00a04 	addi	sp,sp,40
 1008e50:	f800283a 	ret
 1008e54:	b9400117 	ldw	r5,4(r23)
 1008e58:	e009883a 	mov	r4,fp
 1008e5c:	29400044 	addi	r5,r5,1
 1008e60:	10085780 	call	1008578 <_Balloc>
 1008e64:	b9800417 	ldw	r6,16(r23)
 1008e68:	b9400304 	addi	r5,r23,12
 1008e6c:	11000304 	addi	r4,r2,12
 1008e70:	318d883a 	add	r6,r6,r6
 1008e74:	318d883a 	add	r6,r6,r6
 1008e78:	31800204 	addi	r6,r6,8
 1008e7c:	1023883a 	mov	r17,r2
 1008e80:	1007d400 	call	1007d40 <memcpy>
 1008e84:	b80b883a 	mov	r5,r23
 1008e88:	e009883a 	mov	r4,fp
 1008e8c:	1007f7c0 	call	1007f7c <_Bfree>
 1008e90:	882f883a 	mov	r23,r17
 1008e94:	003fdc06 	br	1008e08 <__multadd+0xa8>

01008e98 <__pow5mult>:
 1008e98:	f811883a 	mov	r8,ra
 1008e9c:	100c1d00 	call	100c1d0 <_mcount>
 1008ea0:	403f883a 	mov	ra,r8
 1008ea4:	defffa04 	addi	sp,sp,-24
 1008ea8:	dfc00515 	stw	ra,20(sp)
 1008eac:	dd000415 	stw	r20,16(sp)
 1008eb0:	dcc00315 	stw	r19,12(sp)
 1008eb4:	dc800215 	stw	r18,8(sp)
 1008eb8:	dc400115 	stw	r17,4(sp)
 1008ebc:	dc000015 	stw	r16,0(sp)
 1008ec0:	308000cc 	andi	r2,r6,3
 1008ec4:	3021883a 	mov	r16,r6
 1008ec8:	2027883a 	mov	r19,r4
 1008ecc:	2829883a 	mov	r20,r5
 1008ed0:	10002b1e 	bne	r2,zero,1008f80 <__pow5mult+0xe8>
 1008ed4:	8025d0ba 	srai	r18,r16,2
 1008ed8:	90001b26 	beq	r18,zero,1008f48 <__pow5mult+0xb0>
 1008edc:	9c001217 	ldw	r16,72(r19)
 1008ee0:	8000081e 	bne	r16,zero,1008f04 <__pow5mult+0x6c>
 1008ee4:	00003006 	br	1008fa8 <__pow5mult+0x110>
 1008ee8:	800b883a 	mov	r5,r16
 1008eec:	800d883a 	mov	r6,r16
 1008ef0:	9809883a 	mov	r4,r19
 1008ef4:	90001426 	beq	r18,zero,1008f48 <__pow5mult+0xb0>
 1008ef8:	80800017 	ldw	r2,0(r16)
 1008efc:	10001b26 	beq	r2,zero,1008f6c <__pow5mult+0xd4>
 1008f00:	1021883a 	mov	r16,r2
 1008f04:	9080004c 	andi	r2,r18,1
 1008f08:	1005003a 	cmpeq	r2,r2,zero
 1008f0c:	9025d07a 	srai	r18,r18,1
 1008f10:	800d883a 	mov	r6,r16
 1008f14:	9809883a 	mov	r4,r19
 1008f18:	a00b883a 	mov	r5,r20
 1008f1c:	103ff21e 	bne	r2,zero,1008ee8 <__pow5mult+0x50>
 1008f20:	1008ab80 	call	1008ab8 <__multiply>
 1008f24:	a00b883a 	mov	r5,r20
 1008f28:	9809883a 	mov	r4,r19
 1008f2c:	1023883a 	mov	r17,r2
 1008f30:	1007f7c0 	call	1007f7c <_Bfree>
 1008f34:	8829883a 	mov	r20,r17
 1008f38:	800b883a 	mov	r5,r16
 1008f3c:	800d883a 	mov	r6,r16
 1008f40:	9809883a 	mov	r4,r19
 1008f44:	903fec1e 	bne	r18,zero,1008ef8 <__pow5mult+0x60>
 1008f48:	a005883a 	mov	r2,r20
 1008f4c:	dfc00517 	ldw	ra,20(sp)
 1008f50:	dd000417 	ldw	r20,16(sp)
 1008f54:	dcc00317 	ldw	r19,12(sp)
 1008f58:	dc800217 	ldw	r18,8(sp)
 1008f5c:	dc400117 	ldw	r17,4(sp)
 1008f60:	dc000017 	ldw	r16,0(sp)
 1008f64:	dec00604 	addi	sp,sp,24
 1008f68:	f800283a 	ret
 1008f6c:	1008ab80 	call	1008ab8 <__multiply>
 1008f70:	80800015 	stw	r2,0(r16)
 1008f74:	1021883a 	mov	r16,r2
 1008f78:	10000015 	stw	zero,0(r2)
 1008f7c:	003fe106 	br	1008f04 <__pow5mult+0x6c>
 1008f80:	1085883a 	add	r2,r2,r2
 1008f84:	00c040b4 	movhi	r3,258
 1008f88:	18e7f804 	addi	r3,r3,-24608
 1008f8c:	1085883a 	add	r2,r2,r2
 1008f90:	10c5883a 	add	r2,r2,r3
 1008f94:	11bfff17 	ldw	r6,-4(r2)
 1008f98:	000f883a 	mov	r7,zero
 1008f9c:	1008d600 	call	1008d60 <__multadd>
 1008fa0:	1029883a 	mov	r20,r2
 1008fa4:	003fcb06 	br	1008ed4 <__pow5mult+0x3c>
 1008fa8:	9809883a 	mov	r4,r19
 1008fac:	01409c44 	movi	r5,625
 1008fb0:	1008d180 	call	1008d18 <__i2b>
 1008fb4:	98801215 	stw	r2,72(r19)
 1008fb8:	1021883a 	mov	r16,r2
 1008fbc:	10000015 	stw	zero,0(r2)
 1008fc0:	003fd006 	br	1008f04 <__pow5mult+0x6c>

01008fc4 <__s2b>:
 1008fc4:	f811883a 	mov	r8,ra
 1008fc8:	100c1d00 	call	100c1d0 <_mcount>
 1008fcc:	403f883a 	mov	ra,r8
 1008fd0:	defff904 	addi	sp,sp,-28
 1008fd4:	dfc00615 	stw	ra,24(sp)
 1008fd8:	dd400515 	stw	r21,20(sp)
 1008fdc:	dd000415 	stw	r20,16(sp)
 1008fe0:	dcc00315 	stw	r19,12(sp)
 1008fe4:	dc800215 	stw	r18,8(sp)
 1008fe8:	dc400115 	stw	r17,4(sp)
 1008fec:	dc000015 	stw	r16,0(sp)
 1008ff0:	2025883a 	mov	r18,r4
 1008ff4:	2827883a 	mov	r19,r5
 1008ff8:	39000204 	addi	r4,r7,8
 1008ffc:	01400244 	movi	r5,9
 1009000:	3829883a 	mov	r20,r7
 1009004:	3023883a 	mov	r17,r6
 1009008:	10020e00 	call	10020e0 <__divsi3>
 100900c:	00c00044 	movi	r3,1
 1009010:	1880350e 	bge	r3,r2,10090e8 <__s2b+0x124>
 1009014:	000b883a 	mov	r5,zero
 1009018:	18c7883a 	add	r3,r3,r3
 100901c:	29400044 	addi	r5,r5,1
 1009020:	18bffd16 	blt	r3,r2,1009018 <__s2b+0x54>
 1009024:	9009883a 	mov	r4,r18
 1009028:	10085780 	call	1008578 <_Balloc>
 100902c:	1011883a 	mov	r8,r2
 1009030:	d8800717 	ldw	r2,28(sp)
 1009034:	00c00044 	movi	r3,1
 1009038:	01800244 	movi	r6,9
 100903c:	40800515 	stw	r2,20(r8)
 1009040:	40c00415 	stw	r3,16(r8)
 1009044:	3440260e 	bge	r6,r17,10090e0 <__s2b+0x11c>
 1009048:	3021883a 	mov	r16,r6
 100904c:	99ab883a 	add	r21,r19,r6
 1009050:	9c05883a 	add	r2,r19,r16
 1009054:	11c00007 	ldb	r7,0(r2)
 1009058:	400b883a 	mov	r5,r8
 100905c:	9009883a 	mov	r4,r18
 1009060:	39fff404 	addi	r7,r7,-48
 1009064:	01800284 	movi	r6,10
 1009068:	1008d600 	call	1008d60 <__multadd>
 100906c:	84000044 	addi	r16,r16,1
 1009070:	1011883a 	mov	r8,r2
 1009074:	8c3ff61e 	bne	r17,r16,1009050 <__s2b+0x8c>
 1009078:	ac45883a 	add	r2,r21,r17
 100907c:	117ffe04 	addi	r5,r2,-8
 1009080:	880d883a 	mov	r6,r17
 1009084:	35000c0e 	bge	r6,r20,10090b8 <__s2b+0xf4>
 1009088:	a185c83a 	sub	r2,r20,r6
 100908c:	2821883a 	mov	r16,r5
 1009090:	28a3883a 	add	r17,r5,r2
 1009094:	81c00007 	ldb	r7,0(r16)
 1009098:	400b883a 	mov	r5,r8
 100909c:	9009883a 	mov	r4,r18
 10090a0:	39fff404 	addi	r7,r7,-48
 10090a4:	01800284 	movi	r6,10
 10090a8:	1008d600 	call	1008d60 <__multadd>
 10090ac:	84000044 	addi	r16,r16,1
 10090b0:	1011883a 	mov	r8,r2
 10090b4:	847ff71e 	bne	r16,r17,1009094 <__s2b+0xd0>
 10090b8:	4005883a 	mov	r2,r8
 10090bc:	dfc00617 	ldw	ra,24(sp)
 10090c0:	dd400517 	ldw	r21,20(sp)
 10090c4:	dd000417 	ldw	r20,16(sp)
 10090c8:	dcc00317 	ldw	r19,12(sp)
 10090cc:	dc800217 	ldw	r18,8(sp)
 10090d0:	dc400117 	ldw	r17,4(sp)
 10090d4:	dc000017 	ldw	r16,0(sp)
 10090d8:	dec00704 	addi	sp,sp,28
 10090dc:	f800283a 	ret
 10090e0:	99400284 	addi	r5,r19,10
 10090e4:	003fe706 	br	1009084 <__s2b+0xc0>
 10090e8:	000b883a 	mov	r5,zero
 10090ec:	003fcd06 	br	1009024 <__s2b+0x60>

010090f0 <putc>:
 10090f0:	f811883a 	mov	r8,ra
 10090f4:	100c1d00 	call	100c1d0 <_mcount>
 10090f8:	403f883a 	mov	ra,r8
 10090fc:	defffc04 	addi	sp,sp,-16
 1009100:	dfc00315 	stw	ra,12(sp)
 1009104:	dc800215 	stw	r18,8(sp)
 1009108:	dc400115 	stw	r17,4(sp)
 100910c:	dc000015 	stw	r16,0(sp)
 1009110:	048040b4 	movhi	r18,258
 1009114:	949f9804 	addi	r18,r18,32352
 1009118:	90c00017 	ldw	r3,0(r18)
 100911c:	2023883a 	mov	r17,r4
 1009120:	2821883a 	mov	r16,r5
 1009124:	18000226 	beq	r3,zero,1009130 <putc+0x40>
 1009128:	18800e17 	ldw	r2,56(r3)
 100912c:	10001126 	beq	r2,zero,1009174 <putc+0x84>
 1009130:	80800217 	ldw	r2,8(r16)
 1009134:	10ffffc4 	addi	r3,r2,-1
 1009138:	80c00215 	stw	r3,8(r16)
 100913c:	18001316 	blt	r3,zero,100918c <putc+0x9c>
 1009140:	80800017 	ldw	r2,0(r16)
 1009144:	14400005 	stb	r17,0(r2)
 1009148:	80c00017 	ldw	r3,0(r16)
 100914c:	18800044 	addi	r2,r3,1
 1009150:	18c00003 	ldbu	r3,0(r3)
 1009154:	80800015 	stw	r2,0(r16)
 1009158:	1805883a 	mov	r2,r3
 100915c:	dfc00317 	ldw	ra,12(sp)
 1009160:	dc800217 	ldw	r18,8(sp)
 1009164:	dc400117 	ldw	r17,4(sp)
 1009168:	dc000017 	ldw	r16,0(sp)
 100916c:	dec00404 	addi	sp,sp,16
 1009170:	f800283a 	ret
 1009174:	1809883a 	mov	r4,r3
 1009178:	10064d40 	call	10064d4 <__sinit>
 100917c:	80800217 	ldw	r2,8(r16)
 1009180:	10ffffc4 	addi	r3,r2,-1
 1009184:	80c00215 	stw	r3,8(r16)
 1009188:	183fed0e 	bge	r3,zero,1009140 <putc+0x50>
 100918c:	80800617 	ldw	r2,24(r16)
 1009190:	18800f16 	blt	r3,r2,10091d0 <putc+0xe0>
 1009194:	80800017 	ldw	r2,0(r16)
 1009198:	14400005 	stb	r17,0(r2)
 100919c:	81000017 	ldw	r4,0(r16)
 10091a0:	00800284 	movi	r2,10
 10091a4:	20c00003 	ldbu	r3,0(r4)
 10091a8:	18801226 	beq	r3,r2,10091f4 <putc+0x104>
 10091ac:	20800044 	addi	r2,r4,1
 10091b0:	80800015 	stw	r2,0(r16)
 10091b4:	1805883a 	mov	r2,r3
 10091b8:	dfc00317 	ldw	ra,12(sp)
 10091bc:	dc800217 	ldw	r18,8(sp)
 10091c0:	dc400117 	ldw	r17,4(sp)
 10091c4:	dc000017 	ldw	r16,0(sp)
 10091c8:	dec00404 	addi	sp,sp,16
 10091cc:	f800283a 	ret
 10091d0:	91000017 	ldw	r4,0(r18)
 10091d4:	880b883a 	mov	r5,r17
 10091d8:	800d883a 	mov	r6,r16
 10091dc:	dfc00317 	ldw	ra,12(sp)
 10091e0:	dc800217 	ldw	r18,8(sp)
 10091e4:	dc400117 	ldw	r17,4(sp)
 10091e8:	dc000017 	ldw	r16,0(sp)
 10091ec:	dec00404 	addi	sp,sp,16
 10091f0:	1009c3c1 	jmpi	1009c3c <__swbuf_r>
 10091f4:	91000017 	ldw	r4,0(r18)
 10091f8:	180b883a 	mov	r5,r3
 10091fc:	003ff606 	br	10091d8 <putc+0xe8>

01009200 <_putc_r>:
 1009200:	f811883a 	mov	r8,ra
 1009204:	100c1d00 	call	100c1d0 <_mcount>
 1009208:	403f883a 	mov	ra,r8
 100920c:	defffc04 	addi	sp,sp,-16
 1009210:	dfc00315 	stw	ra,12(sp)
 1009214:	dc400215 	stw	r17,8(sp)
 1009218:	dc000115 	stw	r16,4(sp)
 100921c:	2021883a 	mov	r16,r4
 1009220:	2823883a 	mov	r17,r5
 1009224:	20000226 	beq	r4,zero,1009230 <_putc_r+0x30>
 1009228:	20800e17 	ldw	r2,56(r4)
 100922c:	10001026 	beq	r2,zero,1009270 <_putc_r+0x70>
 1009230:	30800217 	ldw	r2,8(r6)
 1009234:	10ffffc4 	addi	r3,r2,-1
 1009238:	30c00215 	stw	r3,8(r6)
 100923c:	18001316 	blt	r3,zero,100928c <_putc_r+0x8c>
 1009240:	30800017 	ldw	r2,0(r6)
 1009244:	14400005 	stb	r17,0(r2)
 1009248:	30c00017 	ldw	r3,0(r6)
 100924c:	18800044 	addi	r2,r3,1
 1009250:	18c00003 	ldbu	r3,0(r3)
 1009254:	30800015 	stw	r2,0(r6)
 1009258:	1805883a 	mov	r2,r3
 100925c:	dfc00317 	ldw	ra,12(sp)
 1009260:	dc400217 	ldw	r17,8(sp)
 1009264:	dc000117 	ldw	r16,4(sp)
 1009268:	dec00404 	addi	sp,sp,16
 100926c:	f800283a 	ret
 1009270:	d9800015 	stw	r6,0(sp)
 1009274:	10064d40 	call	10064d4 <__sinit>
 1009278:	d9800017 	ldw	r6,0(sp)
 100927c:	30800217 	ldw	r2,8(r6)
 1009280:	10ffffc4 	addi	r3,r2,-1
 1009284:	30c00215 	stw	r3,8(r6)
 1009288:	183fed0e 	bge	r3,zero,1009240 <_putc_r+0x40>
 100928c:	30800617 	ldw	r2,24(r6)
 1009290:	18800e16 	blt	r3,r2,10092cc <_putc_r+0xcc>
 1009294:	30800017 	ldw	r2,0(r6)
 1009298:	14400005 	stb	r17,0(r2)
 100929c:	31000017 	ldw	r4,0(r6)
 10092a0:	00800284 	movi	r2,10
 10092a4:	20c00003 	ldbu	r3,0(r4)
 10092a8:	18800f26 	beq	r3,r2,10092e8 <_putc_r+0xe8>
 10092ac:	20800044 	addi	r2,r4,1
 10092b0:	30800015 	stw	r2,0(r6)
 10092b4:	1805883a 	mov	r2,r3
 10092b8:	dfc00317 	ldw	ra,12(sp)
 10092bc:	dc400217 	ldw	r17,8(sp)
 10092c0:	dc000117 	ldw	r16,4(sp)
 10092c4:	dec00404 	addi	sp,sp,16
 10092c8:	f800283a 	ret
 10092cc:	8009883a 	mov	r4,r16
 10092d0:	880b883a 	mov	r5,r17
 10092d4:	dfc00317 	ldw	ra,12(sp)
 10092d8:	dc400217 	ldw	r17,8(sp)
 10092dc:	dc000117 	ldw	r16,4(sp)
 10092e0:	dec00404 	addi	sp,sp,16
 10092e4:	1009c3c1 	jmpi	1009c3c <__swbuf_r>
 10092e8:	8009883a 	mov	r4,r16
 10092ec:	180b883a 	mov	r5,r3
 10092f0:	003ff806 	br	10092d4 <_putc_r+0xd4>

010092f4 <_realloc_r>:
 10092f4:	f811883a 	mov	r8,ra
 10092f8:	100c1d00 	call	100c1d0 <_mcount>
 10092fc:	403f883a 	mov	ra,r8
 1009300:	defff404 	addi	sp,sp,-48
 1009304:	dfc00b15 	stw	ra,44(sp)
 1009308:	df000a15 	stw	fp,40(sp)
 100930c:	ddc00915 	stw	r23,36(sp)
 1009310:	dd800815 	stw	r22,32(sp)
 1009314:	dd400715 	stw	r21,28(sp)
 1009318:	dd000615 	stw	r20,24(sp)
 100931c:	dcc00515 	stw	r19,20(sp)
 1009320:	dc800415 	stw	r18,16(sp)
 1009324:	dc400315 	stw	r17,12(sp)
 1009328:	dc000215 	stw	r16,8(sp)
 100932c:	2825883a 	mov	r18,r5
 1009330:	3023883a 	mov	r17,r6
 1009334:	202d883a 	mov	r22,r4
 1009338:	2800c926 	beq	r5,zero,1009660 <_realloc_r+0x36c>
 100933c:	100c9c40 	call	100c9c4 <__malloc_lock>
 1009340:	943ffe04 	addi	r16,r18,-8
 1009344:	88c002c4 	addi	r3,r17,11
 1009348:	00800584 	movi	r2,22
 100934c:	82000117 	ldw	r8,4(r16)
 1009350:	10c01b2e 	bgeu	r2,r3,10093c0 <_realloc_r+0xcc>
 1009354:	00bffe04 	movi	r2,-8
 1009358:	188e703a 	and	r7,r3,r2
 100935c:	3839883a 	mov	fp,r7
 1009360:	38001a16 	blt	r7,zero,10093cc <_realloc_r+0xd8>
 1009364:	e4401936 	bltu	fp,r17,10093cc <_realloc_r+0xd8>
 1009368:	013fff04 	movi	r4,-4
 100936c:	4126703a 	and	r19,r8,r4
 1009370:	99c02616 	blt	r19,r7,100940c <_realloc_r+0x118>
 1009374:	802b883a 	mov	r21,r16
 1009378:	9829883a 	mov	r20,r19
 100937c:	84000204 	addi	r16,r16,8
 1009380:	a80f883a 	mov	r7,r21
 1009384:	a70dc83a 	sub	r6,r20,fp
 1009388:	008003c4 	movi	r2,15
 100938c:	1180c136 	bltu	r2,r6,1009694 <_realloc_r+0x3a0>
 1009390:	38800117 	ldw	r2,4(r7)
 1009394:	a549883a 	add	r4,r20,r21
 1009398:	1080004c 	andi	r2,r2,1
 100939c:	a084b03a 	or	r2,r20,r2
 10093a0:	38800115 	stw	r2,4(r7)
 10093a4:	20c00117 	ldw	r3,4(r4)
 10093a8:	18c00054 	ori	r3,r3,1
 10093ac:	20c00115 	stw	r3,4(r4)
 10093b0:	b009883a 	mov	r4,r22
 10093b4:	100cad80 	call	100cad8 <__malloc_unlock>
 10093b8:	8023883a 	mov	r17,r16
 10093bc:	00000606 	br	10093d8 <_realloc_r+0xe4>
 10093c0:	01c00404 	movi	r7,16
 10093c4:	3839883a 	mov	fp,r7
 10093c8:	e47fe72e 	bgeu	fp,r17,1009368 <_realloc_r+0x74>
 10093cc:	00800304 	movi	r2,12
 10093d0:	0023883a 	mov	r17,zero
 10093d4:	b0800015 	stw	r2,0(r22)
 10093d8:	8805883a 	mov	r2,r17
 10093dc:	dfc00b17 	ldw	ra,44(sp)
 10093e0:	df000a17 	ldw	fp,40(sp)
 10093e4:	ddc00917 	ldw	r23,36(sp)
 10093e8:	dd800817 	ldw	r22,32(sp)
 10093ec:	dd400717 	ldw	r21,28(sp)
 10093f0:	dd000617 	ldw	r20,24(sp)
 10093f4:	dcc00517 	ldw	r19,20(sp)
 10093f8:	dc800417 	ldw	r18,16(sp)
 10093fc:	dc400317 	ldw	r17,12(sp)
 1009400:	dc000217 	ldw	r16,8(sp)
 1009404:	dec00c04 	addi	sp,sp,48
 1009408:	f800283a 	ret
 100940c:	008040b4 	movhi	r2,258
 1009410:	1099cd04 	addi	r2,r2,26420
 1009414:	12400217 	ldw	r9,8(r2)
 1009418:	84cd883a 	add	r6,r16,r19
 100941c:	802b883a 	mov	r21,r16
 1009420:	3240b926 	beq	r6,r9,1009708 <_realloc_r+0x414>
 1009424:	31400117 	ldw	r5,4(r6)
 1009428:	00bfff84 	movi	r2,-2
 100942c:	2884703a 	and	r2,r5,r2
 1009430:	1185883a 	add	r2,r2,r6
 1009434:	10c00117 	ldw	r3,4(r2)
 1009438:	18c0004c 	andi	r3,r3,1
 100943c:	1807003a 	cmpeq	r3,r3,zero
 1009440:	1800a326 	beq	r3,zero,10096d0 <_realloc_r+0x3dc>
 1009444:	2908703a 	and	r4,r5,r4
 1009448:	9929883a 	add	r20,r19,r4
 100944c:	a1c0a30e 	bge	r20,r7,10096dc <_realloc_r+0x3e8>
 1009450:	4080004c 	andi	r2,r8,1
 1009454:	1000551e 	bne	r2,zero,10095ac <_realloc_r+0x2b8>
 1009458:	80800017 	ldw	r2,0(r16)
 100945c:	80afc83a 	sub	r23,r16,r2
 1009460:	b8c00117 	ldw	r3,4(r23)
 1009464:	00bfff04 	movi	r2,-4
 1009468:	1884703a 	and	r2,r3,r2
 100946c:	30002e26 	beq	r6,zero,1009528 <_realloc_r+0x234>
 1009470:	3240b926 	beq	r6,r9,1009758 <_realloc_r+0x464>
 1009474:	98a9883a 	add	r20,r19,r2
 1009478:	2509883a 	add	r4,r4,r20
 100947c:	d9000015 	stw	r4,0(sp)
 1009480:	21c02a16 	blt	r4,r7,100952c <_realloc_r+0x238>
 1009484:	30800317 	ldw	r2,12(r6)
 1009488:	30c00217 	ldw	r3,8(r6)
 100948c:	01400904 	movi	r5,36
 1009490:	99bfff04 	addi	r6,r19,-4
 1009494:	18800315 	stw	r2,12(r3)
 1009498:	10c00215 	stw	r3,8(r2)
 100949c:	b9000317 	ldw	r4,12(r23)
 10094a0:	b8800217 	ldw	r2,8(r23)
 10094a4:	b82b883a 	mov	r21,r23
 10094a8:	bc000204 	addi	r16,r23,8
 10094ac:	20800215 	stw	r2,8(r4)
 10094b0:	11000315 	stw	r4,12(r2)
 10094b4:	2980e436 	bltu	r5,r6,1009848 <_realloc_r+0x554>
 10094b8:	008004c4 	movi	r2,19
 10094bc:	9009883a 	mov	r4,r18
 10094c0:	8011883a 	mov	r8,r16
 10094c4:	11800f2e 	bgeu	r2,r6,1009504 <_realloc_r+0x210>
 10094c8:	90800017 	ldw	r2,0(r18)
 10094cc:	ba000404 	addi	r8,r23,16
 10094d0:	91000204 	addi	r4,r18,8
 10094d4:	b8800215 	stw	r2,8(r23)
 10094d8:	90c00117 	ldw	r3,4(r18)
 10094dc:	008006c4 	movi	r2,27
 10094e0:	b8c00315 	stw	r3,12(r23)
 10094e4:	1180072e 	bgeu	r2,r6,1009504 <_realloc_r+0x210>
 10094e8:	90c00217 	ldw	r3,8(r18)
 10094ec:	ba000604 	addi	r8,r23,24
 10094f0:	91000404 	addi	r4,r18,16
 10094f4:	b8c00415 	stw	r3,16(r23)
 10094f8:	90800317 	ldw	r2,12(r18)
 10094fc:	b8800515 	stw	r2,20(r23)
 1009500:	3140e726 	beq	r6,r5,10098a0 <_realloc_r+0x5ac>
 1009504:	20800017 	ldw	r2,0(r4)
 1009508:	dd000017 	ldw	r20,0(sp)
 100950c:	b80f883a 	mov	r7,r23
 1009510:	40800015 	stw	r2,0(r8)
 1009514:	20c00117 	ldw	r3,4(r4)
 1009518:	40c00115 	stw	r3,4(r8)
 100951c:	20800217 	ldw	r2,8(r4)
 1009520:	40800215 	stw	r2,8(r8)
 1009524:	003f9706 	br	1009384 <_realloc_r+0x90>
 1009528:	98a9883a 	add	r20,r19,r2
 100952c:	a1c01f16 	blt	r20,r7,10095ac <_realloc_r+0x2b8>
 1009530:	b8c00317 	ldw	r3,12(r23)
 1009534:	b8800217 	ldw	r2,8(r23)
 1009538:	99bfff04 	addi	r6,r19,-4
 100953c:	01400904 	movi	r5,36
 1009540:	b82b883a 	mov	r21,r23
 1009544:	18800215 	stw	r2,8(r3)
 1009548:	10c00315 	stw	r3,12(r2)
 100954c:	bc000204 	addi	r16,r23,8
 1009550:	2980c336 	bltu	r5,r6,1009860 <_realloc_r+0x56c>
 1009554:	008004c4 	movi	r2,19
 1009558:	9009883a 	mov	r4,r18
 100955c:	8011883a 	mov	r8,r16
 1009560:	11800f2e 	bgeu	r2,r6,10095a0 <_realloc_r+0x2ac>
 1009564:	90800017 	ldw	r2,0(r18)
 1009568:	ba000404 	addi	r8,r23,16
 100956c:	91000204 	addi	r4,r18,8
 1009570:	b8800215 	stw	r2,8(r23)
 1009574:	90c00117 	ldw	r3,4(r18)
 1009578:	008006c4 	movi	r2,27
 100957c:	b8c00315 	stw	r3,12(r23)
 1009580:	1180072e 	bgeu	r2,r6,10095a0 <_realloc_r+0x2ac>
 1009584:	90c00217 	ldw	r3,8(r18)
 1009588:	ba000604 	addi	r8,r23,24
 100958c:	91000404 	addi	r4,r18,16
 1009590:	b8c00415 	stw	r3,16(r23)
 1009594:	90800317 	ldw	r2,12(r18)
 1009598:	b8800515 	stw	r2,20(r23)
 100959c:	3140c726 	beq	r6,r5,10098bc <_realloc_r+0x5c8>
 10095a0:	20800017 	ldw	r2,0(r4)
 10095a4:	b80f883a 	mov	r7,r23
 10095a8:	003fd906 	br	1009510 <_realloc_r+0x21c>
 10095ac:	880b883a 	mov	r5,r17
 10095b0:	b009883a 	mov	r4,r22
 10095b4:	10075040 	call	1007504 <_malloc_r>
 10095b8:	1023883a 	mov	r17,r2
 10095bc:	10002526 	beq	r2,zero,1009654 <_realloc_r+0x360>
 10095c0:	80800117 	ldw	r2,4(r16)
 10095c4:	00ffff84 	movi	r3,-2
 10095c8:	893ffe04 	addi	r4,r17,-8
 10095cc:	10c4703a 	and	r2,r2,r3
 10095d0:	8085883a 	add	r2,r16,r2
 10095d4:	20809526 	beq	r4,r2,100982c <_realloc_r+0x538>
 10095d8:	99bfff04 	addi	r6,r19,-4
 10095dc:	01c00904 	movi	r7,36
 10095e0:	39804536 	bltu	r7,r6,10096f8 <_realloc_r+0x404>
 10095e4:	008004c4 	movi	r2,19
 10095e8:	9009883a 	mov	r4,r18
 10095ec:	880b883a 	mov	r5,r17
 10095f0:	11800f2e 	bgeu	r2,r6,1009630 <_realloc_r+0x33c>
 10095f4:	90800017 	ldw	r2,0(r18)
 10095f8:	89400204 	addi	r5,r17,8
 10095fc:	91000204 	addi	r4,r18,8
 1009600:	88800015 	stw	r2,0(r17)
 1009604:	90c00117 	ldw	r3,4(r18)
 1009608:	008006c4 	movi	r2,27
 100960c:	88c00115 	stw	r3,4(r17)
 1009610:	1180072e 	bgeu	r2,r6,1009630 <_realloc_r+0x33c>
 1009614:	90c00217 	ldw	r3,8(r18)
 1009618:	89400404 	addi	r5,r17,16
 100961c:	91000404 	addi	r4,r18,16
 1009620:	88c00215 	stw	r3,8(r17)
 1009624:	90800317 	ldw	r2,12(r18)
 1009628:	88800315 	stw	r2,12(r17)
 100962c:	31c09126 	beq	r6,r7,1009874 <_realloc_r+0x580>
 1009630:	20800017 	ldw	r2,0(r4)
 1009634:	28800015 	stw	r2,0(r5)
 1009638:	20c00117 	ldw	r3,4(r4)
 100963c:	28c00115 	stw	r3,4(r5)
 1009640:	20800217 	ldw	r2,8(r4)
 1009644:	28800215 	stw	r2,8(r5)
 1009648:	900b883a 	mov	r5,r18
 100964c:	b009883a 	mov	r4,r22
 1009650:	10069040 	call	1006904 <_free_r>
 1009654:	b009883a 	mov	r4,r22
 1009658:	100cad80 	call	100cad8 <__malloc_unlock>
 100965c:	003f5e06 	br	10093d8 <_realloc_r+0xe4>
 1009660:	300b883a 	mov	r5,r6
 1009664:	dfc00b17 	ldw	ra,44(sp)
 1009668:	df000a17 	ldw	fp,40(sp)
 100966c:	ddc00917 	ldw	r23,36(sp)
 1009670:	dd800817 	ldw	r22,32(sp)
 1009674:	dd400717 	ldw	r21,28(sp)
 1009678:	dd000617 	ldw	r20,24(sp)
 100967c:	dcc00517 	ldw	r19,20(sp)
 1009680:	dc800417 	ldw	r18,16(sp)
 1009684:	dc400317 	ldw	r17,12(sp)
 1009688:	dc000217 	ldw	r16,8(sp)
 100968c:	dec00c04 	addi	sp,sp,48
 1009690:	10075041 	jmpi	1007504 <_malloc_r>
 1009694:	38800117 	ldw	r2,4(r7)
 1009698:	e54b883a 	add	r5,fp,r21
 100969c:	31000054 	ori	r4,r6,1
 10096a0:	1080004c 	andi	r2,r2,1
 10096a4:	1704b03a 	or	r2,r2,fp
 10096a8:	38800115 	stw	r2,4(r7)
 10096ac:	29000115 	stw	r4,4(r5)
 10096b0:	2987883a 	add	r3,r5,r6
 10096b4:	18800117 	ldw	r2,4(r3)
 10096b8:	29400204 	addi	r5,r5,8
 10096bc:	b009883a 	mov	r4,r22
 10096c0:	10800054 	ori	r2,r2,1
 10096c4:	18800115 	stw	r2,4(r3)
 10096c8:	10069040 	call	1006904 <_free_r>
 10096cc:	003f3806 	br	10093b0 <_realloc_r+0xbc>
 10096d0:	000d883a 	mov	r6,zero
 10096d4:	0009883a 	mov	r4,zero
 10096d8:	003f5d06 	br	1009450 <_realloc_r+0x15c>
 10096dc:	30c00217 	ldw	r3,8(r6)
 10096e0:	30800317 	ldw	r2,12(r6)
 10096e4:	800f883a 	mov	r7,r16
 10096e8:	84000204 	addi	r16,r16,8
 10096ec:	10c00215 	stw	r3,8(r2)
 10096f0:	18800315 	stw	r2,12(r3)
 10096f4:	003f2306 	br	1009384 <_realloc_r+0x90>
 10096f8:	8809883a 	mov	r4,r17
 10096fc:	900b883a 	mov	r5,r18
 1009700:	1007dec0 	call	1007dec <memmove>
 1009704:	003fd006 	br	1009648 <_realloc_r+0x354>
 1009708:	30800117 	ldw	r2,4(r6)
 100970c:	e0c00404 	addi	r3,fp,16
 1009710:	1108703a 	and	r4,r2,r4
 1009714:	9905883a 	add	r2,r19,r4
 1009718:	10ff4d16 	blt	r2,r3,1009450 <_realloc_r+0x15c>
 100971c:	1705c83a 	sub	r2,r2,fp
 1009720:	870b883a 	add	r5,r16,fp
 1009724:	10800054 	ori	r2,r2,1
 1009728:	28800115 	stw	r2,4(r5)
 100972c:	80c00117 	ldw	r3,4(r16)
 1009730:	008040b4 	movhi	r2,258
 1009734:	1099cd04 	addi	r2,r2,26420
 1009738:	b009883a 	mov	r4,r22
 100973c:	18c0004c 	andi	r3,r3,1
 1009740:	e0c6b03a 	or	r3,fp,r3
 1009744:	11400215 	stw	r5,8(r2)
 1009748:	80c00115 	stw	r3,4(r16)
 100974c:	100cad80 	call	100cad8 <__malloc_unlock>
 1009750:	84400204 	addi	r17,r16,8
 1009754:	003f2006 	br	10093d8 <_realloc_r+0xe4>
 1009758:	98a9883a 	add	r20,r19,r2
 100975c:	2509883a 	add	r4,r4,r20
 1009760:	e0800404 	addi	r2,fp,16
 1009764:	d9000115 	stw	r4,4(sp)
 1009768:	20bf7016 	blt	r4,r2,100952c <_realloc_r+0x238>
 100976c:	b8c00317 	ldw	r3,12(r23)
 1009770:	b8800217 	ldw	r2,8(r23)
 1009774:	99bfff04 	addi	r6,r19,-4
 1009778:	01400904 	movi	r5,36
 100977c:	18800215 	stw	r2,8(r3)
 1009780:	10c00315 	stw	r3,12(r2)
 1009784:	bc400204 	addi	r17,r23,8
 1009788:	29804136 	bltu	r5,r6,1009890 <_realloc_r+0x59c>
 100978c:	008004c4 	movi	r2,19
 1009790:	9009883a 	mov	r4,r18
 1009794:	880f883a 	mov	r7,r17
 1009798:	11800f2e 	bgeu	r2,r6,10097d8 <_realloc_r+0x4e4>
 100979c:	90800017 	ldw	r2,0(r18)
 10097a0:	b9c00404 	addi	r7,r23,16
 10097a4:	91000204 	addi	r4,r18,8
 10097a8:	b8800215 	stw	r2,8(r23)
 10097ac:	90c00117 	ldw	r3,4(r18)
 10097b0:	008006c4 	movi	r2,27
 10097b4:	b8c00315 	stw	r3,12(r23)
 10097b8:	1180072e 	bgeu	r2,r6,10097d8 <_realloc_r+0x4e4>
 10097bc:	90c00217 	ldw	r3,8(r18)
 10097c0:	b9c00604 	addi	r7,r23,24
 10097c4:	91000404 	addi	r4,r18,16
 10097c8:	b8c00415 	stw	r3,16(r23)
 10097cc:	90800317 	ldw	r2,12(r18)
 10097d0:	b8800515 	stw	r2,20(r23)
 10097d4:	31404026 	beq	r6,r5,10098d8 <_realloc_r+0x5e4>
 10097d8:	20800017 	ldw	r2,0(r4)
 10097dc:	38800015 	stw	r2,0(r7)
 10097e0:	20c00117 	ldw	r3,4(r4)
 10097e4:	38c00115 	stw	r3,4(r7)
 10097e8:	20800217 	ldw	r2,8(r4)
 10097ec:	38800215 	stw	r2,8(r7)
 10097f0:	d8c00117 	ldw	r3,4(sp)
 10097f4:	bf0b883a 	add	r5,r23,fp
 10097f8:	b009883a 	mov	r4,r22
 10097fc:	1f05c83a 	sub	r2,r3,fp
 1009800:	10800054 	ori	r2,r2,1
 1009804:	28800115 	stw	r2,4(r5)
 1009808:	b8c00117 	ldw	r3,4(r23)
 100980c:	008040b4 	movhi	r2,258
 1009810:	1099cd04 	addi	r2,r2,26420
 1009814:	11400215 	stw	r5,8(r2)
 1009818:	18c0004c 	andi	r3,r3,1
 100981c:	e0c6b03a 	or	r3,fp,r3
 1009820:	b8c00115 	stw	r3,4(r23)
 1009824:	100cad80 	call	100cad8 <__malloc_unlock>
 1009828:	003eeb06 	br	10093d8 <_realloc_r+0xe4>
 100982c:	20800117 	ldw	r2,4(r4)
 1009830:	00ffff04 	movi	r3,-4
 1009834:	800f883a 	mov	r7,r16
 1009838:	10c4703a 	and	r2,r2,r3
 100983c:	98a9883a 	add	r20,r19,r2
 1009840:	84000204 	addi	r16,r16,8
 1009844:	003ecf06 	br	1009384 <_realloc_r+0x90>
 1009848:	900b883a 	mov	r5,r18
 100984c:	8009883a 	mov	r4,r16
 1009850:	1007dec0 	call	1007dec <memmove>
 1009854:	dd000017 	ldw	r20,0(sp)
 1009858:	b80f883a 	mov	r7,r23
 100985c:	003ec906 	br	1009384 <_realloc_r+0x90>
 1009860:	900b883a 	mov	r5,r18
 1009864:	8009883a 	mov	r4,r16
 1009868:	1007dec0 	call	1007dec <memmove>
 100986c:	b80f883a 	mov	r7,r23
 1009870:	003ec406 	br	1009384 <_realloc_r+0x90>
 1009874:	90c00417 	ldw	r3,16(r18)
 1009878:	89400604 	addi	r5,r17,24
 100987c:	91000604 	addi	r4,r18,24
 1009880:	88c00415 	stw	r3,16(r17)
 1009884:	90800517 	ldw	r2,20(r18)
 1009888:	88800515 	stw	r2,20(r17)
 100988c:	003f6806 	br	1009630 <_realloc_r+0x33c>
 1009890:	900b883a 	mov	r5,r18
 1009894:	8809883a 	mov	r4,r17
 1009898:	1007dec0 	call	1007dec <memmove>
 100989c:	003fd406 	br	10097f0 <_realloc_r+0x4fc>
 10098a0:	90c00417 	ldw	r3,16(r18)
 10098a4:	91000604 	addi	r4,r18,24
 10098a8:	ba000804 	addi	r8,r23,32
 10098ac:	b8c00615 	stw	r3,24(r23)
 10098b0:	90800517 	ldw	r2,20(r18)
 10098b4:	b8800715 	stw	r2,28(r23)
 10098b8:	003f1206 	br	1009504 <_realloc_r+0x210>
 10098bc:	90c00417 	ldw	r3,16(r18)
 10098c0:	91000604 	addi	r4,r18,24
 10098c4:	ba000804 	addi	r8,r23,32
 10098c8:	b8c00615 	stw	r3,24(r23)
 10098cc:	90800517 	ldw	r2,20(r18)
 10098d0:	b8800715 	stw	r2,28(r23)
 10098d4:	003f3206 	br	10095a0 <_realloc_r+0x2ac>
 10098d8:	90c00417 	ldw	r3,16(r18)
 10098dc:	91000604 	addi	r4,r18,24
 10098e0:	b9c00804 	addi	r7,r23,32
 10098e4:	b8c00615 	stw	r3,24(r23)
 10098e8:	90800517 	ldw	r2,20(r18)
 10098ec:	b8800715 	stw	r2,28(r23)
 10098f0:	003fb906 	br	10097d8 <_realloc_r+0x4e4>

010098f4 <__isinfd>:
 10098f4:	f811883a 	mov	r8,ra
 10098f8:	100c1d00 	call	100c1d0 <_mcount>
 10098fc:	403f883a 	mov	ra,r8
 1009900:	200d883a 	mov	r6,r4
 1009904:	0109c83a 	sub	r4,zero,r4
 1009908:	2188b03a 	or	r4,r4,r6
 100990c:	2008d7fa 	srli	r4,r4,31
 1009910:	00a00034 	movhi	r2,32768
 1009914:	10bfffc4 	addi	r2,r2,-1
 1009918:	1144703a 	and	r2,r2,r5
 100991c:	2088b03a 	or	r4,r4,r2
 1009920:	009ffc34 	movhi	r2,32752
 1009924:	1105c83a 	sub	r2,r2,r4
 1009928:	0087c83a 	sub	r3,zero,r2
 100992c:	10c4b03a 	or	r2,r2,r3
 1009930:	1004d7fa 	srli	r2,r2,31
 1009934:	00c00044 	movi	r3,1
 1009938:	1885c83a 	sub	r2,r3,r2
 100993c:	f800283a 	ret

01009940 <__isnand>:
 1009940:	f811883a 	mov	r8,ra
 1009944:	100c1d00 	call	100c1d0 <_mcount>
 1009948:	403f883a 	mov	ra,r8
 100994c:	200d883a 	mov	r6,r4
 1009950:	0109c83a 	sub	r4,zero,r4
 1009954:	2188b03a 	or	r4,r4,r6
 1009958:	2008d7fa 	srli	r4,r4,31
 100995c:	00a00034 	movhi	r2,32768
 1009960:	10bfffc4 	addi	r2,r2,-1
 1009964:	1144703a 	and	r2,r2,r5
 1009968:	2088b03a 	or	r4,r4,r2
 100996c:	009ffc34 	movhi	r2,32752
 1009970:	1105c83a 	sub	r2,r2,r4
 1009974:	1004d7fa 	srli	r2,r2,31
 1009978:	f800283a 	ret

0100997c <_sbrk_r>:
 100997c:	f811883a 	mov	r8,ra
 1009980:	100c1d00 	call	100c1d0 <_mcount>
 1009984:	403f883a 	mov	ra,r8
 1009988:	defffd04 	addi	sp,sp,-12
 100998c:	dfc00215 	stw	ra,8(sp)
 1009990:	dc400115 	stw	r17,4(sp)
 1009994:	dc000015 	stw	r16,0(sp)
 1009998:	040040f4 	movhi	r16,259
 100999c:	8416ea04 	addi	r16,r16,23464
 10099a0:	2023883a 	mov	r17,r4
 10099a4:	80000015 	stw	zero,0(r16)
 10099a8:	2809883a 	mov	r4,r5
 10099ac:	100c48c0 	call	100c48c <sbrk>
 10099b0:	1007883a 	mov	r3,r2
 10099b4:	00bfffc4 	movi	r2,-1
 10099b8:	18800626 	beq	r3,r2,10099d4 <_sbrk_r+0x58>
 10099bc:	1805883a 	mov	r2,r3
 10099c0:	dfc00217 	ldw	ra,8(sp)
 10099c4:	dc400117 	ldw	r17,4(sp)
 10099c8:	dc000017 	ldw	r16,0(sp)
 10099cc:	dec00304 	addi	sp,sp,12
 10099d0:	f800283a 	ret
 10099d4:	80800017 	ldw	r2,0(r16)
 10099d8:	103ff826 	beq	r2,zero,10099bc <_sbrk_r+0x40>
 10099dc:	88800015 	stw	r2,0(r17)
 10099e0:	1805883a 	mov	r2,r3
 10099e4:	dfc00217 	ldw	ra,8(sp)
 10099e8:	dc400117 	ldw	r17,4(sp)
 10099ec:	dc000017 	ldw	r16,0(sp)
 10099f0:	dec00304 	addi	sp,sp,12
 10099f4:	f800283a 	ret

010099f8 <__sclose>:
 10099f8:	f811883a 	mov	r8,ra
 10099fc:	100c1d00 	call	100c1d0 <_mcount>
 1009a00:	403f883a 	mov	ra,r8
 1009a04:	2940038f 	ldh	r5,14(r5)
 1009a08:	1009ef81 	jmpi	1009ef8 <_close_r>

01009a0c <__sseek>:
 1009a0c:	f811883a 	mov	r8,ra
 1009a10:	100c1d00 	call	100c1d0 <_mcount>
 1009a14:	403f883a 	mov	ra,r8
 1009a18:	defffe04 	addi	sp,sp,-8
 1009a1c:	dfc00115 	stw	ra,4(sp)
 1009a20:	dc000015 	stw	r16,0(sp)
 1009a24:	2821883a 	mov	r16,r5
 1009a28:	2940038f 	ldh	r5,14(r5)
 1009a2c:	100a1ac0 	call	100a1ac <_lseek_r>
 1009a30:	1007883a 	mov	r3,r2
 1009a34:	00bfffc4 	movi	r2,-1
 1009a38:	18800926 	beq	r3,r2,1009a60 <__sseek+0x54>
 1009a3c:	8080030b 	ldhu	r2,12(r16)
 1009a40:	80c01415 	stw	r3,80(r16)
 1009a44:	10840014 	ori	r2,r2,4096
 1009a48:	8080030d 	sth	r2,12(r16)
 1009a4c:	1805883a 	mov	r2,r3
 1009a50:	dfc00117 	ldw	ra,4(sp)
 1009a54:	dc000017 	ldw	r16,0(sp)
 1009a58:	dec00204 	addi	sp,sp,8
 1009a5c:	f800283a 	ret
 1009a60:	8080030b 	ldhu	r2,12(r16)
 1009a64:	10bbffcc 	andi	r2,r2,61439
 1009a68:	8080030d 	sth	r2,12(r16)
 1009a6c:	1805883a 	mov	r2,r3
 1009a70:	dfc00117 	ldw	ra,4(sp)
 1009a74:	dc000017 	ldw	r16,0(sp)
 1009a78:	dec00204 	addi	sp,sp,8
 1009a7c:	f800283a 	ret

01009a80 <__swrite>:
 1009a80:	f811883a 	mov	r8,ra
 1009a84:	100c1d00 	call	100c1d0 <_mcount>
 1009a88:	403f883a 	mov	ra,r8
 1009a8c:	defffb04 	addi	sp,sp,-20
 1009a90:	dfc00415 	stw	ra,16(sp)
 1009a94:	dcc00315 	stw	r19,12(sp)
 1009a98:	dc800215 	stw	r18,8(sp)
 1009a9c:	dc400115 	stw	r17,4(sp)
 1009aa0:	dc000015 	stw	r16,0(sp)
 1009aa4:	2880030b 	ldhu	r2,12(r5)
 1009aa8:	3027883a 	mov	r19,r6
 1009aac:	3825883a 	mov	r18,r7
 1009ab0:	1080400c 	andi	r2,r2,256
 1009ab4:	2821883a 	mov	r16,r5
 1009ab8:	000d883a 	mov	r6,zero
 1009abc:	01c00084 	movi	r7,2
 1009ac0:	2023883a 	mov	r17,r4
 1009ac4:	10000226 	beq	r2,zero,1009ad0 <__swrite+0x50>
 1009ac8:	2940038f 	ldh	r5,14(r5)
 1009acc:	100a1ac0 	call	100a1ac <_lseek_r>
 1009ad0:	8080030b 	ldhu	r2,12(r16)
 1009ad4:	8140038f 	ldh	r5,14(r16)
 1009ad8:	8809883a 	mov	r4,r17
 1009adc:	10bbffcc 	andi	r2,r2,61439
 1009ae0:	980d883a 	mov	r6,r19
 1009ae4:	900f883a 	mov	r7,r18
 1009ae8:	8080030d 	sth	r2,12(r16)
 1009aec:	dfc00417 	ldw	ra,16(sp)
 1009af0:	dcc00317 	ldw	r19,12(sp)
 1009af4:	dc800217 	ldw	r18,8(sp)
 1009af8:	dc400117 	ldw	r17,4(sp)
 1009afc:	dc000017 	ldw	r16,0(sp)
 1009b00:	dec00504 	addi	sp,sp,20
 1009b04:	1009da01 	jmpi	1009da0 <_write_r>

01009b08 <__sread>:
 1009b08:	f811883a 	mov	r8,ra
 1009b0c:	100c1d00 	call	100c1d0 <_mcount>
 1009b10:	403f883a 	mov	ra,r8
 1009b14:	defffe04 	addi	sp,sp,-8
 1009b18:	dfc00115 	stw	ra,4(sp)
 1009b1c:	dc000015 	stw	r16,0(sp)
 1009b20:	2821883a 	mov	r16,r5
 1009b24:	2940038f 	ldh	r5,14(r5)
 1009b28:	100a2300 	call	100a230 <_read_r>
 1009b2c:	1007883a 	mov	r3,r2
 1009b30:	10000816 	blt	r2,zero,1009b54 <__sread+0x4c>
 1009b34:	80801417 	ldw	r2,80(r16)
 1009b38:	10c5883a 	add	r2,r2,r3
 1009b3c:	80801415 	stw	r2,80(r16)
 1009b40:	1805883a 	mov	r2,r3
 1009b44:	dfc00117 	ldw	ra,4(sp)
 1009b48:	dc000017 	ldw	r16,0(sp)
 1009b4c:	dec00204 	addi	sp,sp,8
 1009b50:	f800283a 	ret
 1009b54:	8080030b 	ldhu	r2,12(r16)
 1009b58:	10bbffcc 	andi	r2,r2,61439
 1009b5c:	8080030d 	sth	r2,12(r16)
 1009b60:	1805883a 	mov	r2,r3
 1009b64:	dfc00117 	ldw	ra,4(sp)
 1009b68:	dc000017 	ldw	r16,0(sp)
 1009b6c:	dec00204 	addi	sp,sp,8
 1009b70:	f800283a 	ret

01009b74 <strcmp>:
 1009b74:	f811883a 	mov	r8,ra
 1009b78:	100c1d00 	call	100c1d0 <_mcount>
 1009b7c:	403f883a 	mov	ra,r8
 1009b80:	2144b03a 	or	r2,r4,r5
 1009b84:	108000cc 	andi	r2,r2,3
 1009b88:	10001d1e 	bne	r2,zero,1009c00 <strcmp+0x8c>
 1009b8c:	200f883a 	mov	r7,r4
 1009b90:	28800017 	ldw	r2,0(r5)
 1009b94:	21000017 	ldw	r4,0(r4)
 1009b98:	280d883a 	mov	r6,r5
 1009b9c:	2080161e 	bne	r4,r2,1009bf8 <strcmp+0x84>
 1009ba0:	023fbff4 	movhi	r8,65279
 1009ba4:	423fbfc4 	addi	r8,r8,-257
 1009ba8:	2207883a 	add	r3,r4,r8
 1009bac:	01602074 	movhi	r5,32897
 1009bb0:	29602004 	addi	r5,r5,-32640
 1009bb4:	1946703a 	and	r3,r3,r5
 1009bb8:	0104303a 	nor	r2,zero,r4
 1009bbc:	10c4703a 	and	r2,r2,r3
 1009bc0:	10001c1e 	bne	r2,zero,1009c34 <strcmp+0xc0>
 1009bc4:	4013883a 	mov	r9,r8
 1009bc8:	2811883a 	mov	r8,r5
 1009bcc:	00000106 	br	1009bd4 <strcmp+0x60>
 1009bd0:	1800181e 	bne	r3,zero,1009c34 <strcmp+0xc0>
 1009bd4:	39c00104 	addi	r7,r7,4
 1009bd8:	39000017 	ldw	r4,0(r7)
 1009bdc:	31800104 	addi	r6,r6,4
 1009be0:	31400017 	ldw	r5,0(r6)
 1009be4:	2245883a 	add	r2,r4,r9
 1009be8:	1204703a 	and	r2,r2,r8
 1009bec:	0106303a 	nor	r3,zero,r4
 1009bf0:	1886703a 	and	r3,r3,r2
 1009bf4:	217ff626 	beq	r4,r5,1009bd0 <strcmp+0x5c>
 1009bf8:	3809883a 	mov	r4,r7
 1009bfc:	300b883a 	mov	r5,r6
 1009c00:	20c00007 	ldb	r3,0(r4)
 1009c04:	1800051e 	bne	r3,zero,1009c1c <strcmp+0xa8>
 1009c08:	00000606 	br	1009c24 <strcmp+0xb0>
 1009c0c:	21000044 	addi	r4,r4,1
 1009c10:	20c00007 	ldb	r3,0(r4)
 1009c14:	29400044 	addi	r5,r5,1
 1009c18:	18000226 	beq	r3,zero,1009c24 <strcmp+0xb0>
 1009c1c:	28800007 	ldb	r2,0(r5)
 1009c20:	18bffa26 	beq	r3,r2,1009c0c <strcmp+0x98>
 1009c24:	20c00003 	ldbu	r3,0(r4)
 1009c28:	28800003 	ldbu	r2,0(r5)
 1009c2c:	1885c83a 	sub	r2,r3,r2
 1009c30:	f800283a 	ret
 1009c34:	0005883a 	mov	r2,zero
 1009c38:	f800283a 	ret

01009c3c <__swbuf_r>:
 1009c3c:	f811883a 	mov	r8,ra
 1009c40:	100c1d00 	call	100c1d0 <_mcount>
 1009c44:	403f883a 	mov	ra,r8
 1009c48:	defffc04 	addi	sp,sp,-16
 1009c4c:	dfc00315 	stw	ra,12(sp)
 1009c50:	dc400215 	stw	r17,8(sp)
 1009c54:	dc000115 	stw	r16,4(sp)
 1009c58:	2023883a 	mov	r17,r4
 1009c5c:	2821883a 	mov	r16,r5
 1009c60:	20000226 	beq	r4,zero,1009c6c <__swbuf_r+0x30>
 1009c64:	20800e17 	ldw	r2,56(r4)
 1009c68:	10002f26 	beq	r2,zero,1009d28 <__swbuf_r+0xec>
 1009c6c:	3080030b 	ldhu	r2,12(r6)
 1009c70:	30c00617 	ldw	r3,24(r6)
 1009c74:	1080020c 	andi	r2,r2,8
 1009c78:	30c00215 	stw	r3,8(r6)
 1009c7c:	10002226 	beq	r2,zero,1009d08 <__swbuf_r+0xcc>
 1009c80:	30c00417 	ldw	r3,16(r6)
 1009c84:	18002026 	beq	r3,zero,1009d08 <__swbuf_r+0xcc>
 1009c88:	31000017 	ldw	r4,0(r6)
 1009c8c:	30800517 	ldw	r2,20(r6)
 1009c90:	20c7c83a 	sub	r3,r4,r3
 1009c94:	18802f0e 	bge	r3,r2,1009d54 <__swbuf_r+0x118>
 1009c98:	19400044 	addi	r5,r3,1
 1009c9c:	30800217 	ldw	r2,8(r6)
 1009ca0:	84003fcc 	andi	r16,r16,255
 1009ca4:	20c00044 	addi	r3,r4,1
 1009ca8:	10bfffc4 	addi	r2,r2,-1
 1009cac:	30800215 	stw	r2,8(r6)
 1009cb0:	24000005 	stb	r16,0(r4)
 1009cb4:	30800517 	ldw	r2,20(r6)
 1009cb8:	30c00015 	stw	r3,0(r6)
 1009cbc:	11400c26 	beq	r2,r5,1009cf0 <__swbuf_r+0xb4>
 1009cc0:	3080030b 	ldhu	r2,12(r6)
 1009cc4:	1080004c 	andi	r2,r2,1
 1009cc8:	1005003a 	cmpeq	r2,r2,zero
 1009ccc:	10000626 	beq	r2,zero,1009ce8 <__swbuf_r+0xac>
 1009cd0:	8005883a 	mov	r2,r16
 1009cd4:	dfc00317 	ldw	ra,12(sp)
 1009cd8:	dc400217 	ldw	r17,8(sp)
 1009cdc:	dc000117 	ldw	r16,4(sp)
 1009ce0:	dec00404 	addi	sp,sp,16
 1009ce4:	f800283a 	ret
 1009ce8:	00800284 	movi	r2,10
 1009cec:	80bff81e 	bne	r16,r2,1009cd0 <__swbuf_r+0x94>
 1009cf0:	8809883a 	mov	r4,r17
 1009cf4:	300b883a 	mov	r5,r6
 1009cf8:	10061e80 	call	10061e8 <_fflush_r>
 1009cfc:	103ff426 	beq	r2,zero,1009cd0 <__swbuf_r+0x94>
 1009d00:	043fffc4 	movi	r16,-1
 1009d04:	003ff206 	br	1009cd0 <__swbuf_r+0x94>
 1009d08:	300b883a 	mov	r5,r6
 1009d0c:	8809883a 	mov	r4,r17
 1009d10:	d9800015 	stw	r6,0(sp)
 1009d14:	10048900 	call	1004890 <__swsetup_r>
 1009d18:	d9800017 	ldw	r6,0(sp)
 1009d1c:	1000061e 	bne	r2,zero,1009d38 <__swbuf_r+0xfc>
 1009d20:	30c00417 	ldw	r3,16(r6)
 1009d24:	003fd806 	br	1009c88 <__swbuf_r+0x4c>
 1009d28:	d9800015 	stw	r6,0(sp)
 1009d2c:	10064d40 	call	10064d4 <__sinit>
 1009d30:	d9800017 	ldw	r6,0(sp)
 1009d34:	003fcd06 	br	1009c6c <__swbuf_r+0x30>
 1009d38:	3080030b 	ldhu	r2,12(r6)
 1009d3c:	00c00244 	movi	r3,9
 1009d40:	043fffc4 	movi	r16,-1
 1009d44:	10801014 	ori	r2,r2,64
 1009d48:	3080030d 	sth	r2,12(r6)
 1009d4c:	88c00015 	stw	r3,0(r17)
 1009d50:	003fdf06 	br	1009cd0 <__swbuf_r+0x94>
 1009d54:	300b883a 	mov	r5,r6
 1009d58:	8809883a 	mov	r4,r17
 1009d5c:	d9800015 	stw	r6,0(sp)
 1009d60:	10061e80 	call	10061e8 <_fflush_r>
 1009d64:	d9800017 	ldw	r6,0(sp)
 1009d68:	103fe51e 	bne	r2,zero,1009d00 <__swbuf_r+0xc4>
 1009d6c:	31000017 	ldw	r4,0(r6)
 1009d70:	01400044 	movi	r5,1
 1009d74:	003fc906 	br	1009c9c <__swbuf_r+0x60>

01009d78 <__swbuf>:
 1009d78:	f811883a 	mov	r8,ra
 1009d7c:	100c1d00 	call	100c1d0 <_mcount>
 1009d80:	403f883a 	mov	ra,r8
 1009d84:	018040b4 	movhi	r6,258
 1009d88:	319f9804 	addi	r6,r6,32352
 1009d8c:	2007883a 	mov	r3,r4
 1009d90:	31000017 	ldw	r4,0(r6)
 1009d94:	280d883a 	mov	r6,r5
 1009d98:	180b883a 	mov	r5,r3
 1009d9c:	1009c3c1 	jmpi	1009c3c <__swbuf_r>

01009da0 <_write_r>:
 1009da0:	f811883a 	mov	r8,ra
 1009da4:	100c1d00 	call	100c1d0 <_mcount>
 1009da8:	403f883a 	mov	ra,r8
 1009dac:	defffd04 	addi	sp,sp,-12
 1009db0:	dfc00215 	stw	ra,8(sp)
 1009db4:	dc400115 	stw	r17,4(sp)
 1009db8:	dc000015 	stw	r16,0(sp)
 1009dbc:	040040f4 	movhi	r16,259
 1009dc0:	8416ea04 	addi	r16,r16,23464
 1009dc4:	2023883a 	mov	r17,r4
 1009dc8:	80000015 	stw	zero,0(r16)
 1009dcc:	2809883a 	mov	r4,r5
 1009dd0:	300b883a 	mov	r5,r6
 1009dd4:	380d883a 	mov	r6,r7
 1009dd8:	100c7080 	call	100c708 <write>
 1009ddc:	1007883a 	mov	r3,r2
 1009de0:	00bfffc4 	movi	r2,-1
 1009de4:	18800626 	beq	r3,r2,1009e00 <_write_r+0x60>
 1009de8:	1805883a 	mov	r2,r3
 1009dec:	dfc00217 	ldw	ra,8(sp)
 1009df0:	dc400117 	ldw	r17,4(sp)
 1009df4:	dc000017 	ldw	r16,0(sp)
 1009df8:	dec00304 	addi	sp,sp,12
 1009dfc:	f800283a 	ret
 1009e00:	80800017 	ldw	r2,0(r16)
 1009e04:	103ff826 	beq	r2,zero,1009de8 <_write_r+0x48>
 1009e08:	88800015 	stw	r2,0(r17)
 1009e0c:	1805883a 	mov	r2,r3
 1009e10:	dfc00217 	ldw	ra,8(sp)
 1009e14:	dc400117 	ldw	r17,4(sp)
 1009e18:	dc000017 	ldw	r16,0(sp)
 1009e1c:	dec00304 	addi	sp,sp,12
 1009e20:	f800283a 	ret

01009e24 <_calloc_r>:
 1009e24:	f811883a 	mov	r8,ra
 1009e28:	100c1d00 	call	100c1d0 <_mcount>
 1009e2c:	403f883a 	mov	ra,r8
 1009e30:	defffe04 	addi	sp,sp,-8
 1009e34:	dfc00115 	stw	ra,4(sp)
 1009e38:	dc400015 	stw	r17,0(sp)
 1009e3c:	2023883a 	mov	r17,r4
 1009e40:	2809883a 	mov	r4,r5
 1009e44:	300b883a 	mov	r5,r6
 1009e48:	10021e00 	call	10021e0 <__mulsi3>
 1009e4c:	100b883a 	mov	r5,r2
 1009e50:	8809883a 	mov	r4,r17
 1009e54:	10075040 	call	1007504 <_malloc_r>
 1009e58:	1023883a 	mov	r17,r2
 1009e5c:	01c00904 	movi	r7,36
 1009e60:	10000d26 	beq	r2,zero,1009e98 <_calloc_r+0x74>
 1009e64:	10ffff17 	ldw	r3,-4(r2)
 1009e68:	1009883a 	mov	r4,r2
 1009e6c:	00bfff04 	movi	r2,-4
 1009e70:	1886703a 	and	r3,r3,r2
 1009e74:	1887883a 	add	r3,r3,r2
 1009e78:	180d883a 	mov	r6,r3
 1009e7c:	000b883a 	mov	r5,zero
 1009e80:	38c01736 	bltu	r7,r3,1009ee0 <_calloc_r+0xbc>
 1009e84:	008004c4 	movi	r2,19
 1009e88:	10c00836 	bltu	r2,r3,1009eac <_calloc_r+0x88>
 1009e8c:	20000215 	stw	zero,8(r4)
 1009e90:	20000015 	stw	zero,0(r4)
 1009e94:	20000115 	stw	zero,4(r4)
 1009e98:	8805883a 	mov	r2,r17
 1009e9c:	dfc00117 	ldw	ra,4(sp)
 1009ea0:	dc400017 	ldw	r17,0(sp)
 1009ea4:	dec00204 	addi	sp,sp,8
 1009ea8:	f800283a 	ret
 1009eac:	008006c4 	movi	r2,27
 1009eb0:	88000015 	stw	zero,0(r17)
 1009eb4:	88000115 	stw	zero,4(r17)
 1009eb8:	89000204 	addi	r4,r17,8
 1009ebc:	10fff32e 	bgeu	r2,r3,1009e8c <_calloc_r+0x68>
 1009ec0:	88000215 	stw	zero,8(r17)
 1009ec4:	88000315 	stw	zero,12(r17)
 1009ec8:	89000404 	addi	r4,r17,16
 1009ecc:	19ffef1e 	bne	r3,r7,1009e8c <_calloc_r+0x68>
 1009ed0:	89000604 	addi	r4,r17,24
 1009ed4:	88000415 	stw	zero,16(r17)
 1009ed8:	88000515 	stw	zero,20(r17)
 1009edc:	003feb06 	br	1009e8c <_calloc_r+0x68>
 1009ee0:	1007ed80 	call	1007ed8 <memset>
 1009ee4:	8805883a 	mov	r2,r17
 1009ee8:	dfc00117 	ldw	ra,4(sp)
 1009eec:	dc400017 	ldw	r17,0(sp)
 1009ef0:	dec00204 	addi	sp,sp,8
 1009ef4:	f800283a 	ret

01009ef8 <_close_r>:
 1009ef8:	f811883a 	mov	r8,ra
 1009efc:	100c1d00 	call	100c1d0 <_mcount>
 1009f00:	403f883a 	mov	ra,r8
 1009f04:	defffd04 	addi	sp,sp,-12
 1009f08:	dfc00215 	stw	ra,8(sp)
 1009f0c:	dc400115 	stw	r17,4(sp)
 1009f10:	dc000015 	stw	r16,0(sp)
 1009f14:	040040f4 	movhi	r16,259
 1009f18:	8416ea04 	addi	r16,r16,23464
 1009f1c:	2023883a 	mov	r17,r4
 1009f20:	80000015 	stw	zero,0(r16)
 1009f24:	2809883a 	mov	r4,r5
 1009f28:	100ba500 	call	100ba50 <close>
 1009f2c:	1007883a 	mov	r3,r2
 1009f30:	00bfffc4 	movi	r2,-1
 1009f34:	18800626 	beq	r3,r2,1009f50 <_close_r+0x58>
 1009f38:	1805883a 	mov	r2,r3
 1009f3c:	dfc00217 	ldw	ra,8(sp)
 1009f40:	dc400117 	ldw	r17,4(sp)
 1009f44:	dc000017 	ldw	r16,0(sp)
 1009f48:	dec00304 	addi	sp,sp,12
 1009f4c:	f800283a 	ret
 1009f50:	80800017 	ldw	r2,0(r16)
 1009f54:	103ff826 	beq	r2,zero,1009f38 <_close_r+0x40>
 1009f58:	88800015 	stw	r2,0(r17)
 1009f5c:	1805883a 	mov	r2,r3
 1009f60:	dfc00217 	ldw	ra,8(sp)
 1009f64:	dc400117 	ldw	r17,4(sp)
 1009f68:	dc000017 	ldw	r16,0(sp)
 1009f6c:	dec00304 	addi	sp,sp,12
 1009f70:	f800283a 	ret

01009f74 <_fclose_r>:
 1009f74:	f811883a 	mov	r8,ra
 1009f78:	100c1d00 	call	100c1d0 <_mcount>
 1009f7c:	403f883a 	mov	ra,r8
 1009f80:	defffc04 	addi	sp,sp,-16
 1009f84:	dfc00315 	stw	ra,12(sp)
 1009f88:	dc800215 	stw	r18,8(sp)
 1009f8c:	dc400115 	stw	r17,4(sp)
 1009f90:	dc000015 	stw	r16,0(sp)
 1009f94:	2821883a 	mov	r16,r5
 1009f98:	2023883a 	mov	r17,r4
 1009f9c:	28002926 	beq	r5,zero,100a044 <_fclose_r+0xd0>
 1009fa0:	10064940 	call	1006494 <__sfp_lock_acquire>
 1009fa4:	88000226 	beq	r17,zero,1009fb0 <_fclose_r+0x3c>
 1009fa8:	88800e17 	ldw	r2,56(r17)
 1009fac:	10002d26 	beq	r2,zero,100a064 <_fclose_r+0xf0>
 1009fb0:	8080030f 	ldh	r2,12(r16)
 1009fb4:	10002226 	beq	r2,zero,100a040 <_fclose_r+0xcc>
 1009fb8:	8809883a 	mov	r4,r17
 1009fbc:	800b883a 	mov	r5,r16
 1009fc0:	10061e80 	call	10061e8 <_fflush_r>
 1009fc4:	1025883a 	mov	r18,r2
 1009fc8:	80800b17 	ldw	r2,44(r16)
 1009fcc:	10000426 	beq	r2,zero,1009fe0 <_fclose_r+0x6c>
 1009fd0:	81400717 	ldw	r5,28(r16)
 1009fd4:	8809883a 	mov	r4,r17
 1009fd8:	103ee83a 	callr	r2
 1009fdc:	10002a16 	blt	r2,zero,100a088 <_fclose_r+0x114>
 1009fe0:	8080030b 	ldhu	r2,12(r16)
 1009fe4:	1080200c 	andi	r2,r2,128
 1009fe8:	1000231e 	bne	r2,zero,100a078 <_fclose_r+0x104>
 1009fec:	81400c17 	ldw	r5,48(r16)
 1009ff0:	28000526 	beq	r5,zero,100a008 <_fclose_r+0x94>
 1009ff4:	80801004 	addi	r2,r16,64
 1009ff8:	28800226 	beq	r5,r2,100a004 <_fclose_r+0x90>
 1009ffc:	8809883a 	mov	r4,r17
 100a000:	10069040 	call	1006904 <_free_r>
 100a004:	80000c15 	stw	zero,48(r16)
 100a008:	81401117 	ldw	r5,68(r16)
 100a00c:	28000326 	beq	r5,zero,100a01c <_fclose_r+0xa8>
 100a010:	8809883a 	mov	r4,r17
 100a014:	10069040 	call	1006904 <_free_r>
 100a018:	80001115 	stw	zero,68(r16)
 100a01c:	8000030d 	sth	zero,12(r16)
 100a020:	10064a40 	call	10064a4 <__sfp_lock_release>
 100a024:	9005883a 	mov	r2,r18
 100a028:	dfc00317 	ldw	ra,12(sp)
 100a02c:	dc800217 	ldw	r18,8(sp)
 100a030:	dc400117 	ldw	r17,4(sp)
 100a034:	dc000017 	ldw	r16,0(sp)
 100a038:	dec00404 	addi	sp,sp,16
 100a03c:	f800283a 	ret
 100a040:	10064a40 	call	10064a4 <__sfp_lock_release>
 100a044:	0025883a 	mov	r18,zero
 100a048:	9005883a 	mov	r2,r18
 100a04c:	dfc00317 	ldw	ra,12(sp)
 100a050:	dc800217 	ldw	r18,8(sp)
 100a054:	dc400117 	ldw	r17,4(sp)
 100a058:	dc000017 	ldw	r16,0(sp)
 100a05c:	dec00404 	addi	sp,sp,16
 100a060:	f800283a 	ret
 100a064:	8809883a 	mov	r4,r17
 100a068:	10064d40 	call	10064d4 <__sinit>
 100a06c:	8080030f 	ldh	r2,12(r16)
 100a070:	103fd11e 	bne	r2,zero,1009fb8 <_fclose_r+0x44>
 100a074:	003ff206 	br	100a040 <_fclose_r+0xcc>
 100a078:	81400417 	ldw	r5,16(r16)
 100a07c:	8809883a 	mov	r4,r17
 100a080:	10069040 	call	1006904 <_free_r>
 100a084:	003fd906 	br	1009fec <_fclose_r+0x78>
 100a088:	04bfffc4 	movi	r18,-1
 100a08c:	003fd406 	br	1009fe0 <_fclose_r+0x6c>

0100a090 <fclose>:
 100a090:	f811883a 	mov	r8,ra
 100a094:	100c1d00 	call	100c1d0 <_mcount>
 100a098:	403f883a 	mov	ra,r8
 100a09c:	008040b4 	movhi	r2,258
 100a0a0:	109f9804 	addi	r2,r2,32352
 100a0a4:	200b883a 	mov	r5,r4
 100a0a8:	11000017 	ldw	r4,0(r2)
 100a0ac:	1009f741 	jmpi	1009f74 <_fclose_r>

0100a0b0 <_fstat_r>:
 100a0b0:	f811883a 	mov	r8,ra
 100a0b4:	100c1d00 	call	100c1d0 <_mcount>
 100a0b8:	403f883a 	mov	ra,r8
 100a0bc:	defffd04 	addi	sp,sp,-12
 100a0c0:	dfc00215 	stw	ra,8(sp)
 100a0c4:	dc400115 	stw	r17,4(sp)
 100a0c8:	dc000015 	stw	r16,0(sp)
 100a0cc:	040040f4 	movhi	r16,259
 100a0d0:	8416ea04 	addi	r16,r16,23464
 100a0d4:	2023883a 	mov	r17,r4
 100a0d8:	80000015 	stw	zero,0(r16)
 100a0dc:	2809883a 	mov	r4,r5
 100a0e0:	300b883a 	mov	r5,r6
 100a0e4:	100bc000 	call	100bc00 <fstat>
 100a0e8:	1007883a 	mov	r3,r2
 100a0ec:	00bfffc4 	movi	r2,-1
 100a0f0:	18800626 	beq	r3,r2,100a10c <_fstat_r+0x5c>
 100a0f4:	1805883a 	mov	r2,r3
 100a0f8:	dfc00217 	ldw	ra,8(sp)
 100a0fc:	dc400117 	ldw	r17,4(sp)
 100a100:	dc000017 	ldw	r16,0(sp)
 100a104:	dec00304 	addi	sp,sp,12
 100a108:	f800283a 	ret
 100a10c:	80800017 	ldw	r2,0(r16)
 100a110:	103ff826 	beq	r2,zero,100a0f4 <_fstat_r+0x44>
 100a114:	88800015 	stw	r2,0(r17)
 100a118:	1805883a 	mov	r2,r3
 100a11c:	dfc00217 	ldw	ra,8(sp)
 100a120:	dc400117 	ldw	r17,4(sp)
 100a124:	dc000017 	ldw	r16,0(sp)
 100a128:	dec00304 	addi	sp,sp,12
 100a12c:	f800283a 	ret

0100a130 <_isatty_r>:
 100a130:	f811883a 	mov	r8,ra
 100a134:	100c1d00 	call	100c1d0 <_mcount>
 100a138:	403f883a 	mov	ra,r8
 100a13c:	defffd04 	addi	sp,sp,-12
 100a140:	dfc00215 	stw	ra,8(sp)
 100a144:	dc400115 	stw	r17,4(sp)
 100a148:	dc000015 	stw	r16,0(sp)
 100a14c:	040040f4 	movhi	r16,259
 100a150:	8416ea04 	addi	r16,r16,23464
 100a154:	2023883a 	mov	r17,r4
 100a158:	80000015 	stw	zero,0(r16)
 100a15c:	2809883a 	mov	r4,r5
 100a160:	100bd500 	call	100bd50 <isatty>
 100a164:	1007883a 	mov	r3,r2
 100a168:	00bfffc4 	movi	r2,-1
 100a16c:	18800626 	beq	r3,r2,100a188 <_isatty_r+0x58>
 100a170:	1805883a 	mov	r2,r3
 100a174:	dfc00217 	ldw	ra,8(sp)
 100a178:	dc400117 	ldw	r17,4(sp)
 100a17c:	dc000017 	ldw	r16,0(sp)
 100a180:	dec00304 	addi	sp,sp,12
 100a184:	f800283a 	ret
 100a188:	80800017 	ldw	r2,0(r16)
 100a18c:	103ff826 	beq	r2,zero,100a170 <_isatty_r+0x40>
 100a190:	88800015 	stw	r2,0(r17)
 100a194:	1805883a 	mov	r2,r3
 100a198:	dfc00217 	ldw	ra,8(sp)
 100a19c:	dc400117 	ldw	r17,4(sp)
 100a1a0:	dc000017 	ldw	r16,0(sp)
 100a1a4:	dec00304 	addi	sp,sp,12
 100a1a8:	f800283a 	ret

0100a1ac <_lseek_r>:
 100a1ac:	f811883a 	mov	r8,ra
 100a1b0:	100c1d00 	call	100c1d0 <_mcount>
 100a1b4:	403f883a 	mov	ra,r8
 100a1b8:	defffd04 	addi	sp,sp,-12
 100a1bc:	dfc00215 	stw	ra,8(sp)
 100a1c0:	dc400115 	stw	r17,4(sp)
 100a1c4:	dc000015 	stw	r16,0(sp)
 100a1c8:	040040f4 	movhi	r16,259
 100a1cc:	8416ea04 	addi	r16,r16,23464
 100a1d0:	2023883a 	mov	r17,r4
 100a1d4:	80000015 	stw	zero,0(r16)
 100a1d8:	2809883a 	mov	r4,r5
 100a1dc:	300b883a 	mov	r5,r6
 100a1e0:	380d883a 	mov	r6,r7
 100a1e4:	100bf900 	call	100bf90 <lseek>
 100a1e8:	1007883a 	mov	r3,r2
 100a1ec:	00bfffc4 	movi	r2,-1
 100a1f0:	18800626 	beq	r3,r2,100a20c <_lseek_r+0x60>
 100a1f4:	1805883a 	mov	r2,r3
 100a1f8:	dfc00217 	ldw	ra,8(sp)
 100a1fc:	dc400117 	ldw	r17,4(sp)
 100a200:	dc000017 	ldw	r16,0(sp)
 100a204:	dec00304 	addi	sp,sp,12
 100a208:	f800283a 	ret
 100a20c:	80800017 	ldw	r2,0(r16)
 100a210:	103ff826 	beq	r2,zero,100a1f4 <_lseek_r+0x48>
 100a214:	88800015 	stw	r2,0(r17)
 100a218:	1805883a 	mov	r2,r3
 100a21c:	dfc00217 	ldw	ra,8(sp)
 100a220:	dc400117 	ldw	r17,4(sp)
 100a224:	dc000017 	ldw	r16,0(sp)
 100a228:	dec00304 	addi	sp,sp,12
 100a22c:	f800283a 	ret

0100a230 <_read_r>:
 100a230:	f811883a 	mov	r8,ra
 100a234:	100c1d00 	call	100c1d0 <_mcount>
 100a238:	403f883a 	mov	ra,r8
 100a23c:	defffd04 	addi	sp,sp,-12
 100a240:	dfc00215 	stw	ra,8(sp)
 100a244:	dc400115 	stw	r17,4(sp)
 100a248:	dc000015 	stw	r16,0(sp)
 100a24c:	040040f4 	movhi	r16,259
 100a250:	8416ea04 	addi	r16,r16,23464
 100a254:	2023883a 	mov	r17,r4
 100a258:	80000015 	stw	zero,0(r16)
 100a25c:	2809883a 	mov	r4,r5
 100a260:	300b883a 	mov	r5,r6
 100a264:	380d883a 	mov	r6,r7
 100a268:	100c26c0 	call	100c26c <read>
 100a26c:	1007883a 	mov	r3,r2
 100a270:	00bfffc4 	movi	r2,-1
 100a274:	18800626 	beq	r3,r2,100a290 <_read_r+0x60>
 100a278:	1805883a 	mov	r2,r3
 100a27c:	dfc00217 	ldw	ra,8(sp)
 100a280:	dc400117 	ldw	r17,4(sp)
 100a284:	dc000017 	ldw	r16,0(sp)
 100a288:	dec00304 	addi	sp,sp,12
 100a28c:	f800283a 	ret
 100a290:	80800017 	ldw	r2,0(r16)
 100a294:	103ff826 	beq	r2,zero,100a278 <_read_r+0x48>
 100a298:	88800015 	stw	r2,0(r17)
 100a29c:	1805883a 	mov	r2,r3
 100a2a0:	dfc00217 	ldw	ra,8(sp)
 100a2a4:	dc400117 	ldw	r17,4(sp)
 100a2a8:	dc000017 	ldw	r16,0(sp)
 100a2ac:	dec00304 	addi	sp,sp,12
 100a2b0:	f800283a 	ret

0100a2b4 <__umoddi3>:
 100a2b4:	f811883a 	mov	r8,ra
 100a2b8:	100c1d00 	call	100c1d0 <_mcount>
 100a2bc:	403f883a 	mov	ra,r8
 100a2c0:	defff004 	addi	sp,sp,-64
 100a2c4:	dfc00f15 	stw	ra,60(sp)
 100a2c8:	df000e15 	stw	fp,56(sp)
 100a2cc:	ddc00d15 	stw	r23,52(sp)
 100a2d0:	dd800c15 	stw	r22,48(sp)
 100a2d4:	dd400b15 	stw	r21,44(sp)
 100a2d8:	dd000a15 	stw	r20,40(sp)
 100a2dc:	dcc00915 	stw	r19,36(sp)
 100a2e0:	dc800815 	stw	r18,32(sp)
 100a2e4:	dc400715 	stw	r17,28(sp)
 100a2e8:	dc000615 	stw	r16,24(sp)
 100a2ec:	3011883a 	mov	r8,r6
 100a2f0:	000d883a 	mov	r6,zero
 100a2f4:	2817883a 	mov	r11,r5
 100a2f8:	d9800415 	stw	r6,16(sp)
 100a2fc:	4027883a 	mov	r19,r8
 100a300:	d9800515 	stw	r6,20(sp)
 100a304:	2021883a 	mov	r16,r4
 100a308:	282b883a 	mov	r21,r5
 100a30c:	38002c1e 	bne	r7,zero,100a3c0 <__umoddi3+0x10c>
 100a310:	2a005636 	bltu	r5,r8,100a46c <__umoddi3+0x1b8>
 100a314:	40009a26 	beq	r8,zero,100a580 <__umoddi3+0x2cc>
 100a318:	00bfffd4 	movui	r2,65535
 100a31c:	14c09236 	bltu	r2,r19,100a568 <__umoddi3+0x2b4>
 100a320:	00803fc4 	movi	r2,255
 100a324:	14c15c36 	bltu	r2,r19,100a898 <__umoddi3+0x5e4>
 100a328:	000b883a 	mov	r5,zero
 100a32c:	0005883a 	mov	r2,zero
 100a330:	9884d83a 	srl	r2,r19,r2
 100a334:	010040b4 	movhi	r4,258
 100a338:	21273c04 	addi	r4,r4,-25360
 100a33c:	01800804 	movi	r6,32
 100a340:	1105883a 	add	r2,r2,r4
 100a344:	10c00003 	ldbu	r3,0(r2)
 100a348:	28c7883a 	add	r3,r5,r3
 100a34c:	30e5c83a 	sub	r18,r6,r3
 100a350:	9000a41e 	bne	r18,zero,100a5e4 <__umoddi3+0x330>
 100a354:	982ed43a 	srli	r23,r19,16
 100a358:	acebc83a 	sub	r21,r21,r19
 100a35c:	9d3fffcc 	andi	r20,r19,65535
 100a360:	002d883a 	mov	r22,zero
 100a364:	a809883a 	mov	r4,r21
 100a368:	b80b883a 	mov	r5,r23
 100a36c:	10021b80 	call	10021b8 <__udivsi3>
 100a370:	100b883a 	mov	r5,r2
 100a374:	a009883a 	mov	r4,r20
 100a378:	10021e00 	call	10021e0 <__mulsi3>
 100a37c:	a809883a 	mov	r4,r21
 100a380:	b80b883a 	mov	r5,r23
 100a384:	1023883a 	mov	r17,r2
 100a388:	10021cc0 	call	10021cc <__umodsi3>
 100a38c:	1004943a 	slli	r2,r2,16
 100a390:	8006d43a 	srli	r3,r16,16
 100a394:	10c4b03a 	or	r2,r2,r3
 100a398:	1440032e 	bgeu	r2,r17,100a3a8 <__umoddi3+0xf4>
 100a39c:	14c5883a 	add	r2,r2,r19
 100a3a0:	14c00136 	bltu	r2,r19,100a3a8 <__umoddi3+0xf4>
 100a3a4:	14415836 	bltu	r2,r17,100a908 <__umoddi3+0x654>
 100a3a8:	1463c83a 	sub	r17,r2,r17
 100a3ac:	8809883a 	mov	r4,r17
 100a3b0:	b80b883a 	mov	r5,r23
 100a3b4:	10021b80 	call	10021b8 <__udivsi3>
 100a3b8:	a009883a 	mov	r4,r20
 100a3bc:	00005306 	br	100a50c <__umoddi3+0x258>
 100a3c0:	380d883a 	mov	r6,r7
 100a3c4:	29c0132e 	bgeu	r5,r7,100a414 <__umoddi3+0x160>
 100a3c8:	d9000415 	stw	r4,16(sp)
 100a3cc:	d9400515 	stw	r5,20(sp)
 100a3d0:	d9400417 	ldw	r5,16(sp)
 100a3d4:	5813883a 	mov	r9,r11
 100a3d8:	2811883a 	mov	r8,r5
 100a3dc:	4005883a 	mov	r2,r8
 100a3e0:	4807883a 	mov	r3,r9
 100a3e4:	dfc00f17 	ldw	ra,60(sp)
 100a3e8:	df000e17 	ldw	fp,56(sp)
 100a3ec:	ddc00d17 	ldw	r23,52(sp)
 100a3f0:	dd800c17 	ldw	r22,48(sp)
 100a3f4:	dd400b17 	ldw	r21,44(sp)
 100a3f8:	dd000a17 	ldw	r20,40(sp)
 100a3fc:	dcc00917 	ldw	r19,36(sp)
 100a400:	dc800817 	ldw	r18,32(sp)
 100a404:	dc400717 	ldw	r17,28(sp)
 100a408:	dc000617 	ldw	r16,24(sp)
 100a40c:	dec01004 	addi	sp,sp,64
 100a410:	f800283a 	ret
 100a414:	00bfffd4 	movui	r2,65535
 100a418:	11c06636 	bltu	r2,r7,100a5b4 <__umoddi3+0x300>
 100a41c:	00803fc4 	movi	r2,255
 100a420:	11c12036 	bltu	r2,r7,100a8a4 <__umoddi3+0x5f0>
 100a424:	000b883a 	mov	r5,zero
 100a428:	0005883a 	mov	r2,zero
 100a42c:	3084d83a 	srl	r2,r6,r2
 100a430:	010040b4 	movhi	r4,258
 100a434:	21273c04 	addi	r4,r4,-25360
 100a438:	01c00804 	movi	r7,32
 100a43c:	1105883a 	add	r2,r2,r4
 100a440:	10c00003 	ldbu	r3,0(r2)
 100a444:	28c7883a 	add	r3,r5,r3
 100a448:	38e5c83a 	sub	r18,r7,r3
 100a44c:	9000941e 	bne	r18,zero,100a6a0 <__umoddi3+0x3ec>
 100a450:	35405e36 	bltu	r6,r21,100a5cc <__umoddi3+0x318>
 100a454:	84c05d2e 	bgeu	r16,r19,100a5cc <__umoddi3+0x318>
 100a458:	8011883a 	mov	r8,r16
 100a45c:	a813883a 	mov	r9,r21
 100a460:	dc000415 	stw	r16,16(sp)
 100a464:	dd400515 	stw	r21,20(sp)
 100a468:	003fdc06 	br	100a3dc <__umoddi3+0x128>
 100a46c:	00bfffd4 	movui	r2,65535
 100a470:	12004a36 	bltu	r2,r8,100a59c <__umoddi3+0x2e8>
 100a474:	00803fc4 	movi	r2,255
 100a478:	12010d36 	bltu	r2,r8,100a8b0 <__umoddi3+0x5fc>
 100a47c:	000b883a 	mov	r5,zero
 100a480:	0005883a 	mov	r2,zero
 100a484:	9884d83a 	srl	r2,r19,r2
 100a488:	010040b4 	movhi	r4,258
 100a48c:	21273c04 	addi	r4,r4,-25360
 100a490:	01800804 	movi	r6,32
 100a494:	1105883a 	add	r2,r2,r4
 100a498:	10c00003 	ldbu	r3,0(r2)
 100a49c:	28c7883a 	add	r3,r5,r3
 100a4a0:	30c7c83a 	sub	r3,r6,r3
 100a4a4:	1800dc1e 	bne	r3,zero,100a818 <__umoddi3+0x564>
 100a4a8:	002d883a 	mov	r22,zero
 100a4ac:	982ed43a 	srli	r23,r19,16
 100a4b0:	a809883a 	mov	r4,r21
 100a4b4:	9cbfffcc 	andi	r18,r19,65535
 100a4b8:	b80b883a 	mov	r5,r23
 100a4bc:	10021b80 	call	10021b8 <__udivsi3>
 100a4c0:	100b883a 	mov	r5,r2
 100a4c4:	9009883a 	mov	r4,r18
 100a4c8:	10021e00 	call	10021e0 <__mulsi3>
 100a4cc:	a809883a 	mov	r4,r21
 100a4d0:	b80b883a 	mov	r5,r23
 100a4d4:	1023883a 	mov	r17,r2
 100a4d8:	10021cc0 	call	10021cc <__umodsi3>
 100a4dc:	1004943a 	slli	r2,r2,16
 100a4e0:	8006d43a 	srli	r3,r16,16
 100a4e4:	10c4b03a 	or	r2,r2,r3
 100a4e8:	1440032e 	bgeu	r2,r17,100a4f8 <__umoddi3+0x244>
 100a4ec:	14c5883a 	add	r2,r2,r19
 100a4f0:	14c00136 	bltu	r2,r19,100a4f8 <__umoddi3+0x244>
 100a4f4:	14410236 	bltu	r2,r17,100a900 <__umoddi3+0x64c>
 100a4f8:	1463c83a 	sub	r17,r2,r17
 100a4fc:	8809883a 	mov	r4,r17
 100a500:	b80b883a 	mov	r5,r23
 100a504:	10021b80 	call	10021b8 <__udivsi3>
 100a508:	9009883a 	mov	r4,r18
 100a50c:	100b883a 	mov	r5,r2
 100a510:	10021e00 	call	10021e0 <__mulsi3>
 100a514:	8809883a 	mov	r4,r17
 100a518:	b80b883a 	mov	r5,r23
 100a51c:	102b883a 	mov	r21,r2
 100a520:	10021cc0 	call	10021cc <__umodsi3>
 100a524:	1004943a 	slli	r2,r2,16
 100a528:	80ffffcc 	andi	r3,r16,65535
 100a52c:	10c4b03a 	or	r2,r2,r3
 100a530:	1540042e 	bgeu	r2,r21,100a544 <__umoddi3+0x290>
 100a534:	14c5883a 	add	r2,r2,r19
 100a538:	14c00236 	bltu	r2,r19,100a544 <__umoddi3+0x290>
 100a53c:	1540012e 	bgeu	r2,r21,100a544 <__umoddi3+0x290>
 100a540:	14c5883a 	add	r2,r2,r19
 100a544:	1545c83a 	sub	r2,r2,r21
 100a548:	1584d83a 	srl	r2,r2,r22
 100a54c:	0013883a 	mov	r9,zero
 100a550:	d8800415 	stw	r2,16(sp)
 100a554:	d8c00417 	ldw	r3,16(sp)
 100a558:	0005883a 	mov	r2,zero
 100a55c:	d8800515 	stw	r2,20(sp)
 100a560:	1811883a 	mov	r8,r3
 100a564:	003f9d06 	br	100a3dc <__umoddi3+0x128>
 100a568:	00804034 	movhi	r2,256
 100a56c:	10bfffc4 	addi	r2,r2,-1
 100a570:	14c0c636 	bltu	r2,r19,100a88c <__umoddi3+0x5d8>
 100a574:	01400404 	movi	r5,16
 100a578:	2805883a 	mov	r2,r5
 100a57c:	003f6c06 	br	100a330 <__umoddi3+0x7c>
 100a580:	01000044 	movi	r4,1
 100a584:	000b883a 	mov	r5,zero
 100a588:	10021b80 	call	10021b8 <__udivsi3>
 100a58c:	1027883a 	mov	r19,r2
 100a590:	00bfffd4 	movui	r2,65535
 100a594:	14fff436 	bltu	r2,r19,100a568 <__umoddi3+0x2b4>
 100a598:	003f6106 	br	100a320 <__umoddi3+0x6c>
 100a59c:	00804034 	movhi	r2,256
 100a5a0:	10bfffc4 	addi	r2,r2,-1
 100a5a4:	1200c536 	bltu	r2,r8,100a8bc <__umoddi3+0x608>
 100a5a8:	01400404 	movi	r5,16
 100a5ac:	2805883a 	mov	r2,r5
 100a5b0:	003fb406 	br	100a484 <__umoddi3+0x1d0>
 100a5b4:	00804034 	movhi	r2,256
 100a5b8:	10bfffc4 	addi	r2,r2,-1
 100a5bc:	11c0c236 	bltu	r2,r7,100a8c8 <__umoddi3+0x614>
 100a5c0:	01400404 	movi	r5,16
 100a5c4:	2805883a 	mov	r2,r5
 100a5c8:	003f9806 	br	100a42c <__umoddi3+0x178>
 100a5cc:	84c9c83a 	sub	r4,r16,r19
 100a5d0:	8105803a 	cmpltu	r2,r16,r4
 100a5d4:	a987c83a 	sub	r3,r21,r6
 100a5d8:	18abc83a 	sub	r21,r3,r2
 100a5dc:	2021883a 	mov	r16,r4
 100a5e0:	003f9d06 	br	100a458 <__umoddi3+0x1a4>
 100a5e4:	9ca6983a 	sll	r19,r19,r18
 100a5e8:	3485c83a 	sub	r2,r6,r18
 100a5ec:	a8a2d83a 	srl	r17,r21,r2
 100a5f0:	982ed43a 	srli	r23,r19,16
 100a5f4:	ac86983a 	sll	r3,r21,r18
 100a5f8:	8084d83a 	srl	r2,r16,r2
 100a5fc:	8809883a 	mov	r4,r17
 100a600:	b80b883a 	mov	r5,r23
 100a604:	18b8b03a 	or	fp,r3,r2
 100a608:	9d3fffcc 	andi	r20,r19,65535
 100a60c:	10021b80 	call	10021b8 <__udivsi3>
 100a610:	100b883a 	mov	r5,r2
 100a614:	a009883a 	mov	r4,r20
 100a618:	10021e00 	call	10021e0 <__mulsi3>
 100a61c:	8809883a 	mov	r4,r17
 100a620:	b80b883a 	mov	r5,r23
 100a624:	102b883a 	mov	r21,r2
 100a628:	10021cc0 	call	10021cc <__umodsi3>
 100a62c:	1004943a 	slli	r2,r2,16
 100a630:	e006d43a 	srli	r3,fp,16
 100a634:	902d883a 	mov	r22,r18
 100a638:	10c4b03a 	or	r2,r2,r3
 100a63c:	1540022e 	bgeu	r2,r21,100a648 <__umoddi3+0x394>
 100a640:	14c5883a 	add	r2,r2,r19
 100a644:	14c0ab2e 	bgeu	r2,r19,100a8f4 <__umoddi3+0x640>
 100a648:	1563c83a 	sub	r17,r2,r21
 100a64c:	8809883a 	mov	r4,r17
 100a650:	b80b883a 	mov	r5,r23
 100a654:	10021b80 	call	10021b8 <__udivsi3>
 100a658:	100b883a 	mov	r5,r2
 100a65c:	a009883a 	mov	r4,r20
 100a660:	10021e00 	call	10021e0 <__mulsi3>
 100a664:	8809883a 	mov	r4,r17
 100a668:	b80b883a 	mov	r5,r23
 100a66c:	102b883a 	mov	r21,r2
 100a670:	10021cc0 	call	10021cc <__umodsi3>
 100a674:	1004943a 	slli	r2,r2,16
 100a678:	e0ffffcc 	andi	r3,fp,65535
 100a67c:	10c4b03a 	or	r2,r2,r3
 100a680:	1540042e 	bgeu	r2,r21,100a694 <__umoddi3+0x3e0>
 100a684:	14c5883a 	add	r2,r2,r19
 100a688:	14c00236 	bltu	r2,r19,100a694 <__umoddi3+0x3e0>
 100a68c:	1540012e 	bgeu	r2,r21,100a694 <__umoddi3+0x3e0>
 100a690:	14c5883a 	add	r2,r2,r19
 100a694:	84a0983a 	sll	r16,r16,r18
 100a698:	156bc83a 	sub	r21,r2,r21
 100a69c:	003f3106 	br	100a364 <__umoddi3+0xb0>
 100a6a0:	3c8fc83a 	sub	r7,r7,r18
 100a6a4:	3486983a 	sll	r3,r6,r18
 100a6a8:	99c4d83a 	srl	r2,r19,r7
 100a6ac:	a9e2d83a 	srl	r17,r21,r7
 100a6b0:	ac8c983a 	sll	r6,r21,r18
 100a6b4:	18acb03a 	or	r22,r3,r2
 100a6b8:	b02ed43a 	srli	r23,r22,16
 100a6bc:	81c4d83a 	srl	r2,r16,r7
 100a6c0:	8809883a 	mov	r4,r17
 100a6c4:	b80b883a 	mov	r5,r23
 100a6c8:	308cb03a 	or	r6,r6,r2
 100a6cc:	d9c00315 	stw	r7,12(sp)
 100a6d0:	d9800215 	stw	r6,8(sp)
 100a6d4:	b53fffcc 	andi	r20,r22,65535
 100a6d8:	10021b80 	call	10021b8 <__udivsi3>
 100a6dc:	100b883a 	mov	r5,r2
 100a6e0:	a009883a 	mov	r4,r20
 100a6e4:	1039883a 	mov	fp,r2
 100a6e8:	10021e00 	call	10021e0 <__mulsi3>
 100a6ec:	8809883a 	mov	r4,r17
 100a6f0:	b80b883a 	mov	r5,r23
 100a6f4:	102b883a 	mov	r21,r2
 100a6f8:	10021cc0 	call	10021cc <__umodsi3>
 100a6fc:	d9000217 	ldw	r4,8(sp)
 100a700:	1004943a 	slli	r2,r2,16
 100a704:	9ca6983a 	sll	r19,r19,r18
 100a708:	2006d43a 	srli	r3,r4,16
 100a70c:	84a0983a 	sll	r16,r16,r18
 100a710:	dcc00015 	stw	r19,0(sp)
 100a714:	10c4b03a 	or	r2,r2,r3
 100a718:	dc000115 	stw	r16,4(sp)
 100a71c:	1540032e 	bgeu	r2,r21,100a72c <__umoddi3+0x478>
 100a720:	1585883a 	add	r2,r2,r22
 100a724:	e73fffc4 	addi	fp,fp,-1
 100a728:	15806e2e 	bgeu	r2,r22,100a8e4 <__umoddi3+0x630>
 100a72c:	1563c83a 	sub	r17,r2,r21
 100a730:	8809883a 	mov	r4,r17
 100a734:	b80b883a 	mov	r5,r23
 100a738:	10021b80 	call	10021b8 <__udivsi3>
 100a73c:	100b883a 	mov	r5,r2
 100a740:	a009883a 	mov	r4,r20
 100a744:	1021883a 	mov	r16,r2
 100a748:	10021e00 	call	10021e0 <__mulsi3>
 100a74c:	b80b883a 	mov	r5,r23
 100a750:	8809883a 	mov	r4,r17
 100a754:	1029883a 	mov	r20,r2
 100a758:	10021cc0 	call	10021cc <__umodsi3>
 100a75c:	d9400217 	ldw	r5,8(sp)
 100a760:	1004943a 	slli	r2,r2,16
 100a764:	28ffffcc 	andi	r3,r5,65535
 100a768:	10c4b03a 	or	r2,r2,r3
 100a76c:	1500032e 	bgeu	r2,r20,100a77c <__umoddi3+0x4c8>
 100a770:	1585883a 	add	r2,r2,r22
 100a774:	843fffc4 	addi	r16,r16,-1
 100a778:	1580562e 	bgeu	r2,r22,100a8d4 <__umoddi3+0x620>
 100a77c:	d9800017 	ldw	r6,0(sp)
 100a780:	e022943a 	slli	r17,fp,16
 100a784:	302ed43a 	srli	r23,r6,16
 100a788:	8462b03a 	or	r17,r16,r17
 100a78c:	34ffffcc 	andi	r19,r6,65535
 100a790:	882ad43a 	srli	r21,r17,16
 100a794:	8c7fffcc 	andi	r17,r17,65535
 100a798:	8809883a 	mov	r4,r17
 100a79c:	980b883a 	mov	r5,r19
 100a7a0:	1521c83a 	sub	r16,r2,r20
 100a7a4:	10021e00 	call	10021e0 <__mulsi3>
 100a7a8:	8809883a 	mov	r4,r17
 100a7ac:	b80b883a 	mov	r5,r23
 100a7b0:	1029883a 	mov	r20,r2
 100a7b4:	10021e00 	call	10021e0 <__mulsi3>
 100a7b8:	980b883a 	mov	r5,r19
 100a7bc:	a809883a 	mov	r4,r21
 100a7c0:	1023883a 	mov	r17,r2
 100a7c4:	10021e00 	call	10021e0 <__mulsi3>
 100a7c8:	a809883a 	mov	r4,r21
 100a7cc:	b80b883a 	mov	r5,r23
 100a7d0:	1027883a 	mov	r19,r2
 100a7d4:	10021e00 	call	10021e0 <__mulsi3>
 100a7d8:	100b883a 	mov	r5,r2
 100a7dc:	a004d43a 	srli	r2,r20,16
 100a7e0:	8ce3883a 	add	r17,r17,r19
 100a7e4:	1449883a 	add	r4,r2,r17
 100a7e8:	24c0022e 	bgeu	r4,r19,100a7f4 <__umoddi3+0x540>
 100a7ec:	00800074 	movhi	r2,1
 100a7f0:	288b883a 	add	r5,r5,r2
 100a7f4:	2004d43a 	srli	r2,r4,16
 100a7f8:	2008943a 	slli	r4,r4,16
 100a7fc:	a0ffffcc 	andi	r3,r20,65535
 100a800:	288d883a 	add	r6,r5,r2
 100a804:	20c9883a 	add	r4,r4,r3
 100a808:	81800b36 	bltu	r16,r6,100a838 <__umoddi3+0x584>
 100a80c:	81804026 	beq	r16,r6,100a910 <__umoddi3+0x65c>
 100a810:	818dc83a 	sub	r6,r16,r6
 100a814:	00000f06 	br	100a854 <__umoddi3+0x5a0>
 100a818:	30c5c83a 	sub	r2,r6,r3
 100a81c:	182d883a 	mov	r22,r3
 100a820:	8084d83a 	srl	r2,r16,r2
 100a824:	a8c6983a 	sll	r3,r21,r3
 100a828:	9da6983a 	sll	r19,r19,r22
 100a82c:	85a0983a 	sll	r16,r16,r22
 100a830:	18aab03a 	or	r21,r3,r2
 100a834:	003f1d06 	br	100a4ac <__umoddi3+0x1f8>
 100a838:	d8c00017 	ldw	r3,0(sp)
 100a83c:	20c5c83a 	sub	r2,r4,r3
 100a840:	2089803a 	cmpltu	r4,r4,r2
 100a844:	3587c83a 	sub	r3,r6,r22
 100a848:	1907c83a 	sub	r3,r3,r4
 100a84c:	80cdc83a 	sub	r6,r16,r3
 100a850:	1009883a 	mov	r4,r2
 100a854:	d9400117 	ldw	r5,4(sp)
 100a858:	2905c83a 	sub	r2,r5,r4
 100a85c:	2887803a 	cmpltu	r3,r5,r2
 100a860:	30c7c83a 	sub	r3,r6,r3
 100a864:	d9800317 	ldw	r6,12(sp)
 100a868:	1484d83a 	srl	r2,r2,r18
 100a86c:	1988983a 	sll	r4,r3,r6
 100a870:	1c86d83a 	srl	r3,r3,r18
 100a874:	2088b03a 	or	r4,r4,r2
 100a878:	2011883a 	mov	r8,r4
 100a87c:	1813883a 	mov	r9,r3
 100a880:	d9000415 	stw	r4,16(sp)
 100a884:	d8c00515 	stw	r3,20(sp)
 100a888:	003ed406 	br	100a3dc <__umoddi3+0x128>
 100a88c:	01400604 	movi	r5,24
 100a890:	2805883a 	mov	r2,r5
 100a894:	003ea606 	br	100a330 <__umoddi3+0x7c>
 100a898:	01400204 	movi	r5,8
 100a89c:	2805883a 	mov	r2,r5
 100a8a0:	003ea306 	br	100a330 <__umoddi3+0x7c>
 100a8a4:	01400204 	movi	r5,8
 100a8a8:	2805883a 	mov	r2,r5
 100a8ac:	003edf06 	br	100a42c <__umoddi3+0x178>
 100a8b0:	01400204 	movi	r5,8
 100a8b4:	2805883a 	mov	r2,r5
 100a8b8:	003ef206 	br	100a484 <__umoddi3+0x1d0>
 100a8bc:	01400604 	movi	r5,24
 100a8c0:	2805883a 	mov	r2,r5
 100a8c4:	003eef06 	br	100a484 <__umoddi3+0x1d0>
 100a8c8:	01400604 	movi	r5,24
 100a8cc:	2805883a 	mov	r2,r5
 100a8d0:	003ed606 	br	100a42c <__umoddi3+0x178>
 100a8d4:	153fa92e 	bgeu	r2,r20,100a77c <__umoddi3+0x4c8>
 100a8d8:	843fffc4 	addi	r16,r16,-1
 100a8dc:	1585883a 	add	r2,r2,r22
 100a8e0:	003fa606 	br	100a77c <__umoddi3+0x4c8>
 100a8e4:	157f912e 	bgeu	r2,r21,100a72c <__umoddi3+0x478>
 100a8e8:	e73fffc4 	addi	fp,fp,-1
 100a8ec:	1585883a 	add	r2,r2,r22
 100a8f0:	003f8e06 	br	100a72c <__umoddi3+0x478>
 100a8f4:	157f542e 	bgeu	r2,r21,100a648 <__umoddi3+0x394>
 100a8f8:	14c5883a 	add	r2,r2,r19
 100a8fc:	003f5206 	br	100a648 <__umoddi3+0x394>
 100a900:	14c5883a 	add	r2,r2,r19
 100a904:	003efc06 	br	100a4f8 <__umoddi3+0x244>
 100a908:	14c5883a 	add	r2,r2,r19
 100a90c:	003ea606 	br	100a3a8 <__umoddi3+0xf4>
 100a910:	d8800117 	ldw	r2,4(sp)
 100a914:	113fc836 	bltu	r2,r4,100a838 <__umoddi3+0x584>
 100a918:	000d883a 	mov	r6,zero
 100a91c:	003fcd06 	br	100a854 <__umoddi3+0x5a0>

0100a920 <_fpadd_parts>:
 100a920:	f811883a 	mov	r8,ra
 100a924:	100c1d00 	call	100c1d0 <_mcount>
 100a928:	403f883a 	mov	ra,r8
 100a92c:	defff804 	addi	sp,sp,-32
 100a930:	ddc00715 	stw	r23,28(sp)
 100a934:	dd800615 	stw	r22,24(sp)
 100a938:	dd400515 	stw	r21,20(sp)
 100a93c:	dd000415 	stw	r20,16(sp)
 100a940:	dcc00315 	stw	r19,12(sp)
 100a944:	dc800215 	stw	r18,8(sp)
 100a948:	dc400115 	stw	r17,4(sp)
 100a94c:	dc000015 	stw	r16,0(sp)
 100a950:	2027883a 	mov	r19,r4
 100a954:	21000017 	ldw	r4,0(r4)
 100a958:	00c00044 	movi	r3,1
 100a95c:	282b883a 	mov	r21,r5
 100a960:	3029883a 	mov	r20,r6
 100a964:	1900632e 	bgeu	r3,r4,100aaf4 <_fpadd_parts+0x1d4>
 100a968:	28800017 	ldw	r2,0(r5)
 100a96c:	1880812e 	bgeu	r3,r2,100ab74 <_fpadd_parts+0x254>
 100a970:	00c00104 	movi	r3,4
 100a974:	20c0dc26 	beq	r4,r3,100ace8 <_fpadd_parts+0x3c8>
 100a978:	10c07e26 	beq	r2,r3,100ab74 <_fpadd_parts+0x254>
 100a97c:	00c00084 	movi	r3,2
 100a980:	10c06726 	beq	r2,r3,100ab20 <_fpadd_parts+0x200>
 100a984:	20c07b26 	beq	r4,r3,100ab74 <_fpadd_parts+0x254>
 100a988:	9dc00217 	ldw	r23,8(r19)
 100a98c:	28c00217 	ldw	r3,8(r5)
 100a990:	9c400317 	ldw	r17,12(r19)
 100a994:	2bc00317 	ldw	r15,12(r5)
 100a998:	b8cdc83a 	sub	r6,r23,r3
 100a99c:	9c800417 	ldw	r18,16(r19)
 100a9a0:	2c000417 	ldw	r16,16(r5)
 100a9a4:	3009883a 	mov	r4,r6
 100a9a8:	30009716 	blt	r6,zero,100ac08 <_fpadd_parts+0x2e8>
 100a9ac:	00800fc4 	movi	r2,63
 100a9b0:	11806b16 	blt	r2,r6,100ab60 <_fpadd_parts+0x240>
 100a9b4:	0100a40e 	bge	zero,r4,100ac48 <_fpadd_parts+0x328>
 100a9b8:	35bff804 	addi	r22,r6,-32
 100a9bc:	b000bc16 	blt	r22,zero,100acb0 <_fpadd_parts+0x390>
 100a9c0:	8596d83a 	srl	r11,r16,r22
 100a9c4:	0019883a 	mov	r12,zero
 100a9c8:	0013883a 	mov	r9,zero
 100a9cc:	01000044 	movi	r4,1
 100a9d0:	0015883a 	mov	r10,zero
 100a9d4:	b000be16 	blt	r22,zero,100acd0 <_fpadd_parts+0x3b0>
 100a9d8:	2590983a 	sll	r8,r4,r22
 100a9dc:	000f883a 	mov	r7,zero
 100a9e0:	00bfffc4 	movi	r2,-1
 100a9e4:	3889883a 	add	r4,r7,r2
 100a9e8:	408b883a 	add	r5,r8,r2
 100a9ec:	21cd803a 	cmpltu	r6,r4,r7
 100a9f0:	314b883a 	add	r5,r6,r5
 100a9f4:	7904703a 	and	r2,r15,r4
 100a9f8:	8146703a 	and	r3,r16,r5
 100a9fc:	10c4b03a 	or	r2,r2,r3
 100aa00:	10000226 	beq	r2,zero,100aa0c <_fpadd_parts+0xec>
 100aa04:	02400044 	movi	r9,1
 100aa08:	0015883a 	mov	r10,zero
 100aa0c:	5a5eb03a 	or	r15,r11,r9
 100aa10:	62a0b03a 	or	r16,r12,r10
 100aa14:	99400117 	ldw	r5,4(r19)
 100aa18:	a8800117 	ldw	r2,4(r21)
 100aa1c:	28806e26 	beq	r5,r2,100abd8 <_fpadd_parts+0x2b8>
 100aa20:	28006626 	beq	r5,zero,100abbc <_fpadd_parts+0x29c>
 100aa24:	7c45c83a 	sub	r2,r15,r17
 100aa28:	7889803a 	cmpltu	r4,r15,r2
 100aa2c:	8487c83a 	sub	r3,r16,r18
 100aa30:	1909c83a 	sub	r4,r3,r4
 100aa34:	100d883a 	mov	r6,r2
 100aa38:	200f883a 	mov	r7,r4
 100aa3c:	38007716 	blt	r7,zero,100ac1c <_fpadd_parts+0x2fc>
 100aa40:	a5c00215 	stw	r23,8(r20)
 100aa44:	a1c00415 	stw	r7,16(r20)
 100aa48:	a0000115 	stw	zero,4(r20)
 100aa4c:	a1800315 	stw	r6,12(r20)
 100aa50:	a2000317 	ldw	r8,12(r20)
 100aa54:	a2400417 	ldw	r9,16(r20)
 100aa58:	00bfffc4 	movi	r2,-1
 100aa5c:	408b883a 	add	r5,r8,r2
 100aa60:	2a09803a 	cmpltu	r4,r5,r8
 100aa64:	488d883a 	add	r6,r9,r2
 100aa68:	01c40034 	movhi	r7,4096
 100aa6c:	39ffffc4 	addi	r7,r7,-1
 100aa70:	218d883a 	add	r6,r4,r6
 100aa74:	39801736 	bltu	r7,r6,100aad4 <_fpadd_parts+0x1b4>
 100aa78:	31c06526 	beq	r6,r7,100ac10 <_fpadd_parts+0x2f0>
 100aa7c:	a3000217 	ldw	r12,8(r20)
 100aa80:	4209883a 	add	r4,r8,r8
 100aa84:	00bfffc4 	movi	r2,-1
 100aa88:	220f803a 	cmpltu	r7,r4,r8
 100aa8c:	4a4b883a 	add	r5,r9,r9
 100aa90:	394f883a 	add	r7,r7,r5
 100aa94:	2095883a 	add	r10,r4,r2
 100aa98:	3897883a 	add	r11,r7,r2
 100aa9c:	510d803a 	cmpltu	r6,r10,r4
 100aaa0:	6099883a 	add	r12,r12,r2
 100aaa4:	32d7883a 	add	r11,r6,r11
 100aaa8:	00840034 	movhi	r2,4096
 100aaac:	10bfffc4 	addi	r2,r2,-1
 100aab0:	2011883a 	mov	r8,r4
 100aab4:	3813883a 	mov	r9,r7
 100aab8:	a1000315 	stw	r4,12(r20)
 100aabc:	a1c00415 	stw	r7,16(r20)
 100aac0:	a3000215 	stw	r12,8(r20)
 100aac4:	12c00336 	bltu	r2,r11,100aad4 <_fpadd_parts+0x1b4>
 100aac8:	58bfed1e 	bne	r11,r2,100aa80 <_fpadd_parts+0x160>
 100aacc:	00bfff84 	movi	r2,-2
 100aad0:	12bfeb2e 	bgeu	r2,r10,100aa80 <_fpadd_parts+0x160>
 100aad4:	a2800417 	ldw	r10,16(r20)
 100aad8:	008000c4 	movi	r2,3
 100aadc:	00c80034 	movhi	r3,8192
 100aae0:	18ffffc4 	addi	r3,r3,-1
 100aae4:	a2400317 	ldw	r9,12(r20)
 100aae8:	a0800015 	stw	r2,0(r20)
 100aaec:	1a802336 	bltu	r3,r10,100ab7c <_fpadd_parts+0x25c>
 100aaf0:	a027883a 	mov	r19,r20
 100aaf4:	9805883a 	mov	r2,r19
 100aaf8:	ddc00717 	ldw	r23,28(sp)
 100aafc:	dd800617 	ldw	r22,24(sp)
 100ab00:	dd400517 	ldw	r21,20(sp)
 100ab04:	dd000417 	ldw	r20,16(sp)
 100ab08:	dcc00317 	ldw	r19,12(sp)
 100ab0c:	dc800217 	ldw	r18,8(sp)
 100ab10:	dc400117 	ldw	r17,4(sp)
 100ab14:	dc000017 	ldw	r16,0(sp)
 100ab18:	dec00804 	addi	sp,sp,32
 100ab1c:	f800283a 	ret
 100ab20:	20fff41e 	bne	r4,r3,100aaf4 <_fpadd_parts+0x1d4>
 100ab24:	31000015 	stw	r4,0(r6)
 100ab28:	98800117 	ldw	r2,4(r19)
 100ab2c:	30800115 	stw	r2,4(r6)
 100ab30:	98c00217 	ldw	r3,8(r19)
 100ab34:	30c00215 	stw	r3,8(r6)
 100ab38:	98800317 	ldw	r2,12(r19)
 100ab3c:	30800315 	stw	r2,12(r6)
 100ab40:	98c00417 	ldw	r3,16(r19)
 100ab44:	30c00415 	stw	r3,16(r6)
 100ab48:	98800117 	ldw	r2,4(r19)
 100ab4c:	28c00117 	ldw	r3,4(r5)
 100ab50:	3027883a 	mov	r19,r6
 100ab54:	10c4703a 	and	r2,r2,r3
 100ab58:	30800115 	stw	r2,4(r6)
 100ab5c:	003fe506 	br	100aaf4 <_fpadd_parts+0x1d4>
 100ab60:	1dc02616 	blt	r3,r23,100abfc <_fpadd_parts+0x2dc>
 100ab64:	0023883a 	mov	r17,zero
 100ab68:	182f883a 	mov	r23,r3
 100ab6c:	0025883a 	mov	r18,zero
 100ab70:	003fa806 	br	100aa14 <_fpadd_parts+0xf4>
 100ab74:	a827883a 	mov	r19,r21
 100ab78:	003fde06 	br	100aaf4 <_fpadd_parts+0x1d4>
 100ab7c:	01800044 	movi	r6,1
 100ab80:	500497fa 	slli	r2,r10,31
 100ab84:	4808d07a 	srli	r4,r9,1
 100ab88:	518ad83a 	srl	r5,r10,r6
 100ab8c:	a2000217 	ldw	r8,8(r20)
 100ab90:	1108b03a 	or	r4,r2,r4
 100ab94:	0007883a 	mov	r3,zero
 100ab98:	4984703a 	and	r2,r9,r6
 100ab9c:	208cb03a 	or	r6,r4,r2
 100aba0:	28ceb03a 	or	r7,r5,r3
 100aba4:	42000044 	addi	r8,r8,1
 100aba8:	a027883a 	mov	r19,r20
 100abac:	a1c00415 	stw	r7,16(r20)
 100abb0:	a2000215 	stw	r8,8(r20)
 100abb4:	a1800315 	stw	r6,12(r20)
 100abb8:	003fce06 	br	100aaf4 <_fpadd_parts+0x1d4>
 100abbc:	8bc5c83a 	sub	r2,r17,r15
 100abc0:	8889803a 	cmpltu	r4,r17,r2
 100abc4:	9407c83a 	sub	r3,r18,r16
 100abc8:	1909c83a 	sub	r4,r3,r4
 100abcc:	100d883a 	mov	r6,r2
 100abd0:	200f883a 	mov	r7,r4
 100abd4:	003f9906 	br	100aa3c <_fpadd_parts+0x11c>
 100abd8:	7c45883a 	add	r2,r15,r17
 100abdc:	13c9803a 	cmpltu	r4,r2,r15
 100abe0:	8487883a 	add	r3,r16,r18
 100abe4:	20c9883a 	add	r4,r4,r3
 100abe8:	a1400115 	stw	r5,4(r20)
 100abec:	a5c00215 	stw	r23,8(r20)
 100abf0:	a0800315 	stw	r2,12(r20)
 100abf4:	a1000415 	stw	r4,16(r20)
 100abf8:	003fb606 	br	100aad4 <_fpadd_parts+0x1b4>
 100abfc:	001f883a 	mov	r15,zero
 100ac00:	0021883a 	mov	r16,zero
 100ac04:	003f8306 	br	100aa14 <_fpadd_parts+0xf4>
 100ac08:	018dc83a 	sub	r6,zero,r6
 100ac0c:	003f6706 	br	100a9ac <_fpadd_parts+0x8c>
 100ac10:	00bfff84 	movi	r2,-2
 100ac14:	117faf36 	bltu	r2,r5,100aad4 <_fpadd_parts+0x1b4>
 100ac18:	003f9806 	br	100aa7c <_fpadd_parts+0x15c>
 100ac1c:	0005883a 	mov	r2,zero
 100ac20:	1189c83a 	sub	r4,r2,r6
 100ac24:	1105803a 	cmpltu	r2,r2,r4
 100ac28:	01cbc83a 	sub	r5,zero,r7
 100ac2c:	2885c83a 	sub	r2,r5,r2
 100ac30:	01800044 	movi	r6,1
 100ac34:	a1800115 	stw	r6,4(r20)
 100ac38:	a5c00215 	stw	r23,8(r20)
 100ac3c:	a1000315 	stw	r4,12(r20)
 100ac40:	a0800415 	stw	r2,16(r20)
 100ac44:	003f8206 	br	100aa50 <_fpadd_parts+0x130>
 100ac48:	203f7226 	beq	r4,zero,100aa14 <_fpadd_parts+0xf4>
 100ac4c:	35bff804 	addi	r22,r6,-32
 100ac50:	b9af883a 	add	r23,r23,r6
 100ac54:	b0003116 	blt	r22,zero,100ad1c <_fpadd_parts+0x3fc>
 100ac58:	959ad83a 	srl	r13,r18,r22
 100ac5c:	001d883a 	mov	r14,zero
 100ac60:	000f883a 	mov	r7,zero
 100ac64:	01000044 	movi	r4,1
 100ac68:	0011883a 	mov	r8,zero
 100ac6c:	b0002516 	blt	r22,zero,100ad04 <_fpadd_parts+0x3e4>
 100ac70:	2594983a 	sll	r10,r4,r22
 100ac74:	0013883a 	mov	r9,zero
 100ac78:	00bfffc4 	movi	r2,-1
 100ac7c:	4889883a 	add	r4,r9,r2
 100ac80:	508b883a 	add	r5,r10,r2
 100ac84:	224d803a 	cmpltu	r6,r4,r9
 100ac88:	314b883a 	add	r5,r6,r5
 100ac8c:	8904703a 	and	r2,r17,r4
 100ac90:	9146703a 	and	r3,r18,r5
 100ac94:	10c4b03a 	or	r2,r2,r3
 100ac98:	10000226 	beq	r2,zero,100aca4 <_fpadd_parts+0x384>
 100ac9c:	01c00044 	movi	r7,1
 100aca0:	0011883a 	mov	r8,zero
 100aca4:	69e2b03a 	or	r17,r13,r7
 100aca8:	7224b03a 	or	r18,r14,r8
 100acac:	003f5906 	br	100aa14 <_fpadd_parts+0xf4>
 100acb0:	8407883a 	add	r3,r16,r16
 100acb4:	008007c4 	movi	r2,31
 100acb8:	1185c83a 	sub	r2,r2,r6
 100acbc:	1886983a 	sll	r3,r3,r2
 100acc0:	7996d83a 	srl	r11,r15,r6
 100acc4:	8198d83a 	srl	r12,r16,r6
 100acc8:	1ad6b03a 	or	r11,r3,r11
 100accc:	003f3e06 	br	100a9c8 <_fpadd_parts+0xa8>
 100acd0:	2006d07a 	srli	r3,r4,1
 100acd4:	008007c4 	movi	r2,31
 100acd8:	1185c83a 	sub	r2,r2,r6
 100acdc:	1890d83a 	srl	r8,r3,r2
 100ace0:	218e983a 	sll	r7,r4,r6
 100ace4:	003f3e06 	br	100a9e0 <_fpadd_parts+0xc0>
 100ace8:	113f821e 	bne	r2,r4,100aaf4 <_fpadd_parts+0x1d4>
 100acec:	28c00117 	ldw	r3,4(r5)
 100acf0:	98800117 	ldw	r2,4(r19)
 100acf4:	10ff7f26 	beq	r2,r3,100aaf4 <_fpadd_parts+0x1d4>
 100acf8:	04c040b4 	movhi	r19,258
 100acfc:	9ce73704 	addi	r19,r19,-25380
 100ad00:	003f7c06 	br	100aaf4 <_fpadd_parts+0x1d4>
 100ad04:	2006d07a 	srli	r3,r4,1
 100ad08:	008007c4 	movi	r2,31
 100ad0c:	1185c83a 	sub	r2,r2,r6
 100ad10:	1894d83a 	srl	r10,r3,r2
 100ad14:	2192983a 	sll	r9,r4,r6
 100ad18:	003fd706 	br	100ac78 <_fpadd_parts+0x358>
 100ad1c:	9487883a 	add	r3,r18,r18
 100ad20:	008007c4 	movi	r2,31
 100ad24:	1185c83a 	sub	r2,r2,r6
 100ad28:	1886983a 	sll	r3,r3,r2
 100ad2c:	899ad83a 	srl	r13,r17,r6
 100ad30:	919cd83a 	srl	r14,r18,r6
 100ad34:	1b5ab03a 	or	r13,r3,r13
 100ad38:	003fc906 	br	100ac60 <_fpadd_parts+0x340>

0100ad3c <__subdf3>:
 100ad3c:	f811883a 	mov	r8,ra
 100ad40:	100c1d00 	call	100c1d0 <_mcount>
 100ad44:	403f883a 	mov	ra,r8
 100ad48:	deffea04 	addi	sp,sp,-88
 100ad4c:	dfc01515 	stw	ra,84(sp)
 100ad50:	dcc01415 	stw	r19,80(sp)
 100ad54:	dc401315 	stw	r17,76(sp)
 100ad58:	dcc00404 	addi	r19,sp,16
 100ad5c:	2011883a 	mov	r8,r4
 100ad60:	2813883a 	mov	r9,r5
 100ad64:	d809883a 	mov	r4,sp
 100ad68:	980b883a 	mov	r5,r19
 100ad6c:	dc400904 	addi	r17,sp,36
 100ad70:	da400115 	stw	r9,4(sp)
 100ad74:	d9c00315 	stw	r7,12(sp)
 100ad78:	da000015 	stw	r8,0(sp)
 100ad7c:	d9800215 	stw	r6,8(sp)
 100ad80:	10025d00 	call	10025d0 <__unpack_d>
 100ad84:	d9000204 	addi	r4,sp,8
 100ad88:	880b883a 	mov	r5,r17
 100ad8c:	10025d00 	call	10025d0 <__unpack_d>
 100ad90:	d8800a17 	ldw	r2,40(sp)
 100ad94:	880b883a 	mov	r5,r17
 100ad98:	9809883a 	mov	r4,r19
 100ad9c:	d9800e04 	addi	r6,sp,56
 100ada0:	1080005c 	xori	r2,r2,1
 100ada4:	d8800a15 	stw	r2,40(sp)
 100ada8:	100a9200 	call	100a920 <_fpadd_parts>
 100adac:	1009883a 	mov	r4,r2
 100adb0:	10022b00 	call	10022b0 <__pack_d>
 100adb4:	dfc01517 	ldw	ra,84(sp)
 100adb8:	dcc01417 	ldw	r19,80(sp)
 100adbc:	dc401317 	ldw	r17,76(sp)
 100adc0:	dec01604 	addi	sp,sp,88
 100adc4:	f800283a 	ret

0100adc8 <__adddf3>:
 100adc8:	f811883a 	mov	r8,ra
 100adcc:	100c1d00 	call	100c1d0 <_mcount>
 100add0:	403f883a 	mov	ra,r8
 100add4:	deffea04 	addi	sp,sp,-88
 100add8:	dfc01515 	stw	ra,84(sp)
 100addc:	dcc01415 	stw	r19,80(sp)
 100ade0:	dc401315 	stw	r17,76(sp)
 100ade4:	dcc00404 	addi	r19,sp,16
 100ade8:	2011883a 	mov	r8,r4
 100adec:	2813883a 	mov	r9,r5
 100adf0:	d809883a 	mov	r4,sp
 100adf4:	980b883a 	mov	r5,r19
 100adf8:	dc400904 	addi	r17,sp,36
 100adfc:	da400115 	stw	r9,4(sp)
 100ae00:	d9c00315 	stw	r7,12(sp)
 100ae04:	da000015 	stw	r8,0(sp)
 100ae08:	d9800215 	stw	r6,8(sp)
 100ae0c:	10025d00 	call	10025d0 <__unpack_d>
 100ae10:	d9000204 	addi	r4,sp,8
 100ae14:	880b883a 	mov	r5,r17
 100ae18:	10025d00 	call	10025d0 <__unpack_d>
 100ae1c:	d9800e04 	addi	r6,sp,56
 100ae20:	9809883a 	mov	r4,r19
 100ae24:	880b883a 	mov	r5,r17
 100ae28:	100a9200 	call	100a920 <_fpadd_parts>
 100ae2c:	1009883a 	mov	r4,r2
 100ae30:	10022b00 	call	10022b0 <__pack_d>
 100ae34:	dfc01517 	ldw	ra,84(sp)
 100ae38:	dcc01417 	ldw	r19,80(sp)
 100ae3c:	dc401317 	ldw	r17,76(sp)
 100ae40:	dec01604 	addi	sp,sp,88
 100ae44:	f800283a 	ret

0100ae48 <__muldf3>:
 100ae48:	f811883a 	mov	r8,ra
 100ae4c:	100c1d00 	call	100c1d0 <_mcount>
 100ae50:	403f883a 	mov	ra,r8
 100ae54:	deffe004 	addi	sp,sp,-128
 100ae58:	dfc01f15 	stw	ra,124(sp)
 100ae5c:	ddc01e15 	stw	r23,120(sp)
 100ae60:	dd801d15 	stw	r22,116(sp)
 100ae64:	dd401c15 	stw	r21,112(sp)
 100ae68:	dd001b15 	stw	r20,108(sp)
 100ae6c:	dcc01a15 	stw	r19,104(sp)
 100ae70:	dc801915 	stw	r18,100(sp)
 100ae74:	dc401815 	stw	r17,96(sp)
 100ae78:	dc001715 	stw	r16,92(sp)
 100ae7c:	dc400404 	addi	r17,sp,16
 100ae80:	2011883a 	mov	r8,r4
 100ae84:	2813883a 	mov	r9,r5
 100ae88:	d809883a 	mov	r4,sp
 100ae8c:	880b883a 	mov	r5,r17
 100ae90:	dc000904 	addi	r16,sp,36
 100ae94:	da400115 	stw	r9,4(sp)
 100ae98:	d9c00315 	stw	r7,12(sp)
 100ae9c:	da000015 	stw	r8,0(sp)
 100aea0:	d9800215 	stw	r6,8(sp)
 100aea4:	10025d00 	call	10025d0 <__unpack_d>
 100aea8:	d9000204 	addi	r4,sp,8
 100aeac:	800b883a 	mov	r5,r16
 100aeb0:	10025d00 	call	10025d0 <__unpack_d>
 100aeb4:	d9000417 	ldw	r4,16(sp)
 100aeb8:	00800044 	movi	r2,1
 100aebc:	1100102e 	bgeu	r2,r4,100af00 <__muldf3+0xb8>
 100aec0:	d8c00917 	ldw	r3,36(sp)
 100aec4:	10c0062e 	bgeu	r2,r3,100aee0 <__muldf3+0x98>
 100aec8:	00800104 	movi	r2,4
 100aecc:	20800a26 	beq	r4,r2,100aef8 <__muldf3+0xb0>
 100aed0:	1880cc26 	beq	r3,r2,100b204 <__muldf3+0x3bc>
 100aed4:	00800084 	movi	r2,2
 100aed8:	20800926 	beq	r4,r2,100af00 <__muldf3+0xb8>
 100aedc:	1880191e 	bne	r3,r2,100af44 <__muldf3+0xfc>
 100aee0:	d8c00a17 	ldw	r3,40(sp)
 100aee4:	d8800517 	ldw	r2,20(sp)
 100aee8:	8009883a 	mov	r4,r16
 100aeec:	10c4c03a 	cmpne	r2,r2,r3
 100aef0:	d8800a15 	stw	r2,40(sp)
 100aef4:	00000706 	br	100af14 <__muldf3+0xcc>
 100aef8:	00800084 	movi	r2,2
 100aefc:	1880c326 	beq	r3,r2,100b20c <__muldf3+0x3c4>
 100af00:	d8800517 	ldw	r2,20(sp)
 100af04:	d8c00a17 	ldw	r3,40(sp)
 100af08:	8809883a 	mov	r4,r17
 100af0c:	10c4c03a 	cmpne	r2,r2,r3
 100af10:	d8800515 	stw	r2,20(sp)
 100af14:	10022b00 	call	10022b0 <__pack_d>
 100af18:	dfc01f17 	ldw	ra,124(sp)
 100af1c:	ddc01e17 	ldw	r23,120(sp)
 100af20:	dd801d17 	ldw	r22,116(sp)
 100af24:	dd401c17 	ldw	r21,112(sp)
 100af28:	dd001b17 	ldw	r20,108(sp)
 100af2c:	dcc01a17 	ldw	r19,104(sp)
 100af30:	dc801917 	ldw	r18,100(sp)
 100af34:	dc401817 	ldw	r17,96(sp)
 100af38:	dc001717 	ldw	r16,92(sp)
 100af3c:	dec02004 	addi	sp,sp,128
 100af40:	f800283a 	ret
 100af44:	dd800717 	ldw	r22,28(sp)
 100af48:	dc800c17 	ldw	r18,48(sp)
 100af4c:	002b883a 	mov	r21,zero
 100af50:	0023883a 	mov	r17,zero
 100af54:	a80b883a 	mov	r5,r21
 100af58:	b00d883a 	mov	r6,r22
 100af5c:	880f883a 	mov	r7,r17
 100af60:	ddc00817 	ldw	r23,32(sp)
 100af64:	dcc00d17 	ldw	r19,52(sp)
 100af68:	9009883a 	mov	r4,r18
 100af6c:	100b6e40 	call	100b6e4 <__muldi3>
 100af70:	001b883a 	mov	r13,zero
 100af74:	680f883a 	mov	r7,r13
 100af78:	b009883a 	mov	r4,r22
 100af7c:	000b883a 	mov	r5,zero
 100af80:	980d883a 	mov	r6,r19
 100af84:	b82d883a 	mov	r22,r23
 100af88:	002f883a 	mov	r23,zero
 100af8c:	db401615 	stw	r13,88(sp)
 100af90:	d8801315 	stw	r2,76(sp)
 100af94:	d8c01415 	stw	r3,80(sp)
 100af98:	dcc01515 	stw	r19,84(sp)
 100af9c:	100b6e40 	call	100b6e4 <__muldi3>
 100afa0:	b00d883a 	mov	r6,r22
 100afa4:	000b883a 	mov	r5,zero
 100afa8:	9009883a 	mov	r4,r18
 100afac:	b80f883a 	mov	r7,r23
 100afb0:	1021883a 	mov	r16,r2
 100afb4:	1823883a 	mov	r17,r3
 100afb8:	100b6e40 	call	100b6e4 <__muldi3>
 100afbc:	8085883a 	add	r2,r16,r2
 100afc0:	140d803a 	cmpltu	r6,r2,r16
 100afc4:	88c7883a 	add	r3,r17,r3
 100afc8:	30cd883a 	add	r6,r6,r3
 100afcc:	1029883a 	mov	r20,r2
 100afd0:	302b883a 	mov	r21,r6
 100afd4:	da801317 	ldw	r10,76(sp)
 100afd8:	dac01417 	ldw	r11,80(sp)
 100afdc:	db001517 	ldw	r12,84(sp)
 100afe0:	db401617 	ldw	r13,88(sp)
 100afe4:	3440612e 	bgeu	r6,r17,100b16c <__muldf3+0x324>
 100afe8:	0009883a 	mov	r4,zero
 100afec:	5105883a 	add	r2,r10,r4
 100aff0:	128d803a 	cmpltu	r6,r2,r10
 100aff4:	5d07883a 	add	r3,r11,r20
 100aff8:	30cd883a 	add	r6,r6,r3
 100affc:	0021883a 	mov	r16,zero
 100b000:	04400044 	movi	r17,1
 100b004:	1025883a 	mov	r18,r2
 100b008:	3027883a 	mov	r19,r6
 100b00c:	32c06236 	bltu	r6,r11,100b198 <__muldf3+0x350>
 100b010:	59807a26 	beq	r11,r6,100b1fc <__muldf3+0x3b4>
 100b014:	680b883a 	mov	r5,r13
 100b018:	b80f883a 	mov	r7,r23
 100b01c:	6009883a 	mov	r4,r12
 100b020:	b00d883a 	mov	r6,r22
 100b024:	100b6e40 	call	100b6e4 <__muldi3>
 100b028:	1009883a 	mov	r4,r2
 100b02c:	000f883a 	mov	r7,zero
 100b030:	1545883a 	add	r2,r2,r21
 100b034:	1111803a 	cmpltu	r8,r2,r4
 100b038:	19c7883a 	add	r3,r3,r7
 100b03c:	40c7883a 	add	r3,r8,r3
 100b040:	88cb883a 	add	r5,r17,r3
 100b044:	d8c00617 	ldw	r3,24(sp)
 100b048:	8089883a 	add	r4,r16,r2
 100b04c:	d8800b17 	ldw	r2,44(sp)
 100b050:	18c00104 	addi	r3,r3,4
 100b054:	240d803a 	cmpltu	r6,r4,r16
 100b058:	10c7883a 	add	r3,r2,r3
 100b05c:	2013883a 	mov	r9,r4
 100b060:	d8800a17 	ldw	r2,40(sp)
 100b064:	d9000517 	ldw	r4,20(sp)
 100b068:	314d883a 	add	r6,r6,r5
 100b06c:	3015883a 	mov	r10,r6
 100b070:	2088c03a 	cmpne	r4,r4,r2
 100b074:	00880034 	movhi	r2,8192
 100b078:	10bfffc4 	addi	r2,r2,-1
 100b07c:	d9000f15 	stw	r4,60(sp)
 100b080:	d8c01015 	stw	r3,64(sp)
 100b084:	1180162e 	bgeu	r2,r6,100b0e0 <__muldf3+0x298>
 100b088:	1811883a 	mov	r8,r3
 100b08c:	101f883a 	mov	r15,r2
 100b090:	980497fa 	slli	r2,r19,31
 100b094:	9016d07a 	srli	r11,r18,1
 100b098:	500697fa 	slli	r3,r10,31
 100b09c:	480cd07a 	srli	r6,r9,1
 100b0a0:	500ed07a 	srli	r7,r10,1
 100b0a4:	12d6b03a 	or	r11,r2,r11
 100b0a8:	00800044 	movi	r2,1
 100b0ac:	198cb03a 	or	r6,r3,r6
 100b0b0:	4888703a 	and	r4,r9,r2
 100b0b4:	9818d07a 	srli	r12,r19,1
 100b0b8:	001b883a 	mov	r13,zero
 100b0bc:	03a00034 	movhi	r14,32768
 100b0c0:	3013883a 	mov	r9,r6
 100b0c4:	3815883a 	mov	r10,r7
 100b0c8:	4091883a 	add	r8,r8,r2
 100b0cc:	20000226 	beq	r4,zero,100b0d8 <__muldf3+0x290>
 100b0d0:	5b64b03a 	or	r18,r11,r13
 100b0d4:	63a6b03a 	or	r19,r12,r14
 100b0d8:	7abfed36 	bltu	r15,r10,100b090 <__muldf3+0x248>
 100b0dc:	da001015 	stw	r8,64(sp)
 100b0e0:	00840034 	movhi	r2,4096
 100b0e4:	10bfffc4 	addi	r2,r2,-1
 100b0e8:	12801436 	bltu	r2,r10,100b13c <__muldf3+0x2f4>
 100b0ec:	da001017 	ldw	r8,64(sp)
 100b0f0:	101f883a 	mov	r15,r2
 100b0f4:	4a45883a 	add	r2,r9,r9
 100b0f8:	124d803a 	cmpltu	r6,r2,r9
 100b0fc:	5287883a 	add	r3,r10,r10
 100b100:	9497883a 	add	r11,r18,r18
 100b104:	5c8f803a 	cmpltu	r7,r11,r18
 100b108:	9cd9883a 	add	r12,r19,r19
 100b10c:	01000044 	movi	r4,1
 100b110:	30cd883a 	add	r6,r6,r3
 100b114:	3b0f883a 	add	r7,r7,r12
 100b118:	423fffc4 	addi	r8,r8,-1
 100b11c:	1013883a 	mov	r9,r2
 100b120:	3015883a 	mov	r10,r6
 100b124:	111ab03a 	or	r13,r2,r4
 100b128:	98003016 	blt	r19,zero,100b1ec <__muldf3+0x3a4>
 100b12c:	5825883a 	mov	r18,r11
 100b130:	3827883a 	mov	r19,r7
 100b134:	7abfef2e 	bgeu	r15,r10,100b0f4 <__muldf3+0x2ac>
 100b138:	da001015 	stw	r8,64(sp)
 100b13c:	00803fc4 	movi	r2,255
 100b140:	488e703a 	and	r7,r9,r2
 100b144:	00802004 	movi	r2,128
 100b148:	0007883a 	mov	r3,zero
 100b14c:	0011883a 	mov	r8,zero
 100b150:	38801826 	beq	r7,r2,100b1b4 <__muldf3+0x36c>
 100b154:	008000c4 	movi	r2,3
 100b158:	d9000e04 	addi	r4,sp,56
 100b15c:	da801215 	stw	r10,72(sp)
 100b160:	d8800e15 	stw	r2,56(sp)
 100b164:	da401115 	stw	r9,68(sp)
 100b168:	003f6a06 	br	100af14 <__muldf3+0xcc>
 100b16c:	89802126 	beq	r17,r6,100b1f4 <__muldf3+0x3ac>
 100b170:	0009883a 	mov	r4,zero
 100b174:	5105883a 	add	r2,r10,r4
 100b178:	128d803a 	cmpltu	r6,r2,r10
 100b17c:	5d07883a 	add	r3,r11,r20
 100b180:	30cd883a 	add	r6,r6,r3
 100b184:	0021883a 	mov	r16,zero
 100b188:	0023883a 	mov	r17,zero
 100b18c:	1025883a 	mov	r18,r2
 100b190:	3027883a 	mov	r19,r6
 100b194:	32ff9e2e 	bgeu	r6,r11,100b010 <__muldf3+0x1c8>
 100b198:	00800044 	movi	r2,1
 100b19c:	8089883a 	add	r4,r16,r2
 100b1a0:	240d803a 	cmpltu	r6,r4,r16
 100b1a4:	344d883a 	add	r6,r6,r17
 100b1a8:	2021883a 	mov	r16,r4
 100b1ac:	3023883a 	mov	r17,r6
 100b1b0:	003f9806 	br	100b014 <__muldf3+0x1cc>
 100b1b4:	403fe71e 	bne	r8,zero,100b154 <__muldf3+0x30c>
 100b1b8:	01004004 	movi	r4,256
 100b1bc:	4904703a 	and	r2,r9,r4
 100b1c0:	10c4b03a 	or	r2,r2,r3
 100b1c4:	103fe31e 	bne	r2,zero,100b154 <__muldf3+0x30c>
 100b1c8:	94c4b03a 	or	r2,r18,r19
 100b1cc:	103fe126 	beq	r2,zero,100b154 <__muldf3+0x30c>
 100b1d0:	49c5883a 	add	r2,r9,r7
 100b1d4:	1251803a 	cmpltu	r8,r2,r9
 100b1d8:	4291883a 	add	r8,r8,r10
 100b1dc:	013fc004 	movi	r4,-256
 100b1e0:	1112703a 	and	r9,r2,r4
 100b1e4:	4015883a 	mov	r10,r8
 100b1e8:	003fda06 	br	100b154 <__muldf3+0x30c>
 100b1ec:	6813883a 	mov	r9,r13
 100b1f0:	003fce06 	br	100b12c <__muldf3+0x2e4>
 100b1f4:	143f7c36 	bltu	r2,r16,100afe8 <__muldf3+0x1a0>
 100b1f8:	003fdd06 	br	100b170 <__muldf3+0x328>
 100b1fc:	12bf852e 	bgeu	r2,r10,100b014 <__muldf3+0x1cc>
 100b200:	003fe506 	br	100b198 <__muldf3+0x350>
 100b204:	00800084 	movi	r2,2
 100b208:	20bf351e 	bne	r4,r2,100aee0 <__muldf3+0x98>
 100b20c:	010040b4 	movhi	r4,258
 100b210:	21273704 	addi	r4,r4,-25380
 100b214:	003f3f06 	br	100af14 <__muldf3+0xcc>

0100b218 <__eqdf2>:
 100b218:	f811883a 	mov	r8,ra
 100b21c:	100c1d00 	call	100c1d0 <_mcount>
 100b220:	403f883a 	mov	ra,r8
 100b224:	deffef04 	addi	sp,sp,-68
 100b228:	dfc01015 	stw	ra,64(sp)
 100b22c:	dc400f15 	stw	r17,60(sp)
 100b230:	dc000e15 	stw	r16,56(sp)
 100b234:	dc400404 	addi	r17,sp,16
 100b238:	2005883a 	mov	r2,r4
 100b23c:	2807883a 	mov	r3,r5
 100b240:	d809883a 	mov	r4,sp
 100b244:	880b883a 	mov	r5,r17
 100b248:	dc000904 	addi	r16,sp,36
 100b24c:	d8c00115 	stw	r3,4(sp)
 100b250:	d8800015 	stw	r2,0(sp)
 100b254:	d9800215 	stw	r6,8(sp)
 100b258:	d9c00315 	stw	r7,12(sp)
 100b25c:	10025d00 	call	10025d0 <__unpack_d>
 100b260:	d9000204 	addi	r4,sp,8
 100b264:	800b883a 	mov	r5,r16
 100b268:	10025d00 	call	10025d0 <__unpack_d>
 100b26c:	d8800417 	ldw	r2,16(sp)
 100b270:	00c00044 	movi	r3,1
 100b274:	180d883a 	mov	r6,r3
 100b278:	1880062e 	bgeu	r3,r2,100b294 <__eqdf2+0x7c>
 100b27c:	d8800917 	ldw	r2,36(sp)
 100b280:	8809883a 	mov	r4,r17
 100b284:	800b883a 	mov	r5,r16
 100b288:	1880022e 	bgeu	r3,r2,100b294 <__eqdf2+0x7c>
 100b28c:	100b8140 	call	100b814 <__fpcmp_parts_d>
 100b290:	100d883a 	mov	r6,r2
 100b294:	3005883a 	mov	r2,r6
 100b298:	dfc01017 	ldw	ra,64(sp)
 100b29c:	dc400f17 	ldw	r17,60(sp)
 100b2a0:	dc000e17 	ldw	r16,56(sp)
 100b2a4:	dec01104 	addi	sp,sp,68
 100b2a8:	f800283a 	ret

0100b2ac <__nedf2>:
 100b2ac:	f811883a 	mov	r8,ra
 100b2b0:	100c1d00 	call	100c1d0 <_mcount>
 100b2b4:	403f883a 	mov	ra,r8
 100b2b8:	deffef04 	addi	sp,sp,-68
 100b2bc:	dfc01015 	stw	ra,64(sp)
 100b2c0:	dc400f15 	stw	r17,60(sp)
 100b2c4:	dc000e15 	stw	r16,56(sp)
 100b2c8:	dc400404 	addi	r17,sp,16
 100b2cc:	2005883a 	mov	r2,r4
 100b2d0:	2807883a 	mov	r3,r5
 100b2d4:	d809883a 	mov	r4,sp
 100b2d8:	880b883a 	mov	r5,r17
 100b2dc:	dc000904 	addi	r16,sp,36
 100b2e0:	d8c00115 	stw	r3,4(sp)
 100b2e4:	d8800015 	stw	r2,0(sp)
 100b2e8:	d9800215 	stw	r6,8(sp)
 100b2ec:	d9c00315 	stw	r7,12(sp)
 100b2f0:	10025d00 	call	10025d0 <__unpack_d>
 100b2f4:	d9000204 	addi	r4,sp,8
 100b2f8:	800b883a 	mov	r5,r16
 100b2fc:	10025d00 	call	10025d0 <__unpack_d>
 100b300:	d8800417 	ldw	r2,16(sp)
 100b304:	00c00044 	movi	r3,1
 100b308:	180d883a 	mov	r6,r3
 100b30c:	1880062e 	bgeu	r3,r2,100b328 <__nedf2+0x7c>
 100b310:	d8800917 	ldw	r2,36(sp)
 100b314:	8809883a 	mov	r4,r17
 100b318:	800b883a 	mov	r5,r16
 100b31c:	1880022e 	bgeu	r3,r2,100b328 <__nedf2+0x7c>
 100b320:	100b8140 	call	100b814 <__fpcmp_parts_d>
 100b324:	100d883a 	mov	r6,r2
 100b328:	3005883a 	mov	r2,r6
 100b32c:	dfc01017 	ldw	ra,64(sp)
 100b330:	dc400f17 	ldw	r17,60(sp)
 100b334:	dc000e17 	ldw	r16,56(sp)
 100b338:	dec01104 	addi	sp,sp,68
 100b33c:	f800283a 	ret

0100b340 <__gtdf2>:
 100b340:	f811883a 	mov	r8,ra
 100b344:	100c1d00 	call	100c1d0 <_mcount>
 100b348:	403f883a 	mov	ra,r8
 100b34c:	deffef04 	addi	sp,sp,-68
 100b350:	dfc01015 	stw	ra,64(sp)
 100b354:	dc400f15 	stw	r17,60(sp)
 100b358:	dc000e15 	stw	r16,56(sp)
 100b35c:	dc400404 	addi	r17,sp,16
 100b360:	2005883a 	mov	r2,r4
 100b364:	2807883a 	mov	r3,r5
 100b368:	d809883a 	mov	r4,sp
 100b36c:	880b883a 	mov	r5,r17
 100b370:	dc000904 	addi	r16,sp,36
 100b374:	d8c00115 	stw	r3,4(sp)
 100b378:	d8800015 	stw	r2,0(sp)
 100b37c:	d9800215 	stw	r6,8(sp)
 100b380:	d9c00315 	stw	r7,12(sp)
 100b384:	10025d00 	call	10025d0 <__unpack_d>
 100b388:	d9000204 	addi	r4,sp,8
 100b38c:	800b883a 	mov	r5,r16
 100b390:	10025d00 	call	10025d0 <__unpack_d>
 100b394:	d8800417 	ldw	r2,16(sp)
 100b398:	00c00044 	movi	r3,1
 100b39c:	01bfffc4 	movi	r6,-1
 100b3a0:	1880062e 	bgeu	r3,r2,100b3bc <__gtdf2+0x7c>
 100b3a4:	d8800917 	ldw	r2,36(sp)
 100b3a8:	8809883a 	mov	r4,r17
 100b3ac:	800b883a 	mov	r5,r16
 100b3b0:	1880022e 	bgeu	r3,r2,100b3bc <__gtdf2+0x7c>
 100b3b4:	100b8140 	call	100b814 <__fpcmp_parts_d>
 100b3b8:	100d883a 	mov	r6,r2
 100b3bc:	3005883a 	mov	r2,r6
 100b3c0:	dfc01017 	ldw	ra,64(sp)
 100b3c4:	dc400f17 	ldw	r17,60(sp)
 100b3c8:	dc000e17 	ldw	r16,56(sp)
 100b3cc:	dec01104 	addi	sp,sp,68
 100b3d0:	f800283a 	ret

0100b3d4 <__gedf2>:
 100b3d4:	f811883a 	mov	r8,ra
 100b3d8:	100c1d00 	call	100c1d0 <_mcount>
 100b3dc:	403f883a 	mov	ra,r8
 100b3e0:	deffef04 	addi	sp,sp,-68
 100b3e4:	dfc01015 	stw	ra,64(sp)
 100b3e8:	dc400f15 	stw	r17,60(sp)
 100b3ec:	dc000e15 	stw	r16,56(sp)
 100b3f0:	dc400404 	addi	r17,sp,16
 100b3f4:	2005883a 	mov	r2,r4
 100b3f8:	2807883a 	mov	r3,r5
 100b3fc:	d809883a 	mov	r4,sp
 100b400:	880b883a 	mov	r5,r17
 100b404:	dc000904 	addi	r16,sp,36
 100b408:	d8c00115 	stw	r3,4(sp)
 100b40c:	d8800015 	stw	r2,0(sp)
 100b410:	d9800215 	stw	r6,8(sp)
 100b414:	d9c00315 	stw	r7,12(sp)
 100b418:	10025d00 	call	10025d0 <__unpack_d>
 100b41c:	d9000204 	addi	r4,sp,8
 100b420:	800b883a 	mov	r5,r16
 100b424:	10025d00 	call	10025d0 <__unpack_d>
 100b428:	d8800417 	ldw	r2,16(sp)
 100b42c:	00c00044 	movi	r3,1
 100b430:	01bfffc4 	movi	r6,-1
 100b434:	1880062e 	bgeu	r3,r2,100b450 <__gedf2+0x7c>
 100b438:	d8800917 	ldw	r2,36(sp)
 100b43c:	8809883a 	mov	r4,r17
 100b440:	800b883a 	mov	r5,r16
 100b444:	1880022e 	bgeu	r3,r2,100b450 <__gedf2+0x7c>
 100b448:	100b8140 	call	100b814 <__fpcmp_parts_d>
 100b44c:	100d883a 	mov	r6,r2
 100b450:	3005883a 	mov	r2,r6
 100b454:	dfc01017 	ldw	ra,64(sp)
 100b458:	dc400f17 	ldw	r17,60(sp)
 100b45c:	dc000e17 	ldw	r16,56(sp)
 100b460:	dec01104 	addi	sp,sp,68
 100b464:	f800283a 	ret

0100b468 <__ltdf2>:
 100b468:	f811883a 	mov	r8,ra
 100b46c:	100c1d00 	call	100c1d0 <_mcount>
 100b470:	403f883a 	mov	ra,r8
 100b474:	deffef04 	addi	sp,sp,-68
 100b478:	dfc01015 	stw	ra,64(sp)
 100b47c:	dc400f15 	stw	r17,60(sp)
 100b480:	dc000e15 	stw	r16,56(sp)
 100b484:	dc400404 	addi	r17,sp,16
 100b488:	2005883a 	mov	r2,r4
 100b48c:	2807883a 	mov	r3,r5
 100b490:	d809883a 	mov	r4,sp
 100b494:	880b883a 	mov	r5,r17
 100b498:	dc000904 	addi	r16,sp,36
 100b49c:	d8c00115 	stw	r3,4(sp)
 100b4a0:	d8800015 	stw	r2,0(sp)
 100b4a4:	d9800215 	stw	r6,8(sp)
 100b4a8:	d9c00315 	stw	r7,12(sp)
 100b4ac:	10025d00 	call	10025d0 <__unpack_d>
 100b4b0:	d9000204 	addi	r4,sp,8
 100b4b4:	800b883a 	mov	r5,r16
 100b4b8:	10025d00 	call	10025d0 <__unpack_d>
 100b4bc:	d8800417 	ldw	r2,16(sp)
 100b4c0:	00c00044 	movi	r3,1
 100b4c4:	180d883a 	mov	r6,r3
 100b4c8:	1880062e 	bgeu	r3,r2,100b4e4 <__ltdf2+0x7c>
 100b4cc:	d8800917 	ldw	r2,36(sp)
 100b4d0:	8809883a 	mov	r4,r17
 100b4d4:	800b883a 	mov	r5,r16
 100b4d8:	1880022e 	bgeu	r3,r2,100b4e4 <__ltdf2+0x7c>
 100b4dc:	100b8140 	call	100b814 <__fpcmp_parts_d>
 100b4e0:	100d883a 	mov	r6,r2
 100b4e4:	3005883a 	mov	r2,r6
 100b4e8:	dfc01017 	ldw	ra,64(sp)
 100b4ec:	dc400f17 	ldw	r17,60(sp)
 100b4f0:	dc000e17 	ldw	r16,56(sp)
 100b4f4:	dec01104 	addi	sp,sp,68
 100b4f8:	f800283a 	ret

0100b4fc <__floatsidf>:
 100b4fc:	f811883a 	mov	r8,ra
 100b500:	100c1d00 	call	100c1d0 <_mcount>
 100b504:	403f883a 	mov	ra,r8
 100b508:	defff604 	addi	sp,sp,-40
 100b50c:	dfc00915 	stw	ra,36(sp)
 100b510:	dcc00815 	stw	r19,32(sp)
 100b514:	dc800715 	stw	r18,28(sp)
 100b518:	dc400615 	stw	r17,24(sp)
 100b51c:	dc000515 	stw	r16,20(sp)
 100b520:	2006d7fa 	srli	r3,r4,31
 100b524:	008000c4 	movi	r2,3
 100b528:	d8800015 	stw	r2,0(sp)
 100b52c:	d8c00115 	stw	r3,4(sp)
 100b530:	20000f1e 	bne	r4,zero,100b570 <__floatsidf+0x74>
 100b534:	00800084 	movi	r2,2
 100b538:	d8800015 	stw	r2,0(sp)
 100b53c:	d809883a 	mov	r4,sp
 100b540:	10022b00 	call	10022b0 <__pack_d>
 100b544:	1009883a 	mov	r4,r2
 100b548:	180b883a 	mov	r5,r3
 100b54c:	2005883a 	mov	r2,r4
 100b550:	2807883a 	mov	r3,r5
 100b554:	dfc00917 	ldw	ra,36(sp)
 100b558:	dcc00817 	ldw	r19,32(sp)
 100b55c:	dc800717 	ldw	r18,28(sp)
 100b560:	dc400617 	ldw	r17,24(sp)
 100b564:	dc000517 	ldw	r16,20(sp)
 100b568:	dec00a04 	addi	sp,sp,40
 100b56c:	f800283a 	ret
 100b570:	00800f04 	movi	r2,60
 100b574:	1807003a 	cmpeq	r3,r3,zero
 100b578:	d8800215 	stw	r2,8(sp)
 100b57c:	18001126 	beq	r3,zero,100b5c4 <__floatsidf+0xc8>
 100b580:	0027883a 	mov	r19,zero
 100b584:	2025883a 	mov	r18,r4
 100b588:	d9000315 	stw	r4,12(sp)
 100b58c:	dcc00415 	stw	r19,16(sp)
 100b590:	10022240 	call	1002224 <__clzsi2>
 100b594:	11000744 	addi	r4,r2,29
 100b598:	013fe80e 	bge	zero,r4,100b53c <__floatsidf+0x40>
 100b59c:	10bfff44 	addi	r2,r2,-3
 100b5a0:	10000c16 	blt	r2,zero,100b5d4 <__floatsidf+0xd8>
 100b5a4:	90a2983a 	sll	r17,r18,r2
 100b5a8:	0021883a 	mov	r16,zero
 100b5ac:	d8800217 	ldw	r2,8(sp)
 100b5b0:	dc400415 	stw	r17,16(sp)
 100b5b4:	dc000315 	stw	r16,12(sp)
 100b5b8:	1105c83a 	sub	r2,r2,r4
 100b5bc:	d8800215 	stw	r2,8(sp)
 100b5c0:	003fde06 	br	100b53c <__floatsidf+0x40>
 100b5c4:	00a00034 	movhi	r2,32768
 100b5c8:	20800a26 	beq	r4,r2,100b5f4 <__floatsidf+0xf8>
 100b5cc:	0109c83a 	sub	r4,zero,r4
 100b5d0:	003feb06 	br	100b580 <__floatsidf+0x84>
 100b5d4:	9006d07a 	srli	r3,r18,1
 100b5d8:	008007c4 	movi	r2,31
 100b5dc:	1105c83a 	sub	r2,r2,r4
 100b5e0:	1886d83a 	srl	r3,r3,r2
 100b5e4:	9922983a 	sll	r17,r19,r4
 100b5e8:	9120983a 	sll	r16,r18,r4
 100b5ec:	1c62b03a 	or	r17,r3,r17
 100b5f0:	003fee06 	br	100b5ac <__floatsidf+0xb0>
 100b5f4:	0009883a 	mov	r4,zero
 100b5f8:	01707834 	movhi	r5,49632
 100b5fc:	003fd306 	br	100b54c <__floatsidf+0x50>

0100b600 <__fixdfsi>:
 100b600:	f811883a 	mov	r8,ra
 100b604:	100c1d00 	call	100c1d0 <_mcount>
 100b608:	403f883a 	mov	ra,r8
 100b60c:	defff804 	addi	sp,sp,-32
 100b610:	dfc00715 	stw	ra,28(sp)
 100b614:	2005883a 	mov	r2,r4
 100b618:	2807883a 	mov	r3,r5
 100b61c:	d809883a 	mov	r4,sp
 100b620:	d9400204 	addi	r5,sp,8
 100b624:	d8c00115 	stw	r3,4(sp)
 100b628:	d8800015 	stw	r2,0(sp)
 100b62c:	10025d00 	call	10025d0 <__unpack_d>
 100b630:	d8c00217 	ldw	r3,8(sp)
 100b634:	00800084 	movi	r2,2
 100b638:	1880051e 	bne	r3,r2,100b650 <__fixdfsi+0x50>
 100b63c:	0007883a 	mov	r3,zero
 100b640:	1805883a 	mov	r2,r3
 100b644:	dfc00717 	ldw	ra,28(sp)
 100b648:	dec00804 	addi	sp,sp,32
 100b64c:	f800283a 	ret
 100b650:	00800044 	movi	r2,1
 100b654:	10fff92e 	bgeu	r2,r3,100b63c <__fixdfsi+0x3c>
 100b658:	00800104 	movi	r2,4
 100b65c:	18800426 	beq	r3,r2,100b670 <__fixdfsi+0x70>
 100b660:	d8c00417 	ldw	r3,16(sp)
 100b664:	183ff516 	blt	r3,zero,100b63c <__fixdfsi+0x3c>
 100b668:	00800784 	movi	r2,30
 100b66c:	10c0080e 	bge	r2,r3,100b690 <__fixdfsi+0x90>
 100b670:	d8800317 	ldw	r2,12(sp)
 100b674:	1000121e 	bne	r2,zero,100b6c0 <__fixdfsi+0xc0>
 100b678:	00e00034 	movhi	r3,32768
 100b67c:	18ffffc4 	addi	r3,r3,-1
 100b680:	1805883a 	mov	r2,r3
 100b684:	dfc00717 	ldw	ra,28(sp)
 100b688:	dec00804 	addi	sp,sp,32
 100b68c:	f800283a 	ret
 100b690:	00800f04 	movi	r2,60
 100b694:	10d1c83a 	sub	r8,r2,r3
 100b698:	40bff804 	addi	r2,r8,-32
 100b69c:	d9800517 	ldw	r6,20(sp)
 100b6a0:	d9c00617 	ldw	r7,24(sp)
 100b6a4:	10000816 	blt	r2,zero,100b6c8 <__fixdfsi+0xc8>
 100b6a8:	3888d83a 	srl	r4,r7,r2
 100b6ac:	d8800317 	ldw	r2,12(sp)
 100b6b0:	2007883a 	mov	r3,r4
 100b6b4:	103fe226 	beq	r2,zero,100b640 <__fixdfsi+0x40>
 100b6b8:	0107c83a 	sub	r3,zero,r4
 100b6bc:	003fe006 	br	100b640 <__fixdfsi+0x40>
 100b6c0:	00e00034 	movhi	r3,32768
 100b6c4:	003fde06 	br	100b640 <__fixdfsi+0x40>
 100b6c8:	39c7883a 	add	r3,r7,r7
 100b6cc:	008007c4 	movi	r2,31
 100b6d0:	1205c83a 	sub	r2,r2,r8
 100b6d4:	1886983a 	sll	r3,r3,r2
 100b6d8:	3208d83a 	srl	r4,r6,r8
 100b6dc:	1908b03a 	or	r4,r3,r4
 100b6e0:	003ff206 	br	100b6ac <__fixdfsi+0xac>

0100b6e4 <__muldi3>:
 100b6e4:	f811883a 	mov	r8,ra
 100b6e8:	100c1d00 	call	100c1d0 <_mcount>
 100b6ec:	403f883a 	mov	ra,r8
 100b6f0:	defff204 	addi	sp,sp,-56
 100b6f4:	dfc00d15 	stw	ra,52(sp)
 100b6f8:	df000c15 	stw	fp,48(sp)
 100b6fc:	ddc00b15 	stw	r23,44(sp)
 100b700:	dd800a15 	stw	r22,40(sp)
 100b704:	dd400915 	stw	r21,36(sp)
 100b708:	dd000815 	stw	r20,32(sp)
 100b70c:	dcc00715 	stw	r19,28(sp)
 100b710:	dc800615 	stw	r18,24(sp)
 100b714:	dc400515 	stw	r17,20(sp)
 100b718:	dc000415 	stw	r16,16(sp)
 100b71c:	3038d43a 	srli	fp,r6,16
 100b720:	343fffcc 	andi	r16,r6,65535
 100b724:	2028d43a 	srli	r20,r4,16
 100b728:	247fffcc 	andi	r17,r4,65535
 100b72c:	2827883a 	mov	r19,r5
 100b730:	d9000015 	stw	r4,0(sp)
 100b734:	d9400115 	stw	r5,4(sp)
 100b738:	8809883a 	mov	r4,r17
 100b73c:	800b883a 	mov	r5,r16
 100b740:	302d883a 	mov	r22,r6
 100b744:	d9800215 	stw	r6,8(sp)
 100b748:	d9c00315 	stw	r7,12(sp)
 100b74c:	10021e00 	call	10021e0 <__mulsi3>
 100b750:	8809883a 	mov	r4,r17
 100b754:	e00b883a 	mov	r5,fp
 100b758:	102b883a 	mov	r21,r2
 100b75c:	10021e00 	call	10021e0 <__mulsi3>
 100b760:	800b883a 	mov	r5,r16
 100b764:	a009883a 	mov	r4,r20
 100b768:	1023883a 	mov	r17,r2
 100b76c:	10021e00 	call	10021e0 <__mulsi3>
 100b770:	a009883a 	mov	r4,r20
 100b774:	e00b883a 	mov	r5,fp
 100b778:	1021883a 	mov	r16,r2
 100b77c:	10021e00 	call	10021e0 <__mulsi3>
 100b780:	a8ffffcc 	andi	r3,r21,65535
 100b784:	a82ad43a 	srli	r21,r21,16
 100b788:	8c23883a 	add	r17,r17,r16
 100b78c:	1011883a 	mov	r8,r2
 100b790:	ac6b883a 	add	r21,r21,r17
 100b794:	a804943a 	slli	r2,r21,16
 100b798:	b009883a 	mov	r4,r22
 100b79c:	980b883a 	mov	r5,r19
 100b7a0:	10c7883a 	add	r3,r2,r3
 100b7a4:	a812d43a 	srli	r9,r21,16
 100b7a8:	180d883a 	mov	r6,r3
 100b7ac:	ac00022e 	bgeu	r21,r16,100b7b8 <__muldi3+0xd4>
 100b7b0:	00800074 	movhi	r2,1
 100b7b4:	4091883a 	add	r8,r8,r2
 100b7b8:	4267883a 	add	r19,r8,r9
 100b7bc:	302d883a 	mov	r22,r6
 100b7c0:	10021e00 	call	10021e0 <__mulsi3>
 100b7c4:	d9400317 	ldw	r5,12(sp)
 100b7c8:	d9000017 	ldw	r4,0(sp)
 100b7cc:	1023883a 	mov	r17,r2
 100b7d0:	10021e00 	call	10021e0 <__mulsi3>
 100b7d4:	14cb883a 	add	r5,r2,r19
 100b7d8:	894b883a 	add	r5,r17,r5
 100b7dc:	b005883a 	mov	r2,r22
 100b7e0:	2807883a 	mov	r3,r5
 100b7e4:	dfc00d17 	ldw	ra,52(sp)
 100b7e8:	df000c17 	ldw	fp,48(sp)
 100b7ec:	ddc00b17 	ldw	r23,44(sp)
 100b7f0:	dd800a17 	ldw	r22,40(sp)
 100b7f4:	dd400917 	ldw	r21,36(sp)
 100b7f8:	dd000817 	ldw	r20,32(sp)
 100b7fc:	dcc00717 	ldw	r19,28(sp)
 100b800:	dc800617 	ldw	r18,24(sp)
 100b804:	dc400517 	ldw	r17,20(sp)
 100b808:	dc000417 	ldw	r16,16(sp)
 100b80c:	dec00e04 	addi	sp,sp,56
 100b810:	f800283a 	ret

0100b814 <__fpcmp_parts_d>:
 100b814:	f811883a 	mov	r8,ra
 100b818:	100c1d00 	call	100c1d0 <_mcount>
 100b81c:	403f883a 	mov	ra,r8
 100b820:	21800017 	ldw	r6,0(r4)
 100b824:	00c00044 	movi	r3,1
 100b828:	19800a2e 	bgeu	r3,r6,100b854 <__fpcmp_parts_d+0x40>
 100b82c:	28800017 	ldw	r2,0(r5)
 100b830:	1880082e 	bgeu	r3,r2,100b854 <__fpcmp_parts_d+0x40>
 100b834:	00c00104 	movi	r3,4
 100b838:	30c02826 	beq	r6,r3,100b8dc <__fpcmp_parts_d+0xc8>
 100b83c:	10c02026 	beq	r2,r3,100b8c0 <__fpcmp_parts_d+0xac>
 100b840:	00c00084 	movi	r3,2
 100b844:	30c00526 	beq	r6,r3,100b85c <__fpcmp_parts_d+0x48>
 100b848:	10c0071e 	bne	r2,r3,100b868 <__fpcmp_parts_d+0x54>
 100b84c:	20800117 	ldw	r2,4(r4)
 100b850:	1000091e 	bne	r2,zero,100b878 <__fpcmp_parts_d+0x64>
 100b854:	00800044 	movi	r2,1
 100b858:	f800283a 	ret
 100b85c:	10c0181e 	bne	r2,r3,100b8c0 <__fpcmp_parts_d+0xac>
 100b860:	0005883a 	mov	r2,zero
 100b864:	f800283a 	ret
 100b868:	22000117 	ldw	r8,4(r4)
 100b86c:	28800117 	ldw	r2,4(r5)
 100b870:	40800326 	beq	r8,r2,100b880 <__fpcmp_parts_d+0x6c>
 100b874:	403ff726 	beq	r8,zero,100b854 <__fpcmp_parts_d+0x40>
 100b878:	00bfffc4 	movi	r2,-1
 100b87c:	f800283a 	ret
 100b880:	20c00217 	ldw	r3,8(r4)
 100b884:	28800217 	ldw	r2,8(r5)
 100b888:	10fffa16 	blt	r2,r3,100b874 <__fpcmp_parts_d+0x60>
 100b88c:	18800916 	blt	r3,r2,100b8b4 <__fpcmp_parts_d+0xa0>
 100b890:	21c00417 	ldw	r7,16(r4)
 100b894:	28c00417 	ldw	r3,16(r5)
 100b898:	21800317 	ldw	r6,12(r4)
 100b89c:	28800317 	ldw	r2,12(r5)
 100b8a0:	19fff436 	bltu	r3,r7,100b874 <__fpcmp_parts_d+0x60>
 100b8a4:	38c00a26 	beq	r7,r3,100b8d0 <__fpcmp_parts_d+0xbc>
 100b8a8:	38c00236 	bltu	r7,r3,100b8b4 <__fpcmp_parts_d+0xa0>
 100b8ac:	19ffec1e 	bne	r3,r7,100b860 <__fpcmp_parts_d+0x4c>
 100b8b0:	30bfeb2e 	bgeu	r6,r2,100b860 <__fpcmp_parts_d+0x4c>
 100b8b4:	403ff026 	beq	r8,zero,100b878 <__fpcmp_parts_d+0x64>
 100b8b8:	00800044 	movi	r2,1
 100b8bc:	003fe606 	br	100b858 <__fpcmp_parts_d+0x44>
 100b8c0:	28800117 	ldw	r2,4(r5)
 100b8c4:	103fec26 	beq	r2,zero,100b878 <__fpcmp_parts_d+0x64>
 100b8c8:	00800044 	movi	r2,1
 100b8cc:	003fe206 	br	100b858 <__fpcmp_parts_d+0x44>
 100b8d0:	11bff52e 	bgeu	r2,r6,100b8a8 <__fpcmp_parts_d+0x94>
 100b8d4:	403fdf26 	beq	r8,zero,100b854 <__fpcmp_parts_d+0x40>
 100b8d8:	003fe706 	br	100b878 <__fpcmp_parts_d+0x64>
 100b8dc:	11bfdb1e 	bne	r2,r6,100b84c <__fpcmp_parts_d+0x38>
 100b8e0:	28c00117 	ldw	r3,4(r5)
 100b8e4:	20800117 	ldw	r2,4(r4)
 100b8e8:	1885c83a 	sub	r2,r3,r2
 100b8ec:	f800283a 	ret

0100b8f0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 100b8f0:	f811883a 	mov	r8,ra
 100b8f4:	100c1d00 	call	100c1d0 <_mcount>
 100b8f8:	403f883a 	mov	ra,r8
 100b8fc:	defff404 	addi	sp,sp,-48
 100b900:	df000b15 	stw	fp,44(sp)
 100b904:	df000b04 	addi	fp,sp,44
 100b908:	e13ffb15 	stw	r4,-20(fp)
 100b90c:	e17ffc15 	stw	r5,-16(fp)
 100b910:	e1bffd15 	stw	r6,-12(fp)
 100b914:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 100b918:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 100b91c:	008040f4 	movhi	r2,259
 100b920:	1096ef04 	addi	r2,r2,23484
 100b924:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 100b928:	1005003a 	cmpeq	r2,r2,zero
 100b92c:	1000411e 	bne	r2,zero,100ba34 <alt_alarm_start+0x144>
  {
    if (alarm)
 100b930:	e0bffb17 	ldw	r2,-20(fp)
 100b934:	1005003a 	cmpeq	r2,r2,zero
 100b938:	10003b1e 	bne	r2,zero,100ba28 <alt_alarm_start+0x138>
    {
      alarm->callback = callback;
 100b93c:	e0fffb17 	ldw	r3,-20(fp)
 100b940:	e0bffd17 	ldw	r2,-12(fp)
 100b944:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 100b948:	e0fffb17 	ldw	r3,-20(fp)
 100b94c:	e0bffe17 	ldw	r2,-8(fp)
 100b950:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100b954:	0005303a 	rdctl	r2,status
 100b958:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100b95c:	e0fff817 	ldw	r3,-32(fp)
 100b960:	00bfff84 	movi	r2,-2
 100b964:	1884703a 	and	r2,r3,r2
 100b968:	1001703a 	wrctl	status,r2
  
  return context;
 100b96c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 100b970:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 100b974:	008040f4 	movhi	r2,259
 100b978:	1096f004 	addi	r2,r2,23488
 100b97c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 100b980:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 100b984:	e0fffc17 	ldw	r3,-16(fp)
 100b988:	e0bff917 	ldw	r2,-28(fp)
 100b98c:	1885883a 	add	r2,r3,r2
 100b990:	10c00044 	addi	r3,r2,1
 100b994:	e0bffb17 	ldw	r2,-20(fp)
 100b998:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 100b99c:	e0bffb17 	ldw	r2,-20(fp)
 100b9a0:	10c00217 	ldw	r3,8(r2)
 100b9a4:	e0bff917 	ldw	r2,-28(fp)
 100b9a8:	1880042e 	bgeu	r3,r2,100b9bc <alt_alarm_start+0xcc>
      {
        alarm->rollover = 1;
 100b9ac:	e0fffb17 	ldw	r3,-20(fp)
 100b9b0:	00800044 	movi	r2,1
 100b9b4:	18800405 	stb	r2,16(r3)
 100b9b8:	00000206 	br	100b9c4 <alt_alarm_start+0xd4>
      }
      else
      {
        alarm->rollover = 0;
 100b9bc:	e0bffb17 	ldw	r2,-20(fp)
 100b9c0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 100b9c4:	e0fffb17 	ldw	r3,-20(fp)
 100b9c8:	008040b4 	movhi	r2,258
 100b9cc:	109fa504 	addi	r2,r2,32404
 100b9d0:	e0bff615 	stw	r2,-40(fp)
 100b9d4:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 100b9d8:	e0fff717 	ldw	r3,-36(fp)
 100b9dc:	e0bff617 	ldw	r2,-40(fp)
 100b9e0:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 100b9e4:	e0bff617 	ldw	r2,-40(fp)
 100b9e8:	10c00017 	ldw	r3,0(r2)
 100b9ec:	e0bff717 	ldw	r2,-36(fp)
 100b9f0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 100b9f4:	e0bff617 	ldw	r2,-40(fp)
 100b9f8:	10c00017 	ldw	r3,0(r2)
 100b9fc:	e0bff717 	ldw	r2,-36(fp)
 100ba00:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 100ba04:	e0fff617 	ldw	r3,-40(fp)
 100ba08:	e0bff717 	ldw	r2,-36(fp)
 100ba0c:	18800015 	stw	r2,0(r3)
 100ba10:	e0bffa17 	ldw	r2,-24(fp)
 100ba14:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100ba18:	e0bff517 	ldw	r2,-44(fp)
 100ba1c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 100ba20:	e03fff15 	stw	zero,-4(fp)
 100ba24:	00000506 	br	100ba3c <alt_alarm_start+0x14c>
    }
    else
    {
      return -EINVAL;
 100ba28:	00bffa84 	movi	r2,-22
 100ba2c:	e0bfff15 	stw	r2,-4(fp)
 100ba30:	00000206 	br	100ba3c <alt_alarm_start+0x14c>
    }
  }
  else
  {
    return -ENOTSUP;
 100ba34:	00bfde84 	movi	r2,-134
 100ba38:	e0bfff15 	stw	r2,-4(fp)
 100ba3c:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 100ba40:	e037883a 	mov	sp,fp
 100ba44:	df000017 	ldw	fp,0(sp)
 100ba48:	dec00104 	addi	sp,sp,4
 100ba4c:	f800283a 	ret

0100ba50 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 100ba50:	f811883a 	mov	r8,ra
 100ba54:	100c1d00 	call	100c1d0 <_mcount>
 100ba58:	403f883a 	mov	ra,r8
 100ba5c:	defff804 	addi	sp,sp,-32
 100ba60:	dfc00715 	stw	ra,28(sp)
 100ba64:	df000615 	stw	fp,24(sp)
 100ba68:	df000604 	addi	fp,sp,24
 100ba6c:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 100ba70:	e0bffc17 	ldw	r2,-16(fp)
 100ba74:	1004803a 	cmplt	r2,r2,zero
 100ba78:	1000091e 	bne	r2,zero,100baa0 <close+0x50>
 100ba7c:	e13ffc17 	ldw	r4,-16(fp)
 100ba80:	01400304 	movi	r5,12
 100ba84:	10021e00 	call	10021e0 <__mulsi3>
 100ba88:	1007883a 	mov	r3,r2
 100ba8c:	008040b4 	movhi	r2,258
 100ba90:	109ad904 	addi	r2,r2,27492
 100ba94:	1887883a 	add	r3,r3,r2
 100ba98:	e0ffff15 	stw	r3,-4(fp)
 100ba9c:	00000106 	br	100baa4 <close+0x54>
 100baa0:	e03fff15 	stw	zero,-4(fp)
 100baa4:	e0bfff17 	ldw	r2,-4(fp)
 100baa8:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 100baac:	e0bffb17 	ldw	r2,-20(fp)
 100bab0:	1005003a 	cmpeq	r2,r2,zero
 100bab4:	10001d1e 	bne	r2,zero,100bb2c <close+0xdc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 100bab8:	e0bffb17 	ldw	r2,-20(fp)
 100babc:	10800017 	ldw	r2,0(r2)
 100bac0:	10800417 	ldw	r2,16(r2)
 100bac4:	1005003a 	cmpeq	r2,r2,zero
 100bac8:	1000071e 	bne	r2,zero,100bae8 <close+0x98>
 100bacc:	e0bffb17 	ldw	r2,-20(fp)
 100bad0:	10800017 	ldw	r2,0(r2)
 100bad4:	10800417 	ldw	r2,16(r2)
 100bad8:	e13ffb17 	ldw	r4,-20(fp)
 100badc:	103ee83a 	callr	r2
 100bae0:	e0bffe15 	stw	r2,-8(fp)
 100bae4:	00000106 	br	100baec <close+0x9c>
 100bae8:	e03ffe15 	stw	zero,-8(fp)
 100baec:	e0bffe17 	ldw	r2,-8(fp)
 100baf0:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 100baf4:	e13ffc17 	ldw	r4,-16(fp)
 100baf8:	100c4080 	call	100c408 <alt_release_fd>
    if (rval < 0)
 100bafc:	e0bffa17 	ldw	r2,-24(fp)
 100bb00:	1004403a 	cmpge	r2,r2,zero
 100bb04:	1000071e 	bne	r2,zero,100bb24 <close+0xd4>
    {
      ALT_ERRNO = -rval;
 100bb08:	100bb5c0 	call	100bb5c <alt_get_errno>
 100bb0c:	e0fffa17 	ldw	r3,-24(fp)
 100bb10:	00c7c83a 	sub	r3,zero,r3
 100bb14:	10c00015 	stw	r3,0(r2)
      return -1;
 100bb18:	00bfffc4 	movi	r2,-1
 100bb1c:	e0bffd15 	stw	r2,-12(fp)
 100bb20:	00000806 	br	100bb44 <close+0xf4>
    }
    return 0;
 100bb24:	e03ffd15 	stw	zero,-12(fp)
 100bb28:	00000606 	br	100bb44 <close+0xf4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100bb2c:	100bb5c0 	call	100bb5c <alt_get_errno>
 100bb30:	1007883a 	mov	r3,r2
 100bb34:	00801444 	movi	r2,81
 100bb38:	18800015 	stw	r2,0(r3)
    return -1;
 100bb3c:	00bfffc4 	movi	r2,-1
 100bb40:	e0bffd15 	stw	r2,-12(fp)
 100bb44:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 100bb48:	e037883a 	mov	sp,fp
 100bb4c:	dfc00117 	ldw	ra,4(sp)
 100bb50:	df000017 	ldw	fp,0(sp)
 100bb54:	dec00204 	addi	sp,sp,8
 100bb58:	f800283a 	ret

0100bb5c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100bb5c:	f811883a 	mov	r8,ra
 100bb60:	100c1d00 	call	100c1d0 <_mcount>
 100bb64:	403f883a 	mov	ra,r8
 100bb68:	defffd04 	addi	sp,sp,-12
 100bb6c:	dfc00215 	stw	ra,8(sp)
 100bb70:	df000115 	stw	fp,4(sp)
 100bb74:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100bb78:	008040b4 	movhi	r2,258
 100bb7c:	109fa304 	addi	r2,r2,32396
 100bb80:	10800017 	ldw	r2,0(r2)
 100bb84:	1005003a 	cmpeq	r2,r2,zero
 100bb88:	1000061e 	bne	r2,zero,100bba4 <alt_get_errno+0x48>
 100bb8c:	008040b4 	movhi	r2,258
 100bb90:	109fa304 	addi	r2,r2,32396
 100bb94:	10800017 	ldw	r2,0(r2)
 100bb98:	103ee83a 	callr	r2
 100bb9c:	e0bfff15 	stw	r2,-4(fp)
 100bba0:	00000306 	br	100bbb0 <alt_get_errno+0x54>
 100bba4:	008040f4 	movhi	r2,259
 100bba8:	1096ea04 	addi	r2,r2,23464
 100bbac:	e0bfff15 	stw	r2,-4(fp)
 100bbb0:	e0bfff17 	ldw	r2,-4(fp)
}
 100bbb4:	e037883a 	mov	sp,fp
 100bbb8:	dfc00117 	ldw	ra,4(sp)
 100bbbc:	df000017 	ldw	fp,0(sp)
 100bbc0:	dec00204 	addi	sp,sp,8
 100bbc4:	f800283a 	ret

0100bbc8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 100bbc8:	f811883a 	mov	r8,ra
 100bbcc:	100c1d00 	call	100c1d0 <_mcount>
 100bbd0:	403f883a 	mov	ra,r8
 100bbd4:	defffc04 	addi	sp,sp,-16
 100bbd8:	df000315 	stw	fp,12(sp)
 100bbdc:	df000304 	addi	fp,sp,12
 100bbe0:	e13ffd15 	stw	r4,-12(fp)
 100bbe4:	e17ffe15 	stw	r5,-8(fp)
 100bbe8:	e1bfff15 	stw	r6,-4(fp)
  return len;
 100bbec:	e0bfff17 	ldw	r2,-4(fp)
}
 100bbf0:	e037883a 	mov	sp,fp
 100bbf4:	df000017 	ldw	fp,0(sp)
 100bbf8:	dec00104 	addi	sp,sp,4
 100bbfc:	f800283a 	ret

0100bc00 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 100bc00:	f811883a 	mov	r8,ra
 100bc04:	100c1d00 	call	100c1d0 <_mcount>
 100bc08:	403f883a 	mov	ra,r8
 100bc0c:	defff904 	addi	sp,sp,-28
 100bc10:	dfc00615 	stw	ra,24(sp)
 100bc14:	df000515 	stw	fp,20(sp)
 100bc18:	df000504 	addi	fp,sp,20
 100bc1c:	e13ffc15 	stw	r4,-16(fp)
 100bc20:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100bc24:	e0bffc17 	ldw	r2,-16(fp)
 100bc28:	1004803a 	cmplt	r2,r2,zero
 100bc2c:	1000091e 	bne	r2,zero,100bc54 <fstat+0x54>
 100bc30:	e13ffc17 	ldw	r4,-16(fp)
 100bc34:	01400304 	movi	r5,12
 100bc38:	10021e00 	call	10021e0 <__mulsi3>
 100bc3c:	1007883a 	mov	r3,r2
 100bc40:	008040b4 	movhi	r2,258
 100bc44:	109ad904 	addi	r2,r2,27492
 100bc48:	1887883a 	add	r3,r3,r2
 100bc4c:	e0ffff15 	stw	r3,-4(fp)
 100bc50:	00000106 	br	100bc58 <fstat+0x58>
 100bc54:	e03fff15 	stw	zero,-4(fp)
 100bc58:	e0bfff17 	ldw	r2,-4(fp)
 100bc5c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 100bc60:	e0bffb17 	ldw	r2,-20(fp)
 100bc64:	1005003a 	cmpeq	r2,r2,zero
 100bc68:	1000121e 	bne	r2,zero,100bcb4 <fstat+0xb4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 100bc6c:	e0bffb17 	ldw	r2,-20(fp)
 100bc70:	10800017 	ldw	r2,0(r2)
 100bc74:	10800817 	ldw	r2,32(r2)
 100bc78:	1005003a 	cmpeq	r2,r2,zero
 100bc7c:	1000081e 	bne	r2,zero,100bca0 <fstat+0xa0>
    {
      return fd->dev->fstat(fd, st);
 100bc80:	e0bffb17 	ldw	r2,-20(fp)
 100bc84:	10800017 	ldw	r2,0(r2)
 100bc88:	10800817 	ldw	r2,32(r2)
 100bc8c:	e13ffb17 	ldw	r4,-20(fp)
 100bc90:	e17ffd17 	ldw	r5,-12(fp)
 100bc94:	103ee83a 	callr	r2
 100bc98:	e0bffe15 	stw	r2,-8(fp)
 100bc9c:	00000b06 	br	100bccc <fstat+0xcc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 100bca0:	e0fffd17 	ldw	r3,-12(fp)
 100bca4:	00880004 	movi	r2,8192
 100bca8:	18800115 	stw	r2,4(r3)
      return 0;
 100bcac:	e03ffe15 	stw	zero,-8(fp)
 100bcb0:	00000606 	br	100bccc <fstat+0xcc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100bcb4:	100bce40 	call	100bce4 <alt_get_errno>
 100bcb8:	1007883a 	mov	r3,r2
 100bcbc:	00801444 	movi	r2,81
 100bcc0:	18800015 	stw	r2,0(r3)
    return -1;
 100bcc4:	00bfffc4 	movi	r2,-1
 100bcc8:	e0bffe15 	stw	r2,-8(fp)
 100bccc:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 100bcd0:	e037883a 	mov	sp,fp
 100bcd4:	dfc00117 	ldw	ra,4(sp)
 100bcd8:	df000017 	ldw	fp,0(sp)
 100bcdc:	dec00204 	addi	sp,sp,8
 100bce0:	f800283a 	ret

0100bce4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100bce4:	f811883a 	mov	r8,ra
 100bce8:	100c1d00 	call	100c1d0 <_mcount>
 100bcec:	403f883a 	mov	ra,r8
 100bcf0:	defffd04 	addi	sp,sp,-12
 100bcf4:	dfc00215 	stw	ra,8(sp)
 100bcf8:	df000115 	stw	fp,4(sp)
 100bcfc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100bd00:	008040b4 	movhi	r2,258
 100bd04:	109fa304 	addi	r2,r2,32396
 100bd08:	10800017 	ldw	r2,0(r2)
 100bd0c:	1005003a 	cmpeq	r2,r2,zero
 100bd10:	1000061e 	bne	r2,zero,100bd2c <alt_get_errno+0x48>
 100bd14:	008040b4 	movhi	r2,258
 100bd18:	109fa304 	addi	r2,r2,32396
 100bd1c:	10800017 	ldw	r2,0(r2)
 100bd20:	103ee83a 	callr	r2
 100bd24:	e0bfff15 	stw	r2,-4(fp)
 100bd28:	00000306 	br	100bd38 <alt_get_errno+0x54>
 100bd2c:	008040f4 	movhi	r2,259
 100bd30:	1096ea04 	addi	r2,r2,23464
 100bd34:	e0bfff15 	stw	r2,-4(fp)
 100bd38:	e0bfff17 	ldw	r2,-4(fp)
}
 100bd3c:	e037883a 	mov	sp,fp
 100bd40:	dfc00117 	ldw	ra,4(sp)
 100bd44:	df000017 	ldw	fp,0(sp)
 100bd48:	dec00204 	addi	sp,sp,8
 100bd4c:	f800283a 	ret

0100bd50 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 100bd50:	f811883a 	mov	r8,ra
 100bd54:	100c1d00 	call	100c1d0 <_mcount>
 100bd58:	403f883a 	mov	ra,r8
 100bd5c:	deffeb04 	addi	sp,sp,-84
 100bd60:	dfc01415 	stw	ra,80(sp)
 100bd64:	df001315 	stw	fp,76(sp)
 100bd68:	df001304 	addi	fp,sp,76
 100bd6c:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100bd70:	e0bffd17 	ldw	r2,-12(fp)
 100bd74:	1004803a 	cmplt	r2,r2,zero
 100bd78:	1000091e 	bne	r2,zero,100bda0 <isatty+0x50>
 100bd7c:	e13ffd17 	ldw	r4,-12(fp)
 100bd80:	01400304 	movi	r5,12
 100bd84:	10021e00 	call	10021e0 <__mulsi3>
 100bd88:	1007883a 	mov	r3,r2
 100bd8c:	008040b4 	movhi	r2,258
 100bd90:	109ad904 	addi	r2,r2,27492
 100bd94:	1887883a 	add	r3,r3,r2
 100bd98:	e0ffff15 	stw	r3,-4(fp)
 100bd9c:	00000106 	br	100bda4 <isatty+0x54>
 100bda0:	e03fff15 	stw	zero,-4(fp)
 100bda4:	e0bfff17 	ldw	r2,-4(fp)
 100bda8:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 100bdac:	e0bfed17 	ldw	r2,-76(fp)
 100bdb0:	1005003a 	cmpeq	r2,r2,zero
 100bdb4:	10000f1e 	bne	r2,zero,100bdf4 <isatty+0xa4>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 100bdb8:	e0bfed17 	ldw	r2,-76(fp)
 100bdbc:	10800017 	ldw	r2,0(r2)
 100bdc0:	10800817 	ldw	r2,32(r2)
 100bdc4:	1004c03a 	cmpne	r2,r2,zero
 100bdc8:	1000031e 	bne	r2,zero,100bdd8 <isatty+0x88>
    {
      return 1;
 100bdcc:	00800044 	movi	r2,1
 100bdd0:	e0bffe15 	stw	r2,-8(fp)
 100bdd4:	00000c06 	br	100be08 <isatty+0xb8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 100bdd8:	e17fee04 	addi	r5,fp,-72
 100bddc:	e13ffd17 	ldw	r4,-12(fp)
 100bde0:	100bc000 	call	100bc00 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 100bde4:	e0bfef17 	ldw	r2,-68(fp)
 100bde8:	10880020 	cmpeqi	r2,r2,8192
 100bdec:	e0bffe15 	stw	r2,-8(fp)
 100bdf0:	00000506 	br	100be08 <isatty+0xb8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100bdf4:	100be200 	call	100be20 <alt_get_errno>
 100bdf8:	1007883a 	mov	r3,r2
 100bdfc:	00801444 	movi	r2,81
 100be00:	18800015 	stw	r2,0(r3)
    return 0;
 100be04:	e03ffe15 	stw	zero,-8(fp)
 100be08:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 100be0c:	e037883a 	mov	sp,fp
 100be10:	dfc00117 	ldw	ra,4(sp)
 100be14:	df000017 	ldw	fp,0(sp)
 100be18:	dec00204 	addi	sp,sp,8
 100be1c:	f800283a 	ret

0100be20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100be20:	f811883a 	mov	r8,ra
 100be24:	100c1d00 	call	100c1d0 <_mcount>
 100be28:	403f883a 	mov	ra,r8
 100be2c:	defffd04 	addi	sp,sp,-12
 100be30:	dfc00215 	stw	ra,8(sp)
 100be34:	df000115 	stw	fp,4(sp)
 100be38:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100be3c:	008040b4 	movhi	r2,258
 100be40:	109fa304 	addi	r2,r2,32396
 100be44:	10800017 	ldw	r2,0(r2)
 100be48:	1005003a 	cmpeq	r2,r2,zero
 100be4c:	1000061e 	bne	r2,zero,100be68 <alt_get_errno+0x48>
 100be50:	008040b4 	movhi	r2,258
 100be54:	109fa304 	addi	r2,r2,32396
 100be58:	10800017 	ldw	r2,0(r2)
 100be5c:	103ee83a 	callr	r2
 100be60:	e0bfff15 	stw	r2,-4(fp)
 100be64:	00000306 	br	100be74 <alt_get_errno+0x54>
 100be68:	008040f4 	movhi	r2,259
 100be6c:	1096ea04 	addi	r2,r2,23464
 100be70:	e0bfff15 	stw	r2,-4(fp)
 100be74:	e0bfff17 	ldw	r2,-4(fp)
}
 100be78:	e037883a 	mov	sp,fp
 100be7c:	dfc00117 	ldw	ra,4(sp)
 100be80:	df000017 	ldw	fp,0(sp)
 100be84:	dec00204 	addi	sp,sp,8
 100be88:	f800283a 	ret

0100be8c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 100be8c:	f811883a 	mov	r8,ra
 100be90:	100c1d00 	call	100c1d0 <_mcount>
 100be94:	403f883a 	mov	ra,r8
 100be98:	defffe04 	addi	sp,sp,-8
 100be9c:	dfc00115 	stw	ra,4(sp)
 100bea0:	df000015 	stw	fp,0(sp)
 100bea4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 100bea8:	010040b4 	movhi	r4,258
 100beac:	211fcc04 	addi	r4,r4,32560
 100beb0:	014040b4 	movhi	r5,258
 100beb4:	2968bf04 	addi	r5,r5,-23812
 100beb8:	018040b4 	movhi	r6,258
 100bebc:	319fcc04 	addi	r6,r6,32560
 100bec0:	100bf180 	call	100bf18 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 100bec4:	01004034 	movhi	r4,256
 100bec8:	21000004 	addi	r4,r4,0
 100becc:	01400234 	movhi	r5,8
 100bed0:	29400804 	addi	r5,r5,32
 100bed4:	01800234 	movhi	r6,8
 100bed8:	31807304 	addi	r6,r6,460
 100bedc:	100bf180 	call	100bf18 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 100bee0:	010040b4 	movhi	r4,258
 100bee4:	21270b04 	addi	r4,r4,-25556
 100bee8:	014040b4 	movhi	r5,258
 100beec:	29670b04 	addi	r5,r5,-25556
 100bef0:	018040b4 	movhi	r6,258
 100bef4:	31a8bf04 	addi	r6,r6,-23812
 100bef8:	100bf180 	call	100bf18 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 100befc:	10181f40 	call	10181f4 <alt_dcache_flush_all>
  alt_icache_flush_all();
 100bf00:	10187b00 	call	10187b0 <alt_icache_flush_all>
}
 100bf04:	e037883a 	mov	sp,fp
 100bf08:	dfc00117 	ldw	ra,4(sp)
 100bf0c:	df000017 	ldw	fp,0(sp)
 100bf10:	dec00204 	addi	sp,sp,8
 100bf14:	f800283a 	ret

0100bf18 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 100bf18:	f811883a 	mov	r8,ra
 100bf1c:	100c1d00 	call	100c1d0 <_mcount>
 100bf20:	403f883a 	mov	ra,r8
 100bf24:	defffc04 	addi	sp,sp,-16
 100bf28:	df000315 	stw	fp,12(sp)
 100bf2c:	df000304 	addi	fp,sp,12
 100bf30:	e13ffd15 	stw	r4,-12(fp)
 100bf34:	e17ffe15 	stw	r5,-8(fp)
 100bf38:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 100bf3c:	e0fffe17 	ldw	r3,-8(fp)
 100bf40:	e0bffd17 	ldw	r2,-12(fp)
 100bf44:	18800e26 	beq	r3,r2,100bf80 <alt_load_section+0x68>
  {
    while( to != end )
 100bf48:	00000a06 	br	100bf74 <alt_load_section+0x5c>
    {
      *to++ = *from++;
 100bf4c:	e0bffd17 	ldw	r2,-12(fp)
 100bf50:	10c00017 	ldw	r3,0(r2)
 100bf54:	e0bffe17 	ldw	r2,-8(fp)
 100bf58:	10c00015 	stw	r3,0(r2)
 100bf5c:	e0bffe17 	ldw	r2,-8(fp)
 100bf60:	10800104 	addi	r2,r2,4
 100bf64:	e0bffe15 	stw	r2,-8(fp)
 100bf68:	e0bffd17 	ldw	r2,-12(fp)
 100bf6c:	10800104 	addi	r2,r2,4
 100bf70:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 100bf74:	e0fffe17 	ldw	r3,-8(fp)
 100bf78:	e0bfff17 	ldw	r2,-4(fp)
 100bf7c:	18bff31e 	bne	r3,r2,100bf4c <alt_load_section+0x34>
    {
      *to++ = *from++;
    }
  }
}
 100bf80:	e037883a 	mov	sp,fp
 100bf84:	df000017 	ldw	fp,0(sp)
 100bf88:	dec00104 	addi	sp,sp,4
 100bf8c:	f800283a 	ret

0100bf90 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 100bf90:	f811883a 	mov	r8,ra
 100bf94:	100c1d00 	call	100c1d0 <_mcount>
 100bf98:	403f883a 	mov	ra,r8
 100bf9c:	defff804 	addi	sp,sp,-32
 100bfa0:	dfc00715 	stw	ra,28(sp)
 100bfa4:	df000615 	stw	fp,24(sp)
 100bfa8:	df000604 	addi	fp,sp,24
 100bfac:	e13ffc15 	stw	r4,-16(fp)
 100bfb0:	e17ffd15 	stw	r5,-12(fp)
 100bfb4:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 100bfb8:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100bfbc:	e0bffc17 	ldw	r2,-16(fp)
 100bfc0:	1004803a 	cmplt	r2,r2,zero
 100bfc4:	1000091e 	bne	r2,zero,100bfec <lseek+0x5c>
 100bfc8:	e13ffc17 	ldw	r4,-16(fp)
 100bfcc:	01400304 	movi	r5,12
 100bfd0:	10021e00 	call	10021e0 <__mulsi3>
 100bfd4:	1007883a 	mov	r3,r2
 100bfd8:	008040b4 	movhi	r2,258
 100bfdc:	109ad904 	addi	r2,r2,27492
 100bfe0:	1887883a 	add	r3,r3,r2
 100bfe4:	e0ffff15 	stw	r3,-4(fp)
 100bfe8:	00000106 	br	100bff0 <lseek+0x60>
 100bfec:	e03fff15 	stw	zero,-4(fp)
 100bff0:	e0bfff17 	ldw	r2,-4(fp)
 100bff4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 100bff8:	e0bffb17 	ldw	r2,-20(fp)
 100bffc:	1005003a 	cmpeq	r2,r2,zero
 100c000:	1000111e 	bne	r2,zero,100c048 <lseek+0xb8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 100c004:	e0bffb17 	ldw	r2,-20(fp)
 100c008:	10800017 	ldw	r2,0(r2)
 100c00c:	10800717 	ldw	r2,28(r2)
 100c010:	1005003a 	cmpeq	r2,r2,zero
 100c014:	1000091e 	bne	r2,zero,100c03c <lseek+0xac>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 100c018:	e0bffb17 	ldw	r2,-20(fp)
 100c01c:	10800017 	ldw	r2,0(r2)
 100c020:	10800717 	ldw	r2,28(r2)
 100c024:	e13ffb17 	ldw	r4,-20(fp)
 100c028:	e17ffd17 	ldw	r5,-12(fp)
 100c02c:	e1bffe17 	ldw	r6,-8(fp)
 100c030:	103ee83a 	callr	r2
 100c034:	e0bffa15 	stw	r2,-24(fp)
 100c038:	00000506 	br	100c050 <lseek+0xc0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 100c03c:	00bfde84 	movi	r2,-134
 100c040:	e0bffa15 	stw	r2,-24(fp)
 100c044:	00000206 	br	100c050 <lseek+0xc0>
    }
  }
  else  
  {
    rc = -EBADFD;
 100c048:	00bfebc4 	movi	r2,-81
 100c04c:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 100c050:	e0bffa17 	ldw	r2,-24(fp)
 100c054:	1004403a 	cmpge	r2,r2,zero
 100c058:	1000071e 	bne	r2,zero,100c078 <lseek+0xe8>
  {
    ALT_ERRNO = -rc;
 100c05c:	100c0900 	call	100c090 <alt_get_errno>
 100c060:	1007883a 	mov	r3,r2
 100c064:	e0bffa17 	ldw	r2,-24(fp)
 100c068:	0085c83a 	sub	r2,zero,r2
 100c06c:	18800015 	stw	r2,0(r3)
    rc = -1;
 100c070:	00bfffc4 	movi	r2,-1
 100c074:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 100c078:	e0bffa17 	ldw	r2,-24(fp)
}
 100c07c:	e037883a 	mov	sp,fp
 100c080:	dfc00117 	ldw	ra,4(sp)
 100c084:	df000017 	ldw	fp,0(sp)
 100c088:	dec00204 	addi	sp,sp,8
 100c08c:	f800283a 	ret

0100c090 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100c090:	f811883a 	mov	r8,ra
 100c094:	100c1d00 	call	100c1d0 <_mcount>
 100c098:	403f883a 	mov	ra,r8
 100c09c:	defffd04 	addi	sp,sp,-12
 100c0a0:	dfc00215 	stw	ra,8(sp)
 100c0a4:	df000115 	stw	fp,4(sp)
 100c0a8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100c0ac:	008040b4 	movhi	r2,258
 100c0b0:	109fa304 	addi	r2,r2,32396
 100c0b4:	10800017 	ldw	r2,0(r2)
 100c0b8:	1005003a 	cmpeq	r2,r2,zero
 100c0bc:	1000061e 	bne	r2,zero,100c0d8 <alt_get_errno+0x48>
 100c0c0:	008040b4 	movhi	r2,258
 100c0c4:	109fa304 	addi	r2,r2,32396
 100c0c8:	10800017 	ldw	r2,0(r2)
 100c0cc:	103ee83a 	callr	r2
 100c0d0:	e0bfff15 	stw	r2,-4(fp)
 100c0d4:	00000306 	br	100c0e4 <alt_get_errno+0x54>
 100c0d8:	008040f4 	movhi	r2,259
 100c0dc:	1096ea04 	addi	r2,r2,23464
 100c0e0:	e0bfff15 	stw	r2,-4(fp)
 100c0e4:	e0bfff17 	ldw	r2,-4(fp)
}
 100c0e8:	e037883a 	mov	sp,fp
 100c0ec:	dfc00117 	ldw	ra,4(sp)
 100c0f0:	df000017 	ldw	fp,0(sp)
 100c0f4:	dec00204 	addi	sp,sp,8
 100c0f8:	f800283a 	ret

0100c0fc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 100c0fc:	f811883a 	mov	r8,ra
 100c100:	100c1d00 	call	100c1d0 <_mcount>
 100c104:	403f883a 	mov	ra,r8
 100c108:	defffb04 	addi	sp,sp,-20
 100c10c:	dfc00415 	stw	ra,16(sp)
 100c110:	df000315 	stw	fp,12(sp)
 100c114:	df000304 	addi	fp,sp,12
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 100c118:	0009883a 	mov	r4,zero
 100c11c:	10168380 	call	1016838 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 100c120:	100d5000 	call	100d500 <OSInit>
 100c124:	01000044 	movi	r4,1
 100c128:	10127380 	call	1012738 <OSSemCreate>
 100c12c:	1007883a 	mov	r3,r2
 100c130:	008040f4 	movhi	r2,259
 100c134:	1096f204 	addi	r2,r2,23496
 100c138:	10c00015 	stw	r3,0(r2)
 100c13c:	01000044 	movi	r4,1
 100c140:	10127380 	call	1012738 <OSSemCreate>
 100c144:	1007883a 	mov	r3,r2
 100c148:	008040f4 	movhi	r2,259
 100c14c:	1096f404 	addi	r2,r2,23504
 100c150:	10c00015 	stw	r3,0(r2)
 100c154:	008040f4 	movhi	r2,259
 100c158:	1096eb04 	addi	r2,r2,23468
 100c15c:	e0bffd15 	stw	r2,-12(fp)
 100c160:	00800044 	movi	r2,1
 100c164:	e0bffe0d 	sth	r2,-8(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
 100c168:	e13ffe0b 	ldhu	r4,-8(fp)
 100c16c:	10127380 	call	1012738 <OSSemCreate>
 100c170:	1007883a 	mov	r3,r2
 100c174:	e0bffd17 	ldw	r2,-12(fp)
 100c178:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 100c17c:	10168780 	call	1016878 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 100c180:	010040b4 	movhi	r4,258
 100c184:	2127fe04 	addi	r4,r4,-24584
 100c188:	014040b4 	movhi	r5,258
 100c18c:	2967fe04 	addi	r5,r5,-24584
 100c190:	018040b4 	movhi	r6,258
 100c194:	31a7fe04 	addi	r6,r6,-24584
 100c198:	10188bc0 	call	10188bc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 100c19c:	10183480 	call	1018348 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 100c1a0:	010040b4 	movhi	r4,258
 100c1a4:	2120ee04 	addi	r4,r4,-31816
 100c1a8:	10196300 	call	1019630 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 100c1ac:	d1175517 	ldw	r4,23892(gp)
 100c1b0:	d1575617 	ldw	r5,23896(gp)
 100c1b4:	d1975717 	ldw	r6,23900(gp)
 100c1b8:	10014f40 	call	10014f4 <main>
 100c1bc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 100c1c0:	01000044 	movi	r4,1
 100c1c4:	100ba500 	call	100ba50 <close>
  exit (result);
 100c1c8:	e13fff17 	ldw	r4,-4(fp)
 100c1cc:	10196500 	call	1019650 <exit>

0100c1d0 <_mcount>:
         * of values for bits 4:2 won't be even (aligning on cache line boundaries
         * will skew it).  Higher bits should be fairly random.
         */
        /* fn_head = mcount_fn_head + (((unsigned int)self_pc >> 5) & (HASH_BUCKETS - 1)); */

        srli    r2, ra, 3
 100c1d0:	f804d0fa 	srli	r2,ra,3
        movhi   r3, %hiadj(__mcount_fn_head)
 100c1d4:	00c04134 	movhi	r3,260
        addi    r3, r3, %lo(__mcount_fn_head)
 100c1d8:	18de8704 	addi	r3,r3,31260
        andi    r2, r2, 0xFC
 100c1dc:	10803f0c 	andi	r2,r2,252
        add     r11, r2, r3
 100c1e0:	10d7883a 	add	r11,r2,r3
        /* The fast case is where we have already allocated a function arc, and so
         * also a function pointer.
         */

        /* First find the function being called (using self_pc) */
        mov     r10, r11
 100c1e4:	5815883a 	mov	r10,r11
0:
        ldw     r10, 0(r10)
 100c1e8:	52800017 	ldw	r10,0(r10)
        beq     r10, zero, .Lnew_arc
 100c1ec:	50000726 	beq	r10,zero,100c20c <_mcount+0x3c>
        ldw     r2, 4(r10)
 100c1f0:	50800117 	ldw	r2,4(r10)
        bne     r2, ra, 0b
 100c1f4:	17fffc1e 	bne	r2,ra,100c1e8 <_mcount+0x18>

        /* Found a function entry for this PC. Now look for an arc with a matching
         * from_pc value. There will always be at least one arc. */
        ldw     r3, 8(r10)
 100c1f8:	50c00217 	ldw	r3,8(r10)
0:
        ldw     r2, 4(r3)
 100c1fc:	18800117 	ldw	r2,4(r3)
        beq     r2, r8, .Lfound_arc
 100c200:	12001626 	beq	r2,r8,100c25c <_mcount+0x8c>
        ldw     r3, 0(r3)
 100c204:	18c00017 	ldw	r3,0(r3)
        bne     r3, zero, 0b
 100c208:	183ffc1e 	bne	r3,zero,100c1fc <_mcount+0x2c>

.Lnew_arc:
        addi    sp, sp, -24
 100c20c:	defffa04 	addi	sp,sp,-24

.LCFI0:
        stw     ra, 0(sp)
 100c210:	dfc00015 	stw	ra,0(sp)
        stw     r4, 4(sp)
 100c214:	d9000115 	stw	r4,4(sp)
        stw     r5, 8(sp)
 100c218:	d9400215 	stw	r5,8(sp)
        stw     r6, 12(sp)
 100c21c:	d9800315 	stw	r6,12(sp)
        stw     r7, 16(sp)
 100c220:	d9c00415 	stw	r7,16(sp)
        stw     r8, 20(sp)
 100c224:	da000515 	stw	r8,20(sp)

.LCFI1:
        /* __mcount_record(orig_ra, orig_r8, fn_entry, *fn_head); */
        mov     r4, ra
 100c228:	f809883a 	mov	r4,ra
        mov     r5, r8
 100c22c:	400b883a 	mov	r5,r8
        mov     r6, r10
 100c230:	500d883a 	mov	r6,r10
        mov     r7, r11
 100c234:	580f883a 	mov	r7,r11
        call     __mcount_record
 100c238:	10184c80 	call	10184c8 <__mcount_record>
        
        /* restore registers from the stack */
        ldw     ra, 0(sp)
 100c23c:	dfc00017 	ldw	ra,0(sp)
        ldw     r4, 4(sp)
 100c240:	d9000117 	ldw	r4,4(sp)
        ldw     r5, 8(sp)
 100c244:	d9400217 	ldw	r5,8(sp)
        ldw     r6, 12(sp)
 100c248:	d9800317 	ldw	r6,12(sp)
        ldw     r7, 16(sp)
 100c24c:	d9c00417 	ldw	r7,16(sp)
        ldw     r8, 20(sp)
 100c250:	da000517 	ldw	r8,20(sp)

        addi    sp, sp, 24
 100c254:	dec00604 	addi	sp,sp,24

.LCFI2:
        ret
 100c258:	f800283a 	ret

.Lfound_arc:
        /* We've found the correct arc record.  Increment the count and return */
        ldw     r2, 8(r3)
 100c25c:	18800217 	ldw	r2,8(r3)
        addi    r2, r2, 1
 100c260:	10800044 	addi	r2,r2,1
        stw     r2, 8(r3)
 100c264:	18800215 	stw	r2,8(r3)
        ret
 100c268:	f800283a 	ret

0100c26c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 100c26c:	f811883a 	mov	r8,ra
 100c270:	100c1d00 	call	100c1d0 <_mcount>
 100c274:	403f883a 	mov	ra,r8
 100c278:	defff704 	addi	sp,sp,-36
 100c27c:	dfc00815 	stw	ra,32(sp)
 100c280:	df000715 	stw	fp,28(sp)
 100c284:	df000704 	addi	fp,sp,28
 100c288:	e13ffb15 	stw	r4,-20(fp)
 100c28c:	e17ffc15 	stw	r5,-16(fp)
 100c290:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100c294:	e0bffb17 	ldw	r2,-20(fp)
 100c298:	1004803a 	cmplt	r2,r2,zero
 100c29c:	1000091e 	bne	r2,zero,100c2c4 <read+0x58>
 100c2a0:	e13ffb17 	ldw	r4,-20(fp)
 100c2a4:	01400304 	movi	r5,12
 100c2a8:	10021e00 	call	10021e0 <__mulsi3>
 100c2ac:	1007883a 	mov	r3,r2
 100c2b0:	008040b4 	movhi	r2,258
 100c2b4:	109ad904 	addi	r2,r2,27492
 100c2b8:	1887883a 	add	r3,r3,r2
 100c2bc:	e0ffff15 	stw	r3,-4(fp)
 100c2c0:	00000106 	br	100c2c8 <read+0x5c>
 100c2c4:	e03fff15 	stw	zero,-4(fp)
 100c2c8:	e0bfff17 	ldw	r2,-4(fp)
 100c2cc:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 100c2d0:	e0bffa17 	ldw	r2,-24(fp)
 100c2d4:	1005003a 	cmpeq	r2,r2,zero
 100c2d8:	1000241e 	bne	r2,zero,100c36c <read+0x100>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 100c2dc:	e0bffa17 	ldw	r2,-24(fp)
 100c2e0:	10800217 	ldw	r2,8(r2)
 100c2e4:	108000cc 	andi	r2,r2,3
 100c2e8:	10800060 	cmpeqi	r2,r2,1
 100c2ec:	10001a1e 	bne	r2,zero,100c358 <read+0xec>
 100c2f0:	e0bffa17 	ldw	r2,-24(fp)
 100c2f4:	10800017 	ldw	r2,0(r2)
 100c2f8:	10800517 	ldw	r2,20(r2)
 100c2fc:	1005003a 	cmpeq	r2,r2,zero
 100c300:	1000151e 	bne	r2,zero,100c358 <read+0xec>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 100c304:	e0bffa17 	ldw	r2,-24(fp)
 100c308:	10800017 	ldw	r2,0(r2)
 100c30c:	10800517 	ldw	r2,20(r2)
 100c310:	e17ffc17 	ldw	r5,-16(fp)
 100c314:	e1bffd17 	ldw	r6,-12(fp)
 100c318:	e13ffa17 	ldw	r4,-24(fp)
 100c31c:	103ee83a 	callr	r2
 100c320:	e0bff915 	stw	r2,-28(fp)
 100c324:	e0bff917 	ldw	r2,-28(fp)
 100c328:	1004403a 	cmpge	r2,r2,zero
 100c32c:	1000071e 	bne	r2,zero,100c34c <read+0xe0>
        {
          ALT_ERRNO = -rval;
 100c330:	100c39c0 	call	100c39c <alt_get_errno>
 100c334:	e0fff917 	ldw	r3,-28(fp)
 100c338:	00c7c83a 	sub	r3,zero,r3
 100c33c:	10c00015 	stw	r3,0(r2)
          return -1;
 100c340:	00bfffc4 	movi	r2,-1
 100c344:	e0bffe15 	stw	r2,-8(fp)
 100c348:	00000e06 	br	100c384 <read+0x118>
        }
        return rval;
 100c34c:	e0bff917 	ldw	r2,-28(fp)
 100c350:	e0bffe15 	stw	r2,-8(fp)
 100c354:	00000b06 	br	100c384 <read+0x118>
      }
      else
      {
        ALT_ERRNO = EACCES;
 100c358:	100c39c0 	call	100c39c <alt_get_errno>
 100c35c:	1007883a 	mov	r3,r2
 100c360:	00800344 	movi	r2,13
 100c364:	18800015 	stw	r2,0(r3)
 100c368:	00000406 	br	100c37c <read+0x110>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 100c36c:	100c39c0 	call	100c39c <alt_get_errno>
 100c370:	1007883a 	mov	r3,r2
 100c374:	00801444 	movi	r2,81
 100c378:	18800015 	stw	r2,0(r3)
  }
  return -1;
 100c37c:	00bfffc4 	movi	r2,-1
 100c380:	e0bffe15 	stw	r2,-8(fp)
 100c384:	e0bffe17 	ldw	r2,-8(fp)
}
 100c388:	e037883a 	mov	sp,fp
 100c38c:	dfc00117 	ldw	ra,4(sp)
 100c390:	df000017 	ldw	fp,0(sp)
 100c394:	dec00204 	addi	sp,sp,8
 100c398:	f800283a 	ret

0100c39c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100c39c:	f811883a 	mov	r8,ra
 100c3a0:	100c1d00 	call	100c1d0 <_mcount>
 100c3a4:	403f883a 	mov	ra,r8
 100c3a8:	defffd04 	addi	sp,sp,-12
 100c3ac:	dfc00215 	stw	ra,8(sp)
 100c3b0:	df000115 	stw	fp,4(sp)
 100c3b4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100c3b8:	008040b4 	movhi	r2,258
 100c3bc:	109fa304 	addi	r2,r2,32396
 100c3c0:	10800017 	ldw	r2,0(r2)
 100c3c4:	1005003a 	cmpeq	r2,r2,zero
 100c3c8:	1000061e 	bne	r2,zero,100c3e4 <alt_get_errno+0x48>
 100c3cc:	008040b4 	movhi	r2,258
 100c3d0:	109fa304 	addi	r2,r2,32396
 100c3d4:	10800017 	ldw	r2,0(r2)
 100c3d8:	103ee83a 	callr	r2
 100c3dc:	e0bfff15 	stw	r2,-4(fp)
 100c3e0:	00000306 	br	100c3f0 <alt_get_errno+0x54>
 100c3e4:	008040f4 	movhi	r2,259
 100c3e8:	1096ea04 	addi	r2,r2,23464
 100c3ec:	e0bfff15 	stw	r2,-4(fp)
 100c3f0:	e0bfff17 	ldw	r2,-4(fp)
}
 100c3f4:	e037883a 	mov	sp,fp
 100c3f8:	dfc00117 	ldw	ra,4(sp)
 100c3fc:	df000017 	ldw	fp,0(sp)
 100c400:	dec00204 	addi	sp,sp,8
 100c404:	f800283a 	ret

0100c408 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 100c408:	f811883a 	mov	r8,ra
 100c40c:	100c1d00 	call	100c1d0 <_mcount>
 100c410:	403f883a 	mov	ra,r8
 100c414:	defffc04 	addi	sp,sp,-16
 100c418:	dfc00315 	stw	ra,12(sp)
 100c41c:	df000215 	stw	fp,8(sp)
 100c420:	dc000115 	stw	r16,4(sp)
 100c424:	df000104 	addi	fp,sp,4
 100c428:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 100c42c:	e0bfff17 	ldw	r2,-4(fp)
 100c430:	108000d0 	cmplti	r2,r2,3
 100c434:	10000f1e 	bne	r2,zero,100c474 <alt_release_fd+0x6c>
  {
    alt_fd_list[fd].fd_flags = 0;
 100c438:	e13fff17 	ldw	r4,-4(fp)
 100c43c:	040040b4 	movhi	r16,258
 100c440:	841ad904 	addi	r16,r16,27492
 100c444:	01400304 	movi	r5,12
 100c448:	10021e00 	call	10021e0 <__mulsi3>
 100c44c:	1405883a 	add	r2,r2,r16
 100c450:	10800204 	addi	r2,r2,8
 100c454:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 100c458:	e13fff17 	ldw	r4,-4(fp)
 100c45c:	040040b4 	movhi	r16,258
 100c460:	841ad904 	addi	r16,r16,27492
 100c464:	01400304 	movi	r5,12
 100c468:	10021e00 	call	10021e0 <__mulsi3>
 100c46c:	1405883a 	add	r2,r2,r16
 100c470:	10000015 	stw	zero,0(r2)
  }
}
 100c474:	e037883a 	mov	sp,fp
 100c478:	dfc00217 	ldw	ra,8(sp)
 100c47c:	df000117 	ldw	fp,4(sp)
 100c480:	dc000017 	ldw	r16,0(sp)
 100c484:	dec00304 	addi	sp,sp,12
 100c488:	f800283a 	ret

0100c48c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 100c48c:	defff804 	addi	sp,sp,-32
 100c490:	df000715 	stw	fp,28(sp)
 100c494:	df000704 	addi	fp,sp,28
 100c498:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100c49c:	0005303a 	rdctl	r2,status
 100c4a0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100c4a4:	e0fffb17 	ldw	r3,-20(fp)
 100c4a8:	00bfff84 	movi	r2,-2
 100c4ac:	1884703a 	and	r2,r3,r2
 100c4b0:	1001703a 	wrctl	status,r2
  
  return context;
 100c4b4:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 100c4b8:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 100c4bc:	d0a00d17 	ldw	r2,-32716(gp)
 100c4c0:	10c000c4 	addi	r3,r2,3
 100c4c4:	00bfff04 	movi	r2,-4
 100c4c8:	1884703a 	and	r2,r3,r2
 100c4cc:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 100c4d0:	d0e00d17 	ldw	r3,-32716(gp)
 100c4d4:	e0bffe17 	ldw	r2,-8(fp)
 100c4d8:	1887883a 	add	r3,r3,r2
 100c4dc:	00806034 	movhi	r2,384
 100c4e0:	10800004 	addi	r2,r2,0
 100c4e4:	10c0072e 	bgeu	r2,r3,100c504 <sbrk+0x78>
 100c4e8:	e0bffd17 	ldw	r2,-12(fp)
 100c4ec:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100c4f0:	e0bffa17 	ldw	r2,-24(fp)
 100c4f4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 100c4f8:	00bfffc4 	movi	r2,-1
 100c4fc:	e0bfff15 	stw	r2,-4(fp)
 100c500:	00000c06 	br	100c534 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 100c504:	d0a00d17 	ldw	r2,-32716(gp)
 100c508:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 100c50c:	d0e00d17 	ldw	r3,-32716(gp)
 100c510:	e0bffe17 	ldw	r2,-8(fp)
 100c514:	1885883a 	add	r2,r3,r2
 100c518:	d0a00d15 	stw	r2,-32716(gp)
 100c51c:	e0bffd17 	ldw	r2,-12(fp)
 100c520:	e0bff915 	stw	r2,-28(fp)
 100c524:	e0bff917 	ldw	r2,-28(fp)
 100c528:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 100c52c:	e0bffc17 	ldw	r2,-16(fp)
 100c530:	e0bfff15 	stw	r2,-4(fp)
 100c534:	e0bfff17 	ldw	r2,-4(fp)
} 
 100c538:	e037883a 	mov	sp,fp
 100c53c:	df000017 	ldw	fp,0(sp)
 100c540:	dec00104 	addi	sp,sp,4
 100c544:	f800283a 	ret

0100c548 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 100c548:	f811883a 	mov	r8,ra
 100c54c:	100c1d00 	call	100c1d0 <_mcount>
 100c550:	403f883a 	mov	ra,r8
 100c554:	defffa04 	addi	sp,sp,-24
 100c558:	df000515 	stw	fp,20(sp)
 100c55c:	df000504 	addi	fp,sp,20
 100c560:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100c564:	0005303a 	rdctl	r2,status
 100c568:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100c56c:	e0fffd17 	ldw	r3,-12(fp)
 100c570:	00bfff84 	movi	r2,-2
 100c574:	1884703a 	and	r2,r3,r2
 100c578:	1001703a 	wrctl	status,r2
  
  return context;
 100c57c:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 100c580:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 100c584:	e0bfff17 	ldw	r2,-4(fp)
 100c588:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 100c58c:	e0bffc17 	ldw	r2,-16(fp)
 100c590:	10c00017 	ldw	r3,0(r2)
 100c594:	e0bffc17 	ldw	r2,-16(fp)
 100c598:	10800117 	ldw	r2,4(r2)
 100c59c:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 100c5a0:	e0bffc17 	ldw	r2,-16(fp)
 100c5a4:	10c00117 	ldw	r3,4(r2)
 100c5a8:	e0bffc17 	ldw	r2,-16(fp)
 100c5ac:	10800017 	ldw	r2,0(r2)
 100c5b0:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 100c5b4:	e0fffc17 	ldw	r3,-16(fp)
 100c5b8:	e0bffc17 	ldw	r2,-16(fp)
 100c5bc:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 100c5c0:	e0fffc17 	ldw	r3,-16(fp)
 100c5c4:	e0bffc17 	ldw	r2,-16(fp)
 100c5c8:	18800015 	stw	r2,0(r3)
 100c5cc:	e0bffe17 	ldw	r2,-8(fp)
 100c5d0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100c5d4:	e0bffb17 	ldw	r2,-20(fp)
 100c5d8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 100c5dc:	e037883a 	mov	sp,fp
 100c5e0:	df000017 	ldw	fp,0(sp)
 100c5e4:	dec00104 	addi	sp,sp,4
 100c5e8:	f800283a 	ret

0100c5ec <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 100c5ec:	f811883a 	mov	r8,ra
 100c5f0:	100c1d00 	call	100c1d0 <_mcount>
 100c5f4:	403f883a 	mov	ra,r8
 100c5f8:	defffb04 	addi	sp,sp,-20
 100c5fc:	dfc00415 	stw	ra,16(sp)
 100c600:	df000315 	stw	fp,12(sp)
 100c604:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 100c608:	d0a00e17 	ldw	r2,-32712(gp)
 100c60c:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 100c610:	d0975917 	ldw	r2,23908(gp)
 100c614:	10800044 	addi	r2,r2,1
 100c618:	d0975915 	stw	r2,23908(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 100c61c:	00003106 	br	100c6e4 <alt_tick+0xf8>
  {
    next = (alt_alarm*) alarm->llist.next;
 100c620:	e0bffe17 	ldw	r2,-8(fp)
 100c624:	10800017 	ldw	r2,0(r2)
 100c628:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 100c62c:	e0bffe17 	ldw	r2,-8(fp)
 100c630:	10800403 	ldbu	r2,16(r2)
 100c634:	10803fcc 	andi	r2,r2,255
 100c638:	1005003a 	cmpeq	r2,r2,zero
 100c63c:	1000051e 	bne	r2,zero,100c654 <alt_tick+0x68>
 100c640:	d0975917 	ldw	r2,23908(gp)
 100c644:	1004c03a 	cmpne	r2,r2,zero
 100c648:	1000021e 	bne	r2,zero,100c654 <alt_tick+0x68>
    {
      alarm->rollover = 0;
 100c64c:	e0bffe17 	ldw	r2,-8(fp)
 100c650:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 100c654:	e0bffe17 	ldw	r2,-8(fp)
 100c658:	10c00217 	ldw	r3,8(r2)
 100c65c:	d0975917 	ldw	r2,23908(gp)
 100c660:	10c01e36 	bltu	r2,r3,100c6dc <alt_tick+0xf0>
 100c664:	e0bffe17 	ldw	r2,-8(fp)
 100c668:	10800403 	ldbu	r2,16(r2)
 100c66c:	10803fcc 	andi	r2,r2,255
 100c670:	1004c03a 	cmpne	r2,r2,zero
 100c674:	1000191e 	bne	r2,zero,100c6dc <alt_tick+0xf0>
    {
      next_callback = alarm->callback (alarm->context);
 100c678:	e0bffe17 	ldw	r2,-8(fp)
 100c67c:	10c00317 	ldw	r3,12(r2)
 100c680:	e0bffe17 	ldw	r2,-8(fp)
 100c684:	11000517 	ldw	r4,20(r2)
 100c688:	183ee83a 	callr	r3
 100c68c:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 100c690:	e0bffd17 	ldw	r2,-12(fp)
 100c694:	1004c03a 	cmpne	r2,r2,zero
 100c698:	1000031e 	bne	r2,zero,100c6a8 <alt_tick+0xbc>
      {
        alt_alarm_stop (alarm);
 100c69c:	e13ffe17 	ldw	r4,-8(fp)
 100c6a0:	100c5480 	call	100c548 <alt_alarm_stop>
 100c6a4:	00000d06 	br	100c6dc <alt_tick+0xf0>
      }
      else
      {
        alarm->time += next_callback;
 100c6a8:	e0bffe17 	ldw	r2,-8(fp)
 100c6ac:	10c00217 	ldw	r3,8(r2)
 100c6b0:	e0bffd17 	ldw	r2,-12(fp)
 100c6b4:	1887883a 	add	r3,r3,r2
 100c6b8:	e0bffe17 	ldw	r2,-8(fp)
 100c6bc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 100c6c0:	e0bffe17 	ldw	r2,-8(fp)
 100c6c4:	10c00217 	ldw	r3,8(r2)
 100c6c8:	d0975917 	ldw	r2,23908(gp)
 100c6cc:	1880032e 	bgeu	r3,r2,100c6dc <alt_tick+0xf0>
        {
          alarm->rollover = 1;
 100c6d0:	e0fffe17 	ldw	r3,-8(fp)
 100c6d4:	00800044 	movi	r2,1
 100c6d8:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 100c6dc:	e0bfff17 	ldw	r2,-4(fp)
 100c6e0:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 100c6e4:	d0e00e04 	addi	r3,gp,-32712
 100c6e8:	e0bffe17 	ldw	r2,-8(fp)
 100c6ec:	10ffcc1e 	bne	r2,r3,100c620 <alt_tick+0x34>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 100c6f0:	100d9b40 	call	100d9b4 <OSTimeTick>
}
 100c6f4:	e037883a 	mov	sp,fp
 100c6f8:	dfc00117 	ldw	ra,4(sp)
 100c6fc:	df000017 	ldw	fp,0(sp)
 100c700:	dec00204 	addi	sp,sp,8
 100c704:	f800283a 	ret

0100c708 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 100c708:	f811883a 	mov	r8,ra
 100c70c:	100c1d00 	call	100c1d0 <_mcount>
 100c710:	403f883a 	mov	ra,r8
 100c714:	defff704 	addi	sp,sp,-36
 100c718:	dfc00815 	stw	ra,32(sp)
 100c71c:	df000715 	stw	fp,28(sp)
 100c720:	df000704 	addi	fp,sp,28
 100c724:	e13ffb15 	stw	r4,-20(fp)
 100c728:	e17ffc15 	stw	r5,-16(fp)
 100c72c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100c730:	e0bffb17 	ldw	r2,-20(fp)
 100c734:	1004803a 	cmplt	r2,r2,zero
 100c738:	1000091e 	bne	r2,zero,100c760 <write+0x58>
 100c73c:	e13ffb17 	ldw	r4,-20(fp)
 100c740:	01400304 	movi	r5,12
 100c744:	10021e00 	call	10021e0 <__mulsi3>
 100c748:	1007883a 	mov	r3,r2
 100c74c:	008040b4 	movhi	r2,258
 100c750:	109ad904 	addi	r2,r2,27492
 100c754:	1887883a 	add	r3,r3,r2
 100c758:	e0ffff15 	stw	r3,-4(fp)
 100c75c:	00000106 	br	100c764 <write+0x5c>
 100c760:	e03fff15 	stw	zero,-4(fp)
 100c764:	e0bfff17 	ldw	r2,-4(fp)
 100c768:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 100c76c:	e0bffa17 	ldw	r2,-24(fp)
 100c770:	1005003a 	cmpeq	r2,r2,zero
 100c774:	1000241e 	bne	r2,zero,100c808 <write+0x100>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 100c778:	e0bffa17 	ldw	r2,-24(fp)
 100c77c:	10800217 	ldw	r2,8(r2)
 100c780:	108000cc 	andi	r2,r2,3
 100c784:	1005003a 	cmpeq	r2,r2,zero
 100c788:	10001a1e 	bne	r2,zero,100c7f4 <write+0xec>
 100c78c:	e0bffa17 	ldw	r2,-24(fp)
 100c790:	10800017 	ldw	r2,0(r2)
 100c794:	10800617 	ldw	r2,24(r2)
 100c798:	1005003a 	cmpeq	r2,r2,zero
 100c79c:	1000151e 	bne	r2,zero,100c7f4 <write+0xec>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 100c7a0:	e0bffa17 	ldw	r2,-24(fp)
 100c7a4:	10800017 	ldw	r2,0(r2)
 100c7a8:	10800617 	ldw	r2,24(r2)
 100c7ac:	e17ffc17 	ldw	r5,-16(fp)
 100c7b0:	e1bffd17 	ldw	r6,-12(fp)
 100c7b4:	e13ffa17 	ldw	r4,-24(fp)
 100c7b8:	103ee83a 	callr	r2
 100c7bc:	e0bff915 	stw	r2,-28(fp)
 100c7c0:	e0bff917 	ldw	r2,-28(fp)
 100c7c4:	1004403a 	cmpge	r2,r2,zero
 100c7c8:	1000071e 	bne	r2,zero,100c7e8 <write+0xe0>
      {
        ALT_ERRNO = -rval;
 100c7cc:	100c8380 	call	100c838 <alt_get_errno>
 100c7d0:	e0fff917 	ldw	r3,-28(fp)
 100c7d4:	00c7c83a 	sub	r3,zero,r3
 100c7d8:	10c00015 	stw	r3,0(r2)
        return -1;
 100c7dc:	00bfffc4 	movi	r2,-1
 100c7e0:	e0bffe15 	stw	r2,-8(fp)
 100c7e4:	00000e06 	br	100c820 <write+0x118>
      }
      return rval;
 100c7e8:	e0bff917 	ldw	r2,-28(fp)
 100c7ec:	e0bffe15 	stw	r2,-8(fp)
 100c7f0:	00000b06 	br	100c820 <write+0x118>
    }
    else
    {
      ALT_ERRNO = EACCES;
 100c7f4:	100c8380 	call	100c838 <alt_get_errno>
 100c7f8:	1007883a 	mov	r3,r2
 100c7fc:	00800344 	movi	r2,13
 100c800:	18800015 	stw	r2,0(r3)
 100c804:	00000406 	br	100c818 <write+0x110>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 100c808:	100c8380 	call	100c838 <alt_get_errno>
 100c80c:	1007883a 	mov	r3,r2
 100c810:	00801444 	movi	r2,81
 100c814:	18800015 	stw	r2,0(r3)
  }
  return -1;
 100c818:	00bfffc4 	movi	r2,-1
 100c81c:	e0bffe15 	stw	r2,-8(fp)
 100c820:	e0bffe17 	ldw	r2,-8(fp)
}
 100c824:	e037883a 	mov	sp,fp
 100c828:	dfc00117 	ldw	ra,4(sp)
 100c82c:	df000017 	ldw	fp,0(sp)
 100c830:	dec00204 	addi	sp,sp,8
 100c834:	f800283a 	ret

0100c838 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100c838:	f811883a 	mov	r8,ra
 100c83c:	100c1d00 	call	100c1d0 <_mcount>
 100c840:	403f883a 	mov	ra,r8
 100c844:	defffd04 	addi	sp,sp,-12
 100c848:	dfc00215 	stw	ra,8(sp)
 100c84c:	df000115 	stw	fp,4(sp)
 100c850:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100c854:	008040b4 	movhi	r2,258
 100c858:	109fa304 	addi	r2,r2,32396
 100c85c:	10800017 	ldw	r2,0(r2)
 100c860:	1005003a 	cmpeq	r2,r2,zero
 100c864:	1000061e 	bne	r2,zero,100c880 <alt_get_errno+0x48>
 100c868:	008040b4 	movhi	r2,258
 100c86c:	109fa304 	addi	r2,r2,32396
 100c870:	10800017 	ldw	r2,0(r2)
 100c874:	103ee83a 	callr	r2
 100c878:	e0bfff15 	stw	r2,-4(fp)
 100c87c:	00000306 	br	100c88c <alt_get_errno+0x54>
 100c880:	008040f4 	movhi	r2,259
 100c884:	1096ea04 	addi	r2,r2,23464
 100c888:	e0bfff15 	stw	r2,-4(fp)
 100c88c:	e0bfff17 	ldw	r2,-4(fp)
}
 100c890:	e037883a 	mov	sp,fp
 100c894:	dfc00117 	ldw	ra,4(sp)
 100c898:	df000017 	ldw	fp,0(sp)
 100c89c:	dec00204 	addi	sp,sp,8
 100c8a0:	f800283a 	ret

0100c8a4 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
 100c8a4:	f811883a 	mov	r8,ra
 100c8a8:	100c1d00 	call	100c1d0 <_mcount>
 100c8ac:	403f883a 	mov	ra,r8
 100c8b0:	deffdf04 	addi	sp,sp,-132
 100c8b4:	dfc02015 	stw	ra,128(sp)
 100c8b8:	df001f15 	stw	fp,124(sp)
 100c8bc:	df001f04 	addi	fp,sp,124
 100c8c0:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 100c8c4:	e17fe204 	addi	r5,fp,-120
 100c8c8:	01003fc4 	movi	r4,255
 100c8cc:	1014b8c0 	call	1014b8c <OSTaskQuery>
 100c8d0:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 100c8d4:	e0bffe83 	ldbu	r2,-6(fp)
 100c8d8:	10803fcc 	andi	r2,r2,255
 100c8dc:	1004c03a 	cmpne	r2,r2,zero
 100c8e0:	1000191e 	bne	r2,zero,100c948 <__env_lock+0xa4>
    return;

  id = tcb.OSTCBPrio;
 100c8e4:	e0bfee83 	ldbu	r2,-70(fp)
 100c8e8:	10803fcc 	andi	r2,r2,255
 100c8ec:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
 100c8f0:	d1175b17 	ldw	r4,23916(gp)
 100c8f4:	e17ffd04 	addi	r5,fp,-12
 100c8f8:	10130480 	call	1013048 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
 100c8fc:	e0bffe43 	ldbu	r2,-7(fp)
 100c900:	10803fcc 	andi	r2,r2,255
 100c904:	1005003a 	cmpeq	r2,r2,zero
 100c908:	1000071e 	bne	r2,zero,100c928 <__env_lock+0x84>
 100c90c:	d0e01017 	ldw	r3,-32704(gp)
 100c910:	e0bfe117 	ldw	r2,-124(fp)
 100c914:	10c0041e 	bne	r2,r3,100c928 <__env_lock+0x84>
  {
    /* we do; just count the recursion */

    locks++;
 100c918:	d0975a17 	ldw	r2,23912(gp)
 100c91c:	10800044 	addi	r2,r2,1
 100c920:	d0975a15 	stw	r2,23912(gp)
  id = tcb.OSTCBPrio;
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  if( semdata.OSEventGrp && id == lockid ) 
 100c924:	00000806 	br	100c948 <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
 100c928:	d1175b17 	ldw	r4,23916(gp)
 100c92c:	e1bffe84 	addi	r6,fp,-6
 100c930:	000b883a 	mov	r5,zero
 100c934:	1012b040 	call	1012b04 <OSSemPend>
    locks  = 1;
 100c938:	00800044 	movi	r2,1
 100c93c:	d0975a15 	stw	r2,23912(gp)
    lockid = id;
 100c940:	e0bfe117 	ldw	r2,-124(fp)
 100c944:	d0a01015 	stw	r2,-32704(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 100c948:	e037883a 	mov	sp,fp
 100c94c:	dfc00117 	ldw	ra,4(sp)
 100c950:	df000017 	ldw	fp,0(sp)
 100c954:	dec00204 	addi	sp,sp,8
 100c958:	f800283a 	ret

0100c95c <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
 100c95c:	f811883a 	mov	r8,ra
 100c960:	100c1d00 	call	100c1d0 <_mcount>
 100c964:	403f883a 	mov	ra,r8
 100c968:	defffd04 	addi	sp,sp,-12
 100c96c:	dfc00215 	stw	ra,8(sp)
 100c970:	df000115 	stw	fp,4(sp)
 100c974:	df000104 	addi	fp,sp,4
 100c978:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
 100c97c:	d0975a17 	ldw	r2,23912(gp)
 100c980:	1005003a 	cmpeq	r2,r2,zero
 100c984:	10000a1e 	bne	r2,zero,100c9b0 <__env_unlock+0x54>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
 100c988:	d0975a17 	ldw	r2,23912(gp)
 100c98c:	10bfffc4 	addi	r2,r2,-1
 100c990:	d0975a15 	stw	r2,23912(gp)
 100c994:	d0975a17 	ldw	r2,23912(gp)
 100c998:	1004c03a 	cmpne	r2,r2,zero
 100c99c:	1000041e 	bne	r2,zero,100c9b0 <__env_unlock+0x54>
  {
    lockid = -1;
 100c9a0:	00bfffc4 	movi	r2,-1
 100c9a4:	d0a01015 	stw	r2,-32704(gp)
    OSSemPost( alt_envsem );
 100c9a8:	d1175b17 	ldw	r4,23916(gp)
 100c9ac:	1012f140 	call	1012f14 <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 100c9b0:	e037883a 	mov	sp,fp
 100c9b4:	dfc00117 	ldw	ra,4(sp)
 100c9b8:	df000017 	ldw	fp,0(sp)
 100c9bc:	dec00204 	addi	sp,sp,8
 100c9c0:	f800283a 	ret

0100c9c4 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
 100c9c4:	f811883a 	mov	r8,ra
 100c9c8:	100c1d00 	call	100c1d0 <_mcount>
 100c9cc:	403f883a 	mov	ra,r8
 100c9d0:	deffdb04 	addi	sp,sp,-148
 100c9d4:	dfc02415 	stw	ra,144(sp)
 100c9d8:	df002315 	stw	fp,140(sp)
 100c9dc:	df002304 	addi	fp,sp,140
 100c9e0:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 100c9e4:	e03fe015 	stw	zero,-128(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
 100c9e8:	008040f4 	movhi	r2,259
 100c9ec:	1096f804 	addi	r2,r2,23520
 100c9f0:	10800003 	ldbu	r2,0(r2)
 100c9f4:	10803fcc 	andi	r2,r2,255
 100c9f8:	10800058 	cmpnei	r2,r2,1
 100c9fc:	1000311e 	bne	r2,zero,100cac4 <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 100ca00:	e17fe204 	addi	r5,fp,-120
 100ca04:	01003fc4 	movi	r4,255
 100ca08:	1014b8c0 	call	1014b8c <OSTaskQuery>
 100ca0c:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 100ca10:	e0bffe83 	ldbu	r2,-6(fp)
 100ca14:	10803fcc 	andi	r2,r2,255
 100ca18:	1004c03a 	cmpne	r2,r2,zero
 100ca1c:	1000291e 	bne	r2,zero,100cac4 <__malloc_lock+0x100>
    return;

  id = tcb.OSTCBPrio;
 100ca20:	e0bfee83 	ldbu	r2,-70(fp)
 100ca24:	10803fcc 	andi	r2,r2,255
 100ca28:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
 100ca2c:	d1175d17 	ldw	r4,23924(gp)
 100ca30:	e17ffd04 	addi	r5,fp,-12
 100ca34:	10130480 	call	1013048 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100ca38:	0005303a 	rdctl	r2,status
 100ca3c:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100ca40:	e0ffdf17 	ldw	r3,-132(fp)
 100ca44:	00bfff84 	movi	r2,-2
 100ca48:	1884703a 	and	r2,r3,r2
 100ca4c:	1001703a 	wrctl	status,r2
  
  return context;
 100ca50:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
 100ca54:	e0bfe015 	stw	r2,-128(fp)

  if( !semdata.OSCnt && id == lockid ) 
 100ca58:	e0bffd0b 	ldhu	r2,-12(fp)
 100ca5c:	10bfffcc 	andi	r2,r2,65535
 100ca60:	1004c03a 	cmpne	r2,r2,zero
 100ca64:	10000b1e 	bne	r2,zero,100ca94 <__malloc_lock+0xd0>
 100ca68:	d0e01117 	ldw	r3,-32700(gp)
 100ca6c:	e0bfe117 	ldw	r2,-124(fp)
 100ca70:	10c0081e 	bne	r2,r3,100ca94 <__malloc_lock+0xd0>
  {
    /* we do; just count the recursion */
    locks++;
 100ca74:	d0975c17 	ldw	r2,23920(gp)
 100ca78:	10800044 	addi	r2,r2,1
 100ca7c:	d0975c15 	stw	r2,23920(gp)
 100ca80:	e0bfe017 	ldw	r2,-128(fp)
 100ca84:	e0bfde15 	stw	r2,-136(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100ca88:	e0bfde17 	ldw	r2,-136(fp)
 100ca8c:	1001703a 	wrctl	status,r2

  OSSemQuery( alt_heapsem, &semdata );
  
  OS_ENTER_CRITICAL();

  if( !semdata.OSCnt && id == lockid ) 
 100ca90:	00000c06 	br	100cac4 <__malloc_lock+0x100>
 100ca94:	e0bfe017 	ldw	r2,-128(fp)
 100ca98:	e0bfdd15 	stw	r2,-140(fp)
 100ca9c:	e0bfdd17 	ldw	r2,-140(fp)
 100caa0:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
 100caa4:	d1175d17 	ldw	r4,23924(gp)
 100caa8:	e1bffe84 	addi	r6,fp,-6
 100caac:	000b883a 	mov	r5,zero
 100cab0:	1012b040 	call	1012b04 <OSSemPend>
    locks  = 1;
 100cab4:	00800044 	movi	r2,1
 100cab8:	d0975c15 	stw	r2,23920(gp)
    lockid = id;
 100cabc:	e0bfe117 	ldw	r2,-124(fp)
 100cac0:	d0a01115 	stw	r2,-32700(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 100cac4:	e037883a 	mov	sp,fp
 100cac8:	dfc00117 	ldw	ra,4(sp)
 100cacc:	df000017 	ldw	fp,0(sp)
 100cad0:	dec00204 	addi	sp,sp,8
 100cad4:	f800283a 	ret

0100cad8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 100cad8:	f811883a 	mov	r8,ra
 100cadc:	100c1d00 	call	100c1d0 <_mcount>
 100cae0:	403f883a 	mov	ra,r8
 100cae4:	defff804 	addi	sp,sp,-32
 100cae8:	dfc00715 	stw	ra,28(sp)
 100caec:	df000615 	stw	fp,24(sp)
 100caf0:	df000604 	addi	fp,sp,24
 100caf4:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 100caf8:	e03ffe15 	stw	zero,-8(fp)
#endif 

  if (OSRunning != OS_TRUE)
 100cafc:	008040f4 	movhi	r2,259
 100cb00:	1096f804 	addi	r2,r2,23520
 100cb04:	10800003 	ldbu	r2,0(r2)
 100cb08:	10803fcc 	andi	r2,r2,255
 100cb0c:	10800058 	cmpnei	r2,r2,1
 100cb10:	1000231e 	bne	r2,zero,100cba0 <__malloc_unlock+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100cb14:	0005303a 	rdctl	r2,status
 100cb18:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100cb1c:	e0fffd17 	ldw	r3,-12(fp)
 100cb20:	00bfff84 	movi	r2,-2
 100cb24:	1884703a 	and	r2,r3,r2
 100cb28:	1001703a 	wrctl	status,r2
  
  return context;
 100cb2c:	e0bffd17 	ldw	r2,-12(fp)
      return;

  OS_ENTER_CRITICAL();
 100cb30:	e0bffe15 	stw	r2,-8(fp)
  if (locks == 0)
 100cb34:	d0975c17 	ldw	r2,23920(gp)
 100cb38:	1004c03a 	cmpne	r2,r2,zero
 100cb3c:	1000051e 	bne	r2,zero,100cb54 <__malloc_unlock+0x7c>
 100cb40:	e0bffe17 	ldw	r2,-8(fp)
 100cb44:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100cb48:	e0bffc17 	ldw	r2,-16(fp)
 100cb4c:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
 100cb50:	00001306 	br	100cba0 <__malloc_unlock+0xc8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
 100cb54:	d0975c17 	ldw	r2,23920(gp)
 100cb58:	10bfffc4 	addi	r2,r2,-1
 100cb5c:	d0975c15 	stw	r2,23920(gp)
 100cb60:	d0975c17 	ldw	r2,23920(gp)
 100cb64:	1004c03a 	cmpne	r2,r2,zero
 100cb68:	1000091e 	bne	r2,zero,100cb90 <__malloc_unlock+0xb8>
  {
    lockid = -1;
 100cb6c:	00bfffc4 	movi	r2,-1
 100cb70:	d0a01115 	stw	r2,-32700(gp)
 100cb74:	e0bffe17 	ldw	r2,-8(fp)
 100cb78:	e0bffb15 	stw	r2,-20(fp)
 100cb7c:	e0bffb17 	ldw	r2,-20(fp)
 100cb80:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
 100cb84:	d1175d17 	ldw	r4,23924(gp)
 100cb88:	1012f140 	call	1012f14 <OSSemPost>
 100cb8c:	00000406 	br	100cba0 <__malloc_unlock+0xc8>
 100cb90:	e0bffe17 	ldw	r2,-8(fp)
 100cb94:	e0bffa15 	stw	r2,-24(fp)
 100cb98:	e0bffa17 	ldw	r2,-24(fp)
 100cb9c:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 100cba0:	e037883a 	mov	sp,fp
 100cba4:	dfc00117 	ldw	ra,4(sp)
 100cba8:	df000017 	ldw	fp,0(sp)
 100cbac:	dec00204 	addi	sp,sp,8
 100cbb0:	f800283a 	ret

0100cbb4 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 100cbb4:	f811883a 	mov	r8,ra
 100cbb8:	100c1d00 	call	100c1d0 <_mcount>
 100cbbc:	403f883a 	mov	ra,r8
 100cbc0:	defff604 	addi	sp,sp,-40
 100cbc4:	dfc00915 	stw	ra,36(sp)
 100cbc8:	df000815 	stw	fp,32(sp)
 100cbcc:	df000804 	addi	fp,sp,32
 100cbd0:	e13ffc15 	stw	r4,-16(fp)
 100cbd4:	e17ffd15 	stw	r5,-12(fp)
 100cbd8:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 100cbdc:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 100cbe0:	e0bffe17 	ldw	r2,-8(fp)
 100cbe4:	1004c03a 	cmpne	r2,r2,zero
 100cbe8:	1000021e 	bne	r2,zero,100cbf4 <OSEventNameGet+0x40>
        return (0);
 100cbec:	e03fff15 	stw	zero,-4(fp)
 100cbf0:	00003906 	br	100ccd8 <OSEventNameGet+0x124>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 100cbf4:	e0bffc17 	ldw	r2,-16(fp)
 100cbf8:	1004c03a 	cmpne	r2,r2,zero
 100cbfc:	1000051e 	bne	r2,zero,100cc14 <OSEventNameGet+0x60>
        *perr = OS_ERR_PEVENT_NULL;
 100cc00:	e0fffe17 	ldw	r3,-8(fp)
 100cc04:	00800104 	movi	r2,4
 100cc08:	18800005 	stb	r2,0(r3)
        return (0);
 100cc0c:	e03fff15 	stw	zero,-4(fp)
 100cc10:	00003106 	br	100ccd8 <OSEventNameGet+0x124>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 100cc14:	e0bffd17 	ldw	r2,-12(fp)
 100cc18:	1004c03a 	cmpne	r2,r2,zero
 100cc1c:	1000051e 	bne	r2,zero,100cc34 <OSEventNameGet+0x80>
        *perr = OS_ERR_PNAME_NULL;
 100cc20:	e0fffe17 	ldw	r3,-8(fp)
 100cc24:	00800304 	movi	r2,12
 100cc28:	18800005 	stb	r2,0(r3)
        return (0);
 100cc2c:	e03fff15 	stw	zero,-4(fp)
 100cc30:	00002906 	br	100ccd8 <OSEventNameGet+0x124>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 100cc34:	d0977003 	ldbu	r2,24000(gp)
 100cc38:	10803fcc 	andi	r2,r2,255
 100cc3c:	1005003a 	cmpeq	r2,r2,zero
 100cc40:	1000051e 	bne	r2,zero,100cc58 <OSEventNameGet+0xa4>
        *perr  = OS_ERR_NAME_GET_ISR;
 100cc44:	e0fffe17 	ldw	r3,-8(fp)
 100cc48:	00800444 	movi	r2,17
 100cc4c:	18800005 	stb	r2,0(r3)
        return (0);
 100cc50:	e03fff15 	stw	zero,-4(fp)
 100cc54:	00002006 	br	100ccd8 <OSEventNameGet+0x124>
    }
    switch (pevent->OSEventType) {
 100cc58:	e0bffc17 	ldw	r2,-16(fp)
 100cc5c:	10800003 	ldbu	r2,0(r2)
 100cc60:	10803fcc 	andi	r2,r2,255
 100cc64:	10bfffc4 	addi	r2,r2,-1
 100cc68:	10800128 	cmpgeui	r2,r2,4
 100cc6c:	1000161e 	bne	r2,zero,100ccc8 <OSEventNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100cc70:	0005303a 	rdctl	r2,status
 100cc74:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100cc78:	e0fff917 	ldw	r3,-28(fp)
 100cc7c:	00bfff84 	movi	r2,-2
 100cc80:	1884703a 	and	r2,r3,r2
 100cc84:	1001703a 	wrctl	status,r2
  
  return context;
 100cc88:	e0bff917 	ldw	r2,-28(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
 100cc8c:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
 100cc90:	e0bffc17 	ldw	r2,-16(fp)
 100cc94:	11400384 	addi	r5,r2,14
 100cc98:	e13ffd17 	ldw	r4,-12(fp)
 100cc9c:	100e8980 	call	100e898 <OS_StrCopy>
 100cca0:	e0bffb05 	stb	r2,-20(fp)
 100cca4:	e0bffa17 	ldw	r2,-24(fp)
 100cca8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100ccac:	e0bff817 	ldw	r2,-32(fp)
 100ccb0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 100ccb4:	e0bffe17 	ldw	r2,-8(fp)
 100ccb8:	10000005 	stb	zero,0(r2)
    return (len);
 100ccbc:	e0bffb03 	ldbu	r2,-20(fp)
 100ccc0:	e0bfff15 	stw	r2,-4(fp)
 100ccc4:	00000406 	br	100ccd8 <OSEventNameGet+0x124>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 100ccc8:	e0fffe17 	ldw	r3,-8(fp)
 100cccc:	00800044 	movi	r2,1
 100ccd0:	18800005 	stb	r2,0(r3)
             return (0);
 100ccd4:	e03fff15 	stw	zero,-4(fp)
 100ccd8:	e0bfff17 	ldw	r2,-4(fp)
    OS_ENTER_CRITICAL();
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
}
 100ccdc:	e037883a 	mov	sp,fp
 100cce0:	dfc00117 	ldw	ra,4(sp)
 100cce4:	df000017 	ldw	fp,0(sp)
 100cce8:	dec00204 	addi	sp,sp,8
 100ccec:	f800283a 	ret

0100ccf0 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 100ccf0:	f811883a 	mov	r8,ra
 100ccf4:	100c1d00 	call	100c1d0 <_mcount>
 100ccf8:	403f883a 	mov	ra,r8
 100ccfc:	defff604 	addi	sp,sp,-40
 100cd00:	dfc00915 	stw	ra,36(sp)
 100cd04:	df000815 	stw	fp,32(sp)
 100cd08:	df000804 	addi	fp,sp,32
 100cd0c:	e13ffd15 	stw	r4,-12(fp)
 100cd10:	e17ffe15 	stw	r5,-8(fp)
 100cd14:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 100cd18:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 100cd1c:	e0bfff17 	ldw	r2,-4(fp)
 100cd20:	1005003a 	cmpeq	r2,r2,zero
 100cd24:	1000411e 	bne	r2,zero,100ce2c <OSEventNameSet+0x13c>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 100cd28:	e0bffd17 	ldw	r2,-12(fp)
 100cd2c:	1004c03a 	cmpne	r2,r2,zero
 100cd30:	1000041e 	bne	r2,zero,100cd44 <OSEventNameSet+0x54>
        *perr = OS_ERR_PEVENT_NULL;
 100cd34:	e0ffff17 	ldw	r3,-4(fp)
 100cd38:	00800104 	movi	r2,4
 100cd3c:	18800005 	stb	r2,0(r3)
        return;
 100cd40:	00003a06 	br	100ce2c <OSEventNameSet+0x13c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 100cd44:	e0bffe17 	ldw	r2,-8(fp)
 100cd48:	1004c03a 	cmpne	r2,r2,zero
 100cd4c:	1000041e 	bne	r2,zero,100cd60 <OSEventNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;
 100cd50:	e0ffff17 	ldw	r3,-4(fp)
 100cd54:	00800304 	movi	r2,12
 100cd58:	18800005 	stb	r2,0(r3)
        return;
 100cd5c:	00003306 	br	100ce2c <OSEventNameSet+0x13c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 100cd60:	d0977003 	ldbu	r2,24000(gp)
 100cd64:	10803fcc 	andi	r2,r2,255
 100cd68:	1005003a 	cmpeq	r2,r2,zero
 100cd6c:	1000041e 	bne	r2,zero,100cd80 <OSEventNameSet+0x90>
        *perr = OS_ERR_NAME_SET_ISR;
 100cd70:	e0ffff17 	ldw	r3,-4(fp)
 100cd74:	00800484 	movi	r2,18
 100cd78:	18800005 	stb	r2,0(r3)
        return;
 100cd7c:	00002b06 	br	100ce2c <OSEventNameSet+0x13c>
    }
    switch (pevent->OSEventType) {
 100cd80:	e0bffd17 	ldw	r2,-12(fp)
 100cd84:	10800003 	ldbu	r2,0(r2)
 100cd88:	10803fcc 	andi	r2,r2,255
 100cd8c:	10bfffc4 	addi	r2,r2,-1
 100cd90:	10800128 	cmpgeui	r2,r2,4
 100cd94:	10000f1e 	bne	r2,zero,100cdd4 <OSEventNameSet+0xe4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100cd98:	0005303a 	rdctl	r2,status
 100cd9c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100cda0:	e0fffa17 	ldw	r3,-24(fp)
 100cda4:	00bfff84 	movi	r2,-2
 100cda8:	1884703a 	and	r2,r3,r2
 100cdac:	1001703a 	wrctl	status,r2
  
  return context;
 100cdb0:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
 100cdb4:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
 100cdb8:	e13ffe17 	ldw	r4,-8(fp)
 100cdbc:	100e9240 	call	100e924 <OS_StrLen>
 100cdc0:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
 100cdc4:	e0bffc03 	ldbu	r2,-16(fp)
 100cdc8:	10800828 	cmpgeui	r2,r2,32
 100cdcc:	1000051e 	bne	r2,zero,100cde4 <OSEventNameSet+0xf4>
 100cdd0:	00000c06 	br	100ce04 <OSEventNameSet+0x114>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 100cdd4:	e0ffff17 	ldw	r3,-4(fp)
 100cdd8:	00800044 	movi	r2,1
 100cddc:	18800005 	stb	r2,0(r3)
             return;
 100cde0:	00001206 	br	100ce2c <OSEventNameSet+0x13c>
 100cde4:	e0bffb17 	ldw	r2,-20(fp)
 100cde8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100cdec:	e0bff917 	ldw	r2,-28(fp)
 100cdf0:	1001703a 	wrctl	status,r2
    }
    OS_ENTER_CRITICAL();
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
 100cdf4:	e0ffff17 	ldw	r3,-4(fp)
 100cdf8:	008002c4 	movi	r2,11
 100cdfc:	18800005 	stb	r2,0(r3)
        return;
 100ce00:	00000a06 	br	100ce2c <OSEventNameSet+0x13c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
 100ce04:	e0bffd17 	ldw	r2,-12(fp)
 100ce08:	11000384 	addi	r4,r2,14
 100ce0c:	e17ffe17 	ldw	r5,-8(fp)
 100ce10:	100e8980 	call	100e898 <OS_StrCopy>
 100ce14:	e0bffb17 	ldw	r2,-20(fp)
 100ce18:	e0bff815 	stw	r2,-32(fp)
 100ce1c:	e0bff817 	ldw	r2,-32(fp)
 100ce20:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 100ce24:	e0bfff17 	ldw	r2,-4(fp)
 100ce28:	10000005 	stb	zero,0(r2)
}
 100ce2c:	e037883a 	mov	sp,fp
 100ce30:	dfc00117 	ldw	ra,4(sp)
 100ce34:	df000017 	ldw	fp,0(sp)
 100ce38:	dec00204 	addi	sp,sp,8
 100ce3c:	f800283a 	ret

0100ce40 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
 100ce40:	f811883a 	mov	r8,ra
 100ce44:	100c1d00 	call	100c1d0 <_mcount>
 100ce48:	403f883a 	mov	ra,r8
 100ce4c:	deffe704 	addi	sp,sp,-100
 100ce50:	dfc01815 	stw	ra,96(sp)
 100ce54:	df001715 	stw	fp,92(sp)
 100ce58:	df001704 	addi	fp,sp,92
 100ce5c:	e13ff615 	stw	r4,-40(fp)
 100ce60:	e17ff715 	stw	r5,-36(fp)
 100ce64:	e1bff815 	stw	r6,-32(fp)
 100ce68:	e1fff90d 	sth	r7,-28(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
 100ce6c:	e03ff015 	stw	zero,-64(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
 100ce70:	e0800217 	ldw	r2,8(fp)
 100ce74:	1004c03a 	cmpne	r2,r2,zero
 100ce78:	1000021e 	bne	r2,zero,100ce84 <OSEventPendMulti+0x44>
        return (0);
 100ce7c:	e03fff15 	stw	zero,-4(fp)
 100ce80:	00019906 	br	100d4e8 <OSEventPendMulti+0x6a8>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
 100ce84:	e0bff617 	ldw	r2,-40(fp)
 100ce88:	1004c03a 	cmpne	r2,r2,zero
 100ce8c:	1000051e 	bne	r2,zero,100cea4 <OSEventPendMulti+0x64>
       *perr =  OS_ERR_PEVENT_NULL;
 100ce90:	e0c00217 	ldw	r3,8(fp)
 100ce94:	00800104 	movi	r2,4
 100ce98:	18800005 	stb	r2,0(r3)
        return (0);
 100ce9c:	e03fff15 	stw	zero,-4(fp)
 100cea0:	00019106 	br	100d4e8 <OSEventPendMulti+0x6a8>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
 100cea4:	e0bff717 	ldw	r2,-36(fp)
 100cea8:	1004c03a 	cmpne	r2,r2,zero
 100ceac:	1000051e 	bne	r2,zero,100cec4 <OSEventPendMulti+0x84>
       *perr =  OS_ERR_PEVENT_NULL;
 100ceb0:	e0c00217 	ldw	r3,8(fp)
 100ceb4:	00800104 	movi	r2,4
 100ceb8:	18800005 	stb	r2,0(r3)
        return (0);
 100cebc:	e03fff15 	stw	zero,-4(fp)
 100cec0:	00018906 	br	100d4e8 <OSEventPendMulti+0x6a8>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
 100cec4:	e0bff817 	ldw	r2,-32(fp)
 100cec8:	1004c03a 	cmpne	r2,r2,zero
 100cecc:	1000051e 	bne	r2,zero,100cee4 <OSEventPendMulti+0xa4>
       *perr =  OS_ERR_PEVENT_NULL;
 100ced0:	e0c00217 	ldw	r3,8(fp)
 100ced4:	00800104 	movi	r2,4
 100ced8:	18800005 	stb	r2,0(r3)
        return (0);
 100cedc:	e03fff15 	stw	zero,-4(fp)
 100cee0:	00018106 	br	100d4e8 <OSEventPendMulti+0x6a8>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
 100cee4:	e0bff717 	ldw	r2,-36(fp)
 100cee8:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
 100ceec:	e0bff617 	ldw	r2,-40(fp)
 100cef0:	e0bff515 	stw	r2,-44(fp)
    pevent      = *pevents;
 100cef4:	e0bff517 	ldw	r2,-44(fp)
 100cef8:	10800017 	ldw	r2,0(r2)
 100cefc:	e0bff415 	stw	r2,-48(fp)
    while  (pevent != (OS_EVENT *)0) {
 100cf00:	00001806 	br	100cf64 <OSEventPendMulti+0x124>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
 100cf04:	e0bff417 	ldw	r2,-48(fp)
 100cf08:	10800003 	ldbu	r2,0(r2)
 100cf0c:	10803fcc 	andi	r2,r2,255
 100cf10:	e0bffe15 	stw	r2,-8(fp)
 100cf14:	e0fffe17 	ldw	r3,-8(fp)
 100cf18:	188000a0 	cmpeqi	r2,r3,2
 100cf1c:	10000b1e 	bne	r2,zero,100cf4c <OSEventPendMulti+0x10c>
 100cf20:	e0fffe17 	ldw	r3,-8(fp)
 100cf24:	188000e0 	cmpeqi	r2,r3,3
 100cf28:	1000081e 	bne	r2,zero,100cf4c <OSEventPendMulti+0x10c>
 100cf2c:	e0fffe17 	ldw	r3,-8(fp)
 100cf30:	18800060 	cmpeqi	r2,r3,1
 100cf34:	1000051e 	bne	r2,zero,100cf4c <OSEventPendMulti+0x10c>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
 100cf38:	e0c00217 	ldw	r3,8(fp)
 100cf3c:	00800044 	movi	r2,1
 100cf40:	18800005 	stb	r2,0(r3)
                 return (0);
 100cf44:	e03fff15 	stw	zero,-4(fp)
 100cf48:	00016706 	br	100d4e8 <OSEventPendMulti+0x6a8>
        }
        pevents++;
 100cf4c:	e0bff517 	ldw	r2,-44(fp)
 100cf50:	10800104 	addi	r2,r2,4
 100cf54:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
 100cf58:	e0bff517 	ldw	r2,-44(fp)
 100cf5c:	10800017 	ldw	r2,0(r2)
 100cf60:	e0bff415 	stw	r2,-48(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
 100cf64:	e0bff417 	ldw	r2,-48(fp)
 100cf68:	1004c03a 	cmpne	r2,r2,zero
 100cf6c:	103fe51e 	bne	r2,zero,100cf04 <OSEventPendMulti+0xc4>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
 100cf70:	d0977003 	ldbu	r2,24000(gp)
 100cf74:	10803fcc 	andi	r2,r2,255
 100cf78:	1005003a 	cmpeq	r2,r2,zero
 100cf7c:	1000051e 	bne	r2,zero,100cf94 <OSEventPendMulti+0x154>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
 100cf80:	e0c00217 	ldw	r3,8(fp)
 100cf84:	00800084 	movi	r2,2
 100cf88:	18800005 	stb	r2,0(r3)
        return (0);
 100cf8c:	e03fff15 	stw	zero,-4(fp)
 100cf90:	00015506 	br	100d4e8 <OSEventPendMulti+0x6a8>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
 100cf94:	d0975f03 	ldbu	r2,23932(gp)
 100cf98:	10803fcc 	andi	r2,r2,255
 100cf9c:	1005003a 	cmpeq	r2,r2,zero
 100cfa0:	1000051e 	bne	r2,zero,100cfb8 <OSEventPendMulti+0x178>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
 100cfa4:	e0c00217 	ldw	r3,8(fp)
 100cfa8:	00800344 	movi	r2,13
 100cfac:	18800005 	stb	r2,0(r3)
        return (0);
 100cfb0:	e03fff15 	stw	zero,-4(fp)
 100cfb4:	00014c06 	br	100d4e8 <OSEventPendMulti+0x6a8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100cfb8:	0005303a 	rdctl	r2,status
 100cfbc:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100cfc0:	e0ffef17 	ldw	r3,-68(fp)
 100cfc4:	00bfff84 	movi	r2,-2
 100cfc8:	1884703a 	and	r2,r3,r2
 100cfcc:	1001703a 	wrctl	status,r2
  
  return context;
 100cfd0:	e0bfef17 	ldw	r2,-68(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
 100cfd4:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
 100cfd8:	e03ff205 	stb	zero,-56(fp)
    events_rdy_nbr =  0;
 100cfdc:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
 100cfe0:	e03ff105 	stb	zero,-60(fp)
    pevents        =  pevents_pend;
 100cfe4:	e0bff617 	ldw	r2,-40(fp)
 100cfe8:	e0bff515 	stw	r2,-44(fp)
    pevent         = *pevents;
 100cfec:	e0bff517 	ldw	r2,-44(fp)
 100cff0:	10800017 	ldw	r2,0(r2)
 100cff4:	e0bff415 	stw	r2,-48(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 100cff8:	00008f06 	br	100d238 <OSEventPendMulti+0x3f8>
        switch (pevent->OSEventType) {
 100cffc:	e0bff417 	ldw	r2,-48(fp)
 100d000:	10800003 	ldbu	r2,0(r2)
 100d004:	10803fcc 	andi	r2,r2,255
 100d008:	e0bffd15 	stw	r2,-12(fp)
 100d00c:	e0fffd17 	ldw	r3,-12(fp)
 100d010:	188000a0 	cmpeqi	r2,r3,2
 100d014:	1000441e 	bne	r2,zero,100d128 <OSEventPendMulti+0x2e8>
 100d018:	e0fffd17 	ldw	r3,-12(fp)
 100d01c:	188000e0 	cmpeqi	r2,r3,3
 100d020:	1000041e 	bne	r2,zero,100d034 <OSEventPendMulti+0x1f4>
 100d024:	e0fffd17 	ldw	r3,-12(fp)
 100d028:	18800060 	cmpeqi	r2,r3,1
 100d02c:	1000211e 	bne	r2,zero,100d0b4 <OSEventPendMulti+0x274>
 100d030:	00006f06 	br	100d1f0 <OSEventPendMulti+0x3b0>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
 100d034:	e0bff417 	ldw	r2,-48(fp)
 100d038:	1080020b 	ldhu	r2,8(r2)
 100d03c:	10bfffcc 	andi	r2,r2,65535
 100d040:	1005003a 	cmpeq	r2,r2,zero
 100d044:	1000171e 	bne	r2,zero,100d0a4 <OSEventPendMulti+0x264>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
 100d048:	e0bff417 	ldw	r2,-48(fp)
 100d04c:	1080020b 	ldhu	r2,8(r2)
 100d050:	10bfffc4 	addi	r2,r2,-1
 100d054:	1007883a 	mov	r3,r2
 100d058:	e0bff417 	ldw	r2,-48(fp)
 100d05c:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
 100d060:	e0fff717 	ldw	r3,-36(fp)
 100d064:	e0bff417 	ldw	r2,-48(fp)
 100d068:	18800015 	stw	r2,0(r3)
 100d06c:	e0bff717 	ldw	r2,-36(fp)
 100d070:	10800104 	addi	r2,r2,4
 100d074:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   =  OS_TRUE;
 100d078:	00800044 	movi	r2,1
 100d07c:	e0bff205 	stb	r2,-56(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
 100d080:	e0bff817 	ldw	r2,-32(fp)
 100d084:	10000015 	stw	zero,0(r2)
 100d088:	e0bff817 	ldw	r2,-32(fp)
 100d08c:	10800104 	addi	r2,r2,4
 100d090:	e0bff815 	stw	r2,-32(fp)
                      events_rdy_nbr++;
 100d094:	e0bff18b 	ldhu	r2,-58(fp)
 100d098:	10800044 	addi	r2,r2,1
 100d09c:	e0bff18d 	sth	r2,-58(fp)
 100d0a0:	00005f06 	br	100d220 <OSEventPendMulti+0x3e0>

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
 100d0a4:	e0bff103 	ldbu	r2,-60(fp)
 100d0a8:	10800054 	ori	r2,r2,1
 100d0ac:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
 100d0b0:	00005b06 	br	100d220 <OSEventPendMulti+0x3e0>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
 100d0b4:	e0bff417 	ldw	r2,-48(fp)
 100d0b8:	10800117 	ldw	r2,4(r2)
 100d0bc:	1005003a 	cmpeq	r2,r2,zero
 100d0c0:	1000151e 	bne	r2,zero,100d118 <OSEventPendMulti+0x2d8>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
 100d0c4:	e0bff417 	ldw	r2,-48(fp)
 100d0c8:	10c00117 	ldw	r3,4(r2)
 100d0cc:	e0bff817 	ldw	r2,-32(fp)
 100d0d0:	10c00015 	stw	r3,0(r2)
 100d0d4:	e0bff817 	ldw	r2,-32(fp)
 100d0d8:	10800104 	addi	r2,r2,4
 100d0dc:	e0bff815 	stw	r2,-32(fp)
                     pevent->OSEventPtr  = (void *)0;
 100d0e0:	e0bff417 	ldw	r2,-48(fp)
 100d0e4:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
 100d0e8:	e0fff717 	ldw	r3,-36(fp)
 100d0ec:	e0bff417 	ldw	r2,-48(fp)
 100d0f0:	18800015 	stw	r2,0(r3)
 100d0f4:	e0bff717 	ldw	r2,-36(fp)
 100d0f8:	10800104 	addi	r2,r2,4
 100d0fc:	e0bff715 	stw	r2,-36(fp)
                      events_rdy         =  OS_TRUE;
 100d100:	00800044 	movi	r2,1
 100d104:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
 100d108:	e0bff18b 	ldhu	r2,-58(fp)
 100d10c:	10800044 	addi	r2,r2,1
 100d110:	e0bff18d 	sth	r2,-58(fp)
 100d114:	00004206 	br	100d220 <OSEventPendMulti+0x3e0>

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
 100d118:	e0bff103 	ldbu	r2,-60(fp)
 100d11c:	10800094 	ori	r2,r2,2
 100d120:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
 100d124:	00003e06 	br	100d220 <OSEventPendMulti+0x3e0>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
 100d128:	e0bff417 	ldw	r2,-48(fp)
 100d12c:	10800117 	ldw	r2,4(r2)
 100d130:	e0bff315 	stw	r2,-52(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
 100d134:	e0bff317 	ldw	r2,-52(fp)
 100d138:	1080058b 	ldhu	r2,22(r2)
 100d13c:	10bfffcc 	andi	r2,r2,65535
 100d140:	1005003a 	cmpeq	r2,r2,zero
 100d144:	1000261e 	bne	r2,zero,100d1e0 <OSEventPendMulti+0x3a0>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
 100d148:	e0bff317 	ldw	r2,-52(fp)
 100d14c:	11000417 	ldw	r4,16(r2)
 100d150:	20c00017 	ldw	r3,0(r4)
 100d154:	e0bff817 	ldw	r2,-32(fp)
 100d158:	10c00015 	stw	r3,0(r2)
 100d15c:	e0bff817 	ldw	r2,-32(fp)
 100d160:	10800104 	addi	r2,r2,4
 100d164:	e0bff815 	stw	r2,-32(fp)
 100d168:	20c00104 	addi	r3,r4,4
 100d16c:	e0bff317 	ldw	r2,-52(fp)
 100d170:	10c00415 	stw	r3,16(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
 100d174:	e0bff317 	ldw	r2,-52(fp)
 100d178:	10c00417 	ldw	r3,16(r2)
 100d17c:	e0bff317 	ldw	r2,-52(fp)
 100d180:	10800217 	ldw	r2,8(r2)
 100d184:	1880041e 	bne	r3,r2,100d198 <OSEventPendMulti+0x358>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
 100d188:	e0bff317 	ldw	r2,-52(fp)
 100d18c:	10c00117 	ldw	r3,4(r2)
 100d190:	e0bff317 	ldw	r2,-52(fp)
 100d194:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
 100d198:	e0bff317 	ldw	r2,-52(fp)
 100d19c:	1080058b 	ldhu	r2,22(r2)
 100d1a0:	10bfffc4 	addi	r2,r2,-1
 100d1a4:	1007883a 	mov	r3,r2
 100d1a8:	e0bff317 	ldw	r2,-52(fp)
 100d1ac:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
 100d1b0:	e0fff717 	ldw	r3,-36(fp)
 100d1b4:	e0bff417 	ldw	r2,-48(fp)
 100d1b8:	18800015 	stw	r2,0(r3)
 100d1bc:	e0bff717 	ldw	r2,-36(fp)
 100d1c0:	10800104 	addi	r2,r2,4
 100d1c4:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   = OS_TRUE;
 100d1c8:	00800044 	movi	r2,1
 100d1cc:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
 100d1d0:	e0bff18b 	ldhu	r2,-58(fp)
 100d1d4:	10800044 	addi	r2,r2,1
 100d1d8:	e0bff18d 	sth	r2,-58(fp)
 100d1dc:	00001006 	br	100d220 <OSEventPendMulti+0x3e0>

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
 100d1e0:	e0bff103 	ldbu	r2,-60(fp)
 100d1e4:	10800114 	ori	r2,r2,4
 100d1e8:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
 100d1ec:	00000c06 	br	100d220 <OSEventPendMulti+0x3e0>
 100d1f0:	e0bff017 	ldw	r2,-64(fp)
 100d1f4:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100d1f8:	e0bfee17 	ldw	r2,-72(fp)
 100d1fc:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
 100d200:	e0bff717 	ldw	r2,-36(fp)
 100d204:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
 100d208:	e0c00217 	ldw	r3,8(fp)
 100d20c:	00800044 	movi	r2,1
 100d210:	18800005 	stb	r2,0(r3)
                 return (events_rdy_nbr);
 100d214:	e0bff18b 	ldhu	r2,-58(fp)
 100d218:	e0bfff15 	stw	r2,-4(fp)
 100d21c:	0000b206 	br	100d4e8 <OSEventPendMulti+0x6a8>
        }
        pevents++;
 100d220:	e0bff517 	ldw	r2,-44(fp)
 100d224:	10800104 	addi	r2,r2,4
 100d228:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
 100d22c:	e0bff517 	ldw	r2,-44(fp)
 100d230:	10800017 	ldw	r2,0(r2)
 100d234:	e0bff415 	stw	r2,-48(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 100d238:	e0bff417 	ldw	r2,-48(fp)
 100d23c:	1004c03a 	cmpne	r2,r2,zero
 100d240:	103f6e1e 	bne	r2,zero,100cffc <OSEventPendMulti+0x1bc>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
 100d244:	e0bff203 	ldbu	r2,-56(fp)
 100d248:	10800058 	cmpnei	r2,r2,1
 100d24c:	10000b1e 	bne	r2,zero,100d27c <OSEventPendMulti+0x43c>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
 100d250:	e0bff717 	ldw	r2,-36(fp)
 100d254:	10000015 	stw	zero,0(r2)
 100d258:	e0bff017 	ldw	r2,-64(fp)
 100d25c:	e0bfed15 	stw	r2,-76(fp)
 100d260:	e0bfed17 	ldw	r2,-76(fp)
 100d264:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
 100d268:	e0800217 	ldw	r2,8(fp)
 100d26c:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
 100d270:	e0fff18b 	ldhu	r3,-58(fp)
 100d274:	e0ffff15 	stw	r3,-4(fp)
 100d278:	00009b06 	br	100d4e8 <OSEventPendMulti+0x6a8>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
 100d27c:	d1177117 	ldw	r4,24004(gp)
 100d280:	d0977117 	ldw	r2,24004(gp)
 100d284:	10c00c03 	ldbu	r3,48(r2)
 100d288:	e0bff103 	ldbu	r2,-60(fp)
 100d28c:	1884b03a 	or	r2,r3,r2
 100d290:	1007883a 	mov	r3,r2
 100d294:	00bfe004 	movi	r2,-128
 100d298:	1884b03a 	or	r2,r3,r2
 100d29c:	20800c05 	stb	r2,48(r4)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 100d2a0:	d0977117 	ldw	r2,24004(gp)
 100d2a4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
 100d2a8:	d0d77117 	ldw	r3,24004(gp)
 100d2ac:	e0bff90b 	ldhu	r2,-28(fp)
 100d2b0:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
 100d2b4:	e13ff617 	ldw	r4,-40(fp)
 100d2b8:	100df100 	call	100df10 <OS_EventTaskWaitMulti>
 100d2bc:	e0bff017 	ldw	r2,-64(fp)
 100d2c0:	e0bfec15 	stw	r2,-80(fp)
 100d2c4:	e0bfec17 	ldw	r2,-80(fp)
 100d2c8:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
 100d2cc:	100e73c0 	call	100e73c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100d2d0:	0005303a 	rdctl	r2,status
 100d2d4:	e0bfeb15 	stw	r2,-84(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100d2d8:	e0ffeb17 	ldw	r3,-84(fp)
 100d2dc:	00bfff84 	movi	r2,-2
 100d2e0:	1884703a 	and	r2,r3,r2
 100d2e4:	1001703a 	wrctl	status,r2
  
  return context;
 100d2e8:	e0bfeb17 	ldw	r2,-84(fp)
    OS_ENTER_CRITICAL();
 100d2ec:	e0bff015 	stw	r2,-64(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
 100d2f0:	d0977117 	ldw	r2,24004(gp)
 100d2f4:	10800c43 	ldbu	r2,49(r2)
 100d2f8:	10803fcc 	andi	r2,r2,255
 100d2fc:	e0bffc15 	stw	r2,-16(fp)
 100d300:	e0fffc17 	ldw	r3,-16(fp)
 100d304:	1805003a 	cmpeq	r2,r3,zero
 100d308:	1000041e 	bne	r2,zero,100d31c <OSEventPendMulti+0x4dc>
 100d30c:	e0fffc17 	ldw	r3,-16(fp)
 100d310:	188000a0 	cmpeqi	r2,r3,2
 100d314:	1000011e 	bne	r2,zero,100d31c <OSEventPendMulti+0x4dc>
 100d318:	00001906 	br	100d380 <OSEventPendMulti+0x540>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
 100d31c:	d0977117 	ldw	r2,24004(gp)
 100d320:	10800717 	ldw	r2,28(r2)
 100d324:	e0bff415 	stw	r2,-48(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
 100d328:	e0bff417 	ldw	r2,-48(fp)
 100d32c:	1005003a 	cmpeq	r2,r2,zero
 100d330:	10000c1e 	bne	r2,zero,100d364 <OSEventPendMulti+0x524>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
 100d334:	e0fff717 	ldw	r3,-36(fp)
 100d338:	e0bff417 	ldw	r2,-48(fp)
 100d33c:	18800015 	stw	r2,0(r3)
 100d340:	e0bff717 	ldw	r2,-36(fp)
 100d344:	10800104 	addi	r2,r2,4
 100d348:	e0bff715 	stw	r2,-36(fp)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
 100d34c:	e0bff717 	ldw	r2,-36(fp)
 100d350:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
 100d354:	e0bff18b 	ldhu	r2,-58(fp)
 100d358:	10800044 	addi	r2,r2,1
 100d35c:	e0bff18d 	sth	r2,-58(fp)
 100d360:	00000a06 	br	100d38c <OSEventPendMulti+0x54c>

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
 100d364:	d0977117 	ldw	r2,24004(gp)
 100d368:	00c00044 	movi	r3,1
 100d36c:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 100d370:	d1177117 	ldw	r4,24004(gp)
 100d374:	e17ff617 	ldw	r5,-40(fp)
 100d378:	100e1340 	call	100e134 <OS_EventTaskRemoveMulti>
             }
			 break;
 100d37c:	00000306 	br	100d38c <OSEventPendMulti+0x54c>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 100d380:	d1177117 	ldw	r4,24004(gp)
 100d384:	e17ff617 	ldw	r5,-40(fp)
 100d388:	100e1340 	call	100e134 <OS_EventTaskRemoveMulti>
             break;
    }

    switch (OSTCBCur->OSTCBStatPend) {
 100d38c:	d0977117 	ldw	r2,24004(gp)
 100d390:	10800c43 	ldbu	r2,49(r2)
 100d394:	10803fcc 	andi	r2,r2,255
 100d398:	e0bffb15 	stw	r2,-20(fp)
 100d39c:	e0fffb17 	ldw	r3,-20(fp)
 100d3a0:	1805003a 	cmpeq	r2,r3,zero
 100d3a4:	1000041e 	bne	r2,zero,100d3b8 <OSEventPendMulti+0x578>
 100d3a8:	e0fffb17 	ldw	r3,-20(fp)
 100d3ac:	188000a0 	cmpeqi	r2,r3,2
 100d3b0:	10002c1e 	bne	r2,zero,100d464 <OSEventPendMulti+0x624>
 100d3b4:	00003406 	br	100d488 <OSEventPendMulti+0x648>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
 100d3b8:	e0bff417 	ldw	r2,-48(fp)
 100d3bc:	10800003 	ldbu	r2,0(r2)
 100d3c0:	10803fcc 	andi	r2,r2,255
 100d3c4:	e0bffa15 	stw	r2,-24(fp)
 100d3c8:	e0fffa17 	ldw	r3,-24(fp)
 100d3cc:	18800050 	cmplti	r2,r3,1
 100d3d0:	1000151e 	bne	r2,zero,100d428 <OSEventPendMulti+0x5e8>
 100d3d4:	e0fffa17 	ldw	r3,-24(fp)
 100d3d8:	188000d0 	cmplti	r2,r3,3
 100d3dc:	10000a1e 	bne	r2,zero,100d408 <OSEventPendMulti+0x5c8>
 100d3e0:	e0fffa17 	ldw	r3,-24(fp)
 100d3e4:	188000e0 	cmpeqi	r2,r3,3
 100d3e8:	1000011e 	bne	r2,zero,100d3f0 <OSEventPendMulti+0x5b0>
 100d3ec:	00000e06 	br	100d428 <OSEventPendMulti+0x5e8>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
 100d3f0:	e0bff817 	ldw	r2,-32(fp)
 100d3f4:	10000015 	stw	zero,0(r2)
 100d3f8:	e0bff817 	ldw	r2,-32(fp)
 100d3fc:	10800104 	addi	r2,r2,4
 100d400:	e0bff815 	stw	r2,-32(fp)
                      break;
 100d404:	00001406 	br	100d458 <OSEventPendMulti+0x618>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
 100d408:	d0977117 	ldw	r2,24004(gp)
 100d40c:	10c00917 	ldw	r3,36(r2)
 100d410:	e0bff817 	ldw	r2,-32(fp)
 100d414:	10c00015 	stw	r3,0(r2)
 100d418:	e0bff817 	ldw	r2,-32(fp)
 100d41c:	10800104 	addi	r2,r2,4
 100d420:	e0bff815 	stw	r2,-32(fp)
                      break;
 100d424:	00000c06 	br	100d458 <OSEventPendMulti+0x618>
 100d428:	e0bff017 	ldw	r2,-64(fp)
 100d42c:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100d430:	e0bfea17 	ldw	r2,-88(fp)
 100d434:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
 100d438:	e0bff717 	ldw	r2,-36(fp)
 100d43c:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
 100d440:	e0c00217 	ldw	r3,8(fp)
 100d444:	00800044 	movi	r2,1
 100d448:	18800005 	stb	r2,0(r3)
                      return (events_rdy_nbr);
 100d44c:	e0bff18b 	ldhu	r2,-58(fp)
 100d450:	e0bfff15 	stw	r2,-4(fp)
 100d454:	00002406 	br	100d4e8 <OSEventPendMulti+0x6a8>
             }
            *perr = OS_ERR_NONE;
 100d458:	e0800217 	ldw	r2,8(fp)
 100d45c:	10000005 	stb	zero,0(r2)
             break;
 100d460:	00001106 	br	100d4a8 <OSEventPendMulti+0x668>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
 100d464:	e0bff817 	ldw	r2,-32(fp)
 100d468:	10000015 	stw	zero,0(r2)
 100d46c:	e0bff817 	ldw	r2,-32(fp)
 100d470:	10800104 	addi	r2,r2,4
 100d474:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
 100d478:	e0c00217 	ldw	r3,8(fp)
 100d47c:	00800384 	movi	r2,14
 100d480:	18800005 	stb	r2,0(r3)
             break;
 100d484:	00000806 	br	100d4a8 <OSEventPendMulti+0x668>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
 100d488:	e0bff817 	ldw	r2,-32(fp)
 100d48c:	10000015 	stw	zero,0(r2)
 100d490:	e0bff817 	ldw	r2,-32(fp)
 100d494:	10800104 	addi	r2,r2,4
 100d498:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
 100d49c:	e0c00217 	ldw	r3,8(fp)
 100d4a0:	00800284 	movi	r2,10
 100d4a4:	18800005 	stb	r2,0(r3)
             break;
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
 100d4a8:	d0977117 	ldw	r2,24004(gp)
 100d4ac:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
 100d4b0:	d0977117 	ldw	r2,24004(gp)
 100d4b4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
 100d4b8:	d0977117 	ldw	r2,24004(gp)
 100d4bc:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 100d4c0:	d0977117 	ldw	r2,24004(gp)
 100d4c4:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
 100d4c8:	d0977117 	ldw	r2,24004(gp)
 100d4cc:	10000915 	stw	zero,36(r2)
 100d4d0:	e0bff017 	ldw	r2,-64(fp)
 100d4d4:	e0bfe915 	stw	r2,-92(fp)
 100d4d8:	e0bfe917 	ldw	r2,-92(fp)
 100d4dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
 100d4e0:	e0fff18b 	ldhu	r3,-58(fp)
 100d4e4:	e0ffff15 	stw	r3,-4(fp)
 100d4e8:	e0bfff17 	ldw	r2,-4(fp)
}
 100d4ec:	e037883a 	mov	sp,fp
 100d4f0:	dfc00117 	ldw	ra,4(sp)
 100d4f4:	df000017 	ldw	fp,0(sp)
 100d4f8:	dec00204 	addi	sp,sp,8
 100d4fc:	f800283a 	ret

0100d500 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
 100d500:	f811883a 	mov	r8,ra
 100d504:	100c1d00 	call	100c1d0 <_mcount>
 100d508:	403f883a 	mov	ra,r8
 100d50c:	defffe04 	addi	sp,sp,-8
 100d510:	dfc00115 	stw	ra,4(sp)
 100d514:	df000015 	stw	fp,0(sp)
 100d518:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
 100d51c:	101934c0 	call	101934c <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
 100d520:	100e3a00 	call	100e3a0 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
 100d524:	100e3f00 	call	100e3f0 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
 100d528:	100e5780 	call	100e578 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
 100d52c:	100e2b80 	call	100e2b8 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
 100d530:	10107900 	call	1010790 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
 100d534:	10111d40 	call	10111d4 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
 100d538:	10125b40 	call	10125b4 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
 100d53c:	100e4680 	call	100e468 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
 100d540:	100e4f00 	call	100e4f0 <OS_InitTaskStat>
#endif

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
 100d544:	10161c80 	call	10161c8 <OSTmr_Init>
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
 100d548:	10193780 	call	1019378 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
 100d54c:	100ee840 	call	100ee84 <OSDebugInit>
#endif
}
 100d550:	e037883a 	mov	sp,fp
 100d554:	dfc00117 	ldw	ra,4(sp)
 100d558:	df000017 	ldw	fp,0(sp)
 100d55c:	dec00204 	addi	sp,sp,8
 100d560:	f800283a 	ret

0100d564 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
 100d564:	f811883a 	mov	r8,ra
 100d568:	100c1d00 	call	100c1d0 <_mcount>
 100d56c:	403f883a 	mov	ra,r8
 100d570:	defffc04 	addi	sp,sp,-16
 100d574:	df000315 	stw	fp,12(sp)
 100d578:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 100d57c:	e03fff15 	stw	zero,-4(fp)
#endif

    if (OSRunning == OS_TRUE) {
 100d580:	d0976103 	ldbu	r2,23940(gp)
 100d584:	10803fcc 	andi	r2,r2,255
 100d588:	10800058 	cmpnei	r2,r2,1
 100d58c:	1000131e 	bne	r2,zero,100d5dc <OSIntEnter+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100d590:	0005303a 	rdctl	r2,status
 100d594:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100d598:	e0fffe17 	ldw	r3,-8(fp)
 100d59c:	00bfff84 	movi	r2,-2
 100d5a0:	1884703a 	and	r2,r3,r2
 100d5a4:	1001703a 	wrctl	status,r2
  
  return context;
 100d5a8:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 100d5ac:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting < 255u) {
 100d5b0:	d0977003 	ldbu	r2,24000(gp)
 100d5b4:	10803fcc 	andi	r2,r2,255
 100d5b8:	10803fe0 	cmpeqi	r2,r2,255
 100d5bc:	1000031e 	bne	r2,zero,100d5cc <OSIntEnter+0x68>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
 100d5c0:	d0977003 	ldbu	r2,24000(gp)
 100d5c4:	10800044 	addi	r2,r2,1
 100d5c8:	d0977005 	stb	r2,24000(gp)
 100d5cc:	e0bfff17 	ldw	r2,-4(fp)
 100d5d0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100d5d4:	e0bffd17 	ldw	r2,-12(fp)
 100d5d8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
 100d5dc:	e037883a 	mov	sp,fp
 100d5e0:	df000017 	ldw	fp,0(sp)
 100d5e4:	dec00104 	addi	sp,sp,4
 100d5e8:	f800283a 	ret

0100d5ec <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
 100d5ec:	f811883a 	mov	r8,ra
 100d5f0:	100c1d00 	call	100c1d0 <_mcount>
 100d5f4:	403f883a 	mov	ra,r8
 100d5f8:	defffb04 	addi	sp,sp,-20
 100d5fc:	dfc00415 	stw	ra,16(sp)
 100d600:	df000315 	stw	fp,12(sp)
 100d604:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 100d608:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {
 100d60c:	d0976103 	ldbu	r2,23940(gp)
 100d610:	10803fcc 	andi	r2,r2,255
 100d614:	10800058 	cmpnei	r2,r2,1
 100d618:	1000321e 	bne	r2,zero,100d6e4 <OSIntExit+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100d61c:	0005303a 	rdctl	r2,status
 100d620:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100d624:	e0fffe17 	ldw	r3,-8(fp)
 100d628:	00bfff84 	movi	r2,-2
 100d62c:	1884703a 	and	r2,r3,r2
 100d630:	1001703a 	wrctl	status,r2
  
  return context;
 100d634:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 100d638:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
 100d63c:	d0977003 	ldbu	r2,24000(gp)
 100d640:	10803fcc 	andi	r2,r2,255
 100d644:	1005003a 	cmpeq	r2,r2,zero
 100d648:	1000031e 	bne	r2,zero,100d658 <OSIntExit+0x6c>
            OSIntNesting--;
 100d64c:	d0977003 	ldbu	r2,24000(gp)
 100d650:	10bfffc4 	addi	r2,r2,-1
 100d654:	d0977005 	stb	r2,24000(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
 100d658:	d0977003 	ldbu	r2,24000(gp)
 100d65c:	10803fcc 	andi	r2,r2,255
 100d660:	1004c03a 	cmpne	r2,r2,zero
 100d664:	10001b1e 	bne	r2,zero,100d6d4 <OSIntExit+0xe8>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
 100d668:	d0975f03 	ldbu	r2,23932(gp)
 100d66c:	10803fcc 	andi	r2,r2,255
 100d670:	1004c03a 	cmpne	r2,r2,zero
 100d674:	1000171e 	bne	r2,zero,100d6d4 <OSIntExit+0xe8>
                OS_SchedNew();
 100d678:	100e81c0 	call	100e81c <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
 100d67c:	d0976383 	ldbu	r2,23950(gp)
 100d680:	d0d763c3 	ldbu	r3,23951(gp)
 100d684:	11003fcc 	andi	r4,r2,255
 100d688:	18803fcc 	andi	r2,r3,255
 100d68c:	20801126 	beq	r4,r2,100d6d4 <OSIntExit+0xe8>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
 100d690:	d0976383 	ldbu	r2,23950(gp)
 100d694:	10803fcc 	andi	r2,r2,255
 100d698:	00c04134 	movhi	r3,260
 100d69c:	18de7204 	addi	r3,r3,31176
 100d6a0:	1085883a 	add	r2,r2,r2
 100d6a4:	1085883a 	add	r2,r2,r2
 100d6a8:	10c5883a 	add	r2,r2,r3
 100d6ac:	10800017 	ldw	r2,0(r2)
 100d6b0:	d0976c15 	stw	r2,23984(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
 100d6b4:	d0d76c17 	ldw	r3,23984(gp)
 100d6b8:	18800e17 	ldw	r2,56(r3)
 100d6bc:	10800044 	addi	r2,r2,1
 100d6c0:	18800e15 	stw	r2,56(r3)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
 100d6c4:	d0976617 	ldw	r2,23960(gp)
 100d6c8:	10800044 	addi	r2,r2,1
 100d6cc:	d0976615 	stw	r2,23960(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
 100d6d0:	1018e400 	call	1018e40 <OSCtxSw>
 100d6d4:	e0bfff17 	ldw	r2,-4(fp)
 100d6d8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100d6dc:	e0bffd17 	ldw	r2,-12(fp)
 100d6e0:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 100d6e4:	e037883a 	mov	sp,fp
 100d6e8:	dfc00117 	ldw	ra,4(sp)
 100d6ec:	df000017 	ldw	fp,0(sp)
 100d6f0:	dec00204 	addi	sp,sp,8
 100d6f4:	f800283a 	ret

0100d6f8 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
 100d6f8:	f811883a 	mov	r8,ra
 100d6fc:	100c1d00 	call	100c1d0 <_mcount>
 100d700:	403f883a 	mov	ra,r8
 100d704:	defffc04 	addi	sp,sp,-16
 100d708:	df000315 	stw	fp,12(sp)
 100d70c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 100d710:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
 100d714:	d0976103 	ldbu	r2,23940(gp)
 100d718:	10803fcc 	andi	r2,r2,255
 100d71c:	10800058 	cmpnei	r2,r2,1
 100d720:	1000171e 	bne	r2,zero,100d780 <OSSchedLock+0x88>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100d724:	0005303a 	rdctl	r2,status
 100d728:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100d72c:	e0fffe17 	ldw	r3,-8(fp)
 100d730:	00bfff84 	movi	r2,-2
 100d734:	1884703a 	and	r2,r3,r2
 100d738:	1001703a 	wrctl	status,r2
  
  return context;
 100d73c:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 100d740:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
 100d744:	d0977003 	ldbu	r2,24000(gp)
 100d748:	10803fcc 	andi	r2,r2,255
 100d74c:	1004c03a 	cmpne	r2,r2,zero
 100d750:	1000071e 	bne	r2,zero,100d770 <OSSchedLock+0x78>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
 100d754:	d0975f03 	ldbu	r2,23932(gp)
 100d758:	10803fcc 	andi	r2,r2,255
 100d75c:	10803fe0 	cmpeqi	r2,r2,255
 100d760:	1000031e 	bne	r2,zero,100d770 <OSSchedLock+0x78>
                OSLockNesting++;                 /* Increment lock nesting level                       */
 100d764:	d0975f03 	ldbu	r2,23932(gp)
 100d768:	10800044 	addi	r2,r2,1
 100d76c:	d0975f05 	stb	r2,23932(gp)
 100d770:	e0bfff17 	ldw	r2,-4(fp)
 100d774:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100d778:	e0bffd17 	ldw	r2,-12(fp)
 100d77c:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 100d780:	e037883a 	mov	sp,fp
 100d784:	df000017 	ldw	fp,0(sp)
 100d788:	dec00104 	addi	sp,sp,4
 100d78c:	f800283a 	ret

0100d790 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
 100d790:	f811883a 	mov	r8,ra
 100d794:	100c1d00 	call	100c1d0 <_mcount>
 100d798:	403f883a 	mov	ra,r8
 100d79c:	defff804 	addi	sp,sp,-32
 100d7a0:	dfc00715 	stw	ra,28(sp)
 100d7a4:	df000615 	stw	fp,24(sp)
 100d7a8:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 100d7ac:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
 100d7b0:	d0976103 	ldbu	r2,23940(gp)
 100d7b4:	10803fcc 	andi	r2,r2,255
 100d7b8:	10800058 	cmpnei	r2,r2,1
 100d7bc:	10002b1e 	bne	r2,zero,100d86c <OSSchedUnlock+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100d7c0:	0005303a 	rdctl	r2,status
 100d7c4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100d7c8:	e0fffe17 	ldw	r3,-8(fp)
 100d7cc:	00bfff84 	movi	r2,-2
 100d7d0:	1884703a 	and	r2,r3,r2
 100d7d4:	1001703a 	wrctl	status,r2
  
  return context;
 100d7d8:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 100d7dc:	e0bfff15 	stw	r2,-4(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
 100d7e0:	d0975f03 	ldbu	r2,23932(gp)
 100d7e4:	10803fcc 	andi	r2,r2,255
 100d7e8:	1005003a 	cmpeq	r2,r2,zero
 100d7ec:	10001b1e 	bne	r2,zero,100d85c <OSSchedUnlock+0xcc>
            OSLockNesting--;                               /* Decrement lock nesting level             */
 100d7f0:	d0975f03 	ldbu	r2,23932(gp)
 100d7f4:	10bfffc4 	addi	r2,r2,-1
 100d7f8:	d0975f05 	stb	r2,23932(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
 100d7fc:	d0975f03 	ldbu	r2,23932(gp)
 100d800:	10803fcc 	andi	r2,r2,255
 100d804:	1004c03a 	cmpne	r2,r2,zero
 100d808:	10000f1e 	bne	r2,zero,100d848 <OSSchedUnlock+0xb8>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
 100d80c:	d0977003 	ldbu	r2,24000(gp)
 100d810:	10803fcc 	andi	r2,r2,255
 100d814:	1004c03a 	cmpne	r2,r2,zero
 100d818:	1000061e 	bne	r2,zero,100d834 <OSSchedUnlock+0xa4>
 100d81c:	e0bfff17 	ldw	r2,-4(fp)
 100d820:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100d824:	e0bffd17 	ldw	r2,-12(fp)
 100d828:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
 100d82c:	100e73c0 	call	100e73c <OS_Sched>
 100d830:	00000e06 	br	100d86c <OSSchedUnlock+0xdc>
 100d834:	e0bfff17 	ldw	r2,-4(fp)
 100d838:	e0bffc15 	stw	r2,-16(fp)
 100d83c:	e0bffc17 	ldw	r2,-16(fp)
 100d840:	1001703a 	wrctl	status,r2
 100d844:	00000906 	br	100d86c <OSSchedUnlock+0xdc>
 100d848:	e0bfff17 	ldw	r2,-4(fp)
 100d84c:	e0bffb15 	stw	r2,-20(fp)
 100d850:	e0bffb17 	ldw	r2,-20(fp)
 100d854:	1001703a 	wrctl	status,r2
 100d858:	00000406 	br	100d86c <OSSchedUnlock+0xdc>
 100d85c:	e0bfff17 	ldw	r2,-4(fp)
 100d860:	e0bffa15 	stw	r2,-24(fp)
 100d864:	e0bffa17 	ldw	r2,-24(fp)
 100d868:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
 100d86c:	e037883a 	mov	sp,fp
 100d870:	dfc00117 	ldw	ra,4(sp)
 100d874:	df000017 	ldw	fp,0(sp)
 100d878:	dec00204 	addi	sp,sp,8
 100d87c:	f800283a 	ret

0100d880 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
 100d880:	f811883a 	mov	r8,ra
 100d884:	100c1d00 	call	100c1d0 <_mcount>
 100d888:	403f883a 	mov	ra,r8
 100d88c:	defffe04 	addi	sp,sp,-8
 100d890:	dfc00115 	stw	ra,4(sp)
 100d894:	df000015 	stw	fp,0(sp)
 100d898:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
 100d89c:	d0976103 	ldbu	r2,23940(gp)
 100d8a0:	10803fcc 	andi	r2,r2,255
 100d8a4:	1004c03a 	cmpne	r2,r2,zero
 100d8a8:	10000f1e 	bne	r2,zero,100d8e8 <OSStart+0x68>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
 100d8ac:	100e81c0 	call	100e81c <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
 100d8b0:	d0976383 	ldbu	r2,23950(gp)
 100d8b4:	d09763c5 	stb	r2,23951(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
 100d8b8:	d0976383 	ldbu	r2,23950(gp)
 100d8bc:	10803fcc 	andi	r2,r2,255
 100d8c0:	00c04134 	movhi	r3,260
 100d8c4:	18de7204 	addi	r3,r3,31176
 100d8c8:	1085883a 	add	r2,r2,r2
 100d8cc:	1085883a 	add	r2,r2,r2
 100d8d0:	10c5883a 	add	r2,r2,r3
 100d8d4:	10800017 	ldw	r2,0(r2)
 100d8d8:	d0976c15 	stw	r2,23984(gp)
        OSTCBCur      = OSTCBHighRdy;
 100d8dc:	d0976c17 	ldw	r2,23984(gp)
 100d8e0:	d0977115 	stw	r2,24004(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
 100d8e4:	1018ecc0 	call	1018ecc <OSStartHighRdy>
    }
}
 100d8e8:	e037883a 	mov	sp,fp
 100d8ec:	dfc00117 	ldw	ra,4(sp)
 100d8f0:	df000017 	ldw	fp,0(sp)
 100d8f4:	dec00204 	addi	sp,sp,8
 100d8f8:	f800283a 	ret

0100d8fc <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
 100d8fc:	f811883a 	mov	r8,ra
 100d900:	100c1d00 	call	100c1d0 <_mcount>
 100d904:	403f883a 	mov	ra,r8
 100d908:	defff904 	addi	sp,sp,-28
 100d90c:	dfc00615 	stw	ra,24(sp)
 100d910:	df000515 	stw	fp,20(sp)
 100d914:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 100d918:	e03fff15 	stw	zero,-4(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
 100d91c:	01000084 	movi	r4,2
 100d920:	1014d640 	call	1014d64 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100d924:	0005303a 	rdctl	r2,status
 100d928:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100d92c:	e0fffe17 	ldw	r3,-8(fp)
 100d930:	00bfff84 	movi	r2,-2
 100d934:	1884703a 	and	r2,r3,r2
 100d938:	1001703a 	wrctl	status,r2
  
  return context;
 100d93c:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
 100d940:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
 100d944:	d0176215 	stw	zero,23944(gp)
 100d948:	e0bfff17 	ldw	r2,-4(fp)
 100d94c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100d950:	e0bffd17 	ldw	r2,-12(fp)
 100d954:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
 100d958:	01001904 	movi	r4,100
 100d95c:	1014d640 	call	1014d64 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100d960:	0005303a 	rdctl	r2,status
 100d964:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100d968:	e0fffc17 	ldw	r3,-16(fp)
 100d96c:	00bfff84 	movi	r2,-2
 100d970:	1884703a 	and	r2,r3,r2
 100d974:	1001703a 	wrctl	status,r2
  
  return context;
 100d978:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
 100d97c:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
 100d980:	d0976217 	ldw	r2,23944(gp)
 100d984:	d0976815 	stw	r2,23968(gp)
    OSStatRdy    = OS_TRUE;
 100d988:	00800044 	movi	r2,1
 100d98c:	d0977605 	stb	r2,24024(gp)
 100d990:	e0bfff17 	ldw	r2,-4(fp)
 100d994:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100d998:	e0bffb17 	ldw	r2,-20(fp)
 100d99c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 100d9a0:	e037883a 	mov	sp,fp
 100d9a4:	dfc00117 	ldw	ra,4(sp)
 100d9a8:	df000017 	ldw	fp,0(sp)
 100d9ac:	dec00204 	addi	sp,sp,8
 100d9b0:	f800283a 	ret

0100d9b4 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
 100d9b4:	f811883a 	mov	r8,ra
 100d9b8:	100c1d00 	call	100c1d0 <_mcount>
 100d9bc:	403f883a 	mov	ra,r8
 100d9c0:	defff604 	addi	sp,sp,-40
 100d9c4:	dfc00915 	stw	ra,36(sp)
 100d9c8:	df000815 	stw	fp,32(sp)
 100d9cc:	df000804 	addi	fp,sp,32
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 100d9d0:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
 100d9d4:	10192d40 	call	10192d4 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100d9d8:	0005303a 	rdctl	r2,status
 100d9dc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100d9e0:	e0fffb17 	ldw	r3,-20(fp)
 100d9e4:	00bfff84 	movi	r2,-2
 100d9e8:	1884703a 	and	r2,r3,r2
 100d9ec:	1001703a 	wrctl	status,r2
  
  return context;
 100d9f0:	e0bffb17 	ldw	r2,-20(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
 100d9f4:	e0bffc15 	stw	r2,-16(fp)
    OSTime++;
 100d9f8:	d0977317 	ldw	r2,24012(gp)
 100d9fc:	10800044 	addi	r2,r2,1
 100da00:	d0977315 	stw	r2,24012(gp)
 100da04:	e0bffc17 	ldw	r2,-16(fp)
 100da08:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100da0c:	e0bffa17 	ldw	r2,-24(fp)
 100da10:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
 100da14:	d0976103 	ldbu	r2,23940(gp)
 100da18:	10803fcc 	andi	r2,r2,255
 100da1c:	10800058 	cmpnei	r2,r2,1
 100da20:	1000721e 	bne	r2,zero,100dbec <OSTimeTick+0x238>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
 100da24:	d0976503 	ldbu	r2,23956(gp)
 100da28:	10803fcc 	andi	r2,r2,255
 100da2c:	e0bfff15 	stw	r2,-4(fp)
 100da30:	e0ffff17 	ldw	r3,-4(fp)
 100da34:	18800060 	cmpeqi	r2,r3,1
 100da38:	10000a1e 	bne	r2,zero,100da64 <OSTimeTick+0xb0>
 100da3c:	e0ffff17 	ldw	r3,-4(fp)
 100da40:	188000a0 	cmpeqi	r2,r3,2
 100da44:	1000091e 	bne	r2,zero,100da6c <OSTimeTick+0xb8>
 100da48:	e0ffff17 	ldw	r3,-4(fp)
 100da4c:	1805003a 	cmpeq	r2,r3,zero
 100da50:	1000011e 	bne	r2,zero,100da58 <OSTimeTick+0xa4>
 100da54:	00000a06 	br	100da80 <OSTimeTick+0xcc>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
 100da58:	00800044 	movi	r2,1
 100da5c:	e0bffd05 	stb	r2,-12(fp)
                 break;
 100da60:	00000a06 	br	100da8c <OSTimeTick+0xd8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
 100da64:	e03ffd05 	stb	zero,-12(fp)
                 break;
 100da68:	00000806 	br	100da8c <OSTimeTick+0xd8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
 100da6c:	00800044 	movi	r2,1
 100da70:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
 100da74:	00800044 	movi	r2,1
 100da78:	d0976505 	stb	r2,23956(gp)
                 break;
 100da7c:	00000306 	br	100da8c <OSTimeTick+0xd8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
 100da80:	00800044 	movi	r2,1
 100da84:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
 100da88:	d0176505 	stb	zero,23956(gp)
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
 100da8c:	e0bffd03 	ldbu	r2,-12(fp)
 100da90:	1005003a 	cmpeq	r2,r2,zero
 100da94:	1000551e 	bne	r2,zero,100dbec <OSTimeTick+0x238>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
 100da98:	d0976417 	ldw	r2,23952(gp)
 100da9c:	e0bffe15 	stw	r2,-8(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 100daa0:	00004d06 	br	100dbd8 <OSTimeTick+0x224>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100daa4:	0005303a 	rdctl	r2,status
 100daa8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100daac:	e0fff917 	ldw	r3,-28(fp)
 100dab0:	00bfff84 	movi	r2,-2
 100dab4:	1884703a 	and	r2,r3,r2
 100dab8:	1001703a 	wrctl	status,r2
  
  return context;
 100dabc:	e0bff917 	ldw	r2,-28(fp)
            OS_ENTER_CRITICAL();
 100dac0:	e0bffc15 	stw	r2,-16(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
 100dac4:	e0bffe17 	ldw	r2,-8(fp)
 100dac8:	10800b8b 	ldhu	r2,46(r2)
 100dacc:	10bfffcc 	andi	r2,r2,65535
 100dad0:	1005003a 	cmpeq	r2,r2,zero
 100dad4:	1000391e 	bne	r2,zero,100dbbc <OSTimeTick+0x208>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
 100dad8:	e0bffe17 	ldw	r2,-8(fp)
 100dadc:	10800b8b 	ldhu	r2,46(r2)
 100dae0:	10bfffc4 	addi	r2,r2,-1
 100dae4:	1007883a 	mov	r3,r2
 100dae8:	e0bffe17 	ldw	r2,-8(fp)
 100daec:	10c00b8d 	sth	r3,46(r2)
 100daf0:	e0bffe17 	ldw	r2,-8(fp)
 100daf4:	10800b8b 	ldhu	r2,46(r2)
 100daf8:	10bfffcc 	andi	r2,r2,65535
 100dafc:	1004c03a 	cmpne	r2,r2,zero
 100db00:	10002e1e 	bne	r2,zero,100dbbc <OSTimeTick+0x208>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 100db04:	e0bffe17 	ldw	r2,-8(fp)
 100db08:	10800c03 	ldbu	r2,48(r2)
 100db0c:	10803fcc 	andi	r2,r2,255
 100db10:	10800dcc 	andi	r2,r2,55
 100db14:	1005003a 	cmpeq	r2,r2,zero
 100db18:	10000b1e 	bne	r2,zero,100db48 <OSTimeTick+0x194>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
 100db1c:	e0bffe17 	ldw	r2,-8(fp)
 100db20:	10c00c03 	ldbu	r3,48(r2)
 100db24:	00bff204 	movi	r2,-56
 100db28:	1884703a 	and	r2,r3,r2
 100db2c:	1007883a 	mov	r3,r2
 100db30:	e0bffe17 	ldw	r2,-8(fp)
 100db34:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
 100db38:	e0fffe17 	ldw	r3,-8(fp)
 100db3c:	00800044 	movi	r2,1
 100db40:	18800c45 	stb	r2,49(r3)
 100db44:	00000206 	br	100db50 <OSTimeTick+0x19c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 100db48:	e0bffe17 	ldw	r2,-8(fp)
 100db4c:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
 100db50:	e0bffe17 	ldw	r2,-8(fp)
 100db54:	10800c03 	ldbu	r2,48(r2)
 100db58:	10803fcc 	andi	r2,r2,255
 100db5c:	1080020c 	andi	r2,r2,8
 100db60:	1004c03a 	cmpne	r2,r2,zero
 100db64:	1000151e 	bne	r2,zero,100dbbc <OSTimeTick+0x208>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
 100db68:	e0bffe17 	ldw	r2,-8(fp)
 100db6c:	10c00d83 	ldbu	r3,54(r2)
 100db70:	d0976e03 	ldbu	r2,23992(gp)
 100db74:	1884b03a 	or	r2,r3,r2
 100db78:	d0976e05 	stb	r2,23992(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 100db7c:	e0bffe17 	ldw	r2,-8(fp)
 100db80:	10800d03 	ldbu	r2,52(r2)
 100db84:	11003fcc 	andi	r4,r2,255
 100db88:	e0bffe17 	ldw	r2,-8(fp)
 100db8c:	10800d03 	ldbu	r2,52(r2)
 100db90:	10c03fcc 	andi	r3,r2,255
 100db94:	d0976e44 	addi	r2,gp,23993
 100db98:	1885883a 	add	r2,r3,r2
 100db9c:	10c00003 	ldbu	r3,0(r2)
 100dba0:	e0bffe17 	ldw	r2,-8(fp)
 100dba4:	10800d43 	ldbu	r2,53(r2)
 100dba8:	1884b03a 	or	r2,r3,r2
 100dbac:	1007883a 	mov	r3,r2
 100dbb0:	d0976e44 	addi	r2,gp,23993
 100dbb4:	2085883a 	add	r2,r4,r2
 100dbb8:	10c00005 	stb	r3,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
 100dbbc:	e0bffe17 	ldw	r2,-8(fp)
 100dbc0:	10800517 	ldw	r2,20(r2)
 100dbc4:	e0bffe15 	stw	r2,-8(fp)
 100dbc8:	e0bffc17 	ldw	r2,-16(fp)
 100dbcc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100dbd0:	e0bff817 	ldw	r2,-32(fp)
 100dbd4:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 100dbd8:	e0bffe17 	ldw	r2,-8(fp)
 100dbdc:	10800c83 	ldbu	r2,50(r2)
 100dbe0:	10803fcc 	andi	r2,r2,255
 100dbe4:	10800518 	cmpnei	r2,r2,20
 100dbe8:	103fae1e 	bne	r2,zero,100daa4 <OSTimeTick+0xf0>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
 100dbec:	e037883a 	mov	sp,fp
 100dbf0:	dfc00117 	ldw	ra,4(sp)
 100dbf4:	df000017 	ldw	fp,0(sp)
 100dbf8:	dec00204 	addi	sp,sp,8
 100dbfc:	f800283a 	ret

0100dc00 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
 100dc00:	f811883a 	mov	r8,ra
 100dc04:	100c1d00 	call	100c1d0 <_mcount>
 100dc08:	403f883a 	mov	ra,r8
 100dc0c:	deffff04 	addi	sp,sp,-4
 100dc10:	df000015 	stw	fp,0(sp)
 100dc14:	d839883a 	mov	fp,sp
    return (OS_VERSION);
 100dc18:	00804784 	movi	r2,286
}
 100dc1c:	e037883a 	mov	sp,fp
 100dc20:	df000017 	ldw	fp,0(sp)
 100dc24:	dec00104 	addi	sp,sp,4
 100dc28:	f800283a 	ret

0100dc2c <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
 100dc2c:	f811883a 	mov	r8,ra
 100dc30:	100c1d00 	call	100c1d0 <_mcount>
 100dc34:	403f883a 	mov	ra,r8
 100dc38:	deffff04 	addi	sp,sp,-4
 100dc3c:	df000015 	stw	fp,0(sp)
 100dc40:	d839883a 	mov	fp,sp
}
 100dc44:	e037883a 	mov	sp,fp
 100dc48:	df000017 	ldw	fp,0(sp)
 100dc4c:	dec00104 	addi	sp,sp,4
 100dc50:	f800283a 	ret

0100dc54 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
 100dc54:	f811883a 	mov	r8,ra
 100dc58:	100c1d00 	call	100c1d0 <_mcount>
 100dc5c:	403f883a 	mov	ra,r8
 100dc60:	defff804 	addi	sp,sp,-32
 100dc64:	dfc00715 	stw	ra,28(sp)
 100dc68:	df000615 	stw	fp,24(sp)
 100dc6c:	df000604 	addi	fp,sp,24
 100dc70:	e13ffc15 	stw	r4,-16(fp)
 100dc74:	e17ffd15 	stw	r5,-12(fp)
 100dc78:	e1bffe05 	stb	r6,-8(fp)
 100dc7c:	e1ffff05 	stb	r7,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
 100dc80:	e0bffc17 	ldw	r2,-16(fp)
 100dc84:	10800283 	ldbu	r2,10(r2)
 100dc88:	10c03fcc 	andi	r3,r2,255
 100dc8c:	008040b4 	movhi	r2,258
 100dc90:	10a80304 	addi	r2,r2,-24564
 100dc94:	10c5883a 	add	r2,r2,r3
 100dc98:	10800003 	ldbu	r2,0(r2)
 100dc9c:	e0bffa85 	stb	r2,-22(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
 100dca0:	e0fffa83 	ldbu	r3,-22(fp)
 100dca4:	e0bffc17 	ldw	r2,-16(fp)
 100dca8:	1885883a 	add	r2,r3,r2
 100dcac:	10800204 	addi	r2,r2,8
 100dcb0:	108000c3 	ldbu	r2,3(r2)
 100dcb4:	10c03fcc 	andi	r3,r2,255
 100dcb8:	008040b4 	movhi	r2,258
 100dcbc:	10a80304 	addi	r2,r2,-24564
 100dcc0:	10c5883a 	add	r2,r2,r3
 100dcc4:	10800003 	ldbu	r2,0(r2)
 100dcc8:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
 100dccc:	e0bffa83 	ldbu	r2,-22(fp)
 100dcd0:	100490fa 	slli	r2,r2,3
 100dcd4:	1007883a 	mov	r3,r2
 100dcd8:	e0bffa43 	ldbu	r2,-23(fp)
 100dcdc:	1885883a 	add	r2,r3,r2
 100dce0:	e0bffa05 	stb	r2,-24(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
 100dce4:	e0bffa03 	ldbu	r2,-24(fp)
 100dce8:	00c04134 	movhi	r3,260
 100dcec:	18de7204 	addi	r3,r3,31176
 100dcf0:	1085883a 	add	r2,r2,r2
 100dcf4:	1085883a 	add	r2,r2,r2
 100dcf8:	10c5883a 	add	r2,r2,r3
 100dcfc:	10800017 	ldw	r2,0(r2)
 100dd00:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
 100dd04:	e0bffb17 	ldw	r2,-20(fp)
 100dd08:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
 100dd0c:	e0fffb17 	ldw	r3,-20(fp)
 100dd10:	e0bffd17 	ldw	r2,-12(fp)
 100dd14:	18800915 	stw	r2,36(r3)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
 100dd18:	e0bffb17 	ldw	r2,-20(fp)
 100dd1c:	10800c03 	ldbu	r2,48(r2)
 100dd20:	1007883a 	mov	r3,r2
 100dd24:	e0bffe03 	ldbu	r2,-8(fp)
 100dd28:	0084303a 	nor	r2,zero,r2
 100dd2c:	1884703a 	and	r2,r3,r2
 100dd30:	1007883a 	mov	r3,r2
 100dd34:	e0bffb17 	ldw	r2,-20(fp)
 100dd38:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
 100dd3c:	e0fffb17 	ldw	r3,-20(fp)
 100dd40:	e0bfff03 	ldbu	r2,-4(fp)
 100dd44:	18800c45 	stb	r2,49(r3)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
 100dd48:	e0bffb17 	ldw	r2,-20(fp)
 100dd4c:	10800c03 	ldbu	r2,48(r2)
 100dd50:	10803fcc 	andi	r2,r2,255
 100dd54:	1080020c 	andi	r2,r2,8
 100dd58:	1004c03a 	cmpne	r2,r2,zero
 100dd5c:	1000111e 	bne	r2,zero,100dda4 <OS_EventTaskRdy+0x150>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
 100dd60:	e0bffb17 	ldw	r2,-20(fp)
 100dd64:	10c00d83 	ldbu	r3,54(r2)
 100dd68:	d0976e03 	ldbu	r2,23992(gp)
 100dd6c:	1884b03a 	or	r2,r3,r2
 100dd70:	d0976e05 	stb	r2,23992(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
 100dd74:	e13ffa83 	ldbu	r4,-22(fp)
 100dd78:	e0fffa83 	ldbu	r3,-22(fp)
 100dd7c:	d0976e44 	addi	r2,gp,23993
 100dd80:	1885883a 	add	r2,r3,r2
 100dd84:	10c00003 	ldbu	r3,0(r2)
 100dd88:	e0bffb17 	ldw	r2,-20(fp)
 100dd8c:	10800d43 	ldbu	r2,53(r2)
 100dd90:	1884b03a 	or	r2,r3,r2
 100dd94:	1007883a 	mov	r3,r2
 100dd98:	d0976e44 	addi	r2,gp,23993
 100dd9c:	2085883a 	add	r2,r4,r2
 100dda0:	10c00005 	stb	r3,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
 100dda4:	e13ffb17 	ldw	r4,-20(fp)
 100dda8:	e17ffc17 	ldw	r5,-16(fp)
 100ddac:	100e0700 	call	100e070 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
 100ddb0:	e0bffb17 	ldw	r2,-20(fp)
 100ddb4:	10800817 	ldw	r2,32(r2)
 100ddb8:	1005003a 	cmpeq	r2,r2,zero
 100ddbc:	1000071e 	bne	r2,zero,100dddc <OS_EventTaskRdy+0x188>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 100ddc0:	e0bffb17 	ldw	r2,-20(fp)
 100ddc4:	11400817 	ldw	r5,32(r2)
 100ddc8:	e13ffb17 	ldw	r4,-20(fp)
 100ddcc:	100e1340 	call	100e134 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
 100ddd0:	e0fffb17 	ldw	r3,-20(fp)
 100ddd4:	e0bffc17 	ldw	r2,-16(fp)
 100ddd8:	18800715 	stw	r2,28(r3)
    }
#endif

    return (prio);
 100dddc:	e0bffa03 	ldbu	r2,-24(fp)
}
 100dde0:	e037883a 	mov	sp,fp
 100dde4:	dfc00117 	ldw	ra,4(sp)
 100dde8:	df000017 	ldw	fp,0(sp)
 100ddec:	dec00204 	addi	sp,sp,8
 100ddf0:	f800283a 	ret

0100ddf4 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
 100ddf4:	f811883a 	mov	r8,ra
 100ddf8:	100c1d00 	call	100c1d0 <_mcount>
 100ddfc:	403f883a 	mov	ra,r8
 100de00:	defffd04 	addi	sp,sp,-12
 100de04:	df000215 	stw	fp,8(sp)
 100de08:	df000204 	addi	fp,sp,8
 100de0c:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
 100de10:	d0d77117 	ldw	r3,24004(gp)
 100de14:	e0bfff17 	ldw	r2,-4(fp)
 100de18:	18800715 	stw	r2,28(r3)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
 100de1c:	d0977117 	ldw	r2,24004(gp)
 100de20:	10800d03 	ldbu	r2,52(r2)
 100de24:	11003fcc 	andi	r4,r2,255
 100de28:	d0977117 	ldw	r2,24004(gp)
 100de2c:	10800d03 	ldbu	r2,52(r2)
 100de30:	10c03fcc 	andi	r3,r2,255
 100de34:	e0bfff17 	ldw	r2,-4(fp)
 100de38:	1885883a 	add	r2,r3,r2
 100de3c:	10800204 	addi	r2,r2,8
 100de40:	10c000c3 	ldbu	r3,3(r2)
 100de44:	d0977117 	ldw	r2,24004(gp)
 100de48:	10800d43 	ldbu	r2,53(r2)
 100de4c:	1884b03a 	or	r2,r3,r2
 100de50:	1007883a 	mov	r3,r2
 100de54:	e0bfff17 	ldw	r2,-4(fp)
 100de58:	2085883a 	add	r2,r4,r2
 100de5c:	10800204 	addi	r2,r2,8
 100de60:	10c000c5 	stb	r3,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 100de64:	e0bfff17 	ldw	r2,-4(fp)
 100de68:	10c00283 	ldbu	r3,10(r2)
 100de6c:	d0977117 	ldw	r2,24004(gp)
 100de70:	10800d83 	ldbu	r2,54(r2)
 100de74:	1884b03a 	or	r2,r3,r2
 100de78:	1007883a 	mov	r3,r2
 100de7c:	e0bfff17 	ldw	r2,-4(fp)
 100de80:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 100de84:	d0977117 	ldw	r2,24004(gp)
 100de88:	10800d03 	ldbu	r2,52(r2)
 100de8c:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 100de90:	e13ffe03 	ldbu	r4,-8(fp)
 100de94:	e0fffe03 	ldbu	r3,-8(fp)
 100de98:	d0976e44 	addi	r2,gp,23993
 100de9c:	1885883a 	add	r2,r3,r2
 100dea0:	10800003 	ldbu	r2,0(r2)
 100dea4:	1007883a 	mov	r3,r2
 100dea8:	d0977117 	ldw	r2,24004(gp)
 100deac:	10800d43 	ldbu	r2,53(r2)
 100deb0:	0084303a 	nor	r2,zero,r2
 100deb4:	1884703a 	and	r2,r3,r2
 100deb8:	1007883a 	mov	r3,r2
 100debc:	d0976e44 	addi	r2,gp,23993
 100dec0:	2085883a 	add	r2,r4,r2
 100dec4:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
 100dec8:	e0fffe03 	ldbu	r3,-8(fp)
 100decc:	d0976e44 	addi	r2,gp,23993
 100ded0:	1885883a 	add	r2,r3,r2
 100ded4:	10800003 	ldbu	r2,0(r2)
 100ded8:	10803fcc 	andi	r2,r2,255
 100dedc:	1004c03a 	cmpne	r2,r2,zero
 100dee0:	1000071e 	bne	r2,zero,100df00 <OS_EventTaskWait+0x10c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 100dee4:	d0977117 	ldw	r2,24004(gp)
 100dee8:	10800d83 	ldbu	r2,54(r2)
 100deec:	0084303a 	nor	r2,zero,r2
 100def0:	1007883a 	mov	r3,r2
 100def4:	d0976e03 	ldbu	r2,23992(gp)
 100def8:	1884703a 	and	r2,r3,r2
 100defc:	d0976e05 	stb	r2,23992(gp)
    }
}
 100df00:	e037883a 	mov	sp,fp
 100df04:	df000017 	ldw	fp,0(sp)
 100df08:	dec00104 	addi	sp,sp,4
 100df0c:	f800283a 	ret

0100df10 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
 100df10:	f811883a 	mov	r8,ra
 100df14:	100c1d00 	call	100c1d0 <_mcount>
 100df18:	403f883a 	mov	ra,r8
 100df1c:	defffb04 	addi	sp,sp,-20
 100df20:	df000415 	stw	fp,16(sp)
 100df24:	df000404 	addi	fp,sp,16
 100df28:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
 100df2c:	d0977117 	ldw	r2,24004(gp)
 100df30:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
 100df34:	d0d77117 	ldw	r3,24004(gp)
 100df38:	e0bfff17 	ldw	r2,-4(fp)
 100df3c:	18800815 	stw	r2,32(r3)

    pevents =  pevents_wait;
 100df40:	e0bfff17 	ldw	r2,-4(fp)
 100df44:	e0bffe15 	stw	r2,-8(fp)
    pevent  = *pevents;
 100df48:	e0bffe17 	ldw	r2,-8(fp)
 100df4c:	10800017 	ldw	r2,0(r2)
 100df50:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 100df54:	00002006 	br	100dfd8 <OS_EventTaskWaitMulti+0xc8>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
 100df58:	d0977117 	ldw	r2,24004(gp)
 100df5c:	10800d03 	ldbu	r2,52(r2)
 100df60:	11003fcc 	andi	r4,r2,255
 100df64:	d0977117 	ldw	r2,24004(gp)
 100df68:	10800d03 	ldbu	r2,52(r2)
 100df6c:	10c03fcc 	andi	r3,r2,255
 100df70:	e0bffd17 	ldw	r2,-12(fp)
 100df74:	1885883a 	add	r2,r3,r2
 100df78:	10800204 	addi	r2,r2,8
 100df7c:	10c000c3 	ldbu	r3,3(r2)
 100df80:	d0977117 	ldw	r2,24004(gp)
 100df84:	10800d43 	ldbu	r2,53(r2)
 100df88:	1884b03a 	or	r2,r3,r2
 100df8c:	1007883a 	mov	r3,r2
 100df90:	e0bffd17 	ldw	r2,-12(fp)
 100df94:	2085883a 	add	r2,r4,r2
 100df98:	10800204 	addi	r2,r2,8
 100df9c:	10c000c5 	stb	r3,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 100dfa0:	e0bffd17 	ldw	r2,-12(fp)
 100dfa4:	10c00283 	ldbu	r3,10(r2)
 100dfa8:	d0977117 	ldw	r2,24004(gp)
 100dfac:	10800d83 	ldbu	r2,54(r2)
 100dfb0:	1884b03a 	or	r2,r3,r2
 100dfb4:	1007883a 	mov	r3,r2
 100dfb8:	e0bffd17 	ldw	r2,-12(fp)
 100dfbc:	10c00285 	stb	r3,10(r2)
        pevents++;
 100dfc0:	e0bffe17 	ldw	r2,-8(fp)
 100dfc4:	10800104 	addi	r2,r2,4
 100dfc8:	e0bffe15 	stw	r2,-8(fp)
        pevent = *pevents;
 100dfcc:	e0bffe17 	ldw	r2,-8(fp)
 100dfd0:	10800017 	ldw	r2,0(r2)
 100dfd4:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 100dfd8:	e0bffd17 	ldw	r2,-12(fp)
 100dfdc:	1004c03a 	cmpne	r2,r2,zero
 100dfe0:	103fdd1e 	bne	r2,zero,100df58 <OS_EventTaskWaitMulti+0x48>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 100dfe4:	d0977117 	ldw	r2,24004(gp)
 100dfe8:	10800d03 	ldbu	r2,52(r2)
 100dfec:	e0bffc05 	stb	r2,-16(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 100dff0:	e13ffc03 	ldbu	r4,-16(fp)
 100dff4:	e0fffc03 	ldbu	r3,-16(fp)
 100dff8:	d0976e44 	addi	r2,gp,23993
 100dffc:	1885883a 	add	r2,r3,r2
 100e000:	10800003 	ldbu	r2,0(r2)
 100e004:	1007883a 	mov	r3,r2
 100e008:	d0977117 	ldw	r2,24004(gp)
 100e00c:	10800d43 	ldbu	r2,53(r2)
 100e010:	0084303a 	nor	r2,zero,r2
 100e014:	1884703a 	and	r2,r3,r2
 100e018:	1007883a 	mov	r3,r2
 100e01c:	d0976e44 	addi	r2,gp,23993
 100e020:	2085883a 	add	r2,r4,r2
 100e024:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
 100e028:	e0fffc03 	ldbu	r3,-16(fp)
 100e02c:	d0976e44 	addi	r2,gp,23993
 100e030:	1885883a 	add	r2,r3,r2
 100e034:	10800003 	ldbu	r2,0(r2)
 100e038:	10803fcc 	andi	r2,r2,255
 100e03c:	1004c03a 	cmpne	r2,r2,zero
 100e040:	1000071e 	bne	r2,zero,100e060 <OS_EventTaskWaitMulti+0x150>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 100e044:	d0977117 	ldw	r2,24004(gp)
 100e048:	10800d83 	ldbu	r2,54(r2)
 100e04c:	0084303a 	nor	r2,zero,r2
 100e050:	1007883a 	mov	r3,r2
 100e054:	d0976e03 	ldbu	r2,23992(gp)
 100e058:	1884703a 	and	r2,r3,r2
 100e05c:	d0976e05 	stb	r2,23992(gp)
    }
}
 100e060:	e037883a 	mov	sp,fp
 100e064:	df000017 	ldw	fp,0(sp)
 100e068:	dec00104 	addi	sp,sp,4
 100e06c:	f800283a 	ret

0100e070 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
 100e070:	f811883a 	mov	r8,ra
 100e074:	100c1d00 	call	100c1d0 <_mcount>
 100e078:	403f883a 	mov	ra,r8
 100e07c:	defffc04 	addi	sp,sp,-16
 100e080:	df000315 	stw	fp,12(sp)
 100e084:	df000304 	addi	fp,sp,12
 100e088:	e13ffe15 	stw	r4,-8(fp)
 100e08c:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
 100e090:	e0bffe17 	ldw	r2,-8(fp)
 100e094:	10800d03 	ldbu	r2,52(r2)
 100e098:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
 100e09c:	e13ffd03 	ldbu	r4,-12(fp)
 100e0a0:	e0fffd03 	ldbu	r3,-12(fp)
 100e0a4:	e0bfff17 	ldw	r2,-4(fp)
 100e0a8:	1885883a 	add	r2,r3,r2
 100e0ac:	10800204 	addi	r2,r2,8
 100e0b0:	108000c3 	ldbu	r2,3(r2)
 100e0b4:	1007883a 	mov	r3,r2
 100e0b8:	e0bffe17 	ldw	r2,-8(fp)
 100e0bc:	10800d43 	ldbu	r2,53(r2)
 100e0c0:	0084303a 	nor	r2,zero,r2
 100e0c4:	1884703a 	and	r2,r3,r2
 100e0c8:	1007883a 	mov	r3,r2
 100e0cc:	e0bfff17 	ldw	r2,-4(fp)
 100e0d0:	2085883a 	add	r2,r4,r2
 100e0d4:	10800204 	addi	r2,r2,8
 100e0d8:	10c000c5 	stb	r3,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
 100e0dc:	e0fffd03 	ldbu	r3,-12(fp)
 100e0e0:	e0bfff17 	ldw	r2,-4(fp)
 100e0e4:	1885883a 	add	r2,r3,r2
 100e0e8:	10800204 	addi	r2,r2,8
 100e0ec:	108000c3 	ldbu	r2,3(r2)
 100e0f0:	10803fcc 	andi	r2,r2,255
 100e0f4:	1004c03a 	cmpne	r2,r2,zero
 100e0f8:	10000a1e 	bne	r2,zero,100e124 <OS_EventTaskRemove+0xb4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
 100e0fc:	e0bfff17 	ldw	r2,-4(fp)
 100e100:	10800283 	ldbu	r2,10(r2)
 100e104:	1007883a 	mov	r3,r2
 100e108:	e0bffe17 	ldw	r2,-8(fp)
 100e10c:	10800d83 	ldbu	r2,54(r2)
 100e110:	0084303a 	nor	r2,zero,r2
 100e114:	1884703a 	and	r2,r3,r2
 100e118:	1007883a 	mov	r3,r2
 100e11c:	e0bfff17 	ldw	r2,-4(fp)
 100e120:	10c00285 	stb	r3,10(r2)
    }
}
 100e124:	e037883a 	mov	sp,fp
 100e128:	df000017 	ldw	fp,0(sp)
 100e12c:	dec00104 	addi	sp,sp,4
 100e130:	f800283a 	ret

0100e134 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
 100e134:	f811883a 	mov	r8,ra
 100e138:	100c1d00 	call	100c1d0 <_mcount>
 100e13c:	403f883a 	mov	ra,r8
 100e140:	defffa04 	addi	sp,sp,-24
 100e144:	df000515 	stw	fp,20(sp)
 100e148:	df000504 	addi	fp,sp,20
 100e14c:	e13ffe15 	stw	r4,-8(fp)
 100e150:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
 100e154:	e0bffe17 	ldw	r2,-8(fp)
 100e158:	10800d03 	ldbu	r2,52(r2)
 100e15c:	e0bffb85 	stb	r2,-18(fp)
    bity    =  ptcb->OSTCBBitY;
 100e160:	e0bffe17 	ldw	r2,-8(fp)
 100e164:	10800d83 	ldbu	r2,54(r2)
 100e168:	e0bffb45 	stb	r2,-19(fp)
    bitx    =  ptcb->OSTCBBitX;
 100e16c:	e0bffe17 	ldw	r2,-8(fp)
 100e170:	10800d43 	ldbu	r2,53(r2)
 100e174:	e0bffb05 	stb	r2,-20(fp)
    pevents =  pevents_multi;
 100e178:	e0bfff17 	ldw	r2,-4(fp)
 100e17c:	e0bffd15 	stw	r2,-12(fp)
    pevent  = *pevents;
 100e180:	e0bffd17 	ldw	r2,-12(fp)
 100e184:	10800017 	ldw	r2,0(r2)
 100e188:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 100e18c:	00002606 	br	100e228 <OS_EventTaskRemoveMulti+0xf4>
        pevent->OSEventTbl[y]  &= ~bitx;
 100e190:	e13ffb83 	ldbu	r4,-18(fp)
 100e194:	e0fffb83 	ldbu	r3,-18(fp)
 100e198:	e0bffc17 	ldw	r2,-16(fp)
 100e19c:	1885883a 	add	r2,r3,r2
 100e1a0:	10800204 	addi	r2,r2,8
 100e1a4:	108000c3 	ldbu	r2,3(r2)
 100e1a8:	1007883a 	mov	r3,r2
 100e1ac:	e0bffb03 	ldbu	r2,-20(fp)
 100e1b0:	0084303a 	nor	r2,zero,r2
 100e1b4:	1884703a 	and	r2,r3,r2
 100e1b8:	1007883a 	mov	r3,r2
 100e1bc:	e0bffc17 	ldw	r2,-16(fp)
 100e1c0:	2085883a 	add	r2,r4,r2
 100e1c4:	10800204 	addi	r2,r2,8
 100e1c8:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
 100e1cc:	e0fffb83 	ldbu	r3,-18(fp)
 100e1d0:	e0bffc17 	ldw	r2,-16(fp)
 100e1d4:	1885883a 	add	r2,r3,r2
 100e1d8:	10800204 	addi	r2,r2,8
 100e1dc:	108000c3 	ldbu	r2,3(r2)
 100e1e0:	10803fcc 	andi	r2,r2,255
 100e1e4:	1004c03a 	cmpne	r2,r2,zero
 100e1e8:	1000091e 	bne	r2,zero,100e210 <OS_EventTaskRemoveMulti+0xdc>
            pevent->OSEventGrp &= ~bity;
 100e1ec:	e0bffc17 	ldw	r2,-16(fp)
 100e1f0:	10800283 	ldbu	r2,10(r2)
 100e1f4:	1007883a 	mov	r3,r2
 100e1f8:	e0bffb43 	ldbu	r2,-19(fp)
 100e1fc:	0084303a 	nor	r2,zero,r2
 100e200:	1884703a 	and	r2,r3,r2
 100e204:	1007883a 	mov	r3,r2
 100e208:	e0bffc17 	ldw	r2,-16(fp)
 100e20c:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
 100e210:	e0bffd17 	ldw	r2,-12(fp)
 100e214:	10800104 	addi	r2,r2,4
 100e218:	e0bffd15 	stw	r2,-12(fp)
        pevent = *pevents;
 100e21c:	e0bffd17 	ldw	r2,-12(fp)
 100e220:	10800017 	ldw	r2,0(r2)
 100e224:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 100e228:	e0bffc17 	ldw	r2,-16(fp)
 100e22c:	1004c03a 	cmpne	r2,r2,zero
 100e230:	103fd71e 	bne	r2,zero,100e190 <OS_EventTaskRemoveMulti+0x5c>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
 100e234:	e037883a 	mov	sp,fp
 100e238:	df000017 	ldw	fp,0(sp)
 100e23c:	dec00104 	addi	sp,sp,4
 100e240:	f800283a 	ret

0100e244 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
 100e244:	f811883a 	mov	r8,ra
 100e248:	100c1d00 	call	100c1d0 <_mcount>
 100e24c:	403f883a 	mov	ra,r8
 100e250:	defffc04 	addi	sp,sp,-16
 100e254:	df000315 	stw	fp,12(sp)
 100e258:	df000304 	addi	fp,sp,12
 100e25c:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
 100e260:	e0bfff17 	ldw	r2,-4(fp)
 100e264:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
 100e268:	e0bfff17 	ldw	r2,-4(fp)
 100e26c:	108002c4 	addi	r2,r2,11
 100e270:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 100e274:	e03ffd05 	stb	zero,-12(fp)
 100e278:	00000806 	br	100e29c <OS_EventWaitListInit+0x58>
        *ptbl++ = 0;
 100e27c:	e0bffe17 	ldw	r2,-8(fp)
 100e280:	10000005 	stb	zero,0(r2)
 100e284:	e0bffe17 	ldw	r2,-8(fp)
 100e288:	10800044 	addi	r2,r2,1
 100e28c:	e0bffe15 	stw	r2,-8(fp)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 100e290:	e0bffd03 	ldbu	r2,-12(fp)
 100e294:	10800044 	addi	r2,r2,1
 100e298:	e0bffd05 	stb	r2,-12(fp)
 100e29c:	e0bffd03 	ldbu	r2,-12(fp)
 100e2a0:	108000f0 	cmpltui	r2,r2,3
 100e2a4:	103ff51e 	bne	r2,zero,100e27c <OS_EventWaitListInit+0x38>
        *ptbl++ = 0;
    }
}
 100e2a8:	e037883a 	mov	sp,fp
 100e2ac:	df000017 	ldw	fp,0(sp)
 100e2b0:	dec00104 	addi	sp,sp,4
 100e2b4:	f800283a 	ret

0100e2b8 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
 100e2b8:	f811883a 	mov	r8,ra
 100e2bc:	100c1d00 	call	100c1d0 <_mcount>
 100e2c0:	403f883a 	mov	ra,r8
 100e2c4:	defffb04 	addi	sp,sp,-20
 100e2c8:	dfc00415 	stw	ra,16(sp)
 100e2cc:	df000315 	stw	fp,12(sp)
 100e2d0:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
 100e2d4:	01004134 	movhi	r4,260
 100e2d8:	211a5e04 	addi	r4,r4,27000
 100e2dc:	0142d004 	movi	r5,2880
 100e2e0:	100e6640 	call	100e664 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
 100e2e4:	00804134 	movhi	r2,260
 100e2e8:	109a5e04 	addi	r2,r2,27000
 100e2ec:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
 100e2f0:	00804134 	movhi	r2,260
 100e2f4:	109a6a04 	addi	r2,r2,27048
 100e2f8:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 100e2fc:	e03fff0d 	sth	zero,-4(fp)
 100e300:	00001306 	br	100e350 <OS_InitEventList+0x98>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
 100e304:	e0bffe17 	ldw	r2,-8(fp)
 100e308:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
 100e30c:	e0fffe17 	ldw	r3,-8(fp)
 100e310:	e0bffd17 	ldw	r2,-12(fp)
 100e314:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
 100e318:	e0fffe17 	ldw	r3,-8(fp)
 100e31c:	00800fc4 	movi	r2,63
 100e320:	18800385 	stb	r2,14(r3)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
 100e324:	e0bffe17 	ldw	r2,-8(fp)
 100e328:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
 100e32c:	e0bffe17 	ldw	r2,-8(fp)
 100e330:	10800c04 	addi	r2,r2,48
 100e334:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
 100e338:	e0bffd17 	ldw	r2,-12(fp)
 100e33c:	10800c04 	addi	r2,r2,48
 100e340:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 100e344:	e0bfff0b 	ldhu	r2,-4(fp)
 100e348:	10800044 	addi	r2,r2,1
 100e34c:	e0bfff0d 	sth	r2,-4(fp)
 100e350:	e0bfff0b 	ldhu	r2,-4(fp)
 100e354:	10800ef0 	cmpltui	r2,r2,59
 100e358:	103fea1e 	bne	r2,zero,100e304 <OS_InitEventList+0x4c>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
 100e35c:	e0bffe17 	ldw	r2,-8(fp)
 100e360:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
 100e364:	e0bffe17 	ldw	r2,-8(fp)
 100e368:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
 100e36c:	e0fffe17 	ldw	r3,-8(fp)
 100e370:	00800fc4 	movi	r2,63
 100e374:	18800385 	stb	r2,14(r3)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
 100e378:	e0bffe17 	ldw	r2,-8(fp)
 100e37c:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
 100e380:	00804134 	movhi	r2,260
 100e384:	109a5e04 	addi	r2,r2,27000
 100e388:	d0976f15 	stw	r2,23996(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
 100e38c:	e037883a 	mov	sp,fp
 100e390:	dfc00117 	ldw	ra,4(sp)
 100e394:	df000017 	ldw	fp,0(sp)
 100e398:	dec00204 	addi	sp,sp,8
 100e39c:	f800283a 	ret

0100e3a0 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
 100e3a0:	f811883a 	mov	r8,ra
 100e3a4:	100c1d00 	call	100c1d0 <_mcount>
 100e3a8:	403f883a 	mov	ra,r8
 100e3ac:	deffff04 	addi	sp,sp,-4
 100e3b0:	df000015 	stw	fp,0(sp)
 100e3b4:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
 100e3b8:	d0177315 	stw	zero,24012(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
 100e3bc:	d0177005 	stb	zero,24000(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
 100e3c0:	d0175f05 	stb	zero,23932(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
 100e3c4:	d0176a45 	stb	zero,23977(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
 100e3c8:	d0176105 	stb	zero,23940(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
 100e3cc:	d0176615 	stw	zero,23960(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
 100e3d0:	d0176215 	stw	zero,23944(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
 100e3d4:	d0177715 	stw	zero,24028(gp)
    OSIdleCtrMax  = 0L;
 100e3d8:	d0176815 	stw	zero,23968(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
 100e3dc:	d0177605 	stb	zero,24024(gp)
#endif
}
 100e3e0:	e037883a 	mov	sp,fp
 100e3e4:	df000017 	ldw	fp,0(sp)
 100e3e8:	dec00104 	addi	sp,sp,4
 100e3ec:	f800283a 	ret

0100e3f0 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
 100e3f0:	f811883a 	mov	r8,ra
 100e3f4:	100c1d00 	call	100c1d0 <_mcount>
 100e3f8:	403f883a 	mov	ra,r8
 100e3fc:	defffd04 	addi	sp,sp,-12
 100e400:	df000215 	stw	fp,8(sp)
 100e404:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
 100e408:	d0176e05 	stb	zero,23992(gp)
    prdytbl       = &OSRdyTbl[0];
 100e40c:	d0976e44 	addi	r2,gp,23993
 100e410:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 100e414:	e03fff05 	stb	zero,-4(fp)
 100e418:	00000806 	br	100e43c <OS_InitRdyList+0x4c>
        *prdytbl++ = 0;
 100e41c:	e0bffe17 	ldw	r2,-8(fp)
 100e420:	10000005 	stb	zero,0(r2)
 100e424:	e0bffe17 	ldw	r2,-8(fp)
 100e428:	10800044 	addi	r2,r2,1
 100e42c:	e0bffe15 	stw	r2,-8(fp)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 100e430:	e0bfff03 	ldbu	r2,-4(fp)
 100e434:	10800044 	addi	r2,r2,1
 100e438:	e0bfff05 	stb	r2,-4(fp)
 100e43c:	e0bfff03 	ldbu	r2,-4(fp)
 100e440:	108000f0 	cmpltui	r2,r2,3
 100e444:	103ff51e 	bne	r2,zero,100e41c <OS_InitRdyList+0x2c>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
 100e448:	d01763c5 	stb	zero,23951(gp)
    OSPrioHighRdy = 0;
 100e44c:	d0176385 	stb	zero,23950(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
 100e450:	d0176c15 	stw	zero,23984(gp)
    OSTCBCur      = (OS_TCB *)0;
 100e454:	d0177115 	stw	zero,24004(gp)
}
 100e458:	e037883a 	mov	sp,fp
 100e45c:	df000017 	ldw	fp,0(sp)
 100e460:	dec00104 	addi	sp,sp,4
 100e464:	f800283a 	ret

0100e468 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
 100e468:	f811883a 	mov	r8,ra
 100e46c:	100c1d00 	call	100c1d0 <_mcount>
 100e470:	403f883a 	mov	ra,r8
 100e474:	defff804 	addi	sp,sp,-32
 100e478:	dfc00715 	stw	ra,28(sp)
 100e47c:	df000615 	stw	fp,24(sp)
 100e480:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
 100e484:	01804134 	movhi	r6,260
 100e488:	319a5d04 	addi	r6,r6,26996
 100e48c:	00bfffd4 	movui	r2,65535
 100e490:	d8800015 	stw	r2,0(sp)
 100e494:	00804134 	movhi	r2,260
 100e498:	10985e04 	addi	r2,r2,24952
 100e49c:	d8800115 	stw	r2,4(sp)
 100e4a0:	00808004 	movi	r2,512
 100e4a4:	d8800215 	stw	r2,8(sp)
 100e4a8:	d8000315 	stw	zero,12(sp)
 100e4ac:	008000c4 	movi	r2,3
 100e4b0:	d8800415 	stw	r2,16(sp)
 100e4b4:	01004074 	movhi	r4,257
 100e4b8:	213a6204 	addi	r4,r4,-5752
 100e4bc:	000b883a 	mov	r5,zero
 100e4c0:	01c00504 	movi	r7,20
 100e4c4:	10139f40 	call	10139f4 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
 100e4c8:	014040b4 	movhi	r5,258
 100e4cc:	29684304 	addi	r5,r5,-24308
 100e4d0:	01000504 	movi	r4,20
 100e4d4:	e1bfff04 	addi	r6,fp,-4
 100e4d8:	10143580 	call	1014358 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
 100e4dc:	e037883a 	mov	sp,fp
 100e4e0:	dfc00117 	ldw	ra,4(sp)
 100e4e4:	df000017 	ldw	fp,0(sp)
 100e4e8:	dec00204 	addi	sp,sp,8
 100e4ec:	f800283a 	ret

0100e4f0 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
 100e4f0:	f811883a 	mov	r8,ra
 100e4f4:	100c1d00 	call	100c1d0 <_mcount>
 100e4f8:	403f883a 	mov	ra,r8
 100e4fc:	defff804 	addi	sp,sp,-32
 100e500:	dfc00715 	stw	ra,28(sp)
 100e504:	df000615 	stw	fp,24(sp)
 100e508:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
 100e50c:	01804134 	movhi	r6,260
 100e510:	3195e504 	addi	r6,r6,22420
 100e514:	00bfff94 	movui	r2,65534
 100e518:	d8800015 	stw	r2,0(sp)
 100e51c:	00804134 	movhi	r2,260
 100e520:	1093e604 	addi	r2,r2,20376
 100e524:	d8800115 	stw	r2,4(sp)
 100e528:	00808004 	movi	r2,512
 100e52c:	d8800215 	stw	r2,8(sp)
 100e530:	d8000315 	stw	zero,12(sp)
 100e534:	008000c4 	movi	r2,3
 100e538:	d8800415 	stw	r2,16(sp)
 100e53c:	01004074 	movhi	r4,257
 100e540:	213a7c04 	addi	r4,r4,-5648
 100e544:	000b883a 	mov	r5,zero
 100e548:	01c004c4 	movi	r7,19
 100e54c:	10139f40 	call	10139f4 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
 100e550:	014040b4 	movhi	r5,258
 100e554:	29684704 	addi	r5,r5,-24292
 100e558:	010004c4 	movi	r4,19
 100e55c:	e1bfff04 	addi	r6,fp,-4
 100e560:	10143580 	call	1014358 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
 100e564:	e037883a 	mov	sp,fp
 100e568:	dfc00117 	ldw	ra,4(sp)
 100e56c:	df000017 	ldw	fp,0(sp)
 100e570:	dec00204 	addi	sp,sp,8
 100e574:	f800283a 	ret

0100e578 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
 100e578:	f811883a 	mov	r8,ra
 100e57c:	100c1d00 	call	100c1d0 <_mcount>
 100e580:	403f883a 	mov	ra,r8
 100e584:	defffb04 	addi	sp,sp,-20
 100e588:	dfc00415 	stw	ra,16(sp)
 100e58c:	df000315 	stw	fp,12(sp)
 100e590:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
 100e594:	01004134 	movhi	r4,260
 100e598:	211d2e04 	addi	r4,r4,29880
 100e59c:	01414404 	movi	r5,1296
 100e5a0:	100e6640 	call	100e664 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
 100e5a4:	01004134 	movhi	r4,260
 100e5a8:	211e7204 	addi	r4,r4,31176
 100e5ac:	01401504 	movi	r5,84
 100e5b0:	100e6640 	call	100e664 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
 100e5b4:	00804134 	movhi	r2,260
 100e5b8:	109d2e04 	addi	r2,r2,29880
 100e5bc:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
 100e5c0:	00804134 	movhi	r2,260
 100e5c4:	109d4904 	addi	r2,r2,29988
 100e5c8:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 100e5cc:	e03fff05 	stb	zero,-4(fp)
 100e5d0:	00001106 	br	100e618 <OS_InitTCBList+0xa0>
        ptcb1->OSTCBNext = ptcb2;
 100e5d4:	e0fffe17 	ldw	r3,-8(fp)
 100e5d8:	e0bffd17 	ldw	r2,-12(fp)
 100e5dc:	18800515 	stw	r2,20(r3)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
 100e5e0:	e0fffe17 	ldw	r3,-8(fp)
 100e5e4:	00800fc4 	movi	r2,63
 100e5e8:	18801305 	stb	r2,76(r3)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 100e5ec:	e0bffe17 	ldw	r2,-8(fp)
 100e5f0:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
 100e5f4:	e0bffe17 	ldw	r2,-8(fp)
 100e5f8:	10801b04 	addi	r2,r2,108
 100e5fc:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
 100e600:	e0bffd17 	ldw	r2,-12(fp)
 100e604:	10801b04 	addi	r2,r2,108
 100e608:	e0bffd15 	stw	r2,-12(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 100e60c:	e0bfff03 	ldbu	r2,-4(fp)
 100e610:	10800044 	addi	r2,r2,1
 100e614:	e0bfff05 	stb	r2,-4(fp)
 100e618:	e0bfff03 	ldbu	r2,-4(fp)
 100e61c:	108002f0 	cmpltui	r2,r2,11
 100e620:	103fec1e 	bne	r2,zero,100e5d4 <OS_InitTCBList+0x5c>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
 100e624:	e0bffe17 	ldw	r2,-8(fp)
 100e628:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
 100e62c:	e0fffe17 	ldw	r3,-8(fp)
 100e630:	00800fc4 	movi	r2,63
 100e634:	18801305 	stb	r2,76(r3)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 100e638:	e0bffe17 	ldw	r2,-8(fp)
 100e63c:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
 100e640:	d0176415 	stw	zero,23952(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
 100e644:	00804134 	movhi	r2,260
 100e648:	109d2e04 	addi	r2,r2,29880
 100e64c:	d0976915 	stw	r2,23972(gp)
}
 100e650:	e037883a 	mov	sp,fp
 100e654:	dfc00117 	ldw	ra,4(sp)
 100e658:	df000017 	ldw	fp,0(sp)
 100e65c:	dec00204 	addi	sp,sp,8
 100e660:	f800283a 	ret

0100e664 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
 100e664:	f811883a 	mov	r8,ra
 100e668:	100c1d00 	call	100c1d0 <_mcount>
 100e66c:	403f883a 	mov	ra,r8
 100e670:	defffd04 	addi	sp,sp,-12
 100e674:	df000215 	stw	fp,8(sp)
 100e678:	df000204 	addi	fp,sp,8
 100e67c:	e13ffe15 	stw	r4,-8(fp)
 100e680:	e17fff0d 	sth	r5,-4(fp)
    while (size > 0) {
 100e684:	00000806 	br	100e6a8 <OS_MemClr+0x44>
        *pdest++ = (INT8U)0;
 100e688:	e0bffe17 	ldw	r2,-8(fp)
 100e68c:	10000005 	stb	zero,0(r2)
 100e690:	e0bffe17 	ldw	r2,-8(fp)
 100e694:	10800044 	addi	r2,r2,1
 100e698:	e0bffe15 	stw	r2,-8(fp)
        size--;
 100e69c:	e0bfff0b 	ldhu	r2,-4(fp)
 100e6a0:	10bfffc4 	addi	r2,r2,-1
 100e6a4:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
 100e6a8:	e0bfff0b 	ldhu	r2,-4(fp)
 100e6ac:	1004c03a 	cmpne	r2,r2,zero
 100e6b0:	103ff51e 	bne	r2,zero,100e688 <OS_MemClr+0x24>
        *pdest++ = (INT8U)0;
        size--;
    }
}
 100e6b4:	e037883a 	mov	sp,fp
 100e6b8:	df000017 	ldw	fp,0(sp)
 100e6bc:	dec00104 	addi	sp,sp,4
 100e6c0:	f800283a 	ret

0100e6c4 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
 100e6c4:	f811883a 	mov	r8,ra
 100e6c8:	100c1d00 	call	100c1d0 <_mcount>
 100e6cc:	403f883a 	mov	ra,r8
 100e6d0:	defffc04 	addi	sp,sp,-16
 100e6d4:	df000315 	stw	fp,12(sp)
 100e6d8:	df000304 	addi	fp,sp,12
 100e6dc:	e13ffd15 	stw	r4,-12(fp)
 100e6e0:	e17ffe15 	stw	r5,-8(fp)
 100e6e4:	e1bfff0d 	sth	r6,-4(fp)
    while (size > 0) {
 100e6e8:	00000d06 	br	100e720 <OS_MemCopy+0x5c>
        *pdest++ = *psrc++;
 100e6ec:	e0bffe17 	ldw	r2,-8(fp)
 100e6f0:	10c00003 	ldbu	r3,0(r2)
 100e6f4:	e0bffd17 	ldw	r2,-12(fp)
 100e6f8:	10c00005 	stb	r3,0(r2)
 100e6fc:	e0bffd17 	ldw	r2,-12(fp)
 100e700:	10800044 	addi	r2,r2,1
 100e704:	e0bffd15 	stw	r2,-12(fp)
 100e708:	e0bffe17 	ldw	r2,-8(fp)
 100e70c:	10800044 	addi	r2,r2,1
 100e710:	e0bffe15 	stw	r2,-8(fp)
        size--;
 100e714:	e0bfff0b 	ldhu	r2,-4(fp)
 100e718:	10bfffc4 	addi	r2,r2,-1
 100e71c:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
 100e720:	e0bfff0b 	ldhu	r2,-4(fp)
 100e724:	1004c03a 	cmpne	r2,r2,zero
 100e728:	103ff01e 	bne	r2,zero,100e6ec <OS_MemCopy+0x28>
        *pdest++ = *psrc++;
        size--;
    }
}
 100e72c:	e037883a 	mov	sp,fp
 100e730:	df000017 	ldw	fp,0(sp)
 100e734:	dec00104 	addi	sp,sp,4
 100e738:	f800283a 	ret

0100e73c <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
 100e73c:	f811883a 	mov	r8,ra
 100e740:	100c1d00 	call	100c1d0 <_mcount>
 100e744:	403f883a 	mov	ra,r8
 100e748:	defffb04 	addi	sp,sp,-20
 100e74c:	dfc00415 	stw	ra,16(sp)
 100e750:	df000315 	stw	fp,12(sp)
 100e754:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 100e758:	e03fff15 	stw	zero,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100e75c:	0005303a 	rdctl	r2,status
 100e760:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100e764:	e0fffe17 	ldw	r3,-8(fp)
 100e768:	00bfff84 	movi	r2,-2
 100e76c:	1884703a 	and	r2,r3,r2
 100e770:	1001703a 	wrctl	status,r2
  
  return context;
 100e774:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
 100e778:	e0bfff15 	stw	r2,-4(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
 100e77c:	d0977003 	ldbu	r2,24000(gp)
 100e780:	10803fcc 	andi	r2,r2,255
 100e784:	1004c03a 	cmpne	r2,r2,zero
 100e788:	10001b1e 	bne	r2,zero,100e7f8 <OS_Sched+0xbc>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
 100e78c:	d0975f03 	ldbu	r2,23932(gp)
 100e790:	10803fcc 	andi	r2,r2,255
 100e794:	1004c03a 	cmpne	r2,r2,zero
 100e798:	1000171e 	bne	r2,zero,100e7f8 <OS_Sched+0xbc>
            OS_SchedNew();
 100e79c:	100e81c0 	call	100e81c <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
 100e7a0:	d0976383 	ldbu	r2,23950(gp)
 100e7a4:	d0d763c3 	ldbu	r3,23951(gp)
 100e7a8:	11003fcc 	andi	r4,r2,255
 100e7ac:	18803fcc 	andi	r2,r3,255
 100e7b0:	20801126 	beq	r4,r2,100e7f8 <OS_Sched+0xbc>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 100e7b4:	d0976383 	ldbu	r2,23950(gp)
 100e7b8:	10803fcc 	andi	r2,r2,255
 100e7bc:	00c04134 	movhi	r3,260
 100e7c0:	18de7204 	addi	r3,r3,31176
 100e7c4:	1085883a 	add	r2,r2,r2
 100e7c8:	1085883a 	add	r2,r2,r2
 100e7cc:	10c5883a 	add	r2,r2,r3
 100e7d0:	10800017 	ldw	r2,0(r2)
 100e7d4:	d0976c15 	stw	r2,23984(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
 100e7d8:	d0d76c17 	ldw	r3,23984(gp)
 100e7dc:	18800e17 	ldw	r2,56(r3)
 100e7e0:	10800044 	addi	r2,r2,1
 100e7e4:	18800e15 	stw	r2,56(r3)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
 100e7e8:	d0976617 	ldw	r2,23960(gp)
 100e7ec:	10800044 	addi	r2,r2,1
 100e7f0:	d0976615 	stw	r2,23960(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
 100e7f4:	1018e400 	call	1018e40 <OSCtxSw>
 100e7f8:	e0bfff17 	ldw	r2,-4(fp)
 100e7fc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100e800:	e0bffd17 	ldw	r2,-12(fp)
 100e804:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
 100e808:	e037883a 	mov	sp,fp
 100e80c:	dfc00117 	ldw	ra,4(sp)
 100e810:	df000017 	ldw	fp,0(sp)
 100e814:	dec00204 	addi	sp,sp,8
 100e818:	f800283a 	ret

0100e81c <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
 100e81c:	f811883a 	mov	r8,ra
 100e820:	100c1d00 	call	100c1d0 <_mcount>
 100e824:	403f883a 	mov	ra,r8
 100e828:	defffe04 	addi	sp,sp,-8
 100e82c:	df000115 	stw	fp,4(sp)
 100e830:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
 100e834:	d0976e03 	ldbu	r2,23992(gp)
 100e838:	10c03fcc 	andi	r3,r2,255
 100e83c:	008040b4 	movhi	r2,258
 100e840:	10a80304 	addi	r2,r2,-24564
 100e844:	10c5883a 	add	r2,r2,r3
 100e848:	10800003 	ldbu	r2,0(r2)
 100e84c:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
 100e850:	e0bfff03 	ldbu	r2,-4(fp)
 100e854:	100490fa 	slli	r2,r2,3
 100e858:	1009883a 	mov	r4,r2
 100e85c:	e0ffff03 	ldbu	r3,-4(fp)
 100e860:	d0976e44 	addi	r2,gp,23993
 100e864:	1885883a 	add	r2,r3,r2
 100e868:	10800003 	ldbu	r2,0(r2)
 100e86c:	10c03fcc 	andi	r3,r2,255
 100e870:	008040b4 	movhi	r2,258
 100e874:	10a80304 	addi	r2,r2,-24564
 100e878:	10c5883a 	add	r2,r2,r3
 100e87c:	10800003 	ldbu	r2,0(r2)
 100e880:	2085883a 	add	r2,r4,r2
 100e884:	d0976385 	stb	r2,23950(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
 100e888:	e037883a 	mov	sp,fp
 100e88c:	df000017 	ldw	fp,0(sp)
 100e890:	dec00104 	addi	sp,sp,4
 100e894:	f800283a 	ret

0100e898 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
 100e898:	f811883a 	mov	r8,ra
 100e89c:	100c1d00 	call	100c1d0 <_mcount>
 100e8a0:	403f883a 	mov	ra,r8
 100e8a4:	defffc04 	addi	sp,sp,-16
 100e8a8:	df000315 	stw	fp,12(sp)
 100e8ac:	df000304 	addi	fp,sp,12
 100e8b0:	e13ffe15 	stw	r4,-8(fp)
 100e8b4:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
 100e8b8:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
 100e8bc:	00000d06 	br	100e8f4 <OS_StrCopy+0x5c>
        *pdest++ = *psrc++;
 100e8c0:	e0bfff17 	ldw	r2,-4(fp)
 100e8c4:	10c00003 	ldbu	r3,0(r2)
 100e8c8:	e0bffe17 	ldw	r2,-8(fp)
 100e8cc:	10c00005 	stb	r3,0(r2)
 100e8d0:	e0bffe17 	ldw	r2,-8(fp)
 100e8d4:	10800044 	addi	r2,r2,1
 100e8d8:	e0bffe15 	stw	r2,-8(fp)
 100e8dc:	e0bfff17 	ldw	r2,-4(fp)
 100e8e0:	10800044 	addi	r2,r2,1
 100e8e4:	e0bfff15 	stw	r2,-4(fp)
        len++;
 100e8e8:	e0bffd03 	ldbu	r2,-12(fp)
 100e8ec:	10800044 	addi	r2,r2,1
 100e8f0:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 100e8f4:	e0bfff17 	ldw	r2,-4(fp)
 100e8f8:	10800003 	ldbu	r2,0(r2)
 100e8fc:	10803fcc 	andi	r2,r2,255
 100e900:	1004c03a 	cmpne	r2,r2,zero
 100e904:	103fee1e 	bne	r2,zero,100e8c0 <OS_StrCopy+0x28>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
 100e908:	e0bffe17 	ldw	r2,-8(fp)
 100e90c:	10000005 	stb	zero,0(r2)
    return (len);
 100e910:	e0bffd03 	ldbu	r2,-12(fp)
}
 100e914:	e037883a 	mov	sp,fp
 100e918:	df000017 	ldw	fp,0(sp)
 100e91c:	dec00104 	addi	sp,sp,4
 100e920:	f800283a 	ret

0100e924 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
 100e924:	f811883a 	mov	r8,ra
 100e928:	100c1d00 	call	100c1d0 <_mcount>
 100e92c:	403f883a 	mov	ra,r8
 100e930:	defffd04 	addi	sp,sp,-12
 100e934:	df000215 	stw	fp,8(sp)
 100e938:	df000204 	addi	fp,sp,8
 100e93c:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
 100e940:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
 100e944:	00000606 	br	100e960 <OS_StrLen+0x3c>
        psrc++;
 100e948:	e0bfff17 	ldw	r2,-4(fp)
 100e94c:	10800044 	addi	r2,r2,1
 100e950:	e0bfff15 	stw	r2,-4(fp)
        len++;
 100e954:	e0bffe03 	ldbu	r2,-8(fp)
 100e958:	10800044 	addi	r2,r2,1
 100e95c:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 100e960:	e0bfff17 	ldw	r2,-4(fp)
 100e964:	10800003 	ldbu	r2,0(r2)
 100e968:	10803fcc 	andi	r2,r2,255
 100e96c:	1004c03a 	cmpne	r2,r2,zero
 100e970:	103ff51e 	bne	r2,zero,100e948 <OS_StrLen+0x24>
        psrc++;
        len++;
    }
    return (len);
 100e974:	e0bffe03 	ldbu	r2,-8(fp)
}
 100e978:	e037883a 	mov	sp,fp
 100e97c:	df000017 	ldw	fp,0(sp)
 100e980:	dec00104 	addi	sp,sp,4
 100e984:	f800283a 	ret

0100e988 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
 100e988:	f811883a 	mov	r8,ra
 100e98c:	100c1d00 	call	100c1d0 <_mcount>
 100e990:	403f883a 	mov	ra,r8
 100e994:	defffa04 	addi	sp,sp,-24
 100e998:	dfc00515 	stw	ra,20(sp)
 100e99c:	df000415 	stw	fp,16(sp)
 100e9a0:	df000404 	addi	fp,sp,16
 100e9a4:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 100e9a8:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100e9ac:	0005303a 	rdctl	r2,status
 100e9b0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100e9b4:	e0fffd17 	ldw	r3,-12(fp)
 100e9b8:	00bfff84 	movi	r2,-2
 100e9bc:	1884703a 	and	r2,r3,r2
 100e9c0:	1001703a 	wrctl	status,r2
  
  return context;
 100e9c4:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
 100e9c8:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtr++;
 100e9cc:	d0976217 	ldw	r2,23944(gp)
 100e9d0:	10800044 	addi	r2,r2,1
 100e9d4:	d0976215 	stw	r2,23944(gp)
 100e9d8:	e0bffe17 	ldw	r2,-8(fp)
 100e9dc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100e9e0:	e0bffc17 	ldw	r2,-16(fp)
 100e9e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
 100e9e8:	10193a00 	call	10193a0 <OSTaskIdleHook>
    }
 100e9ec:	003fef06 	br	100e9ac <OS_TaskIdle+0x24>

0100e9f0 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
 100e9f0:	f811883a 	mov	r8,ra
 100e9f4:	100c1d00 	call	100c1d0 <_mcount>
 100e9f8:	403f883a 	mov	ra,r8
 100e9fc:	defffa04 	addi	sp,sp,-24
 100ea00:	dfc00515 	stw	ra,20(sp)
 100ea04:	df000415 	stw	fp,16(sp)
 100ea08:	df000404 	addi	fp,sp,16
 100ea0c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 100ea10:	e03ffe15 	stw	zero,-8(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 100ea14:	00000206 	br	100ea20 <OS_TaskStat+0x30>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
 100ea18:	01003204 	movi	r4,200
 100ea1c:	1014d640 	call	1014d64 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 100ea20:	d0977603 	ldbu	r2,24024(gp)
 100ea24:	10803fcc 	andi	r2,r2,255
 100ea28:	1005003a 	cmpeq	r2,r2,zero
 100ea2c:	103ffa1e 	bne	r2,zero,100ea18 <OS_TaskStat+0x28>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
 100ea30:	d1176817 	ldw	r4,23968(gp)
 100ea34:	01401904 	movi	r5,100
 100ea38:	10021b80 	call	10021b8 <__udivsi3>
 100ea3c:	d0976815 	stw	r2,23968(gp)
    if (OSIdleCtrMax == 0L) {
 100ea40:	d0976817 	ldw	r2,23968(gp)
 100ea44:	1004c03a 	cmpne	r2,r2,zero
 100ea48:	1000031e 	bne	r2,zero,100ea58 <OS_TaskStat+0x68>
        OSCPUUsage = 0;
 100ea4c:	d0176a05 	stb	zero,23976(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
 100ea50:	01003fc4 	movi	r4,255
 100ea54:	10149540 	call	1014954 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100ea58:	0005303a 	rdctl	r2,status
 100ea5c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100ea60:	e0fffd17 	ldw	r3,-12(fp)
 100ea64:	00bfff84 	movi	r2,-2
 100ea68:	1884703a 	and	r2,r3,r2
 100ea6c:	1001703a 	wrctl	status,r2
  
  return context;
 100ea70:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
 100ea74:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
 100ea78:	d0976217 	ldw	r2,23944(gp)
 100ea7c:	d0977715 	stw	r2,24028(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
 100ea80:	d0176215 	stw	zero,23944(gp)
 100ea84:	e0bffe17 	ldw	r2,-8(fp)
 100ea88:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100ea8c:	e0bffc17 	ldw	r2,-16(fp)
 100ea90:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
 100ea94:	d1177717 	ldw	r4,24028(gp)
 100ea98:	d1576817 	ldw	r5,23968(gp)
 100ea9c:	10021b80 	call	10021b8 <__udivsi3>
 100eaa0:	1007883a 	mov	r3,r2
 100eaa4:	00801904 	movi	r2,100
 100eaa8:	10c5c83a 	sub	r2,r2,r3
 100eaac:	d0976a05 	stb	r2,23976(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
 100eab0:	10192ac0 	call	10192ac <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
 100eab4:	100eac40 	call	100eac4 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
 100eab8:	01001904 	movi	r4,100
 100eabc:	1014d640 	call	1014d64 <OSTimeDly>
    }
 100eac0:	003fe506 	br	100ea58 <OS_TaskStat+0x68>

0100eac4 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
 100eac4:	f811883a 	mov	r8,ra
 100eac8:	100c1d00 	call	100c1d0 <_mcount>
 100eacc:	403f883a 	mov	ra,r8
 100ead0:	defffa04 	addi	sp,sp,-24
 100ead4:	dfc00515 	stw	ra,20(sp)
 100ead8:	df000415 	stw	fp,16(sp)
 100eadc:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 100eae0:	e03ffc05 	stb	zero,-16(fp)
 100eae4:	00002406 	br	100eb78 <OS_TaskStatStkChk+0xb4>
        err = OSTaskStkChk(prio, &stk_data);
 100eae8:	e13ffc03 	ldbu	r4,-16(fp)
 100eaec:	e17ffe04 	addi	r5,fp,-8
 100eaf0:	101474c0 	call	101474c <OSTaskStkChk>
 100eaf4:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
 100eaf8:	e0bffc43 	ldbu	r2,-15(fp)
 100eafc:	1004c03a 	cmpne	r2,r2,zero
 100eb00:	10001a1e 	bne	r2,zero,100eb6c <OS_TaskStatStkChk+0xa8>
            ptcb = OSTCBPrioTbl[prio];
 100eb04:	e0bffc03 	ldbu	r2,-16(fp)
 100eb08:	00c04134 	movhi	r3,260
 100eb0c:	18de7204 	addi	r3,r3,31176
 100eb10:	1085883a 	add	r2,r2,r2
 100eb14:	1085883a 	add	r2,r2,r2
 100eb18:	10c5883a 	add	r2,r2,r3
 100eb1c:	10800017 	ldw	r2,0(r2)
 100eb20:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
 100eb24:	e0bffd17 	ldw	r2,-12(fp)
 100eb28:	1005003a 	cmpeq	r2,r2,zero
 100eb2c:	10000f1e 	bne	r2,zero,100eb6c <OS_TaskStatStkChk+0xa8>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
 100eb30:	e0bffd17 	ldw	r2,-12(fp)
 100eb34:	10800060 	cmpeqi	r2,r2,1
 100eb38:	10000c1e 	bne	r2,zero,100eb6c <OS_TaskStatStkChk+0xa8>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
 100eb3c:	e0bffd17 	ldw	r2,-12(fp)
 100eb40:	10c00217 	ldw	r3,8(r2)
 100eb44:	e0bffd17 	ldw	r2,-12(fp)
 100eb48:	10800317 	ldw	r2,12(r2)
 100eb4c:	1085883a 	add	r2,r2,r2
 100eb50:	1085883a 	add	r2,r2,r2
 100eb54:	1887883a 	add	r3,r3,r2
 100eb58:	e0bffd17 	ldw	r2,-12(fp)
 100eb5c:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
 100eb60:	e0ffff17 	ldw	r3,-4(fp)
 100eb64:	e0bffd17 	ldw	r2,-12(fp)
 100eb68:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 100eb6c:	e0bffc03 	ldbu	r2,-16(fp)
 100eb70:	10800044 	addi	r2,r2,1
 100eb74:	e0bffc05 	stb	r2,-16(fp)
 100eb78:	e0bffc03 	ldbu	r2,-16(fp)
 100eb7c:	10800570 	cmpltui	r2,r2,21
 100eb80:	103fd91e 	bne	r2,zero,100eae8 <OS_TaskStatStkChk+0x24>
#endif
                }
            }
        }
    }
}
 100eb84:	e037883a 	mov	sp,fp
 100eb88:	dfc00117 	ldw	ra,4(sp)
 100eb8c:	df000017 	ldw	fp,0(sp)
 100eb90:	dec00204 	addi	sp,sp,8
 100eb94:	f800283a 	ret

0100eb98 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
 100eb98:	f811883a 	mov	r8,ra
 100eb9c:	100c1d00 	call	100c1d0 <_mcount>
 100eba0:	403f883a 	mov	ra,r8
 100eba4:	defff104 	addi	sp,sp,-60
 100eba8:	dfc00e15 	stw	ra,56(sp)
 100ebac:	df000d15 	stw	fp,52(sp)
 100ebb0:	df000d04 	addi	fp,sp,52
 100ebb4:	e17ffb15 	stw	r5,-20(fp)
 100ebb8:	e1bffc15 	stw	r6,-16(fp)
 100ebbc:	e0800417 	ldw	r2,16(fp)
 100ebc0:	e13ffa05 	stb	r4,-24(fp)
 100ebc4:	e1fffd0d 	sth	r7,-12(fp)
 100ebc8:	e0bffe0d 	sth	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 100ebcc:	e03ff815 	stw	zero,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100ebd0:	0005303a 	rdctl	r2,status
 100ebd4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100ebd8:	e0fff717 	ldw	r3,-36(fp)
 100ebdc:	00bfff84 	movi	r2,-2
 100ebe0:	1884703a 	and	r2,r3,r2
 100ebe4:	1001703a 	wrctl	status,r2
  
  return context;
 100ebe8:	e0bff717 	ldw	r2,-36(fp)
#endif



    OS_ENTER_CRITICAL();
 100ebec:	e0bff815 	stw	r2,-32(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
 100ebf0:	d0976917 	ldw	r2,23972(gp)
 100ebf4:	e0bff915 	stw	r2,-28(fp)
    if (ptcb != (OS_TCB *)0) {
 100ebf8:	e0bff917 	ldw	r2,-28(fp)
 100ebfc:	1005003a 	cmpeq	r2,r2,zero
 100ec00:	1000941e 	bne	r2,zero,100ee54 <OS_TCBInit+0x2bc>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
 100ec04:	e0bff917 	ldw	r2,-28(fp)
 100ec08:	10800517 	ldw	r2,20(r2)
 100ec0c:	d0976915 	stw	r2,23972(gp)
 100ec10:	e0bff817 	ldw	r2,-32(fp)
 100ec14:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100ec18:	e0bff617 	ldw	r2,-40(fp)
 100ec1c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
 100ec20:	e0fff917 	ldw	r3,-28(fp)
 100ec24:	e0bffb17 	ldw	r2,-20(fp)
 100ec28:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
 100ec2c:	e0fff917 	ldw	r3,-28(fp)
 100ec30:	e0bffa03 	ldbu	r2,-24(fp)
 100ec34:	18800c85 	stb	r2,50(r3)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
 100ec38:	e0bff917 	ldw	r2,-28(fp)
 100ec3c:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
 100ec40:	e0bff917 	ldw	r2,-28(fp)
 100ec44:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
 100ec48:	e0bff917 	ldw	r2,-28(fp)
 100ec4c:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
 100ec50:	e0fff917 	ldw	r3,-28(fp)
 100ec54:	e0800317 	ldw	r2,12(fp)
 100ec58:	18800115 	stw	r2,4(r3)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
 100ec5c:	e0fff917 	ldw	r3,-28(fp)
 100ec60:	e0800217 	ldw	r2,8(fp)
 100ec64:	18800315 	stw	r2,12(r3)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
 100ec68:	e0fff917 	ldw	r3,-28(fp)
 100ec6c:	e0bffc17 	ldw	r2,-16(fp)
 100ec70:	18800215 	stw	r2,8(r3)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
 100ec74:	e0fff917 	ldw	r3,-28(fp)
 100ec78:	e0bffe0b 	ldhu	r2,-8(fp)
 100ec7c:	1880040d 	sth	r2,16(r3)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
 100ec80:	e0fff917 	ldw	r3,-28(fp)
 100ec84:	e0bffd0b 	ldhu	r2,-12(fp)
 100ec88:	1880048d 	sth	r2,18(r3)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
 100ec8c:	e0bff917 	ldw	r2,-28(fp)
 100ec90:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
 100ec94:	e0bffa03 	ldbu	r2,-24(fp)
 100ec98:	1004d0fa 	srli	r2,r2,3
 100ec9c:	1007883a 	mov	r3,r2
 100eca0:	e0bff917 	ldw	r2,-28(fp)
 100eca4:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
 100eca8:	e0bffa03 	ldbu	r2,-24(fp)
 100ecac:	108001cc 	andi	r2,r2,7
 100ecb0:	1007883a 	mov	r3,r2
 100ecb4:	e0bff917 	ldw	r2,-28(fp)
 100ecb8:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
 100ecbc:	e0bff917 	ldw	r2,-28(fp)
 100ecc0:	10800d03 	ldbu	r2,52(r2)
 100ecc4:	10c03fcc 	andi	r3,r2,255
 100ecc8:	00800044 	movi	r2,1
 100eccc:	10c4983a 	sll	r2,r2,r3
 100ecd0:	1007883a 	mov	r3,r2
 100ecd4:	e0bff917 	ldw	r2,-28(fp)
 100ecd8:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
 100ecdc:	e0bff917 	ldw	r2,-28(fp)
 100ece0:	10800cc3 	ldbu	r2,51(r2)
 100ece4:	10c03fcc 	andi	r3,r2,255
 100ece8:	00800044 	movi	r2,1
 100ecec:	10c4983a 	sll	r2,r2,r3
 100ecf0:	1007883a 	mov	r3,r2
 100ecf4:	e0bff917 	ldw	r2,-28(fp)
 100ecf8:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
 100ecfc:	e0bff917 	ldw	r2,-28(fp)
 100ed00:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
 100ed04:	e0bff917 	ldw	r2,-28(fp)
 100ed08:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
 100ed0c:	e0bff917 	ldw	r2,-28(fp)
 100ed10:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
 100ed14:	e0bff917 	ldw	r2,-28(fp)
 100ed18:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
 100ed1c:	e0bff917 	ldw	r2,-28(fp)
 100ed20:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
 100ed24:	e0bff917 	ldw	r2,-28(fp)
 100ed28:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
 100ed2c:	e0bff917 	ldw	r2,-28(fp)
 100ed30:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
 100ed34:	e0bff917 	ldw	r2,-28(fp)
 100ed38:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
 100ed3c:	e0bff917 	ldw	r2,-28(fp)
 100ed40:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
 100ed44:	e0fff917 	ldw	r3,-28(fp)
 100ed48:	00800fc4 	movi	r2,63
 100ed4c:	18801305 	stb	r2,76(r3)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 100ed50:	e0bff917 	ldw	r2,-28(fp)
 100ed54:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
 100ed58:	e13ff917 	ldw	r4,-28(fp)
 100ed5c:	10193c80 	call	10193c8 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
 100ed60:	e13ff917 	ldw	r4,-28(fp)
 100ed64:	101922c0 	call	101922c <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100ed68:	0005303a 	rdctl	r2,status
 100ed6c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100ed70:	e0fff517 	ldw	r3,-44(fp)
 100ed74:	00bfff84 	movi	r2,-2
 100ed78:	1884703a 	and	r2,r3,r2
 100ed7c:	1001703a 	wrctl	status,r2
  
  return context;
 100ed80:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
 100ed84:	e0bff815 	stw	r2,-32(fp)
        OSTCBPrioTbl[prio] = ptcb;
 100ed88:	e0bffa03 	ldbu	r2,-24(fp)
 100ed8c:	00c04134 	movhi	r3,260
 100ed90:	18de7204 	addi	r3,r3,31176
 100ed94:	1085883a 	add	r2,r2,r2
 100ed98:	1085883a 	add	r2,r2,r2
 100ed9c:	10c7883a 	add	r3,r2,r3
 100eda0:	e0bff917 	ldw	r2,-28(fp)
 100eda4:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
 100eda8:	d0d76417 	ldw	r3,23952(gp)
 100edac:	e0bff917 	ldw	r2,-28(fp)
 100edb0:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
 100edb4:	e0bff917 	ldw	r2,-28(fp)
 100edb8:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
 100edbc:	d0976417 	ldw	r2,23952(gp)
 100edc0:	1005003a 	cmpeq	r2,r2,zero
 100edc4:	1000031e 	bne	r2,zero,100edd4 <OS_TCBInit+0x23c>
            OSTCBList->OSTCBPrev = ptcb;
 100edc8:	d0d76417 	ldw	r3,23952(gp)
 100edcc:	e0bff917 	ldw	r2,-28(fp)
 100edd0:	18800615 	stw	r2,24(r3)
        }
        OSTCBList               = ptcb;
 100edd4:	e0bff917 	ldw	r2,-28(fp)
 100edd8:	d0976415 	stw	r2,23952(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
 100eddc:	e0bff917 	ldw	r2,-28(fp)
 100ede0:	10c00d83 	ldbu	r3,54(r2)
 100ede4:	d0976e03 	ldbu	r2,23992(gp)
 100ede8:	1884b03a 	or	r2,r3,r2
 100edec:	d0976e05 	stb	r2,23992(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 100edf0:	e0bff917 	ldw	r2,-28(fp)
 100edf4:	10800d03 	ldbu	r2,52(r2)
 100edf8:	11003fcc 	andi	r4,r2,255
 100edfc:	e0bff917 	ldw	r2,-28(fp)
 100ee00:	10800d03 	ldbu	r2,52(r2)
 100ee04:	10c03fcc 	andi	r3,r2,255
 100ee08:	d0976e44 	addi	r2,gp,23993
 100ee0c:	1885883a 	add	r2,r3,r2
 100ee10:	10c00003 	ldbu	r3,0(r2)
 100ee14:	e0bff917 	ldw	r2,-28(fp)
 100ee18:	10800d43 	ldbu	r2,53(r2)
 100ee1c:	1884b03a 	or	r2,r3,r2
 100ee20:	1007883a 	mov	r3,r2
 100ee24:	d0976e44 	addi	r2,gp,23993
 100ee28:	2085883a 	add	r2,r4,r2
 100ee2c:	10c00005 	stb	r3,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
 100ee30:	d0976a43 	ldbu	r2,23977(gp)
 100ee34:	10800044 	addi	r2,r2,1
 100ee38:	d0976a45 	stb	r2,23977(gp)
 100ee3c:	e0bff817 	ldw	r2,-32(fp)
 100ee40:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100ee44:	e0bff417 	ldw	r2,-48(fp)
 100ee48:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 100ee4c:	e03fff15 	stw	zero,-4(fp)
 100ee50:	00000606 	br	100ee6c <OS_TCBInit+0x2d4>
 100ee54:	e0bff817 	ldw	r2,-32(fp)
 100ee58:	e0bff315 	stw	r2,-52(fp)
 100ee5c:	e0bff317 	ldw	r2,-52(fp)
 100ee60:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
 100ee64:	00801084 	movi	r2,66
 100ee68:	e0bfff15 	stw	r2,-4(fp)
 100ee6c:	e0bfff17 	ldw	r2,-4(fp)
}
 100ee70:	e037883a 	mov	sp,fp
 100ee74:	dfc00117 	ldw	ra,4(sp)
 100ee78:	df000017 	ldw	fp,0(sp)
 100ee7c:	dec00204 	addi	sp,sp,8
 100ee80:	f800283a 	ret

0100ee84 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
 100ee84:	f811883a 	mov	r8,ra
 100ee88:	100c1d00 	call	100c1d0 <_mcount>
 100ee8c:	403f883a 	mov	ra,r8
 100ee90:	defffe04 	addi	sp,sp,-8
 100ee94:	df000115 	stw	fp,4(sp)
 100ee98:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
 100ee9c:	d0a01204 	addi	r2,gp,-32696
 100eea0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
 100eea4:	d0a01304 	addi	r2,gp,-32692
 100eea8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
 100eeac:	d0a01484 	addi	r2,gp,-32686
 100eeb0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
 100eeb4:	d0a01504 	addi	r2,gp,-32684
 100eeb8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
 100eebc:	d0a01404 	addi	r2,gp,-32688
 100eec0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
 100eec4:	d0a01584 	addi	r2,gp,-32682
 100eec8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
 100eecc:	d0a01604 	addi	r2,gp,-32680
 100eed0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
 100eed4:	d0a01684 	addi	r2,gp,-32678
 100eed8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
 100eedc:	d0a01704 	addi	r2,gp,-32676
 100eee0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
 100eee4:	d0a01784 	addi	r2,gp,-32674
 100eee8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
 100eeec:	d0a01804 	addi	r2,gp,-32672
 100eef0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
 100eef4:	d0a01884 	addi	r2,gp,-32670
 100eef8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
 100eefc:	d0a01904 	addi	r2,gp,-32668
 100ef00:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
 100ef04:	d0a01984 	addi	r2,gp,-32666
 100ef08:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
 100ef0c:	d0a01a04 	addi	r2,gp,-32664
 100ef10:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
 100ef14:	d0a01a84 	addi	r2,gp,-32662
 100ef18:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
 100ef1c:	d0a01b04 	addi	r2,gp,-32660
 100ef20:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
 100ef24:	d0a01b84 	addi	r2,gp,-32658
 100ef28:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
 100ef2c:	d0a01c04 	addi	r2,gp,-32656
 100ef30:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
 100ef34:	d0a01c84 	addi	r2,gp,-32654
 100ef38:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
 100ef3c:	d0a01d04 	addi	r2,gp,-32652
 100ef40:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
 100ef44:	d0a01d84 	addi	r2,gp,-32650
 100ef48:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
 100ef4c:	d0a01e04 	addi	r2,gp,-32648
 100ef50:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
 100ef54:	d0a01e84 	addi	r2,gp,-32646
 100ef58:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
 100ef5c:	d0a01f04 	addi	r2,gp,-32644
 100ef60:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
 100ef64:	d0a01f84 	addi	r2,gp,-32642
 100ef68:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
 100ef6c:	d0a02004 	addi	r2,gp,-32640
 100ef70:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
 100ef74:	d0a02084 	addi	r2,gp,-32638
 100ef78:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
 100ef7c:	d0a02104 	addi	r2,gp,-32636
 100ef80:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
 100ef84:	d0a02184 	addi	r2,gp,-32634
 100ef88:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
 100ef8c:	d0a02204 	addi	r2,gp,-32632
 100ef90:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
 100ef94:	d0a02284 	addi	r2,gp,-32630
 100ef98:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
 100ef9c:	d0a02304 	addi	r2,gp,-32628
 100efa0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
 100efa4:	d0a02384 	addi	r2,gp,-32626
 100efa8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
 100efac:	d0a02404 	addi	r2,gp,-32624
 100efb0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
 100efb4:	d0a02484 	addi	r2,gp,-32622
 100efb8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
 100efbc:	d0a02504 	addi	r2,gp,-32620
 100efc0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
 100efc4:	d0a02584 	addi	r2,gp,-32618
 100efc8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
 100efcc:	d0a02604 	addi	r2,gp,-32616
 100efd0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
 100efd4:	d0a02684 	addi	r2,gp,-32614
 100efd8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
 100efdc:	d0a02704 	addi	r2,gp,-32612
 100efe0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
 100efe4:	d0a02784 	addi	r2,gp,-32610
 100efe8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
 100efec:	d0a02804 	addi	r2,gp,-32608
 100eff0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
 100eff4:	d0a02884 	addi	r2,gp,-32606
 100eff8:	e0bfff15 	stw	r2,-4(fp)

#if OS_TMR_EN > 0
    ptemp = (void *)&OSTmrTbl[0];
 100effc:	00804134 	movhi	r2,260
 100f000:	10900a04 	addi	r2,r2,16424
 100f004:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrWheelTbl[0];
 100f008:	00804134 	movhi	r2,260
 100f00c:	108f2a04 	addi	r2,r2,15528
 100f010:	e0bfff15 	stw	r2,-4(fp)
    
    ptemp = (void *)&OSTmrEn;
 100f014:	d0a02984 	addi	r2,gp,-32602
 100f018:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrCfgMax;
 100f01c:	d0a02a04 	addi	r2,gp,-32600
 100f020:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrCfgNameSize;
 100f024:	d0a02a84 	addi	r2,gp,-32598
 100f028:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrCfgWheelSize;
 100f02c:	d0a02b04 	addi	r2,gp,-32596
 100f030:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrCfgTicksPerSec;
 100f034:	d0a02b84 	addi	r2,gp,-32594
 100f038:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrSize;
 100f03c:	d0a02c04 	addi	r2,gp,-32592
 100f040:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrTblSize;
 100f044:	d0a02c84 	addi	r2,gp,-32590
 100f048:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
 100f04c:	d0a02d04 	addi	r2,gp,-32588
 100f050:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrWheelTblSize;
 100f054:	d0a02d84 	addi	r2,gp,-32586
 100f058:	e0bfff15 	stw	r2,-4(fp)
#endif

    ptemp = (void *)&OSVersionNbr;
 100f05c:	d0a02904 	addi	r2,gp,-32604
 100f060:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
 100f064:	d0a02e04 	addi	r2,gp,-32584
 100f068:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
 100f06c:	e037883a 	mov	sp,fp
 100f070:	df000017 	ldw	fp,0(sp)
 100f074:	dec00104 	addi	sp,sp,4
 100f078:	f800283a 	ret

0100f07c <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
 100f07c:	f811883a 	mov	r8,ra
 100f080:	100c1d00 	call	100c1d0 <_mcount>
 100f084:	403f883a 	mov	ra,r8
 100f088:	defff104 	addi	sp,sp,-60
 100f08c:	df000e15 	stw	fp,56(sp)
 100f090:	df000e04 	addi	fp,sp,56
 100f094:	e13ffa15 	stw	r4,-24(fp)
 100f098:	e1fffd15 	stw	r7,-12(fp)
 100f09c:	e17ffb0d 	sth	r5,-20(fp)
 100f0a0:	e1bffc05 	stb	r6,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 100f0a4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 100f0a8:	e0bffd17 	ldw	r2,-12(fp)
 100f0ac:	1004c03a 	cmpne	r2,r2,zero
 100f0b0:	1000021e 	bne	r2,zero,100f0bc <OSFlagAccept+0x40>
        return ((OS_FLAGS)0);
 100f0b4:	e03fff15 	stw	zero,-4(fp)
 100f0b8:	0000bb06 	br	100f3a8 <OSFlagAccept+0x32c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 100f0bc:	e0bffa17 	ldw	r2,-24(fp)
 100f0c0:	1004c03a 	cmpne	r2,r2,zero
 100f0c4:	1000051e 	bne	r2,zero,100f0dc <OSFlagAccept+0x60>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 100f0c8:	e0fffd17 	ldw	r3,-12(fp)
 100f0cc:	00801b84 	movi	r2,110
 100f0d0:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 100f0d4:	e03fff15 	stw	zero,-4(fp)
 100f0d8:	0000b306 	br	100f3a8 <OSFlagAccept+0x32c>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 100f0dc:	e0bffa17 	ldw	r2,-24(fp)
 100f0e0:	10800003 	ldbu	r2,0(r2)
 100f0e4:	10803fcc 	andi	r2,r2,255
 100f0e8:	10800160 	cmpeqi	r2,r2,5
 100f0ec:	1000051e 	bne	r2,zero,100f104 <OSFlagAccept+0x88>
        *perr = OS_ERR_EVENT_TYPE;
 100f0f0:	e0fffd17 	ldw	r3,-12(fp)
 100f0f4:	00800044 	movi	r2,1
 100f0f8:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 100f0fc:	e03fff15 	stw	zero,-4(fp)
 100f100:	0000a906 	br	100f3a8 <OSFlagAccept+0x32c>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 100f104:	e0fffc03 	ldbu	r3,-16(fp)
 100f108:	00bfe004 	movi	r2,-128
 100f10c:	1884703a 	and	r2,r3,r2
 100f110:	e0bff945 	stb	r2,-27(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
 100f114:	e0bff943 	ldbu	r2,-27(fp)
 100f118:	1005003a 	cmpeq	r2,r2,zero
 100f11c:	1000061e 	bne	r2,zero,100f138 <OSFlagAccept+0xbc>
        wait_type &= ~OS_FLAG_CONSUME;
 100f120:	e0bffc03 	ldbu	r2,-16(fp)
 100f124:	10801fcc 	andi	r2,r2,127
 100f128:	e0bffc05 	stb	r2,-16(fp)
        consume    = OS_TRUE;
 100f12c:	00800044 	movi	r2,1
 100f130:	e0bff905 	stb	r2,-28(fp)
 100f134:	00000106 	br	100f13c <OSFlagAccept+0xc0>
    } else {
        consume    = OS_FALSE;
 100f138:	e03ff905 	stb	zero,-28(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
 100f13c:	e0bffd17 	ldw	r2,-12(fp)
 100f140:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100f144:	0005303a 	rdctl	r2,status
 100f148:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100f14c:	e0fff717 	ldw	r3,-36(fp)
 100f150:	00bfff84 	movi	r2,-2
 100f154:	1884703a 	and	r2,r3,r2
 100f158:	1001703a 	wrctl	status,r2
  
  return context;
 100f15c:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
 100f160:	e0bff815 	stw	r2,-32(fp)
    switch (wait_type) {
 100f164:	e0bffc03 	ldbu	r2,-16(fp)
 100f168:	e0bffe15 	stw	r2,-8(fp)
 100f16c:	e0fffe17 	ldw	r3,-8(fp)
 100f170:	18800060 	cmpeqi	r2,r3,1
 100f174:	1000651e 	bne	r2,zero,100f30c <OSFlagAccept+0x290>
 100f178:	e0fffe17 	ldw	r3,-8(fp)
 100f17c:	18800088 	cmpgei	r2,r3,2
 100f180:	1000041e 	bne	r2,zero,100f194 <OSFlagAccept+0x118>
 100f184:	e0fffe17 	ldw	r3,-8(fp)
 100f188:	1805003a 	cmpeq	r2,r3,zero
 100f18c:	1000421e 	bne	r2,zero,100f298 <OSFlagAccept+0x21c>
 100f190:	00007b06 	br	100f380 <OSFlagAccept+0x304>
 100f194:	e0fffe17 	ldw	r3,-8(fp)
 100f198:	188000a0 	cmpeqi	r2,r3,2
 100f19c:	1000041e 	bne	r2,zero,100f1b0 <OSFlagAccept+0x134>
 100f1a0:	e0fffe17 	ldw	r3,-8(fp)
 100f1a4:	188000e0 	cmpeqi	r2,r3,3
 100f1a8:	10001e1e 	bne	r2,zero,100f224 <OSFlagAccept+0x1a8>
 100f1ac:	00007406 	br	100f380 <OSFlagAccept+0x304>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 100f1b0:	e0bffa17 	ldw	r2,-24(fp)
 100f1b4:	10c0020b 	ldhu	r3,8(r2)
 100f1b8:	e0bffb0b 	ldhu	r2,-20(fp)
 100f1bc:	1884703a 	and	r2,r3,r2
 100f1c0:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 100f1c4:	e0fff98b 	ldhu	r3,-26(fp)
 100f1c8:	e0bffb0b 	ldhu	r2,-20(fp)
 100f1cc:	18800d1e 	bne	r3,r2,100f204 <OSFlagAccept+0x188>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 100f1d0:	e0bff903 	ldbu	r2,-28(fp)
 100f1d4:	10800058 	cmpnei	r2,r2,1
 100f1d8:	10000d1e 	bne	r2,zero,100f210 <OSFlagAccept+0x194>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 100f1dc:	e0bffa17 	ldw	r2,-24(fp)
 100f1e0:	1080020b 	ldhu	r2,8(r2)
 100f1e4:	1007883a 	mov	r3,r2
 100f1e8:	e0bff98b 	ldhu	r2,-26(fp)
 100f1ec:	0084303a 	nor	r2,zero,r2
 100f1f0:	1884703a 	and	r2,r3,r2
 100f1f4:	1007883a 	mov	r3,r2
 100f1f8:	e0bffa17 	ldw	r2,-24(fp)
 100f1fc:	10c0020d 	sth	r3,8(r2)
 100f200:	00000306 	br	100f210 <OSFlagAccept+0x194>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 100f204:	e0fffd17 	ldw	r3,-12(fp)
 100f208:	00801c04 	movi	r2,112
 100f20c:	18800005 	stb	r2,0(r3)
 100f210:	e0bff817 	ldw	r2,-32(fp)
 100f214:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100f218:	e0bff617 	ldw	r2,-40(fp)
 100f21c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 100f220:	00005f06 	br	100f3a0 <OSFlagAccept+0x324>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 100f224:	e0bffa17 	ldw	r2,-24(fp)
 100f228:	10c0020b 	ldhu	r3,8(r2)
 100f22c:	e0bffb0b 	ldhu	r2,-20(fp)
 100f230:	1884703a 	and	r2,r3,r2
 100f234:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 100f238:	e0bff98b 	ldhu	r2,-26(fp)
 100f23c:	1005003a 	cmpeq	r2,r2,zero
 100f240:	10000d1e 	bne	r2,zero,100f278 <OSFlagAccept+0x1fc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 100f244:	e0bff903 	ldbu	r2,-28(fp)
 100f248:	10800058 	cmpnei	r2,r2,1
 100f24c:	10000d1e 	bne	r2,zero,100f284 <OSFlagAccept+0x208>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 100f250:	e0bffa17 	ldw	r2,-24(fp)
 100f254:	1080020b 	ldhu	r2,8(r2)
 100f258:	1007883a 	mov	r3,r2
 100f25c:	e0bff98b 	ldhu	r2,-26(fp)
 100f260:	0084303a 	nor	r2,zero,r2
 100f264:	1884703a 	and	r2,r3,r2
 100f268:	1007883a 	mov	r3,r2
 100f26c:	e0bffa17 	ldw	r2,-24(fp)
 100f270:	10c0020d 	sth	r3,8(r2)
 100f274:	00000306 	br	100f284 <OSFlagAccept+0x208>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 100f278:	e0fffd17 	ldw	r3,-12(fp)
 100f27c:	00801c04 	movi	r2,112
 100f280:	18800005 	stb	r2,0(r3)
 100f284:	e0bff817 	ldw	r2,-32(fp)
 100f288:	e0bff515 	stw	r2,-44(fp)
 100f28c:	e0bff517 	ldw	r2,-44(fp)
 100f290:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 100f294:	00004206 	br	100f3a0 <OSFlagAccept+0x324>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 100f298:	e0bffa17 	ldw	r2,-24(fp)
 100f29c:	1080020b 	ldhu	r2,8(r2)
 100f2a0:	0084303a 	nor	r2,zero,r2
 100f2a4:	1007883a 	mov	r3,r2
 100f2a8:	e0bffb0b 	ldhu	r2,-20(fp)
 100f2ac:	1884703a 	and	r2,r3,r2
 100f2b0:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 100f2b4:	e0fff98b 	ldhu	r3,-26(fp)
 100f2b8:	e0bffb0b 	ldhu	r2,-20(fp)
 100f2bc:	18800b1e 	bne	r3,r2,100f2ec <OSFlagAccept+0x270>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 100f2c0:	e0bff903 	ldbu	r2,-28(fp)
 100f2c4:	10800058 	cmpnei	r2,r2,1
 100f2c8:	10000b1e 	bne	r2,zero,100f2f8 <OSFlagAccept+0x27c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 100f2cc:	e0bffa17 	ldw	r2,-24(fp)
 100f2d0:	10c0020b 	ldhu	r3,8(r2)
 100f2d4:	e0bff98b 	ldhu	r2,-26(fp)
 100f2d8:	1884b03a 	or	r2,r3,r2
 100f2dc:	1007883a 	mov	r3,r2
 100f2e0:	e0bffa17 	ldw	r2,-24(fp)
 100f2e4:	10c0020d 	sth	r3,8(r2)
 100f2e8:	00000306 	br	100f2f8 <OSFlagAccept+0x27c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 100f2ec:	e0fffd17 	ldw	r3,-12(fp)
 100f2f0:	00801c04 	movi	r2,112
 100f2f4:	18800005 	stb	r2,0(r3)
 100f2f8:	e0bff817 	ldw	r2,-32(fp)
 100f2fc:	e0bff415 	stw	r2,-48(fp)
 100f300:	e0bff417 	ldw	r2,-48(fp)
 100f304:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 100f308:	00002506 	br	100f3a0 <OSFlagAccept+0x324>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 100f30c:	e0bffa17 	ldw	r2,-24(fp)
 100f310:	1080020b 	ldhu	r2,8(r2)
 100f314:	0084303a 	nor	r2,zero,r2
 100f318:	1007883a 	mov	r3,r2
 100f31c:	e0bffb0b 	ldhu	r2,-20(fp)
 100f320:	1884703a 	and	r2,r3,r2
 100f324:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 100f328:	e0bff98b 	ldhu	r2,-26(fp)
 100f32c:	1005003a 	cmpeq	r2,r2,zero
 100f330:	10000b1e 	bne	r2,zero,100f360 <OSFlagAccept+0x2e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 100f334:	e0bff903 	ldbu	r2,-28(fp)
 100f338:	10800058 	cmpnei	r2,r2,1
 100f33c:	10000b1e 	bne	r2,zero,100f36c <OSFlagAccept+0x2f0>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 100f340:	e0bffa17 	ldw	r2,-24(fp)
 100f344:	10c0020b 	ldhu	r3,8(r2)
 100f348:	e0bff98b 	ldhu	r2,-26(fp)
 100f34c:	1884b03a 	or	r2,r3,r2
 100f350:	1007883a 	mov	r3,r2
 100f354:	e0bffa17 	ldw	r2,-24(fp)
 100f358:	10c0020d 	sth	r3,8(r2)
 100f35c:	00000306 	br	100f36c <OSFlagAccept+0x2f0>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 100f360:	e0fffd17 	ldw	r3,-12(fp)
 100f364:	00801c04 	movi	r2,112
 100f368:	18800005 	stb	r2,0(r3)
 100f36c:	e0bff817 	ldw	r2,-32(fp)
 100f370:	e0bff315 	stw	r2,-52(fp)
 100f374:	e0bff317 	ldw	r2,-52(fp)
 100f378:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 100f37c:	00000806 	br	100f3a0 <OSFlagAccept+0x324>
 100f380:	e0bff817 	ldw	r2,-32(fp)
 100f384:	e0bff215 	stw	r2,-56(fp)
 100f388:	e0bff217 	ldw	r2,-56(fp)
 100f38c:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 100f390:	e03ff98d 	sth	zero,-26(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
 100f394:	e0fffd17 	ldw	r3,-12(fp)
 100f398:	00801bc4 	movi	r2,111
 100f39c:	18800005 	stb	r2,0(r3)
             break;
    }
    return (flags_rdy);
 100f3a0:	e0bff98b 	ldhu	r2,-26(fp)
 100f3a4:	e0bfff15 	stw	r2,-4(fp)
 100f3a8:	e0bfff17 	ldw	r2,-4(fp)
}
 100f3ac:	e037883a 	mov	sp,fp
 100f3b0:	df000017 	ldw	fp,0(sp)
 100f3b4:	dec00104 	addi	sp,sp,4
 100f3b8:	f800283a 	ret

0100f3bc <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
 100f3bc:	f811883a 	mov	r8,ra
 100f3c0:	100c1d00 	call	100c1d0 <_mcount>
 100f3c4:	403f883a 	mov	ra,r8
 100f3c8:	defff704 	addi	sp,sp,-36
 100f3cc:	df000815 	stw	fp,32(sp)
 100f3d0:	df000804 	addi	fp,sp,32
 100f3d4:	e17ffe15 	stw	r5,-8(fp)
 100f3d8:	e13ffd0d 	sth	r4,-12(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
 100f3dc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
 100f3e0:	e0bffe17 	ldw	r2,-8(fp)
 100f3e4:	1004c03a 	cmpne	r2,r2,zero
 100f3e8:	1000021e 	bne	r2,zero,100f3f4 <OSFlagCreate+0x38>
        return ((OS_FLAG_GRP *)0);
 100f3ec:	e03fff15 	stw	zero,-4(fp)
 100f3f0:	00003f06 	br	100f4f0 <OSFlagCreate+0x134>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
 100f3f4:	008040f4 	movhi	r2,259
 100f3f8:	10970704 	addi	r2,r2,23580
 100f3fc:	10800003 	ldbu	r2,0(r2)
 100f400:	10803fcc 	andi	r2,r2,255
 100f404:	1005003a 	cmpeq	r2,r2,zero
 100f408:	1000051e 	bne	r2,zero,100f420 <OSFlagCreate+0x64>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
 100f40c:	e0fffe17 	ldw	r3,-8(fp)
 100f410:	00800404 	movi	r2,16
 100f414:	18800005 	stb	r2,0(r3)
        return ((OS_FLAG_GRP *)0);
 100f418:	e03fff15 	stw	zero,-4(fp)
 100f41c:	00003406 	br	100f4f0 <OSFlagCreate+0x134>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100f420:	0005303a 	rdctl	r2,status
 100f424:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100f428:	e0fffa17 	ldw	r3,-24(fp)
 100f42c:	00bfff84 	movi	r2,-2
 100f430:	1884703a 	and	r2,r3,r2
 100f434:	1001703a 	wrctl	status,r2
  
  return context;
 100f438:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 100f43c:	e0bffb15 	stw	r2,-20(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
 100f440:	008040f4 	movhi	r2,259
 100f444:	10970c04 	addi	r2,r2,23600
 100f448:	10800017 	ldw	r2,0(r2)
 100f44c:	e0bffc15 	stw	r2,-16(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
 100f450:	e0bffc17 	ldw	r2,-16(fp)
 100f454:	1005003a 	cmpeq	r2,r2,zero
 100f458:	10001c1e 	bne	r2,zero,100f4cc <OSFlagCreate+0x110>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
 100f45c:	008040f4 	movhi	r2,259
 100f460:	10970c04 	addi	r2,r2,23600
 100f464:	10800017 	ldw	r2,0(r2)
 100f468:	10800117 	ldw	r2,4(r2)
 100f46c:	1007883a 	mov	r3,r2
 100f470:	008040f4 	movhi	r2,259
 100f474:	10970c04 	addi	r2,r2,23600
 100f478:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
 100f47c:	e0fffc17 	ldw	r3,-16(fp)
 100f480:	00800144 	movi	r2,5
 100f484:	18800005 	stb	r2,0(r3)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
 100f488:	e0fffc17 	ldw	r3,-16(fp)
 100f48c:	e0bffd0b 	ldhu	r2,-12(fp)
 100f490:	1880020d 	sth	r2,8(r3)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
 100f494:	e0bffc17 	ldw	r2,-16(fp)
 100f498:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
 100f49c:	e0fffc17 	ldw	r3,-16(fp)
 100f4a0:	00800fc4 	movi	r2,63
 100f4a4:	18800285 	stb	r2,10(r3)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 100f4a8:	e0bffc17 	ldw	r2,-16(fp)
 100f4ac:	100002c5 	stb	zero,11(r2)
 100f4b0:	e0bffb17 	ldw	r2,-20(fp)
 100f4b4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100f4b8:	e0bff917 	ldw	r2,-28(fp)
 100f4bc:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
 100f4c0:	e0bffe17 	ldw	r2,-8(fp)
 100f4c4:	10000005 	stb	zero,0(r2)
 100f4c8:	00000706 	br	100f4e8 <OSFlagCreate+0x12c>
 100f4cc:	e0bffb17 	ldw	r2,-20(fp)
 100f4d0:	e0bff815 	stw	r2,-32(fp)
 100f4d4:	e0bff817 	ldw	r2,-32(fp)
 100f4d8:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
 100f4dc:	e0fffe17 	ldw	r3,-8(fp)
 100f4e0:	00801c84 	movi	r2,114
 100f4e4:	18800005 	stb	r2,0(r3)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
 100f4e8:	e0bffc17 	ldw	r2,-16(fp)
 100f4ec:	e0bfff15 	stw	r2,-4(fp)
 100f4f0:	e0bfff17 	ldw	r2,-4(fp)
}
 100f4f4:	e037883a 	mov	sp,fp
 100f4f8:	df000017 	ldw	fp,0(sp)
 100f4fc:	dec00104 	addi	sp,sp,4
 100f500:	f800283a 	ret

0100f504 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
 100f504:	f811883a 	mov	r8,ra
 100f508:	100c1d00 	call	100c1d0 <_mcount>
 100f50c:	403f883a 	mov	ra,r8
 100f510:	defff004 	addi	sp,sp,-64
 100f514:	dfc00f15 	stw	ra,60(sp)
 100f518:	df000e15 	stw	fp,56(sp)
 100f51c:	df000e04 	addi	fp,sp,56
 100f520:	e13ffb15 	stw	r4,-20(fp)
 100f524:	e1bffd15 	stw	r6,-12(fp)
 100f528:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 100f52c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 100f530:	e0bffd17 	ldw	r2,-12(fp)
 100f534:	1004c03a 	cmpne	r2,r2,zero
 100f538:	1000031e 	bne	r2,zero,100f548 <OSFlagDel+0x44>
        return (pgrp);
 100f53c:	e0bffb17 	ldw	r2,-20(fp)
 100f540:	e0bfff15 	stw	r2,-4(fp)
 100f544:	00009606 	br	100f7a0 <OSFlagDel+0x29c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 100f548:	e0bffb17 	ldw	r2,-20(fp)
 100f54c:	1004c03a 	cmpne	r2,r2,zero
 100f550:	1000061e 	bne	r2,zero,100f56c <OSFlagDel+0x68>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 100f554:	e0fffd17 	ldw	r3,-12(fp)
 100f558:	00801b84 	movi	r2,110
 100f55c:	18800005 	stb	r2,0(r3)
        return (pgrp);
 100f560:	e0fffb17 	ldw	r3,-20(fp)
 100f564:	e0ffff15 	stw	r3,-4(fp)
 100f568:	00008d06 	br	100f7a0 <OSFlagDel+0x29c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 100f56c:	008040f4 	movhi	r2,259
 100f570:	10970704 	addi	r2,r2,23580
 100f574:	10800003 	ldbu	r2,0(r2)
 100f578:	10803fcc 	andi	r2,r2,255
 100f57c:	1005003a 	cmpeq	r2,r2,zero
 100f580:	1000061e 	bne	r2,zero,100f59c <OSFlagDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 100f584:	e0fffd17 	ldw	r3,-12(fp)
 100f588:	008003c4 	movi	r2,15
 100f58c:	18800005 	stb	r2,0(r3)
        return (pgrp);
 100f590:	e0bffb17 	ldw	r2,-20(fp)
 100f594:	e0bfff15 	stw	r2,-4(fp)
 100f598:	00008106 	br	100f7a0 <OSFlagDel+0x29c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
 100f59c:	e0bffb17 	ldw	r2,-20(fp)
 100f5a0:	10800003 	ldbu	r2,0(r2)
 100f5a4:	10803fcc 	andi	r2,r2,255
 100f5a8:	10800160 	cmpeqi	r2,r2,5
 100f5ac:	1000061e 	bne	r2,zero,100f5c8 <OSFlagDel+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
 100f5b0:	e0fffd17 	ldw	r3,-12(fp)
 100f5b4:	00800044 	movi	r2,1
 100f5b8:	18800005 	stb	r2,0(r3)
        return (pgrp);
 100f5bc:	e0fffb17 	ldw	r3,-20(fp)
 100f5c0:	e0ffff15 	stw	r3,-4(fp)
 100f5c4:	00007606 	br	100f7a0 <OSFlagDel+0x29c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100f5c8:	0005303a 	rdctl	r2,status
 100f5cc:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100f5d0:	e0fff617 	ldw	r3,-40(fp)
 100f5d4:	00bfff84 	movi	r2,-2
 100f5d8:	1884703a 	and	r2,r3,r2
 100f5dc:	1001703a 	wrctl	status,r2
  
  return context;
 100f5e0:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
 100f5e4:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
 100f5e8:	e0bffb17 	ldw	r2,-20(fp)
 100f5ec:	10800117 	ldw	r2,4(r2)
 100f5f0:	1005003a 	cmpeq	r2,r2,zero
 100f5f4:	1000031e 	bne	r2,zero,100f604 <OSFlagDel+0x100>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 100f5f8:	00800044 	movi	r2,1
 100f5fc:	e0bffa05 	stb	r2,-24(fp)
 100f600:	00000106 	br	100f608 <OSFlagDel+0x104>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 100f604:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
 100f608:	e0bffc03 	ldbu	r2,-16(fp)
 100f60c:	e0bffe15 	stw	r2,-8(fp)
 100f610:	e0fffe17 	ldw	r3,-8(fp)
 100f614:	1805003a 	cmpeq	r2,r3,zero
 100f618:	1000041e 	bne	r2,zero,100f62c <OSFlagDel+0x128>
 100f61c:	e0fffe17 	ldw	r3,-8(fp)
 100f620:	18800060 	cmpeqi	r2,r3,1
 100f624:	1000281e 	bne	r2,zero,100f6c8 <OSFlagDel+0x1c4>
 100f628:	00005206 	br	100f774 <OSFlagDel+0x270>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
 100f62c:	e0bffa03 	ldbu	r2,-24(fp)
 100f630:	1004c03a 	cmpne	r2,r2,zero
 100f634:	10001a1e 	bne	r2,zero,100f6a0 <OSFlagDel+0x19c>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
 100f638:	e0fffb17 	ldw	r3,-20(fp)
 100f63c:	00800fc4 	movi	r2,63
 100f640:	18800285 	stb	r2,10(r3)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 100f644:	e0bffb17 	ldw	r2,-20(fp)
 100f648:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 100f64c:	e0bffb17 	ldw	r2,-20(fp)
 100f650:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
 100f654:	008040f4 	movhi	r2,259
 100f658:	10970c04 	addi	r2,r2,23600
 100f65c:	10c00017 	ldw	r3,0(r2)
 100f660:	e0bffb17 	ldw	r2,-20(fp)
 100f664:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
 100f668:	e0bffb17 	ldw	r2,-20(fp)
 100f66c:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
 100f670:	00c040f4 	movhi	r3,259
 100f674:	18d70c04 	addi	r3,r3,23600
 100f678:	e0bffb17 	ldw	r2,-20(fp)
 100f67c:	18800015 	stw	r2,0(r3)
 100f680:	e0bff717 	ldw	r2,-36(fp)
 100f684:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100f688:	e0bff517 	ldw	r2,-44(fp)
 100f68c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
 100f690:	e0bffd17 	ldw	r2,-12(fp)
 100f694:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
 100f698:	e03ff815 	stw	zero,-32(fp)
 100f69c:	00003e06 	br	100f798 <OSFlagDel+0x294>
 100f6a0:	e0bff717 	ldw	r2,-36(fp)
 100f6a4:	e0bff415 	stw	r2,-48(fp)
 100f6a8:	e0bff417 	ldw	r2,-48(fp)
 100f6ac:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
 100f6b0:	e0fffd17 	ldw	r3,-12(fp)
 100f6b4:	00801244 	movi	r2,73
 100f6b8:	18800005 	stb	r2,0(r3)
                 pgrp_return          = pgrp;
 100f6bc:	e0bffb17 	ldw	r2,-20(fp)
 100f6c0:	e0bff815 	stw	r2,-32(fp)
             }
             break;
 100f6c4:	00003406 	br	100f798 <OSFlagDel+0x294>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 100f6c8:	e0bffb17 	ldw	r2,-20(fp)
 100f6cc:	10800117 	ldw	r2,4(r2)
 100f6d0:	e0bff915 	stw	r2,-28(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 100f6d4:	00000606 	br	100f6f0 <OSFlagDel+0x1ec>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
 100f6d8:	e13ff917 	ldw	r4,-28(fp)
 100f6dc:	000b883a 	mov	r5,zero
 100f6e0:	10108800 	call	1010880 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 100f6e4:	e0bff917 	ldw	r2,-28(fp)
 100f6e8:	10800017 	ldw	r2,0(r2)
 100f6ec:	e0bff915 	stw	r2,-28(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 100f6f0:	e0bff917 	ldw	r2,-28(fp)
 100f6f4:	1004c03a 	cmpne	r2,r2,zero
 100f6f8:	103ff71e 	bne	r2,zero,100f6d8 <OSFlagDel+0x1d4>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
 100f6fc:	e0fffb17 	ldw	r3,-20(fp)
 100f700:	00800fc4 	movi	r2,63
 100f704:	18800285 	stb	r2,10(r3)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 100f708:	e0bffb17 	ldw	r2,-20(fp)
 100f70c:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 100f710:	e0bffb17 	ldw	r2,-20(fp)
 100f714:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
 100f718:	008040f4 	movhi	r2,259
 100f71c:	10970c04 	addi	r2,r2,23600
 100f720:	10c00017 	ldw	r3,0(r2)
 100f724:	e0bffb17 	ldw	r2,-20(fp)
 100f728:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
 100f72c:	e0bffb17 	ldw	r2,-20(fp)
 100f730:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
 100f734:	00c040f4 	movhi	r3,259
 100f738:	18d70c04 	addi	r3,r3,23600
 100f73c:	e0bffb17 	ldw	r2,-20(fp)
 100f740:	18800015 	stw	r2,0(r3)
 100f744:	e0bff717 	ldw	r2,-36(fp)
 100f748:	e0bff315 	stw	r2,-52(fp)
 100f74c:	e0bff317 	ldw	r2,-52(fp)
 100f750:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 100f754:	e0bffa03 	ldbu	r2,-24(fp)
 100f758:	10800058 	cmpnei	r2,r2,1
 100f75c:	1000011e 	bne	r2,zero,100f764 <OSFlagDel+0x260>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 100f760:	100e73c0 	call	100e73c <OS_Sched>
             }
             *perr = OS_ERR_NONE;
 100f764:	e0bffd17 	ldw	r2,-12(fp)
 100f768:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
 100f76c:	e03ff815 	stw	zero,-32(fp)
             break;
 100f770:	00000906 	br	100f798 <OSFlagDel+0x294>
 100f774:	e0bff717 	ldw	r2,-36(fp)
 100f778:	e0bff215 	stw	r2,-56(fp)
 100f77c:	e0bff217 	ldw	r2,-56(fp)
 100f780:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
 100f784:	e0fffd17 	ldw	r3,-12(fp)
 100f788:	008001c4 	movi	r2,7
 100f78c:	18800005 	stb	r2,0(r3)
             pgrp_return          = pgrp;
 100f790:	e0bffb17 	ldw	r2,-20(fp)
 100f794:	e0bff815 	stw	r2,-32(fp)
             break;
    }
    return (pgrp_return);
 100f798:	e0bff817 	ldw	r2,-32(fp)
 100f79c:	e0bfff15 	stw	r2,-4(fp)
 100f7a0:	e0bfff17 	ldw	r2,-4(fp)
}
 100f7a4:	e037883a 	mov	sp,fp
 100f7a8:	dfc00117 	ldw	ra,4(sp)
 100f7ac:	df000017 	ldw	fp,0(sp)
 100f7b0:	dec00204 	addi	sp,sp,8
 100f7b4:	f800283a 	ret

0100f7b8 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 100f7b8:	f811883a 	mov	r8,ra
 100f7bc:	100c1d00 	call	100c1d0 <_mcount>
 100f7c0:	403f883a 	mov	ra,r8
 100f7c4:	defff504 	addi	sp,sp,-44
 100f7c8:	dfc00a15 	stw	ra,40(sp)
 100f7cc:	df000915 	stw	fp,36(sp)
 100f7d0:	df000904 	addi	fp,sp,36
 100f7d4:	e13ffc15 	stw	r4,-16(fp)
 100f7d8:	e17ffd15 	stw	r5,-12(fp)
 100f7dc:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 100f7e0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 100f7e4:	e0bffe17 	ldw	r2,-8(fp)
 100f7e8:	1004c03a 	cmpne	r2,r2,zero
 100f7ec:	1000021e 	bne	r2,zero,100f7f8 <OSFlagNameGet+0x40>
        return (0);
 100f7f0:	e03fff15 	stw	zero,-4(fp)
 100f7f4:	00003e06 	br	100f8f0 <OSFlagNameGet+0x138>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 100f7f8:	e0bffc17 	ldw	r2,-16(fp)
 100f7fc:	1004c03a 	cmpne	r2,r2,zero
 100f800:	1000051e 	bne	r2,zero,100f818 <OSFlagNameGet+0x60>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 100f804:	e0fffe17 	ldw	r3,-8(fp)
 100f808:	00801b84 	movi	r2,110
 100f80c:	18800005 	stb	r2,0(r3)
        return (0);
 100f810:	e03fff15 	stw	zero,-4(fp)
 100f814:	00003606 	br	100f8f0 <OSFlagNameGet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 100f818:	e0bffd17 	ldw	r2,-12(fp)
 100f81c:	1004c03a 	cmpne	r2,r2,zero
 100f820:	1000051e 	bne	r2,zero,100f838 <OSFlagNameGet+0x80>
        *perr = OS_ERR_PNAME_NULL;
 100f824:	e0fffe17 	ldw	r3,-8(fp)
 100f828:	00800304 	movi	r2,12
 100f82c:	18800005 	stb	r2,0(r3)
        return (0);
 100f830:	e03fff15 	stw	zero,-4(fp)
 100f834:	00002e06 	br	100f8f0 <OSFlagNameGet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 100f838:	008040f4 	movhi	r2,259
 100f83c:	10970704 	addi	r2,r2,23580
 100f840:	10800003 	ldbu	r2,0(r2)
 100f844:	10803fcc 	andi	r2,r2,255
 100f848:	1005003a 	cmpeq	r2,r2,zero
 100f84c:	1000051e 	bne	r2,zero,100f864 <OSFlagNameGet+0xac>
        *perr = OS_ERR_NAME_GET_ISR;
 100f850:	e0fffe17 	ldw	r3,-8(fp)
 100f854:	00800444 	movi	r2,17
 100f858:	18800005 	stb	r2,0(r3)
        return (0);
 100f85c:	e03fff15 	stw	zero,-4(fp)
 100f860:	00002306 	br	100f8f0 <OSFlagNameGet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100f864:	0005303a 	rdctl	r2,status
 100f868:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100f86c:	e0fff917 	ldw	r3,-28(fp)
 100f870:	00bfff84 	movi	r2,-2
 100f874:	1884703a 	and	r2,r3,r2
 100f878:	1001703a 	wrctl	status,r2
  
  return context;
 100f87c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 100f880:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 100f884:	e0bffc17 	ldw	r2,-16(fp)
 100f888:	10800003 	ldbu	r2,0(r2)
 100f88c:	10803fcc 	andi	r2,r2,255
 100f890:	10800160 	cmpeqi	r2,r2,5
 100f894:	1000091e 	bne	r2,zero,100f8bc <OSFlagNameGet+0x104>
 100f898:	e0bffa17 	ldw	r2,-24(fp)
 100f89c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100f8a0:	e0bff817 	ldw	r2,-32(fp)
 100f8a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 100f8a8:	e0fffe17 	ldw	r3,-8(fp)
 100f8ac:	00800044 	movi	r2,1
 100f8b0:	18800005 	stb	r2,0(r3)
        return (0);
 100f8b4:	e03fff15 	stw	zero,-4(fp)
 100f8b8:	00000d06 	br	100f8f0 <OSFlagNameGet+0x138>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
 100f8bc:	e0bffc17 	ldw	r2,-16(fp)
 100f8c0:	11400284 	addi	r5,r2,10
 100f8c4:	e13ffd17 	ldw	r4,-12(fp)
 100f8c8:	100e8980 	call	100e898 <OS_StrCopy>
 100f8cc:	e0bffb05 	stb	r2,-20(fp)
 100f8d0:	e0bffa17 	ldw	r2,-24(fp)
 100f8d4:	e0bff715 	stw	r2,-36(fp)
 100f8d8:	e0bff717 	ldw	r2,-36(fp)
 100f8dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 100f8e0:	e0bffe17 	ldw	r2,-8(fp)
 100f8e4:	10000005 	stb	zero,0(r2)
    return (len);
 100f8e8:	e0bffb03 	ldbu	r2,-20(fp)
 100f8ec:	e0bfff15 	stw	r2,-4(fp)
 100f8f0:	e0bfff17 	ldw	r2,-4(fp)
}
 100f8f4:	e037883a 	mov	sp,fp
 100f8f8:	dfc00117 	ldw	ra,4(sp)
 100f8fc:	df000017 	ldw	fp,0(sp)
 100f900:	dec00204 	addi	sp,sp,8
 100f904:	f800283a 	ret

0100f908 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 100f908:	f811883a 	mov	r8,ra
 100f90c:	100c1d00 	call	100c1d0 <_mcount>
 100f910:	403f883a 	mov	ra,r8
 100f914:	defff504 	addi	sp,sp,-44
 100f918:	dfc00a15 	stw	ra,40(sp)
 100f91c:	df000915 	stw	fp,36(sp)
 100f920:	df000904 	addi	fp,sp,36
 100f924:	e13ffd15 	stw	r4,-12(fp)
 100f928:	e17ffe15 	stw	r5,-8(fp)
 100f92c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 100f930:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 100f934:	e0bfff17 	ldw	r2,-4(fp)
 100f938:	1005003a 	cmpeq	r2,r2,zero
 100f93c:	1000451e 	bne	r2,zero,100fa54 <OSFlagNameSet+0x14c>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 100f940:	e0bffd17 	ldw	r2,-12(fp)
 100f944:	1004c03a 	cmpne	r2,r2,zero
 100f948:	1000041e 	bne	r2,zero,100f95c <OSFlagNameSet+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 100f94c:	e0ffff17 	ldw	r3,-4(fp)
 100f950:	00801b84 	movi	r2,110
 100f954:	18800005 	stb	r2,0(r3)
        return;
 100f958:	00003e06 	br	100fa54 <OSFlagNameSet+0x14c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 100f95c:	e0bffe17 	ldw	r2,-8(fp)
 100f960:	1004c03a 	cmpne	r2,r2,zero
 100f964:	1000041e 	bne	r2,zero,100f978 <OSFlagNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;
 100f968:	e0ffff17 	ldw	r3,-4(fp)
 100f96c:	00800304 	movi	r2,12
 100f970:	18800005 	stb	r2,0(r3)
        return;
 100f974:	00003706 	br	100fa54 <OSFlagNameSet+0x14c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 100f978:	008040f4 	movhi	r2,259
 100f97c:	10970704 	addi	r2,r2,23580
 100f980:	10800003 	ldbu	r2,0(r2)
 100f984:	10803fcc 	andi	r2,r2,255
 100f988:	1005003a 	cmpeq	r2,r2,zero
 100f98c:	1000041e 	bne	r2,zero,100f9a0 <OSFlagNameSet+0x98>
        *perr = OS_ERR_NAME_SET_ISR;
 100f990:	e0ffff17 	ldw	r3,-4(fp)
 100f994:	00800484 	movi	r2,18
 100f998:	18800005 	stb	r2,0(r3)
        return;
 100f99c:	00002d06 	br	100fa54 <OSFlagNameSet+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100f9a0:	0005303a 	rdctl	r2,status
 100f9a4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100f9a8:	e0fffa17 	ldw	r3,-24(fp)
 100f9ac:	00bfff84 	movi	r2,-2
 100f9b0:	1884703a 	and	r2,r3,r2
 100f9b4:	1001703a 	wrctl	status,r2
  
  return context;
 100f9b8:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 100f9bc:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 100f9c0:	e0bffd17 	ldw	r2,-12(fp)
 100f9c4:	10800003 	ldbu	r2,0(r2)
 100f9c8:	10803fcc 	andi	r2,r2,255
 100f9cc:	10800160 	cmpeqi	r2,r2,5
 100f9d0:	1000081e 	bne	r2,zero,100f9f4 <OSFlagNameSet+0xec>
 100f9d4:	e0bffb17 	ldw	r2,-20(fp)
 100f9d8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100f9dc:	e0bff917 	ldw	r2,-28(fp)
 100f9e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 100f9e4:	e0ffff17 	ldw	r3,-4(fp)
 100f9e8:	00800044 	movi	r2,1
 100f9ec:	18800005 	stb	r2,0(r3)
        return;
 100f9f0:	00001806 	br	100fa54 <OSFlagNameSet+0x14c>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 100f9f4:	e13ffe17 	ldw	r4,-8(fp)
 100f9f8:	100e9240 	call	100e924 <OS_StrLen>
 100f9fc:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
 100fa00:	e0bffc03 	ldbu	r2,-16(fp)
 100fa04:	10800830 	cmpltui	r2,r2,32
 100fa08:	1000081e 	bne	r2,zero,100fa2c <OSFlagNameSet+0x124>
 100fa0c:	e0bffb17 	ldw	r2,-20(fp)
 100fa10:	e0bff815 	stw	r2,-32(fp)
 100fa14:	e0bff817 	ldw	r2,-32(fp)
 100fa18:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
 100fa1c:	e0ffff17 	ldw	r3,-4(fp)
 100fa20:	00801cc4 	movi	r2,115
 100fa24:	18800005 	stb	r2,0(r3)
        return;
 100fa28:	00000a06 	br	100fa54 <OSFlagNameSet+0x14c>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
 100fa2c:	e0bffd17 	ldw	r2,-12(fp)
 100fa30:	11000284 	addi	r4,r2,10
 100fa34:	e17ffe17 	ldw	r5,-8(fp)
 100fa38:	100e8980 	call	100e898 <OS_StrCopy>
 100fa3c:	e0bffb17 	ldw	r2,-20(fp)
 100fa40:	e0bff715 	stw	r2,-36(fp)
 100fa44:	e0bff717 	ldw	r2,-36(fp)
 100fa48:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 100fa4c:	e0bfff17 	ldw	r2,-4(fp)
 100fa50:	10000005 	stb	zero,0(r2)
    return;
}
 100fa54:	e037883a 	mov	sp,fp
 100fa58:	dfc00117 	ldw	ra,4(sp)
 100fa5c:	df000017 	ldw	fp,0(sp)
 100fa60:	dec00204 	addi	sp,sp,8
 100fa64:	f800283a 	ret

0100fa68 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
 100fa68:	f811883a 	mov	r8,ra
 100fa6c:	100c1d00 	call	100c1d0 <_mcount>
 100fa70:	403f883a 	mov	ra,r8
 100fa74:	deffe004 	addi	sp,sp,-128
 100fa78:	dfc01f15 	stw	ra,124(sp)
 100fa7c:	df001e15 	stw	fp,120(sp)
 100fa80:	df001e04 	addi	fp,sp,120
 100fa84:	e13ff915 	stw	r4,-28(fp)
 100fa88:	e17ffa0d 	sth	r5,-24(fp)
 100fa8c:	e1bffb05 	stb	r6,-20(fp)
 100fa90:	e1fffc0d 	sth	r7,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 100fa94:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 100fa98:	e0800217 	ldw	r2,8(fp)
 100fa9c:	1004c03a 	cmpne	r2,r2,zero
 100faa0:	1000021e 	bne	r2,zero,100faac <OSFlagPend+0x44>
        return ((OS_FLAGS)0);
 100faa4:	e03fff15 	stw	zero,-4(fp)
 100faa8:	00017d06 	br	10100a0 <OSFlagPend+0x638>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 100faac:	e0bff917 	ldw	r2,-28(fp)
 100fab0:	1004c03a 	cmpne	r2,r2,zero
 100fab4:	1000051e 	bne	r2,zero,100facc <OSFlagPend+0x64>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 100fab8:	e0c00217 	ldw	r3,8(fp)
 100fabc:	00801b84 	movi	r2,110
 100fac0:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 100fac4:	e03fff15 	stw	zero,-4(fp)
 100fac8:	00017506 	br	10100a0 <OSFlagPend+0x638>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 100facc:	008040f4 	movhi	r2,259
 100fad0:	10970704 	addi	r2,r2,23580
 100fad4:	10800003 	ldbu	r2,0(r2)
 100fad8:	10803fcc 	andi	r2,r2,255
 100fadc:	1005003a 	cmpeq	r2,r2,zero
 100fae0:	1000051e 	bne	r2,zero,100faf8 <OSFlagPend+0x90>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
 100fae4:	e0c00217 	ldw	r3,8(fp)
 100fae8:	00800084 	movi	r2,2
 100faec:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 100faf0:	e03fff15 	stw	zero,-4(fp)
 100faf4:	00016a06 	br	10100a0 <OSFlagPend+0x638>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
 100faf8:	008040f4 	movhi	r2,259
 100fafc:	1096f604 	addi	r2,r2,23512
 100fb00:	10800003 	ldbu	r2,0(r2)
 100fb04:	10803fcc 	andi	r2,r2,255
 100fb08:	1005003a 	cmpeq	r2,r2,zero
 100fb0c:	1000051e 	bne	r2,zero,100fb24 <OSFlagPend+0xbc>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
 100fb10:	e0c00217 	ldw	r3,8(fp)
 100fb14:	00800344 	movi	r2,13
 100fb18:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 100fb1c:	e03fff15 	stw	zero,-4(fp)
 100fb20:	00015f06 	br	10100a0 <OSFlagPend+0x638>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 100fb24:	e0bff917 	ldw	r2,-28(fp)
 100fb28:	10800003 	ldbu	r2,0(r2)
 100fb2c:	10803fcc 	andi	r2,r2,255
 100fb30:	10800160 	cmpeqi	r2,r2,5
 100fb34:	1000051e 	bne	r2,zero,100fb4c <OSFlagPend+0xe4>
        *perr = OS_ERR_EVENT_TYPE;
 100fb38:	e0c00217 	ldw	r3,8(fp)
 100fb3c:	00800044 	movi	r2,1
 100fb40:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 100fb44:	e03fff15 	stw	zero,-4(fp)
 100fb48:	00015506 	br	10100a0 <OSFlagPend+0x638>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 100fb4c:	e0fffb03 	ldbu	r3,-20(fp)
 100fb50:	00bfe004 	movi	r2,-128
 100fb54:	1884703a 	and	r2,r3,r2
 100fb58:	e0bff285 	stb	r2,-54(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
 100fb5c:	e0bff283 	ldbu	r2,-54(fp)
 100fb60:	1005003a 	cmpeq	r2,r2,zero
 100fb64:	1000071e 	bne	r2,zero,100fb84 <OSFlagPend+0x11c>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
 100fb68:	00c01fc4 	movi	r3,127
 100fb6c:	e0bffb03 	ldbu	r2,-20(fp)
 100fb70:	10c4703a 	and	r2,r2,r3
 100fb74:	e0bffb05 	stb	r2,-20(fp)
        consume    = OS_TRUE;
 100fb78:	00800044 	movi	r2,1
 100fb7c:	e0bff205 	stb	r2,-56(fp)
 100fb80:	00000106 	br	100fb88 <OSFlagPend+0x120>
    } else {
        consume    = OS_FALSE;
 100fb84:	e03ff205 	stb	zero,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100fb88:	0005303a 	rdctl	r2,status
 100fb8c:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100fb90:	e0fff017 	ldw	r3,-64(fp)
 100fb94:	00bfff84 	movi	r2,-2
 100fb98:	1884703a 	and	r2,r3,r2
 100fb9c:	1001703a 	wrctl	status,r2
  
  return context;
 100fba0:	e0bff017 	ldw	r2,-64(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 100fba4:	e0bff115 	stw	r2,-60(fp)
    switch (wait_type) {
 100fba8:	e0bffb03 	ldbu	r2,-20(fp)
 100fbac:	e0bffe15 	stw	r2,-8(fp)
 100fbb0:	e0fffe17 	ldw	r3,-8(fp)
 100fbb4:	18800060 	cmpeqi	r2,r3,1
 100fbb8:	1000981e 	bne	r2,zero,100fe1c <OSFlagPend+0x3b4>
 100fbbc:	e0fffe17 	ldw	r3,-8(fp)
 100fbc0:	18800088 	cmpgei	r2,r3,2
 100fbc4:	1000041e 	bne	r2,zero,100fbd8 <OSFlagPend+0x170>
 100fbc8:	e0fffe17 	ldw	r3,-8(fp)
 100fbcc:	1805003a 	cmpeq	r2,r3,zero
 100fbd0:	1000641e 	bne	r2,zero,100fd64 <OSFlagPend+0x2fc>
 100fbd4:	0000bf06 	br	100fed4 <OSFlagPend+0x46c>
 100fbd8:	e0fffe17 	ldw	r3,-8(fp)
 100fbdc:	188000a0 	cmpeqi	r2,r3,2
 100fbe0:	1000041e 	bne	r2,zero,100fbf4 <OSFlagPend+0x18c>
 100fbe4:	e0fffe17 	ldw	r3,-8(fp)
 100fbe8:	188000e0 	cmpeqi	r2,r3,3
 100fbec:	10002f1e 	bne	r2,zero,100fcac <OSFlagPend+0x244>
 100fbf0:	0000b806 	br	100fed4 <OSFlagPend+0x46c>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
 100fbf4:	e0bff917 	ldw	r2,-28(fp)
 100fbf8:	10c0020b 	ldhu	r3,8(r2)
 100fbfc:	e0bffa0b 	ldhu	r2,-24(fp)
 100fc00:	1884703a 	and	r2,r3,r2
 100fc04:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 100fc08:	e0fff30b 	ldhu	r3,-52(fp)
 100fc0c:	e0bffa0b 	ldhu	r2,-24(fp)
 100fc10:	18801a1e 	bne	r3,r2,100fc7c <OSFlagPend+0x214>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 100fc14:	e0bff203 	ldbu	r2,-56(fp)
 100fc18:	10800058 	cmpnei	r2,r2,1
 100fc1c:	1000091e 	bne	r2,zero,100fc44 <OSFlagPend+0x1dc>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 100fc20:	e0bff917 	ldw	r2,-28(fp)
 100fc24:	1080020b 	ldhu	r2,8(r2)
 100fc28:	1007883a 	mov	r3,r2
 100fc2c:	e0bff30b 	ldhu	r2,-52(fp)
 100fc30:	0084303a 	nor	r2,zero,r2
 100fc34:	1884703a 	and	r2,r3,r2
 100fc38:	1007883a 	mov	r3,r2
 100fc3c:	e0bff917 	ldw	r2,-28(fp)
 100fc40:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 100fc44:	008040f4 	movhi	r2,259
 100fc48:	10970804 	addi	r2,r2,23584
 100fc4c:	10c00017 	ldw	r3,0(r2)
 100fc50:	e0bff30b 	ldhu	r2,-52(fp)
 100fc54:	18800b0d 	sth	r2,44(r3)
 100fc58:	e0bff117 	ldw	r2,-60(fp)
 100fc5c:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100fc60:	e0bfef17 	ldw	r2,-68(fp)
 100fc64:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 100fc68:	e0800217 	ldw	r2,8(fp)
 100fc6c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 100fc70:	e0bff30b 	ldhu	r2,-52(fp)
 100fc74:	e0bfff15 	stw	r2,-4(fp)
 100fc78:	00010906 	br	10100a0 <OSFlagPend+0x638>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 100fc7c:	e1bffa0b 	ldhu	r6,-24(fp)
 100fc80:	e1fffb03 	ldbu	r7,-20(fp)
 100fc84:	e0bffc0b 	ldhu	r2,-16(fp)
 100fc88:	e17ff404 	addi	r5,fp,-48
 100fc8c:	d8800015 	stw	r2,0(sp)
 100fc90:	e13ff917 	ldw	r4,-28(fp)
 100fc94:	10105c00 	call	10105c0 <OS_FlagBlock>
 100fc98:	e0bff117 	ldw	r2,-60(fp)
 100fc9c:	e0bfee15 	stw	r2,-72(fp)
 100fca0:	e0bfee17 	ldw	r2,-72(fp)
 100fca4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 100fca8:	00009506 	br	100ff00 <OSFlagPend+0x498>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
 100fcac:	e0bff917 	ldw	r2,-28(fp)
 100fcb0:	10c0020b 	ldhu	r3,8(r2)
 100fcb4:	e0bffa0b 	ldhu	r2,-24(fp)
 100fcb8:	1884703a 	and	r2,r3,r2
 100fcbc:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 100fcc0:	e0bff30b 	ldhu	r2,-52(fp)
 100fcc4:	1005003a 	cmpeq	r2,r2,zero
 100fcc8:	10001a1e 	bne	r2,zero,100fd34 <OSFlagPend+0x2cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 100fccc:	e0bff203 	ldbu	r2,-56(fp)
 100fcd0:	10800058 	cmpnei	r2,r2,1
 100fcd4:	1000091e 	bne	r2,zero,100fcfc <OSFlagPend+0x294>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 100fcd8:	e0bff917 	ldw	r2,-28(fp)
 100fcdc:	1080020b 	ldhu	r2,8(r2)
 100fce0:	1007883a 	mov	r3,r2
 100fce4:	e0bff30b 	ldhu	r2,-52(fp)
 100fce8:	0084303a 	nor	r2,zero,r2
 100fcec:	1884703a 	and	r2,r3,r2
 100fcf0:	1007883a 	mov	r3,r2
 100fcf4:	e0bff917 	ldw	r2,-28(fp)
 100fcf8:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 100fcfc:	008040f4 	movhi	r2,259
 100fd00:	10970804 	addi	r2,r2,23584
 100fd04:	10c00017 	ldw	r3,0(r2)
 100fd08:	e0bff30b 	ldhu	r2,-52(fp)
 100fd0c:	18800b0d 	sth	r2,44(r3)
 100fd10:	e0bff117 	ldw	r2,-60(fp)
 100fd14:	e0bfed15 	stw	r2,-76(fp)
 100fd18:	e0bfed17 	ldw	r2,-76(fp)
 100fd1c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 100fd20:	e0800217 	ldw	r2,8(fp)
 100fd24:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 100fd28:	e0fff30b 	ldhu	r3,-52(fp)
 100fd2c:	e0ffff15 	stw	r3,-4(fp)
 100fd30:	0000db06 	br	10100a0 <OSFlagPend+0x638>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 100fd34:	e1bffa0b 	ldhu	r6,-24(fp)
 100fd38:	e1fffb03 	ldbu	r7,-20(fp)
 100fd3c:	e0bffc0b 	ldhu	r2,-16(fp)
 100fd40:	e17ff404 	addi	r5,fp,-48
 100fd44:	d8800015 	stw	r2,0(sp)
 100fd48:	e13ff917 	ldw	r4,-28(fp)
 100fd4c:	10105c00 	call	10105c0 <OS_FlagBlock>
 100fd50:	e0bff117 	ldw	r2,-60(fp)
 100fd54:	e0bfec15 	stw	r2,-80(fp)
 100fd58:	e0bfec17 	ldw	r2,-80(fp)
 100fd5c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 100fd60:	00006706 	br	100ff00 <OSFlagPend+0x498>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 100fd64:	e0bff917 	ldw	r2,-28(fp)
 100fd68:	1080020b 	ldhu	r2,8(r2)
 100fd6c:	0084303a 	nor	r2,zero,r2
 100fd70:	1007883a 	mov	r3,r2
 100fd74:	e0bffa0b 	ldhu	r2,-24(fp)
 100fd78:	1884703a 	and	r2,r3,r2
 100fd7c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 100fd80:	e0fff30b 	ldhu	r3,-52(fp)
 100fd84:	e0bffa0b 	ldhu	r2,-24(fp)
 100fd88:	1880181e 	bne	r3,r2,100fdec <OSFlagPend+0x384>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 100fd8c:	e0bff203 	ldbu	r2,-56(fp)
 100fd90:	10800058 	cmpnei	r2,r2,1
 100fd94:	1000071e 	bne	r2,zero,100fdb4 <OSFlagPend+0x34c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 100fd98:	e0bff917 	ldw	r2,-28(fp)
 100fd9c:	10c0020b 	ldhu	r3,8(r2)
 100fda0:	e0bff30b 	ldhu	r2,-52(fp)
 100fda4:	1884b03a 	or	r2,r3,r2
 100fda8:	1007883a 	mov	r3,r2
 100fdac:	e0bff917 	ldw	r2,-28(fp)
 100fdb0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 100fdb4:	008040f4 	movhi	r2,259
 100fdb8:	10970804 	addi	r2,r2,23584
 100fdbc:	10c00017 	ldw	r3,0(r2)
 100fdc0:	e0bff30b 	ldhu	r2,-52(fp)
 100fdc4:	18800b0d 	sth	r2,44(r3)
 100fdc8:	e0bff117 	ldw	r2,-60(fp)
 100fdcc:	e0bfeb15 	stw	r2,-84(fp)
 100fdd0:	e0bfeb17 	ldw	r2,-84(fp)
 100fdd4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 100fdd8:	e0800217 	ldw	r2,8(fp)
 100fddc:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 100fde0:	e0bff30b 	ldhu	r2,-52(fp)
 100fde4:	e0bfff15 	stw	r2,-4(fp)
 100fde8:	0000ad06 	br	10100a0 <OSFlagPend+0x638>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 100fdec:	e1bffa0b 	ldhu	r6,-24(fp)
 100fdf0:	e1fffb03 	ldbu	r7,-20(fp)
 100fdf4:	e0bffc0b 	ldhu	r2,-16(fp)
 100fdf8:	e17ff404 	addi	r5,fp,-48
 100fdfc:	d8800015 	stw	r2,0(sp)
 100fe00:	e13ff917 	ldw	r4,-28(fp)
 100fe04:	10105c00 	call	10105c0 <OS_FlagBlock>
 100fe08:	e0bff117 	ldw	r2,-60(fp)
 100fe0c:	e0bfea15 	stw	r2,-88(fp)
 100fe10:	e0bfea17 	ldw	r2,-88(fp)
 100fe14:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 100fe18:	00003906 	br	100ff00 <OSFlagPend+0x498>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 100fe1c:	e0bff917 	ldw	r2,-28(fp)
 100fe20:	1080020b 	ldhu	r2,8(r2)
 100fe24:	0084303a 	nor	r2,zero,r2
 100fe28:	1007883a 	mov	r3,r2
 100fe2c:	e0bffa0b 	ldhu	r2,-24(fp)
 100fe30:	1884703a 	and	r2,r3,r2
 100fe34:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 100fe38:	e0bff30b 	ldhu	r2,-52(fp)
 100fe3c:	1005003a 	cmpeq	r2,r2,zero
 100fe40:	1000181e 	bne	r2,zero,100fea4 <OSFlagPend+0x43c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 100fe44:	e0bff203 	ldbu	r2,-56(fp)
 100fe48:	10800058 	cmpnei	r2,r2,1
 100fe4c:	1000071e 	bne	r2,zero,100fe6c <OSFlagPend+0x404>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 100fe50:	e0bff917 	ldw	r2,-28(fp)
 100fe54:	10c0020b 	ldhu	r3,8(r2)
 100fe58:	e0bff30b 	ldhu	r2,-52(fp)
 100fe5c:	1884b03a 	or	r2,r3,r2
 100fe60:	1007883a 	mov	r3,r2
 100fe64:	e0bff917 	ldw	r2,-28(fp)
 100fe68:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 100fe6c:	008040f4 	movhi	r2,259
 100fe70:	10970804 	addi	r2,r2,23584
 100fe74:	10c00017 	ldw	r3,0(r2)
 100fe78:	e0bff30b 	ldhu	r2,-52(fp)
 100fe7c:	18800b0d 	sth	r2,44(r3)
 100fe80:	e0bff117 	ldw	r2,-60(fp)
 100fe84:	e0bfe915 	stw	r2,-92(fp)
 100fe88:	e0bfe917 	ldw	r2,-92(fp)
 100fe8c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 100fe90:	e0800217 	ldw	r2,8(fp)
 100fe94:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 100fe98:	e0fff30b 	ldhu	r3,-52(fp)
 100fe9c:	e0ffff15 	stw	r3,-4(fp)
 100fea0:	00007f06 	br	10100a0 <OSFlagPend+0x638>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 100fea4:	e1bffa0b 	ldhu	r6,-24(fp)
 100fea8:	e1fffb03 	ldbu	r7,-20(fp)
 100feac:	e0bffc0b 	ldhu	r2,-16(fp)
 100feb0:	e17ff404 	addi	r5,fp,-48
 100feb4:	d8800015 	stw	r2,0(sp)
 100feb8:	e13ff917 	ldw	r4,-28(fp)
 100febc:	10105c00 	call	10105c0 <OS_FlagBlock>
 100fec0:	e0bff117 	ldw	r2,-60(fp)
 100fec4:	e0bfe815 	stw	r2,-96(fp)
 100fec8:	e0bfe817 	ldw	r2,-96(fp)
 100fecc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 100fed0:	00000b06 	br	100ff00 <OSFlagPend+0x498>
 100fed4:	e0bff117 	ldw	r2,-60(fp)
 100fed8:	e0bfe715 	stw	r2,-100(fp)
 100fedc:	e0bfe717 	ldw	r2,-100(fp)
 100fee0:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 100fee4:	e03ff30d 	sth	zero,-52(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
 100fee8:	e0c00217 	ldw	r3,8(fp)
 100feec:	00801bc4 	movi	r2,111
 100fef0:	18800005 	stb	r2,0(r3)
             return (flags_rdy);
 100fef4:	e0bff30b 	ldhu	r2,-52(fp)
 100fef8:	e0bfff15 	stw	r2,-4(fp)
 100fefc:	00006806 	br	10100a0 <OSFlagPend+0x638>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
 100ff00:	100e73c0 	call	100e73c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100ff04:	0005303a 	rdctl	r2,status
 100ff08:	e0bfe615 	stw	r2,-104(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100ff0c:	e0ffe617 	ldw	r3,-104(fp)
 100ff10:	00bfff84 	movi	r2,-2
 100ff14:	1884703a 	and	r2,r3,r2
 100ff18:	1001703a 	wrctl	status,r2
  
  return context;
 100ff1c:	e0bfe617 	ldw	r2,-104(fp)
    OS_ENTER_CRITICAL();
 100ff20:	e0bff115 	stw	r2,-60(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
 100ff24:	008040f4 	movhi	r2,259
 100ff28:	10970804 	addi	r2,r2,23584
 100ff2c:	10800017 	ldw	r2,0(r2)
 100ff30:	10800c43 	ldbu	r2,49(r2)
 100ff34:	10803fcc 	andi	r2,r2,255
 100ff38:	1005003a 	cmpeq	r2,r2,zero
 100ff3c:	1000221e 	bne	r2,zero,100ffc8 <OSFlagPend+0x560>
        pend_stat                = OSTCBCur->OSTCBStatPend;
 100ff40:	008040f4 	movhi	r2,259
 100ff44:	10970804 	addi	r2,r2,23584
 100ff48:	10800017 	ldw	r2,0(r2)
 100ff4c:	10800c43 	ldbu	r2,49(r2)
 100ff50:	e0bff245 	stb	r2,-55(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 100ff54:	008040f4 	movhi	r2,259
 100ff58:	10970804 	addi	r2,r2,23584
 100ff5c:	10800017 	ldw	r2,0(r2)
 100ff60:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
 100ff64:	e13ff404 	addi	r4,fp,-48
 100ff68:	101099c0 	call	101099c <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
 100ff6c:	008040f4 	movhi	r2,259
 100ff70:	10970804 	addi	r2,r2,23584
 100ff74:	10800017 	ldw	r2,0(r2)
 100ff78:	10000c05 	stb	zero,48(r2)
 100ff7c:	e0bff117 	ldw	r2,-60(fp)
 100ff80:	e0bfe515 	stw	r2,-108(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100ff84:	e0bfe517 	ldw	r2,-108(fp)
 100ff88:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
 100ff8c:	e03ff30d 	sth	zero,-52(fp)
        switch (pend_stat) {
 100ff90:	e0bff243 	ldbu	r2,-55(fp)
 100ff94:	108000a0 	cmpeqi	r2,r2,2
 100ff98:	1000011e 	bne	r2,zero,100ffa0 <OSFlagPend+0x538>
 100ff9c:	00000406 	br	100ffb0 <OSFlagPend+0x548>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
 100ffa0:	e0c00217 	ldw	r3,8(fp)
 100ffa4:	00800384 	movi	r2,14
 100ffa8:	18800005 	stb	r2,0(r3)
                 break;
 100ffac:	00000306 	br	100ffbc <OSFlagPend+0x554>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
 100ffb0:	e0c00217 	ldw	r3,8(fp)
 100ffb4:	00800284 	movi	r2,10
 100ffb8:	18800005 	stb	r2,0(r3)
                 break;
        }
        return (flags_rdy);
 100ffbc:	e0fff30b 	ldhu	r3,-52(fp)
 100ffc0:	e0ffff15 	stw	r3,-4(fp)
 100ffc4:	00003606 	br	10100a0 <OSFlagPend+0x638>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
 100ffc8:	008040f4 	movhi	r2,259
 100ffcc:	10970804 	addi	r2,r2,23584
 100ffd0:	10800017 	ldw	r2,0(r2)
 100ffd4:	10800b0b 	ldhu	r2,44(r2)
 100ffd8:	e0bff30d 	sth	r2,-52(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
 100ffdc:	e0bff203 	ldbu	r2,-56(fp)
 100ffe0:	10800058 	cmpnei	r2,r2,1
 100ffe4:	1000261e 	bne	r2,zero,1010080 <OSFlagPend+0x618>
        switch (wait_type) {
 100ffe8:	e0bffb03 	ldbu	r2,-20(fp)
 100ffec:	e0bffd15 	stw	r2,-12(fp)
 100fff0:	e0fffd17 	ldw	r3,-12(fp)
 100fff4:	1804803a 	cmplt	r2,r3,zero
 100fff8:	1000181e 	bne	r2,zero,101005c <OSFlagPend+0x5f4>
 100fffc:	e0fffd17 	ldw	r3,-12(fp)
 1010000:	18800090 	cmplti	r2,r3,2
 1010004:	10000d1e 	bne	r2,zero,101003c <OSFlagPend+0x5d4>
 1010008:	e0fffd17 	ldw	r3,-12(fp)
 101000c:	18800108 	cmpgei	r2,r3,4
 1010010:	1000121e 	bne	r2,zero,101005c <OSFlagPend+0x5f4>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
 1010014:	e0bff917 	ldw	r2,-28(fp)
 1010018:	1080020b 	ldhu	r2,8(r2)
 101001c:	1007883a 	mov	r3,r2
 1010020:	e0bff30b 	ldhu	r2,-52(fp)
 1010024:	0084303a 	nor	r2,zero,r2
 1010028:	1884703a 	and	r2,r3,r2
 101002c:	1007883a 	mov	r3,r2
 1010030:	e0bff917 	ldw	r2,-28(fp)
 1010034:	10c0020d 	sth	r3,8(r2)
                 break;
 1010038:	00001106 	br	1010080 <OSFlagPend+0x618>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
 101003c:	e0bff917 	ldw	r2,-28(fp)
 1010040:	10c0020b 	ldhu	r3,8(r2)
 1010044:	e0bff30b 	ldhu	r2,-52(fp)
 1010048:	1884b03a 	or	r2,r3,r2
 101004c:	1007883a 	mov	r3,r2
 1010050:	e0bff917 	ldw	r2,-28(fp)
 1010054:	10c0020d 	sth	r3,8(r2)
                 break;
 1010058:	00000906 	br	1010080 <OSFlagPend+0x618>
 101005c:	e0bff117 	ldw	r2,-60(fp)
 1010060:	e0bfe415 	stw	r2,-112(fp)
 1010064:	e0bfe417 	ldw	r2,-112(fp)
 1010068:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 101006c:	e0c00217 	ldw	r3,8(fp)
 1010070:	00801bc4 	movi	r2,111
 1010074:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
 1010078:	e03fff15 	stw	zero,-4(fp)
 101007c:	00000806 	br	10100a0 <OSFlagPend+0x638>
 1010080:	e0bff117 	ldw	r2,-60(fp)
 1010084:	e0bfe315 	stw	r2,-116(fp)
 1010088:	e0bfe317 	ldw	r2,-116(fp)
 101008c:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
 1010090:	e0800217 	ldw	r2,8(fp)
 1010094:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
 1010098:	e0bff30b 	ldhu	r2,-52(fp)
 101009c:	e0bfff15 	stw	r2,-4(fp)
 10100a0:	e0bfff17 	ldw	r2,-4(fp)
}
 10100a4:	e037883a 	mov	sp,fp
 10100a8:	dfc00117 	ldw	ra,4(sp)
 10100ac:	df000017 	ldw	fp,0(sp)
 10100b0:	dec00204 	addi	sp,sp,8
 10100b4:	f800283a 	ret

010100b8 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
 10100b8:	f811883a 	mov	r8,ra
 10100bc:	100c1d00 	call	100c1d0 <_mcount>
 10100c0:	403f883a 	mov	ra,r8
 10100c4:	defffb04 	addi	sp,sp,-20
 10100c8:	df000415 	stw	fp,16(sp)
 10100cc:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 10100d0:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10100d4:	0005303a 	rdctl	r2,status
 10100d8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10100dc:	e0fffd17 	ldw	r3,-12(fp)
 10100e0:	00bfff84 	movi	r2,-2
 10100e4:	1884703a 	and	r2,r3,r2
 10100e8:	1001703a 	wrctl	status,r2
  
  return context;
 10100ec:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 10100f0:	e0bffe15 	stw	r2,-8(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
 10100f4:	008040f4 	movhi	r2,259
 10100f8:	10970804 	addi	r2,r2,23584
 10100fc:	10800017 	ldw	r2,0(r2)
 1010100:	10800b0b 	ldhu	r2,44(r2)
 1010104:	e0bfff0d 	sth	r2,-4(fp)
 1010108:	e0bffe17 	ldw	r2,-8(fp)
 101010c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1010110:	e0bffc17 	ldw	r2,-16(fp)
 1010114:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
 1010118:	e0bfff0b 	ldhu	r2,-4(fp)
}
 101011c:	e037883a 	mov	sp,fp
 1010120:	df000017 	ldw	fp,0(sp)
 1010124:	dec00104 	addi	sp,sp,4
 1010128:	f800283a 	ret

0101012c <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
 101012c:	f811883a 	mov	r8,ra
 1010130:	100c1d00 	call	100c1d0 <_mcount>
 1010134:	403f883a 	mov	ra,r8
 1010138:	deffed04 	addi	sp,sp,-76
 101013c:	dfc01215 	stw	ra,72(sp)
 1010140:	df001115 	stw	fp,68(sp)
 1010144:	df001104 	addi	fp,sp,68
 1010148:	e13ff915 	stw	r4,-28(fp)
 101014c:	e1fffc15 	stw	r7,-16(fp)
 1010150:	e17ffa0d 	sth	r5,-24(fp)
 1010154:	e1bffb05 	stb	r6,-20(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
 1010158:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 101015c:	e0bffc17 	ldw	r2,-16(fp)
 1010160:	1004c03a 	cmpne	r2,r2,zero
 1010164:	1000021e 	bne	r2,zero,1010170 <OSFlagPost+0x44>
        return ((OS_FLAGS)0);
 1010168:	e03fff15 	stw	zero,-4(fp)
 101016c:	0000d606 	br	10104c8 <OSFlagPost+0x39c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
 1010170:	e0bff917 	ldw	r2,-28(fp)
 1010174:	1004c03a 	cmpne	r2,r2,zero
 1010178:	1000051e 	bne	r2,zero,1010190 <OSFlagPost+0x64>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 101017c:	e0fffc17 	ldw	r3,-16(fp)
 1010180:	00801b84 	movi	r2,110
 1010184:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 1010188:	e03fff15 	stw	zero,-4(fp)
 101018c:	0000ce06 	br	10104c8 <OSFlagPost+0x39c>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
 1010190:	e0bff917 	ldw	r2,-28(fp)
 1010194:	10800003 	ldbu	r2,0(r2)
 1010198:	10803fcc 	andi	r2,r2,255
 101019c:	10800160 	cmpeqi	r2,r2,5
 10101a0:	1000051e 	bne	r2,zero,10101b8 <OSFlagPost+0x8c>
        *perr = OS_ERR_EVENT_TYPE;
 10101a4:	e0fffc17 	ldw	r3,-16(fp)
 10101a8:	00800044 	movi	r2,1
 10101ac:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 10101b0:	e03fff15 	stw	zero,-4(fp)
 10101b4:	0000c406 	br	10104c8 <OSFlagPost+0x39c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10101b8:	0005303a 	rdctl	r2,status
 10101bc:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10101c0:	e0fff417 	ldw	r3,-48(fp)
 10101c4:	00bfff84 	movi	r2,-2
 10101c8:	1884703a 	and	r2,r3,r2
 10101cc:	1001703a 	wrctl	status,r2
  
  return context;
 10101d0:	e0bff417 	ldw	r2,-48(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 10101d4:	e0bff515 	stw	r2,-44(fp)
    switch (opt) {
 10101d8:	e0bffb03 	ldbu	r2,-20(fp)
 10101dc:	e0bffe15 	stw	r2,-8(fp)
 10101e0:	e0fffe17 	ldw	r3,-8(fp)
 10101e4:	1805003a 	cmpeq	r2,r3,zero
 10101e8:	1000041e 	bne	r2,zero,10101fc <OSFlagPost+0xd0>
 10101ec:	e0fffe17 	ldw	r3,-8(fp)
 10101f0:	18800060 	cmpeqi	r2,r3,1
 10101f4:	10000b1e 	bne	r2,zero,1010224 <OSFlagPost+0xf8>
 10101f8:	00001206 	br	1010244 <OSFlagPost+0x118>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
 10101fc:	e0bff917 	ldw	r2,-28(fp)
 1010200:	1080020b 	ldhu	r2,8(r2)
 1010204:	1007883a 	mov	r3,r2
 1010208:	e0bffa0b 	ldhu	r2,-24(fp)
 101020c:	0084303a 	nor	r2,zero,r2
 1010210:	1884703a 	and	r2,r3,r2
 1010214:	1007883a 	mov	r3,r2
 1010218:	e0bff917 	ldw	r2,-28(fp)
 101021c:	10c0020d 	sth	r3,8(r2)
             break;
 1010220:	00001106 	br	1010268 <OSFlagPost+0x13c>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
 1010224:	e0bff917 	ldw	r2,-28(fp)
 1010228:	10c0020b 	ldhu	r3,8(r2)
 101022c:	e0bffa0b 	ldhu	r2,-24(fp)
 1010230:	1884b03a 	or	r2,r3,r2
 1010234:	1007883a 	mov	r3,r2
 1010238:	e0bff917 	ldw	r2,-28(fp)
 101023c:	10c0020d 	sth	r3,8(r2)
             break;
 1010240:	00000906 	br	1010268 <OSFlagPost+0x13c>
 1010244:	e0bff517 	ldw	r2,-44(fp)
 1010248:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101024c:	e0bff317 	ldw	r2,-52(fp)
 1010250:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
 1010254:	e0fffc17 	ldw	r3,-16(fp)
 1010258:	00801c44 	movi	r2,113
 101025c:	18800005 	stb	r2,0(r3)
             return ((OS_FLAGS)0);
 1010260:	e03fff15 	stw	zero,-4(fp)
 1010264:	00009806 	br	10104c8 <OSFlagPost+0x39c>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
 1010268:	e03ff785 	stb	zero,-34(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 101026c:	e0bff917 	ldw	r2,-28(fp)
 1010270:	10800117 	ldw	r2,4(r2)
 1010274:	e0bff815 	stw	r2,-32(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 1010278:	00007506 	br	1010450 <OSFlagPost+0x324>
        switch (pnode->OSFlagNodeWaitType) {
 101027c:	e0bff817 	ldw	r2,-32(fp)
 1010280:	10800483 	ldbu	r2,18(r2)
 1010284:	10803fcc 	andi	r2,r2,255
 1010288:	e0bffd15 	stw	r2,-12(fp)
 101028c:	e0fffd17 	ldw	r3,-12(fp)
 1010290:	18800060 	cmpeqi	r2,r3,1
 1010294:	10004d1e 	bne	r2,zero,10103cc <OSFlagPost+0x2a0>
 1010298:	e0fffd17 	ldw	r3,-12(fp)
 101029c:	18800088 	cmpgei	r2,r3,2
 10102a0:	1000041e 	bne	r2,zero,10102b4 <OSFlagPost+0x188>
 10102a4:	e0fffd17 	ldw	r3,-12(fp)
 10102a8:	1805003a 	cmpeq	r2,r3,zero
 10102ac:	1000301e 	bne	r2,zero,1010370 <OSFlagPost+0x244>
 10102b0:	00005b06 	br	1010420 <OSFlagPost+0x2f4>
 10102b4:	e0fffd17 	ldw	r3,-12(fp)
 10102b8:	188000a0 	cmpeqi	r2,r3,2
 10102bc:	1000041e 	bne	r2,zero,10102d0 <OSFlagPost+0x1a4>
 10102c0:	e0fffd17 	ldw	r3,-12(fp)
 10102c4:	188000e0 	cmpeqi	r2,r3,3
 10102c8:	1000161e 	bne	r2,zero,1010324 <OSFlagPost+0x1f8>
 10102cc:	00005406 	br	1010420 <OSFlagPost+0x2f4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 10102d0:	e0bff917 	ldw	r2,-28(fp)
 10102d4:	10c0020b 	ldhu	r3,8(r2)
 10102d8:	e0bff817 	ldw	r2,-32(fp)
 10102dc:	1080040b 	ldhu	r2,16(r2)
 10102e0:	1884703a 	and	r2,r3,r2
 10102e4:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 10102e8:	e0bff817 	ldw	r2,-32(fp)
 10102ec:	1080040b 	ldhu	r2,16(r2)
 10102f0:	10ffffcc 	andi	r3,r2,65535
 10102f4:	e0bff68b 	ldhu	r2,-38(fp)
 10102f8:	1880521e 	bne	r3,r2,1010444 <OSFlagPost+0x318>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 10102fc:	e17ff68b 	ldhu	r5,-38(fp)
 1010300:	e13ff817 	ldw	r4,-32(fp)
 1010304:	10108800 	call	1010880 <OS_FlagTaskRdy>
 1010308:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
 101030c:	e0bff603 	ldbu	r2,-40(fp)
 1010310:	10800058 	cmpnei	r2,r2,1
 1010314:	10004b1e 	bne	r2,zero,1010444 <OSFlagPost+0x318>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 1010318:	00800044 	movi	r2,1
 101031c:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
 1010320:	00004806 	br	1010444 <OSFlagPost+0x318>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 1010324:	e0bff917 	ldw	r2,-28(fp)
 1010328:	10c0020b 	ldhu	r3,8(r2)
 101032c:	e0bff817 	ldw	r2,-32(fp)
 1010330:	1080040b 	ldhu	r2,16(r2)
 1010334:	1884703a 	and	r2,r3,r2
 1010338:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 101033c:	e0bff68b 	ldhu	r2,-38(fp)
 1010340:	1005003a 	cmpeq	r2,r2,zero
 1010344:	10003f1e 	bne	r2,zero,1010444 <OSFlagPost+0x318>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 1010348:	e17ff68b 	ldhu	r5,-38(fp)
 101034c:	e13ff817 	ldw	r4,-32(fp)
 1010350:	10108800 	call	1010880 <OS_FlagTaskRdy>
 1010354:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
 1010358:	e0bff603 	ldbu	r2,-40(fp)
 101035c:	10800058 	cmpnei	r2,r2,1
 1010360:	1000381e 	bne	r2,zero,1010444 <OSFlagPost+0x318>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 1010364:	00800044 	movi	r2,1
 1010368:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
 101036c:	00003506 	br	1010444 <OSFlagPost+0x318>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 1010370:	e0bff917 	ldw	r2,-28(fp)
 1010374:	1080020b 	ldhu	r2,8(r2)
 1010378:	0084303a 	nor	r2,zero,r2
 101037c:	1007883a 	mov	r3,r2
 1010380:	e0bff817 	ldw	r2,-32(fp)
 1010384:	1080040b 	ldhu	r2,16(r2)
 1010388:	1884703a 	and	r2,r3,r2
 101038c:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 1010390:	e0bff817 	ldw	r2,-32(fp)
 1010394:	1080040b 	ldhu	r2,16(r2)
 1010398:	10ffffcc 	andi	r3,r2,65535
 101039c:	e0bff68b 	ldhu	r2,-38(fp)
 10103a0:	1880281e 	bne	r3,r2,1010444 <OSFlagPost+0x318>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 10103a4:	e17ff68b 	ldhu	r5,-38(fp)
 10103a8:	e13ff817 	ldw	r4,-32(fp)
 10103ac:	10108800 	call	1010880 <OS_FlagTaskRdy>
 10103b0:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
 10103b4:	e0bff603 	ldbu	r2,-40(fp)
 10103b8:	10800058 	cmpnei	r2,r2,1
 10103bc:	1000211e 	bne	r2,zero,1010444 <OSFlagPost+0x318>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 10103c0:	00800044 	movi	r2,1
 10103c4:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
 10103c8:	00001e06 	br	1010444 <OSFlagPost+0x318>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 10103cc:	e0bff917 	ldw	r2,-28(fp)
 10103d0:	1080020b 	ldhu	r2,8(r2)
 10103d4:	0084303a 	nor	r2,zero,r2
 10103d8:	1007883a 	mov	r3,r2
 10103dc:	e0bff817 	ldw	r2,-32(fp)
 10103e0:	1080040b 	ldhu	r2,16(r2)
 10103e4:	1884703a 	and	r2,r3,r2
 10103e8:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 10103ec:	e0bff68b 	ldhu	r2,-38(fp)
 10103f0:	1005003a 	cmpeq	r2,r2,zero
 10103f4:	1000131e 	bne	r2,zero,1010444 <OSFlagPost+0x318>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 10103f8:	e17ff68b 	ldhu	r5,-38(fp)
 10103fc:	e13ff817 	ldw	r4,-32(fp)
 1010400:	10108800 	call	1010880 <OS_FlagTaskRdy>
 1010404:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
 1010408:	e0bff603 	ldbu	r2,-40(fp)
 101040c:	10800058 	cmpnei	r2,r2,1
 1010410:	10000c1e 	bne	r2,zero,1010444 <OSFlagPost+0x318>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 1010414:	00800044 	movi	r2,1
 1010418:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
 101041c:	00000906 	br	1010444 <OSFlagPost+0x318>
 1010420:	e0bff517 	ldw	r2,-44(fp)
 1010424:	e0bff215 	stw	r2,-56(fp)
 1010428:	e0bff217 	ldw	r2,-56(fp)
 101042c:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 1010430:	e0fffc17 	ldw	r3,-16(fp)
 1010434:	00801bc4 	movi	r2,111
 1010438:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
 101043c:	e03fff15 	stw	zero,-4(fp)
 1010440:	00002106 	br	10104c8 <OSFlagPost+0x39c>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
 1010444:	e0bff817 	ldw	r2,-32(fp)
 1010448:	10800017 	ldw	r2,0(r2)
 101044c:	e0bff815 	stw	r2,-32(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 1010450:	e0bff817 	ldw	r2,-32(fp)
 1010454:	1004c03a 	cmpne	r2,r2,zero
 1010458:	103f881e 	bne	r2,zero,101027c <OSFlagPost+0x150>
 101045c:	e0bff517 	ldw	r2,-44(fp)
 1010460:	e0bff115 	stw	r2,-60(fp)
 1010464:	e0bff117 	ldw	r2,-60(fp)
 1010468:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
 101046c:	e0bff783 	ldbu	r2,-34(fp)
 1010470:	10800058 	cmpnei	r2,r2,1
 1010474:	1000011e 	bne	r2,zero,101047c <OSFlagPost+0x350>
        OS_Sched();
 1010478:	100e73c0 	call	100e73c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101047c:	0005303a 	rdctl	r2,status
 1010480:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1010484:	e0fff017 	ldw	r3,-64(fp)
 1010488:	00bfff84 	movi	r2,-2
 101048c:	1884703a 	and	r2,r3,r2
 1010490:	1001703a 	wrctl	status,r2
  
  return context;
 1010494:	e0bff017 	ldw	r2,-64(fp)
    }
    OS_ENTER_CRITICAL();
 1010498:	e0bff515 	stw	r2,-44(fp)
    flags_cur = pgrp->OSFlagFlags;
 101049c:	e0bff917 	ldw	r2,-28(fp)
 10104a0:	1080020b 	ldhu	r2,8(r2)
 10104a4:	e0bff70d 	sth	r2,-36(fp)
 10104a8:	e0bff517 	ldw	r2,-44(fp)
 10104ac:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10104b0:	e0bfef17 	ldw	r2,-68(fp)
 10104b4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
 10104b8:	e0bffc17 	ldw	r2,-16(fp)
 10104bc:	10000005 	stb	zero,0(r2)
    return (flags_cur);
 10104c0:	e0bff70b 	ldhu	r2,-36(fp)
 10104c4:	e0bfff15 	stw	r2,-4(fp)
 10104c8:	e0bfff17 	ldw	r2,-4(fp)
}
 10104cc:	e037883a 	mov	sp,fp
 10104d0:	dfc00117 	ldw	ra,4(sp)
 10104d4:	df000017 	ldw	fp,0(sp)
 10104d8:	dec00204 	addi	sp,sp,8
 10104dc:	f800283a 	ret

010104e0 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
 10104e0:	f811883a 	mov	r8,ra
 10104e4:	100c1d00 	call	100c1d0 <_mcount>
 10104e8:	403f883a 	mov	ra,r8
 10104ec:	defff804 	addi	sp,sp,-32
 10104f0:	df000715 	stw	fp,28(sp)
 10104f4:	df000704 	addi	fp,sp,28
 10104f8:	e13ffd15 	stw	r4,-12(fp)
 10104fc:	e17ffe15 	stw	r5,-8(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
 1010500:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
 1010504:	e0bffe17 	ldw	r2,-8(fp)
 1010508:	1004c03a 	cmpne	r2,r2,zero
 101050c:	1000021e 	bne	r2,zero,1010518 <OSFlagQuery+0x38>
        return ((OS_FLAGS)0);
 1010510:	e03fff15 	stw	zero,-4(fp)
 1010514:	00002506 	br	10105ac <OSFlagQuery+0xcc>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
 1010518:	e0bffd17 	ldw	r2,-12(fp)
 101051c:	1004c03a 	cmpne	r2,r2,zero
 1010520:	1000051e 	bne	r2,zero,1010538 <OSFlagQuery+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 1010524:	e0fffe17 	ldw	r3,-8(fp)
 1010528:	00801b84 	movi	r2,110
 101052c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 1010530:	e03fff15 	stw	zero,-4(fp)
 1010534:	00001d06 	br	10105ac <OSFlagQuery+0xcc>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
 1010538:	e0bffd17 	ldw	r2,-12(fp)
 101053c:	10800003 	ldbu	r2,0(r2)
 1010540:	10803fcc 	andi	r2,r2,255
 1010544:	10800160 	cmpeqi	r2,r2,5
 1010548:	1000051e 	bne	r2,zero,1010560 <OSFlagQuery+0x80>
        *perr = OS_ERR_EVENT_TYPE;
 101054c:	e0fffe17 	ldw	r3,-8(fp)
 1010550:	00800044 	movi	r2,1
 1010554:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 1010558:	e03fff15 	stw	zero,-4(fp)
 101055c:	00001306 	br	10105ac <OSFlagQuery+0xcc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1010560:	0005303a 	rdctl	r2,status
 1010564:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1010568:	e0fffa17 	ldw	r3,-24(fp)
 101056c:	00bfff84 	movi	r2,-2
 1010570:	1884703a 	and	r2,r3,r2
 1010574:	1001703a 	wrctl	status,r2
  
  return context;
 1010578:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 101057c:	e0bffb15 	stw	r2,-20(fp)
    flags = pgrp->OSFlagFlags;
 1010580:	e0bffd17 	ldw	r2,-12(fp)
 1010584:	1080020b 	ldhu	r2,8(r2)
 1010588:	e0bffc0d 	sth	r2,-16(fp)
 101058c:	e0bffb17 	ldw	r2,-20(fp)
 1010590:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1010594:	e0bff917 	ldw	r2,-28(fp)
 1010598:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 101059c:	e0bffe17 	ldw	r2,-8(fp)
 10105a0:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
 10105a4:	e0bffc0b 	ldhu	r2,-16(fp)
 10105a8:	e0bfff15 	stw	r2,-4(fp)
 10105ac:	e0bfff17 	ldw	r2,-4(fp)
}
 10105b0:	e037883a 	mov	sp,fp
 10105b4:	df000017 	ldw	fp,0(sp)
 10105b8:	dec00104 	addi	sp,sp,4
 10105bc:	f800283a 	ret

010105c0 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
 10105c0:	f811883a 	mov	r8,ra
 10105c4:	100c1d00 	call	100c1d0 <_mcount>
 10105c8:	403f883a 	mov	ra,r8
 10105cc:	defff804 	addi	sp,sp,-32
 10105d0:	df000715 	stw	fp,28(sp)
 10105d4:	df000704 	addi	fp,sp,28
 10105d8:	e13ffb15 	stw	r4,-20(fp)
 10105dc:	e17ffc15 	stw	r5,-16(fp)
 10105e0:	e0800117 	ldw	r2,4(fp)
 10105e4:	e1bffd0d 	sth	r6,-12(fp)
 10105e8:	e1fffe05 	stb	r7,-8(fp)
 10105ec:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
 10105f0:	008040f4 	movhi	r2,259
 10105f4:	10970804 	addi	r2,r2,23584
 10105f8:	10c00017 	ldw	r3,0(r2)
 10105fc:	008040f4 	movhi	r2,259
 1010600:	10970804 	addi	r2,r2,23584
 1010604:	10800017 	ldw	r2,0(r2)
 1010608:	10800c03 	ldbu	r2,48(r2)
 101060c:	10800814 	ori	r2,r2,32
 1010610:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
 1010614:	008040f4 	movhi	r2,259
 1010618:	10970804 	addi	r2,r2,23584
 101061c:	10800017 	ldw	r2,0(r2)
 1010620:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
 1010624:	008040f4 	movhi	r2,259
 1010628:	10970804 	addi	r2,r2,23584
 101062c:	10c00017 	ldw	r3,0(r2)
 1010630:	e0bfff0b 	ldhu	r2,-4(fp)
 1010634:	18800b8d 	sth	r2,46(r3)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
 1010638:	008040f4 	movhi	r2,259
 101063c:	10970804 	addi	r2,r2,23584
 1010640:	10c00017 	ldw	r3,0(r2)
 1010644:	e0bffc17 	ldw	r2,-16(fp)
 1010648:	18800a15 	stw	r2,40(r3)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
 101064c:	e0fffc17 	ldw	r3,-16(fp)
 1010650:	e0bffd0b 	ldhu	r2,-12(fp)
 1010654:	1880040d 	sth	r2,16(r3)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
 1010658:	e0fffc17 	ldw	r3,-16(fp)
 101065c:	e0bffe03 	ldbu	r2,-8(fp)
 1010660:	18800485 	stb	r2,18(r3)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
 1010664:	008040f4 	movhi	r2,259
 1010668:	10970804 	addi	r2,r2,23584
 101066c:	10c00017 	ldw	r3,0(r2)
 1010670:	e0bffc17 	ldw	r2,-16(fp)
 1010674:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
 1010678:	e0bffb17 	ldw	r2,-20(fp)
 101067c:	10c00117 	ldw	r3,4(r2)
 1010680:	e0bffc17 	ldw	r2,-16(fp)
 1010684:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
 1010688:	e0bffc17 	ldw	r2,-16(fp)
 101068c:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
 1010690:	e0fffc17 	ldw	r3,-16(fp)
 1010694:	e0bffb17 	ldw	r2,-20(fp)
 1010698:	18800315 	stw	r2,12(r3)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 101069c:	e0bffb17 	ldw	r2,-20(fp)
 10106a0:	10800117 	ldw	r2,4(r2)
 10106a4:	e0bffa15 	stw	r2,-24(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
 10106a8:	e0bffa17 	ldw	r2,-24(fp)
 10106ac:	1005003a 	cmpeq	r2,r2,zero
 10106b0:	1000031e 	bne	r2,zero,10106c0 <OS_FlagBlock+0x100>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
 10106b4:	e0fffa17 	ldw	r3,-24(fp)
 10106b8:	e0bffc17 	ldw	r2,-16(fp)
 10106bc:	18800115 	stw	r2,4(r3)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
 10106c0:	e0fffb17 	ldw	r3,-20(fp)
 10106c4:	e0bffc17 	ldw	r2,-16(fp)
 10106c8:	18800115 	stw	r2,4(r3)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
 10106cc:	008040f4 	movhi	r2,259
 10106d0:	10970804 	addi	r2,r2,23584
 10106d4:	10800017 	ldw	r2,0(r2)
 10106d8:	10800d03 	ldbu	r2,52(r2)
 10106dc:	e0bff905 	stb	r2,-28(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 10106e0:	e13ff903 	ldbu	r4,-28(fp)
 10106e4:	e0fff903 	ldbu	r3,-28(fp)
 10106e8:	008040f4 	movhi	r2,259
 10106ec:	10970544 	addi	r2,r2,23573
 10106f0:	10c5883a 	add	r2,r2,r3
 10106f4:	10800003 	ldbu	r2,0(r2)
 10106f8:	1007883a 	mov	r3,r2
 10106fc:	008040f4 	movhi	r2,259
 1010700:	10970804 	addi	r2,r2,23584
 1010704:	10800017 	ldw	r2,0(r2)
 1010708:	10800d43 	ldbu	r2,53(r2)
 101070c:	0084303a 	nor	r2,zero,r2
 1010710:	1884703a 	and	r2,r3,r2
 1010714:	1007883a 	mov	r3,r2
 1010718:	008040f4 	movhi	r2,259
 101071c:	10970544 	addi	r2,r2,23573
 1010720:	1105883a 	add	r2,r2,r4
 1010724:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0x00) {
 1010728:	e0fff903 	ldbu	r3,-28(fp)
 101072c:	008040f4 	movhi	r2,259
 1010730:	10970544 	addi	r2,r2,23573
 1010734:	10c5883a 	add	r2,r2,r3
 1010738:	10800003 	ldbu	r2,0(r2)
 101073c:	10803fcc 	andi	r2,r2,255
 1010740:	1004c03a 	cmpne	r2,r2,zero
 1010744:	10000e1e 	bne	r2,zero,1010780 <OS_FlagBlock+0x1c0>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 1010748:	008040f4 	movhi	r2,259
 101074c:	10970804 	addi	r2,r2,23584
 1010750:	10800017 	ldw	r2,0(r2)
 1010754:	10800d83 	ldbu	r2,54(r2)
 1010758:	0084303a 	nor	r2,zero,r2
 101075c:	1007883a 	mov	r3,r2
 1010760:	008040f4 	movhi	r2,259
 1010764:	10970504 	addi	r2,r2,23572
 1010768:	10800003 	ldbu	r2,0(r2)
 101076c:	1884703a 	and	r2,r3,r2
 1010770:	1007883a 	mov	r3,r2
 1010774:	008040f4 	movhi	r2,259
 1010778:	10970504 	addi	r2,r2,23572
 101077c:	10c00005 	stb	r3,0(r2)
    }
}
 1010780:	e037883a 	mov	sp,fp
 1010784:	df000017 	ldw	fp,0(sp)
 1010788:	dec00104 	addi	sp,sp,4
 101078c:	f800283a 	ret

01010790 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
 1010790:	f811883a 	mov	r8,ra
 1010794:	100c1d00 	call	100c1d0 <_mcount>
 1010798:	403f883a 	mov	ra,r8
 101079c:	defffb04 	addi	sp,sp,-20
 10107a0:	dfc00415 	stw	ra,16(sp)
 10107a4:	df000315 	stw	fp,12(sp)
 10107a8:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
 10107ac:	01004134 	movhi	r4,260
 10107b0:	210f2e04 	addi	r4,r4,15544
 10107b4:	0140dc04 	movi	r5,880
 10107b8:	100e6640 	call	100e664 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
 10107bc:	00804134 	movhi	r2,260
 10107c0:	108f2e04 	addi	r2,r2,15544
 10107c4:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
 10107c8:	00804134 	movhi	r2,260
 10107cc:	108f3904 	addi	r2,r2,15588
 10107d0:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 10107d4:	e03fff0d 	sth	zero,-4(fp)
 10107d8:	00001306 	br	1010828 <OS_FlagInit+0x98>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 10107dc:	e0bffe17 	ldw	r2,-8(fp)
 10107e0:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
 10107e4:	e0fffe17 	ldw	r3,-8(fp)
 10107e8:	e0bffd17 	ldw	r2,-12(fp)
 10107ec:	18800115 	stw	r2,4(r3)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
 10107f0:	e0fffe17 	ldw	r3,-8(fp)
 10107f4:	00800fc4 	movi	r2,63
 10107f8:	18800285 	stb	r2,10(r3)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 10107fc:	e0bffe17 	ldw	r2,-8(fp)
 1010800:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
 1010804:	e0bffe17 	ldw	r2,-8(fp)
 1010808:	10800b04 	addi	r2,r2,44
 101080c:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
 1010810:	e0bffd17 	ldw	r2,-12(fp)
 1010814:	10800b04 	addi	r2,r2,44
 1010818:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 101081c:	e0bfff0b 	ldhu	r2,-4(fp)
 1010820:	10800044 	addi	r2,r2,1
 1010824:	e0bfff0d 	sth	r2,-4(fp)
 1010828:	e0bfff0b 	ldhu	r2,-4(fp)
 101082c:	108004f0 	cmpltui	r2,r2,19
 1010830:	103fea1e 	bne	r2,zero,10107dc <OS_FlagInit+0x4c>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 1010834:	e0bffe17 	ldw	r2,-8(fp)
 1010838:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
 101083c:	e0bffe17 	ldw	r2,-8(fp)
 1010840:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
 1010844:	e0fffe17 	ldw	r3,-8(fp)
 1010848:	00800fc4 	movi	r2,63
 101084c:	18800285 	stb	r2,10(r3)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 1010850:	e0bffe17 	ldw	r2,-8(fp)
 1010854:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
 1010858:	00c040f4 	movhi	r3,259
 101085c:	18d70c04 	addi	r3,r3,23600
 1010860:	00804134 	movhi	r2,260
 1010864:	108f2e04 	addi	r2,r2,15544
 1010868:	18800015 	stw	r2,0(r3)
#endif
}
 101086c:	e037883a 	mov	sp,fp
 1010870:	dfc00117 	ldw	ra,4(sp)
 1010874:	df000017 	ldw	fp,0(sp)
 1010878:	dec00204 	addi	sp,sp,8
 101087c:	f800283a 	ret

01010880 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
 1010880:	f811883a 	mov	r8,ra
 1010884:	100c1d00 	call	100c1d0 <_mcount>
 1010888:	403f883a 	mov	ra,r8
 101088c:	defffa04 	addi	sp,sp,-24
 1010890:	dfc00515 	stw	ra,20(sp)
 1010894:	df000415 	stw	fp,16(sp)
 1010898:	df000404 	addi	fp,sp,16
 101089c:	e13ffe15 	stw	r4,-8(fp)
 10108a0:	e17fff0d 	sth	r5,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
 10108a4:	e0bffe17 	ldw	r2,-8(fp)
 10108a8:	10800217 	ldw	r2,8(r2)
 10108ac:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
 10108b0:	e0bffd17 	ldw	r2,-12(fp)
 10108b4:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
 10108b8:	e0fffd17 	ldw	r3,-12(fp)
 10108bc:	e0bfff0b 	ldhu	r2,-4(fp)
 10108c0:	18800b0d 	sth	r2,44(r3)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
 10108c4:	e0bffd17 	ldw	r2,-12(fp)
 10108c8:	10c00c03 	ldbu	r3,48(r2)
 10108cc:	00bff7c4 	movi	r2,-33
 10108d0:	1884703a 	and	r2,r3,r2
 10108d4:	1007883a 	mov	r3,r2
 10108d8:	e0bffd17 	ldw	r2,-12(fp)
 10108dc:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
 10108e0:	e0bffd17 	ldw	r2,-12(fp)
 10108e4:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
 10108e8:	e0bffd17 	ldw	r2,-12(fp)
 10108ec:	10800c03 	ldbu	r2,48(r2)
 10108f0:	10803fcc 	andi	r2,r2,255
 10108f4:	1004c03a 	cmpne	r2,r2,zero
 10108f8:	10001f1e 	bne	r2,zero,1010978 <OS_FlagTaskRdy+0xf8>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
 10108fc:	e0bffd17 	ldw	r2,-12(fp)
 1010900:	10c00d83 	ldbu	r3,54(r2)
 1010904:	008040f4 	movhi	r2,259
 1010908:	10970504 	addi	r2,r2,23572
 101090c:	10800003 	ldbu	r2,0(r2)
 1010910:	1884b03a 	or	r2,r3,r2
 1010914:	1007883a 	mov	r3,r2
 1010918:	008040f4 	movhi	r2,259
 101091c:	10970504 	addi	r2,r2,23572
 1010920:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 1010924:	e0bffd17 	ldw	r2,-12(fp)
 1010928:	10800d03 	ldbu	r2,52(r2)
 101092c:	11003fcc 	andi	r4,r2,255
 1010930:	e0bffd17 	ldw	r2,-12(fp)
 1010934:	10800d03 	ldbu	r2,52(r2)
 1010938:	10c03fcc 	andi	r3,r2,255
 101093c:	008040f4 	movhi	r2,259
 1010940:	10970544 	addi	r2,r2,23573
 1010944:	10c5883a 	add	r2,r2,r3
 1010948:	10c00003 	ldbu	r3,0(r2)
 101094c:	e0bffd17 	ldw	r2,-12(fp)
 1010950:	10800d43 	ldbu	r2,53(r2)
 1010954:	1884b03a 	or	r2,r3,r2
 1010958:	1007883a 	mov	r3,r2
 101095c:	008040f4 	movhi	r2,259
 1010960:	10970544 	addi	r2,r2,23573
 1010964:	1105883a 	add	r2,r2,r4
 1010968:	10c00005 	stb	r3,0(r2)
        sched                   = OS_TRUE;
 101096c:	00800044 	movi	r2,1
 1010970:	e0bffc05 	stb	r2,-16(fp)
 1010974:	00000106 	br	101097c <OS_FlagTaskRdy+0xfc>
    } else {
        sched                   = OS_FALSE;
 1010978:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
 101097c:	e13ffe17 	ldw	r4,-8(fp)
 1010980:	101099c0 	call	101099c <OS_FlagUnlink>
    return (sched);
 1010984:	e0bffc03 	ldbu	r2,-16(fp)
}
 1010988:	e037883a 	mov	sp,fp
 101098c:	dfc00117 	ldw	ra,4(sp)
 1010990:	df000017 	ldw	fp,0(sp)
 1010994:	dec00204 	addi	sp,sp,8
 1010998:	f800283a 	ret

0101099c <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
 101099c:	f811883a 	mov	r8,ra
 10109a0:	100c1d00 	call	100c1d0 <_mcount>
 10109a4:	403f883a 	mov	ra,r8
 10109a8:	defffa04 	addi	sp,sp,-24
 10109ac:	df000515 	stw	fp,20(sp)
 10109b0:	df000504 	addi	fp,sp,20
 10109b4:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
 10109b8:	e0bfff17 	ldw	r2,-4(fp)
 10109bc:	10800117 	ldw	r2,4(r2)
 10109c0:	e0bffc15 	stw	r2,-16(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 10109c4:	e0bfff17 	ldw	r2,-4(fp)
 10109c8:	10800017 	ldw	r2,0(r2)
 10109cc:	e0bffb15 	stw	r2,-20(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
 10109d0:	e0bffc17 	ldw	r2,-16(fp)
 10109d4:	1004c03a 	cmpne	r2,r2,zero
 10109d8:	10000c1e 	bne	r2,zero,1010a0c <OS_FlagUnlink+0x70>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
 10109dc:	e0bfff17 	ldw	r2,-4(fp)
 10109e0:	10800317 	ldw	r2,12(r2)
 10109e4:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
 10109e8:	e0fffd17 	ldw	r3,-12(fp)
 10109ec:	e0bffb17 	ldw	r2,-20(fp)
 10109f0:	18800115 	stw	r2,4(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {
 10109f4:	e0bffb17 	ldw	r2,-20(fp)
 10109f8:	1005003a 	cmpeq	r2,r2,zero
 10109fc:	10000c1e 	bne	r2,zero,1010a30 <OS_FlagUnlink+0x94>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
 1010a00:	e0bffb17 	ldw	r2,-20(fp)
 1010a04:	10000115 	stw	zero,4(r2)
 1010a08:	00000906 	br	1010a30 <OS_FlagUnlink+0x94>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
 1010a0c:	e0fffc17 	ldw	r3,-16(fp)
 1010a10:	e0bffb17 	ldw	r2,-20(fp)
 1010a14:	18800015 	stw	r2,0(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
 1010a18:	e0bffb17 	ldw	r2,-20(fp)
 1010a1c:	1005003a 	cmpeq	r2,r2,zero
 1010a20:	1000031e 	bne	r2,zero,1010a30 <OS_FlagUnlink+0x94>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
 1010a24:	e0fffb17 	ldw	r3,-20(fp)
 1010a28:	e0bffc17 	ldw	r2,-16(fp)
 1010a2c:	18800115 	stw	r2,4(r3)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
 1010a30:	e0bfff17 	ldw	r2,-4(fp)
 1010a34:	10800217 	ldw	r2,8(r2)
 1010a38:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
 1010a3c:	e0bffe17 	ldw	r2,-8(fp)
 1010a40:	10000a15 	stw	zero,40(r2)
#endif
}
 1010a44:	e037883a 	mov	sp,fp
 1010a48:	df000017 	ldw	fp,0(sp)
 1010a4c:	dec00104 	addi	sp,sp,4
 1010a50:	f800283a 	ret

01010a54 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
 1010a54:	f811883a 	mov	r8,ra
 1010a58:	100c1d00 	call	100c1d0 <_mcount>
 1010a5c:	403f883a 	mov	ra,r8
 1010a60:	defff304 	addi	sp,sp,-52
 1010a64:	df000c15 	stw	fp,48(sp)
 1010a68:	df000c04 	addi	fp,sp,48
 1010a6c:	e13ffb15 	stw	r4,-20(fp)
 1010a70:	e17ffc15 	stw	r5,-16(fp)
 1010a74:	e1bffd15 	stw	r6,-12(fp)
 1010a78:	e1fffe15 	stw	r7,-8(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 1010a7c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 1010a80:	e0bffe17 	ldw	r2,-8(fp)
 1010a84:	1004c03a 	cmpne	r2,r2,zero
 1010a88:	1000021e 	bne	r2,zero,1010a94 <OSMemCreate+0x40>
        return ((OS_MEM *)0);
 1010a8c:	e03fff15 	stw	zero,-4(fp)
 1010a90:	00007506 	br	1010c68 <OSMemCreate+0x214>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
 1010a94:	e0bffb17 	ldw	r2,-20(fp)
 1010a98:	1004c03a 	cmpne	r2,r2,zero
 1010a9c:	1000051e 	bne	r2,zero,1010ab4 <OSMemCreate+0x60>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 1010aa0:	e0fffe17 	ldw	r3,-8(fp)
 1010aa4:	00801884 	movi	r2,98
 1010aa8:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 1010aac:	e03fff15 	stw	zero,-4(fp)
 1010ab0:	00006d06 	br	1010c68 <OSMemCreate+0x214>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
 1010ab4:	e0bffb17 	ldw	r2,-20(fp)
 1010ab8:	108000cc 	andi	r2,r2,3
 1010abc:	1005003a 	cmpeq	r2,r2,zero
 1010ac0:	1000051e 	bne	r2,zero,1010ad8 <OSMemCreate+0x84>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 1010ac4:	e0fffe17 	ldw	r3,-8(fp)
 1010ac8:	00801884 	movi	r2,98
 1010acc:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 1010ad0:	e03fff15 	stw	zero,-4(fp)
 1010ad4:	00006406 	br	1010c68 <OSMemCreate+0x214>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
 1010ad8:	e0bffc17 	ldw	r2,-16(fp)
 1010adc:	108000a8 	cmpgeui	r2,r2,2
 1010ae0:	1000051e 	bne	r2,zero,1010af8 <OSMemCreate+0xa4>
        *perr = OS_ERR_MEM_INVALID_BLKS;
 1010ae4:	e0fffe17 	ldw	r3,-8(fp)
 1010ae8:	008016c4 	movi	r2,91
 1010aec:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 1010af0:	e03fff15 	stw	zero,-4(fp)
 1010af4:	00005c06 	br	1010c68 <OSMemCreate+0x214>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
 1010af8:	e0bffd17 	ldw	r2,-12(fp)
 1010afc:	10800128 	cmpgeui	r2,r2,4
 1010b00:	1000051e 	bne	r2,zero,1010b18 <OSMemCreate+0xc4>
        *perr = OS_ERR_MEM_INVALID_SIZE;
 1010b04:	e0fffe17 	ldw	r3,-8(fp)
 1010b08:	00801704 	movi	r2,92
 1010b0c:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 1010b10:	e03fff15 	stw	zero,-4(fp)
 1010b14:	00005406 	br	1010c68 <OSMemCreate+0x214>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1010b18:	0005303a 	rdctl	r2,status
 1010b1c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1010b20:	e0fff517 	ldw	r3,-44(fp)
 1010b24:	00bfff84 	movi	r2,-2
 1010b28:	1884703a 	and	r2,r3,r2
 1010b2c:	1001703a 	wrctl	status,r2
  
  return context;
 1010b30:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 1010b34:	e0bff615 	stw	r2,-40(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
 1010b38:	008040f4 	movhi	r2,259
 1010b3c:	10970204 	addi	r2,r2,23560
 1010b40:	10800017 	ldw	r2,0(r2)
 1010b44:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
 1010b48:	008040f4 	movhi	r2,259
 1010b4c:	10970204 	addi	r2,r2,23560
 1010b50:	10800017 	ldw	r2,0(r2)
 1010b54:	1005003a 	cmpeq	r2,r2,zero
 1010b58:	1000081e 	bne	r2,zero,1010b7c <OSMemCreate+0x128>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
 1010b5c:	008040f4 	movhi	r2,259
 1010b60:	10970204 	addi	r2,r2,23560
 1010b64:	10800017 	ldw	r2,0(r2)
 1010b68:	10800117 	ldw	r2,4(r2)
 1010b6c:	1007883a 	mov	r3,r2
 1010b70:	008040f4 	movhi	r2,259
 1010b74:	10970204 	addi	r2,r2,23560
 1010b78:	10c00015 	stw	r3,0(r2)
 1010b7c:	e0bff617 	ldw	r2,-40(fp)
 1010b80:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1010b84:	e0bff417 	ldw	r2,-48(fp)
 1010b88:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
 1010b8c:	e0bffa17 	ldw	r2,-24(fp)
 1010b90:	1004c03a 	cmpne	r2,r2,zero
 1010b94:	1000051e 	bne	r2,zero,1010bac <OSMemCreate+0x158>
        *perr = OS_ERR_MEM_INVALID_PART;
 1010b98:	e0fffe17 	ldw	r3,-8(fp)
 1010b9c:	00801684 	movi	r2,90
 1010ba0:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 1010ba4:	e03fff15 	stw	zero,-4(fp)
 1010ba8:	00002f06 	br	1010c68 <OSMemCreate+0x214>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
 1010bac:	e0bffb17 	ldw	r2,-20(fp)
 1010bb0:	e0bff815 	stw	r2,-32(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
 1010bb4:	e0bffb17 	ldw	r2,-20(fp)
 1010bb8:	1007883a 	mov	r3,r2
 1010bbc:	e0bffd17 	ldw	r2,-12(fp)
 1010bc0:	1885883a 	add	r2,r3,r2
 1010bc4:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < (nblks - 1); i++) {
 1010bc8:	e03ff715 	stw	zero,-36(fp)
 1010bcc:	00000d06 	br	1010c04 <OSMemCreate+0x1b0>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
 1010bd0:	e0fff817 	ldw	r3,-32(fp)
 1010bd4:	e0bff917 	ldw	r2,-28(fp)
 1010bd8:	18800015 	stw	r2,0(r3)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
 1010bdc:	e0bff917 	ldw	r2,-28(fp)
 1010be0:	e0bff815 	stw	r2,-32(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
 1010be4:	e0bff917 	ldw	r2,-28(fp)
 1010be8:	1007883a 	mov	r3,r2
 1010bec:	e0bffd17 	ldw	r2,-12(fp)
 1010bf0:	1885883a 	add	r2,r3,r2
 1010bf4:	e0bff915 	stw	r2,-28(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
 1010bf8:	e0bff717 	ldw	r2,-36(fp)
 1010bfc:	10800044 	addi	r2,r2,1
 1010c00:	e0bff715 	stw	r2,-36(fp)
 1010c04:	e0bffc17 	ldw	r2,-16(fp)
 1010c08:	10ffffc4 	addi	r3,r2,-1
 1010c0c:	e0bff717 	ldw	r2,-36(fp)
 1010c10:	10ffef36 	bltu	r2,r3,1010bd0 <OSMemCreate+0x17c>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
 1010c14:	e0bff817 	ldw	r2,-32(fp)
 1010c18:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
 1010c1c:	e0fffa17 	ldw	r3,-24(fp)
 1010c20:	e0bffb17 	ldw	r2,-20(fp)
 1010c24:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
 1010c28:	e0fffa17 	ldw	r3,-24(fp)
 1010c2c:	e0bffb17 	ldw	r2,-20(fp)
 1010c30:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
 1010c34:	e0fffa17 	ldw	r3,-24(fp)
 1010c38:	e0bffc17 	ldw	r2,-16(fp)
 1010c3c:	18800415 	stw	r2,16(r3)
    pmem->OSMemNBlks    = nblks;
 1010c40:	e0fffa17 	ldw	r3,-24(fp)
 1010c44:	e0bffc17 	ldw	r2,-16(fp)
 1010c48:	18800315 	stw	r2,12(r3)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
 1010c4c:	e0fffa17 	ldw	r3,-24(fp)
 1010c50:	e0bffd17 	ldw	r2,-12(fp)
 1010c54:	18800215 	stw	r2,8(r3)
    *perr               = OS_ERR_NONE;
 1010c58:	e0bffe17 	ldw	r2,-8(fp)
 1010c5c:	10000005 	stb	zero,0(r2)
    return (pmem);
 1010c60:	e0bffa17 	ldw	r2,-24(fp)
 1010c64:	e0bfff15 	stw	r2,-4(fp)
 1010c68:	e0bfff17 	ldw	r2,-4(fp)
}
 1010c6c:	e037883a 	mov	sp,fp
 1010c70:	df000017 	ldw	fp,0(sp)
 1010c74:	dec00104 	addi	sp,sp,4
 1010c78:	f800283a 	ret

01010c7c <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
 1010c7c:	f811883a 	mov	r8,ra
 1010c80:	100c1d00 	call	100c1d0 <_mcount>
 1010c84:	403f883a 	mov	ra,r8
 1010c88:	defff704 	addi	sp,sp,-36
 1010c8c:	df000815 	stw	fp,32(sp)
 1010c90:	df000804 	addi	fp,sp,32
 1010c94:	e13ffd15 	stw	r4,-12(fp)
 1010c98:	e17ffe15 	stw	r5,-8(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 1010c9c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 1010ca0:	e0bffe17 	ldw	r2,-8(fp)
 1010ca4:	1004c03a 	cmpne	r2,r2,zero
 1010ca8:	1000021e 	bne	r2,zero,1010cb4 <OSMemGet+0x38>
        return ((void *)0);
 1010cac:	e03fff15 	stw	zero,-4(fp)
 1010cb0:	00003106 	br	1010d78 <OSMemGet+0xfc>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
 1010cb4:	e0bffd17 	ldw	r2,-12(fp)
 1010cb8:	1004c03a 	cmpne	r2,r2,zero
 1010cbc:	1000051e 	bne	r2,zero,1010cd4 <OSMemGet+0x58>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 1010cc0:	e0fffe17 	ldw	r3,-8(fp)
 1010cc4:	00801804 	movi	r2,96
 1010cc8:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 1010ccc:	e03fff15 	stw	zero,-4(fp)
 1010cd0:	00002906 	br	1010d78 <OSMemGet+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1010cd4:	0005303a 	rdctl	r2,status
 1010cd8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1010cdc:	e0fffa17 	ldw	r3,-24(fp)
 1010ce0:	00bfff84 	movi	r2,-2
 1010ce4:	1884703a 	and	r2,r3,r2
 1010ce8:	1001703a 	wrctl	status,r2
  
  return context;
 1010cec:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 1010cf0:	e0bffb15 	stw	r2,-20(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
 1010cf4:	e0bffd17 	ldw	r2,-12(fp)
 1010cf8:	10800417 	ldw	r2,16(r2)
 1010cfc:	1005003a 	cmpeq	r2,r2,zero
 1010d00:	1000151e 	bne	r2,zero,1010d58 <OSMemGet+0xdc>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
 1010d04:	e0bffd17 	ldw	r2,-12(fp)
 1010d08:	10800117 	ldw	r2,4(r2)
 1010d0c:	e0bffc15 	stw	r2,-16(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
 1010d10:	e0bffc17 	ldw	r2,-16(fp)
 1010d14:	10c00017 	ldw	r3,0(r2)
 1010d18:	e0bffd17 	ldw	r2,-12(fp)
 1010d1c:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
 1010d20:	e0bffd17 	ldw	r2,-12(fp)
 1010d24:	10800417 	ldw	r2,16(r2)
 1010d28:	10ffffc4 	addi	r3,r2,-1
 1010d2c:	e0bffd17 	ldw	r2,-12(fp)
 1010d30:	10c00415 	stw	r3,16(r2)
 1010d34:	e0bffb17 	ldw	r2,-20(fp)
 1010d38:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1010d3c:	e0bff917 	ldw	r2,-28(fp)
 1010d40:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
 1010d44:	e0bffe17 	ldw	r2,-8(fp)
 1010d48:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
 1010d4c:	e0bffc17 	ldw	r2,-16(fp)
 1010d50:	e0bfff15 	stw	r2,-4(fp)
 1010d54:	00000806 	br	1010d78 <OSMemGet+0xfc>
 1010d58:	e0bffb17 	ldw	r2,-20(fp)
 1010d5c:	e0bff815 	stw	r2,-32(fp)
 1010d60:	e0bff817 	ldw	r2,-32(fp)
 1010d64:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
 1010d68:	e0fffe17 	ldw	r3,-8(fp)
 1010d6c:	00801744 	movi	r2,93
 1010d70:	18800005 	stb	r2,0(r3)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
 1010d74:	e03fff15 	stw	zero,-4(fp)
 1010d78:	e0bfff17 	ldw	r2,-4(fp)
}
 1010d7c:	e037883a 	mov	sp,fp
 1010d80:	df000017 	ldw	fp,0(sp)
 1010d84:	dec00104 	addi	sp,sp,4
 1010d88:	f800283a 	ret

01010d8c <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 1010d8c:	f811883a 	mov	r8,ra
 1010d90:	100c1d00 	call	100c1d0 <_mcount>
 1010d94:	403f883a 	mov	ra,r8
 1010d98:	defff604 	addi	sp,sp,-40
 1010d9c:	dfc00915 	stw	ra,36(sp)
 1010da0:	df000815 	stw	fp,32(sp)
 1010da4:	df000804 	addi	fp,sp,32
 1010da8:	e13ffc15 	stw	r4,-16(fp)
 1010dac:	e17ffd15 	stw	r5,-12(fp)
 1010db0:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1010db4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 1010db8:	e0bffe17 	ldw	r2,-8(fp)
 1010dbc:	1004c03a 	cmpne	r2,r2,zero
 1010dc0:	1000021e 	bne	r2,zero,1010dcc <OSMemNameGet+0x40>
        return (0);
 1010dc4:	e03fff15 	stw	zero,-4(fp)
 1010dc8:	00003006 	br	1010e8c <OSMemNameGet+0x100>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 1010dcc:	e0bffc17 	ldw	r2,-16(fp)
 1010dd0:	1004c03a 	cmpne	r2,r2,zero
 1010dd4:	1000051e 	bne	r2,zero,1010dec <OSMemNameGet+0x60>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 1010dd8:	e0fffe17 	ldw	r3,-8(fp)
 1010ddc:	00801804 	movi	r2,96
 1010de0:	18800005 	stb	r2,0(r3)
        return (0);
 1010de4:	e03fff15 	stw	zero,-4(fp)
 1010de8:	00002806 	br	1010e8c <OSMemNameGet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 1010dec:	e0bffd17 	ldw	r2,-12(fp)
 1010df0:	1004c03a 	cmpne	r2,r2,zero
 1010df4:	1000051e 	bne	r2,zero,1010e0c <OSMemNameGet+0x80>
        *perr = OS_ERR_PNAME_NULL;
 1010df8:	e0fffe17 	ldw	r3,-8(fp)
 1010dfc:	00800304 	movi	r2,12
 1010e00:	18800005 	stb	r2,0(r3)
        return (0);
 1010e04:	e03fff15 	stw	zero,-4(fp)
 1010e08:	00002006 	br	1010e8c <OSMemNameGet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 1010e0c:	008040f4 	movhi	r2,259
 1010e10:	10970704 	addi	r2,r2,23580
 1010e14:	10800003 	ldbu	r2,0(r2)
 1010e18:	10803fcc 	andi	r2,r2,255
 1010e1c:	1005003a 	cmpeq	r2,r2,zero
 1010e20:	1000051e 	bne	r2,zero,1010e38 <OSMemNameGet+0xac>
        *perr = OS_ERR_NAME_GET_ISR;
 1010e24:	e0fffe17 	ldw	r3,-8(fp)
 1010e28:	00800444 	movi	r2,17
 1010e2c:	18800005 	stb	r2,0(r3)
        return (0);
 1010e30:	e03fff15 	stw	zero,-4(fp)
 1010e34:	00001506 	br	1010e8c <OSMemNameGet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1010e38:	0005303a 	rdctl	r2,status
 1010e3c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1010e40:	e0fff917 	ldw	r3,-28(fp)
 1010e44:	00bfff84 	movi	r2,-2
 1010e48:	1884703a 	and	r2,r3,r2
 1010e4c:	1001703a 	wrctl	status,r2
  
  return context;
 1010e50:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 1010e54:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
 1010e58:	e0bffc17 	ldw	r2,-16(fp)
 1010e5c:	11400504 	addi	r5,r2,20
 1010e60:	e13ffd17 	ldw	r4,-12(fp)
 1010e64:	100e8980 	call	100e898 <OS_StrCopy>
 1010e68:	e0bffb05 	stb	r2,-20(fp)
 1010e6c:	e0bffa17 	ldw	r2,-24(fp)
 1010e70:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1010e74:	e0bff817 	ldw	r2,-32(fp)
 1010e78:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 1010e7c:	e0bffe17 	ldw	r2,-8(fp)
 1010e80:	10000005 	stb	zero,0(r2)
    return (len);
 1010e84:	e0bffb03 	ldbu	r2,-20(fp)
 1010e88:	e0bfff15 	stw	r2,-4(fp)
 1010e8c:	e0bfff17 	ldw	r2,-4(fp)
}
 1010e90:	e037883a 	mov	sp,fp
 1010e94:	dfc00117 	ldw	ra,4(sp)
 1010e98:	df000017 	ldw	fp,0(sp)
 1010e9c:	dec00204 	addi	sp,sp,8
 1010ea0:	f800283a 	ret

01010ea4 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 1010ea4:	f811883a 	mov	r8,ra
 1010ea8:	100c1d00 	call	100c1d0 <_mcount>
 1010eac:	403f883a 	mov	ra,r8
 1010eb0:	defff604 	addi	sp,sp,-40
 1010eb4:	dfc00915 	stw	ra,36(sp)
 1010eb8:	df000815 	stw	fp,32(sp)
 1010ebc:	df000804 	addi	fp,sp,32
 1010ec0:	e13ffd15 	stw	r4,-12(fp)
 1010ec4:	e17ffe15 	stw	r5,-8(fp)
 1010ec8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1010ecc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 1010ed0:	e0bfff17 	ldw	r2,-4(fp)
 1010ed4:	1005003a 	cmpeq	r2,r2,zero
 1010ed8:	1000381e 	bne	r2,zero,1010fbc <OSMemNameSet+0x118>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 1010edc:	e0bffd17 	ldw	r2,-12(fp)
 1010ee0:	1004c03a 	cmpne	r2,r2,zero
 1010ee4:	1000041e 	bne	r2,zero,1010ef8 <OSMemNameSet+0x54>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 1010ee8:	e0ffff17 	ldw	r3,-4(fp)
 1010eec:	00801804 	movi	r2,96
 1010ef0:	18800005 	stb	r2,0(r3)
        return;
 1010ef4:	00003106 	br	1010fbc <OSMemNameSet+0x118>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 1010ef8:	e0bffe17 	ldw	r2,-8(fp)
 1010efc:	1004c03a 	cmpne	r2,r2,zero
 1010f00:	1000041e 	bne	r2,zero,1010f14 <OSMemNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;
 1010f04:	e0ffff17 	ldw	r3,-4(fp)
 1010f08:	00800304 	movi	r2,12
 1010f0c:	18800005 	stb	r2,0(r3)
        return;
 1010f10:	00002a06 	br	1010fbc <OSMemNameSet+0x118>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 1010f14:	008040f4 	movhi	r2,259
 1010f18:	10970704 	addi	r2,r2,23580
 1010f1c:	10800003 	ldbu	r2,0(r2)
 1010f20:	10803fcc 	andi	r2,r2,255
 1010f24:	1005003a 	cmpeq	r2,r2,zero
 1010f28:	1000041e 	bne	r2,zero,1010f3c <OSMemNameSet+0x98>
        *perr = OS_ERR_NAME_SET_ISR;
 1010f2c:	e0ffff17 	ldw	r3,-4(fp)
 1010f30:	00800484 	movi	r2,18
 1010f34:	18800005 	stb	r2,0(r3)
        return;
 1010f38:	00002006 	br	1010fbc <OSMemNameSet+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1010f3c:	0005303a 	rdctl	r2,status
 1010f40:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1010f44:	e0fffa17 	ldw	r3,-24(fp)
 1010f48:	00bfff84 	movi	r2,-2
 1010f4c:	1884703a 	and	r2,r3,r2
 1010f50:	1001703a 	wrctl	status,r2
  
  return context;
 1010f54:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 1010f58:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 1010f5c:	e13ffe17 	ldw	r4,-8(fp)
 1010f60:	100e9240 	call	100e924 <OS_StrLen>
 1010f64:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
 1010f68:	e0bffc03 	ldbu	r2,-16(fp)
 1010f6c:	10800830 	cmpltui	r2,r2,32
 1010f70:	1000081e 	bne	r2,zero,1010f94 <OSMemNameSet+0xf0>
 1010f74:	e0bffb17 	ldw	r2,-20(fp)
 1010f78:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1010f7c:	e0bff917 	ldw	r2,-28(fp)
 1010f80:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
 1010f84:	e0ffff17 	ldw	r3,-4(fp)
 1010f88:	008018c4 	movi	r2,99
 1010f8c:	18800005 	stb	r2,0(r3)
        return;
 1010f90:	00000a06 	br	1010fbc <OSMemNameSet+0x118>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
 1010f94:	e0bffd17 	ldw	r2,-12(fp)
 1010f98:	11000504 	addi	r4,r2,20
 1010f9c:	e17ffe17 	ldw	r5,-8(fp)
 1010fa0:	100e8980 	call	100e898 <OS_StrCopy>
 1010fa4:	e0bffb17 	ldw	r2,-20(fp)
 1010fa8:	e0bff815 	stw	r2,-32(fp)
 1010fac:	e0bff817 	ldw	r2,-32(fp)
 1010fb0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 1010fb4:	e0bfff17 	ldw	r2,-4(fp)
 1010fb8:	10000005 	stb	zero,0(r2)
}
 1010fbc:	e037883a 	mov	sp,fp
 1010fc0:	dfc00117 	ldw	ra,4(sp)
 1010fc4:	df000017 	ldw	fp,0(sp)
 1010fc8:	dec00204 	addi	sp,sp,8
 1010fcc:	f800283a 	ret

01010fd0 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
 1010fd0:	f811883a 	mov	r8,ra
 1010fd4:	100c1d00 	call	100c1d0 <_mcount>
 1010fd8:	403f883a 	mov	ra,r8
 1010fdc:	defff804 	addi	sp,sp,-32
 1010fe0:	df000715 	stw	fp,28(sp)
 1010fe4:	df000704 	addi	fp,sp,28
 1010fe8:	e13ffd15 	stw	r4,-12(fp)
 1010fec:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1010ff0:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 1010ff4:	e0bffd17 	ldw	r2,-12(fp)
 1010ff8:	1004c03a 	cmpne	r2,r2,zero
 1010ffc:	1000031e 	bne	r2,zero,101100c <OSMemPut+0x3c>
        return (OS_ERR_MEM_INVALID_PMEM);
 1011000:	00801804 	movi	r2,96
 1011004:	e0bfff15 	stw	r2,-4(fp)
 1011008:	00002b06 	br	10110b8 <OSMemPut+0xe8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
 101100c:	e0bffe17 	ldw	r2,-8(fp)
 1011010:	1004c03a 	cmpne	r2,r2,zero
 1011014:	1000031e 	bne	r2,zero,1011024 <OSMemPut+0x54>
        return (OS_ERR_MEM_INVALID_PBLK);
 1011018:	008017c4 	movi	r2,95
 101101c:	e0bfff15 	stw	r2,-4(fp)
 1011020:	00002506 	br	10110b8 <OSMemPut+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1011024:	0005303a 	rdctl	r2,status
 1011028:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101102c:	e0fffb17 	ldw	r3,-20(fp)
 1011030:	00bfff84 	movi	r2,-2
 1011034:	1884703a 	and	r2,r3,r2
 1011038:	1001703a 	wrctl	status,r2
  
  return context;
 101103c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 1011040:	e0bffc15 	stw	r2,-16(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
 1011044:	e0bffd17 	ldw	r2,-12(fp)
 1011048:	10c00417 	ldw	r3,16(r2)
 101104c:	e0bffd17 	ldw	r2,-12(fp)
 1011050:	10800317 	ldw	r2,12(r2)
 1011054:	18800736 	bltu	r3,r2,1011074 <OSMemPut+0xa4>
 1011058:	e0bffc17 	ldw	r2,-16(fp)
 101105c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1011060:	e0bffa17 	ldw	r2,-24(fp)
 1011064:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
 1011068:	00801784 	movi	r2,94
 101106c:	e0bfff15 	stw	r2,-4(fp)
 1011070:	00001106 	br	10110b8 <OSMemPut+0xe8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
 1011074:	e0fffe17 	ldw	r3,-8(fp)
 1011078:	e0bffd17 	ldw	r2,-12(fp)
 101107c:	10800117 	ldw	r2,4(r2)
 1011080:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = pblk;
 1011084:	e0fffd17 	ldw	r3,-12(fp)
 1011088:	e0bffe17 	ldw	r2,-8(fp)
 101108c:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
 1011090:	e0bffd17 	ldw	r2,-12(fp)
 1011094:	10800417 	ldw	r2,16(r2)
 1011098:	10c00044 	addi	r3,r2,1
 101109c:	e0bffd17 	ldw	r2,-12(fp)
 10110a0:	10c00415 	stw	r3,16(r2)
 10110a4:	e0bffc17 	ldw	r2,-16(fp)
 10110a8:	e0bff915 	stw	r2,-28(fp)
 10110ac:	e0bff917 	ldw	r2,-28(fp)
 10110b0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
 10110b4:	e03fff15 	stw	zero,-4(fp)
 10110b8:	e0bfff17 	ldw	r2,-4(fp)
}
 10110bc:	e037883a 	mov	sp,fp
 10110c0:	df000017 	ldw	fp,0(sp)
 10110c4:	dec00104 	addi	sp,sp,4
 10110c8:	f800283a 	ret

010110cc <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
 10110cc:	f811883a 	mov	r8,ra
 10110d0:	100c1d00 	call	100c1d0 <_mcount>
 10110d4:	403f883a 	mov	ra,r8
 10110d8:	defff904 	addi	sp,sp,-28
 10110dc:	df000615 	stw	fp,24(sp)
 10110e0:	df000604 	addi	fp,sp,24
 10110e4:	e13ffd15 	stw	r4,-12(fp)
 10110e8:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 10110ec:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 10110f0:	e0bffd17 	ldw	r2,-12(fp)
 10110f4:	1004c03a 	cmpne	r2,r2,zero
 10110f8:	1000031e 	bne	r2,zero,1011108 <OSMemQuery+0x3c>
        return (OS_ERR_MEM_INVALID_PMEM);
 10110fc:	00801804 	movi	r2,96
 1011100:	e0bfff15 	stw	r2,-4(fp)
 1011104:	00002e06 	br	10111c0 <OSMemQuery+0xf4>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
 1011108:	e0bffe17 	ldw	r2,-8(fp)
 101110c:	1004c03a 	cmpne	r2,r2,zero
 1011110:	1000031e 	bne	r2,zero,1011120 <OSMemQuery+0x54>
        return (OS_ERR_MEM_INVALID_PDATA);
 1011114:	00801844 	movi	r2,97
 1011118:	e0bfff15 	stw	r2,-4(fp)
 101111c:	00002806 	br	10111c0 <OSMemQuery+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1011120:	0005303a 	rdctl	r2,status
 1011124:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1011128:	e0fffb17 	ldw	r3,-20(fp)
 101112c:	00bfff84 	movi	r2,-2
 1011130:	1884703a 	and	r2,r3,r2
 1011134:	1001703a 	wrctl	status,r2
  
  return context;
 1011138:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 101113c:	e0bffc15 	stw	r2,-16(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
 1011140:	e0bffd17 	ldw	r2,-12(fp)
 1011144:	10c00017 	ldw	r3,0(r2)
 1011148:	e0bffe17 	ldw	r2,-8(fp)
 101114c:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
 1011150:	e0bffd17 	ldw	r2,-12(fp)
 1011154:	10c00117 	ldw	r3,4(r2)
 1011158:	e0bffe17 	ldw	r2,-8(fp)
 101115c:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
 1011160:	e0bffd17 	ldw	r2,-12(fp)
 1011164:	10c00217 	ldw	r3,8(r2)
 1011168:	e0bffe17 	ldw	r2,-8(fp)
 101116c:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
 1011170:	e0bffd17 	ldw	r2,-12(fp)
 1011174:	10c00317 	ldw	r3,12(r2)
 1011178:	e0bffe17 	ldw	r2,-8(fp)
 101117c:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
 1011180:	e0bffd17 	ldw	r2,-12(fp)
 1011184:	10c00417 	ldw	r3,16(r2)
 1011188:	e0bffe17 	ldw	r2,-8(fp)
 101118c:	10c00415 	stw	r3,16(r2)
 1011190:	e0bffc17 	ldw	r2,-16(fp)
 1011194:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1011198:	e0bffa17 	ldw	r2,-24(fp)
 101119c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
 10111a0:	e0bffe17 	ldw	r2,-8(fp)
 10111a4:	10c00317 	ldw	r3,12(r2)
 10111a8:	e0bffe17 	ldw	r2,-8(fp)
 10111ac:	10800417 	ldw	r2,16(r2)
 10111b0:	1887c83a 	sub	r3,r3,r2
 10111b4:	e0bffe17 	ldw	r2,-8(fp)
 10111b8:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
 10111bc:	e03fff15 	stw	zero,-4(fp)
 10111c0:	e0bfff17 	ldw	r2,-4(fp)
}
 10111c4:	e037883a 	mov	sp,fp
 10111c8:	df000017 	ldw	fp,0(sp)
 10111cc:	dec00104 	addi	sp,sp,4
 10111d0:	f800283a 	ret

010111d4 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
 10111d4:	f811883a 	mov	r8,ra
 10111d8:	100c1d00 	call	100c1d0 <_mcount>
 10111dc:	403f883a 	mov	ra,r8
 10111e0:	defffc04 	addi	sp,sp,-16
 10111e4:	dfc00315 	stw	ra,12(sp)
 10111e8:	df000215 	stw	fp,8(sp)
 10111ec:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
 10111f0:	01004134 	movhi	r4,260
 10111f4:	2110da04 	addi	r4,r4,17256
 10111f8:	01430c04 	movi	r5,3120
 10111fc:	100e6640 	call	100e664 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
 1011200:	00804134 	movhi	r2,260
 1011204:	1090da04 	addi	r2,r2,17256
 1011208:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 101120c:	e03ffe0d 	sth	zero,-8(fp)
 1011210:	00001406 	br	1011264 <OS_MemInit+0x90>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
 1011214:	e13ffe0b 	ldhu	r4,-8(fp)
 1011218:	01400d04 	movi	r5,52
 101121c:	10021e00 	call	10021e0 <__mulsi3>
 1011220:	1007883a 	mov	r3,r2
 1011224:	00804134 	movhi	r2,260
 1011228:	1090e704 	addi	r2,r2,17308
 101122c:	1887883a 	add	r3,r3,r2
 1011230:	e0bfff17 	ldw	r2,-4(fp)
 1011234:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
 1011238:	e0ffff17 	ldw	r3,-4(fp)
 101123c:	00800fc4 	movi	r2,63
 1011240:	18800505 	stb	r2,20(r3)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
 1011244:	e0bfff17 	ldw	r2,-4(fp)
 1011248:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
 101124c:	e0bfff17 	ldw	r2,-4(fp)
 1011250:	10800d04 	addi	r2,r2,52
 1011254:	e0bfff15 	stw	r2,-4(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 1011258:	e0bffe0b 	ldhu	r2,-8(fp)
 101125c:	10800044 	addi	r2,r2,1
 1011260:	e0bffe0d 	sth	r2,-8(fp)
 1011264:	e0bffe0b 	ldhu	r2,-8(fp)
 1011268:	10800ef0 	cmpltui	r2,r2,59
 101126c:	103fe91e 	bne	r2,zero,1011214 <OS_MemInit+0x40>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
 1011270:	e0bfff17 	ldw	r2,-4(fp)
 1011274:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
 1011278:	e0ffff17 	ldw	r3,-4(fp)
 101127c:	00800fc4 	movi	r2,63
 1011280:	18800505 	stb	r2,20(r3)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
 1011284:	e0bfff17 	ldw	r2,-4(fp)
 1011288:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
 101128c:	00c040f4 	movhi	r3,259
 1011290:	18d70204 	addi	r3,r3,23560
 1011294:	00804134 	movhi	r2,260
 1011298:	1090da04 	addi	r2,r2,17256
 101129c:	18800015 	stw	r2,0(r3)
#endif
}
 10112a0:	e037883a 	mov	sp,fp
 10112a4:	dfc00117 	ldw	ra,4(sp)
 10112a8:	df000017 	ldw	fp,0(sp)
 10112ac:	dec00204 	addi	sp,sp,8
 10112b0:	f800283a 	ret

010112b4 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
 10112b4:	f811883a 	mov	r8,ra
 10112b8:	100c1d00 	call	100c1d0 <_mcount>
 10112bc:	403f883a 	mov	ra,r8
 10112c0:	defff704 	addi	sp,sp,-36
 10112c4:	df000815 	stw	fp,32(sp)
 10112c8:	df000804 	addi	fp,sp,32
 10112cc:	e13ffd15 	stw	r4,-12(fp)
 10112d0:	e17ffe15 	stw	r5,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 10112d4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 10112d8:	e0bffe17 	ldw	r2,-8(fp)
 10112dc:	1004c03a 	cmpne	r2,r2,zero
 10112e0:	1000021e 	bne	r2,zero,10112ec <OSQAccept+0x38>
        return ((void *)0);
 10112e4:	e03fff15 	stw	zero,-4(fp)
 10112e8:	00004506 	br	1011400 <OSQAccept+0x14c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 10112ec:	e0bffd17 	ldw	r2,-12(fp)
 10112f0:	1004c03a 	cmpne	r2,r2,zero
 10112f4:	1000051e 	bne	r2,zero,101130c <OSQAccept+0x58>
        *perr = OS_ERR_PEVENT_NULL;
 10112f8:	e0fffe17 	ldw	r3,-8(fp)
 10112fc:	00800104 	movi	r2,4
 1011300:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 1011304:	e03fff15 	stw	zero,-4(fp)
 1011308:	00003d06 	br	1011400 <OSQAccept+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 101130c:	e0bffd17 	ldw	r2,-12(fp)
 1011310:	10800003 	ldbu	r2,0(r2)
 1011314:	10803fcc 	andi	r2,r2,255
 1011318:	108000a0 	cmpeqi	r2,r2,2
 101131c:	1000051e 	bne	r2,zero,1011334 <OSQAccept+0x80>
        *perr = OS_ERR_EVENT_TYPE;
 1011320:	e0fffe17 	ldw	r3,-8(fp)
 1011324:	00800044 	movi	r2,1
 1011328:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 101132c:	e03fff15 	stw	zero,-4(fp)
 1011330:	00003306 	br	1011400 <OSQAccept+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1011334:	0005303a 	rdctl	r2,status
 1011338:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101133c:	e0fff917 	ldw	r3,-28(fp)
 1011340:	00bfff84 	movi	r2,-2
 1011344:	1884703a 	and	r2,r3,r2
 1011348:	1001703a 	wrctl	status,r2
  
  return context;
 101134c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 1011350:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 1011354:	e0bffd17 	ldw	r2,-12(fp)
 1011358:	10800117 	ldw	r2,4(r2)
 101135c:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 1011360:	e0bffb17 	ldw	r2,-20(fp)
 1011364:	1080058b 	ldhu	r2,22(r2)
 1011368:	10bfffcc 	andi	r2,r2,65535
 101136c:	1005003a 	cmpeq	r2,r2,zero
 1011370:	1000191e 	bne	r2,zero,10113d8 <OSQAccept+0x124>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 1011374:	e0bffb17 	ldw	r2,-20(fp)
 1011378:	10c00417 	ldw	r3,16(r2)
 101137c:	18800017 	ldw	r2,0(r3)
 1011380:	e0bffc15 	stw	r2,-16(fp)
 1011384:	18c00104 	addi	r3,r3,4
 1011388:	e0bffb17 	ldw	r2,-20(fp)
 101138c:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 1011390:	e0bffb17 	ldw	r2,-20(fp)
 1011394:	1080058b 	ldhu	r2,22(r2)
 1011398:	10bfffc4 	addi	r2,r2,-1
 101139c:	1007883a 	mov	r3,r2
 10113a0:	e0bffb17 	ldw	r2,-20(fp)
 10113a4:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 10113a8:	e0bffb17 	ldw	r2,-20(fp)
 10113ac:	10c00417 	ldw	r3,16(r2)
 10113b0:	e0bffb17 	ldw	r2,-20(fp)
 10113b4:	10800217 	ldw	r2,8(r2)
 10113b8:	1880041e 	bne	r3,r2,10113cc <OSQAccept+0x118>
            pq->OSQOut = pq->OSQStart;
 10113bc:	e0bffb17 	ldw	r2,-20(fp)
 10113c0:	10c00117 	ldw	r3,4(r2)
 10113c4:	e0bffb17 	ldw	r2,-20(fp)
 10113c8:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
 10113cc:	e0bffe17 	ldw	r2,-8(fp)
 10113d0:	10000005 	stb	zero,0(r2)
 10113d4:	00000406 	br	10113e8 <OSQAccept+0x134>
    } else {
        *perr = OS_ERR_Q_EMPTY;
 10113d8:	e0fffe17 	ldw	r3,-8(fp)
 10113dc:	008007c4 	movi	r2,31
 10113e0:	18800005 	stb	r2,0(r3)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
 10113e4:	e03ffc15 	stw	zero,-16(fp)
 10113e8:	e0bffa17 	ldw	r2,-24(fp)
 10113ec:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10113f0:	e0bff817 	ldw	r2,-32(fp)
 10113f4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
 10113f8:	e0bffc17 	ldw	r2,-16(fp)
 10113fc:	e0bfff15 	stw	r2,-4(fp)
 1011400:	e0bfff17 	ldw	r2,-4(fp)
}
 1011404:	e037883a 	mov	sp,fp
 1011408:	df000017 	ldw	fp,0(sp)
 101140c:	dec00104 	addi	sp,sp,4
 1011410:	f800283a 	ret

01011414 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
 1011414:	f811883a 	mov	r8,ra
 1011418:	100c1d00 	call	100c1d0 <_mcount>
 101141c:	403f883a 	mov	ra,r8
 1011420:	defff304 	addi	sp,sp,-52
 1011424:	dfc00c15 	stw	ra,48(sp)
 1011428:	df000b15 	stw	fp,44(sp)
 101142c:	df000b04 	addi	fp,sp,44
 1011430:	e13ffd15 	stw	r4,-12(fp)
 1011434:	e17ffe0d 	sth	r5,-8(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1011438:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 101143c:	008040f4 	movhi	r2,259
 1011440:	10970704 	addi	r2,r2,23580
 1011444:	10800003 	ldbu	r2,0(r2)
 1011448:	10803fcc 	andi	r2,r2,255
 101144c:	1005003a 	cmpeq	r2,r2,zero
 1011450:	1000021e 	bne	r2,zero,101145c <OSQCreate+0x48>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
 1011454:	e03fff15 	stw	zero,-4(fp)
 1011458:	00007006 	br	101161c <OSQCreate+0x208>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101145c:	0005303a 	rdctl	r2,status
 1011460:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1011464:	e0fff917 	ldw	r3,-28(fp)
 1011468:	00bfff84 	movi	r2,-2
 101146c:	1884703a 	and	r2,r3,r2
 1011470:	1001703a 	wrctl	status,r2
  
  return context;
 1011474:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 1011478:	e0bffa15 	stw	r2,-24(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
 101147c:	008040f4 	movhi	r2,259
 1011480:	10970604 	addi	r2,r2,23576
 1011484:	10800017 	ldw	r2,0(r2)
 1011488:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
 101148c:	008040f4 	movhi	r2,259
 1011490:	10970604 	addi	r2,r2,23576
 1011494:	10800017 	ldw	r2,0(r2)
 1011498:	1005003a 	cmpeq	r2,r2,zero
 101149c:	1000081e 	bne	r2,zero,10114c0 <OSQCreate+0xac>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 10114a0:	008040f4 	movhi	r2,259
 10114a4:	10970604 	addi	r2,r2,23576
 10114a8:	10800017 	ldw	r2,0(r2)
 10114ac:	10800117 	ldw	r2,4(r2)
 10114b0:	1007883a 	mov	r3,r2
 10114b4:	008040f4 	movhi	r2,259
 10114b8:	10970604 	addi	r2,r2,23576
 10114bc:	10c00015 	stw	r3,0(r2)
 10114c0:	e0bffa17 	ldw	r2,-24(fp)
 10114c4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10114c8:	e0bff817 	ldw	r2,-32(fp)
 10114cc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
 10114d0:	e0bffc17 	ldw	r2,-16(fp)
 10114d4:	1005003a 	cmpeq	r2,r2,zero
 10114d8:	10004e1e 	bne	r2,zero,1011614 <OSQCreate+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10114dc:	0005303a 	rdctl	r2,status
 10114e0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10114e4:	e0fff717 	ldw	r3,-36(fp)
 10114e8:	00bfff84 	movi	r2,-2
 10114ec:	1884703a 	and	r2,r3,r2
 10114f0:	1001703a 	wrctl	status,r2
  
  return context;
 10114f4:	e0bff717 	ldw	r2,-36(fp)
        OS_ENTER_CRITICAL();
 10114f8:	e0bffa15 	stw	r2,-24(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
 10114fc:	008040f4 	movhi	r2,259
 1011500:	10970404 	addi	r2,r2,23568
 1011504:	10800017 	ldw	r2,0(r2)
 1011508:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
 101150c:	e0bffb17 	ldw	r2,-20(fp)
 1011510:	1005003a 	cmpeq	r2,r2,zero
 1011514:	1000311e 	bne	r2,zero,10115dc <OSQCreate+0x1c8>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
 1011518:	008040f4 	movhi	r2,259
 101151c:	10970404 	addi	r2,r2,23568
 1011520:	10800017 	ldw	r2,0(r2)
 1011524:	10c00017 	ldw	r3,0(r2)
 1011528:	008040f4 	movhi	r2,259
 101152c:	10970404 	addi	r2,r2,23568
 1011530:	10c00015 	stw	r3,0(r2)
 1011534:	e0bffa17 	ldw	r2,-24(fp)
 1011538:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101153c:	e0bff617 	ldw	r2,-40(fp)
 1011540:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
 1011544:	e0fffb17 	ldw	r3,-20(fp)
 1011548:	e0bffd17 	ldw	r2,-12(fp)
 101154c:	18800115 	stw	r2,4(r3)
            pq->OSQEnd             = &start[size];
 1011550:	e0bffe0b 	ldhu	r2,-8(fp)
 1011554:	1085883a 	add	r2,r2,r2
 1011558:	1085883a 	add	r2,r2,r2
 101155c:	1007883a 	mov	r3,r2
 1011560:	e0bffd17 	ldw	r2,-12(fp)
 1011564:	1887883a 	add	r3,r3,r2
 1011568:	e0bffb17 	ldw	r2,-20(fp)
 101156c:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
 1011570:	e0fffb17 	ldw	r3,-20(fp)
 1011574:	e0bffd17 	ldw	r2,-12(fp)
 1011578:	18800315 	stw	r2,12(r3)
            pq->OSQOut             = start;
 101157c:	e0fffb17 	ldw	r3,-20(fp)
 1011580:	e0bffd17 	ldw	r2,-12(fp)
 1011584:	18800415 	stw	r2,16(r3)
            pq->OSQSize            = size;
 1011588:	e0fffb17 	ldw	r3,-20(fp)
 101158c:	e0bffe0b 	ldhu	r2,-8(fp)
 1011590:	1880050d 	sth	r2,20(r3)
            pq->OSQEntries         = 0;
 1011594:	e0bffb17 	ldw	r2,-20(fp)
 1011598:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
 101159c:	e0fffc17 	ldw	r3,-16(fp)
 10115a0:	00800084 	movi	r2,2
 10115a4:	18800005 	stb	r2,0(r3)
            pevent->OSEventCnt     = 0;
 10115a8:	e0bffc17 	ldw	r2,-16(fp)
 10115ac:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
 10115b0:	e0fffc17 	ldw	r3,-16(fp)
 10115b4:	e0bffb17 	ldw	r2,-20(fp)
 10115b8:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
 10115bc:	e0fffc17 	ldw	r3,-16(fp)
 10115c0:	00800fc4 	movi	r2,63
 10115c4:	18800385 	stb	r2,14(r3)
            pevent->OSEventName[1] = OS_ASCII_NUL;
 10115c8:	e0bffc17 	ldw	r2,-16(fp)
 10115cc:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
 10115d0:	e13ffc17 	ldw	r4,-16(fp)
 10115d4:	100e2440 	call	100e244 <OS_EventWaitListInit>
 10115d8:	00000e06 	br	1011614 <OSQCreate+0x200>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
 10115dc:	008040f4 	movhi	r2,259
 10115e0:	10970604 	addi	r2,r2,23576
 10115e4:	10c00017 	ldw	r3,0(r2)
 10115e8:	e0bffc17 	ldw	r2,-16(fp)
 10115ec:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
 10115f0:	00c040f4 	movhi	r3,259
 10115f4:	18d70604 	addi	r3,r3,23576
 10115f8:	e0bffc17 	ldw	r2,-16(fp)
 10115fc:	18800015 	stw	r2,0(r3)
 1011600:	e0bffa17 	ldw	r2,-24(fp)
 1011604:	e0bff515 	stw	r2,-44(fp)
 1011608:	e0bff517 	ldw	r2,-44(fp)
 101160c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
 1011610:	e03ffc15 	stw	zero,-16(fp)
        }
    }
    return (pevent);
 1011614:	e0bffc17 	ldw	r2,-16(fp)
 1011618:	e0bfff15 	stw	r2,-4(fp)
 101161c:	e0bfff17 	ldw	r2,-4(fp)
}
 1011620:	e037883a 	mov	sp,fp
 1011624:	dfc00117 	ldw	ra,4(sp)
 1011628:	df000017 	ldw	fp,0(sp)
 101162c:	dec00204 	addi	sp,sp,8
 1011630:	f800283a 	ret

01011634 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 1011634:	f811883a 	mov	r8,ra
 1011638:	100c1d00 	call	100c1d0 <_mcount>
 101163c:	403f883a 	mov	ra,r8
 1011640:	defff004 	addi	sp,sp,-64
 1011644:	dfc00f15 	stw	ra,60(sp)
 1011648:	df000e15 	stw	fp,56(sp)
 101164c:	df000e04 	addi	fp,sp,56
 1011650:	e13ffb15 	stw	r4,-20(fp)
 1011654:	e1bffd15 	stw	r6,-12(fp)
 1011658:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 101165c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 1011660:	e0bffd17 	ldw	r2,-12(fp)
 1011664:	1004c03a 	cmpne	r2,r2,zero
 1011668:	1000031e 	bne	r2,zero,1011678 <OSQDel+0x44>
        return (pevent);
 101166c:	e0bffb17 	ldw	r2,-20(fp)
 1011670:	e0bfff15 	stw	r2,-4(fp)
 1011674:	0000ac06 	br	1011928 <OSQDel+0x2f4>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 1011678:	e0bffb17 	ldw	r2,-20(fp)
 101167c:	1004c03a 	cmpne	r2,r2,zero
 1011680:	1000061e 	bne	r2,zero,101169c <OSQDel+0x68>
        *perr = OS_ERR_PEVENT_NULL;
 1011684:	e0fffd17 	ldw	r3,-12(fp)
 1011688:	00800104 	movi	r2,4
 101168c:	18800005 	stb	r2,0(r3)
        return (pevent);
 1011690:	e0fffb17 	ldw	r3,-20(fp)
 1011694:	e0ffff15 	stw	r3,-4(fp)
 1011698:	0000a306 	br	1011928 <OSQDel+0x2f4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 101169c:	e0bffb17 	ldw	r2,-20(fp)
 10116a0:	10800003 	ldbu	r2,0(r2)
 10116a4:	10803fcc 	andi	r2,r2,255
 10116a8:	108000a0 	cmpeqi	r2,r2,2
 10116ac:	1000061e 	bne	r2,zero,10116c8 <OSQDel+0x94>
        *perr = OS_ERR_EVENT_TYPE;
 10116b0:	e0fffd17 	ldw	r3,-12(fp)
 10116b4:	00800044 	movi	r2,1
 10116b8:	18800005 	stb	r2,0(r3)
        return (pevent);
 10116bc:	e0bffb17 	ldw	r2,-20(fp)
 10116c0:	e0bfff15 	stw	r2,-4(fp)
 10116c4:	00009806 	br	1011928 <OSQDel+0x2f4>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 10116c8:	008040f4 	movhi	r2,259
 10116cc:	10970704 	addi	r2,r2,23580
 10116d0:	10800003 	ldbu	r2,0(r2)
 10116d4:	10803fcc 	andi	r2,r2,255
 10116d8:	1005003a 	cmpeq	r2,r2,zero
 10116dc:	1000061e 	bne	r2,zero,10116f8 <OSQDel+0xc4>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 10116e0:	e0fffd17 	ldw	r3,-12(fp)
 10116e4:	008003c4 	movi	r2,15
 10116e8:	18800005 	stb	r2,0(r3)
        return (pevent);
 10116ec:	e0fffb17 	ldw	r3,-20(fp)
 10116f0:	e0ffff15 	stw	r3,-4(fp)
 10116f4:	00008c06 	br	1011928 <OSQDel+0x2f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10116f8:	0005303a 	rdctl	r2,status
 10116fc:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1011700:	e0fff617 	ldw	r3,-40(fp)
 1011704:	00bfff84 	movi	r2,-2
 1011708:	1884703a 	and	r2,r3,r2
 101170c:	1001703a 	wrctl	status,r2
  
  return context;
 1011710:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
 1011714:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
 1011718:	e0bffb17 	ldw	r2,-20(fp)
 101171c:	10800283 	ldbu	r2,10(r2)
 1011720:	10803fcc 	andi	r2,r2,255
 1011724:	1005003a 	cmpeq	r2,r2,zero
 1011728:	1000031e 	bne	r2,zero,1011738 <OSQDel+0x104>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 101172c:	00800044 	movi	r2,1
 1011730:	e0bffa05 	stb	r2,-24(fp)
 1011734:	00000106 	br	101173c <OSQDel+0x108>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 1011738:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
 101173c:	e0bffc03 	ldbu	r2,-16(fp)
 1011740:	e0bffe15 	stw	r2,-8(fp)
 1011744:	e0fffe17 	ldw	r3,-8(fp)
 1011748:	1805003a 	cmpeq	r2,r3,zero
 101174c:	1000041e 	bne	r2,zero,1011760 <OSQDel+0x12c>
 1011750:	e0fffe17 	ldw	r3,-8(fp)
 1011754:	18800060 	cmpeqi	r2,r3,1
 1011758:	1000391e 	bne	r2,zero,1011840 <OSQDel+0x20c>
 101175c:	00006706 	br	10118fc <OSQDel+0x2c8>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
 1011760:	e0bffa03 	ldbu	r2,-24(fp)
 1011764:	1004c03a 	cmpne	r2,r2,zero
 1011768:	1000261e 	bne	r2,zero,1011804 <OSQDel+0x1d0>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 101176c:	e0fffb17 	ldw	r3,-20(fp)
 1011770:	00800fc4 	movi	r2,63
 1011774:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 1011778:	e0bffb17 	ldw	r2,-20(fp)
 101177c:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
 1011780:	e0bffb17 	ldw	r2,-20(fp)
 1011784:	10800117 	ldw	r2,4(r2)
 1011788:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
 101178c:	008040f4 	movhi	r2,259
 1011790:	10970404 	addi	r2,r2,23568
 1011794:	10c00017 	ldw	r3,0(r2)
 1011798:	e0bff817 	ldw	r2,-32(fp)
 101179c:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
 10117a0:	00c040f4 	movhi	r3,259
 10117a4:	18d70404 	addi	r3,r3,23568
 10117a8:	e0bff817 	ldw	r2,-32(fp)
 10117ac:	18800015 	stw	r2,0(r3)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 10117b0:	e0bffb17 	ldw	r2,-20(fp)
 10117b4:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 10117b8:	008040f4 	movhi	r2,259
 10117bc:	10970604 	addi	r2,r2,23576
 10117c0:	10c00017 	ldw	r3,0(r2)
 10117c4:	e0bffb17 	ldw	r2,-20(fp)
 10117c8:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 10117cc:	e0bffb17 	ldw	r2,-20(fp)
 10117d0:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 10117d4:	00c040f4 	movhi	r3,259
 10117d8:	18d70604 	addi	r3,r3,23576
 10117dc:	e0bffb17 	ldw	r2,-20(fp)
 10117e0:	18800015 	stw	r2,0(r3)
 10117e4:	e0bff717 	ldw	r2,-36(fp)
 10117e8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10117ec:	e0bff517 	ldw	r2,-44(fp)
 10117f0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 10117f4:	e0bffd17 	ldw	r2,-12(fp)
 10117f8:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
 10117fc:	e03ff915 	stw	zero,-28(fp)
 1011800:	00004706 	br	1011920 <OSQDel+0x2ec>
 1011804:	e0bff717 	ldw	r2,-36(fp)
 1011808:	e0bff415 	stw	r2,-48(fp)
 101180c:	e0bff417 	ldw	r2,-48(fp)
 1011810:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 1011814:	e0fffd17 	ldw	r3,-12(fp)
 1011818:	00801244 	movi	r2,73
 101181c:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
 1011820:	e0bffb17 	ldw	r2,-20(fp)
 1011824:	e0bff915 	stw	r2,-28(fp)
             }
             break;
 1011828:	00003d06 	br	1011920 <OSQDel+0x2ec>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
 101182c:	e13ffb17 	ldw	r4,-20(fp)
 1011830:	000b883a 	mov	r5,zero
 1011834:	01800104 	movi	r6,4
 1011838:	000f883a 	mov	r7,zero
 101183c:	100dc540 	call	100dc54 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
 1011840:	e0bffb17 	ldw	r2,-20(fp)
 1011844:	10800283 	ldbu	r2,10(r2)
 1011848:	10803fcc 	andi	r2,r2,255
 101184c:	1004c03a 	cmpne	r2,r2,zero
 1011850:	103ff61e 	bne	r2,zero,101182c <OSQDel+0x1f8>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 1011854:	e0fffb17 	ldw	r3,-20(fp)
 1011858:	00800fc4 	movi	r2,63
 101185c:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 1011860:	e0bffb17 	ldw	r2,-20(fp)
 1011864:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
 1011868:	e0bffb17 	ldw	r2,-20(fp)
 101186c:	10800117 	ldw	r2,4(r2)
 1011870:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
 1011874:	008040f4 	movhi	r2,259
 1011878:	10970404 	addi	r2,r2,23568
 101187c:	10c00017 	ldw	r3,0(r2)
 1011880:	e0bff817 	ldw	r2,-32(fp)
 1011884:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
 1011888:	00c040f4 	movhi	r3,259
 101188c:	18d70404 	addi	r3,r3,23568
 1011890:	e0bff817 	ldw	r2,-32(fp)
 1011894:	18800015 	stw	r2,0(r3)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 1011898:	e0bffb17 	ldw	r2,-20(fp)
 101189c:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 10118a0:	008040f4 	movhi	r2,259
 10118a4:	10970604 	addi	r2,r2,23576
 10118a8:	10c00017 	ldw	r3,0(r2)
 10118ac:	e0bffb17 	ldw	r2,-20(fp)
 10118b0:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 10118b4:	e0bffb17 	ldw	r2,-20(fp)
 10118b8:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 10118bc:	00c040f4 	movhi	r3,259
 10118c0:	18d70604 	addi	r3,r3,23576
 10118c4:	e0bffb17 	ldw	r2,-20(fp)
 10118c8:	18800015 	stw	r2,0(r3)
 10118cc:	e0bff717 	ldw	r2,-36(fp)
 10118d0:	e0bff315 	stw	r2,-52(fp)
 10118d4:	e0bff317 	ldw	r2,-52(fp)
 10118d8:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 10118dc:	e0bffa03 	ldbu	r2,-24(fp)
 10118e0:	10800058 	cmpnei	r2,r2,1
 10118e4:	1000011e 	bne	r2,zero,10118ec <OSQDel+0x2b8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 10118e8:	100e73c0 	call	100e73c <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 10118ec:	e0bffd17 	ldw	r2,-12(fp)
 10118f0:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
 10118f4:	e03ff915 	stw	zero,-28(fp)
             break;
 10118f8:	00000906 	br	1011920 <OSQDel+0x2ec>
 10118fc:	e0bff717 	ldw	r2,-36(fp)
 1011900:	e0bff215 	stw	r2,-56(fp)
 1011904:	e0bff217 	ldw	r2,-56(fp)
 1011908:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 101190c:	e0fffd17 	ldw	r3,-12(fp)
 1011910:	008001c4 	movi	r2,7
 1011914:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
 1011918:	e0bffb17 	ldw	r2,-20(fp)
 101191c:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
 1011920:	e0bff917 	ldw	r2,-28(fp)
 1011924:	e0bfff15 	stw	r2,-4(fp)
 1011928:	e0bfff17 	ldw	r2,-4(fp)
}
 101192c:	e037883a 	mov	sp,fp
 1011930:	dfc00117 	ldw	ra,4(sp)
 1011934:	df000017 	ldw	fp,0(sp)
 1011938:	dec00204 	addi	sp,sp,8
 101193c:	f800283a 	ret

01011940 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
 1011940:	f811883a 	mov	r8,ra
 1011944:	100c1d00 	call	100c1d0 <_mcount>
 1011948:	403f883a 	mov	ra,r8
 101194c:	defff904 	addi	sp,sp,-28
 1011950:	df000615 	stw	fp,24(sp)
 1011954:	df000604 	addi	fp,sp,24
 1011958:	e13ffe15 	stw	r4,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 101195c:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 1011960:	e0bffe17 	ldw	r2,-8(fp)
 1011964:	1004c03a 	cmpne	r2,r2,zero
 1011968:	1000031e 	bne	r2,zero,1011978 <OSQFlush+0x38>
        return (OS_ERR_PEVENT_NULL);
 101196c:	00800104 	movi	r2,4
 1011970:	e0bfff15 	stw	r2,-4(fp)
 1011974:	00002206 	br	1011a00 <OSQFlush+0xc0>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 1011978:	e0bffe17 	ldw	r2,-8(fp)
 101197c:	10800003 	ldbu	r2,0(r2)
 1011980:	10803fcc 	andi	r2,r2,255
 1011984:	108000a0 	cmpeqi	r2,r2,2
 1011988:	1000031e 	bne	r2,zero,1011998 <OSQFlush+0x58>
        return (OS_ERR_EVENT_TYPE);
 101198c:	00800044 	movi	r2,1
 1011990:	e0bfff15 	stw	r2,-4(fp)
 1011994:	00001a06 	br	1011a00 <OSQFlush+0xc0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1011998:	0005303a 	rdctl	r2,status
 101199c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10119a0:	e0fffb17 	ldw	r3,-20(fp)
 10119a4:	00bfff84 	movi	r2,-2
 10119a8:	1884703a 	and	r2,r3,r2
 10119ac:	1001703a 	wrctl	status,r2
  
  return context;
 10119b0:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 10119b4:	e0bffc15 	stw	r2,-16(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
 10119b8:	e0bffe17 	ldw	r2,-8(fp)
 10119bc:	10800117 	ldw	r2,4(r2)
 10119c0:	e0bffd15 	stw	r2,-12(fp)
    pq->OSQIn      = pq->OSQStart;
 10119c4:	e0bffd17 	ldw	r2,-12(fp)
 10119c8:	10c00117 	ldw	r3,4(r2)
 10119cc:	e0bffd17 	ldw	r2,-12(fp)
 10119d0:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
 10119d4:	e0bffd17 	ldw	r2,-12(fp)
 10119d8:	10c00117 	ldw	r3,4(r2)
 10119dc:	e0bffd17 	ldw	r2,-12(fp)
 10119e0:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
 10119e4:	e0bffd17 	ldw	r2,-12(fp)
 10119e8:	1000058d 	sth	zero,22(r2)
 10119ec:	e0bffc17 	ldw	r2,-16(fp)
 10119f0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10119f4:	e0bffa17 	ldw	r2,-24(fp)
 10119f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 10119fc:	e03fff15 	stw	zero,-4(fp)
 1011a00:	e0bfff17 	ldw	r2,-4(fp)
}
 1011a04:	e037883a 	mov	sp,fp
 1011a08:	df000017 	ldw	fp,0(sp)
 1011a0c:	dec00104 	addi	sp,sp,4
 1011a10:	f800283a 	ret

01011a14 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 1011a14:	f811883a 	mov	r8,ra
 1011a18:	100c1d00 	call	100c1d0 <_mcount>
 1011a1c:	403f883a 	mov	ra,r8
 1011a20:	defff104 	addi	sp,sp,-60
 1011a24:	dfc00e15 	stw	ra,56(sp)
 1011a28:	df000d15 	stw	fp,52(sp)
 1011a2c:	df000d04 	addi	fp,sp,52
 1011a30:	e13ffb15 	stw	r4,-20(fp)
 1011a34:	e1bffd15 	stw	r6,-12(fp)
 1011a38:	e17ffc0d 	sth	r5,-16(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1011a3c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 1011a40:	e0bffd17 	ldw	r2,-12(fp)
 1011a44:	1004c03a 	cmpne	r2,r2,zero
 1011a48:	1000021e 	bne	r2,zero,1011a54 <OSQPend+0x40>
        return ((void *)0);
 1011a4c:	e03fff15 	stw	zero,-4(fp)
 1011a50:	0000b506 	br	1011d28 <OSQPend+0x314>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 1011a54:	e0bffb17 	ldw	r2,-20(fp)
 1011a58:	1004c03a 	cmpne	r2,r2,zero
 1011a5c:	1000051e 	bne	r2,zero,1011a74 <OSQPend+0x60>
        *perr = OS_ERR_PEVENT_NULL;
 1011a60:	e0fffd17 	ldw	r3,-12(fp)
 1011a64:	00800104 	movi	r2,4
 1011a68:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 1011a6c:	e03fff15 	stw	zero,-4(fp)
 1011a70:	0000ad06 	br	1011d28 <OSQPend+0x314>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 1011a74:	e0bffb17 	ldw	r2,-20(fp)
 1011a78:	10800003 	ldbu	r2,0(r2)
 1011a7c:	10803fcc 	andi	r2,r2,255
 1011a80:	108000a0 	cmpeqi	r2,r2,2
 1011a84:	1000051e 	bne	r2,zero,1011a9c <OSQPend+0x88>
        *perr = OS_ERR_EVENT_TYPE;
 1011a88:	e0fffd17 	ldw	r3,-12(fp)
 1011a8c:	00800044 	movi	r2,1
 1011a90:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 1011a94:	e03fff15 	stw	zero,-4(fp)
 1011a98:	0000a306 	br	1011d28 <OSQPend+0x314>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 1011a9c:	008040f4 	movhi	r2,259
 1011aa0:	10970704 	addi	r2,r2,23580
 1011aa4:	10800003 	ldbu	r2,0(r2)
 1011aa8:	10803fcc 	andi	r2,r2,255
 1011aac:	1005003a 	cmpeq	r2,r2,zero
 1011ab0:	1000051e 	bne	r2,zero,1011ac8 <OSQPend+0xb4>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
 1011ab4:	e0fffd17 	ldw	r3,-12(fp)
 1011ab8:	00800084 	movi	r2,2
 1011abc:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 1011ac0:	e03fff15 	stw	zero,-4(fp)
 1011ac4:	00009806 	br	1011d28 <OSQPend+0x314>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
 1011ac8:	008040f4 	movhi	r2,259
 1011acc:	1096f604 	addi	r2,r2,23512
 1011ad0:	10800003 	ldbu	r2,0(r2)
 1011ad4:	10803fcc 	andi	r2,r2,255
 1011ad8:	1005003a 	cmpeq	r2,r2,zero
 1011adc:	1000051e 	bne	r2,zero,1011af4 <OSQPend+0xe0>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
 1011ae0:	e0fffd17 	ldw	r3,-12(fp)
 1011ae4:	00800344 	movi	r2,13
 1011ae8:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 1011aec:	e03fff15 	stw	zero,-4(fp)
 1011af0:	00008d06 	br	1011d28 <OSQPend+0x314>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1011af4:	0005303a 	rdctl	r2,status
 1011af8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1011afc:	e0fff717 	ldw	r3,-36(fp)
 1011b00:	00bfff84 	movi	r2,-2
 1011b04:	1884703a 	and	r2,r3,r2
 1011b08:	1001703a 	wrctl	status,r2
  
  return context;
 1011b0c:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 1011b10:	e0bff815 	stw	r2,-32(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 1011b14:	e0bffb17 	ldw	r2,-20(fp)
 1011b18:	10800117 	ldw	r2,4(r2)
 1011b1c:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 1011b20:	e0bff917 	ldw	r2,-28(fp)
 1011b24:	1080058b 	ldhu	r2,22(r2)
 1011b28:	10bfffcc 	andi	r2,r2,65535
 1011b2c:	1005003a 	cmpeq	r2,r2,zero
 1011b30:	10001f1e 	bne	r2,zero,1011bb0 <OSQPend+0x19c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 1011b34:	e0bff917 	ldw	r2,-28(fp)
 1011b38:	10c00417 	ldw	r3,16(r2)
 1011b3c:	18800017 	ldw	r2,0(r3)
 1011b40:	e0bffa15 	stw	r2,-24(fp)
 1011b44:	18c00104 	addi	r3,r3,4
 1011b48:	e0bff917 	ldw	r2,-28(fp)
 1011b4c:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 1011b50:	e0bff917 	ldw	r2,-28(fp)
 1011b54:	1080058b 	ldhu	r2,22(r2)
 1011b58:	10bfffc4 	addi	r2,r2,-1
 1011b5c:	1007883a 	mov	r3,r2
 1011b60:	e0bff917 	ldw	r2,-28(fp)
 1011b64:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 1011b68:	e0bff917 	ldw	r2,-28(fp)
 1011b6c:	10c00417 	ldw	r3,16(r2)
 1011b70:	e0bff917 	ldw	r2,-28(fp)
 1011b74:	10800217 	ldw	r2,8(r2)
 1011b78:	1880041e 	bne	r3,r2,1011b8c <OSQPend+0x178>
            pq->OSQOut = pq->OSQStart;
 1011b7c:	e0bff917 	ldw	r2,-28(fp)
 1011b80:	10c00117 	ldw	r3,4(r2)
 1011b84:	e0bff917 	ldw	r2,-28(fp)
 1011b88:	10c00415 	stw	r3,16(r2)
 1011b8c:	e0bff817 	ldw	r2,-32(fp)
 1011b90:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1011b94:	e0bff617 	ldw	r2,-40(fp)
 1011b98:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 1011b9c:	e0bffd17 	ldw	r2,-12(fp)
 1011ba0:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
 1011ba4:	e0bffa17 	ldw	r2,-24(fp)
 1011ba8:	e0bfff15 	stw	r2,-4(fp)
 1011bac:	00005e06 	br	1011d28 <OSQPend+0x314>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
 1011bb0:	008040f4 	movhi	r2,259
 1011bb4:	10970804 	addi	r2,r2,23584
 1011bb8:	10c00017 	ldw	r3,0(r2)
 1011bbc:	008040f4 	movhi	r2,259
 1011bc0:	10970804 	addi	r2,r2,23584
 1011bc4:	10800017 	ldw	r2,0(r2)
 1011bc8:	10800c03 	ldbu	r2,48(r2)
 1011bcc:	10800114 	ori	r2,r2,4
 1011bd0:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 1011bd4:	008040f4 	movhi	r2,259
 1011bd8:	10970804 	addi	r2,r2,23584
 1011bdc:	10800017 	ldw	r2,0(r2)
 1011be0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
 1011be4:	008040f4 	movhi	r2,259
 1011be8:	10970804 	addi	r2,r2,23584
 1011bec:	10c00017 	ldw	r3,0(r2)
 1011bf0:	e0bffc0b 	ldhu	r2,-16(fp)
 1011bf4:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
 1011bf8:	e13ffb17 	ldw	r4,-20(fp)
 1011bfc:	100ddf40 	call	100ddf4 <OS_EventTaskWait>
 1011c00:	e0bff817 	ldw	r2,-32(fp)
 1011c04:	e0bff515 	stw	r2,-44(fp)
 1011c08:	e0bff517 	ldw	r2,-44(fp)
 1011c0c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
 1011c10:	100e73c0 	call	100e73c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1011c14:	0005303a 	rdctl	r2,status
 1011c18:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1011c1c:	e0fff417 	ldw	r3,-48(fp)
 1011c20:	00bfff84 	movi	r2,-2
 1011c24:	1884703a 	and	r2,r3,r2
 1011c28:	1001703a 	wrctl	status,r2
  
  return context;
 1011c2c:	e0bff417 	ldw	r2,-48(fp)
    OS_ENTER_CRITICAL();
 1011c30:	e0bff815 	stw	r2,-32(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 1011c34:	008040f4 	movhi	r2,259
 1011c38:	10970804 	addi	r2,r2,23584
 1011c3c:	10800017 	ldw	r2,0(r2)
 1011c40:	10800c43 	ldbu	r2,49(r2)
 1011c44:	10803fcc 	andi	r2,r2,255
 1011c48:	e0bffe15 	stw	r2,-8(fp)
 1011c4c:	e0fffe17 	ldw	r3,-8(fp)
 1011c50:	1805003a 	cmpeq	r2,r3,zero
 1011c54:	1000041e 	bne	r2,zero,1011c68 <OSQPend+0x254>
 1011c58:	e0fffe17 	ldw	r3,-8(fp)
 1011c5c:	188000a0 	cmpeqi	r2,r3,2
 1011c60:	1000091e 	bne	r2,zero,1011c88 <OSQPend+0x274>
 1011c64:	00000d06 	br	1011c9c <OSQPend+0x288>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
 1011c68:	008040f4 	movhi	r2,259
 1011c6c:	10970804 	addi	r2,r2,23584
 1011c70:	10800017 	ldw	r2,0(r2)
 1011c74:	10800917 	ldw	r2,36(r2)
 1011c78:	e0bffa15 	stw	r2,-24(fp)
            *perr =  OS_ERR_NONE;
 1011c7c:	e0bffd17 	ldw	r2,-12(fp)
 1011c80:	10000005 	stb	zero,0(r2)
             break;
 1011c84:	00000e06 	br	1011cc0 <OSQPend+0x2ac>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
 1011c88:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 1011c8c:	e0fffd17 	ldw	r3,-12(fp)
 1011c90:	00800384 	movi	r2,14
 1011c94:	18800005 	stb	r2,0(r3)
             break;
 1011c98:	00000906 	br	1011cc0 <OSQPend+0x2ac>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 1011c9c:	008040f4 	movhi	r2,259
 1011ca0:	10970804 	addi	r2,r2,23584
 1011ca4:	11000017 	ldw	r4,0(r2)
 1011ca8:	e17ffb17 	ldw	r5,-20(fp)
 1011cac:	100e0700 	call	100e070 <OS_EventTaskRemove>
             pmsg = (void *)0;
 1011cb0:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 1011cb4:	e0fffd17 	ldw	r3,-12(fp)
 1011cb8:	00800284 	movi	r2,10
 1011cbc:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 1011cc0:	008040f4 	movhi	r2,259
 1011cc4:	10970804 	addi	r2,r2,23584
 1011cc8:	10800017 	ldw	r2,0(r2)
 1011ccc:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 1011cd0:	008040f4 	movhi	r2,259
 1011cd4:	10970804 	addi	r2,r2,23584
 1011cd8:	10800017 	ldw	r2,0(r2)
 1011cdc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 1011ce0:	008040f4 	movhi	r2,259
 1011ce4:	10970804 	addi	r2,r2,23584
 1011ce8:	10800017 	ldw	r2,0(r2)
 1011cec:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 1011cf0:	008040f4 	movhi	r2,259
 1011cf4:	10970804 	addi	r2,r2,23584
 1011cf8:	10800017 	ldw	r2,0(r2)
 1011cfc:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
 1011d00:	008040f4 	movhi	r2,259
 1011d04:	10970804 	addi	r2,r2,23584
 1011d08:	10800017 	ldw	r2,0(r2)
 1011d0c:	10000915 	stw	zero,36(r2)
 1011d10:	e0bff817 	ldw	r2,-32(fp)
 1011d14:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1011d18:	e0bff317 	ldw	r2,-52(fp)
 1011d1c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
 1011d20:	e0bffa17 	ldw	r2,-24(fp)
 1011d24:	e0bfff15 	stw	r2,-4(fp)
 1011d28:	e0bfff17 	ldw	r2,-4(fp)
}
 1011d2c:	e037883a 	mov	sp,fp
 1011d30:	dfc00117 	ldw	ra,4(sp)
 1011d34:	df000017 	ldw	fp,0(sp)
 1011d38:	dec00204 	addi	sp,sp,8
 1011d3c:	f800283a 	ret

01011d40 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 1011d40:	f811883a 	mov	r8,ra
 1011d44:	100c1d00 	call	100c1d0 <_mcount>
 1011d48:	403f883a 	mov	ra,r8
 1011d4c:	defff504 	addi	sp,sp,-44
 1011d50:	dfc00a15 	stw	ra,40(sp)
 1011d54:	df000915 	stw	fp,36(sp)
 1011d58:	df000904 	addi	fp,sp,36
 1011d5c:	e13ffc15 	stw	r4,-16(fp)
 1011d60:	e1bffe15 	stw	r6,-8(fp)
 1011d64:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 1011d68:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 1011d6c:	e0bffe17 	ldw	r2,-8(fp)
 1011d70:	1004c03a 	cmpne	r2,r2,zero
 1011d74:	1000021e 	bne	r2,zero,1011d80 <OSQPendAbort+0x40>
        return (0);
 1011d78:	e03fff15 	stw	zero,-4(fp)
 1011d7c:	00004c06 	br	1011eb0 <OSQPendAbort+0x170>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 1011d80:	e0bffc17 	ldw	r2,-16(fp)
 1011d84:	1004c03a 	cmpne	r2,r2,zero
 1011d88:	1000051e 	bne	r2,zero,1011da0 <OSQPendAbort+0x60>
        *perr = OS_ERR_PEVENT_NULL;
 1011d8c:	e0fffe17 	ldw	r3,-8(fp)
 1011d90:	00800104 	movi	r2,4
 1011d94:	18800005 	stb	r2,0(r3)
        return (0);
 1011d98:	e03fff15 	stw	zero,-4(fp)
 1011d9c:	00004406 	br	1011eb0 <OSQPendAbort+0x170>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 1011da0:	e0bffc17 	ldw	r2,-16(fp)
 1011da4:	10800003 	ldbu	r2,0(r2)
 1011da8:	10803fcc 	andi	r2,r2,255
 1011dac:	108000a0 	cmpeqi	r2,r2,2
 1011db0:	1000051e 	bne	r2,zero,1011dc8 <OSQPendAbort+0x88>
        *perr = OS_ERR_EVENT_TYPE;
 1011db4:	e0fffe17 	ldw	r3,-8(fp)
 1011db8:	00800044 	movi	r2,1
 1011dbc:	18800005 	stb	r2,0(r3)
        return (0);
 1011dc0:	e03fff15 	stw	zero,-4(fp)
 1011dc4:	00003a06 	br	1011eb0 <OSQPendAbort+0x170>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1011dc8:	0005303a 	rdctl	r2,status
 1011dcc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1011dd0:	e0fff917 	ldw	r3,-28(fp)
 1011dd4:	00bfff84 	movi	r2,-2
 1011dd8:	1884703a 	and	r2,r3,r2
 1011ddc:	1001703a 	wrctl	status,r2
  
  return context;
 1011de0:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 1011de4:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
 1011de8:	e0bffc17 	ldw	r2,-16(fp)
 1011dec:	10800283 	ldbu	r2,10(r2)
 1011df0:	10803fcc 	andi	r2,r2,255
 1011df4:	1005003a 	cmpeq	r2,r2,zero
 1011df8:	1000261e 	bne	r2,zero,1011e94 <OSQPendAbort+0x154>
        nbr_tasks = 0;
 1011dfc:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
 1011e00:	e0bffd03 	ldbu	r2,-12(fp)
 1011e04:	10800060 	cmpeqi	r2,r2,1
 1011e08:	1000091e 	bne	r2,zero,1011e30 <OSQPendAbort+0xf0>
 1011e0c:	00000e06 	br	1011e48 <OSQPendAbort+0x108>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 1011e10:	e13ffc17 	ldw	r4,-16(fp)
 1011e14:	000b883a 	mov	r5,zero
 1011e18:	01800104 	movi	r6,4
 1011e1c:	01c00084 	movi	r7,2
 1011e20:	100dc540 	call	100dc54 <OS_EventTaskRdy>
                     nbr_tasks++;
 1011e24:	e0bffb03 	ldbu	r2,-20(fp)
 1011e28:	10800044 	addi	r2,r2,1
 1011e2c:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
 1011e30:	e0bffc17 	ldw	r2,-16(fp)
 1011e34:	10800283 	ldbu	r2,10(r2)
 1011e38:	10803fcc 	andi	r2,r2,255
 1011e3c:	1004c03a 	cmpne	r2,r2,zero
 1011e40:	103ff31e 	bne	r2,zero,1011e10 <OSQPendAbort+0xd0>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 1011e44:	00000806 	br	1011e68 <OSQPendAbort+0x128>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 1011e48:	e13ffc17 	ldw	r4,-16(fp)
 1011e4c:	000b883a 	mov	r5,zero
 1011e50:	01800104 	movi	r6,4
 1011e54:	01c00084 	movi	r7,2
 1011e58:	100dc540 	call	100dc54 <OS_EventTaskRdy>
                 nbr_tasks++;
 1011e5c:	e0bffb03 	ldbu	r2,-20(fp)
 1011e60:	10800044 	addi	r2,r2,1
 1011e64:	e0bffb05 	stb	r2,-20(fp)
 1011e68:	e0bffa17 	ldw	r2,-24(fp)
 1011e6c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1011e70:	e0bff817 	ldw	r2,-32(fp)
 1011e74:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
 1011e78:	100e73c0 	call	100e73c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 1011e7c:	e0fffe17 	ldw	r3,-8(fp)
 1011e80:	00800384 	movi	r2,14
 1011e84:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
 1011e88:	e0bffb03 	ldbu	r2,-20(fp)
 1011e8c:	e0bfff15 	stw	r2,-4(fp)
 1011e90:	00000706 	br	1011eb0 <OSQPendAbort+0x170>
 1011e94:	e0bffa17 	ldw	r2,-24(fp)
 1011e98:	e0bff715 	stw	r2,-36(fp)
 1011e9c:	e0bff717 	ldw	r2,-36(fp)
 1011ea0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 1011ea4:	e0bffe17 	ldw	r2,-8(fp)
 1011ea8:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
 1011eac:	e03fff15 	stw	zero,-4(fp)
 1011eb0:	e0bfff17 	ldw	r2,-4(fp)
}
 1011eb4:	e037883a 	mov	sp,fp
 1011eb8:	dfc00117 	ldw	ra,4(sp)
 1011ebc:	df000017 	ldw	fp,0(sp)
 1011ec0:	dec00204 	addi	sp,sp,8
 1011ec4:	f800283a 	ret

01011ec8 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
 1011ec8:	f811883a 	mov	r8,ra
 1011ecc:	100c1d00 	call	100c1d0 <_mcount>
 1011ed0:	403f883a 	mov	ra,r8
 1011ed4:	defff504 	addi	sp,sp,-44
 1011ed8:	dfc00a15 	stw	ra,40(sp)
 1011edc:	df000915 	stw	fp,36(sp)
 1011ee0:	df000904 	addi	fp,sp,36
 1011ee4:	e13ffd15 	stw	r4,-12(fp)
 1011ee8:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 1011eec:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 1011ef0:	e0bffd17 	ldw	r2,-12(fp)
 1011ef4:	1004c03a 	cmpne	r2,r2,zero
 1011ef8:	1000031e 	bne	r2,zero,1011f08 <OSQPost+0x40>
        return (OS_ERR_PEVENT_NULL);
 1011efc:	00800104 	movi	r2,4
 1011f00:	e0bfff15 	stw	r2,-4(fp)
 1011f04:	00004d06 	br	101203c <OSQPost+0x174>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 1011f08:	e0bffd17 	ldw	r2,-12(fp)
 1011f0c:	10800003 	ldbu	r2,0(r2)
 1011f10:	10803fcc 	andi	r2,r2,255
 1011f14:	108000a0 	cmpeqi	r2,r2,2
 1011f18:	1000031e 	bne	r2,zero,1011f28 <OSQPost+0x60>
        return (OS_ERR_EVENT_TYPE);
 1011f1c:	00800044 	movi	r2,1
 1011f20:	e0bfff15 	stw	r2,-4(fp)
 1011f24:	00004506 	br	101203c <OSQPost+0x174>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1011f28:	0005303a 	rdctl	r2,status
 1011f2c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1011f30:	e0fffa17 	ldw	r3,-24(fp)
 1011f34:	00bfff84 	movi	r2,-2
 1011f38:	1884703a 	and	r2,r3,r2
 1011f3c:	1001703a 	wrctl	status,r2
  
  return context;
 1011f40:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 1011f44:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
 1011f48:	e0bffd17 	ldw	r2,-12(fp)
 1011f4c:	10800283 	ldbu	r2,10(r2)
 1011f50:	10803fcc 	andi	r2,r2,255
 1011f54:	1005003a 	cmpeq	r2,r2,zero
 1011f58:	10000c1e 	bne	r2,zero,1011f8c <OSQPost+0xc4>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 1011f5c:	e13ffd17 	ldw	r4,-12(fp)
 1011f60:	e17ffe17 	ldw	r5,-8(fp)
 1011f64:	01800104 	movi	r6,4
 1011f68:	000f883a 	mov	r7,zero
 1011f6c:	100dc540 	call	100dc54 <OS_EventTaskRdy>
 1011f70:	e0bffb17 	ldw	r2,-20(fp)
 1011f74:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1011f78:	e0bff917 	ldw	r2,-28(fp)
 1011f7c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
 1011f80:	100e73c0 	call	100e73c <OS_Sched>
        return (OS_ERR_NONE);
 1011f84:	e03fff15 	stw	zero,-4(fp)
 1011f88:	00002c06 	br	101203c <OSQPost+0x174>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
 1011f8c:	e0bffd17 	ldw	r2,-12(fp)
 1011f90:	10800117 	ldw	r2,4(r2)
 1011f94:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
 1011f98:	e0bffc17 	ldw	r2,-16(fp)
 1011f9c:	10c0058b 	ldhu	r3,22(r2)
 1011fa0:	e0bffc17 	ldw	r2,-16(fp)
 1011fa4:	1080050b 	ldhu	r2,20(r2)
 1011fa8:	18ffffcc 	andi	r3,r3,65535
 1011fac:	10bfffcc 	andi	r2,r2,65535
 1011fb0:	18800736 	bltu	r3,r2,1011fd0 <OSQPost+0x108>
 1011fb4:	e0bffb17 	ldw	r2,-20(fp)
 1011fb8:	e0bff815 	stw	r2,-32(fp)
 1011fbc:	e0bff817 	ldw	r2,-32(fp)
 1011fc0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 1011fc4:	00800784 	movi	r2,30
 1011fc8:	e0bfff15 	stw	r2,-4(fp)
 1011fcc:	00001b06 	br	101203c <OSQPost+0x174>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
 1011fd0:	e0bffc17 	ldw	r2,-16(fp)
 1011fd4:	10c00317 	ldw	r3,12(r2)
 1011fd8:	e0bffe17 	ldw	r2,-8(fp)
 1011fdc:	18800015 	stw	r2,0(r3)
 1011fe0:	18c00104 	addi	r3,r3,4
 1011fe4:	e0bffc17 	ldw	r2,-16(fp)
 1011fe8:	10c00315 	stw	r3,12(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
 1011fec:	e0bffc17 	ldw	r2,-16(fp)
 1011ff0:	1080058b 	ldhu	r2,22(r2)
 1011ff4:	10800044 	addi	r2,r2,1
 1011ff8:	1007883a 	mov	r3,r2
 1011ffc:	e0bffc17 	ldw	r2,-16(fp)
 1012000:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
 1012004:	e0bffc17 	ldw	r2,-16(fp)
 1012008:	10c00317 	ldw	r3,12(r2)
 101200c:	e0bffc17 	ldw	r2,-16(fp)
 1012010:	10800217 	ldw	r2,8(r2)
 1012014:	1880041e 	bne	r3,r2,1012028 <OSQPost+0x160>
        pq->OSQIn = pq->OSQStart;
 1012018:	e0bffc17 	ldw	r2,-16(fp)
 101201c:	10c00117 	ldw	r3,4(r2)
 1012020:	e0bffc17 	ldw	r2,-16(fp)
 1012024:	10c00315 	stw	r3,12(r2)
 1012028:	e0bffb17 	ldw	r2,-20(fp)
 101202c:	e0bff715 	stw	r2,-36(fp)
 1012030:	e0bff717 	ldw	r2,-36(fp)
 1012034:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 1012038:	e03fff15 	stw	zero,-4(fp)
 101203c:	e0bfff17 	ldw	r2,-4(fp)
}
 1012040:	e037883a 	mov	sp,fp
 1012044:	dfc00117 	ldw	ra,4(sp)
 1012048:	df000017 	ldw	fp,0(sp)
 101204c:	dec00204 	addi	sp,sp,8
 1012050:	f800283a 	ret

01012054 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
 1012054:	f811883a 	mov	r8,ra
 1012058:	100c1d00 	call	100c1d0 <_mcount>
 101205c:	403f883a 	mov	ra,r8
 1012060:	defff504 	addi	sp,sp,-44
 1012064:	dfc00a15 	stw	ra,40(sp)
 1012068:	df000915 	stw	fp,36(sp)
 101206c:	df000904 	addi	fp,sp,36
 1012070:	e13ffd15 	stw	r4,-12(fp)
 1012074:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 1012078:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 101207c:	e0bffd17 	ldw	r2,-12(fp)
 1012080:	1004c03a 	cmpne	r2,r2,zero
 1012084:	1000031e 	bne	r2,zero,1012094 <OSQPostFront+0x40>
        return (OS_ERR_PEVENT_NULL);
 1012088:	00800104 	movi	r2,4
 101208c:	e0bfff15 	stw	r2,-4(fp)
 1012090:	00004f06 	br	10121d0 <OSQPostFront+0x17c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 1012094:	e0bffd17 	ldw	r2,-12(fp)
 1012098:	10800003 	ldbu	r2,0(r2)
 101209c:	10803fcc 	andi	r2,r2,255
 10120a0:	108000a0 	cmpeqi	r2,r2,2
 10120a4:	1000031e 	bne	r2,zero,10120b4 <OSQPostFront+0x60>
        return (OS_ERR_EVENT_TYPE);
 10120a8:	00800044 	movi	r2,1
 10120ac:	e0bfff15 	stw	r2,-4(fp)
 10120b0:	00004706 	br	10121d0 <OSQPostFront+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10120b4:	0005303a 	rdctl	r2,status
 10120b8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10120bc:	e0fffa17 	ldw	r3,-24(fp)
 10120c0:	00bfff84 	movi	r2,-2
 10120c4:	1884703a 	and	r2,r3,r2
 10120c8:	1001703a 	wrctl	status,r2
  
  return context;
 10120cc:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 10120d0:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
 10120d4:	e0bffd17 	ldw	r2,-12(fp)
 10120d8:	10800283 	ldbu	r2,10(r2)
 10120dc:	10803fcc 	andi	r2,r2,255
 10120e0:	1005003a 	cmpeq	r2,r2,zero
 10120e4:	10000c1e 	bne	r2,zero,1012118 <OSQPostFront+0xc4>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 10120e8:	e13ffd17 	ldw	r4,-12(fp)
 10120ec:	e17ffe17 	ldw	r5,-8(fp)
 10120f0:	01800104 	movi	r6,4
 10120f4:	000f883a 	mov	r7,zero
 10120f8:	100dc540 	call	100dc54 <OS_EventTaskRdy>
 10120fc:	e0bffb17 	ldw	r2,-20(fp)
 1012100:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1012104:	e0bff917 	ldw	r2,-28(fp)
 1012108:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
 101210c:	100e73c0 	call	100e73c <OS_Sched>
        return (OS_ERR_NONE);
 1012110:	e03fff15 	stw	zero,-4(fp)
 1012114:	00002e06 	br	10121d0 <OSQPostFront+0x17c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 1012118:	e0bffd17 	ldw	r2,-12(fp)
 101211c:	10800117 	ldw	r2,4(r2)
 1012120:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 1012124:	e0bffc17 	ldw	r2,-16(fp)
 1012128:	10c0058b 	ldhu	r3,22(r2)
 101212c:	e0bffc17 	ldw	r2,-16(fp)
 1012130:	1080050b 	ldhu	r2,20(r2)
 1012134:	18ffffcc 	andi	r3,r3,65535
 1012138:	10bfffcc 	andi	r2,r2,65535
 101213c:	18800736 	bltu	r3,r2,101215c <OSQPostFront+0x108>
 1012140:	e0bffb17 	ldw	r2,-20(fp)
 1012144:	e0bff815 	stw	r2,-32(fp)
 1012148:	e0bff817 	ldw	r2,-32(fp)
 101214c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 1012150:	00800784 	movi	r2,30
 1012154:	e0bfff15 	stw	r2,-4(fp)
 1012158:	00001d06 	br	10121d0 <OSQPostFront+0x17c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
 101215c:	e0bffc17 	ldw	r2,-16(fp)
 1012160:	10c00417 	ldw	r3,16(r2)
 1012164:	e0bffc17 	ldw	r2,-16(fp)
 1012168:	10800117 	ldw	r2,4(r2)
 101216c:	1880041e 	bne	r3,r2,1012180 <OSQPostFront+0x12c>
        pq->OSQOut = pq->OSQEnd;
 1012170:	e0bffc17 	ldw	r2,-16(fp)
 1012174:	10c00217 	ldw	r3,8(r2)
 1012178:	e0bffc17 	ldw	r2,-16(fp)
 101217c:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
 1012180:	e0bffc17 	ldw	r2,-16(fp)
 1012184:	10800417 	ldw	r2,16(r2)
 1012188:	10ffff04 	addi	r3,r2,-4
 101218c:	e0bffc17 	ldw	r2,-16(fp)
 1012190:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
 1012194:	e0bffc17 	ldw	r2,-16(fp)
 1012198:	10c00417 	ldw	r3,16(r2)
 101219c:	e0bffe17 	ldw	r2,-8(fp)
 10121a0:	18800015 	stw	r2,0(r3)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 10121a4:	e0bffc17 	ldw	r2,-16(fp)
 10121a8:	1080058b 	ldhu	r2,22(r2)
 10121ac:	10800044 	addi	r2,r2,1
 10121b0:	1007883a 	mov	r3,r2
 10121b4:	e0bffc17 	ldw	r2,-16(fp)
 10121b8:	10c0058d 	sth	r3,22(r2)
 10121bc:	e0bffb17 	ldw	r2,-20(fp)
 10121c0:	e0bff715 	stw	r2,-36(fp)
 10121c4:	e0bff717 	ldw	r2,-36(fp)
 10121c8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 10121cc:	e03fff15 	stw	zero,-4(fp)
 10121d0:	e0bfff17 	ldw	r2,-4(fp)
}
 10121d4:	e037883a 	mov	sp,fp
 10121d8:	dfc00117 	ldw	ra,4(sp)
 10121dc:	df000017 	ldw	fp,0(sp)
 10121e0:	dec00204 	addi	sp,sp,8
 10121e4:	f800283a 	ret

010121e8 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
 10121e8:	f811883a 	mov	r8,ra
 10121ec:	100c1d00 	call	100c1d0 <_mcount>
 10121f0:	403f883a 	mov	ra,r8
 10121f4:	defff404 	addi	sp,sp,-48
 10121f8:	dfc00b15 	stw	ra,44(sp)
 10121fc:	df000a15 	stw	fp,40(sp)
 1012200:	df000a04 	addi	fp,sp,40
 1012204:	e13ffc15 	stw	r4,-16(fp)
 1012208:	e17ffd15 	stw	r5,-12(fp)
 101220c:	e1bffe05 	stb	r6,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 1012210:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 1012214:	e0bffc17 	ldw	r2,-16(fp)
 1012218:	1004c03a 	cmpne	r2,r2,zero
 101221c:	1000031e 	bne	r2,zero,101222c <OSQPostOpt+0x44>
        return (OS_ERR_PEVENT_NULL);
 1012220:	00800104 	movi	r2,4
 1012224:	e0bfff15 	stw	r2,-4(fp)
 1012228:	00007906 	br	1012410 <OSQPostOpt+0x228>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 101222c:	e0bffc17 	ldw	r2,-16(fp)
 1012230:	10800003 	ldbu	r2,0(r2)
 1012234:	10803fcc 	andi	r2,r2,255
 1012238:	108000a0 	cmpeqi	r2,r2,2
 101223c:	1000031e 	bne	r2,zero,101224c <OSQPostOpt+0x64>
        return (OS_ERR_EVENT_TYPE);
 1012240:	00800044 	movi	r2,1
 1012244:	e0bfff15 	stw	r2,-4(fp)
 1012248:	00007106 	br	1012410 <OSQPostOpt+0x228>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101224c:	0005303a 	rdctl	r2,status
 1012250:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1012254:	e0fff917 	ldw	r3,-28(fp)
 1012258:	00bfff84 	movi	r2,-2
 101225c:	1884703a 	and	r2,r3,r2
 1012260:	1001703a 	wrctl	status,r2
  
  return context;
 1012264:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 1012268:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
 101226c:	e0bffc17 	ldw	r2,-16(fp)
 1012270:	10800283 	ldbu	r2,10(r2)
 1012274:	10803fcc 	andi	r2,r2,255
 1012278:	1005003a 	cmpeq	r2,r2,zero
 101227c:	1000211e 	bne	r2,zero,1012304 <OSQPostOpt+0x11c>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
 1012280:	e0bffe03 	ldbu	r2,-8(fp)
 1012284:	1080004c 	andi	r2,r2,1
 1012288:	10803fcc 	andi	r2,r2,255
 101228c:	1005003a 	cmpeq	r2,r2,zero
 1012290:	10000c1e 	bne	r2,zero,10122c4 <OSQPostOpt+0xdc>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 1012294:	00000506 	br	10122ac <OSQPostOpt+0xc4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 1012298:	e13ffc17 	ldw	r4,-16(fp)
 101229c:	e17ffd17 	ldw	r5,-12(fp)
 10122a0:	01800104 	movi	r6,4
 10122a4:	000f883a 	mov	r7,zero
 10122a8:	100dc540 	call	100dc54 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 10122ac:	e0bffc17 	ldw	r2,-16(fp)
 10122b0:	10800283 	ldbu	r2,10(r2)
 10122b4:	10803fcc 	andi	r2,r2,255
 10122b8:	1004c03a 	cmpne	r2,r2,zero
 10122bc:	103ff61e 	bne	r2,zero,1012298 <OSQPostOpt+0xb0>
 10122c0:	00000506 	br	10122d8 <OSQPostOpt+0xf0>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 10122c4:	e13ffc17 	ldw	r4,-16(fp)
 10122c8:	e17ffd17 	ldw	r5,-12(fp)
 10122cc:	01800104 	movi	r6,4
 10122d0:	000f883a 	mov	r7,zero
 10122d4:	100dc540 	call	100dc54 <OS_EventTaskRdy>
 10122d8:	e0bffa17 	ldw	r2,-24(fp)
 10122dc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10122e0:	e0bff817 	ldw	r2,-32(fp)
 10122e4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
 10122e8:	e0bffe03 	ldbu	r2,-8(fp)
 10122ec:	1080010c 	andi	r2,r2,4
 10122f0:	1004c03a 	cmpne	r2,r2,zero
 10122f4:	1000011e 	bne	r2,zero,10122fc <OSQPostOpt+0x114>
            OS_Sched();                               /* Find highest priority task ready to run       */
 10122f8:	100e73c0 	call	100e73c <OS_Sched>
        }
        return (OS_ERR_NONE);
 10122fc:	e03fff15 	stw	zero,-4(fp)
 1012300:	00004306 	br	1012410 <OSQPostOpt+0x228>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 1012304:	e0bffc17 	ldw	r2,-16(fp)
 1012308:	10800117 	ldw	r2,4(r2)
 101230c:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 1012310:	e0bffb17 	ldw	r2,-20(fp)
 1012314:	10c0058b 	ldhu	r3,22(r2)
 1012318:	e0bffb17 	ldw	r2,-20(fp)
 101231c:	1080050b 	ldhu	r2,20(r2)
 1012320:	18ffffcc 	andi	r3,r3,65535
 1012324:	10bfffcc 	andi	r2,r2,65535
 1012328:	18800736 	bltu	r3,r2,1012348 <OSQPostOpt+0x160>
 101232c:	e0bffa17 	ldw	r2,-24(fp)
 1012330:	e0bff715 	stw	r2,-36(fp)
 1012334:	e0bff717 	ldw	r2,-36(fp)
 1012338:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 101233c:	00800784 	movi	r2,30
 1012340:	e0bfff15 	stw	r2,-4(fp)
 1012344:	00003206 	br	1012410 <OSQPostOpt+0x228>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
 1012348:	e0bffe03 	ldbu	r2,-8(fp)
 101234c:	1080008c 	andi	r2,r2,2
 1012350:	1005003a 	cmpeq	r2,r2,zero
 1012354:	1000131e 	bne	r2,zero,10123a4 <OSQPostOpt+0x1bc>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
 1012358:	e0bffb17 	ldw	r2,-20(fp)
 101235c:	10c00417 	ldw	r3,16(r2)
 1012360:	e0bffb17 	ldw	r2,-20(fp)
 1012364:	10800117 	ldw	r2,4(r2)
 1012368:	1880041e 	bne	r3,r2,101237c <OSQPostOpt+0x194>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
 101236c:	e0bffb17 	ldw	r2,-20(fp)
 1012370:	10c00217 	ldw	r3,8(r2)
 1012374:	e0bffb17 	ldw	r2,-20(fp)
 1012378:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
 101237c:	e0bffb17 	ldw	r2,-20(fp)
 1012380:	10800417 	ldw	r2,16(r2)
 1012384:	10ffff04 	addi	r3,r2,-4
 1012388:	e0bffb17 	ldw	r2,-20(fp)
 101238c:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
 1012390:	e0bffb17 	ldw	r2,-20(fp)
 1012394:	10c00417 	ldw	r3,16(r2)
 1012398:	e0bffd17 	ldw	r2,-12(fp)
 101239c:	18800015 	stw	r2,0(r3)
 10123a0:	00001006 	br	10123e4 <OSQPostOpt+0x1fc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
 10123a4:	e0bffb17 	ldw	r2,-20(fp)
 10123a8:	10c00317 	ldw	r3,12(r2)
 10123ac:	e0bffd17 	ldw	r2,-12(fp)
 10123b0:	18800015 	stw	r2,0(r3)
 10123b4:	18c00104 	addi	r3,r3,4
 10123b8:	e0bffb17 	ldw	r2,-20(fp)
 10123bc:	10c00315 	stw	r3,12(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
 10123c0:	e0bffb17 	ldw	r2,-20(fp)
 10123c4:	10c00317 	ldw	r3,12(r2)
 10123c8:	e0bffb17 	ldw	r2,-20(fp)
 10123cc:	10800217 	ldw	r2,8(r2)
 10123d0:	1880041e 	bne	r3,r2,10123e4 <OSQPostOpt+0x1fc>
            pq->OSQIn = pq->OSQStart;
 10123d4:	e0bffb17 	ldw	r2,-20(fp)
 10123d8:	10c00117 	ldw	r3,4(r2)
 10123dc:	e0bffb17 	ldw	r2,-20(fp)
 10123e0:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 10123e4:	e0bffb17 	ldw	r2,-20(fp)
 10123e8:	1080058b 	ldhu	r2,22(r2)
 10123ec:	10800044 	addi	r2,r2,1
 10123f0:	1007883a 	mov	r3,r2
 10123f4:	e0bffb17 	ldw	r2,-20(fp)
 10123f8:	10c0058d 	sth	r3,22(r2)
 10123fc:	e0bffa17 	ldw	r2,-24(fp)
 1012400:	e0bff615 	stw	r2,-40(fp)
 1012404:	e0bff617 	ldw	r2,-40(fp)
 1012408:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 101240c:	e03fff15 	stw	zero,-4(fp)
 1012410:	e0bfff17 	ldw	r2,-4(fp)
}
 1012414:	e037883a 	mov	sp,fp
 1012418:	dfc00117 	ldw	ra,4(sp)
 101241c:	df000017 	ldw	fp,0(sp)
 1012420:	dec00204 	addi	sp,sp,8
 1012424:	f800283a 	ret

01012428 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
 1012428:	f811883a 	mov	r8,ra
 101242c:	100c1d00 	call	100c1d0 <_mcount>
 1012430:	403f883a 	mov	ra,r8
 1012434:	defff504 	addi	sp,sp,-44
 1012438:	df000a15 	stw	fp,40(sp)
 101243c:	df000a04 	addi	fp,sp,40
 1012440:	e13ffd15 	stw	r4,-12(fp)
 1012444:	e17ffe15 	stw	r5,-8(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 1012448:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 101244c:	e0bffd17 	ldw	r2,-12(fp)
 1012450:	1004c03a 	cmpne	r2,r2,zero
 1012454:	1000031e 	bne	r2,zero,1012464 <OSQQuery+0x3c>
        return (OS_ERR_PEVENT_NULL);
 1012458:	00800104 	movi	r2,4
 101245c:	e0bfff15 	stw	r2,-4(fp)
 1012460:	00004f06 	br	10125a0 <OSQQuery+0x178>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
 1012464:	e0bffe17 	ldw	r2,-8(fp)
 1012468:	1004c03a 	cmpne	r2,r2,zero
 101246c:	1000031e 	bne	r2,zero,101247c <OSQQuery+0x54>
        return (OS_ERR_PDATA_NULL);
 1012470:	00800244 	movi	r2,9
 1012474:	e0bfff15 	stw	r2,-4(fp)
 1012478:	00004906 	br	10125a0 <OSQQuery+0x178>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 101247c:	e0bffd17 	ldw	r2,-12(fp)
 1012480:	10800003 	ldbu	r2,0(r2)
 1012484:	10803fcc 	andi	r2,r2,255
 1012488:	108000a0 	cmpeqi	r2,r2,2
 101248c:	1000031e 	bne	r2,zero,101249c <OSQQuery+0x74>
        return (OS_ERR_EVENT_TYPE);
 1012490:	00800044 	movi	r2,1
 1012494:	e0bfff15 	stw	r2,-4(fp)
 1012498:	00004106 	br	10125a0 <OSQQuery+0x178>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101249c:	0005303a 	rdctl	r2,status
 10124a0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10124a4:	e0fff717 	ldw	r3,-36(fp)
 10124a8:	00bfff84 	movi	r2,-2
 10124ac:	1884703a 	and	r2,r3,r2
 10124b0:	1001703a 	wrctl	status,r2
  
  return context;
 10124b4:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 10124b8:	e0bff815 	stw	r2,-32(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
 10124bc:	e0bffd17 	ldw	r2,-12(fp)
 10124c0:	10c00283 	ldbu	r3,10(r2)
 10124c4:	e0bffe17 	ldw	r2,-8(fp)
 10124c8:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
 10124cc:	e0bffd17 	ldw	r2,-12(fp)
 10124d0:	108002c4 	addi	r2,r2,11
 10124d4:	e0bffa15 	stw	r2,-24(fp)
    pdest                = &p_q_data->OSEventTbl[0];
 10124d8:	e0bffe17 	ldw	r2,-8(fp)
 10124dc:	10800204 	addi	r2,r2,8
 10124e0:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 10124e4:	e03ffb05 	stb	zero,-20(fp)
 10124e8:	00000d06 	br	1012520 <OSQQuery+0xf8>
        *pdest++ = *psrc++;
 10124ec:	e0bffa17 	ldw	r2,-24(fp)
 10124f0:	10c00003 	ldbu	r3,0(r2)
 10124f4:	e0bff917 	ldw	r2,-28(fp)
 10124f8:	10c00005 	stb	r3,0(r2)
 10124fc:	e0bff917 	ldw	r2,-28(fp)
 1012500:	10800044 	addi	r2,r2,1
 1012504:	e0bff915 	stw	r2,-28(fp)
 1012508:	e0bffa17 	ldw	r2,-24(fp)
 101250c:	10800044 	addi	r2,r2,1
 1012510:	e0bffa15 	stw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 1012514:	e0bffb03 	ldbu	r2,-20(fp)
 1012518:	10800044 	addi	r2,r2,1
 101251c:	e0bffb05 	stb	r2,-20(fp)
 1012520:	e0bffb03 	ldbu	r2,-20(fp)
 1012524:	108000f0 	cmpltui	r2,r2,3
 1012528:	103ff01e 	bne	r2,zero,10124ec <OSQQuery+0xc4>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
 101252c:	e0bffd17 	ldw	r2,-12(fp)
 1012530:	10800117 	ldw	r2,4(r2)
 1012534:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
 1012538:	e0bffc17 	ldw	r2,-16(fp)
 101253c:	1080058b 	ldhu	r2,22(r2)
 1012540:	10bfffcc 	andi	r2,r2,65535
 1012544:	1005003a 	cmpeq	r2,r2,zero
 1012548:	1000061e 	bne	r2,zero,1012564 <OSQQuery+0x13c>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
 101254c:	e0bffc17 	ldw	r2,-16(fp)
 1012550:	10800417 	ldw	r2,16(r2)
 1012554:	10c00017 	ldw	r3,0(r2)
 1012558:	e0bffe17 	ldw	r2,-8(fp)
 101255c:	10c00015 	stw	r3,0(r2)
 1012560:	00000206 	br	101256c <OSQQuery+0x144>
    } else {
        p_q_data->OSMsg = (void *)0;
 1012564:	e0bffe17 	ldw	r2,-8(fp)
 1012568:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
 101256c:	e0bffc17 	ldw	r2,-16(fp)
 1012570:	10c0058b 	ldhu	r3,22(r2)
 1012574:	e0bffe17 	ldw	r2,-8(fp)
 1012578:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
 101257c:	e0bffc17 	ldw	r2,-16(fp)
 1012580:	10c0050b 	ldhu	r3,20(r2)
 1012584:	e0bffe17 	ldw	r2,-8(fp)
 1012588:	10c0018d 	sth	r3,6(r2)
 101258c:	e0bff817 	ldw	r2,-32(fp)
 1012590:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1012594:	e0bff617 	ldw	r2,-40(fp)
 1012598:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 101259c:	e03fff15 	stw	zero,-4(fp)
 10125a0:	e0bfff17 	ldw	r2,-4(fp)
}
 10125a4:	e037883a 	mov	sp,fp
 10125a8:	df000017 	ldw	fp,0(sp)
 10125ac:	dec00104 	addi	sp,sp,4
 10125b0:	f800283a 	ret

010125b4 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
 10125b4:	f811883a 	mov	r8,ra
 10125b8:	100c1d00 	call	100c1d0 <_mcount>
 10125bc:	403f883a 	mov	ra,r8
 10125c0:	defffb04 	addi	sp,sp,-20
 10125c4:	dfc00415 	stw	ra,16(sp)
 10125c8:	df000315 	stw	fp,12(sp)
 10125cc:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
 10125d0:	01004134 	movhi	r4,260
 10125d4:	2115e604 	addi	r4,r4,22424
 10125d8:	01407804 	movi	r5,480
 10125dc:	100e6640 	call	100e664 <OS_MemClr>
    pq1 = &OSQTbl[0];
 10125e0:	00804134 	movhi	r2,260
 10125e4:	1095e604 	addi	r2,r2,22424
 10125e8:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
 10125ec:	00804134 	movhi	r2,260
 10125f0:	1095ec04 	addi	r2,r2,22448
 10125f4:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 10125f8:	e03fff0d 	sth	zero,-4(fp)
 10125fc:	00000c06 	br	1012630 <OS_QInit+0x7c>
        pq1->OSQPtr = pq2;
 1012600:	e0fffe17 	ldw	r3,-8(fp)
 1012604:	e0bffd17 	ldw	r2,-12(fp)
 1012608:	18800015 	stw	r2,0(r3)
        pq1++;
 101260c:	e0bffe17 	ldw	r2,-8(fp)
 1012610:	10800604 	addi	r2,r2,24
 1012614:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
 1012618:	e0bffd17 	ldw	r2,-12(fp)
 101261c:	10800604 	addi	r2,r2,24
 1012620:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 1012624:	e0bfff0b 	ldhu	r2,-4(fp)
 1012628:	10800044 	addi	r2,r2,1
 101262c:	e0bfff0d 	sth	r2,-4(fp)
 1012630:	e0bfff0b 	ldhu	r2,-4(fp)
 1012634:	108004f0 	cmpltui	r2,r2,19
 1012638:	103ff11e 	bne	r2,zero,1012600 <OS_QInit+0x4c>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
 101263c:	e0bffe17 	ldw	r2,-8(fp)
 1012640:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
 1012644:	00c040f4 	movhi	r3,259
 1012648:	18d70404 	addi	r3,r3,23568
 101264c:	00804134 	movhi	r2,260
 1012650:	1095e604 	addi	r2,r2,22424
 1012654:	18800015 	stw	r2,0(r3)
#endif
}
 1012658:	e037883a 	mov	sp,fp
 101265c:	dfc00117 	ldw	ra,4(sp)
 1012660:	df000017 	ldw	fp,0(sp)
 1012664:	dec00204 	addi	sp,sp,8
 1012668:	f800283a 	ret

0101266c <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
 101266c:	f811883a 	mov	r8,ra
 1012670:	100c1d00 	call	100c1d0 <_mcount>
 1012674:	403f883a 	mov	ra,r8
 1012678:	defff904 	addi	sp,sp,-28
 101267c:	df000615 	stw	fp,24(sp)
 1012680:	df000604 	addi	fp,sp,24
 1012684:	e13ffe15 	stw	r4,-8(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 1012688:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 101268c:	e0bffe17 	ldw	r2,-8(fp)
 1012690:	1004c03a 	cmpne	r2,r2,zero
 1012694:	1000021e 	bne	r2,zero,10126a0 <OSSemAccept+0x34>
        return (0);
 1012698:	e03fff15 	stw	zero,-4(fp)
 101269c:	00002106 	br	1012724 <OSSemAccept+0xb8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 10126a0:	e0bffe17 	ldw	r2,-8(fp)
 10126a4:	10800003 	ldbu	r2,0(r2)
 10126a8:	10803fcc 	andi	r2,r2,255
 10126ac:	108000e0 	cmpeqi	r2,r2,3
 10126b0:	1000021e 	bne	r2,zero,10126bc <OSSemAccept+0x50>
        return (0);
 10126b4:	e03fff15 	stw	zero,-4(fp)
 10126b8:	00001a06 	br	1012724 <OSSemAccept+0xb8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10126bc:	0005303a 	rdctl	r2,status
 10126c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10126c4:	e0fffb17 	ldw	r3,-20(fp)
 10126c8:	00bfff84 	movi	r2,-2
 10126cc:	1884703a 	and	r2,r3,r2
 10126d0:	1001703a 	wrctl	status,r2
  
  return context;
 10126d4:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 10126d8:	e0bffc15 	stw	r2,-16(fp)
    cnt = pevent->OSEventCnt;
 10126dc:	e0bffe17 	ldw	r2,-8(fp)
 10126e0:	1080020b 	ldhu	r2,8(r2)
 10126e4:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
 10126e8:	e0bffd0b 	ldhu	r2,-12(fp)
 10126ec:	1005003a 	cmpeq	r2,r2,zero
 10126f0:	1000061e 	bne	r2,zero,101270c <OSSemAccept+0xa0>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
 10126f4:	e0bffe17 	ldw	r2,-8(fp)
 10126f8:	1080020b 	ldhu	r2,8(r2)
 10126fc:	10bfffc4 	addi	r2,r2,-1
 1012700:	1007883a 	mov	r3,r2
 1012704:	e0bffe17 	ldw	r2,-8(fp)
 1012708:	10c0020d 	sth	r3,8(r2)
 101270c:	e0bffc17 	ldw	r2,-16(fp)
 1012710:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1012714:	e0bffa17 	ldw	r2,-24(fp)
 1012718:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
 101271c:	e0bffd0b 	ldhu	r2,-12(fp)
 1012720:	e0bfff15 	stw	r2,-4(fp)
 1012724:	e0bfff17 	ldw	r2,-4(fp)
}
 1012728:	e037883a 	mov	sp,fp
 101272c:	df000017 	ldw	fp,0(sp)
 1012730:	dec00104 	addi	sp,sp,4
 1012734:	f800283a 	ret

01012738 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
 1012738:	f811883a 	mov	r8,ra
 101273c:	100c1d00 	call	100c1d0 <_mcount>
 1012740:	403f883a 	mov	ra,r8
 1012744:	defff804 	addi	sp,sp,-32
 1012748:	dfc00715 	stw	ra,28(sp)
 101274c:	df000615 	stw	fp,24(sp)
 1012750:	df000604 	addi	fp,sp,24
 1012754:	e13ffe0d 	sth	r4,-8(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 1012758:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 101275c:	008040f4 	movhi	r2,259
 1012760:	10970704 	addi	r2,r2,23580
 1012764:	10800003 	ldbu	r2,0(r2)
 1012768:	10803fcc 	andi	r2,r2,255
 101276c:	1005003a 	cmpeq	r2,r2,zero
 1012770:	1000021e 	bne	r2,zero,101277c <OSSemCreate+0x44>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
 1012774:	e03fff15 	stw	zero,-4(fp)
 1012778:	00003106 	br	1012840 <OSSemCreate+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101277c:	0005303a 	rdctl	r2,status
 1012780:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1012784:	e0fffb17 	ldw	r3,-20(fp)
 1012788:	00bfff84 	movi	r2,-2
 101278c:	1884703a 	and	r2,r3,r2
 1012790:	1001703a 	wrctl	status,r2
  
  return context;
 1012794:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 1012798:	e0bffc15 	stw	r2,-16(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
 101279c:	008040f4 	movhi	r2,259
 10127a0:	10970604 	addi	r2,r2,23576
 10127a4:	10800017 	ldw	r2,0(r2)
 10127a8:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
 10127ac:	008040f4 	movhi	r2,259
 10127b0:	10970604 	addi	r2,r2,23576
 10127b4:	10800017 	ldw	r2,0(r2)
 10127b8:	1005003a 	cmpeq	r2,r2,zero
 10127bc:	1000081e 	bne	r2,zero,10127e0 <OSSemCreate+0xa8>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 10127c0:	008040f4 	movhi	r2,259
 10127c4:	10970604 	addi	r2,r2,23576
 10127c8:	10800017 	ldw	r2,0(r2)
 10127cc:	10800117 	ldw	r2,4(r2)
 10127d0:	1007883a 	mov	r3,r2
 10127d4:	008040f4 	movhi	r2,259
 10127d8:	10970604 	addi	r2,r2,23576
 10127dc:	10c00015 	stw	r3,0(r2)
 10127e0:	e0bffc17 	ldw	r2,-16(fp)
 10127e4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10127e8:	e0bffa17 	ldw	r2,-24(fp)
 10127ec:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
 10127f0:	e0bffd17 	ldw	r2,-12(fp)
 10127f4:	1005003a 	cmpeq	r2,r2,zero
 10127f8:	10000f1e 	bne	r2,zero,1012838 <OSSemCreate+0x100>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
 10127fc:	e0fffd17 	ldw	r3,-12(fp)
 1012800:	008000c4 	movi	r2,3
 1012804:	18800005 	stb	r2,0(r3)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
 1012808:	e0fffd17 	ldw	r3,-12(fp)
 101280c:	e0bffe0b 	ldhu	r2,-8(fp)
 1012810:	1880020d 	sth	r2,8(r3)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
 1012814:	e0bffd17 	ldw	r2,-12(fp)
 1012818:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
 101281c:	e0fffd17 	ldw	r3,-12(fp)
 1012820:	00800fc4 	movi	r2,63
 1012824:	18800385 	stb	r2,14(r3)
        pevent->OSEventName[1] = OS_ASCII_NUL;
 1012828:	e0bffd17 	ldw	r2,-12(fp)
 101282c:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
 1012830:	e13ffd17 	ldw	r4,-12(fp)
 1012834:	100e2440 	call	100e244 <OS_EventWaitListInit>
    }
    return (pevent);
 1012838:	e0bffd17 	ldw	r2,-12(fp)
 101283c:	e0bfff15 	stw	r2,-4(fp)
 1012840:	e0bfff17 	ldw	r2,-4(fp)
}
 1012844:	e037883a 	mov	sp,fp
 1012848:	dfc00117 	ldw	ra,4(sp)
 101284c:	df000017 	ldw	fp,0(sp)
 1012850:	dec00204 	addi	sp,sp,8
 1012854:	f800283a 	ret

01012858 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 1012858:	f811883a 	mov	r8,ra
 101285c:	100c1d00 	call	100c1d0 <_mcount>
 1012860:	403f883a 	mov	ra,r8
 1012864:	defff104 	addi	sp,sp,-60
 1012868:	dfc00e15 	stw	ra,56(sp)
 101286c:	df000d15 	stw	fp,52(sp)
 1012870:	df000d04 	addi	fp,sp,52
 1012874:	e13ffb15 	stw	r4,-20(fp)
 1012878:	e1bffd15 	stw	r6,-12(fp)
 101287c:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 1012880:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 1012884:	e0bffd17 	ldw	r2,-12(fp)
 1012888:	1004c03a 	cmpne	r2,r2,zero
 101288c:	1000031e 	bne	r2,zero,101289c <OSSemDel+0x44>
        return (pevent);
 1012890:	e0bffb17 	ldw	r2,-20(fp)
 1012894:	e0bfff15 	stw	r2,-4(fp)
 1012898:	00009406 	br	1012aec <OSSemDel+0x294>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 101289c:	e0bffb17 	ldw	r2,-20(fp)
 10128a0:	1004c03a 	cmpne	r2,r2,zero
 10128a4:	1000061e 	bne	r2,zero,10128c0 <OSSemDel+0x68>
        *perr = OS_ERR_PEVENT_NULL;
 10128a8:	e0fffd17 	ldw	r3,-12(fp)
 10128ac:	00800104 	movi	r2,4
 10128b0:	18800005 	stb	r2,0(r3)
        return (pevent);
 10128b4:	e0fffb17 	ldw	r3,-20(fp)
 10128b8:	e0ffff15 	stw	r3,-4(fp)
 10128bc:	00008b06 	br	1012aec <OSSemDel+0x294>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 10128c0:	e0bffb17 	ldw	r2,-20(fp)
 10128c4:	10800003 	ldbu	r2,0(r2)
 10128c8:	10803fcc 	andi	r2,r2,255
 10128cc:	108000e0 	cmpeqi	r2,r2,3
 10128d0:	1000061e 	bne	r2,zero,10128ec <OSSemDel+0x94>
        *perr = OS_ERR_EVENT_TYPE;
 10128d4:	e0fffd17 	ldw	r3,-12(fp)
 10128d8:	00800044 	movi	r2,1
 10128dc:	18800005 	stb	r2,0(r3)
        return (pevent);
 10128e0:	e0bffb17 	ldw	r2,-20(fp)
 10128e4:	e0bfff15 	stw	r2,-4(fp)
 10128e8:	00008006 	br	1012aec <OSSemDel+0x294>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 10128ec:	008040f4 	movhi	r2,259
 10128f0:	10970704 	addi	r2,r2,23580
 10128f4:	10800003 	ldbu	r2,0(r2)
 10128f8:	10803fcc 	andi	r2,r2,255
 10128fc:	1005003a 	cmpeq	r2,r2,zero
 1012900:	1000061e 	bne	r2,zero,101291c <OSSemDel+0xc4>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
 1012904:	e0fffd17 	ldw	r3,-12(fp)
 1012908:	008003c4 	movi	r2,15
 101290c:	18800005 	stb	r2,0(r3)
        return (pevent);
 1012910:	e0fffb17 	ldw	r3,-20(fp)
 1012914:	e0ffff15 	stw	r3,-4(fp)
 1012918:	00007406 	br	1012aec <OSSemDel+0x294>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101291c:	0005303a 	rdctl	r2,status
 1012920:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1012924:	e0fff717 	ldw	r3,-36(fp)
 1012928:	00bfff84 	movi	r2,-2
 101292c:	1884703a 	and	r2,r3,r2
 1012930:	1001703a 	wrctl	status,r2
  
  return context;
 1012934:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 1012938:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
 101293c:	e0bffb17 	ldw	r2,-20(fp)
 1012940:	10800283 	ldbu	r2,10(r2)
 1012944:	10803fcc 	andi	r2,r2,255
 1012948:	1005003a 	cmpeq	r2,r2,zero
 101294c:	1000031e 	bne	r2,zero,101295c <OSSemDel+0x104>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 1012950:	00800044 	movi	r2,1
 1012954:	e0bffa05 	stb	r2,-24(fp)
 1012958:	00000106 	br	1012960 <OSSemDel+0x108>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 101295c:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
 1012960:	e0bffc03 	ldbu	r2,-16(fp)
 1012964:	e0bffe15 	stw	r2,-8(fp)
 1012968:	e0fffe17 	ldw	r3,-8(fp)
 101296c:	1805003a 	cmpeq	r2,r3,zero
 1012970:	1000041e 	bne	r2,zero,1012984 <OSSemDel+0x12c>
 1012974:	e0fffe17 	ldw	r3,-8(fp)
 1012978:	18800060 	cmpeqi	r2,r3,1
 101297c:	10002d1e 	bne	r2,zero,1012a34 <OSSemDel+0x1dc>
 1012980:	00004f06 	br	1012ac0 <OSSemDel+0x268>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
 1012984:	e0bffa03 	ldbu	r2,-24(fp)
 1012988:	1004c03a 	cmpne	r2,r2,zero
 101298c:	10001a1e 	bne	r2,zero,10129f8 <OSSemDel+0x1a0>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 1012990:	e0fffb17 	ldw	r3,-20(fp)
 1012994:	00800fc4 	movi	r2,63
 1012998:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 101299c:	e0bffb17 	ldw	r2,-20(fp)
 10129a0:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 10129a4:	e0bffb17 	ldw	r2,-20(fp)
 10129a8:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 10129ac:	008040f4 	movhi	r2,259
 10129b0:	10970604 	addi	r2,r2,23576
 10129b4:	10c00017 	ldw	r3,0(r2)
 10129b8:	e0bffb17 	ldw	r2,-20(fp)
 10129bc:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 10129c0:	e0bffb17 	ldw	r2,-20(fp)
 10129c4:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 10129c8:	00c040f4 	movhi	r3,259
 10129cc:	18d70604 	addi	r3,r3,23576
 10129d0:	e0bffb17 	ldw	r2,-20(fp)
 10129d4:	18800015 	stw	r2,0(r3)
 10129d8:	e0bff817 	ldw	r2,-32(fp)
 10129dc:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10129e0:	e0bff617 	ldw	r2,-40(fp)
 10129e4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 10129e8:	e0bffd17 	ldw	r2,-12(fp)
 10129ec:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
 10129f0:	e03ff915 	stw	zero,-28(fp)
 10129f4:	00003b06 	br	1012ae4 <OSSemDel+0x28c>
 10129f8:	e0bff817 	ldw	r2,-32(fp)
 10129fc:	e0bff515 	stw	r2,-44(fp)
 1012a00:	e0bff517 	ldw	r2,-44(fp)
 1012a04:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 1012a08:	e0fffd17 	ldw	r3,-12(fp)
 1012a0c:	00801244 	movi	r2,73
 1012a10:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
 1012a14:	e0bffb17 	ldw	r2,-20(fp)
 1012a18:	e0bff915 	stw	r2,-28(fp)
             }
             break;
 1012a1c:	00003106 	br	1012ae4 <OSSemDel+0x28c>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 1012a20:	e13ffb17 	ldw	r4,-20(fp)
 1012a24:	000b883a 	mov	r5,zero
 1012a28:	01800044 	movi	r6,1
 1012a2c:	000f883a 	mov	r7,zero
 1012a30:	100dc540 	call	100dc54 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
 1012a34:	e0bffb17 	ldw	r2,-20(fp)
 1012a38:	10800283 	ldbu	r2,10(r2)
 1012a3c:	10803fcc 	andi	r2,r2,255
 1012a40:	1004c03a 	cmpne	r2,r2,zero
 1012a44:	103ff61e 	bne	r2,zero,1012a20 <OSSemDel+0x1c8>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 1012a48:	e0fffb17 	ldw	r3,-20(fp)
 1012a4c:	00800fc4 	movi	r2,63
 1012a50:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 1012a54:	e0bffb17 	ldw	r2,-20(fp)
 1012a58:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 1012a5c:	e0bffb17 	ldw	r2,-20(fp)
 1012a60:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 1012a64:	008040f4 	movhi	r2,259
 1012a68:	10970604 	addi	r2,r2,23576
 1012a6c:	10c00017 	ldw	r3,0(r2)
 1012a70:	e0bffb17 	ldw	r2,-20(fp)
 1012a74:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 1012a78:	e0bffb17 	ldw	r2,-20(fp)
 1012a7c:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 1012a80:	00c040f4 	movhi	r3,259
 1012a84:	18d70604 	addi	r3,r3,23576
 1012a88:	e0bffb17 	ldw	r2,-20(fp)
 1012a8c:	18800015 	stw	r2,0(r3)
 1012a90:	e0bff817 	ldw	r2,-32(fp)
 1012a94:	e0bff415 	stw	r2,-48(fp)
 1012a98:	e0bff417 	ldw	r2,-48(fp)
 1012a9c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 1012aa0:	e0bffa03 	ldbu	r2,-24(fp)
 1012aa4:	10800058 	cmpnei	r2,r2,1
 1012aa8:	1000011e 	bne	r2,zero,1012ab0 <OSSemDel+0x258>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 1012aac:	100e73c0 	call	100e73c <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 1012ab0:	e0bffd17 	ldw	r2,-12(fp)
 1012ab4:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
 1012ab8:	e03ff915 	stw	zero,-28(fp)
             break;
 1012abc:	00000906 	br	1012ae4 <OSSemDel+0x28c>
 1012ac0:	e0bff817 	ldw	r2,-32(fp)
 1012ac4:	e0bff315 	stw	r2,-52(fp)
 1012ac8:	e0bff317 	ldw	r2,-52(fp)
 1012acc:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 1012ad0:	e0fffd17 	ldw	r3,-12(fp)
 1012ad4:	008001c4 	movi	r2,7
 1012ad8:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
 1012adc:	e0bffb17 	ldw	r2,-20(fp)
 1012ae0:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
 1012ae4:	e0bff917 	ldw	r2,-28(fp)
 1012ae8:	e0bfff15 	stw	r2,-4(fp)
 1012aec:	e0bfff17 	ldw	r2,-4(fp)
}
 1012af0:	e037883a 	mov	sp,fp
 1012af4:	dfc00117 	ldw	ra,4(sp)
 1012af8:	df000017 	ldw	fp,0(sp)
 1012afc:	dec00204 	addi	sp,sp,8
 1012b00:	f800283a 	ret

01012b04 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 1012b04:	f811883a 	mov	r8,ra
 1012b08:	100c1d00 	call	100c1d0 <_mcount>
 1012b0c:	403f883a 	mov	ra,r8
 1012b10:	defff404 	addi	sp,sp,-48
 1012b14:	dfc00b15 	stw	ra,44(sp)
 1012b18:	df000a15 	stw	fp,40(sp)
 1012b1c:	df000a04 	addi	fp,sp,40
 1012b20:	e13ffc15 	stw	r4,-16(fp)
 1012b24:	e1bffe15 	stw	r6,-8(fp)
 1012b28:	e17ffd0d 	sth	r5,-12(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 1012b2c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 1012b30:	e0bffe17 	ldw	r2,-8(fp)
 1012b34:	1005003a 	cmpeq	r2,r2,zero
 1012b38:	10008f1e 	bne	r2,zero,1012d78 <OSSemPend+0x274>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 1012b3c:	e0bffc17 	ldw	r2,-16(fp)
 1012b40:	1004c03a 	cmpne	r2,r2,zero
 1012b44:	1000041e 	bne	r2,zero,1012b58 <OSSemPend+0x54>
        *perr = OS_ERR_PEVENT_NULL;
 1012b48:	e0fffe17 	ldw	r3,-8(fp)
 1012b4c:	00800104 	movi	r2,4
 1012b50:	18800005 	stb	r2,0(r3)
        return;
 1012b54:	00008806 	br	1012d78 <OSSemPend+0x274>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 1012b58:	e0bffc17 	ldw	r2,-16(fp)
 1012b5c:	10800003 	ldbu	r2,0(r2)
 1012b60:	10803fcc 	andi	r2,r2,255
 1012b64:	108000e0 	cmpeqi	r2,r2,3
 1012b68:	1000041e 	bne	r2,zero,1012b7c <OSSemPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 1012b6c:	e0fffe17 	ldw	r3,-8(fp)
 1012b70:	00800044 	movi	r2,1
 1012b74:	18800005 	stb	r2,0(r3)
        return;
 1012b78:	00007f06 	br	1012d78 <OSSemPend+0x274>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
 1012b7c:	008040f4 	movhi	r2,259
 1012b80:	10970704 	addi	r2,r2,23580
 1012b84:	10800003 	ldbu	r2,0(r2)
 1012b88:	10803fcc 	andi	r2,r2,255
 1012b8c:	1005003a 	cmpeq	r2,r2,zero
 1012b90:	1000041e 	bne	r2,zero,1012ba4 <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 1012b94:	e0fffe17 	ldw	r3,-8(fp)
 1012b98:	00800084 	movi	r2,2
 1012b9c:	18800005 	stb	r2,0(r3)
        return;
 1012ba0:	00007506 	br	1012d78 <OSSemPend+0x274>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
 1012ba4:	008040f4 	movhi	r2,259
 1012ba8:	1096f604 	addi	r2,r2,23512
 1012bac:	10800003 	ldbu	r2,0(r2)
 1012bb0:	10803fcc 	andi	r2,r2,255
 1012bb4:	1005003a 	cmpeq	r2,r2,zero
 1012bb8:	1000041e 	bne	r2,zero,1012bcc <OSSemPend+0xc8>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 1012bbc:	e0fffe17 	ldw	r3,-8(fp)
 1012bc0:	00800344 	movi	r2,13
 1012bc4:	18800005 	stb	r2,0(r3)
        return;
 1012bc8:	00006b06 	br	1012d78 <OSSemPend+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1012bcc:	0005303a 	rdctl	r2,status
 1012bd0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1012bd4:	e0fffa17 	ldw	r3,-24(fp)
 1012bd8:	00bfff84 	movi	r2,-2
 1012bdc:	1884703a 	and	r2,r3,r2
 1012be0:	1001703a 	wrctl	status,r2
  
  return context;
 1012be4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 1012be8:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
 1012bec:	e0bffc17 	ldw	r2,-16(fp)
 1012bf0:	1080020b 	ldhu	r2,8(r2)
 1012bf4:	10bfffcc 	andi	r2,r2,65535
 1012bf8:	1005003a 	cmpeq	r2,r2,zero
 1012bfc:	10000d1e 	bne	r2,zero,1012c34 <OSSemPend+0x130>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
 1012c00:	e0bffc17 	ldw	r2,-16(fp)
 1012c04:	1080020b 	ldhu	r2,8(r2)
 1012c08:	10bfffc4 	addi	r2,r2,-1
 1012c0c:	1007883a 	mov	r3,r2
 1012c10:	e0bffc17 	ldw	r2,-16(fp)
 1012c14:	10c0020d 	sth	r3,8(r2)
 1012c18:	e0bffb17 	ldw	r2,-20(fp)
 1012c1c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1012c20:	e0bff917 	ldw	r2,-28(fp)
 1012c24:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 1012c28:	e0bffe17 	ldw	r2,-8(fp)
 1012c2c:	10000005 	stb	zero,0(r2)
        return;
 1012c30:	00005106 	br	1012d78 <OSSemPend+0x274>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
 1012c34:	008040f4 	movhi	r2,259
 1012c38:	10970804 	addi	r2,r2,23584
 1012c3c:	10c00017 	ldw	r3,0(r2)
 1012c40:	008040f4 	movhi	r2,259
 1012c44:	10970804 	addi	r2,r2,23584
 1012c48:	10800017 	ldw	r2,0(r2)
 1012c4c:	10800c03 	ldbu	r2,48(r2)
 1012c50:	10800054 	ori	r2,r2,1
 1012c54:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 1012c58:	008040f4 	movhi	r2,259
 1012c5c:	10970804 	addi	r2,r2,23584
 1012c60:	10800017 	ldw	r2,0(r2)
 1012c64:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
 1012c68:	008040f4 	movhi	r2,259
 1012c6c:	10970804 	addi	r2,r2,23584
 1012c70:	10c00017 	ldw	r3,0(r2)
 1012c74:	e0bffd0b 	ldhu	r2,-12(fp)
 1012c78:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 1012c7c:	e13ffc17 	ldw	r4,-16(fp)
 1012c80:	100ddf40 	call	100ddf4 <OS_EventTaskWait>
 1012c84:	e0bffb17 	ldw	r2,-20(fp)
 1012c88:	e0bff815 	stw	r2,-32(fp)
 1012c8c:	e0bff817 	ldw	r2,-32(fp)
 1012c90:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
 1012c94:	100e73c0 	call	100e73c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1012c98:	0005303a 	rdctl	r2,status
 1012c9c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1012ca0:	e0fff717 	ldw	r3,-36(fp)
 1012ca4:	00bfff84 	movi	r2,-2
 1012ca8:	1884703a 	and	r2,r3,r2
 1012cac:	1001703a 	wrctl	status,r2
  
  return context;
 1012cb0:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
 1012cb4:	e0bffb15 	stw	r2,-20(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 1012cb8:	008040f4 	movhi	r2,259
 1012cbc:	10970804 	addi	r2,r2,23584
 1012cc0:	10800017 	ldw	r2,0(r2)
 1012cc4:	10800c43 	ldbu	r2,49(r2)
 1012cc8:	10803fcc 	andi	r2,r2,255
 1012ccc:	e0bfff15 	stw	r2,-4(fp)
 1012cd0:	e0ffff17 	ldw	r3,-4(fp)
 1012cd4:	1805003a 	cmpeq	r2,r3,zero
 1012cd8:	1000041e 	bne	r2,zero,1012cec <OSSemPend+0x1e8>
 1012cdc:	e0ffff17 	ldw	r3,-4(fp)
 1012ce0:	188000a0 	cmpeqi	r2,r3,2
 1012ce4:	1000041e 	bne	r2,zero,1012cf8 <OSSemPend+0x1f4>
 1012ce8:	00000706 	br	1012d08 <OSSemPend+0x204>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
 1012cec:	e0bffe17 	ldw	r2,-8(fp)
 1012cf0:	10000005 	stb	zero,0(r2)
             break;
 1012cf4:	00000c06 	br	1012d28 <OSSemPend+0x224>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 1012cf8:	e0fffe17 	ldw	r3,-8(fp)
 1012cfc:	00800384 	movi	r2,14
 1012d00:	18800005 	stb	r2,0(r3)
             break;
 1012d04:	00000806 	br	1012d28 <OSSemPend+0x224>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
 1012d08:	008040f4 	movhi	r2,259
 1012d0c:	10970804 	addi	r2,r2,23584
 1012d10:	11000017 	ldw	r4,0(r2)
 1012d14:	e17ffc17 	ldw	r5,-16(fp)
 1012d18:	100e0700 	call	100e070 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 1012d1c:	e0fffe17 	ldw	r3,-8(fp)
 1012d20:	00800284 	movi	r2,10
 1012d24:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 1012d28:	008040f4 	movhi	r2,259
 1012d2c:	10970804 	addi	r2,r2,23584
 1012d30:	10800017 	ldw	r2,0(r2)
 1012d34:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 1012d38:	008040f4 	movhi	r2,259
 1012d3c:	10970804 	addi	r2,r2,23584
 1012d40:	10800017 	ldw	r2,0(r2)
 1012d44:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 1012d48:	008040f4 	movhi	r2,259
 1012d4c:	10970804 	addi	r2,r2,23584
 1012d50:	10800017 	ldw	r2,0(r2)
 1012d54:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 1012d58:	008040f4 	movhi	r2,259
 1012d5c:	10970804 	addi	r2,r2,23584
 1012d60:	10800017 	ldw	r2,0(r2)
 1012d64:	10000815 	stw	zero,32(r2)
 1012d68:	e0bffb17 	ldw	r2,-20(fp)
 1012d6c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1012d70:	e0bff617 	ldw	r2,-40(fp)
 1012d74:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
 1012d78:	e037883a 	mov	sp,fp
 1012d7c:	dfc00117 	ldw	ra,4(sp)
 1012d80:	df000017 	ldw	fp,0(sp)
 1012d84:	dec00204 	addi	sp,sp,8
 1012d88:	f800283a 	ret

01012d8c <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 1012d8c:	f811883a 	mov	r8,ra
 1012d90:	100c1d00 	call	100c1d0 <_mcount>
 1012d94:	403f883a 	mov	ra,r8
 1012d98:	defff504 	addi	sp,sp,-44
 1012d9c:	dfc00a15 	stw	ra,40(sp)
 1012da0:	df000915 	stw	fp,36(sp)
 1012da4:	df000904 	addi	fp,sp,36
 1012da8:	e13ffc15 	stw	r4,-16(fp)
 1012dac:	e1bffe15 	stw	r6,-8(fp)
 1012db0:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 1012db4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 1012db8:	e0bffe17 	ldw	r2,-8(fp)
 1012dbc:	1004c03a 	cmpne	r2,r2,zero
 1012dc0:	1000021e 	bne	r2,zero,1012dcc <OSSemPendAbort+0x40>
        return (0);
 1012dc4:	e03fff15 	stw	zero,-4(fp)
 1012dc8:	00004c06 	br	1012efc <OSSemPendAbort+0x170>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 1012dcc:	e0bffc17 	ldw	r2,-16(fp)
 1012dd0:	1004c03a 	cmpne	r2,r2,zero
 1012dd4:	1000051e 	bne	r2,zero,1012dec <OSSemPendAbort+0x60>
        *perr = OS_ERR_PEVENT_NULL;
 1012dd8:	e0fffe17 	ldw	r3,-8(fp)
 1012ddc:	00800104 	movi	r2,4
 1012de0:	18800005 	stb	r2,0(r3)
        return (0);
 1012de4:	e03fff15 	stw	zero,-4(fp)
 1012de8:	00004406 	br	1012efc <OSSemPendAbort+0x170>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 1012dec:	e0bffc17 	ldw	r2,-16(fp)
 1012df0:	10800003 	ldbu	r2,0(r2)
 1012df4:	10803fcc 	andi	r2,r2,255
 1012df8:	108000e0 	cmpeqi	r2,r2,3
 1012dfc:	1000051e 	bne	r2,zero,1012e14 <OSSemPendAbort+0x88>
        *perr = OS_ERR_EVENT_TYPE;
 1012e00:	e0fffe17 	ldw	r3,-8(fp)
 1012e04:	00800044 	movi	r2,1
 1012e08:	18800005 	stb	r2,0(r3)
        return (0);
 1012e0c:	e03fff15 	stw	zero,-4(fp)
 1012e10:	00003a06 	br	1012efc <OSSemPendAbort+0x170>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1012e14:	0005303a 	rdctl	r2,status
 1012e18:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1012e1c:	e0fff917 	ldw	r3,-28(fp)
 1012e20:	00bfff84 	movi	r2,-2
 1012e24:	1884703a 	and	r2,r3,r2
 1012e28:	1001703a 	wrctl	status,r2
  
  return context;
 1012e2c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 1012e30:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
 1012e34:	e0bffc17 	ldw	r2,-16(fp)
 1012e38:	10800283 	ldbu	r2,10(r2)
 1012e3c:	10803fcc 	andi	r2,r2,255
 1012e40:	1005003a 	cmpeq	r2,r2,zero
 1012e44:	1000261e 	bne	r2,zero,1012ee0 <OSSemPendAbort+0x154>
        nbr_tasks = 0;
 1012e48:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
 1012e4c:	e0bffd03 	ldbu	r2,-12(fp)
 1012e50:	10800060 	cmpeqi	r2,r2,1
 1012e54:	1000091e 	bne	r2,zero,1012e7c <OSSemPendAbort+0xf0>
 1012e58:	00000e06 	br	1012e94 <OSSemPendAbort+0x108>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 1012e5c:	e13ffc17 	ldw	r4,-16(fp)
 1012e60:	000b883a 	mov	r5,zero
 1012e64:	01800044 	movi	r6,1
 1012e68:	01c00084 	movi	r7,2
 1012e6c:	100dc540 	call	100dc54 <OS_EventTaskRdy>
                     nbr_tasks++;
 1012e70:	e0bffb03 	ldbu	r2,-20(fp)
 1012e74:	10800044 	addi	r2,r2,1
 1012e78:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
 1012e7c:	e0bffc17 	ldw	r2,-16(fp)
 1012e80:	10800283 	ldbu	r2,10(r2)
 1012e84:	10803fcc 	andi	r2,r2,255
 1012e88:	1004c03a 	cmpne	r2,r2,zero
 1012e8c:	103ff31e 	bne	r2,zero,1012e5c <OSSemPendAbort+0xd0>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 1012e90:	00000806 	br	1012eb4 <OSSemPendAbort+0x128>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 1012e94:	e13ffc17 	ldw	r4,-16(fp)
 1012e98:	000b883a 	mov	r5,zero
 1012e9c:	01800044 	movi	r6,1
 1012ea0:	01c00084 	movi	r7,2
 1012ea4:	100dc540 	call	100dc54 <OS_EventTaskRdy>
                 nbr_tasks++;
 1012ea8:	e0bffb03 	ldbu	r2,-20(fp)
 1012eac:	10800044 	addi	r2,r2,1
 1012eb0:	e0bffb05 	stb	r2,-20(fp)
 1012eb4:	e0bffa17 	ldw	r2,-24(fp)
 1012eb8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1012ebc:	e0bff817 	ldw	r2,-32(fp)
 1012ec0:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 1012ec4:	100e73c0 	call	100e73c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 1012ec8:	e0fffe17 	ldw	r3,-8(fp)
 1012ecc:	00800384 	movi	r2,14
 1012ed0:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
 1012ed4:	e0bffb03 	ldbu	r2,-20(fp)
 1012ed8:	e0bfff15 	stw	r2,-4(fp)
 1012edc:	00000706 	br	1012efc <OSSemPendAbort+0x170>
 1012ee0:	e0bffa17 	ldw	r2,-24(fp)
 1012ee4:	e0bff715 	stw	r2,-36(fp)
 1012ee8:	e0bff717 	ldw	r2,-36(fp)
 1012eec:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 1012ef0:	e0bffe17 	ldw	r2,-8(fp)
 1012ef4:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
 1012ef8:	e03fff15 	stw	zero,-4(fp)
 1012efc:	e0bfff17 	ldw	r2,-4(fp)
}
 1012f00:	e037883a 	mov	sp,fp
 1012f04:	dfc00117 	ldw	ra,4(sp)
 1012f08:	df000017 	ldw	fp,0(sp)
 1012f0c:	dec00204 	addi	sp,sp,8
 1012f10:	f800283a 	ret

01012f14 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
 1012f14:	f811883a 	mov	r8,ra
 1012f18:	100c1d00 	call	100c1d0 <_mcount>
 1012f1c:	403f883a 	mov	ra,r8
 1012f20:	defff704 	addi	sp,sp,-36
 1012f24:	dfc00815 	stw	ra,32(sp)
 1012f28:	df000715 	stw	fp,28(sp)
 1012f2c:	df000704 	addi	fp,sp,28
 1012f30:	e13ffe15 	stw	r4,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 1012f34:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 1012f38:	e0bffe17 	ldw	r2,-8(fp)
 1012f3c:	1004c03a 	cmpne	r2,r2,zero
 1012f40:	1000031e 	bne	r2,zero,1012f50 <OSSemPost+0x3c>
        return (OS_ERR_PEVENT_NULL);
 1012f44:	00800104 	movi	r2,4
 1012f48:	e0bfff15 	stw	r2,-4(fp)
 1012f4c:	00003806 	br	1013030 <OSSemPost+0x11c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 1012f50:	e0bffe17 	ldw	r2,-8(fp)
 1012f54:	10800003 	ldbu	r2,0(r2)
 1012f58:	10803fcc 	andi	r2,r2,255
 1012f5c:	108000e0 	cmpeqi	r2,r2,3
 1012f60:	1000031e 	bne	r2,zero,1012f70 <OSSemPost+0x5c>
        return (OS_ERR_EVENT_TYPE);
 1012f64:	00800044 	movi	r2,1
 1012f68:	e0bfff15 	stw	r2,-4(fp)
 1012f6c:	00003006 	br	1013030 <OSSemPost+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1012f70:	0005303a 	rdctl	r2,status
 1012f74:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1012f78:	e0fffc17 	ldw	r3,-16(fp)
 1012f7c:	00bfff84 	movi	r2,-2
 1012f80:	1884703a 	and	r2,r3,r2
 1012f84:	1001703a 	wrctl	status,r2
  
  return context;
 1012f88:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 1012f8c:	e0bffd15 	stw	r2,-12(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
 1012f90:	e0bffe17 	ldw	r2,-8(fp)
 1012f94:	10800283 	ldbu	r2,10(r2)
 1012f98:	10803fcc 	andi	r2,r2,255
 1012f9c:	1005003a 	cmpeq	r2,r2,zero
 1012fa0:	10000c1e 	bne	r2,zero,1012fd4 <OSSemPost+0xc0>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 1012fa4:	e13ffe17 	ldw	r4,-8(fp)
 1012fa8:	000b883a 	mov	r5,zero
 1012fac:	01800044 	movi	r6,1
 1012fb0:	000f883a 	mov	r7,zero
 1012fb4:	100dc540 	call	100dc54 <OS_EventTaskRdy>
 1012fb8:	e0bffd17 	ldw	r2,-12(fp)
 1012fbc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1012fc0:	e0bffb17 	ldw	r2,-20(fp)
 1012fc4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 1012fc8:	100e73c0 	call	100e73c <OS_Sched>
        return (OS_ERR_NONE);
 1012fcc:	e03fff15 	stw	zero,-4(fp)
 1012fd0:	00001706 	br	1013030 <OSSemPost+0x11c>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
 1012fd4:	e0bffe17 	ldw	r2,-8(fp)
 1012fd8:	1080020b 	ldhu	r2,8(r2)
 1012fdc:	10ffffcc 	andi	r3,r2,65535
 1012fe0:	00bfffd4 	movui	r2,65535
 1012fe4:	18800c26 	beq	r3,r2,1013018 <OSSemPost+0x104>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
 1012fe8:	e0bffe17 	ldw	r2,-8(fp)
 1012fec:	1080020b 	ldhu	r2,8(r2)
 1012ff0:	10800044 	addi	r2,r2,1
 1012ff4:	1007883a 	mov	r3,r2
 1012ff8:	e0bffe17 	ldw	r2,-8(fp)
 1012ffc:	10c0020d 	sth	r3,8(r2)
 1013000:	e0bffd17 	ldw	r2,-12(fp)
 1013004:	e0bffa15 	stw	r2,-24(fp)
 1013008:	e0bffa17 	ldw	r2,-24(fp)
 101300c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 1013010:	e03fff15 	stw	zero,-4(fp)
 1013014:	00000606 	br	1013030 <OSSemPost+0x11c>
 1013018:	e0bffd17 	ldw	r2,-12(fp)
 101301c:	e0bff915 	stw	r2,-28(fp)
 1013020:	e0bff917 	ldw	r2,-28(fp)
 1013024:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
 1013028:	00800c84 	movi	r2,50
 101302c:	e0bfff15 	stw	r2,-4(fp)
 1013030:	e0bfff17 	ldw	r2,-4(fp)
}
 1013034:	e037883a 	mov	sp,fp
 1013038:	dfc00117 	ldw	ra,4(sp)
 101303c:	df000017 	ldw	fp,0(sp)
 1013040:	dec00204 	addi	sp,sp,8
 1013044:	f800283a 	ret

01013048 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
 1013048:	f811883a 	mov	r8,ra
 101304c:	100c1d00 	call	100c1d0 <_mcount>
 1013050:	403f883a 	mov	ra,r8
 1013054:	defff604 	addi	sp,sp,-40
 1013058:	df000915 	stw	fp,36(sp)
 101305c:	df000904 	addi	fp,sp,36
 1013060:	e13ffd15 	stw	r4,-12(fp)
 1013064:	e17ffe15 	stw	r5,-8(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 1013068:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 101306c:	e0bffd17 	ldw	r2,-12(fp)
 1013070:	1004c03a 	cmpne	r2,r2,zero
 1013074:	1000031e 	bne	r2,zero,1013084 <OSSemQuery+0x3c>
        return (OS_ERR_PEVENT_NULL);
 1013078:	00800104 	movi	r2,4
 101307c:	e0bfff15 	stw	r2,-4(fp)
 1013080:	00003b06 	br	1013170 <OSSemQuery+0x128>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
 1013084:	e0bffe17 	ldw	r2,-8(fp)
 1013088:	1004c03a 	cmpne	r2,r2,zero
 101308c:	1000031e 	bne	r2,zero,101309c <OSSemQuery+0x54>
        return (OS_ERR_PDATA_NULL);
 1013090:	00800244 	movi	r2,9
 1013094:	e0bfff15 	stw	r2,-4(fp)
 1013098:	00003506 	br	1013170 <OSSemQuery+0x128>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 101309c:	e0bffd17 	ldw	r2,-12(fp)
 10130a0:	10800003 	ldbu	r2,0(r2)
 10130a4:	10803fcc 	andi	r2,r2,255
 10130a8:	108000e0 	cmpeqi	r2,r2,3
 10130ac:	1000031e 	bne	r2,zero,10130bc <OSSemQuery+0x74>
        return (OS_ERR_EVENT_TYPE);
 10130b0:	00800044 	movi	r2,1
 10130b4:	e0bfff15 	stw	r2,-4(fp)
 10130b8:	00002d06 	br	1013170 <OSSemQuery+0x128>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10130bc:	0005303a 	rdctl	r2,status
 10130c0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10130c4:	e0fff817 	ldw	r3,-32(fp)
 10130c8:	00bfff84 	movi	r2,-2
 10130cc:	1884703a 	and	r2,r3,r2
 10130d0:	1001703a 	wrctl	status,r2
  
  return context;
 10130d4:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
 10130d8:	e0bff915 	stw	r2,-28(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
 10130dc:	e0bffd17 	ldw	r2,-12(fp)
 10130e0:	10c00283 	ldbu	r3,10(r2)
 10130e4:	e0bffe17 	ldw	r2,-8(fp)
 10130e8:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
 10130ec:	e0bffd17 	ldw	r2,-12(fp)
 10130f0:	108002c4 	addi	r2,r2,11
 10130f4:	e0bffc15 	stw	r2,-16(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
 10130f8:	e0bffe17 	ldw	r2,-8(fp)
 10130fc:	10800084 	addi	r2,r2,2
 1013100:	e0bffb15 	stw	r2,-20(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 1013104:	e03ffa05 	stb	zero,-24(fp)
 1013108:	00000d06 	br	1013140 <OSSemQuery+0xf8>
        *pdest++ = *psrc++;
 101310c:	e0bffc17 	ldw	r2,-16(fp)
 1013110:	10c00003 	ldbu	r3,0(r2)
 1013114:	e0bffb17 	ldw	r2,-20(fp)
 1013118:	10c00005 	stb	r3,0(r2)
 101311c:	e0bffb17 	ldw	r2,-20(fp)
 1013120:	10800044 	addi	r2,r2,1
 1013124:	e0bffb15 	stw	r2,-20(fp)
 1013128:	e0bffc17 	ldw	r2,-16(fp)
 101312c:	10800044 	addi	r2,r2,1
 1013130:	e0bffc15 	stw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 1013134:	e0bffa03 	ldbu	r2,-24(fp)
 1013138:	10800044 	addi	r2,r2,1
 101313c:	e0bffa05 	stb	r2,-24(fp)
 1013140:	e0bffa03 	ldbu	r2,-24(fp)
 1013144:	108000f0 	cmpltui	r2,r2,3
 1013148:	103ff01e 	bne	r2,zero,101310c <OSSemQuery+0xc4>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
 101314c:	e0bffd17 	ldw	r2,-12(fp)
 1013150:	10c0020b 	ldhu	r3,8(r2)
 1013154:	e0bffe17 	ldw	r2,-8(fp)
 1013158:	10c0000d 	sth	r3,0(r2)
 101315c:	e0bff917 	ldw	r2,-28(fp)
 1013160:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1013164:	e0bff717 	ldw	r2,-36(fp)
 1013168:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 101316c:	e03fff15 	stw	zero,-4(fp)
 1013170:	e0bfff17 	ldw	r2,-4(fp)
}
 1013174:	e037883a 	mov	sp,fp
 1013178:	df000017 	ldw	fp,0(sp)
 101317c:	dec00104 	addi	sp,sp,4
 1013180:	f800283a 	ret

01013184 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
 1013184:	f811883a 	mov	r8,ra
 1013188:	100c1d00 	call	100c1d0 <_mcount>
 101318c:	403f883a 	mov	ra,r8
 1013190:	defff904 	addi	sp,sp,-28
 1013194:	df000615 	stw	fp,24(sp)
 1013198:	df000604 	addi	fp,sp,24
 101319c:	e13ffd15 	stw	r4,-12(fp)
 10131a0:	e1bfff15 	stw	r6,-4(fp)
 10131a4:	e17ffe0d 	sth	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 10131a8:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 10131ac:	e0bfff17 	ldw	r2,-4(fp)
 10131b0:	1005003a 	cmpeq	r2,r2,zero
 10131b4:	1000331e 	bne	r2,zero,1013284 <OSSemSet+0x100>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 10131b8:	e0bffd17 	ldw	r2,-12(fp)
 10131bc:	1004c03a 	cmpne	r2,r2,zero
 10131c0:	1000041e 	bne	r2,zero,10131d4 <OSSemSet+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 10131c4:	e0ffff17 	ldw	r3,-4(fp)
 10131c8:	00800104 	movi	r2,4
 10131cc:	18800005 	stb	r2,0(r3)
        return;
 10131d0:	00002c06 	br	1013284 <OSSemSet+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 10131d4:	e0bffd17 	ldw	r2,-12(fp)
 10131d8:	10800003 	ldbu	r2,0(r2)
 10131dc:	10803fcc 	andi	r2,r2,255
 10131e0:	108000e0 	cmpeqi	r2,r2,3
 10131e4:	1000041e 	bne	r2,zero,10131f8 <OSSemSet+0x74>
        *perr = OS_ERR_EVENT_TYPE;
 10131e8:	e0ffff17 	ldw	r3,-4(fp)
 10131ec:	00800044 	movi	r2,1
 10131f0:	18800005 	stb	r2,0(r3)
        return;
 10131f4:	00002306 	br	1013284 <OSSemSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10131f8:	0005303a 	rdctl	r2,status
 10131fc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1013200:	e0fffb17 	ldw	r3,-20(fp)
 1013204:	00bfff84 	movi	r2,-2
 1013208:	1884703a 	and	r2,r3,r2
 101320c:	1001703a 	wrctl	status,r2
  
  return context;
 1013210:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 1013214:	e0bffc15 	stw	r2,-16(fp)
    *perr = OS_ERR_NONE;
 1013218:	e0bfff17 	ldw	r2,-4(fp)
 101321c:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
 1013220:	e0bffd17 	ldw	r2,-12(fp)
 1013224:	1080020b 	ldhu	r2,8(r2)
 1013228:	10bfffcc 	andi	r2,r2,65535
 101322c:	1005003a 	cmpeq	r2,r2,zero
 1013230:	1000041e 	bne	r2,zero,1013244 <OSSemSet+0xc0>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
 1013234:	e0fffd17 	ldw	r3,-12(fp)
 1013238:	e0bffe0b 	ldhu	r2,-8(fp)
 101323c:	1880020d 	sth	r2,8(r3)
 1013240:	00000c06 	br	1013274 <OSSemSet+0xf0>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
 1013244:	e0bffd17 	ldw	r2,-12(fp)
 1013248:	10800283 	ldbu	r2,10(r2)
 101324c:	10803fcc 	andi	r2,r2,255
 1013250:	1004c03a 	cmpne	r2,r2,zero
 1013254:	1000041e 	bne	r2,zero,1013268 <OSSemSet+0xe4>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
 1013258:	e0fffd17 	ldw	r3,-12(fp)
 101325c:	e0bffe0b 	ldhu	r2,-8(fp)
 1013260:	1880020d 	sth	r2,8(r3)
 1013264:	00000306 	br	1013274 <OSSemSet+0xf0>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
 1013268:	e0ffff17 	ldw	r3,-4(fp)
 101326c:	00801244 	movi	r2,73
 1013270:	18800005 	stb	r2,0(r3)
 1013274:	e0bffc17 	ldw	r2,-16(fp)
 1013278:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101327c:	e0bffa17 	ldw	r2,-24(fp)
 1013280:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
 1013284:	e037883a 	mov	sp,fp
 1013288:	df000017 	ldw	fp,0(sp)
 101328c:	dec00104 	addi	sp,sp,4
 1013290:	f800283a 	ret

01013294 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
 1013294:	f811883a 	mov	r8,ra
 1013298:	100c1d00 	call	100c1d0 <_mcount>
 101329c:	403f883a 	mov	ra,r8
 10132a0:	defff004 	addi	sp,sp,-64
 10132a4:	dfc00f15 	stw	ra,60(sp)
 10132a8:	df000e15 	stw	fp,56(sp)
 10132ac:	df000e04 	addi	fp,sp,56
 10132b0:	e13ffd05 	stb	r4,-12(fp)
 10132b4:	e17ffe05 	stb	r5,-8(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
 10132b8:	e03ff715 	stw	zero,-36(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
 10132bc:	e0bffd03 	ldbu	r2,-12(fp)
 10132c0:	10800530 	cmpltui	r2,r2,20
 10132c4:	1000061e 	bne	r2,zero,10132e0 <OSTaskChangePrio+0x4c>
        if (oldprio != OS_PRIO_SELF) {
 10132c8:	e0bffd03 	ldbu	r2,-12(fp)
 10132cc:	10803fe0 	cmpeqi	r2,r2,255
 10132d0:	1000031e 	bne	r2,zero,10132e0 <OSTaskChangePrio+0x4c>
            return (OS_ERR_PRIO_INVALID);
 10132d4:	00800a84 	movi	r2,42
 10132d8:	e0bfff15 	stw	r2,-4(fp)
 10132dc:	00014706 	br	10137fc <OSTaskChangePrio+0x568>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
 10132e0:	e0bffe03 	ldbu	r2,-8(fp)
 10132e4:	10800530 	cmpltui	r2,r2,20
 10132e8:	1000031e 	bne	r2,zero,10132f8 <OSTaskChangePrio+0x64>
        return (OS_ERR_PRIO_INVALID);
 10132ec:	00800a84 	movi	r2,42
 10132f0:	e0bfff15 	stw	r2,-4(fp)
 10132f4:	00014106 	br	10137fc <OSTaskChangePrio+0x568>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10132f8:	0005303a 	rdctl	r2,status
 10132fc:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1013300:	e0fff617 	ldw	r3,-40(fp)
 1013304:	00bfff84 	movi	r2,-2
 1013308:	1884703a 	and	r2,r3,r2
 101330c:	1001703a 	wrctl	status,r2
  
  return context;
 1013310:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 1013314:	e0bff715 	stw	r2,-36(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
 1013318:	e0bffe03 	ldbu	r2,-8(fp)
 101331c:	00c04134 	movhi	r3,260
 1013320:	18de7204 	addi	r3,r3,31176
 1013324:	1085883a 	add	r2,r2,r2
 1013328:	1085883a 	add	r2,r2,r2
 101332c:	10c5883a 	add	r2,r2,r3
 1013330:	10800017 	ldw	r2,0(r2)
 1013334:	1005003a 	cmpeq	r2,r2,zero
 1013338:	1000071e 	bne	r2,zero,1013358 <OSTaskChangePrio+0xc4>
 101333c:	e0bff717 	ldw	r2,-36(fp)
 1013340:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1013344:	e0bff517 	ldw	r2,-44(fp)
 1013348:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
 101334c:	00800a04 	movi	r2,40
 1013350:	e0bfff15 	stw	r2,-4(fp)
 1013354:	00012906 	br	10137fc <OSTaskChangePrio+0x568>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
 1013358:	e0bffd03 	ldbu	r2,-12(fp)
 101335c:	10803fd8 	cmpnei	r2,r2,255
 1013360:	1000051e 	bne	r2,zero,1013378 <OSTaskChangePrio+0xe4>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
 1013364:	008040f4 	movhi	r2,259
 1013368:	10970804 	addi	r2,r2,23584
 101336c:	10800017 	ldw	r2,0(r2)
 1013370:	10800c83 	ldbu	r2,50(r2)
 1013374:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
 1013378:	e0bffd03 	ldbu	r2,-12(fp)
 101337c:	00c04134 	movhi	r3,260
 1013380:	18de7204 	addi	r3,r3,31176
 1013384:	1085883a 	add	r2,r2,r2
 1013388:	1085883a 	add	r2,r2,r2
 101338c:	10c5883a 	add	r2,r2,r3
 1013390:	10800017 	ldw	r2,0(r2)
 1013394:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
 1013398:	e0bffa17 	ldw	r2,-24(fp)
 101339c:	1004c03a 	cmpne	r2,r2,zero
 10133a0:	1000071e 	bne	r2,zero,10133c0 <OSTaskChangePrio+0x12c>
 10133a4:	e0bff717 	ldw	r2,-36(fp)
 10133a8:	e0bff415 	stw	r2,-48(fp)
 10133ac:	e0bff417 	ldw	r2,-48(fp)
 10133b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
 10133b4:	00800a44 	movi	r2,41
 10133b8:	e0bfff15 	stw	r2,-4(fp)
 10133bc:	00010f06 	br	10137fc <OSTaskChangePrio+0x568>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
 10133c0:	e0bffa17 	ldw	r2,-24(fp)
 10133c4:	10800058 	cmpnei	r2,r2,1
 10133c8:	1000071e 	bne	r2,zero,10133e8 <OSTaskChangePrio+0x154>
 10133cc:	e0bff717 	ldw	r2,-36(fp)
 10133d0:	e0bff315 	stw	r2,-52(fp)
 10133d4:	e0bff317 	ldw	r2,-52(fp)
 10133d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
 10133dc:	008010c4 	movi	r2,67
 10133e0:	e0bfff15 	stw	r2,-4(fp)
 10133e4:	00010506 	br	10137fc <OSTaskChangePrio+0x568>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
 10133e8:	e0bffe03 	ldbu	r2,-8(fp)
 10133ec:	1004d0fa 	srli	r2,r2,3
 10133f0:	e0bff985 	stb	r2,-26(fp)
    x_new                 = (INT8U)(newprio & 0x07);
 10133f4:	e0bffe03 	ldbu	r2,-8(fp)
 10133f8:	108001cc 	andi	r2,r2,7
 10133fc:	e0bff945 	stb	r2,-27(fp)
    bity_new              = (INT8U)(1 << y_new);
 1013400:	e0fff983 	ldbu	r3,-26(fp)
 1013404:	00800044 	movi	r2,1
 1013408:	10c4983a 	sll	r2,r2,r3
 101340c:	e0bff8c5 	stb	r2,-29(fp)
    bitx_new              = (INT8U)(1 << x_new);
 1013410:	e0fff943 	ldbu	r3,-27(fp)
 1013414:	00800044 	movi	r2,1
 1013418:	10c4983a 	sll	r2,r2,r3
 101341c:	e0bff885 	stb	r2,-30(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
 1013420:	e0bffd03 	ldbu	r2,-12(fp)
 1013424:	00c04134 	movhi	r3,260
 1013428:	18de7204 	addi	r3,r3,31176
 101342c:	1085883a 	add	r2,r2,r2
 1013430:	1085883a 	add	r2,r2,r2
 1013434:	10c5883a 	add	r2,r2,r3
 1013438:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
 101343c:	e0bffe03 	ldbu	r2,-8(fp)
 1013440:	00c04134 	movhi	r3,260
 1013444:	18de7204 	addi	r3,r3,31176
 1013448:	1085883a 	add	r2,r2,r2
 101344c:	1085883a 	add	r2,r2,r2
 1013450:	10c7883a 	add	r3,r2,r3
 1013454:	e0bffa17 	ldw	r2,-24(fp)
 1013458:	18800015 	stw	r2,0(r3)
    y_old                 =  ptcb->OSTCBY;
 101345c:	e0bffa17 	ldw	r2,-24(fp)
 1013460:	10800d03 	ldbu	r2,52(r2)
 1013464:	e0bff905 	stb	r2,-28(fp)
    bity_old              =  ptcb->OSTCBBitY;
 1013468:	e0bffa17 	ldw	r2,-24(fp)
 101346c:	10800d83 	ldbu	r2,54(r2)
 1013470:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
 1013474:	e0bffa17 	ldw	r2,-24(fp)
 1013478:	10800d43 	ldbu	r2,53(r2)
 101347c:	e0bff805 	stb	r2,-32(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
 1013480:	e0fff903 	ldbu	r3,-28(fp)
 1013484:	008040f4 	movhi	r2,259
 1013488:	10970544 	addi	r2,r2,23573
 101348c:	10c5883a 	add	r2,r2,r3
 1013490:	10c00003 	ldbu	r3,0(r2)
 1013494:	e0bff803 	ldbu	r2,-32(fp)
 1013498:	1884703a 	and	r2,r3,r2
 101349c:	10803fcc 	andi	r2,r2,255
 10134a0:	1005003a 	cmpeq	r2,r2,zero
 10134a4:	1000381e 	bne	r2,zero,1013588 <OSTaskChangePrio+0x2f4>
         OSRdyTbl[y_old] &= ~bitx_old;
 10134a8:	e13ff903 	ldbu	r4,-28(fp)
 10134ac:	e0fff903 	ldbu	r3,-28(fp)
 10134b0:	008040f4 	movhi	r2,259
 10134b4:	10970544 	addi	r2,r2,23573
 10134b8:	10c5883a 	add	r2,r2,r3
 10134bc:	10800003 	ldbu	r2,0(r2)
 10134c0:	1007883a 	mov	r3,r2
 10134c4:	e0bff803 	ldbu	r2,-32(fp)
 10134c8:	0084303a 	nor	r2,zero,r2
 10134cc:	1884703a 	and	r2,r3,r2
 10134d0:	1007883a 	mov	r3,r2
 10134d4:	008040f4 	movhi	r2,259
 10134d8:	10970544 	addi	r2,r2,23573
 10134dc:	1105883a 	add	r2,r2,r4
 10134e0:	10c00005 	stb	r3,0(r2)
         if (OSRdyTbl[y_old] == 0) {
 10134e4:	e0fff903 	ldbu	r3,-28(fp)
 10134e8:	008040f4 	movhi	r2,259
 10134ec:	10970544 	addi	r2,r2,23573
 10134f0:	10c5883a 	add	r2,r2,r3
 10134f4:	10800003 	ldbu	r2,0(r2)
 10134f8:	10803fcc 	andi	r2,r2,255
 10134fc:	1004c03a 	cmpne	r2,r2,zero
 1013500:	10000b1e 	bne	r2,zero,1013530 <OSTaskChangePrio+0x29c>
             OSRdyGrp &= ~bity_old;
 1013504:	e0bff843 	ldbu	r2,-31(fp)
 1013508:	0084303a 	nor	r2,zero,r2
 101350c:	1007883a 	mov	r3,r2
 1013510:	008040f4 	movhi	r2,259
 1013514:	10970504 	addi	r2,r2,23572
 1013518:	10800003 	ldbu	r2,0(r2)
 101351c:	1884703a 	and	r2,r3,r2
 1013520:	1007883a 	mov	r3,r2
 1013524:	008040f4 	movhi	r2,259
 1013528:	10970504 	addi	r2,r2,23572
 101352c:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
 1013530:	008040f4 	movhi	r2,259
 1013534:	10970504 	addi	r2,r2,23572
 1013538:	10c00003 	ldbu	r3,0(r2)
 101353c:	e0bff8c3 	ldbu	r2,-29(fp)
 1013540:	1884b03a 	or	r2,r3,r2
 1013544:	1007883a 	mov	r3,r2
 1013548:	008040f4 	movhi	r2,259
 101354c:	10970504 	addi	r2,r2,23572
 1013550:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
 1013554:	e13ff983 	ldbu	r4,-26(fp)
 1013558:	e0fff983 	ldbu	r3,-26(fp)
 101355c:	008040f4 	movhi	r2,259
 1013560:	10970544 	addi	r2,r2,23573
 1013564:	10c5883a 	add	r2,r2,r3
 1013568:	10c00003 	ldbu	r3,0(r2)
 101356c:	e0bff883 	ldbu	r2,-30(fp)
 1013570:	1884b03a 	or	r2,r3,r2
 1013574:	1007883a 	mov	r3,r2
 1013578:	008040f4 	movhi	r2,259
 101357c:	10970544 	addi	r2,r2,23573
 1013580:	1105883a 	add	r2,r2,r4
 1013584:	10c00005 	stb	r3,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
 1013588:	e0bffa17 	ldw	r2,-24(fp)
 101358c:	10800717 	ldw	r2,28(r2)
 1013590:	e0bffc15 	stw	r2,-16(fp)
    if (pevent != (OS_EVENT *)0) {
 1013594:	e0bffc17 	ldw	r2,-16(fp)
 1013598:	1005003a 	cmpeq	r2,r2,zero
 101359c:	1000341e 	bne	r2,zero,1013670 <OSTaskChangePrio+0x3dc>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
 10135a0:	e13ff903 	ldbu	r4,-28(fp)
 10135a4:	e0fff903 	ldbu	r3,-28(fp)
 10135a8:	e0bffc17 	ldw	r2,-16(fp)
 10135ac:	1885883a 	add	r2,r3,r2
 10135b0:	10800204 	addi	r2,r2,8
 10135b4:	108000c3 	ldbu	r2,3(r2)
 10135b8:	1007883a 	mov	r3,r2
 10135bc:	e0bff803 	ldbu	r2,-32(fp)
 10135c0:	0084303a 	nor	r2,zero,r2
 10135c4:	1884703a 	and	r2,r3,r2
 10135c8:	1007883a 	mov	r3,r2
 10135cc:	e0bffc17 	ldw	r2,-16(fp)
 10135d0:	2085883a 	add	r2,r4,r2
 10135d4:	10800204 	addi	r2,r2,8
 10135d8:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
 10135dc:	e0fff903 	ldbu	r3,-28(fp)
 10135e0:	e0bffc17 	ldw	r2,-16(fp)
 10135e4:	1885883a 	add	r2,r3,r2
 10135e8:	10800204 	addi	r2,r2,8
 10135ec:	108000c3 	ldbu	r2,3(r2)
 10135f0:	10803fcc 	andi	r2,r2,255
 10135f4:	1004c03a 	cmpne	r2,r2,zero
 10135f8:	1000091e 	bne	r2,zero,1013620 <OSTaskChangePrio+0x38c>
            pevent->OSEventGrp    &= ~bity_old;
 10135fc:	e0bffc17 	ldw	r2,-16(fp)
 1013600:	10800283 	ldbu	r2,10(r2)
 1013604:	1007883a 	mov	r3,r2
 1013608:	e0bff843 	ldbu	r2,-31(fp)
 101360c:	0084303a 	nor	r2,zero,r2
 1013610:	1884703a 	and	r2,r3,r2
 1013614:	1007883a 	mov	r3,r2
 1013618:	e0bffc17 	ldw	r2,-16(fp)
 101361c:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
 1013620:	e0bffc17 	ldw	r2,-16(fp)
 1013624:	10c00283 	ldbu	r3,10(r2)
 1013628:	e0bff8c3 	ldbu	r2,-29(fp)
 101362c:	1884b03a 	or	r2,r3,r2
 1013630:	1007883a 	mov	r3,r2
 1013634:	e0bffc17 	ldw	r2,-16(fp)
 1013638:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
 101363c:	e13ff983 	ldbu	r4,-26(fp)
 1013640:	e0fff983 	ldbu	r3,-26(fp)
 1013644:	e0bffc17 	ldw	r2,-16(fp)
 1013648:	1885883a 	add	r2,r3,r2
 101364c:	10800204 	addi	r2,r2,8
 1013650:	10c000c3 	ldbu	r3,3(r2)
 1013654:	e0bff883 	ldbu	r2,-30(fp)
 1013658:	1884b03a 	or	r2,r3,r2
 101365c:	1007883a 	mov	r3,r2
 1013660:	e0bffc17 	ldw	r2,-16(fp)
 1013664:	2085883a 	add	r2,r4,r2
 1013668:	10800204 	addi	r2,r2,8
 101366c:	10c000c5 	stb	r3,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
 1013670:	e0bffa17 	ldw	r2,-24(fp)
 1013674:	10800817 	ldw	r2,32(r2)
 1013678:	1005003a 	cmpeq	r2,r2,zero
 101367c:	1000441e 	bne	r2,zero,1013790 <OSTaskChangePrio+0x4fc>
        pevents =  ptcb->OSTCBEventMultiPtr;
 1013680:	e0bffa17 	ldw	r2,-24(fp)
 1013684:	10800817 	ldw	r2,32(r2)
 1013688:	e0bffb15 	stw	r2,-20(fp)
        pevent  = *pevents;
 101368c:	e0bffb17 	ldw	r2,-20(fp)
 1013690:	10800017 	ldw	r2,0(r2)
 1013694:	e0bffc15 	stw	r2,-16(fp)
        while (pevent != (OS_EVENT *)0) {
 1013698:	00003a06 	br	1013784 <OSTaskChangePrio+0x4f0>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
 101369c:	e13ff903 	ldbu	r4,-28(fp)
 10136a0:	e0fff903 	ldbu	r3,-28(fp)
 10136a4:	e0bffc17 	ldw	r2,-16(fp)
 10136a8:	1885883a 	add	r2,r3,r2
 10136ac:	10800204 	addi	r2,r2,8
 10136b0:	108000c3 	ldbu	r2,3(r2)
 10136b4:	1007883a 	mov	r3,r2
 10136b8:	e0bff803 	ldbu	r2,-32(fp)
 10136bc:	0084303a 	nor	r2,zero,r2
 10136c0:	1884703a 	and	r2,r3,r2
 10136c4:	1007883a 	mov	r3,r2
 10136c8:	e0bffc17 	ldw	r2,-16(fp)
 10136cc:	2085883a 	add	r2,r4,r2
 10136d0:	10800204 	addi	r2,r2,8
 10136d4:	10c000c5 	stb	r3,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
 10136d8:	e0fff903 	ldbu	r3,-28(fp)
 10136dc:	e0bffc17 	ldw	r2,-16(fp)
 10136e0:	1885883a 	add	r2,r3,r2
 10136e4:	10800204 	addi	r2,r2,8
 10136e8:	108000c3 	ldbu	r2,3(r2)
 10136ec:	10803fcc 	andi	r2,r2,255
 10136f0:	1004c03a 	cmpne	r2,r2,zero
 10136f4:	1000091e 	bne	r2,zero,101371c <OSTaskChangePrio+0x488>
                pevent->OSEventGrp    &= ~bity_old;
 10136f8:	e0bffc17 	ldw	r2,-16(fp)
 10136fc:	10800283 	ldbu	r2,10(r2)
 1013700:	1007883a 	mov	r3,r2
 1013704:	e0bff843 	ldbu	r2,-31(fp)
 1013708:	0084303a 	nor	r2,zero,r2
 101370c:	1884703a 	and	r2,r3,r2
 1013710:	1007883a 	mov	r3,r2
 1013714:	e0bffc17 	ldw	r2,-16(fp)
 1013718:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
 101371c:	e0bffc17 	ldw	r2,-16(fp)
 1013720:	10c00283 	ldbu	r3,10(r2)
 1013724:	e0bff8c3 	ldbu	r2,-29(fp)
 1013728:	1884b03a 	or	r2,r3,r2
 101372c:	1007883a 	mov	r3,r2
 1013730:	e0bffc17 	ldw	r2,-16(fp)
 1013734:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
 1013738:	e13ff983 	ldbu	r4,-26(fp)
 101373c:	e0fff983 	ldbu	r3,-26(fp)
 1013740:	e0bffc17 	ldw	r2,-16(fp)
 1013744:	1885883a 	add	r2,r3,r2
 1013748:	10800204 	addi	r2,r2,8
 101374c:	10c000c3 	ldbu	r3,3(r2)
 1013750:	e0bff883 	ldbu	r2,-30(fp)
 1013754:	1884b03a 	or	r2,r3,r2
 1013758:	1007883a 	mov	r3,r2
 101375c:	e0bffc17 	ldw	r2,-16(fp)
 1013760:	2085883a 	add	r2,r4,r2
 1013764:	10800204 	addi	r2,r2,8
 1013768:	10c000c5 	stb	r3,3(r2)
            pevents++;
 101376c:	e0bffb17 	ldw	r2,-20(fp)
 1013770:	10800104 	addi	r2,r2,4
 1013774:	e0bffb15 	stw	r2,-20(fp)
            pevent                     = *pevents;
 1013778:	e0bffb17 	ldw	r2,-20(fp)
 101377c:	10800017 	ldw	r2,0(r2)
 1013780:	e0bffc15 	stw	r2,-16(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
 1013784:	e0bffc17 	ldw	r2,-16(fp)
 1013788:	1004c03a 	cmpne	r2,r2,zero
 101378c:	103fc31e 	bne	r2,zero,101369c <OSTaskChangePrio+0x408>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
 1013790:	e0fffa17 	ldw	r3,-24(fp)
 1013794:	e0bffe03 	ldbu	r2,-8(fp)
 1013798:	18800c85 	stb	r2,50(r3)
    ptcb->OSTCBY    = y_new;
 101379c:	e0fffa17 	ldw	r3,-24(fp)
 10137a0:	e0bff983 	ldbu	r2,-26(fp)
 10137a4:	18800d05 	stb	r2,52(r3)
    ptcb->OSTCBX    = x_new;
 10137a8:	e0fffa17 	ldw	r3,-24(fp)
 10137ac:	e0bff943 	ldbu	r2,-27(fp)
 10137b0:	18800cc5 	stb	r2,51(r3)
    ptcb->OSTCBBitY = bity_new;
 10137b4:	e0fffa17 	ldw	r3,-24(fp)
 10137b8:	e0bff8c3 	ldbu	r2,-29(fp)
 10137bc:	18800d85 	stb	r2,54(r3)
    ptcb->OSTCBBitX = bitx_new;
 10137c0:	e0fffa17 	ldw	r3,-24(fp)
 10137c4:	e0bff883 	ldbu	r2,-30(fp)
 10137c8:	18800d45 	stb	r2,53(r3)
 10137cc:	e0bff717 	ldw	r2,-36(fp)
 10137d0:	e0bff215 	stw	r2,-56(fp)
 10137d4:	e0bff217 	ldw	r2,-56(fp)
 10137d8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 10137dc:	008040f4 	movhi	r2,259
 10137e0:	1096f804 	addi	r2,r2,23520
 10137e4:	10800003 	ldbu	r2,0(r2)
 10137e8:	10803fcc 	andi	r2,r2,255
 10137ec:	10800058 	cmpnei	r2,r2,1
 10137f0:	1000011e 	bne	r2,zero,10137f8 <OSTaskChangePrio+0x564>
        OS_Sched();                                         /* Find new highest priority task          */
 10137f4:	100e73c0 	call	100e73c <OS_Sched>
    }
    return (OS_ERR_NONE);
 10137f8:	e03fff15 	stw	zero,-4(fp)
 10137fc:	e0bfff17 	ldw	r2,-4(fp)
}
 1013800:	e037883a 	mov	sp,fp
 1013804:	dfc00117 	ldw	ra,4(sp)
 1013808:	df000017 	ldw	fp,0(sp)
 101380c:	dec00204 	addi	sp,sp,8
 1013810:	f800283a 	ret

01013814 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
 1013814:	f811883a 	mov	r8,ra
 1013818:	100c1d00 	call	100c1d0 <_mcount>
 101381c:	403f883a 	mov	ra,r8
 1013820:	deffed04 	addi	sp,sp,-76
 1013824:	dfc01215 	stw	ra,72(sp)
 1013828:	df001115 	stw	fp,68(sp)
 101382c:	df001104 	addi	fp,sp,68
 1013830:	e13ffb15 	stw	r4,-20(fp)
 1013834:	e17ffc15 	stw	r5,-16(fp)
 1013838:	e1bffd15 	stw	r6,-12(fp)
 101383c:	e1fffe05 	stb	r7,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 1013840:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 1013844:	e0bffe03 	ldbu	r2,-8(fp)
 1013848:	10800570 	cmpltui	r2,r2,21
 101384c:	1000031e 	bne	r2,zero,101385c <OSTaskCreate+0x48>
        return (OS_ERR_PRIO_INVALID);
 1013850:	00800a84 	movi	r2,42
 1013854:	e0bfff15 	stw	r2,-4(fp)
 1013858:	00006006 	br	10139dc <OSTaskCreate+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101385c:	0005303a 	rdctl	r2,status
 1013860:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1013864:	e0fff717 	ldw	r3,-36(fp)
 1013868:	00bfff84 	movi	r2,-2
 101386c:	1884703a 	and	r2,r3,r2
 1013870:	1001703a 	wrctl	status,r2
  
  return context;
 1013874:	e0bff717 	ldw	r2,-36(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 1013878:	e0bff815 	stw	r2,-32(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 101387c:	008040f4 	movhi	r2,259
 1013880:	10970704 	addi	r2,r2,23580
 1013884:	10800003 	ldbu	r2,0(r2)
 1013888:	10803fcc 	andi	r2,r2,255
 101388c:	1005003a 	cmpeq	r2,r2,zero
 1013890:	1000071e 	bne	r2,zero,10138b0 <OSTaskCreate+0x9c>
 1013894:	e0bff817 	ldw	r2,-32(fp)
 1013898:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101389c:	e0bff617 	ldw	r2,-40(fp)
 10138a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 10138a4:	00800f04 	movi	r2,60
 10138a8:	e0bfff15 	stw	r2,-4(fp)
 10138ac:	00004b06 	br	10139dc <OSTaskCreate+0x1c8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 10138b0:	e0bffe03 	ldbu	r2,-8(fp)
 10138b4:	00c04134 	movhi	r3,260
 10138b8:	18de7204 	addi	r3,r3,31176
 10138bc:	1085883a 	add	r2,r2,r2
 10138c0:	1085883a 	add	r2,r2,r2
 10138c4:	10c5883a 	add	r2,r2,r3
 10138c8:	10800017 	ldw	r2,0(r2)
 10138cc:	1004c03a 	cmpne	r2,r2,zero
 10138d0:	10003c1e 	bne	r2,zero,10139c4 <OSTaskCreate+0x1b0>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 10138d4:	e0bffe03 	ldbu	r2,-8(fp)
 10138d8:	00c04134 	movhi	r3,260
 10138dc:	18de7204 	addi	r3,r3,31176
 10138e0:	1085883a 	add	r2,r2,r2
 10138e4:	1085883a 	add	r2,r2,r2
 10138e8:	10c7883a 	add	r3,r2,r3
 10138ec:	00800044 	movi	r2,1
 10138f0:	18800015 	stw	r2,0(r3)
 10138f4:	e0bff817 	ldw	r2,-32(fp)
 10138f8:	e0bff515 	stw	r2,-44(fp)
 10138fc:	e0bff517 	ldw	r2,-44(fp)
 1013900:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
 1013904:	e13ffb17 	ldw	r4,-20(fp)
 1013908:	e17ffc17 	ldw	r5,-16(fp)
 101390c:	e1bffd17 	ldw	r6,-12(fp)
 1013910:	000f883a 	mov	r7,zero
 1013914:	1018f100 	call	1018f10 <OSTaskStkInit>
 1013918:	e0bffa15 	stw	r2,-24(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
 101391c:	e13ffe03 	ldbu	r4,-8(fp)
 1013920:	d8000015 	stw	zero,0(sp)
 1013924:	d8000115 	stw	zero,4(sp)
 1013928:	d8000215 	stw	zero,8(sp)
 101392c:	e17ffa17 	ldw	r5,-24(fp)
 1013930:	000d883a 	mov	r6,zero
 1013934:	000f883a 	mov	r7,zero
 1013938:	100eb980 	call	100eb98 <OS_TCBInit>
 101393c:	e0bff905 	stb	r2,-28(fp)
        if (err == OS_ERR_NONE) {
 1013940:	e0bff903 	ldbu	r2,-28(fp)
 1013944:	1004c03a 	cmpne	r2,r2,zero
 1013948:	1000081e 	bne	r2,zero,101396c <OSTaskCreate+0x158>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
 101394c:	008040f4 	movhi	r2,259
 1013950:	1096f804 	addi	r2,r2,23520
 1013954:	10800003 	ldbu	r2,0(r2)
 1013958:	10803fcc 	andi	r2,r2,255
 101395c:	10800058 	cmpnei	r2,r2,1
 1013960:	1000151e 	bne	r2,zero,10139b8 <OSTaskCreate+0x1a4>
                OS_Sched();
 1013964:	100e73c0 	call	100e73c <OS_Sched>
 1013968:	00001306 	br	10139b8 <OSTaskCreate+0x1a4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101396c:	0005303a 	rdctl	r2,status
 1013970:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1013974:	e0fff417 	ldw	r3,-48(fp)
 1013978:	00bfff84 	movi	r2,-2
 101397c:	1884703a 	and	r2,r3,r2
 1013980:	1001703a 	wrctl	status,r2
  
  return context;
 1013984:	e0bff417 	ldw	r2,-48(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 1013988:	e0bff815 	stw	r2,-32(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
 101398c:	e0bffe03 	ldbu	r2,-8(fp)
 1013990:	00c04134 	movhi	r3,260
 1013994:	18de7204 	addi	r3,r3,31176
 1013998:	1085883a 	add	r2,r2,r2
 101399c:	1085883a 	add	r2,r2,r2
 10139a0:	10c5883a 	add	r2,r2,r3
 10139a4:	10000015 	stw	zero,0(r2)
 10139a8:	e0bff817 	ldw	r2,-32(fp)
 10139ac:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10139b0:	e0bff317 	ldw	r2,-52(fp)
 10139b4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 10139b8:	e0bff903 	ldbu	r2,-28(fp)
 10139bc:	e0bfff15 	stw	r2,-4(fp)
 10139c0:	00000606 	br	10139dc <OSTaskCreate+0x1c8>
 10139c4:	e0bff817 	ldw	r2,-32(fp)
 10139c8:	e0bff215 	stw	r2,-56(fp)
 10139cc:	e0bff217 	ldw	r2,-56(fp)
 10139d0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 10139d4:	00800a04 	movi	r2,40
 10139d8:	e0bfff15 	stw	r2,-4(fp)
 10139dc:	e0bfff17 	ldw	r2,-4(fp)
}
 10139e0:	e037883a 	mov	sp,fp
 10139e4:	dfc00117 	ldw	ra,4(sp)
 10139e8:	df000017 	ldw	fp,0(sp)
 10139ec:	dec00204 	addi	sp,sp,8
 10139f0:	f800283a 	ret

010139f4 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
 10139f4:	f811883a 	mov	r8,ra
 10139f8:	100c1d00 	call	100c1d0 <_mcount>
 10139fc:	403f883a 	mov	ra,r8
 1013a00:	deffeb04 	addi	sp,sp,-84
 1013a04:	dfc01415 	stw	ra,80(sp)
 1013a08:	df001315 	stw	fp,76(sp)
 1013a0c:	df001304 	addi	fp,sp,76
 1013a10:	e13ff915 	stw	r4,-28(fp)
 1013a14:	e17ffa15 	stw	r5,-24(fp)
 1013a18:	e1bffb15 	stw	r6,-20(fp)
 1013a1c:	e0800217 	ldw	r2,8(fp)
 1013a20:	e0c00617 	ldw	r3,24(fp)
 1013a24:	e1fffc05 	stb	r7,-16(fp)
 1013a28:	e0bffd0d 	sth	r2,-12(fp)
 1013a2c:	e0fffe0d 	sth	r3,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 1013a30:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 1013a34:	e0bffc03 	ldbu	r2,-16(fp)
 1013a38:	10800570 	cmpltui	r2,r2,21
 1013a3c:	1000031e 	bne	r2,zero,1013a4c <OSTaskCreateExt+0x58>
        return (OS_ERR_PRIO_INVALID);
 1013a40:	00800a84 	movi	r2,42
 1013a44:	e0bfff15 	stw	r2,-4(fp)
 1013a48:	00006706 	br	1013be8 <OSTaskCreateExt+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1013a4c:	0005303a 	rdctl	r2,status
 1013a50:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1013a54:	e0fff517 	ldw	r3,-44(fp)
 1013a58:	00bfff84 	movi	r2,-2
 1013a5c:	1884703a 	and	r2,r3,r2
 1013a60:	1001703a 	wrctl	status,r2
  
  return context;
 1013a64:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 1013a68:	e0bff615 	stw	r2,-40(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 1013a6c:	008040f4 	movhi	r2,259
 1013a70:	10970704 	addi	r2,r2,23580
 1013a74:	10800003 	ldbu	r2,0(r2)
 1013a78:	10803fcc 	andi	r2,r2,255
 1013a7c:	1005003a 	cmpeq	r2,r2,zero
 1013a80:	1000071e 	bne	r2,zero,1013aa0 <OSTaskCreateExt+0xac>
 1013a84:	e0bff617 	ldw	r2,-40(fp)
 1013a88:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1013a8c:	e0bff417 	ldw	r2,-48(fp)
 1013a90:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 1013a94:	00800f04 	movi	r2,60
 1013a98:	e0bfff15 	stw	r2,-4(fp)
 1013a9c:	00005206 	br	1013be8 <OSTaskCreateExt+0x1f4>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 1013aa0:	e0bffc03 	ldbu	r2,-16(fp)
 1013aa4:	00c04134 	movhi	r3,260
 1013aa8:	18de7204 	addi	r3,r3,31176
 1013aac:	1085883a 	add	r2,r2,r2
 1013ab0:	1085883a 	add	r2,r2,r2
 1013ab4:	10c5883a 	add	r2,r2,r3
 1013ab8:	10800017 	ldw	r2,0(r2)
 1013abc:	1004c03a 	cmpne	r2,r2,zero
 1013ac0:	1000431e 	bne	r2,zero,1013bd0 <OSTaskCreateExt+0x1dc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 1013ac4:	e0bffc03 	ldbu	r2,-16(fp)
 1013ac8:	00c04134 	movhi	r3,260
 1013acc:	18de7204 	addi	r3,r3,31176
 1013ad0:	1085883a 	add	r2,r2,r2
 1013ad4:	1085883a 	add	r2,r2,r2
 1013ad8:	10c7883a 	add	r3,r2,r3
 1013adc:	00800044 	movi	r2,1
 1013ae0:	18800015 	stw	r2,0(r3)
 1013ae4:	e0bff617 	ldw	r2,-40(fp)
 1013ae8:	e0bff315 	stw	r2,-52(fp)
 1013aec:	e0bff317 	ldw	r2,-52(fp)
 1013af0:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
 1013af4:	e1bffe0b 	ldhu	r6,-8(fp)
 1013af8:	e1000317 	ldw	r4,12(fp)
 1013afc:	e1400417 	ldw	r5,16(fp)
 1013b00:	1014cdc0 	call	1014cdc <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
 1013b04:	e1fffe0b 	ldhu	r7,-8(fp)
 1013b08:	e13ff917 	ldw	r4,-28(fp)
 1013b0c:	e17ffa17 	ldw	r5,-24(fp)
 1013b10:	e1bffb17 	ldw	r6,-20(fp)
 1013b14:	1018f100 	call	1018f10 <OSTaskStkInit>
 1013b18:	e0bff815 	stw	r2,-32(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
 1013b1c:	e13ffc03 	ldbu	r4,-16(fp)
 1013b20:	e1fffd0b 	ldhu	r7,-12(fp)
 1013b24:	e0fffe0b 	ldhu	r3,-8(fp)
 1013b28:	e0800417 	ldw	r2,16(fp)
 1013b2c:	d8800015 	stw	r2,0(sp)
 1013b30:	e0800517 	ldw	r2,20(fp)
 1013b34:	d8800115 	stw	r2,4(sp)
 1013b38:	d8c00215 	stw	r3,8(sp)
 1013b3c:	e17ff817 	ldw	r5,-32(fp)
 1013b40:	e1800317 	ldw	r6,12(fp)
 1013b44:	100eb980 	call	100eb98 <OS_TCBInit>
 1013b48:	e0bff705 	stb	r2,-36(fp)
        if (err == OS_ERR_NONE) {
 1013b4c:	e0bff703 	ldbu	r2,-36(fp)
 1013b50:	1004c03a 	cmpne	r2,r2,zero
 1013b54:	1000081e 	bne	r2,zero,1013b78 <OSTaskCreateExt+0x184>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
 1013b58:	008040f4 	movhi	r2,259
 1013b5c:	1096f804 	addi	r2,r2,23520
 1013b60:	10800003 	ldbu	r2,0(r2)
 1013b64:	10803fcc 	andi	r2,r2,255
 1013b68:	10800058 	cmpnei	r2,r2,1
 1013b6c:	1000151e 	bne	r2,zero,1013bc4 <OSTaskCreateExt+0x1d0>
                OS_Sched();
 1013b70:	100e73c0 	call	100e73c <OS_Sched>
 1013b74:	00001306 	br	1013bc4 <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1013b78:	0005303a 	rdctl	r2,status
 1013b7c:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1013b80:	e0fff217 	ldw	r3,-56(fp)
 1013b84:	00bfff84 	movi	r2,-2
 1013b88:	1884703a 	and	r2,r3,r2
 1013b8c:	1001703a 	wrctl	status,r2
  
  return context;
 1013b90:	e0bff217 	ldw	r2,-56(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 1013b94:	e0bff615 	stw	r2,-40(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
 1013b98:	e0bffc03 	ldbu	r2,-16(fp)
 1013b9c:	00c04134 	movhi	r3,260
 1013ba0:	18de7204 	addi	r3,r3,31176
 1013ba4:	1085883a 	add	r2,r2,r2
 1013ba8:	1085883a 	add	r2,r2,r2
 1013bac:	10c5883a 	add	r2,r2,r3
 1013bb0:	10000015 	stw	zero,0(r2)
 1013bb4:	e0bff617 	ldw	r2,-40(fp)
 1013bb8:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1013bbc:	e0bff117 	ldw	r2,-60(fp)
 1013bc0:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 1013bc4:	e0bff703 	ldbu	r2,-36(fp)
 1013bc8:	e0bfff15 	stw	r2,-4(fp)
 1013bcc:	00000606 	br	1013be8 <OSTaskCreateExt+0x1f4>
 1013bd0:	e0bff617 	ldw	r2,-40(fp)
 1013bd4:	e0bff015 	stw	r2,-64(fp)
 1013bd8:	e0bff017 	ldw	r2,-64(fp)
 1013bdc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 1013be0:	00800a04 	movi	r2,40
 1013be4:	e0bfff15 	stw	r2,-4(fp)
 1013be8:	e0bfff17 	ldw	r2,-4(fp)
}
 1013bec:	e037883a 	mov	sp,fp
 1013bf0:	dfc00117 	ldw	ra,4(sp)
 1013bf4:	df000017 	ldw	fp,0(sp)
 1013bf8:	dec00204 	addi	sp,sp,8
 1013bfc:	f800283a 	ret

01013c00 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
 1013c00:	f811883a 	mov	r8,ra
 1013c04:	100c1d00 	call	100c1d0 <_mcount>
 1013c08:	403f883a 	mov	ra,r8
 1013c0c:	defff304 	addi	sp,sp,-52
 1013c10:	dfc00c15 	stw	ra,48(sp)
 1013c14:	df000b15 	stw	fp,44(sp)
 1013c18:	df000b04 	addi	fp,sp,44
 1013c1c:	e13ffe05 	stb	r4,-8(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
 1013c20:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
 1013c24:	008040f4 	movhi	r2,259
 1013c28:	10970704 	addi	r2,r2,23580
 1013c2c:	10800003 	ldbu	r2,0(r2)
 1013c30:	10803fcc 	andi	r2,r2,255
 1013c34:	1005003a 	cmpeq	r2,r2,zero
 1013c38:	1000031e 	bne	r2,zero,1013c48 <OSTaskDel+0x48>
        return (OS_ERR_TASK_DEL_ISR);
 1013c3c:	00801004 	movi	r2,64
 1013c40:	e0bfff15 	stw	r2,-4(fp)
 1013c44:	0000ee06 	br	1014000 <OSTaskDel+0x400>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
 1013c48:	e0bffe03 	ldbu	r2,-8(fp)
 1013c4c:	10800518 	cmpnei	r2,r2,20
 1013c50:	1000031e 	bne	r2,zero,1013c60 <OSTaskDel+0x60>
        return (OS_ERR_TASK_DEL_IDLE);
 1013c54:	00800f84 	movi	r2,62
 1013c58:	e0bfff15 	stw	r2,-4(fp)
 1013c5c:	0000e806 	br	1014000 <OSTaskDel+0x400>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
 1013c60:	e0bffe03 	ldbu	r2,-8(fp)
 1013c64:	10800530 	cmpltui	r2,r2,20
 1013c68:	1000061e 	bne	r2,zero,1013c84 <OSTaskDel+0x84>
        if (prio != OS_PRIO_SELF) {
 1013c6c:	e0bffe03 	ldbu	r2,-8(fp)
 1013c70:	10803fe0 	cmpeqi	r2,r2,255
 1013c74:	1000031e 	bne	r2,zero,1013c84 <OSTaskDel+0x84>
            return (OS_ERR_PRIO_INVALID);
 1013c78:	00800a84 	movi	r2,42
 1013c7c:	e0bfff15 	stw	r2,-4(fp)
 1013c80:	0000df06 	br	1014000 <OSTaskDel+0x400>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1013c84:	0005303a 	rdctl	r2,status
 1013c88:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1013c8c:	e0fffa17 	ldw	r3,-24(fp)
 1013c90:	00bfff84 	movi	r2,-2
 1013c94:	1884703a 	and	r2,r3,r2
 1013c98:	1001703a 	wrctl	status,r2
  
  return context;
 1013c9c:	e0bffa17 	ldw	r2,-24(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
 1013ca0:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
 1013ca4:	e0bffe03 	ldbu	r2,-8(fp)
 1013ca8:	10803fd8 	cmpnei	r2,r2,255
 1013cac:	1000051e 	bne	r2,zero,1013cc4 <OSTaskDel+0xc4>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
 1013cb0:	008040f4 	movhi	r2,259
 1013cb4:	10970804 	addi	r2,r2,23584
 1013cb8:	10800017 	ldw	r2,0(r2)
 1013cbc:	10800c83 	ldbu	r2,50(r2)
 1013cc0:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 1013cc4:	e0bffe03 	ldbu	r2,-8(fp)
 1013cc8:	00c04134 	movhi	r3,260
 1013ccc:	18de7204 	addi	r3,r3,31176
 1013cd0:	1085883a 	add	r2,r2,r2
 1013cd4:	1085883a 	add	r2,r2,r2
 1013cd8:	10c5883a 	add	r2,r2,r3
 1013cdc:	10800017 	ldw	r2,0(r2)
 1013ce0:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
 1013ce4:	e0bffc17 	ldw	r2,-16(fp)
 1013ce8:	1004c03a 	cmpne	r2,r2,zero
 1013cec:	1000071e 	bne	r2,zero,1013d0c <OSTaskDel+0x10c>
 1013cf0:	e0bffb17 	ldw	r2,-20(fp)
 1013cf4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1013cf8:	e0bff917 	ldw	r2,-28(fp)
 1013cfc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 1013d00:	008010c4 	movi	r2,67
 1013d04:	e0bfff15 	stw	r2,-4(fp)
 1013d08:	0000bd06 	br	1014000 <OSTaskDel+0x400>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
 1013d0c:	e0bffc17 	ldw	r2,-16(fp)
 1013d10:	10800058 	cmpnei	r2,r2,1
 1013d14:	1000071e 	bne	r2,zero,1013d34 <OSTaskDel+0x134>
 1013d18:	e0bffb17 	ldw	r2,-20(fp)
 1013d1c:	e0bff815 	stw	r2,-32(fp)
 1013d20:	e0bff817 	ldw	r2,-32(fp)
 1013d24:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 1013d28:	00800f44 	movi	r2,61
 1013d2c:	e0bfff15 	stw	r2,-4(fp)
 1013d30:	0000b306 	br	1014000 <OSTaskDel+0x400>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
 1013d34:	e0bffc17 	ldw	r2,-16(fp)
 1013d38:	10800d03 	ldbu	r2,52(r2)
 1013d3c:	11003fcc 	andi	r4,r2,255
 1013d40:	e0bffc17 	ldw	r2,-16(fp)
 1013d44:	10800d03 	ldbu	r2,52(r2)
 1013d48:	10c03fcc 	andi	r3,r2,255
 1013d4c:	008040f4 	movhi	r2,259
 1013d50:	10970544 	addi	r2,r2,23573
 1013d54:	10c5883a 	add	r2,r2,r3
 1013d58:	10800003 	ldbu	r2,0(r2)
 1013d5c:	1007883a 	mov	r3,r2
 1013d60:	e0bffc17 	ldw	r2,-16(fp)
 1013d64:	10800d43 	ldbu	r2,53(r2)
 1013d68:	0084303a 	nor	r2,zero,r2
 1013d6c:	1884703a 	and	r2,r3,r2
 1013d70:	1007883a 	mov	r3,r2
 1013d74:	008040f4 	movhi	r2,259
 1013d78:	10970544 	addi	r2,r2,23573
 1013d7c:	1105883a 	add	r2,r2,r4
 1013d80:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
 1013d84:	e0bffc17 	ldw	r2,-16(fp)
 1013d88:	10800d03 	ldbu	r2,52(r2)
 1013d8c:	10c03fcc 	andi	r3,r2,255
 1013d90:	008040f4 	movhi	r2,259
 1013d94:	10970544 	addi	r2,r2,23573
 1013d98:	10c5883a 	add	r2,r2,r3
 1013d9c:	10800003 	ldbu	r2,0(r2)
 1013da0:	10803fcc 	andi	r2,r2,255
 1013da4:	1004c03a 	cmpne	r2,r2,zero
 1013da8:	10000c1e 	bne	r2,zero,1013ddc <OSTaskDel+0x1dc>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
 1013dac:	e0bffc17 	ldw	r2,-16(fp)
 1013db0:	10800d83 	ldbu	r2,54(r2)
 1013db4:	0084303a 	nor	r2,zero,r2
 1013db8:	1007883a 	mov	r3,r2
 1013dbc:	008040f4 	movhi	r2,259
 1013dc0:	10970504 	addi	r2,r2,23572
 1013dc4:	10800003 	ldbu	r2,0(r2)
 1013dc8:	1884703a 	and	r2,r3,r2
 1013dcc:	1007883a 	mov	r3,r2
 1013dd0:	008040f4 	movhi	r2,259
 1013dd4:	10970504 	addi	r2,r2,23572
 1013dd8:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
 1013ddc:	e0bffc17 	ldw	r2,-16(fp)
 1013de0:	10800717 	ldw	r2,28(r2)
 1013de4:	1005003a 	cmpeq	r2,r2,zero
 1013de8:	1000041e 	bne	r2,zero,1013dfc <OSTaskDel+0x1fc>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
 1013dec:	e0bffc17 	ldw	r2,-16(fp)
 1013df0:	11400717 	ldw	r5,28(r2)
 1013df4:	e13ffc17 	ldw	r4,-16(fp)
 1013df8:	100e0700 	call	100e070 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
 1013dfc:	e0bffc17 	ldw	r2,-16(fp)
 1013e00:	10800817 	ldw	r2,32(r2)
 1013e04:	1005003a 	cmpeq	r2,r2,zero
 1013e08:	1000041e 	bne	r2,zero,1013e1c <OSTaskDel+0x21c>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 1013e0c:	e0bffc17 	ldw	r2,-16(fp)
 1013e10:	11400817 	ldw	r5,32(r2)
 1013e14:	e13ffc17 	ldw	r4,-16(fp)
 1013e18:	100e1340 	call	100e134 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
 1013e1c:	e0bffc17 	ldw	r2,-16(fp)
 1013e20:	10800a17 	ldw	r2,40(r2)
 1013e24:	e0bffd15 	stw	r2,-12(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
 1013e28:	e0bffd17 	ldw	r2,-12(fp)
 1013e2c:	1005003a 	cmpeq	r2,r2,zero
 1013e30:	1000021e 	bne	r2,zero,1013e3c <OSTaskDel+0x23c>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
 1013e34:	e13ffd17 	ldw	r4,-12(fp)
 1013e38:	101099c0 	call	101099c <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
 1013e3c:	e0bffc17 	ldw	r2,-16(fp)
 1013e40:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
 1013e44:	e0bffc17 	ldw	r2,-16(fp)
 1013e48:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 1013e4c:	e0bffc17 	ldw	r2,-16(fp)
 1013e50:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
 1013e54:	008040f4 	movhi	r2,259
 1013e58:	1096f604 	addi	r2,r2,23512
 1013e5c:	10800003 	ldbu	r2,0(r2)
 1013e60:	10803fcc 	andi	r2,r2,255
 1013e64:	10803fe0 	cmpeqi	r2,r2,255
 1013e68:	1000081e 	bne	r2,zero,1013e8c <OSTaskDel+0x28c>
        OSLockNesting++;
 1013e6c:	008040f4 	movhi	r2,259
 1013e70:	1096f604 	addi	r2,r2,23512
 1013e74:	10800003 	ldbu	r2,0(r2)
 1013e78:	10800044 	addi	r2,r2,1
 1013e7c:	1007883a 	mov	r3,r2
 1013e80:	008040f4 	movhi	r2,259
 1013e84:	1096f604 	addi	r2,r2,23512
 1013e88:	10c00005 	stb	r3,0(r2)
 1013e8c:	e0bffb17 	ldw	r2,-20(fp)
 1013e90:	e0bff715 	stw	r2,-36(fp)
 1013e94:	e0bff717 	ldw	r2,-36(fp)
 1013e98:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
 1013e9c:	100dc2c0 	call	100dc2c <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1013ea0:	0005303a 	rdctl	r2,status
 1013ea4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1013ea8:	e0fff617 	ldw	r3,-40(fp)
 1013eac:	00bfff84 	movi	r2,-2
 1013eb0:	1884703a 	and	r2,r3,r2
 1013eb4:	1001703a 	wrctl	status,r2
  
  return context;
 1013eb8:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
 1013ebc:	e0bffb15 	stw	r2,-20(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
 1013ec0:	008040f4 	movhi	r2,259
 1013ec4:	1096f604 	addi	r2,r2,23512
 1013ec8:	10800003 	ldbu	r2,0(r2)
 1013ecc:	10803fcc 	andi	r2,r2,255
 1013ed0:	1005003a 	cmpeq	r2,r2,zero
 1013ed4:	1000081e 	bne	r2,zero,1013ef8 <OSTaskDel+0x2f8>
        OSLockNesting--;
 1013ed8:	008040f4 	movhi	r2,259
 1013edc:	1096f604 	addi	r2,r2,23512
 1013ee0:	10800003 	ldbu	r2,0(r2)
 1013ee4:	10bfffc4 	addi	r2,r2,-1
 1013ee8:	1007883a 	mov	r3,r2
 1013eec:	008040f4 	movhi	r2,259
 1013ef0:	1096f604 	addi	r2,r2,23512
 1013ef4:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
 1013ef8:	e13ffc17 	ldw	r4,-16(fp)
 1013efc:	10192580 	call	1019258 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
 1013f00:	008040f4 	movhi	r2,259
 1013f04:	10970144 	addi	r2,r2,23557
 1013f08:	10800003 	ldbu	r2,0(r2)
 1013f0c:	10bfffc4 	addi	r2,r2,-1
 1013f10:	1007883a 	mov	r3,r2
 1013f14:	008040f4 	movhi	r2,259
 1013f18:	10970144 	addi	r2,r2,23557
 1013f1c:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
 1013f20:	e0bffe03 	ldbu	r2,-8(fp)
 1013f24:	00c04134 	movhi	r3,260
 1013f28:	18de7204 	addi	r3,r3,31176
 1013f2c:	1085883a 	add	r2,r2,r2
 1013f30:	1085883a 	add	r2,r2,r2
 1013f34:	10c5883a 	add	r2,r2,r3
 1013f38:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
 1013f3c:	e0bffc17 	ldw	r2,-16(fp)
 1013f40:	10800617 	ldw	r2,24(r2)
 1013f44:	1004c03a 	cmpne	r2,r2,zero
 1013f48:	1000091e 	bne	r2,zero,1013f70 <OSTaskDel+0x370>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
 1013f4c:	e0bffc17 	ldw	r2,-16(fp)
 1013f50:	10800517 	ldw	r2,20(r2)
 1013f54:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
 1013f58:	e0bffc17 	ldw	r2,-16(fp)
 1013f5c:	10c00517 	ldw	r3,20(r2)
 1013f60:	008040f4 	movhi	r2,259
 1013f64:	1096fb04 	addi	r2,r2,23532
 1013f68:	10c00015 	stw	r3,0(r2)
 1013f6c:	00000a06 	br	1013f98 <OSTaskDel+0x398>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
 1013f70:	e0bffc17 	ldw	r2,-16(fp)
 1013f74:	10c00617 	ldw	r3,24(r2)
 1013f78:	e0bffc17 	ldw	r2,-16(fp)
 1013f7c:	10800517 	ldw	r2,20(r2)
 1013f80:	18800515 	stw	r2,20(r3)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
 1013f84:	e0bffc17 	ldw	r2,-16(fp)
 1013f88:	10c00517 	ldw	r3,20(r2)
 1013f8c:	e0bffc17 	ldw	r2,-16(fp)
 1013f90:	10800617 	ldw	r2,24(r2)
 1013f94:	18800615 	stw	r2,24(r3)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
 1013f98:	008040f4 	movhi	r2,259
 1013f9c:	10970004 	addi	r2,r2,23552
 1013fa0:	10c00017 	ldw	r3,0(r2)
 1013fa4:	e0bffc17 	ldw	r2,-16(fp)
 1013fa8:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
 1013fac:	00c040f4 	movhi	r3,259
 1013fb0:	18d70004 	addi	r3,r3,23552
 1013fb4:	e0bffc17 	ldw	r2,-16(fp)
 1013fb8:	18800015 	stw	r2,0(r3)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
 1013fbc:	e0fffc17 	ldw	r3,-16(fp)
 1013fc0:	00800fc4 	movi	r2,63
 1013fc4:	18801305 	stb	r2,76(r3)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 1013fc8:	e0bffc17 	ldw	r2,-16(fp)
 1013fcc:	10001345 	stb	zero,77(r2)
 1013fd0:	e0bffb17 	ldw	r2,-20(fp)
 1013fd4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1013fd8:	e0bff517 	ldw	r2,-44(fp)
 1013fdc:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 1013fe0:	008040f4 	movhi	r2,259
 1013fe4:	1096f804 	addi	r2,r2,23520
 1013fe8:	10800003 	ldbu	r2,0(r2)
 1013fec:	10803fcc 	andi	r2,r2,255
 1013ff0:	10800058 	cmpnei	r2,r2,1
 1013ff4:	1000011e 	bne	r2,zero,1013ffc <OSTaskDel+0x3fc>
        OS_Sched();                                     /* Find new highest priority task              */
 1013ff8:	100e73c0 	call	100e73c <OS_Sched>
    }
    return (OS_ERR_NONE);
 1013ffc:	e03fff15 	stw	zero,-4(fp)
 1014000:	e0bfff17 	ldw	r2,-4(fp)
}
 1014004:	e037883a 	mov	sp,fp
 1014008:	dfc00117 	ldw	ra,4(sp)
 101400c:	df000017 	ldw	fp,0(sp)
 1014010:	dec00204 	addi	sp,sp,8
 1014014:	f800283a 	ret

01014018 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
 1014018:	f811883a 	mov	r8,ra
 101401c:	100c1d00 	call	100c1d0 <_mcount>
 1014020:	403f883a 	mov	ra,r8
 1014024:	defff404 	addi	sp,sp,-48
 1014028:	df000b15 	stw	fp,44(sp)
 101402c:	df000b04 	addi	fp,sp,44
 1014030:	e13ffe05 	stb	r4,-8(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1014034:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
 1014038:	e0bffe03 	ldbu	r2,-8(fp)
 101403c:	10800518 	cmpnei	r2,r2,20
 1014040:	1000031e 	bne	r2,zero,1014050 <OSTaskDelReq+0x38>
        return (OS_ERR_TASK_DEL_IDLE);
 1014044:	00800f84 	movi	r2,62
 1014048:	e0bfff15 	stw	r2,-4(fp)
 101404c:	00004c06 	br	1014180 <OSTaskDelReq+0x168>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 1014050:	e0bffe03 	ldbu	r2,-8(fp)
 1014054:	10800530 	cmpltui	r2,r2,20
 1014058:	1000061e 	bne	r2,zero,1014074 <OSTaskDelReq+0x5c>
        if (prio != OS_PRIO_SELF) {
 101405c:	e0bffe03 	ldbu	r2,-8(fp)
 1014060:	10803fe0 	cmpeqi	r2,r2,255
 1014064:	1000031e 	bne	r2,zero,1014074 <OSTaskDelReq+0x5c>
            return (OS_ERR_PRIO_INVALID);
 1014068:	00800a84 	movi	r2,42
 101406c:	e0bfff15 	stw	r2,-4(fp)
 1014070:	00004306 	br	1014180 <OSTaskDelReq+0x168>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
 1014074:	e0bffe03 	ldbu	r2,-8(fp)
 1014078:	10803fd8 	cmpnei	r2,r2,255
 101407c:	1000141e 	bne	r2,zero,10140d0 <OSTaskDelReq+0xb8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1014080:	0005303a 	rdctl	r2,status
 1014084:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1014088:	e0fffa17 	ldw	r3,-24(fp)
 101408c:	00bfff84 	movi	r2,-2
 1014090:	1884703a 	and	r2,r3,r2
 1014094:	1001703a 	wrctl	status,r2
  
  return context;
 1014098:	e0bffa17 	ldw	r2,-24(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
 101409c:	e0bffb15 	stw	r2,-20(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
 10140a0:	008040f4 	movhi	r2,259
 10140a4:	10970804 	addi	r2,r2,23584
 10140a8:	10800017 	ldw	r2,0(r2)
 10140ac:	10800dc3 	ldbu	r2,55(r2)
 10140b0:	e0bffd05 	stb	r2,-12(fp)
 10140b4:	e0bffb17 	ldw	r2,-20(fp)
 10140b8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10140bc:	e0bff917 	ldw	r2,-28(fp)
 10140c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
 10140c4:	e0bffd03 	ldbu	r2,-12(fp)
 10140c8:	e0bfff15 	stw	r2,-4(fp)
 10140cc:	00002c06 	br	1014180 <OSTaskDelReq+0x168>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10140d0:	0005303a 	rdctl	r2,status
 10140d4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10140d8:	e0fff817 	ldw	r3,-32(fp)
 10140dc:	00bfff84 	movi	r2,-2
 10140e0:	1884703a 	and	r2,r3,r2
 10140e4:	1001703a 	wrctl	status,r2
  
  return context;
 10140e8:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
 10140ec:	e0bffb15 	stw	r2,-20(fp)
    ptcb = OSTCBPrioTbl[prio];
 10140f0:	e0bffe03 	ldbu	r2,-8(fp)
 10140f4:	00c04134 	movhi	r3,260
 10140f8:	18de7204 	addi	r3,r3,31176
 10140fc:	1085883a 	add	r2,r2,r2
 1014100:	1085883a 	add	r2,r2,r2
 1014104:	10c5883a 	add	r2,r2,r3
 1014108:	10800017 	ldw	r2,0(r2)
 101410c:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
 1014110:	e0bffc17 	ldw	r2,-16(fp)
 1014114:	1004c03a 	cmpne	r2,r2,zero
 1014118:	1000071e 	bne	r2,zero,1014138 <OSTaskDelReq+0x120>
 101411c:	e0bffb17 	ldw	r2,-20(fp)
 1014120:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1014124:	e0bff717 	ldw	r2,-36(fp)
 1014128:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
 101412c:	008010c4 	movi	r2,67
 1014130:	e0bfff15 	stw	r2,-4(fp)
 1014134:	00001206 	br	1014180 <OSTaskDelReq+0x168>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
 1014138:	e0bffc17 	ldw	r2,-16(fp)
 101413c:	10800058 	cmpnei	r2,r2,1
 1014140:	1000071e 	bne	r2,zero,1014160 <OSTaskDelReq+0x148>
 1014144:	e0bffb17 	ldw	r2,-20(fp)
 1014148:	e0bff615 	stw	r2,-40(fp)
 101414c:	e0bff617 	ldw	r2,-40(fp)
 1014150:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 1014154:	00800f44 	movi	r2,61
 1014158:	e0bfff15 	stw	r2,-4(fp)
 101415c:	00000806 	br	1014180 <OSTaskDelReq+0x168>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
 1014160:	e0fffc17 	ldw	r3,-16(fp)
 1014164:	00800fc4 	movi	r2,63
 1014168:	18800dc5 	stb	r2,55(r3)
 101416c:	e0bffb17 	ldw	r2,-20(fp)
 1014170:	e0bff515 	stw	r2,-44(fp)
 1014174:	e0bff517 	ldw	r2,-44(fp)
 1014178:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 101417c:	e03fff15 	stw	zero,-4(fp)
 1014180:	e0bfff17 	ldw	r2,-4(fp)
}
 1014184:	e037883a 	mov	sp,fp
 1014188:	df000017 	ldw	fp,0(sp)
 101418c:	dec00104 	addi	sp,sp,4
 1014190:	f800283a 	ret

01014194 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
 1014194:	f811883a 	mov	r8,ra
 1014198:	100c1d00 	call	100c1d0 <_mcount>
 101419c:	403f883a 	mov	ra,r8
 10141a0:	defff304 	addi	sp,sp,-52
 10141a4:	dfc00c15 	stw	ra,48(sp)
 10141a8:	df000b15 	stw	fp,44(sp)
 10141ac:	df000b04 	addi	fp,sp,44
 10141b0:	e17ffd15 	stw	r5,-12(fp)
 10141b4:	e1bffe15 	stw	r6,-8(fp)
 10141b8:	e13ffc05 	stb	r4,-16(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
 10141bc:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
 10141c0:	e0bffe17 	ldw	r2,-8(fp)
 10141c4:	1004c03a 	cmpne	r2,r2,zero
 10141c8:	1000021e 	bne	r2,zero,10141d4 <OSTaskNameGet+0x40>
        return (0);
 10141cc:	e03fff15 	stw	zero,-4(fp)
 10141d0:	00005b06 	br	1014340 <OSTaskNameGet+0x1ac>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
 10141d4:	e0bffc03 	ldbu	r2,-16(fp)
 10141d8:	10800570 	cmpltui	r2,r2,21
 10141dc:	1000081e 	bne	r2,zero,1014200 <OSTaskNameGet+0x6c>
        if (prio != OS_PRIO_SELF) {
 10141e0:	e0bffc03 	ldbu	r2,-16(fp)
 10141e4:	10803fe0 	cmpeqi	r2,r2,255
 10141e8:	1000051e 	bne	r2,zero,1014200 <OSTaskNameGet+0x6c>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
 10141ec:	e0fffe17 	ldw	r3,-8(fp)
 10141f0:	00800a84 	movi	r2,42
 10141f4:	18800005 	stb	r2,0(r3)
            return (0);
 10141f8:	e03fff15 	stw	zero,-4(fp)
 10141fc:	00005006 	br	1014340 <OSTaskNameGet+0x1ac>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
 1014200:	e0bffd17 	ldw	r2,-12(fp)
 1014204:	1004c03a 	cmpne	r2,r2,zero
 1014208:	1000051e 	bne	r2,zero,1014220 <OSTaskNameGet+0x8c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
 101420c:	e0fffe17 	ldw	r3,-8(fp)
 1014210:	00800304 	movi	r2,12
 1014214:	18800005 	stb	r2,0(r3)
        return (0);
 1014218:	e03fff15 	stw	zero,-4(fp)
 101421c:	00004806 	br	1014340 <OSTaskNameGet+0x1ac>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
 1014220:	008040f4 	movhi	r2,259
 1014224:	10970704 	addi	r2,r2,23580
 1014228:	10800003 	ldbu	r2,0(r2)
 101422c:	10803fcc 	andi	r2,r2,255
 1014230:	1005003a 	cmpeq	r2,r2,zero
 1014234:	1000051e 	bne	r2,zero,101424c <OSTaskNameGet+0xb8>
        *perr = OS_ERR_NAME_GET_ISR;
 1014238:	e0fffe17 	ldw	r3,-8(fp)
 101423c:	00800444 	movi	r2,17
 1014240:	18800005 	stb	r2,0(r3)
        return (0);
 1014244:	e03fff15 	stw	zero,-4(fp)
 1014248:	00003d06 	br	1014340 <OSTaskNameGet+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101424c:	0005303a 	rdctl	r2,status
 1014250:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1014254:	e0fff817 	ldw	r3,-32(fp)
 1014258:	00bfff84 	movi	r2,-2
 101425c:	1884703a 	and	r2,r3,r2
 1014260:	1001703a 	wrctl	status,r2
  
  return context;
 1014264:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
 1014268:	e0bff915 	stw	r2,-28(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
 101426c:	e0bffc03 	ldbu	r2,-16(fp)
 1014270:	10803fd8 	cmpnei	r2,r2,255
 1014274:	1000051e 	bne	r2,zero,101428c <OSTaskNameGet+0xf8>
        prio = OSTCBCur->OSTCBPrio;
 1014278:	008040f4 	movhi	r2,259
 101427c:	10970804 	addi	r2,r2,23584
 1014280:	10800017 	ldw	r2,0(r2)
 1014284:	10800c83 	ldbu	r2,50(r2)
 1014288:	e0bffc05 	stb	r2,-16(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 101428c:	e0bffc03 	ldbu	r2,-16(fp)
 1014290:	00c04134 	movhi	r3,260
 1014294:	18de7204 	addi	r3,r3,31176
 1014298:	1085883a 	add	r2,r2,r2
 101429c:	1085883a 	add	r2,r2,r2
 10142a0:	10c5883a 	add	r2,r2,r3
 10142a4:	10800017 	ldw	r2,0(r2)
 10142a8:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
 10142ac:	e0bffb17 	ldw	r2,-20(fp)
 10142b0:	1004c03a 	cmpne	r2,r2,zero
 10142b4:	1000091e 	bne	r2,zero,10142dc <OSTaskNameGet+0x148>
 10142b8:	e0bff917 	ldw	r2,-28(fp)
 10142bc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10142c0:	e0bff717 	ldw	r2,-36(fp)
 10142c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
 10142c8:	e0fffe17 	ldw	r3,-8(fp)
 10142cc:	008010c4 	movi	r2,67
 10142d0:	18800005 	stb	r2,0(r3)
        return (0);
 10142d4:	e03fff15 	stw	zero,-4(fp)
 10142d8:	00001906 	br	1014340 <OSTaskNameGet+0x1ac>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
 10142dc:	e0bffb17 	ldw	r2,-20(fp)
 10142e0:	10800058 	cmpnei	r2,r2,1
 10142e4:	1000091e 	bne	r2,zero,101430c <OSTaskNameGet+0x178>
 10142e8:	e0bff917 	ldw	r2,-28(fp)
 10142ec:	e0bff615 	stw	r2,-40(fp)
 10142f0:	e0bff617 	ldw	r2,-40(fp)
 10142f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
 10142f8:	e0fffe17 	ldw	r3,-8(fp)
 10142fc:	008010c4 	movi	r2,67
 1014300:	18800005 	stb	r2,0(r3)
        return (0);
 1014304:	e03fff15 	stw	zero,-4(fp)
 1014308:	00000d06 	br	1014340 <OSTaskNameGet+0x1ac>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
 101430c:	e0bffb17 	ldw	r2,-20(fp)
 1014310:	11401304 	addi	r5,r2,76
 1014314:	e13ffd17 	ldw	r4,-12(fp)
 1014318:	100e8980 	call	100e898 <OS_StrCopy>
 101431c:	e0bffa05 	stb	r2,-24(fp)
 1014320:	e0bff917 	ldw	r2,-28(fp)
 1014324:	e0bff515 	stw	r2,-44(fp)
 1014328:	e0bff517 	ldw	r2,-44(fp)
 101432c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 1014330:	e0bffe17 	ldw	r2,-8(fp)
 1014334:	10000005 	stb	zero,0(r2)
    return (len);
 1014338:	e0bffa03 	ldbu	r2,-24(fp)
 101433c:	e0bfff15 	stw	r2,-4(fp)
 1014340:	e0bfff17 	ldw	r2,-4(fp)
}
 1014344:	e037883a 	mov	sp,fp
 1014348:	dfc00117 	ldw	ra,4(sp)
 101434c:	df000017 	ldw	fp,0(sp)
 1014350:	dec00204 	addi	sp,sp,8
 1014354:	f800283a 	ret

01014358 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
 1014358:	f811883a 	mov	r8,ra
 101435c:	100c1d00 	call	100c1d0 <_mcount>
 1014360:	403f883a 	mov	ra,r8
 1014364:	defff304 	addi	sp,sp,-52
 1014368:	dfc00c15 	stw	ra,48(sp)
 101436c:	df000b15 	stw	fp,44(sp)
 1014370:	df000b04 	addi	fp,sp,44
 1014374:	e17ffe15 	stw	r5,-8(fp)
 1014378:	e1bfff15 	stw	r6,-4(fp)
 101437c:	e13ffd05 	stb	r4,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 1014380:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 1014384:	e0bfff17 	ldw	r2,-4(fp)
 1014388:	1005003a 	cmpeq	r2,r2,zero
 101438c:	1000611e 	bne	r2,zero,1014514 <OSTaskNameSet+0x1bc>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
 1014390:	e0bffd03 	ldbu	r2,-12(fp)
 1014394:	10800570 	cmpltui	r2,r2,21
 1014398:	1000071e 	bne	r2,zero,10143b8 <OSTaskNameSet+0x60>
        if (prio != OS_PRIO_SELF) {
 101439c:	e0bffd03 	ldbu	r2,-12(fp)
 10143a0:	10803fe0 	cmpeqi	r2,r2,255
 10143a4:	1000041e 	bne	r2,zero,10143b8 <OSTaskNameSet+0x60>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
 10143a8:	e0ffff17 	ldw	r3,-4(fp)
 10143ac:	00800a84 	movi	r2,42
 10143b0:	18800005 	stb	r2,0(r3)
            return;
 10143b4:	00005706 	br	1014514 <OSTaskNameSet+0x1bc>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
 10143b8:	e0bffe17 	ldw	r2,-8(fp)
 10143bc:	1004c03a 	cmpne	r2,r2,zero
 10143c0:	1000041e 	bne	r2,zero,10143d4 <OSTaskNameSet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
 10143c4:	e0ffff17 	ldw	r3,-4(fp)
 10143c8:	00800304 	movi	r2,12
 10143cc:	18800005 	stb	r2,0(r3)
        return;
 10143d0:	00005006 	br	1014514 <OSTaskNameSet+0x1bc>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
 10143d4:	008040f4 	movhi	r2,259
 10143d8:	10970704 	addi	r2,r2,23580
 10143dc:	10800003 	ldbu	r2,0(r2)
 10143e0:	10803fcc 	andi	r2,r2,255
 10143e4:	1005003a 	cmpeq	r2,r2,zero
 10143e8:	1000041e 	bne	r2,zero,10143fc <OSTaskNameSet+0xa4>
        *perr = OS_ERR_NAME_SET_ISR;
 10143ec:	e0ffff17 	ldw	r3,-4(fp)
 10143f0:	00800484 	movi	r2,18
 10143f4:	18800005 	stb	r2,0(r3)
        return;
 10143f8:	00004606 	br	1014514 <OSTaskNameSet+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10143fc:	0005303a 	rdctl	r2,status
 1014400:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1014404:	e0fff917 	ldw	r3,-28(fp)
 1014408:	00bfff84 	movi	r2,-2
 101440c:	1884703a 	and	r2,r3,r2
 1014410:	1001703a 	wrctl	status,r2
  
  return context;
 1014414:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 1014418:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
 101441c:	e0bffd03 	ldbu	r2,-12(fp)
 1014420:	10803fd8 	cmpnei	r2,r2,255
 1014424:	1000051e 	bne	r2,zero,101443c <OSTaskNameSet+0xe4>
        prio = OSTCBCur->OSTCBPrio;
 1014428:	008040f4 	movhi	r2,259
 101442c:	10970804 	addi	r2,r2,23584
 1014430:	10800017 	ldw	r2,0(r2)
 1014434:	10800c83 	ldbu	r2,50(r2)
 1014438:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 101443c:	e0bffd03 	ldbu	r2,-12(fp)
 1014440:	00c04134 	movhi	r3,260
 1014444:	18de7204 	addi	r3,r3,31176
 1014448:	1085883a 	add	r2,r2,r2
 101444c:	1085883a 	add	r2,r2,r2
 1014450:	10c5883a 	add	r2,r2,r3
 1014454:	10800017 	ldw	r2,0(r2)
 1014458:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
 101445c:	e0bffb17 	ldw	r2,-20(fp)
 1014460:	1004c03a 	cmpne	r2,r2,zero
 1014464:	1000081e 	bne	r2,zero,1014488 <OSTaskNameSet+0x130>
 1014468:	e0bffa17 	ldw	r2,-24(fp)
 101446c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1014470:	e0bff817 	ldw	r2,-32(fp)
 1014474:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
 1014478:	e0ffff17 	ldw	r3,-4(fp)
 101447c:	008010c4 	movi	r2,67
 1014480:	18800005 	stb	r2,0(r3)
        return;
 1014484:	00002306 	br	1014514 <OSTaskNameSet+0x1bc>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
 1014488:	e0bffb17 	ldw	r2,-20(fp)
 101448c:	10800058 	cmpnei	r2,r2,1
 1014490:	1000081e 	bne	r2,zero,10144b4 <OSTaskNameSet+0x15c>
 1014494:	e0bffa17 	ldw	r2,-24(fp)
 1014498:	e0bff715 	stw	r2,-36(fp)
 101449c:	e0bff717 	ldw	r2,-36(fp)
 10144a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
 10144a4:	e0ffff17 	ldw	r3,-4(fp)
 10144a8:	008010c4 	movi	r2,67
 10144ac:	18800005 	stb	r2,0(r3)
        return;
 10144b0:	00001806 	br	1014514 <OSTaskNameSet+0x1bc>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
 10144b4:	e13ffe17 	ldw	r4,-8(fp)
 10144b8:	100e9240 	call	100e924 <OS_StrLen>
 10144bc:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
 10144c0:	e0bffc03 	ldbu	r2,-16(fp)
 10144c4:	10800830 	cmpltui	r2,r2,32
 10144c8:	1000081e 	bne	r2,zero,10144ec <OSTaskNameSet+0x194>
 10144cc:	e0bffa17 	ldw	r2,-24(fp)
 10144d0:	e0bff615 	stw	r2,-40(fp)
 10144d4:	e0bff617 	ldw	r2,-40(fp)
 10144d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
 10144dc:	e0ffff17 	ldw	r3,-4(fp)
 10144e0:	00801044 	movi	r2,65
 10144e4:	18800005 	stb	r2,0(r3)
        return;
 10144e8:	00000a06 	br	1014514 <OSTaskNameSet+0x1bc>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
 10144ec:	e0bffb17 	ldw	r2,-20(fp)
 10144f0:	11001304 	addi	r4,r2,76
 10144f4:	e17ffe17 	ldw	r5,-8(fp)
 10144f8:	100e8980 	call	100e898 <OS_StrCopy>
 10144fc:	e0bffa17 	ldw	r2,-24(fp)
 1014500:	e0bff515 	stw	r2,-44(fp)
 1014504:	e0bff517 	ldw	r2,-44(fp)
 1014508:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 101450c:	e0bfff17 	ldw	r2,-4(fp)
 1014510:	10000005 	stb	zero,0(r2)
}
 1014514:	e037883a 	mov	sp,fp
 1014518:	dfc00117 	ldw	ra,4(sp)
 101451c:	df000017 	ldw	fp,0(sp)
 1014520:	dec00204 	addi	sp,sp,8
 1014524:	f800283a 	ret

01014528 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
 1014528:	f811883a 	mov	r8,ra
 101452c:	100c1d00 	call	100c1d0 <_mcount>
 1014530:	403f883a 	mov	ra,r8
 1014534:	defff304 	addi	sp,sp,-52
 1014538:	dfc00c15 	stw	ra,48(sp)
 101453c:	df000b15 	stw	fp,44(sp)
 1014540:	df000b04 	addi	fp,sp,44
 1014544:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 1014548:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
 101454c:	e0bffe03 	ldbu	r2,-8(fp)
 1014550:	10800530 	cmpltui	r2,r2,20
 1014554:	1000031e 	bne	r2,zero,1014564 <OSTaskResume+0x3c>
        return (OS_ERR_PRIO_INVALID);
 1014558:	00800a84 	movi	r2,42
 101455c:	e0bfff15 	stw	r2,-4(fp)
 1014560:	00007406 	br	1014734 <OSTaskResume+0x20c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1014564:	0005303a 	rdctl	r2,status
 1014568:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101456c:	e0fffb17 	ldw	r3,-20(fp)
 1014570:	00bfff84 	movi	r2,-2
 1014574:	1884703a 	and	r2,r3,r2
 1014578:	1001703a 	wrctl	status,r2
  
  return context;
 101457c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 1014580:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];
 1014584:	e0bffe03 	ldbu	r2,-8(fp)
 1014588:	00c04134 	movhi	r3,260
 101458c:	18de7204 	addi	r3,r3,31176
 1014590:	1085883a 	add	r2,r2,r2
 1014594:	1085883a 	add	r2,r2,r2
 1014598:	10c5883a 	add	r2,r2,r3
 101459c:	10800017 	ldw	r2,0(r2)
 10145a0:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
 10145a4:	e0bffd17 	ldw	r2,-12(fp)
 10145a8:	1004c03a 	cmpne	r2,r2,zero
 10145ac:	1000071e 	bne	r2,zero,10145cc <OSTaskResume+0xa4>
 10145b0:	e0bffc17 	ldw	r2,-16(fp)
 10145b4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10145b8:	e0bffa17 	ldw	r2,-24(fp)
 10145bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
 10145c0:	00801184 	movi	r2,70
 10145c4:	e0bfff15 	stw	r2,-4(fp)
 10145c8:	00005a06 	br	1014734 <OSTaskResume+0x20c>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
 10145cc:	e0bffd17 	ldw	r2,-12(fp)
 10145d0:	10800058 	cmpnei	r2,r2,1
 10145d4:	1000071e 	bne	r2,zero,10145f4 <OSTaskResume+0xcc>
 10145d8:	e0bffc17 	ldw	r2,-16(fp)
 10145dc:	e0bff915 	stw	r2,-28(fp)
 10145e0:	e0bff917 	ldw	r2,-28(fp)
 10145e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 10145e8:	008010c4 	movi	r2,67
 10145ec:	e0bfff15 	stw	r2,-4(fp)
 10145f0:	00005006 	br	1014734 <OSTaskResume+0x20c>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
 10145f4:	e0bffd17 	ldw	r2,-12(fp)
 10145f8:	10800c03 	ldbu	r2,48(r2)
 10145fc:	10803fcc 	andi	r2,r2,255
 1014600:	1080020c 	andi	r2,r2,8
 1014604:	1005003a 	cmpeq	r2,r2,zero
 1014608:	1000441e 	bne	r2,zero,101471c <OSTaskResume+0x1f4>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
 101460c:	e0bffd17 	ldw	r2,-12(fp)
 1014610:	10c00c03 	ldbu	r3,48(r2)
 1014614:	00bffdc4 	movi	r2,-9
 1014618:	1884703a 	and	r2,r3,r2
 101461c:	1007883a 	mov	r3,r2
 1014620:	e0bffd17 	ldw	r2,-12(fp)
 1014624:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
 1014628:	e0bffd17 	ldw	r2,-12(fp)
 101462c:	10800c03 	ldbu	r2,48(r2)
 1014630:	10803fcc 	andi	r2,r2,255
 1014634:	1004c03a 	cmpne	r2,r2,zero
 1014638:	1000321e 	bne	r2,zero,1014704 <OSTaskResume+0x1dc>
            if (ptcb->OSTCBDly == 0) {
 101463c:	e0bffd17 	ldw	r2,-12(fp)
 1014640:	10800b8b 	ldhu	r2,46(r2)
 1014644:	10bfffcc 	andi	r2,r2,65535
 1014648:	1004c03a 	cmpne	r2,r2,zero
 101464c:	1000281e 	bne	r2,zero,10146f0 <OSTaskResume+0x1c8>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
 1014650:	e0bffd17 	ldw	r2,-12(fp)
 1014654:	10c00d83 	ldbu	r3,54(r2)
 1014658:	008040f4 	movhi	r2,259
 101465c:	10970504 	addi	r2,r2,23572
 1014660:	10800003 	ldbu	r2,0(r2)
 1014664:	1884b03a 	or	r2,r3,r2
 1014668:	1007883a 	mov	r3,r2
 101466c:	008040f4 	movhi	r2,259
 1014670:	10970504 	addi	r2,r2,23572
 1014674:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 1014678:	e0bffd17 	ldw	r2,-12(fp)
 101467c:	10800d03 	ldbu	r2,52(r2)
 1014680:	11003fcc 	andi	r4,r2,255
 1014684:	e0bffd17 	ldw	r2,-12(fp)
 1014688:	10800d03 	ldbu	r2,52(r2)
 101468c:	10c03fcc 	andi	r3,r2,255
 1014690:	008040f4 	movhi	r2,259
 1014694:	10970544 	addi	r2,r2,23573
 1014698:	10c5883a 	add	r2,r2,r3
 101469c:	10c00003 	ldbu	r3,0(r2)
 10146a0:	e0bffd17 	ldw	r2,-12(fp)
 10146a4:	10800d43 	ldbu	r2,53(r2)
 10146a8:	1884b03a 	or	r2,r3,r2
 10146ac:	1007883a 	mov	r3,r2
 10146b0:	008040f4 	movhi	r2,259
 10146b4:	10970544 	addi	r2,r2,23573
 10146b8:	1105883a 	add	r2,r2,r4
 10146bc:	10c00005 	stb	r3,0(r2)
 10146c0:	e0bffc17 	ldw	r2,-16(fp)
 10146c4:	e0bff815 	stw	r2,-32(fp)
 10146c8:	e0bff817 	ldw	r2,-32(fp)
 10146cc:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
 10146d0:	008040f4 	movhi	r2,259
 10146d4:	1096f804 	addi	r2,r2,23520
 10146d8:	10800003 	ldbu	r2,0(r2)
 10146dc:	10803fcc 	andi	r2,r2,255
 10146e0:	10800058 	cmpnei	r2,r2,1
 10146e4:	10000b1e 	bne	r2,zero,1014714 <OSTaskResume+0x1ec>
                    OS_Sched();                               /* Find new highest priority task        */
 10146e8:	100e73c0 	call	100e73c <OS_Sched>
 10146ec:	00000906 	br	1014714 <OSTaskResume+0x1ec>
 10146f0:	e0bffc17 	ldw	r2,-16(fp)
 10146f4:	e0bff715 	stw	r2,-36(fp)
 10146f8:	e0bff717 	ldw	r2,-36(fp)
 10146fc:	1001703a 	wrctl	status,r2
 1014700:	00000406 	br	1014714 <OSTaskResume+0x1ec>
 1014704:	e0bffc17 	ldw	r2,-16(fp)
 1014708:	e0bff615 	stw	r2,-40(fp)
 101470c:	e0bff617 	ldw	r2,-40(fp)
 1014710:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
 1014714:	e03fff15 	stw	zero,-4(fp)
 1014718:	00000606 	br	1014734 <OSTaskResume+0x20c>
 101471c:	e0bffc17 	ldw	r2,-16(fp)
 1014720:	e0bff515 	stw	r2,-44(fp)
 1014724:	e0bff517 	ldw	r2,-44(fp)
 1014728:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
 101472c:	00801104 	movi	r2,68
 1014730:	e0bfff15 	stw	r2,-4(fp)
 1014734:	e0bfff17 	ldw	r2,-4(fp)
}
 1014738:	e037883a 	mov	sp,fp
 101473c:	dfc00117 	ldw	ra,4(sp)
 1014740:	df000017 	ldw	fp,0(sp)
 1014744:	dec00204 	addi	sp,sp,8
 1014748:	f800283a 	ret

0101474c <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
 101474c:	f811883a 	mov	r8,ra
 1014750:	100c1d00 	call	100c1d0 <_mcount>
 1014754:	403f883a 	mov	ra,r8
 1014758:	defff204 	addi	sp,sp,-56
 101475c:	df000d15 	stw	fp,52(sp)
 1014760:	df000d04 	addi	fp,sp,52
 1014764:	e17ffe15 	stw	r5,-8(fp)
 1014768:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 101476c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
 1014770:	e0bffd03 	ldbu	r2,-12(fp)
 1014774:	10800570 	cmpltui	r2,r2,21
 1014778:	1000061e 	bne	r2,zero,1014794 <OSTaskStkChk+0x48>
        if (prio != OS_PRIO_SELF) {
 101477c:	e0bffd03 	ldbu	r2,-12(fp)
 1014780:	10803fe0 	cmpeqi	r2,r2,255
 1014784:	1000031e 	bne	r2,zero,1014794 <OSTaskStkChk+0x48>
            return (OS_ERR_PRIO_INVALID);
 1014788:	00800a84 	movi	r2,42
 101478c:	e0bfff15 	stw	r2,-4(fp)
 1014790:	00006b06 	br	1014940 <OSTaskStkChk+0x1f4>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
 1014794:	e0bffe17 	ldw	r2,-8(fp)
 1014798:	1004c03a 	cmpne	r2,r2,zero
 101479c:	1000031e 	bne	r2,zero,10147ac <OSTaskStkChk+0x60>
        return (OS_ERR_PDATA_NULL);
 10147a0:	00800244 	movi	r2,9
 10147a4:	e0bfff15 	stw	r2,-4(fp)
 10147a8:	00006506 	br	1014940 <OSTaskStkChk+0x1f4>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
 10147ac:	e0bffe17 	ldw	r2,-8(fp)
 10147b0:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
 10147b4:	e0bffe17 	ldw	r2,-8(fp)
 10147b8:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10147bc:	0005303a 	rdctl	r2,status
 10147c0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10147c4:	e0fff717 	ldw	r3,-36(fp)
 10147c8:	00bfff84 	movi	r2,-2
 10147cc:	1884703a 	and	r2,r3,r2
 10147d0:	1001703a 	wrctl	status,r2
  
  return context;
 10147d4:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
 10147d8:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
 10147dc:	e0bffd03 	ldbu	r2,-12(fp)
 10147e0:	10803fd8 	cmpnei	r2,r2,255
 10147e4:	1000051e 	bne	r2,zero,10147fc <OSTaskStkChk+0xb0>
        prio = OSTCBCur->OSTCBPrio;
 10147e8:	008040f4 	movhi	r2,259
 10147ec:	10970804 	addi	r2,r2,23584
 10147f0:	10800017 	ldw	r2,0(r2)
 10147f4:	10800c83 	ldbu	r2,50(r2)
 10147f8:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 10147fc:	e0bffd03 	ldbu	r2,-12(fp)
 1014800:	00c04134 	movhi	r3,260
 1014804:	18de7204 	addi	r3,r3,31176
 1014808:	1085883a 	add	r2,r2,r2
 101480c:	1085883a 	add	r2,r2,r2
 1014810:	10c5883a 	add	r2,r2,r3
 1014814:	10800017 	ldw	r2,0(r2)
 1014818:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
 101481c:	e0bffc17 	ldw	r2,-16(fp)
 1014820:	1004c03a 	cmpne	r2,r2,zero
 1014824:	1000071e 	bne	r2,zero,1014844 <OSTaskStkChk+0xf8>
 1014828:	e0bff817 	ldw	r2,-32(fp)
 101482c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1014830:	e0bff617 	ldw	r2,-40(fp)
 1014834:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 1014838:	008010c4 	movi	r2,67
 101483c:	e0bfff15 	stw	r2,-4(fp)
 1014840:	00003f06 	br	1014940 <OSTaskStkChk+0x1f4>
    }
    if (ptcb == OS_TCB_RESERVED) {
 1014844:	e0bffc17 	ldw	r2,-16(fp)
 1014848:	10800058 	cmpnei	r2,r2,1
 101484c:	1000071e 	bne	r2,zero,101486c <OSTaskStkChk+0x120>
 1014850:	e0bff817 	ldw	r2,-32(fp)
 1014854:	e0bff515 	stw	r2,-44(fp)
 1014858:	e0bff517 	ldw	r2,-44(fp)
 101485c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 1014860:	008010c4 	movi	r2,67
 1014864:	e0bfff15 	stw	r2,-4(fp)
 1014868:	00003506 	br	1014940 <OSTaskStkChk+0x1f4>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
 101486c:	e0bffc17 	ldw	r2,-16(fp)
 1014870:	1080040b 	ldhu	r2,16(r2)
 1014874:	10bfffcc 	andi	r2,r2,65535
 1014878:	1080004c 	andi	r2,r2,1
 101487c:	1004c03a 	cmpne	r2,r2,zero
 1014880:	1000071e 	bne	r2,zero,10148a0 <OSTaskStkChk+0x154>
 1014884:	e0bff817 	ldw	r2,-32(fp)
 1014888:	e0bff415 	stw	r2,-48(fp)
 101488c:	e0bff417 	ldw	r2,-48(fp)
 1014890:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
 1014894:	00801144 	movi	r2,69
 1014898:	e0bfff15 	stw	r2,-4(fp)
 101489c:	00002806 	br	1014940 <OSTaskStkChk+0x1f4>
    }
    nfree = 0;
 10148a0:	e03ffa15 	stw	zero,-24(fp)
    size  = ptcb->OSTCBStkSize;
 10148a4:	e0bffc17 	ldw	r2,-16(fp)
 10148a8:	10800317 	ldw	r2,12(r2)
 10148ac:	e0bff915 	stw	r2,-28(fp)
    pchk  = ptcb->OSTCBStkBottom;
 10148b0:	e0bffc17 	ldw	r2,-16(fp)
 10148b4:	10800217 	ldw	r2,8(r2)
 10148b8:	e0bffb15 	stw	r2,-20(fp)
 10148bc:	e0bff817 	ldw	r2,-32(fp)
 10148c0:	e0bff315 	stw	r2,-52(fp)
 10148c4:	e0bff317 	ldw	r2,-52(fp)
 10148c8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 10148cc:	00000306 	br	10148dc <OSTaskStkChk+0x190>
        nfree++;
 10148d0:	e0bffa17 	ldw	r2,-24(fp)
 10148d4:	10800044 	addi	r2,r2,1
 10148d8:	e0bffa15 	stw	r2,-24(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 10148dc:	e0bffb17 	ldw	r2,-20(fp)
 10148e0:	10800017 	ldw	r2,0(r2)
 10148e4:	1005003a 	cmpeq	r2,r2,zero
 10148e8:	1007883a 	mov	r3,r2
 10148ec:	e0bffb17 	ldw	r2,-20(fp)
 10148f0:	10800104 	addi	r2,r2,4
 10148f4:	e0bffb15 	stw	r2,-20(fp)
 10148f8:	18803fcc 	andi	r2,r3,255
 10148fc:	1004c03a 	cmpne	r2,r2,zero
 1014900:	103ff31e 	bne	r2,zero,10148d0 <OSTaskStkChk+0x184>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
 1014904:	e0bffa17 	ldw	r2,-24(fp)
 1014908:	1085883a 	add	r2,r2,r2
 101490c:	1085883a 	add	r2,r2,r2
 1014910:	1007883a 	mov	r3,r2
 1014914:	e0bffe17 	ldw	r2,-8(fp)
 1014918:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
 101491c:	e0fff917 	ldw	r3,-28(fp)
 1014920:	e0bffa17 	ldw	r2,-24(fp)
 1014924:	1885c83a 	sub	r2,r3,r2
 1014928:	1085883a 	add	r2,r2,r2
 101492c:	1085883a 	add	r2,r2,r2
 1014930:	1007883a 	mov	r3,r2
 1014934:	e0bffe17 	ldw	r2,-8(fp)
 1014938:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
 101493c:	e03fff15 	stw	zero,-4(fp)
 1014940:	e0bfff17 	ldw	r2,-4(fp)
}
 1014944:	e037883a 	mov	sp,fp
 1014948:	df000017 	ldw	fp,0(sp)
 101494c:	dec00104 	addi	sp,sp,4
 1014950:	f800283a 	ret

01014954 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
 1014954:	f811883a 	mov	r8,ra
 1014958:	100c1d00 	call	100c1d0 <_mcount>
 101495c:	403f883a 	mov	ra,r8
 1014960:	defff404 	addi	sp,sp,-48
 1014964:	dfc00b15 	stw	ra,44(sp)
 1014968:	df000a15 	stw	fp,40(sp)
 101496c:	df000a04 	addi	fp,sp,40
 1014970:	e13ffe05 	stb	r4,-8(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1014974:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
 1014978:	e0bffe03 	ldbu	r2,-8(fp)
 101497c:	10800518 	cmpnei	r2,r2,20
 1014980:	1000031e 	bne	r2,zero,1014990 <OSTaskSuspend+0x3c>
        return (OS_ERR_TASK_SUSPEND_IDLE);
 1014984:	008011c4 	movi	r2,71
 1014988:	e0bfff15 	stw	r2,-4(fp)
 101498c:	00007906 	br	1014b74 <OSTaskSuspend+0x220>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 1014990:	e0bffe03 	ldbu	r2,-8(fp)
 1014994:	10800530 	cmpltui	r2,r2,20
 1014998:	1000061e 	bne	r2,zero,10149b4 <OSTaskSuspend+0x60>
        if (prio != OS_PRIO_SELF) {
 101499c:	e0bffe03 	ldbu	r2,-8(fp)
 10149a0:	10803fe0 	cmpeqi	r2,r2,255
 10149a4:	1000031e 	bne	r2,zero,10149b4 <OSTaskSuspend+0x60>
            return (OS_ERR_PRIO_INVALID);
 10149a8:	00800a84 	movi	r2,42
 10149ac:	e0bfff15 	stw	r2,-4(fp)
 10149b0:	00007006 	br	1014b74 <OSTaskSuspend+0x220>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10149b4:	0005303a 	rdctl	r2,status
 10149b8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10149bc:	e0fff917 	ldw	r3,-28(fp)
 10149c0:	00bfff84 	movi	r2,-2
 10149c4:	1884703a 	and	r2,r3,r2
 10149c8:	1001703a 	wrctl	status,r2
  
  return context;
 10149cc:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
 10149d0:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
 10149d4:	e0bffe03 	ldbu	r2,-8(fp)
 10149d8:	10803fd8 	cmpnei	r2,r2,255
 10149dc:	1000081e 	bne	r2,zero,1014a00 <OSTaskSuspend+0xac>
        prio = OSTCBCur->OSTCBPrio;
 10149e0:	008040f4 	movhi	r2,259
 10149e4:	10970804 	addi	r2,r2,23584
 10149e8:	10800017 	ldw	r2,0(r2)
 10149ec:	10800c83 	ldbu	r2,50(r2)
 10149f0:	e0bffe05 	stb	r2,-8(fp)
        self = OS_TRUE;
 10149f4:	00800044 	movi	r2,1
 10149f8:	e0bffd05 	stb	r2,-12(fp)
 10149fc:	00000b06 	br	1014a2c <OSTaskSuspend+0xd8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
 1014a00:	008040f4 	movhi	r2,259
 1014a04:	10970804 	addi	r2,r2,23584
 1014a08:	10800017 	ldw	r2,0(r2)
 1014a0c:	10800c83 	ldbu	r2,50(r2)
 1014a10:	10c03fcc 	andi	r3,r2,255
 1014a14:	e0bffe03 	ldbu	r2,-8(fp)
 1014a18:	1880031e 	bne	r3,r2,1014a28 <OSTaskSuspend+0xd4>
        self = OS_TRUE;
 1014a1c:	00800044 	movi	r2,1
 1014a20:	e0bffd05 	stb	r2,-12(fp)
 1014a24:	00000106 	br	1014a2c <OSTaskSuspend+0xd8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
 1014a28:	e03ffd05 	stb	zero,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 1014a2c:	e0bffe03 	ldbu	r2,-8(fp)
 1014a30:	00c04134 	movhi	r3,260
 1014a34:	18de7204 	addi	r3,r3,31176
 1014a38:	1085883a 	add	r2,r2,r2
 1014a3c:	1085883a 	add	r2,r2,r2
 1014a40:	10c5883a 	add	r2,r2,r3
 1014a44:	10800017 	ldw	r2,0(r2)
 1014a48:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
 1014a4c:	e0bffc17 	ldw	r2,-16(fp)
 1014a50:	1004c03a 	cmpne	r2,r2,zero
 1014a54:	1000071e 	bne	r2,zero,1014a74 <OSTaskSuspend+0x120>
 1014a58:	e0bffa17 	ldw	r2,-24(fp)
 1014a5c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1014a60:	e0bff817 	ldw	r2,-32(fp)
 1014a64:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
 1014a68:	00801204 	movi	r2,72
 1014a6c:	e0bfff15 	stw	r2,-4(fp)
 1014a70:	00004006 	br	1014b74 <OSTaskSuspend+0x220>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
 1014a74:	e0bffc17 	ldw	r2,-16(fp)
 1014a78:	10800058 	cmpnei	r2,r2,1
 1014a7c:	1000071e 	bne	r2,zero,1014a9c <OSTaskSuspend+0x148>
 1014a80:	e0bffa17 	ldw	r2,-24(fp)
 1014a84:	e0bff715 	stw	r2,-36(fp)
 1014a88:	e0bff717 	ldw	r2,-36(fp)
 1014a8c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 1014a90:	008010c4 	movi	r2,67
 1014a94:	e0bfff15 	stw	r2,-4(fp)
 1014a98:	00003606 	br	1014b74 <OSTaskSuspend+0x220>
    }
    y            = ptcb->OSTCBY;
 1014a9c:	e0bffc17 	ldw	r2,-16(fp)
 1014aa0:	10800d03 	ldbu	r2,52(r2)
 1014aa4:	e0bffb05 	stb	r2,-20(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
 1014aa8:	e13ffb03 	ldbu	r4,-20(fp)
 1014aac:	e0fffb03 	ldbu	r3,-20(fp)
 1014ab0:	008040f4 	movhi	r2,259
 1014ab4:	10970544 	addi	r2,r2,23573
 1014ab8:	10c5883a 	add	r2,r2,r3
 1014abc:	10800003 	ldbu	r2,0(r2)
 1014ac0:	1007883a 	mov	r3,r2
 1014ac4:	e0bffc17 	ldw	r2,-16(fp)
 1014ac8:	10800d43 	ldbu	r2,53(r2)
 1014acc:	0084303a 	nor	r2,zero,r2
 1014ad0:	1884703a 	and	r2,r3,r2
 1014ad4:	1007883a 	mov	r3,r2
 1014ad8:	008040f4 	movhi	r2,259
 1014adc:	10970544 	addi	r2,r2,23573
 1014ae0:	1105883a 	add	r2,r2,r4
 1014ae4:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
 1014ae8:	e0fffb03 	ldbu	r3,-20(fp)
 1014aec:	008040f4 	movhi	r2,259
 1014af0:	10970544 	addi	r2,r2,23573
 1014af4:	10c5883a 	add	r2,r2,r3
 1014af8:	10800003 	ldbu	r2,0(r2)
 1014afc:	10803fcc 	andi	r2,r2,255
 1014b00:	1004c03a 	cmpne	r2,r2,zero
 1014b04:	10000c1e 	bne	r2,zero,1014b38 <OSTaskSuspend+0x1e4>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
 1014b08:	e0bffc17 	ldw	r2,-16(fp)
 1014b0c:	10800d83 	ldbu	r2,54(r2)
 1014b10:	0084303a 	nor	r2,zero,r2
 1014b14:	1007883a 	mov	r3,r2
 1014b18:	008040f4 	movhi	r2,259
 1014b1c:	10970504 	addi	r2,r2,23572
 1014b20:	10800003 	ldbu	r2,0(r2)
 1014b24:	1884703a 	and	r2,r3,r2
 1014b28:	1007883a 	mov	r3,r2
 1014b2c:	008040f4 	movhi	r2,259
 1014b30:	10970504 	addi	r2,r2,23572
 1014b34:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
 1014b38:	e0bffc17 	ldw	r2,-16(fp)
 1014b3c:	10800c03 	ldbu	r2,48(r2)
 1014b40:	10800214 	ori	r2,r2,8
 1014b44:	1007883a 	mov	r3,r2
 1014b48:	e0bffc17 	ldw	r2,-16(fp)
 1014b4c:	10c00c05 	stb	r3,48(r2)
 1014b50:	e0bffa17 	ldw	r2,-24(fp)
 1014b54:	e0bff615 	stw	r2,-40(fp)
 1014b58:	e0bff617 	ldw	r2,-40(fp)
 1014b5c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
 1014b60:	e0bffd03 	ldbu	r2,-12(fp)
 1014b64:	10800058 	cmpnei	r2,r2,1
 1014b68:	1000011e 	bne	r2,zero,1014b70 <OSTaskSuspend+0x21c>
        OS_Sched();                                             /* Find new highest priority task      */
 1014b6c:	100e73c0 	call	100e73c <OS_Sched>
    }
    return (OS_ERR_NONE);
 1014b70:	e03fff15 	stw	zero,-4(fp)
 1014b74:	e0bfff17 	ldw	r2,-4(fp)
}
 1014b78:	e037883a 	mov	sp,fp
 1014b7c:	dfc00117 	ldw	ra,4(sp)
 1014b80:	df000017 	ldw	fp,0(sp)
 1014b84:	dec00204 	addi	sp,sp,8
 1014b88:	f800283a 	ret

01014b8c <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
 1014b8c:	f811883a 	mov	r8,ra
 1014b90:	100c1d00 	call	100c1d0 <_mcount>
 1014b94:	403f883a 	mov	ra,r8
 1014b98:	defff504 	addi	sp,sp,-44
 1014b9c:	dfc00a15 	stw	ra,40(sp)
 1014ba0:	df000915 	stw	fp,36(sp)
 1014ba4:	df000904 	addi	fp,sp,36
 1014ba8:	e17ffe15 	stw	r5,-8(fp)
 1014bac:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1014bb0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
 1014bb4:	e0bffd03 	ldbu	r2,-12(fp)
 1014bb8:	10800570 	cmpltui	r2,r2,21
 1014bbc:	1000061e 	bne	r2,zero,1014bd8 <OSTaskQuery+0x4c>
        if (prio != OS_PRIO_SELF) {
 1014bc0:	e0bffd03 	ldbu	r2,-12(fp)
 1014bc4:	10803fe0 	cmpeqi	r2,r2,255
 1014bc8:	1000031e 	bne	r2,zero,1014bd8 <OSTaskQuery+0x4c>
            return (OS_ERR_PRIO_INVALID);
 1014bcc:	00800a84 	movi	r2,42
 1014bd0:	e0bfff15 	stw	r2,-4(fp)
 1014bd4:	00003b06 	br	1014cc4 <OSTaskQuery+0x138>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
 1014bd8:	e0bffe17 	ldw	r2,-8(fp)
 1014bdc:	1004c03a 	cmpne	r2,r2,zero
 1014be0:	1000031e 	bne	r2,zero,1014bf0 <OSTaskQuery+0x64>
        return (OS_ERR_PDATA_NULL);
 1014be4:	00800244 	movi	r2,9
 1014be8:	e0bfff15 	stw	r2,-4(fp)
 1014bec:	00003506 	br	1014cc4 <OSTaskQuery+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1014bf0:	0005303a 	rdctl	r2,status
 1014bf4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1014bf8:	e0fffa17 	ldw	r3,-24(fp)
 1014bfc:	00bfff84 	movi	r2,-2
 1014c00:	1884703a 	and	r2,r3,r2
 1014c04:	1001703a 	wrctl	status,r2
  
  return context;
 1014c08:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 1014c0c:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
 1014c10:	e0bffd03 	ldbu	r2,-12(fp)
 1014c14:	10803fd8 	cmpnei	r2,r2,255
 1014c18:	1000051e 	bne	r2,zero,1014c30 <OSTaskQuery+0xa4>
        prio = OSTCBCur->OSTCBPrio;
 1014c1c:	008040f4 	movhi	r2,259
 1014c20:	10970804 	addi	r2,r2,23584
 1014c24:	10800017 	ldw	r2,0(r2)
 1014c28:	10800c83 	ldbu	r2,50(r2)
 1014c2c:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 1014c30:	e0bffd03 	ldbu	r2,-12(fp)
 1014c34:	00c04134 	movhi	r3,260
 1014c38:	18de7204 	addi	r3,r3,31176
 1014c3c:	1085883a 	add	r2,r2,r2
 1014c40:	1085883a 	add	r2,r2,r2
 1014c44:	10c5883a 	add	r2,r2,r3
 1014c48:	10800017 	ldw	r2,0(r2)
 1014c4c:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
 1014c50:	e0bffc17 	ldw	r2,-16(fp)
 1014c54:	1004c03a 	cmpne	r2,r2,zero
 1014c58:	1000071e 	bne	r2,zero,1014c78 <OSTaskQuery+0xec>
 1014c5c:	e0bffb17 	ldw	r2,-20(fp)
 1014c60:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1014c64:	e0bff917 	ldw	r2,-28(fp)
 1014c68:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
 1014c6c:	00800a44 	movi	r2,41
 1014c70:	e0bfff15 	stw	r2,-4(fp)
 1014c74:	00001306 	br	1014cc4 <OSTaskQuery+0x138>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
 1014c78:	e0bffc17 	ldw	r2,-16(fp)
 1014c7c:	10800058 	cmpnei	r2,r2,1
 1014c80:	1000071e 	bne	r2,zero,1014ca0 <OSTaskQuery+0x114>
 1014c84:	e0bffb17 	ldw	r2,-20(fp)
 1014c88:	e0bff815 	stw	r2,-32(fp)
 1014c8c:	e0bff817 	ldw	r2,-32(fp)
 1014c90:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 1014c94:	008010c4 	movi	r2,67
 1014c98:	e0bfff15 	stw	r2,-4(fp)
 1014c9c:	00000906 	br	1014cc4 <OSTaskQuery+0x138>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
 1014ca0:	e13ffe17 	ldw	r4,-8(fp)
 1014ca4:	e17ffc17 	ldw	r5,-16(fp)
 1014ca8:	01801b04 	movi	r6,108
 1014cac:	100e6c40 	call	100e6c4 <OS_MemCopy>
 1014cb0:	e0bffb17 	ldw	r2,-20(fp)
 1014cb4:	e0bff715 	stw	r2,-36(fp)
 1014cb8:	e0bff717 	ldw	r2,-36(fp)
 1014cbc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 1014cc0:	e03fff15 	stw	zero,-4(fp)
 1014cc4:	e0bfff17 	ldw	r2,-4(fp)
}
 1014cc8:	e037883a 	mov	sp,fp
 1014ccc:	dfc00117 	ldw	ra,4(sp)
 1014cd0:	df000017 	ldw	fp,0(sp)
 1014cd4:	dec00204 	addi	sp,sp,8
 1014cd8:	f800283a 	ret

01014cdc <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
 1014cdc:	f811883a 	mov	r8,ra
 1014ce0:	100c1d00 	call	100c1d0 <_mcount>
 1014ce4:	403f883a 	mov	ra,r8
 1014ce8:	defffc04 	addi	sp,sp,-16
 1014cec:	df000315 	stw	fp,12(sp)
 1014cf0:	df000304 	addi	fp,sp,12
 1014cf4:	e13ffd15 	stw	r4,-12(fp)
 1014cf8:	e17ffe15 	stw	r5,-8(fp)
 1014cfc:	e1bfff0d 	sth	r6,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
 1014d00:	e0bfff0b 	ldhu	r2,-4(fp)
 1014d04:	1080004c 	andi	r2,r2,1
 1014d08:	10803fcc 	andi	r2,r2,255
 1014d0c:	1005003a 	cmpeq	r2,r2,zero
 1014d10:	1000101e 	bne	r2,zero,1014d54 <OS_TaskStkClr+0x78>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
 1014d14:	e0bfff0b 	ldhu	r2,-4(fp)
 1014d18:	1080008c 	andi	r2,r2,2
 1014d1c:	1005003a 	cmpeq	r2,r2,zero
 1014d20:	10000c1e 	bne	r2,zero,1014d54 <OS_TaskStkClr+0x78>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 1014d24:	00000806 	br	1014d48 <OS_TaskStkClr+0x6c>
                size--;
 1014d28:	e0bffe17 	ldw	r2,-8(fp)
 1014d2c:	10bfffc4 	addi	r2,r2,-1
 1014d30:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
 1014d34:	e0bffd17 	ldw	r2,-12(fp)
 1014d38:	10000015 	stw	zero,0(r2)
 1014d3c:	e0bffd17 	ldw	r2,-12(fp)
 1014d40:	10800104 	addi	r2,r2,4
 1014d44:	e0bffd15 	stw	r2,-12(fp)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 1014d48:	e0bffe17 	ldw	r2,-8(fp)
 1014d4c:	1004c03a 	cmpne	r2,r2,zero
 1014d50:	103ff51e 	bne	r2,zero,1014d28 <OS_TaskStkClr+0x4c>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
 1014d54:	e037883a 	mov	sp,fp
 1014d58:	df000017 	ldw	fp,0(sp)
 1014d5c:	dec00104 	addi	sp,sp,4
 1014d60:	f800283a 	ret

01014d64 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
 1014d64:	f811883a 	mov	r8,ra
 1014d68:	100c1d00 	call	100c1d0 <_mcount>
 1014d6c:	403f883a 	mov	ra,r8
 1014d70:	defff904 	addi	sp,sp,-28
 1014d74:	dfc00615 	stw	ra,24(sp)
 1014d78:	df000515 	stw	fp,20(sp)
 1014d7c:	df000504 	addi	fp,sp,20
 1014d80:	e13fff0d 	sth	r4,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1014d84:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 1014d88:	008040f4 	movhi	r2,259
 1014d8c:	10970704 	addi	r2,r2,23580
 1014d90:	10800003 	ldbu	r2,0(r2)
 1014d94:	10803fcc 	andi	r2,r2,255
 1014d98:	1004c03a 	cmpne	r2,r2,zero
 1014d9c:	1000421e 	bne	r2,zero,1014ea8 <OSTimeDly+0x144>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
 1014da0:	e0bfff0b 	ldhu	r2,-4(fp)
 1014da4:	1005003a 	cmpeq	r2,r2,zero
 1014da8:	10003f1e 	bne	r2,zero,1014ea8 <OSTimeDly+0x144>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1014dac:	0005303a 	rdctl	r2,status
 1014db0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1014db4:	e0fffc17 	ldw	r3,-16(fp)
 1014db8:	00bfff84 	movi	r2,-2
 1014dbc:	1884703a 	and	r2,r3,r2
 1014dc0:	1001703a 	wrctl	status,r2
  
  return context;
 1014dc4:	e0bffc17 	ldw	r2,-16(fp)
        OS_ENTER_CRITICAL();
 1014dc8:	e0bffd15 	stw	r2,-12(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
 1014dcc:	008040f4 	movhi	r2,259
 1014dd0:	10970804 	addi	r2,r2,23584
 1014dd4:	10800017 	ldw	r2,0(r2)
 1014dd8:	10800d03 	ldbu	r2,52(r2)
 1014ddc:	e0bffe05 	stb	r2,-8(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 1014de0:	e13ffe03 	ldbu	r4,-8(fp)
 1014de4:	e0fffe03 	ldbu	r3,-8(fp)
 1014de8:	008040f4 	movhi	r2,259
 1014dec:	10970544 	addi	r2,r2,23573
 1014df0:	10c5883a 	add	r2,r2,r3
 1014df4:	10800003 	ldbu	r2,0(r2)
 1014df8:	1007883a 	mov	r3,r2
 1014dfc:	008040f4 	movhi	r2,259
 1014e00:	10970804 	addi	r2,r2,23584
 1014e04:	10800017 	ldw	r2,0(r2)
 1014e08:	10800d43 	ldbu	r2,53(r2)
 1014e0c:	0084303a 	nor	r2,zero,r2
 1014e10:	1884703a 	and	r2,r3,r2
 1014e14:	1007883a 	mov	r3,r2
 1014e18:	008040f4 	movhi	r2,259
 1014e1c:	10970544 	addi	r2,r2,23573
 1014e20:	1105883a 	add	r2,r2,r4
 1014e24:	10c00005 	stb	r3,0(r2)
        if (OSRdyTbl[y] == 0) {
 1014e28:	e0fffe03 	ldbu	r3,-8(fp)
 1014e2c:	008040f4 	movhi	r2,259
 1014e30:	10970544 	addi	r2,r2,23573
 1014e34:	10c5883a 	add	r2,r2,r3
 1014e38:	10800003 	ldbu	r2,0(r2)
 1014e3c:	10803fcc 	andi	r2,r2,255
 1014e40:	1004c03a 	cmpne	r2,r2,zero
 1014e44:	10000e1e 	bne	r2,zero,1014e80 <OSTimeDly+0x11c>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 1014e48:	008040f4 	movhi	r2,259
 1014e4c:	10970804 	addi	r2,r2,23584
 1014e50:	10800017 	ldw	r2,0(r2)
 1014e54:	10800d83 	ldbu	r2,54(r2)
 1014e58:	0084303a 	nor	r2,zero,r2
 1014e5c:	1007883a 	mov	r3,r2
 1014e60:	008040f4 	movhi	r2,259
 1014e64:	10970504 	addi	r2,r2,23572
 1014e68:	10800003 	ldbu	r2,0(r2)
 1014e6c:	1884703a 	and	r2,r3,r2
 1014e70:	1007883a 	mov	r3,r2
 1014e74:	008040f4 	movhi	r2,259
 1014e78:	10970504 	addi	r2,r2,23572
 1014e7c:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
 1014e80:	008040f4 	movhi	r2,259
 1014e84:	10970804 	addi	r2,r2,23584
 1014e88:	10c00017 	ldw	r3,0(r2)
 1014e8c:	e0bfff0b 	ldhu	r2,-4(fp)
 1014e90:	18800b8d 	sth	r2,46(r3)
 1014e94:	e0bffd17 	ldw	r2,-12(fp)
 1014e98:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1014e9c:	e0bffb17 	ldw	r2,-20(fp)
 1014ea0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
 1014ea4:	100e73c0 	call	100e73c <OS_Sched>
    }
}
 1014ea8:	e037883a 	mov	sp,fp
 1014eac:	dfc00117 	ldw	ra,4(sp)
 1014eb0:	df000017 	ldw	fp,0(sp)
 1014eb4:	dec00204 	addi	sp,sp,8
 1014eb8:	f800283a 	ret

01014ebc <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
 1014ebc:	f811883a 	mov	r8,ra
 1014ec0:	100c1d00 	call	100c1d0 <_mcount>
 1014ec4:	403f883a 	mov	ra,r8
 1014ec8:	defff504 	addi	sp,sp,-44
 1014ecc:	dfc00a15 	stw	ra,40(sp)
 1014ed0:	df000915 	stw	fp,36(sp)
 1014ed4:	dc400815 	stw	r17,32(sp)
 1014ed8:	dc000715 	stw	r16,28(sp)
 1014edc:	df000704 	addi	fp,sp,28
 1014ee0:	e13ffb05 	stb	r4,-20(fp)
 1014ee4:	e17ffc05 	stb	r5,-16(fp)
 1014ee8:	e1bffd05 	stb	r6,-12(fp)
 1014eec:	e1fffe0d 	sth	r7,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 1014ef0:	008040f4 	movhi	r2,259
 1014ef4:	10970704 	addi	r2,r2,23580
 1014ef8:	10800003 	ldbu	r2,0(r2)
 1014efc:	10803fcc 	andi	r2,r2,255
 1014f00:	1005003a 	cmpeq	r2,r2,zero
 1014f04:	1000031e 	bne	r2,zero,1014f14 <OSTimeDlyHMSM+0x58>
        return (OS_ERR_TIME_DLY_ISR);
 1014f08:	00801544 	movi	r2,85
 1014f0c:	e0bfff15 	stw	r2,-4(fp)
 1014f10:	00007b06 	br	1015100 <OSTimeDlyHMSM+0x244>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
 1014f14:	e0bffb03 	ldbu	r2,-20(fp)
 1014f18:	1004c03a 	cmpne	r2,r2,zero
 1014f1c:	10000c1e 	bne	r2,zero,1014f50 <OSTimeDlyHMSM+0x94>
        if (minutes == 0) {
 1014f20:	e0bffc03 	ldbu	r2,-16(fp)
 1014f24:	1004c03a 	cmpne	r2,r2,zero
 1014f28:	1000091e 	bne	r2,zero,1014f50 <OSTimeDlyHMSM+0x94>
            if (seconds == 0) {
 1014f2c:	e0bffd03 	ldbu	r2,-12(fp)
 1014f30:	1004c03a 	cmpne	r2,r2,zero
 1014f34:	1000061e 	bne	r2,zero,1014f50 <OSTimeDlyHMSM+0x94>
                if (ms == 0) {
 1014f38:	e0bffe0b 	ldhu	r2,-8(fp)
 1014f3c:	1004c03a 	cmpne	r2,r2,zero
 1014f40:	1000031e 	bne	r2,zero,1014f50 <OSTimeDlyHMSM+0x94>
                    return (OS_ERR_TIME_ZERO_DLY);
 1014f44:	00801504 	movi	r2,84
 1014f48:	e0bfff15 	stw	r2,-4(fp)
 1014f4c:	00006c06 	br	1015100 <OSTimeDlyHMSM+0x244>
                }
            }
        }
    }
    if (minutes > 59) {
 1014f50:	e0bffc03 	ldbu	r2,-16(fp)
 1014f54:	10800f30 	cmpltui	r2,r2,60
 1014f58:	1000031e 	bne	r2,zero,1014f68 <OSTimeDlyHMSM+0xac>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
 1014f5c:	00801444 	movi	r2,81
 1014f60:	e0bfff15 	stw	r2,-4(fp)
 1014f64:	00006606 	br	1015100 <OSTimeDlyHMSM+0x244>
    }
    if (seconds > 59) {
 1014f68:	e0bffd03 	ldbu	r2,-12(fp)
 1014f6c:	10800f30 	cmpltui	r2,r2,60
 1014f70:	1000031e 	bne	r2,zero,1014f80 <OSTimeDlyHMSM+0xc4>
        return (OS_ERR_TIME_INVALID_SECONDS);
 1014f74:	00801484 	movi	r2,82
 1014f78:	e0bfff15 	stw	r2,-4(fp)
 1014f7c:	00006006 	br	1015100 <OSTimeDlyHMSM+0x244>
    }
    if (ms > 999) {
 1014f80:	e0bffe0b 	ldhu	r2,-8(fp)
 1014f84:	1080fa30 	cmpltui	r2,r2,1000
 1014f88:	1000031e 	bne	r2,zero,1014f98 <OSTimeDlyHMSM+0xdc>
        return (OS_ERR_TIME_INVALID_MS);
 1014f8c:	008014c4 	movi	r2,83
 1014f90:	e0bfff15 	stw	r2,-4(fp)
 1014f94:	00005a06 	br	1015100 <OSTimeDlyHMSM+0x244>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
 1014f98:	e13ffb03 	ldbu	r4,-20(fp)
 1014f9c:	01438404 	movi	r5,3600
 1014fa0:	10021e00 	call	10021e0 <__mulsi3>
 1014fa4:	1021883a 	mov	r16,r2
 1014fa8:	e13ffc03 	ldbu	r4,-16(fp)
 1014fac:	01400f04 	movi	r5,60
 1014fb0:	10021e00 	call	10021e0 <__mulsi3>
 1014fb4:	8087883a 	add	r3,r16,r2
 1014fb8:	e0bffd03 	ldbu	r2,-12(fp)
 1014fbc:	1889883a 	add	r4,r3,r2
 1014fc0:	1001eb80 	call	1001eb8 <__floatunsidf>
 1014fc4:	100b883a 	mov	r5,r2
 1014fc8:	180d883a 	mov	r6,r3
 1014fcc:	2809883a 	mov	r4,r5
 1014fd0:	300b883a 	mov	r5,r6
 1014fd4:	000d883a 	mov	r6,zero
 1014fd8:	01d023f4 	movhi	r7,16527
 1014fdc:	39d00004 	addi	r7,r7,16384
 1014fe0:	100ae480 	call	100ae48 <__muldf3>
 1014fe4:	1009883a 	mov	r4,r2
 1014fe8:	180b883a 	mov	r5,r3
 1014fec:	2021883a 	mov	r16,r4
 1014ff0:	2823883a 	mov	r17,r5
 1014ff4:	e13ffe0b 	ldhu	r4,-8(fp)
 1014ff8:	1001eb80 	call	1001eb8 <__floatunsidf>
 1014ffc:	100b883a 	mov	r5,r2
 1015000:	180d883a 	mov	r6,r3
 1015004:	2809883a 	mov	r4,r5
 1015008:	300b883a 	mov	r5,r6
 101500c:	000d883a 	mov	r6,zero
 1015010:	01cff834 	movhi	r7,16352
 1015014:	100adc80 	call	100adc8 <__adddf3>
 1015018:	1009883a 	mov	r4,r2
 101501c:	180b883a 	mov	r5,r3
 1015020:	2005883a 	mov	r2,r4
 1015024:	2807883a 	mov	r3,r5
 1015028:	1009883a 	mov	r4,r2
 101502c:	180b883a 	mov	r5,r3
 1015030:	000d883a 	mov	r6,zero
 1015034:	01d023f4 	movhi	r7,16527
 1015038:	39d00004 	addi	r7,r7,16384
 101503c:	100ae480 	call	100ae48 <__muldf3>
 1015040:	1009883a 	mov	r4,r2
 1015044:	180b883a 	mov	r5,r3
 1015048:	2005883a 	mov	r2,r4
 101504c:	2807883a 	mov	r3,r5
 1015050:	1009883a 	mov	r4,r2
 1015054:	180b883a 	mov	r5,r3
 1015058:	000d883a 	mov	r6,zero
 101505c:	01d023f4 	movhi	r7,16527
 1015060:	39d00004 	addi	r7,r7,16384
 1015064:	1001c540 	call	1001c54 <__divdf3>
 1015068:	1009883a 	mov	r4,r2
 101506c:	180b883a 	mov	r5,r3
 1015070:	2005883a 	mov	r2,r4
 1015074:	2807883a 	mov	r3,r5
 1015078:	8009883a 	mov	r4,r16
 101507c:	880b883a 	mov	r5,r17
 1015080:	100d883a 	mov	r6,r2
 1015084:	180f883a 	mov	r7,r3
 1015088:	100adc80 	call	100adc8 <__adddf3>
 101508c:	1009883a 	mov	r4,r2
 1015090:	180b883a 	mov	r5,r3
 1015094:	2005883a 	mov	r2,r4
 1015098:	2807883a 	mov	r3,r5
 101509c:	1009883a 	mov	r4,r2
 10150a0:	180b883a 	mov	r5,r3
 10150a4:	1019a200 	call	1019a20 <__fixunsdfsi>
 10150a8:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
 10150ac:	e0bffa17 	ldw	r2,-24(fp)
 10150b0:	1004d43a 	srli	r2,r2,16
 10150b4:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
 10150b8:	e0bffa17 	ldw	r2,-24(fp)
 10150bc:	10bfffcc 	andi	r2,r2,65535
 10150c0:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
 10150c4:	e0bffa17 	ldw	r2,-24(fp)
 10150c8:	113fffcc 	andi	r4,r2,65535
 10150cc:	1014d640 	call	1014d64 <OSTimeDly>
    while (loops > 0) {
 10150d0:	00000706 	br	10150f0 <OSTimeDlyHMSM+0x234>
        OSTimeDly((INT16U)32768u);
 10150d4:	01200014 	movui	r4,32768
 10150d8:	1014d640 	call	1014d64 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
 10150dc:	01200014 	movui	r4,32768
 10150e0:	1014d640 	call	1014d64 <OSTimeDly>
        loops--;
 10150e4:	e0bff90b 	ldhu	r2,-28(fp)
 10150e8:	10bfffc4 	addi	r2,r2,-1
 10150ec:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
 10150f0:	e0bff90b 	ldhu	r2,-28(fp)
 10150f4:	1004c03a 	cmpne	r2,r2,zero
 10150f8:	103ff61e 	bne	r2,zero,10150d4 <OSTimeDlyHMSM+0x218>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
 10150fc:	e03fff15 	stw	zero,-4(fp)
 1015100:	e0bfff17 	ldw	r2,-4(fp)
}
 1015104:	e037883a 	mov	sp,fp
 1015108:	dfc00317 	ldw	ra,12(sp)
 101510c:	df000217 	ldw	fp,8(sp)
 1015110:	dc400117 	ldw	r17,4(sp)
 1015114:	dc000017 	ldw	r16,0(sp)
 1015118:	dec00404 	addi	sp,sp,16
 101511c:	f800283a 	ret

01015120 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
 1015120:	f811883a 	mov	r8,ra
 1015124:	100c1d00 	call	100c1d0 <_mcount>
 1015128:	403f883a 	mov	ra,r8
 101512c:	defff404 	addi	sp,sp,-48
 1015130:	dfc00b15 	stw	ra,44(sp)
 1015134:	df000a15 	stw	fp,40(sp)
 1015138:	df000a04 	addi	fp,sp,40
 101513c:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 1015140:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
 1015144:	e0bffe03 	ldbu	r2,-8(fp)
 1015148:	10800530 	cmpltui	r2,r2,20
 101514c:	1000031e 	bne	r2,zero,101515c <OSTimeDlyResume+0x3c>
        return (OS_ERR_PRIO_INVALID);
 1015150:	00800a84 	movi	r2,42
 1015154:	e0bfff15 	stw	r2,-4(fp)
 1015158:	00007206 	br	1015324 <OSTimeDlyResume+0x204>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101515c:	0005303a 	rdctl	r2,status
 1015160:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1015164:	e0fffb17 	ldw	r3,-20(fp)
 1015168:	00bfff84 	movi	r2,-2
 101516c:	1884703a 	and	r2,r3,r2
 1015170:	1001703a 	wrctl	status,r2
  
  return context;
 1015174:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 1015178:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
 101517c:	e0bffe03 	ldbu	r2,-8(fp)
 1015180:	00c04134 	movhi	r3,260
 1015184:	18de7204 	addi	r3,r3,31176
 1015188:	1085883a 	add	r2,r2,r2
 101518c:	1085883a 	add	r2,r2,r2
 1015190:	10c5883a 	add	r2,r2,r3
 1015194:	10800017 	ldw	r2,0(r2)
 1015198:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {
 101519c:	e0bffd17 	ldw	r2,-12(fp)
 10151a0:	1004c03a 	cmpne	r2,r2,zero
 10151a4:	1000071e 	bne	r2,zero,10151c4 <OSTimeDlyResume+0xa4>
 10151a8:	e0bffc17 	ldw	r2,-16(fp)
 10151ac:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10151b0:	e0bffa17 	ldw	r2,-24(fp)
 10151b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 10151b8:	008010c4 	movi	r2,67
 10151bc:	e0bfff15 	stw	r2,-4(fp)
 10151c0:	00005806 	br	1015324 <OSTimeDlyResume+0x204>
    }
    if (ptcb == OS_TCB_RESERVED) {
 10151c4:	e0bffd17 	ldw	r2,-12(fp)
 10151c8:	10800058 	cmpnei	r2,r2,1
 10151cc:	1000071e 	bne	r2,zero,10151ec <OSTimeDlyResume+0xcc>
 10151d0:	e0bffc17 	ldw	r2,-16(fp)
 10151d4:	e0bff915 	stw	r2,-28(fp)
 10151d8:	e0bff917 	ldw	r2,-28(fp)
 10151dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 10151e0:	008010c4 	movi	r2,67
 10151e4:	e0bfff15 	stw	r2,-4(fp)
 10151e8:	00004e06 	br	1015324 <OSTimeDlyResume+0x204>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
 10151ec:	e0bffd17 	ldw	r2,-12(fp)
 10151f0:	10800b8b 	ldhu	r2,46(r2)
 10151f4:	10bfffcc 	andi	r2,r2,65535
 10151f8:	1004c03a 	cmpne	r2,r2,zero
 10151fc:	1000071e 	bne	r2,zero,101521c <OSTimeDlyResume+0xfc>
 1015200:	e0bffc17 	ldw	r2,-16(fp)
 1015204:	e0bff815 	stw	r2,-32(fp)
 1015208:	e0bff817 	ldw	r2,-32(fp)
 101520c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
 1015210:	00801404 	movi	r2,80
 1015214:	e0bfff15 	stw	r2,-4(fp)
 1015218:	00004206 	br	1015324 <OSTimeDlyResume+0x204>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
 101521c:	e0bffd17 	ldw	r2,-12(fp)
 1015220:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 1015224:	e0bffd17 	ldw	r2,-12(fp)
 1015228:	10800c03 	ldbu	r2,48(r2)
 101522c:	10803fcc 	andi	r2,r2,255
 1015230:	10800dcc 	andi	r2,r2,55
 1015234:	1005003a 	cmpeq	r2,r2,zero
 1015238:	10000b1e 	bne	r2,zero,1015268 <OSTimeDlyResume+0x148>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
 101523c:	e0bffd17 	ldw	r2,-12(fp)
 1015240:	10c00c03 	ldbu	r3,48(r2)
 1015244:	00bff204 	movi	r2,-56
 1015248:	1884703a 	and	r2,r3,r2
 101524c:	1007883a 	mov	r3,r2
 1015250:	e0bffd17 	ldw	r2,-12(fp)
 1015254:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
 1015258:	e0fffd17 	ldw	r3,-12(fp)
 101525c:	00800044 	movi	r2,1
 1015260:	18800c45 	stb	r2,49(r3)
 1015264:	00000206 	br	1015270 <OSTimeDlyResume+0x150>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
 1015268:	e0bffd17 	ldw	r2,-12(fp)
 101526c:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
 1015270:	e0bffd17 	ldw	r2,-12(fp)
 1015274:	10800c03 	ldbu	r2,48(r2)
 1015278:	10803fcc 	andi	r2,r2,255
 101527c:	1080020c 	andi	r2,r2,8
 1015280:	1004c03a 	cmpne	r2,r2,zero
 1015284:	1000221e 	bne	r2,zero,1015310 <OSTimeDlyResume+0x1f0>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
 1015288:	e0bffd17 	ldw	r2,-12(fp)
 101528c:	10c00d83 	ldbu	r3,54(r2)
 1015290:	008040f4 	movhi	r2,259
 1015294:	10970504 	addi	r2,r2,23572
 1015298:	10800003 	ldbu	r2,0(r2)
 101529c:	1884b03a 	or	r2,r3,r2
 10152a0:	1007883a 	mov	r3,r2
 10152a4:	008040f4 	movhi	r2,259
 10152a8:	10970504 	addi	r2,r2,23572
 10152ac:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 10152b0:	e0bffd17 	ldw	r2,-12(fp)
 10152b4:	10800d03 	ldbu	r2,52(r2)
 10152b8:	11003fcc 	andi	r4,r2,255
 10152bc:	e0bffd17 	ldw	r2,-12(fp)
 10152c0:	10800d03 	ldbu	r2,52(r2)
 10152c4:	10c03fcc 	andi	r3,r2,255
 10152c8:	008040f4 	movhi	r2,259
 10152cc:	10970544 	addi	r2,r2,23573
 10152d0:	10c5883a 	add	r2,r2,r3
 10152d4:	10c00003 	ldbu	r3,0(r2)
 10152d8:	e0bffd17 	ldw	r2,-12(fp)
 10152dc:	10800d43 	ldbu	r2,53(r2)
 10152e0:	1884b03a 	or	r2,r3,r2
 10152e4:	1007883a 	mov	r3,r2
 10152e8:	008040f4 	movhi	r2,259
 10152ec:	10970544 	addi	r2,r2,23573
 10152f0:	1105883a 	add	r2,r2,r4
 10152f4:	10c00005 	stb	r3,0(r2)
 10152f8:	e0bffc17 	ldw	r2,-16(fp)
 10152fc:	e0bff715 	stw	r2,-36(fp)
 1015300:	e0bff717 	ldw	r2,-36(fp)
 1015304:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
 1015308:	100e73c0 	call	100e73c <OS_Sched>
 101530c:	00000406 	br	1015320 <OSTimeDlyResume+0x200>
 1015310:	e0bffc17 	ldw	r2,-16(fp)
 1015314:	e0bff615 	stw	r2,-40(fp)
 1015318:	e0bff617 	ldw	r2,-40(fp)
 101531c:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
 1015320:	e03fff15 	stw	zero,-4(fp)
 1015324:	e0bfff17 	ldw	r2,-4(fp)
}
 1015328:	e037883a 	mov	sp,fp
 101532c:	dfc00117 	ldw	ra,4(sp)
 1015330:	df000017 	ldw	fp,0(sp)
 1015334:	dec00204 	addi	sp,sp,8
 1015338:	f800283a 	ret

0101533c <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
 101533c:	f811883a 	mov	r8,ra
 1015340:	100c1d00 	call	100c1d0 <_mcount>
 1015344:	403f883a 	mov	ra,r8
 1015348:	defffb04 	addi	sp,sp,-20
 101534c:	df000415 	stw	fp,16(sp)
 1015350:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1015354:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1015358:	0005303a 	rdctl	r2,status
 101535c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1015360:	e0fffd17 	ldw	r3,-12(fp)
 1015364:	00bfff84 	movi	r2,-2
 1015368:	1884703a 	and	r2,r3,r2
 101536c:	1001703a 	wrctl	status,r2
  
  return context;
 1015370:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 1015374:	e0bffe15 	stw	r2,-8(fp)
    ticks = OSTime;
 1015378:	008040f4 	movhi	r2,259
 101537c:	10970a04 	addi	r2,r2,23592
 1015380:	10800017 	ldw	r2,0(r2)
 1015384:	e0bfff15 	stw	r2,-4(fp)
 1015388:	e0bffe17 	ldw	r2,-8(fp)
 101538c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1015390:	e0bffc17 	ldw	r2,-16(fp)
 1015394:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
 1015398:	e0bfff17 	ldw	r2,-4(fp)
}
 101539c:	e037883a 	mov	sp,fp
 10153a0:	df000017 	ldw	fp,0(sp)
 10153a4:	dec00104 	addi	sp,sp,4
 10153a8:	f800283a 	ret

010153ac <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
 10153ac:	f811883a 	mov	r8,ra
 10153b0:	100c1d00 	call	100c1d0 <_mcount>
 10153b4:	403f883a 	mov	ra,r8
 10153b8:	defffb04 	addi	sp,sp,-20
 10153bc:	df000415 	stw	fp,16(sp)
 10153c0:	df000404 	addi	fp,sp,16
 10153c4:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 10153c8:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10153cc:	0005303a 	rdctl	r2,status
 10153d0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10153d4:	e0fffd17 	ldw	r3,-12(fp)
 10153d8:	00bfff84 	movi	r2,-2
 10153dc:	1884703a 	and	r2,r3,r2
 10153e0:	1001703a 	wrctl	status,r2
  
  return context;
 10153e4:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 10153e8:	e0bffe15 	stw	r2,-8(fp)
    OSTime = ticks;
 10153ec:	00c040f4 	movhi	r3,259
 10153f0:	18d70a04 	addi	r3,r3,23592
 10153f4:	e0bfff17 	ldw	r2,-4(fp)
 10153f8:	18800015 	stw	r2,0(r3)
 10153fc:	e0bffe17 	ldw	r2,-8(fp)
 1015400:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1015404:	e0bffc17 	ldw	r2,-16(fp)
 1015408:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 101540c:	e037883a 	mov	sp,fp
 1015410:	df000017 	ldw	fp,0(sp)
 1015414:	dec00104 	addi	sp,sp,4
 1015418:	f800283a 	ret

0101541c <OSTmrCreate>:
                      INT8U            opt,
                      OS_TMR_CALLBACK  callback,
                      void            *callback_arg,
                      INT8U           *pname,
                      INT8U           *perr)
{
 101541c:	f811883a 	mov	r8,ra
 1015420:	100c1d00 	call	100c1d0 <_mcount>
 1015424:	403f883a 	mov	ra,r8
 1015428:	defff604 	addi	sp,sp,-40
 101542c:	dfc00915 	stw	ra,36(sp)
 1015430:	df000815 	stw	fp,32(sp)
 1015434:	df000804 	addi	fp,sp,32
 1015438:	e13ffa15 	stw	r4,-24(fp)
 101543c:	e17ffb15 	stw	r5,-20(fp)
 1015440:	e1fffd15 	stw	r7,-12(fp)
 1015444:	e1bffc05 	stb	r6,-16(fp)
    INT8U     len;
#endif


#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                               /* Validate arguments                                     */
 1015448:	e0800417 	ldw	r2,16(fp)
 101544c:	1004c03a 	cmpne	r2,r2,zero
 1015450:	1000021e 	bne	r2,zero,101545c <OSTmrCreate+0x40>
        return ((OS_TMR *)0);
 1015454:	e03fff15 	stw	zero,-4(fp)
 1015458:	00006606 	br	10155f4 <OSTmrCreate+0x1d8>
    }
    switch (opt) {
 101545c:	e0bffc03 	ldbu	r2,-16(fp)
 1015460:	e0bffe15 	stw	r2,-8(fp)
 1015464:	e0fffe17 	ldw	r3,-8(fp)
 1015468:	18800060 	cmpeqi	r2,r3,1
 101546c:	10000c1e 	bne	r2,zero,10154a0 <OSTmrCreate+0x84>
 1015470:	e0fffe17 	ldw	r3,-8(fp)
 1015474:	188000a0 	cmpeqi	r2,r3,2
 1015478:	1000011e 	bne	r2,zero,1015480 <OSTmrCreate+0x64>
 101547c:	00001006 	br	10154c0 <OSTmrCreate+0xa4>
        case OS_TMR_OPT_PERIODIC:
             if (period == 0) {
 1015480:	e0bffb17 	ldw	r2,-20(fp)
 1015484:	1004c03a 	cmpne	r2,r2,zero
 1015488:	1000121e 	bne	r2,zero,10154d4 <OSTmrCreate+0xb8>
                 *perr = OS_ERR_TMR_INVALID_PERIOD;
 101548c:	e0c00417 	ldw	r3,16(fp)
 1015490:	00bfe0c4 	movi	r2,-125
 1015494:	18800005 	stb	r2,0(r3)
                 return ((OS_TMR *)0);
 1015498:	e03fff15 	stw	zero,-4(fp)
 101549c:	00005506 	br	10155f4 <OSTmrCreate+0x1d8>
             }
             break;

        case OS_TMR_OPT_ONE_SHOT:
             if (dly == 0) {
 10154a0:	e0bffa17 	ldw	r2,-24(fp)
 10154a4:	1004c03a 	cmpne	r2,r2,zero
 10154a8:	10000a1e 	bne	r2,zero,10154d4 <OSTmrCreate+0xb8>
                 *perr = OS_ERR_TMR_INVALID_DLY;
 10154ac:	e0c00417 	ldw	r3,16(fp)
 10154b0:	00bfe084 	movi	r2,-126
 10154b4:	18800005 	stb	r2,0(r3)
                 return ((OS_TMR *)0);
 10154b8:	e03fff15 	stw	zero,-4(fp)
 10154bc:	00004d06 	br	10155f4 <OSTmrCreate+0x1d8>
             }
             break;

        default:
             *perr = OS_ERR_TMR_INVALID_OPT;
 10154c0:	e0c00417 	ldw	r3,16(fp)
 10154c4:	00bfe104 	movi	r2,-124
 10154c8:	18800005 	stb	r2,0(r3)
             return ((OS_TMR *)0);
 10154cc:	e03fff15 	stw	zero,-4(fp)
 10154d0:	00004806 	br	10155f4 <OSTmrCreate+0x1d8>
    }
#endif
    if (OSIntNesting > 0) {                                 /* See if trying to call from an ISR                      */
 10154d4:	008040f4 	movhi	r2,259
 10154d8:	10970704 	addi	r2,r2,23580
 10154dc:	10800003 	ldbu	r2,0(r2)
 10154e0:	10803fcc 	andi	r2,r2,255
 10154e4:	1005003a 	cmpeq	r2,r2,zero
 10154e8:	1000051e 	bne	r2,zero,1015500 <OSTmrCreate+0xe4>
        *perr  = OS_ERR_TMR_ISR;
 10154ec:	e0c00417 	ldw	r3,16(fp)
 10154f0:	00bfe2c4 	movi	r2,-117
 10154f4:	18800005 	stb	r2,0(r3)
        return ((OS_TMR *)0);
 10154f8:	e03fff15 	stw	zero,-4(fp)
 10154fc:	00003d06 	br	10155f4 <OSTmrCreate+0x1d8>
    }
    OSTmr_Lock();
 1015500:	10166740 	call	1016674 <OSTmr_Lock>
    ptmr = OSTmr_Alloc();                                   /* Obtain a timer from the free pool                      */
 1015504:	10160240 	call	1016024 <OSTmr_Alloc>
 1015508:	e0bff915 	stw	r2,-28(fp)
    if (ptmr == (OS_TMR *)0) {
 101550c:	e0bff917 	ldw	r2,-28(fp)
 1015510:	1004c03a 	cmpne	r2,r2,zero
 1015514:	1000061e 	bne	r2,zero,1015530 <OSTmrCreate+0x114>
        OSTmr_Unlock();
 1015518:	10166bc0 	call	10166bc <OSTmr_Unlock>
        *perr = OS_ERR_TMR_NON_AVAIL;
 101551c:	e0c00417 	ldw	r3,16(fp)
 1015520:	00bfe184 	movi	r2,-122
 1015524:	18800005 	stb	r2,0(r3)
        return ((OS_TMR *)0);
 1015528:	e03fff15 	stw	zero,-4(fp)
 101552c:	00003106 	br	10155f4 <OSTmrCreate+0x1d8>
    }
    ptmr->OSTmrState       = OS_TMR_STATE_STOPPED;          /* Indicate that timer is not running yet                 */
 1015530:	e0fff917 	ldw	r3,-28(fp)
 1015534:	00800044 	movi	r2,1
 1015538:	18800c45 	stb	r2,49(r3)
    ptmr->OSTmrDly         = dly;
 101553c:	e0fff917 	ldw	r3,-28(fp)
 1015540:	e0bffa17 	ldw	r2,-24(fp)
 1015544:	18800615 	stw	r2,24(r3)
    ptmr->OSTmrPeriod      = period;
 1015548:	e0fff917 	ldw	r3,-28(fp)
 101554c:	e0bffb17 	ldw	r2,-20(fp)
 1015550:	18800715 	stw	r2,28(r3)
    ptmr->OSTmrOpt         = opt;
 1015554:	e0fff917 	ldw	r3,-28(fp)
 1015558:	e0bffc03 	ldbu	r2,-16(fp)
 101555c:	18800c05 	stb	r2,48(r3)
    ptmr->OSTmrCallback    = callback;
 1015560:	e0fff917 	ldw	r3,-28(fp)
 1015564:	e0bffd17 	ldw	r2,-12(fp)
 1015568:	18800115 	stw	r2,4(r3)
    ptmr->OSTmrCallbackArg = callback_arg;
 101556c:	e0fff917 	ldw	r3,-28(fp)
 1015570:	e0800217 	ldw	r2,8(fp)
 1015574:	18800215 	stw	r2,8(r3)
#if OS_TMR_CFG_NAME_SIZE > 0
    if (pname !=(INT8U *)0) {
 1015578:	e0800317 	ldw	r2,12(fp)
 101557c:	1005003a 	cmpeq	r2,r2,zero
 1015580:	1000171e 	bne	r2,zero,10155e0 <OSTmrCreate+0x1c4>
        len = OS_StrLen(pname);                             /* Copy timer name                                        */
 1015584:	e1000317 	ldw	r4,12(fp)
 1015588:	100e9240 	call	100e924 <OS_StrLen>
 101558c:	e0bff805 	stb	r2,-32(fp)
        if (len < OS_TMR_CFG_NAME_SIZE) {
 1015590:	e0bff803 	ldbu	r2,-32(fp)
 1015594:	10800428 	cmpgeui	r2,r2,16
 1015598:	1000051e 	bne	r2,zero,10155b0 <OSTmrCreate+0x194>
            (void)OS_StrCopy(ptmr->OSTmrName, pname);
 101559c:	e0bff917 	ldw	r2,-28(fp)
 10155a0:	11000804 	addi	r4,r2,32
 10155a4:	e1400317 	ldw	r5,12(fp)
 10155a8:	100e8980 	call	100e898 <OS_StrCopy>
 10155ac:	00000c06 	br	10155e0 <OSTmrCreate+0x1c4>
        } else {
#if OS_TMR_CFG_NAME_SIZE > 1
            ptmr->OSTmrName[0] = '#';                       /* Invalid size specified                                 */
 10155b0:	e0fff917 	ldw	r3,-28(fp)
 10155b4:	008008c4 	movi	r2,35
 10155b8:	18800805 	stb	r2,32(r3)
            ptmr->OSTmrName[1] = OS_ASCII_NUL;
 10155bc:	e0bff917 	ldw	r2,-28(fp)
 10155c0:	10000845 	stb	zero,33(r2)
#endif
            *perr              = OS_ERR_TMR_NAME_TOO_LONG;
 10155c4:	e0c00417 	ldw	r3,16(fp)
 10155c8:	00bfe304 	movi	r2,-116
 10155cc:	18800005 	stb	r2,0(r3)
            OSTmr_Unlock();
 10155d0:	10166bc0 	call	10166bc <OSTmr_Unlock>
            return (ptmr);
 10155d4:	e0bff917 	ldw	r2,-28(fp)
 10155d8:	e0bfff15 	stw	r2,-4(fp)
 10155dc:	00000506 	br	10155f4 <OSTmrCreate+0x1d8>
        }
    }
#endif
    OSTmr_Unlock();
 10155e0:	10166bc0 	call	10166bc <OSTmr_Unlock>
    *perr = OS_ERR_NONE;
 10155e4:	e0800417 	ldw	r2,16(fp)
 10155e8:	10000005 	stb	zero,0(r2)
    return (ptmr);
 10155ec:	e0fff917 	ldw	r3,-28(fp)
 10155f0:	e0ffff15 	stw	r3,-4(fp)
 10155f4:	e0bfff17 	ldw	r2,-4(fp)
}
 10155f8:	e037883a 	mov	sp,fp
 10155fc:	dfc00117 	ldw	ra,4(sp)
 1015600:	df000017 	ldw	fp,0(sp)
 1015604:	dec00204 	addi	sp,sp,8
 1015608:	f800283a 	ret

0101560c <OSTmrDel>:
*/

#if OS_TMR_EN > 0
BOOLEAN  OSTmrDel (OS_TMR  *ptmr,
                   INT8U   *perr)
{
 101560c:	f811883a 	mov	r8,ra
 1015610:	100c1d00 	call	100c1d0 <_mcount>
 1015614:	403f883a 	mov	ra,r8
 1015618:	defffa04 	addi	sp,sp,-24
 101561c:	dfc00515 	stw	ra,20(sp)
 1015620:	df000415 	stw	fp,16(sp)
 1015624:	df000404 	addi	fp,sp,16
 1015628:	e13ffc15 	stw	r4,-16(fp)
 101562c:	e17ffd15 	stw	r5,-12(fp)
#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                               /* Validate arguments                                     */
 1015630:	e0bffd17 	ldw	r2,-12(fp)
 1015634:	1004c03a 	cmpne	r2,r2,zero
 1015638:	1000021e 	bne	r2,zero,1015644 <OSTmrDel+0x38>
        return (OS_FALSE);
 101563c:	e03fff15 	stw	zero,-4(fp)
 1015640:	00004d06 	br	1015778 <OSTmrDel+0x16c>
    }
    if (ptmr == (OS_TMR *)0) {
 1015644:	e0bffc17 	ldw	r2,-16(fp)
 1015648:	1004c03a 	cmpne	r2,r2,zero
 101564c:	1000051e 	bne	r2,zero,1015664 <OSTmrDel+0x58>
        *perr = OS_ERR_TMR_INVALID;
 1015650:	e0fffd17 	ldw	r3,-12(fp)
 1015654:	00bfe284 	movi	r2,-118
 1015658:	18800005 	stb	r2,0(r3)
        return (OS_FALSE);
 101565c:	e03fff15 	stw	zero,-4(fp)
 1015660:	00004506 	br	1015778 <OSTmrDel+0x16c>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {                   /* Validate timer structure                               */
 1015664:	e0bffc17 	ldw	r2,-16(fp)
 1015668:	10800003 	ldbu	r2,0(r2)
 101566c:	10803fcc 	andi	r2,r2,255
 1015670:	10801920 	cmpeqi	r2,r2,100
 1015674:	1000051e 	bne	r2,zero,101568c <OSTmrDel+0x80>
        *perr = OS_ERR_TMR_INVALID_TYPE;
 1015678:	e0fffd17 	ldw	r3,-12(fp)
 101567c:	00bfe244 	movi	r2,-119
 1015680:	18800005 	stb	r2,0(r3)
        return (OS_FALSE);
 1015684:	e03fff15 	stw	zero,-4(fp)
 1015688:	00003b06 	br	1015778 <OSTmrDel+0x16c>
    }
    if (OSIntNesting > 0) {                                 /* See if trying to call from an ISR                      */
 101568c:	008040f4 	movhi	r2,259
 1015690:	10970704 	addi	r2,r2,23580
 1015694:	10800003 	ldbu	r2,0(r2)
 1015698:	10803fcc 	andi	r2,r2,255
 101569c:	1005003a 	cmpeq	r2,r2,zero
 10156a0:	1000051e 	bne	r2,zero,10156b8 <OSTmrDel+0xac>
        *perr  = OS_ERR_TMR_ISR;
 10156a4:	e0fffd17 	ldw	r3,-12(fp)
 10156a8:	00bfe2c4 	movi	r2,-117
 10156ac:	18800005 	stb	r2,0(r3)
        return (OS_FALSE);
 10156b0:	e03fff15 	stw	zero,-4(fp)
 10156b4:	00003006 	br	1015778 <OSTmrDel+0x16c>
    }
    OSTmr_Lock();
 10156b8:	10166740 	call	1016674 <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
 10156bc:	e0bffc17 	ldw	r2,-16(fp)
 10156c0:	10800c43 	ldbu	r2,49(r2)
 10156c4:	10803fcc 	andi	r2,r2,255
 10156c8:	e0bffe15 	stw	r2,-8(fp)
 10156cc:	e0fffe17 	ldw	r3,-8(fp)
 10156d0:	188000c8 	cmpgei	r2,r3,3
 10156d4:	1000071e 	bne	r2,zero,10156f4 <OSTmrDel+0xe8>
 10156d8:	e0fffe17 	ldw	r3,-8(fp)
 10156dc:	18800048 	cmpgei	r2,r3,1
 10156e0:	1000121e 	bne	r2,zero,101572c <OSTmrDel+0x120>
 10156e4:	e0fffe17 	ldw	r3,-8(fp)
 10156e8:	1805003a 	cmpeq	r2,r3,zero
 10156ec:	1000171e 	bne	r2,zero,101574c <OSTmrDel+0x140>
 10156f0:	00001c06 	br	1015764 <OSTmrDel+0x158>
 10156f4:	e0fffe17 	ldw	r3,-8(fp)
 10156f8:	188000e0 	cmpeqi	r2,r3,3
 10156fc:	1000011e 	bne	r2,zero,1015704 <OSTmrDel+0xf8>
 1015700:	00001806 	br	1015764 <OSTmrDel+0x158>
        case OS_TMR_STATE_RUNNING:
             OSTmr_Unlink(ptmr);                            /* Remove from current wheel spoke                        */
 1015704:	e13ffc17 	ldw	r4,-16(fp)
 1015708:	101656c0 	call	101656c <OSTmr_Unlink>
             OSTmr_Free(ptmr);                              /* Return timer to free list of timers                    */
 101570c:	e13ffc17 	ldw	r4,-16(fp)
 1015710:	10160ec0 	call	10160ec <OSTmr_Free>
             OSTmr_Unlock();
 1015714:	10166bc0 	call	10166bc <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
 1015718:	e0bffd17 	ldw	r2,-12(fp)
 101571c:	10000005 	stb	zero,0(r2)
             return (OS_TRUE);
 1015720:	00800044 	movi	r2,1
 1015724:	e0bfff15 	stw	r2,-4(fp)
 1015728:	00001306 	br	1015778 <OSTmrDel+0x16c>

        case OS_TMR_STATE_STOPPED:                          /* Timer has not started or ...                           */
        case OS_TMR_STATE_COMPLETED:                        /* ... timer has completed the ONE-SHOT time              */
             OSTmr_Free(ptmr);                              /* Return timer to free list of timers                    */
 101572c:	e13ffc17 	ldw	r4,-16(fp)
 1015730:	10160ec0 	call	10160ec <OSTmr_Free>
             OSTmr_Unlock();
 1015734:	10166bc0 	call	10166bc <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
 1015738:	e0bffd17 	ldw	r2,-12(fp)
 101573c:	10000005 	stb	zero,0(r2)
             return (OS_TRUE);
 1015740:	00c00044 	movi	r3,1
 1015744:	e0ffff15 	stw	r3,-4(fp)
 1015748:	00000b06 	br	1015778 <OSTmrDel+0x16c>

        case OS_TMR_STATE_UNUSED:                           /* Already deleted                                        */
             OSTmr_Unlock();
 101574c:	10166bc0 	call	10166bc <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
 1015750:	e0fffd17 	ldw	r3,-12(fp)
 1015754:	00bfe1c4 	movi	r2,-121
 1015758:	18800005 	stb	r2,0(r3)
             return (OS_FALSE);
 101575c:	e03fff15 	stw	zero,-4(fp)
 1015760:	00000506 	br	1015778 <OSTmrDel+0x16c>

        default:
             OSTmr_Unlock();
 1015764:	10166bc0 	call	10166bc <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
 1015768:	e0fffd17 	ldw	r3,-12(fp)
 101576c:	00bfe344 	movi	r2,-115
 1015770:	18800005 	stb	r2,0(r3)
             return (OS_FALSE);
 1015774:	e03fff15 	stw	zero,-4(fp)
 1015778:	e0bfff17 	ldw	r2,-4(fp)
    }
}
 101577c:	e037883a 	mov	sp,fp
 1015780:	dfc00117 	ldw	ra,4(sp)
 1015784:	df000017 	ldw	fp,0(sp)
 1015788:	dec00204 	addi	sp,sp,8
 101578c:	f800283a 	ret

01015790 <OSTmrNameGet>:

#if OS_TMR_EN > 0 && OS_TMR_CFG_NAME_SIZE > 0
INT8U  OSTmrNameGet (OS_TMR  *ptmr,
                     INT8U   *pdest,
                     INT8U   *perr)
{
 1015790:	f811883a 	mov	r8,ra
 1015794:	100c1d00 	call	100c1d0 <_mcount>
 1015798:	403f883a 	mov	ra,r8
 101579c:	defff804 	addi	sp,sp,-32
 10157a0:	dfc00715 	stw	ra,28(sp)
 10157a4:	df000615 	stw	fp,24(sp)
 10157a8:	df000604 	addi	fp,sp,24
 10157ac:	e13ffb15 	stw	r4,-20(fp)
 10157b0:	e17ffc15 	stw	r5,-16(fp)
 10157b4:	e1bffd15 	stw	r6,-12(fp)
    INT8U  len;


#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {
 10157b8:	e0bffd17 	ldw	r2,-12(fp)
 10157bc:	1004c03a 	cmpne	r2,r2,zero
 10157c0:	1000021e 	bne	r2,zero,10157cc <OSTmrNameGet+0x3c>
        return (0);
 10157c4:	e03fff15 	stw	zero,-4(fp)
 10157c8:	00004906 	br	10158f0 <OSTmrNameGet+0x160>
    }
    if (pdest == (INT8U *)0) {
 10157cc:	e0bffc17 	ldw	r2,-16(fp)
 10157d0:	1004c03a 	cmpne	r2,r2,zero
 10157d4:	1000051e 	bne	r2,zero,10157ec <OSTmrNameGet+0x5c>
        *perr = OS_ERR_TMR_INVALID_DEST;
 10157d8:	e0fffd17 	ldw	r3,-12(fp)
 10157dc:	00bfe204 	movi	r2,-120
 10157e0:	18800005 	stb	r2,0(r3)
        return (0);
 10157e4:	e03fff15 	stw	zero,-4(fp)
 10157e8:	00004106 	br	10158f0 <OSTmrNameGet+0x160>
    }
    if (ptmr == (OS_TMR *)0) {
 10157ec:	e0bffb17 	ldw	r2,-20(fp)
 10157f0:	1004c03a 	cmpne	r2,r2,zero
 10157f4:	1000051e 	bne	r2,zero,101580c <OSTmrNameGet+0x7c>
        *perr = OS_ERR_TMR_INVALID;
 10157f8:	e0fffd17 	ldw	r3,-12(fp)
 10157fc:	00bfe284 	movi	r2,-118
 1015800:	18800005 	stb	r2,0(r3)
        return (0);
 1015804:	e03fff15 	stw	zero,-4(fp)
 1015808:	00003906 	br	10158f0 <OSTmrNameGet+0x160>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
 101580c:	e0bffb17 	ldw	r2,-20(fp)
 1015810:	10800003 	ldbu	r2,0(r2)
 1015814:	10803fcc 	andi	r2,r2,255
 1015818:	10801920 	cmpeqi	r2,r2,100
 101581c:	1000051e 	bne	r2,zero,1015834 <OSTmrNameGet+0xa4>
        *perr = OS_ERR_TMR_INVALID_TYPE;
 1015820:	e0fffd17 	ldw	r3,-12(fp)
 1015824:	00bfe244 	movi	r2,-119
 1015828:	18800005 	stb	r2,0(r3)
        return (0);
 101582c:	e03fff15 	stw	zero,-4(fp)
 1015830:	00002f06 	br	10158f0 <OSTmrNameGet+0x160>
    }
    if (OSIntNesting > 0) {                            /* See if trying to call from an ISR                           */
 1015834:	008040f4 	movhi	r2,259
 1015838:	10970704 	addi	r2,r2,23580
 101583c:	10800003 	ldbu	r2,0(r2)
 1015840:	10803fcc 	andi	r2,r2,255
 1015844:	1005003a 	cmpeq	r2,r2,zero
 1015848:	1000051e 	bne	r2,zero,1015860 <OSTmrNameGet+0xd0>
        *perr = OS_ERR_NAME_GET_ISR;
 101584c:	e0fffd17 	ldw	r3,-12(fp)
 1015850:	00800444 	movi	r2,17
 1015854:	18800005 	stb	r2,0(r3)
        return (0);
 1015858:	e03fff15 	stw	zero,-4(fp)
 101585c:	00002406 	br	10158f0 <OSTmrNameGet+0x160>
    }
    OSTmr_Lock();
 1015860:	10166740 	call	1016674 <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
 1015864:	e0bffb17 	ldw	r2,-20(fp)
 1015868:	10800c43 	ldbu	r2,49(r2)
 101586c:	10803fcc 	andi	r2,r2,255
 1015870:	e0bffe15 	stw	r2,-8(fp)
 1015874:	e0fffe17 	ldw	r3,-8(fp)
 1015878:	1805003a 	cmpeq	r2,r3,zero
 101587c:	1000111e 	bne	r2,zero,10158c4 <OSTmrNameGet+0x134>
 1015880:	e0fffe17 	ldw	r3,-8(fp)
 1015884:	1804803a 	cmplt	r2,r3,zero
 1015888:	1000141e 	bne	r2,zero,10158dc <OSTmrNameGet+0x14c>
 101588c:	e0fffe17 	ldw	r3,-8(fp)
 1015890:	18800108 	cmpgei	r2,r3,4
 1015894:	1000111e 	bne	r2,zero,10158dc <OSTmrNameGet+0x14c>
        case OS_TMR_STATE_RUNNING:
        case OS_TMR_STATE_STOPPED:
        case OS_TMR_STATE_COMPLETED:
             len   = OS_StrCopy(pdest, ptmr->OSTmrName);
 1015898:	e0bffb17 	ldw	r2,-20(fp)
 101589c:	11400804 	addi	r5,r2,32
 10158a0:	e13ffc17 	ldw	r4,-16(fp)
 10158a4:	100e8980 	call	100e898 <OS_StrCopy>
 10158a8:	e0bffa05 	stb	r2,-24(fp)
             OSTmr_Unlock();
 10158ac:	10166bc0 	call	10166bc <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
 10158b0:	e0bffd17 	ldw	r2,-12(fp)
 10158b4:	10000005 	stb	zero,0(r2)
             return (len);
 10158b8:	e0bffa03 	ldbu	r2,-24(fp)
 10158bc:	e0bfff15 	stw	r2,-4(fp)
 10158c0:	00000b06 	br	10158f0 <OSTmrNameGet+0x160>

        case OS_TMR_STATE_UNUSED:                      /* Timer is not allocated                                      */
             OSTmr_Unlock();
 10158c4:	10166bc0 	call	10166bc <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
 10158c8:	e0fffd17 	ldw	r3,-12(fp)
 10158cc:	00bfe1c4 	movi	r2,-121
 10158d0:	18800005 	stb	r2,0(r3)
             return (0);
 10158d4:	e03fff15 	stw	zero,-4(fp)
 10158d8:	00000506 	br	10158f0 <OSTmrNameGet+0x160>

        default:
             OSTmr_Unlock();
 10158dc:	10166bc0 	call	10166bc <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
 10158e0:	e0fffd17 	ldw	r3,-12(fp)
 10158e4:	00bfe344 	movi	r2,-115
 10158e8:	18800005 	stb	r2,0(r3)
             return (0);
 10158ec:	e03fff15 	stw	zero,-4(fp)
 10158f0:	e0bfff17 	ldw	r2,-4(fp)
    }
}
 10158f4:	e037883a 	mov	sp,fp
 10158f8:	dfc00117 	ldw	ra,4(sp)
 10158fc:	df000017 	ldw	fp,0(sp)
 1015900:	dec00204 	addi	sp,sp,8
 1015904:	f800283a 	ret

01015908 <OSTmrRemainGet>:
*/

#if OS_TMR_EN > 0
INT32U  OSTmrRemainGet (OS_TMR  *ptmr,
                        INT8U   *perr)
{
 1015908:	f811883a 	mov	r8,ra
 101590c:	100c1d00 	call	100c1d0 <_mcount>
 1015910:	403f883a 	mov	ra,r8
 1015914:	defff904 	addi	sp,sp,-28
 1015918:	dfc00615 	stw	ra,24(sp)
 101591c:	df000515 	stw	fp,20(sp)
 1015920:	df000504 	addi	fp,sp,20
 1015924:	e13ffc15 	stw	r4,-16(fp)
 1015928:	e17ffd15 	stw	r5,-12(fp)
    INT32U  remain;


#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {
 101592c:	e0bffd17 	ldw	r2,-12(fp)
 1015930:	1004c03a 	cmpne	r2,r2,zero
 1015934:	1000021e 	bne	r2,zero,1015940 <OSTmrRemainGet+0x38>
        return (0);
 1015938:	e03fff15 	stw	zero,-4(fp)
 101593c:	00006e06 	br	1015af8 <OSTmrRemainGet+0x1f0>
    }
    if (ptmr == (OS_TMR *)0) {
 1015940:	e0bffc17 	ldw	r2,-16(fp)
 1015944:	1004c03a 	cmpne	r2,r2,zero
 1015948:	1000051e 	bne	r2,zero,1015960 <OSTmrRemainGet+0x58>
        *perr = OS_ERR_TMR_INVALID;
 101594c:	e0fffd17 	ldw	r3,-12(fp)
 1015950:	00bfe284 	movi	r2,-118
 1015954:	18800005 	stb	r2,0(r3)
        return (0);
 1015958:	e03fff15 	stw	zero,-4(fp)
 101595c:	00006606 	br	1015af8 <OSTmrRemainGet+0x1f0>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
 1015960:	e0bffc17 	ldw	r2,-16(fp)
 1015964:	10800003 	ldbu	r2,0(r2)
 1015968:	10803fcc 	andi	r2,r2,255
 101596c:	10801920 	cmpeqi	r2,r2,100
 1015970:	1000051e 	bne	r2,zero,1015988 <OSTmrRemainGet+0x80>
        *perr = OS_ERR_TMR_INVALID_TYPE;
 1015974:	e0fffd17 	ldw	r3,-12(fp)
 1015978:	00bfe244 	movi	r2,-119
 101597c:	18800005 	stb	r2,0(r3)
        return (0);
 1015980:	e03fff15 	stw	zero,-4(fp)
 1015984:	00005c06 	br	1015af8 <OSTmrRemainGet+0x1f0>
    }
    if (OSIntNesting > 0) {                            /* See if trying to call from an ISR                           */
 1015988:	008040f4 	movhi	r2,259
 101598c:	10970704 	addi	r2,r2,23580
 1015990:	10800003 	ldbu	r2,0(r2)
 1015994:	10803fcc 	andi	r2,r2,255
 1015998:	1005003a 	cmpeq	r2,r2,zero
 101599c:	1000051e 	bne	r2,zero,10159b4 <OSTmrRemainGet+0xac>
        *perr = OS_ERR_TMR_ISR;
 10159a0:	e0fffd17 	ldw	r3,-12(fp)
 10159a4:	00bfe2c4 	movi	r2,-117
 10159a8:	18800005 	stb	r2,0(r3)
        return (0);
 10159ac:	e03fff15 	stw	zero,-4(fp)
 10159b0:	00005106 	br	1015af8 <OSTmrRemainGet+0x1f0>
    }
    OSTmr_Lock();
 10159b4:	10166740 	call	1016674 <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
 10159b8:	e0bffc17 	ldw	r2,-16(fp)
 10159bc:	10800c43 	ldbu	r2,49(r2)
 10159c0:	10803fcc 	andi	r2,r2,255
 10159c4:	e0bffe15 	stw	r2,-8(fp)
 10159c8:	e0fffe17 	ldw	r3,-8(fp)
 10159cc:	18800060 	cmpeqi	r2,r3,1
 10159d0:	10001b1e 	bne	r2,zero,1015a40 <OSTmrRemainGet+0x138>
 10159d4:	e0fffe17 	ldw	r3,-8(fp)
 10159d8:	18800088 	cmpgei	r2,r3,2
 10159dc:	1000041e 	bne	r2,zero,10159f0 <OSTmrRemainGet+0xe8>
 10159e0:	e0fffe17 	ldw	r3,-8(fp)
 10159e4:	1805003a 	cmpeq	r2,r3,zero
 10159e8:	1000381e 	bne	r2,zero,1015acc <OSTmrRemainGet+0x1c4>
 10159ec:	00003d06 	br	1015ae4 <OSTmrRemainGet+0x1dc>
 10159f0:	e0fffe17 	ldw	r3,-8(fp)
 10159f4:	188000a0 	cmpeqi	r2,r3,2
 10159f8:	10002f1e 	bne	r2,zero,1015ab8 <OSTmrRemainGet+0x1b0>
 10159fc:	e0fffe17 	ldw	r3,-8(fp)
 1015a00:	188000e0 	cmpeqi	r2,r3,3
 1015a04:	1000011e 	bne	r2,zero,1015a0c <OSTmrRemainGet+0x104>
 1015a08:	00003606 	br	1015ae4 <OSTmrRemainGet+0x1dc>
        case OS_TMR_STATE_RUNNING:
             remain = ptmr->OSTmrMatch - OSTmrTime;    /* Determine how much time is left to timeout                  */
 1015a0c:	e0bffc17 	ldw	r2,-16(fp)
 1015a10:	10c00517 	ldw	r3,20(r2)
 1015a14:	008040f4 	movhi	r2,259
 1015a18:	10970904 	addi	r2,r2,23588
 1015a1c:	10800017 	ldw	r2,0(r2)
 1015a20:	1885c83a 	sub	r2,r3,r2
 1015a24:	e0bffb15 	stw	r2,-20(fp)
             OSTmr_Unlock();
 1015a28:	10166bc0 	call	10166bc <OSTmr_Unlock>
             *perr  = OS_ERR_NONE;
 1015a2c:	e0bffd17 	ldw	r2,-12(fp)
 1015a30:	10000005 	stb	zero,0(r2)
             return (remain);
 1015a34:	e0bffb17 	ldw	r2,-20(fp)
 1015a38:	e0bfff15 	stw	r2,-4(fp)
 1015a3c:	00002e06 	br	1015af8 <OSTmrRemainGet+0x1f0>

        case OS_TMR_STATE_STOPPED:                     /* It's assumed that the timer has not started yet             */
             switch (ptmr->OSTmrOpt) {
 1015a40:	e0bffc17 	ldw	r2,-16(fp)
 1015a44:	10800c03 	ldbu	r2,48(r2)
 1015a48:	10803fcc 	andi	r2,r2,255
 1015a4c:	108000a0 	cmpeqi	r2,r2,2
 1015a50:	1000011e 	bne	r2,zero,1015a58 <OSTmrRemainGet+0x150>
 1015a54:	00000f06 	br	1015a94 <OSTmrRemainGet+0x18c>
                 case OS_TMR_OPT_PERIODIC:
                      if (ptmr->OSTmrDly == 0) {
 1015a58:	e0bffc17 	ldw	r2,-16(fp)
 1015a5c:	10800617 	ldw	r2,24(r2)
 1015a60:	1004c03a 	cmpne	r2,r2,zero
 1015a64:	1000041e 	bne	r2,zero,1015a78 <OSTmrRemainGet+0x170>
                          remain = ptmr->OSTmrPeriod;
 1015a68:	e0bffc17 	ldw	r2,-16(fp)
 1015a6c:	10800717 	ldw	r2,28(r2)
 1015a70:	e0bffb15 	stw	r2,-20(fp)
 1015a74:	00000306 	br	1015a84 <OSTmrRemainGet+0x17c>
                      } else {
                          remain = ptmr->OSTmrDly;
 1015a78:	e0bffc17 	ldw	r2,-16(fp)
 1015a7c:	10800617 	ldw	r2,24(r2)
 1015a80:	e0bffb15 	stw	r2,-20(fp)
                      }
                      OSTmr_Unlock();
 1015a84:	10166bc0 	call	10166bc <OSTmr_Unlock>
                      *perr  = OS_ERR_NONE;
 1015a88:	e0bffd17 	ldw	r2,-12(fp)
 1015a8c:	10000005 	stb	zero,0(r2)
                      break;
 1015a90:	00000606 	br	1015aac <OSTmrRemainGet+0x1a4>

                 case OS_TMR_OPT_ONE_SHOT:
                 default:
                      remain = ptmr->OSTmrDly;
 1015a94:	e0bffc17 	ldw	r2,-16(fp)
 1015a98:	10800617 	ldw	r2,24(r2)
 1015a9c:	e0bffb15 	stw	r2,-20(fp)
                      OSTmr_Unlock();
 1015aa0:	10166bc0 	call	10166bc <OSTmr_Unlock>
                      *perr  = OS_ERR_NONE;
 1015aa4:	e0bffd17 	ldw	r2,-12(fp)
 1015aa8:	10000005 	stb	zero,0(r2)
                      break;
             }
             return (remain);
 1015aac:	e0fffb17 	ldw	r3,-20(fp)
 1015ab0:	e0ffff15 	stw	r3,-4(fp)
 1015ab4:	00001006 	br	1015af8 <OSTmrRemainGet+0x1f0>

        case OS_TMR_STATE_COMPLETED:                   /* Only ONE-SHOT that timed out can be in this state           */
             OSTmr_Unlock();
 1015ab8:	10166bc0 	call	10166bc <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
 1015abc:	e0bffd17 	ldw	r2,-12(fp)
 1015ac0:	10000005 	stb	zero,0(r2)
             return (0);
 1015ac4:	e03fff15 	stw	zero,-4(fp)
 1015ac8:	00000b06 	br	1015af8 <OSTmrRemainGet+0x1f0>

        case OS_TMR_STATE_UNUSED:
             OSTmr_Unlock();
 1015acc:	10166bc0 	call	10166bc <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
 1015ad0:	e0fffd17 	ldw	r3,-12(fp)
 1015ad4:	00bfe1c4 	movi	r2,-121
 1015ad8:	18800005 	stb	r2,0(r3)
             return (0);
 1015adc:	e03fff15 	stw	zero,-4(fp)
 1015ae0:	00000506 	br	1015af8 <OSTmrRemainGet+0x1f0>

        default:
             OSTmr_Unlock();
 1015ae4:	10166bc0 	call	10166bc <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
 1015ae8:	e0fffd17 	ldw	r3,-12(fp)
 1015aec:	00bfe344 	movi	r2,-115
 1015af0:	18800005 	stb	r2,0(r3)
             return (0);
 1015af4:	e03fff15 	stw	zero,-4(fp)
 1015af8:	e0bfff17 	ldw	r2,-4(fp)
    }
}
 1015afc:	e037883a 	mov	sp,fp
 1015b00:	dfc00117 	ldw	ra,4(sp)
 1015b04:	df000017 	ldw	fp,0(sp)
 1015b08:	dec00204 	addi	sp,sp,8
 1015b0c:	f800283a 	ret

01015b10 <OSTmrStateGet>:
*/

#if OS_TMR_EN > 0
INT8U  OSTmrStateGet (OS_TMR  *ptmr,
                      INT8U   *perr)
{
 1015b10:	f811883a 	mov	r8,ra
 1015b14:	100c1d00 	call	100c1d0 <_mcount>
 1015b18:	403f883a 	mov	ra,r8
 1015b1c:	defffa04 	addi	sp,sp,-24
 1015b20:	dfc00515 	stw	ra,20(sp)
 1015b24:	df000415 	stw	fp,16(sp)
 1015b28:	df000404 	addi	fp,sp,16
 1015b2c:	e13ffd15 	stw	r4,-12(fp)
 1015b30:	e17ffe15 	stw	r5,-8(fp)
    INT8U  state;


#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {
 1015b34:	e0bffe17 	ldw	r2,-8(fp)
 1015b38:	1004c03a 	cmpne	r2,r2,zero
 1015b3c:	1000021e 	bne	r2,zero,1015b48 <OSTmrStateGet+0x38>
        return (0);
 1015b40:	e03fff15 	stw	zero,-4(fp)
 1015b44:	00002e06 	br	1015c00 <OSTmrStateGet+0xf0>
    }
    if (ptmr == (OS_TMR *)0) {
 1015b48:	e0bffd17 	ldw	r2,-12(fp)
 1015b4c:	1004c03a 	cmpne	r2,r2,zero
 1015b50:	1000051e 	bne	r2,zero,1015b68 <OSTmrStateGet+0x58>
        *perr = OS_ERR_TMR_INVALID;
 1015b54:	e0fffe17 	ldw	r3,-8(fp)
 1015b58:	00bfe284 	movi	r2,-118
 1015b5c:	18800005 	stb	r2,0(r3)
        return (0);
 1015b60:	e03fff15 	stw	zero,-4(fp)
 1015b64:	00002606 	br	1015c00 <OSTmrStateGet+0xf0>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
 1015b68:	e0bffd17 	ldw	r2,-12(fp)
 1015b6c:	10800003 	ldbu	r2,0(r2)
 1015b70:	10803fcc 	andi	r2,r2,255
 1015b74:	10801920 	cmpeqi	r2,r2,100
 1015b78:	1000051e 	bne	r2,zero,1015b90 <OSTmrStateGet+0x80>
        *perr = OS_ERR_TMR_INVALID_TYPE;
 1015b7c:	e0fffe17 	ldw	r3,-8(fp)
 1015b80:	00bfe244 	movi	r2,-119
 1015b84:	18800005 	stb	r2,0(r3)
        return (0);
 1015b88:	e03fff15 	stw	zero,-4(fp)
 1015b8c:	00001c06 	br	1015c00 <OSTmrStateGet+0xf0>
    }
    if (OSIntNesting > 0) {                            /* See if trying to call from an ISR                           */
 1015b90:	008040f4 	movhi	r2,259
 1015b94:	10970704 	addi	r2,r2,23580
 1015b98:	10800003 	ldbu	r2,0(r2)
 1015b9c:	10803fcc 	andi	r2,r2,255
 1015ba0:	1005003a 	cmpeq	r2,r2,zero
 1015ba4:	1000051e 	bne	r2,zero,1015bbc <OSTmrStateGet+0xac>
        *perr = OS_ERR_TMR_ISR;
 1015ba8:	e0fffe17 	ldw	r3,-8(fp)
 1015bac:	00bfe2c4 	movi	r2,-117
 1015bb0:	18800005 	stb	r2,0(r3)
        return (0);
 1015bb4:	e03fff15 	stw	zero,-4(fp)
 1015bb8:	00001106 	br	1015c00 <OSTmrStateGet+0xf0>
    }
    OSTmr_Lock();
 1015bbc:	10166740 	call	1016674 <OSTmr_Lock>
    state = ptmr->OSTmrState;
 1015bc0:	e0bffd17 	ldw	r2,-12(fp)
 1015bc4:	10800c43 	ldbu	r2,49(r2)
 1015bc8:	e0bffc05 	stb	r2,-16(fp)
    switch (state) {
 1015bcc:	e0bffc03 	ldbu	r2,-16(fp)
 1015bd0:	1005883a 	mov	r2,r2
 1015bd4:	10800128 	cmpgeui	r2,r2,4
 1015bd8:	1000031e 	bne	r2,zero,1015be8 <OSTmrStateGet+0xd8>
        case OS_TMR_STATE_UNUSED:   
        case OS_TMR_STATE_STOPPED:  
        case OS_TMR_STATE_COMPLETED:
        case OS_TMR_STATE_RUNNING:  
             *perr = OS_ERR_NONE;
 1015bdc:	e0bffe17 	ldw	r2,-8(fp)
 1015be0:	10000005 	stb	zero,0(r2)
             break;
 1015be4:	00000306 	br	1015bf4 <OSTmrStateGet+0xe4>
             
        default:
             *perr = OS_ERR_TMR_INVALID_STATE;
 1015be8:	e0fffe17 	ldw	r3,-8(fp)
 1015bec:	00bfe344 	movi	r2,-115
 1015bf0:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTmr_Unlock();
 1015bf4:	10166bc0 	call	10166bc <OSTmr_Unlock>
    return (state);
 1015bf8:	e0bffc03 	ldbu	r2,-16(fp)
 1015bfc:	e0bfff15 	stw	r2,-4(fp)
 1015c00:	e0bfff17 	ldw	r2,-4(fp)
}
 1015c04:	e037883a 	mov	sp,fp
 1015c08:	dfc00117 	ldw	ra,4(sp)
 1015c0c:	df000017 	ldw	fp,0(sp)
 1015c10:	dec00204 	addi	sp,sp,8
 1015c14:	f800283a 	ret

01015c18 <OSTmrStart>:
*/

#if OS_TMR_EN > 0
BOOLEAN  OSTmrStart (OS_TMR   *ptmr,
                     INT8U    *perr)
{
 1015c18:	f811883a 	mov	r8,ra
 1015c1c:	100c1d00 	call	100c1d0 <_mcount>
 1015c20:	403f883a 	mov	ra,r8
 1015c24:	defffa04 	addi	sp,sp,-24
 1015c28:	dfc00515 	stw	ra,20(sp)
 1015c2c:	df000415 	stw	fp,16(sp)
 1015c30:	df000404 	addi	fp,sp,16
 1015c34:	e13ffc15 	stw	r4,-16(fp)
 1015c38:	e17ffd15 	stw	r5,-12(fp)
#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                               /* Validate arguments                                     */
 1015c3c:	e0bffd17 	ldw	r2,-12(fp)
 1015c40:	1004c03a 	cmpne	r2,r2,zero
 1015c44:	1000021e 	bne	r2,zero,1015c50 <OSTmrStart+0x38>
        return (OS_FALSE);
 1015c48:	e03fff15 	stw	zero,-4(fp)
 1015c4c:	00004f06 	br	1015d8c <OSTmrStart+0x174>
    }
    if (ptmr == (OS_TMR *)0) {
 1015c50:	e0bffc17 	ldw	r2,-16(fp)
 1015c54:	1004c03a 	cmpne	r2,r2,zero
 1015c58:	1000051e 	bne	r2,zero,1015c70 <OSTmrStart+0x58>
        *perr = OS_ERR_TMR_INVALID;
 1015c5c:	e0fffd17 	ldw	r3,-12(fp)
 1015c60:	00bfe284 	movi	r2,-118
 1015c64:	18800005 	stb	r2,0(r3)
        return (OS_FALSE);
 1015c68:	e03fff15 	stw	zero,-4(fp)
 1015c6c:	00004706 	br	1015d8c <OSTmrStart+0x174>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {                   /* Validate timer structure                               */
 1015c70:	e0bffc17 	ldw	r2,-16(fp)
 1015c74:	10800003 	ldbu	r2,0(r2)
 1015c78:	10803fcc 	andi	r2,r2,255
 1015c7c:	10801920 	cmpeqi	r2,r2,100
 1015c80:	1000051e 	bne	r2,zero,1015c98 <OSTmrStart+0x80>
        *perr = OS_ERR_TMR_INVALID_TYPE;
 1015c84:	e0fffd17 	ldw	r3,-12(fp)
 1015c88:	00bfe244 	movi	r2,-119
 1015c8c:	18800005 	stb	r2,0(r3)
        return (OS_FALSE);
 1015c90:	e03fff15 	stw	zero,-4(fp)
 1015c94:	00003d06 	br	1015d8c <OSTmrStart+0x174>
    }
    if (OSIntNesting > 0) {                                 /* See if trying to call from an ISR                      */
 1015c98:	008040f4 	movhi	r2,259
 1015c9c:	10970704 	addi	r2,r2,23580
 1015ca0:	10800003 	ldbu	r2,0(r2)
 1015ca4:	10803fcc 	andi	r2,r2,255
 1015ca8:	1005003a 	cmpeq	r2,r2,zero
 1015cac:	1000051e 	bne	r2,zero,1015cc4 <OSTmrStart+0xac>
        *perr  = OS_ERR_TMR_ISR;
 1015cb0:	e0fffd17 	ldw	r3,-12(fp)
 1015cb4:	00bfe2c4 	movi	r2,-117
 1015cb8:	18800005 	stb	r2,0(r3)
        return (OS_FALSE);
 1015cbc:	e03fff15 	stw	zero,-4(fp)
 1015cc0:	00003206 	br	1015d8c <OSTmrStart+0x174>
    }
    OSTmr_Lock();
 1015cc4:	10166740 	call	1016674 <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
 1015cc8:	e0bffc17 	ldw	r2,-16(fp)
 1015ccc:	10800c43 	ldbu	r2,49(r2)
 1015cd0:	10803fcc 	andi	r2,r2,255
 1015cd4:	e0bffe15 	stw	r2,-8(fp)
 1015cd8:	e0fffe17 	ldw	r3,-8(fp)
 1015cdc:	188000c8 	cmpgei	r2,r3,3
 1015ce0:	1000071e 	bne	r2,zero,1015d00 <OSTmrStart+0xe8>
 1015ce4:	e0fffe17 	ldw	r3,-8(fp)
 1015ce8:	18800048 	cmpgei	r2,r3,1
 1015cec:	1000131e 	bne	r2,zero,1015d3c <OSTmrStart+0x124>
 1015cf0:	e0fffe17 	ldw	r3,-8(fp)
 1015cf4:	1805003a 	cmpeq	r2,r3,zero
 1015cf8:	1000191e 	bne	r2,zero,1015d60 <OSTmrStart+0x148>
 1015cfc:	00001e06 	br	1015d78 <OSTmrStart+0x160>
 1015d00:	e0fffe17 	ldw	r3,-8(fp)
 1015d04:	188000e0 	cmpeqi	r2,r3,3
 1015d08:	1000011e 	bne	r2,zero,1015d10 <OSTmrStart+0xf8>
 1015d0c:	00001a06 	br	1015d78 <OSTmrStart+0x160>
        case OS_TMR_STATE_RUNNING:                          /* Restart the timer                                      */
             OSTmr_Unlink(ptmr);                            /* ... Stop the timer                                     */
 1015d10:	e13ffc17 	ldw	r4,-16(fp)
 1015d14:	101656c0 	call	101656c <OSTmr_Unlink>
             OSTmr_Link(ptmr, OS_TMR_LINK_DLY);             /* ... Link timer to timer wheel                          */
 1015d18:	e13ffc17 	ldw	r4,-16(fp)
 1015d1c:	000b883a 	mov	r5,zero
 1015d20:	10163fc0 	call	10163fc <OSTmr_Link>
             OSTmr_Unlock();
 1015d24:	10166bc0 	call	10166bc <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
 1015d28:	e0bffd17 	ldw	r2,-12(fp)
 1015d2c:	10000005 	stb	zero,0(r2)
             return (OS_TRUE);
 1015d30:	00800044 	movi	r2,1
 1015d34:	e0bfff15 	stw	r2,-4(fp)
 1015d38:	00001406 	br	1015d8c <OSTmrStart+0x174>

        case OS_TMR_STATE_STOPPED:                          /* Start the timer                                        */
        case OS_TMR_STATE_COMPLETED:
             OSTmr_Link(ptmr, OS_TMR_LINK_DLY);             /* ... Link timer to timer wheel                          */
 1015d3c:	e13ffc17 	ldw	r4,-16(fp)
 1015d40:	000b883a 	mov	r5,zero
 1015d44:	10163fc0 	call	10163fc <OSTmr_Link>
             OSTmr_Unlock();
 1015d48:	10166bc0 	call	10166bc <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
 1015d4c:	e0bffd17 	ldw	r2,-12(fp)
 1015d50:	10000005 	stb	zero,0(r2)
             return (OS_TRUE);
 1015d54:	00c00044 	movi	r3,1
 1015d58:	e0ffff15 	stw	r3,-4(fp)
 1015d5c:	00000b06 	br	1015d8c <OSTmrStart+0x174>

        case OS_TMR_STATE_UNUSED:                           /* Timer not created                                      */
             OSTmr_Unlock();
 1015d60:	10166bc0 	call	10166bc <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
 1015d64:	e0fffd17 	ldw	r3,-12(fp)
 1015d68:	00bfe1c4 	movi	r2,-121
 1015d6c:	18800005 	stb	r2,0(r3)
             return (OS_FALSE);
 1015d70:	e03fff15 	stw	zero,-4(fp)
 1015d74:	00000506 	br	1015d8c <OSTmrStart+0x174>

        default:
             OSTmr_Unlock();
 1015d78:	10166bc0 	call	10166bc <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
 1015d7c:	e0fffd17 	ldw	r3,-12(fp)
 1015d80:	00bfe344 	movi	r2,-115
 1015d84:	18800005 	stb	r2,0(r3)
             return (OS_FALSE);
 1015d88:	e03fff15 	stw	zero,-4(fp)
 1015d8c:	e0bfff17 	ldw	r2,-4(fp)
    }
}
 1015d90:	e037883a 	mov	sp,fp
 1015d94:	dfc00117 	ldw	ra,4(sp)
 1015d98:	df000017 	ldw	fp,0(sp)
 1015d9c:	dec00204 	addi	sp,sp,8
 1015da0:	f800283a 	ret

01015da4 <OSTmrStop>:
#if OS_TMR_EN > 0
BOOLEAN  OSTmrStop (OS_TMR  *ptmr,
                    INT8U    opt,
                    void    *callback_arg,
                    INT8U   *perr)
{
 1015da4:	f811883a 	mov	r8,ra
 1015da8:	100c1d00 	call	100c1d0 <_mcount>
 1015dac:	403f883a 	mov	ra,r8
 1015db0:	defff604 	addi	sp,sp,-40
 1015db4:	dfc00915 	stw	ra,36(sp)
 1015db8:	df000815 	stw	fp,32(sp)
 1015dbc:	df000804 	addi	fp,sp,32
 1015dc0:	e13ff915 	stw	r4,-28(fp)
 1015dc4:	e1bffb15 	stw	r6,-20(fp)
 1015dc8:	e1fffc15 	stw	r7,-16(fp)
 1015dcc:	e17ffa05 	stb	r5,-24(fp)
    OS_TMR_CALLBACK  pfnct;


#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                                     /* Validate arguments                               */
 1015dd0:	e0bffc17 	ldw	r2,-16(fp)
 1015dd4:	1004c03a 	cmpne	r2,r2,zero
 1015dd8:	1000021e 	bne	r2,zero,1015de4 <OSTmrStop+0x40>
        return (OS_FALSE);
 1015ddc:	e03fff15 	stw	zero,-4(fp)
 1015de0:	00007806 	br	1015fc4 <OSTmrStop+0x220>
    }
    if (ptmr == (OS_TMR *)0) {
 1015de4:	e0bff917 	ldw	r2,-28(fp)
 1015de8:	1004c03a 	cmpne	r2,r2,zero
 1015dec:	1000051e 	bne	r2,zero,1015e04 <OSTmrStop+0x60>
        *perr = OS_ERR_TMR_INVALID;
 1015df0:	e0fffc17 	ldw	r3,-16(fp)
 1015df4:	00bfe284 	movi	r2,-118
 1015df8:	18800005 	stb	r2,0(r3)
        return (OS_FALSE);
 1015dfc:	e03fff15 	stw	zero,-4(fp)
 1015e00:	00007006 	br	1015fc4 <OSTmrStop+0x220>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {                         /* Validate timer structure                         */
 1015e04:	e0bff917 	ldw	r2,-28(fp)
 1015e08:	10800003 	ldbu	r2,0(r2)
 1015e0c:	10803fcc 	andi	r2,r2,255
 1015e10:	10801920 	cmpeqi	r2,r2,100
 1015e14:	1000051e 	bne	r2,zero,1015e2c <OSTmrStop+0x88>
        *perr = OS_ERR_TMR_INVALID_TYPE;
 1015e18:	e0fffc17 	ldw	r3,-16(fp)
 1015e1c:	00bfe244 	movi	r2,-119
 1015e20:	18800005 	stb	r2,0(r3)
        return (OS_FALSE);
 1015e24:	e03fff15 	stw	zero,-4(fp)
 1015e28:	00006606 	br	1015fc4 <OSTmrStop+0x220>
    }
    if (OSIntNesting > 0) {                                       /* See if trying to call from an ISR                */
 1015e2c:	008040f4 	movhi	r2,259
 1015e30:	10970704 	addi	r2,r2,23580
 1015e34:	10800003 	ldbu	r2,0(r2)
 1015e38:	10803fcc 	andi	r2,r2,255
 1015e3c:	1005003a 	cmpeq	r2,r2,zero
 1015e40:	1000051e 	bne	r2,zero,1015e58 <OSTmrStop+0xb4>
        *perr  = OS_ERR_TMR_ISR;
 1015e44:	e0fffc17 	ldw	r3,-16(fp)
 1015e48:	00bfe2c4 	movi	r2,-117
 1015e4c:	18800005 	stb	r2,0(r3)
        return (OS_FALSE);
 1015e50:	e03fff15 	stw	zero,-4(fp)
 1015e54:	00005b06 	br	1015fc4 <OSTmrStop+0x220>
    }
    OSTmr_Lock();
 1015e58:	10166740 	call	1016674 <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
 1015e5c:	e0bff917 	ldw	r2,-28(fp)
 1015e60:	10800c43 	ldbu	r2,49(r2)
 1015e64:	10803fcc 	andi	r2,r2,255
 1015e68:	e0bffe15 	stw	r2,-8(fp)
 1015e6c:	e0fffe17 	ldw	r3,-8(fp)
 1015e70:	188000c8 	cmpgei	r2,r3,3
 1015e74:	1000071e 	bne	r2,zero,1015e94 <OSTmrStop+0xf0>
 1015e78:	e0fffe17 	ldw	r3,-8(fp)
 1015e7c:	18800048 	cmpgei	r2,r3,1
 1015e80:	10003e1e 	bne	r2,zero,1015f7c <OSTmrStop+0x1d8>
 1015e84:	e0fffe17 	ldw	r3,-8(fp)
 1015e88:	1805003a 	cmpeq	r2,r3,zero
 1015e8c:	1000421e 	bne	r2,zero,1015f98 <OSTmrStop+0x1f4>
 1015e90:	00004706 	br	1015fb0 <OSTmrStop+0x20c>
 1015e94:	e0fffe17 	ldw	r3,-8(fp)
 1015e98:	188000e0 	cmpeqi	r2,r3,3
 1015e9c:	1000011e 	bne	r2,zero,1015ea4 <OSTmrStop+0x100>
 1015ea0:	00004306 	br	1015fb0 <OSTmrStop+0x20c>
        case OS_TMR_STATE_RUNNING:
             OSTmr_Unlink(ptmr);                                  /* Remove from current wheel spoke                  */
 1015ea4:	e13ff917 	ldw	r4,-28(fp)
 1015ea8:	101656c0 	call	101656c <OSTmr_Unlink>
             *perr = OS_ERR_NONE;
 1015eac:	e0bffc17 	ldw	r2,-16(fp)
 1015eb0:	10000005 	stb	zero,0(r2)
             switch (opt) {
 1015eb4:	e0bffa03 	ldbu	r2,-24(fp)
 1015eb8:	e0bffd15 	stw	r2,-12(fp)
 1015ebc:	e0fffd17 	ldw	r3,-12(fp)
 1015ec0:	188000e0 	cmpeqi	r2,r3,3
 1015ec4:	1000071e 	bne	r2,zero,1015ee4 <OSTmrStop+0x140>
 1015ec8:	e0fffd17 	ldw	r3,-12(fp)
 1015ecc:	18800120 	cmpeqi	r2,r3,4
 1015ed0:	1000141e 	bne	r2,zero,1015f24 <OSTmrStop+0x180>
 1015ed4:	e0fffd17 	ldw	r3,-12(fp)
 1015ed8:	1805003a 	cmpeq	r2,r3,zero
 1015edc:	1000231e 	bne	r2,zero,1015f6c <OSTmrStop+0x1c8>
 1015ee0:	00001f06 	br	1015f60 <OSTmrStop+0x1bc>
                 case OS_TMR_OPT_CALLBACK:
                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
 1015ee4:	e0bff917 	ldw	r2,-28(fp)
 1015ee8:	10800117 	ldw	r2,4(r2)
 1015eec:	e0bff815 	stw	r2,-32(fp)
                      if (pfnct != (OS_TMR_CALLBACK)0) {
 1015ef0:	e0bff817 	ldw	r2,-32(fp)
 1015ef4:	1005003a 	cmpeq	r2,r2,zero
 1015ef8:	1000061e 	bne	r2,zero,1015f14 <OSTmrStop+0x170>
                          (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);  /* Use callback arg when timer was created */
 1015efc:	e0bff917 	ldw	r2,-28(fp)
 1015f00:	11400217 	ldw	r5,8(r2)
 1015f04:	e0bff817 	ldw	r2,-32(fp)
 1015f08:	e13ff917 	ldw	r4,-28(fp)
 1015f0c:	103ee83a 	callr	r2
 1015f10:	00001606 	br	1015f6c <OSTmrStop+0x1c8>
                      } else {
                          *perr = OS_ERR_TMR_NO_CALLBACK;
 1015f14:	e0fffc17 	ldw	r3,-16(fp)
 1015f18:	00bfe3c4 	movi	r2,-113
 1015f1c:	18800005 	stb	r2,0(r3)
                      }
                      break;
 1015f20:	00001206 	br	1015f6c <OSTmrStop+0x1c8>

                 case OS_TMR_OPT_CALLBACK_ARG:
                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
 1015f24:	e0bff917 	ldw	r2,-28(fp)
 1015f28:	10800117 	ldw	r2,4(r2)
 1015f2c:	e0bff815 	stw	r2,-32(fp)
                      if (pfnct != (OS_TMR_CALLBACK)0) {
 1015f30:	e0bff817 	ldw	r2,-32(fp)
 1015f34:	1005003a 	cmpeq	r2,r2,zero
 1015f38:	1000051e 	bne	r2,zero,1015f50 <OSTmrStop+0x1ac>
                          (*pfnct)((void *)ptmr, callback_arg);   /* ... using the 'callback_arg' provided in call    */
 1015f3c:	e0bff817 	ldw	r2,-32(fp)
 1015f40:	e13ff917 	ldw	r4,-28(fp)
 1015f44:	e17ffb17 	ldw	r5,-20(fp)
 1015f48:	103ee83a 	callr	r2
 1015f4c:	00000706 	br	1015f6c <OSTmrStop+0x1c8>
                      } else {
                          *perr = OS_ERR_TMR_NO_CALLBACK;
 1015f50:	e0fffc17 	ldw	r3,-16(fp)
 1015f54:	00bfe3c4 	movi	r2,-113
 1015f58:	18800005 	stb	r2,0(r3)
                      }
                      break;
 1015f5c:	00000306 	br	1015f6c <OSTmrStop+0x1c8>

                 case OS_TMR_OPT_NONE:
                      break;

                 default:
                     *perr = OS_ERR_TMR_INVALID_OPT;
 1015f60:	e0fffc17 	ldw	r3,-16(fp)
 1015f64:	00bfe104 	movi	r2,-124
 1015f68:	18800005 	stb	r2,0(r3)
                     break;
             }
             OSTmr_Unlock();
 1015f6c:	10166bc0 	call	10166bc <OSTmr_Unlock>
             return (OS_TRUE);
 1015f70:	00800044 	movi	r2,1
 1015f74:	e0bfff15 	stw	r2,-4(fp)
 1015f78:	00001206 	br	1015fc4 <OSTmrStop+0x220>

        case OS_TMR_STATE_COMPLETED:                              /* Timer has already completed the ONE-SHOT or ...  */
        case OS_TMR_STATE_STOPPED:                                /* ... timer has not started yet.                   */
             OSTmr_Unlock();
 1015f7c:	10166bc0 	call	10166bc <OSTmr_Unlock>
             *perr = OS_ERR_TMR_STOPPED;
 1015f80:	e0fffc17 	ldw	r3,-16(fp)
 1015f84:	00bfe384 	movi	r2,-114
 1015f88:	18800005 	stb	r2,0(r3)
             return (OS_TRUE);
 1015f8c:	00c00044 	movi	r3,1
 1015f90:	e0ffff15 	stw	r3,-4(fp)
 1015f94:	00000b06 	br	1015fc4 <OSTmrStop+0x220>

        case OS_TMR_STATE_UNUSED:                                 /* Timer was not created                            */
             OSTmr_Unlock();
 1015f98:	10166bc0 	call	10166bc <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
 1015f9c:	e0fffc17 	ldw	r3,-16(fp)
 1015fa0:	00bfe1c4 	movi	r2,-121
 1015fa4:	18800005 	stb	r2,0(r3)
             return (OS_FALSE);
 1015fa8:	e03fff15 	stw	zero,-4(fp)
 1015fac:	00000506 	br	1015fc4 <OSTmrStop+0x220>

        default:
             OSTmr_Unlock();
 1015fb0:	10166bc0 	call	10166bc <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
 1015fb4:	e0fffc17 	ldw	r3,-16(fp)
 1015fb8:	00bfe344 	movi	r2,-115
 1015fbc:	18800005 	stb	r2,0(r3)
             return (OS_FALSE);
 1015fc0:	e03fff15 	stw	zero,-4(fp)
 1015fc4:	e0bfff17 	ldw	r2,-4(fp)
    }
}
 1015fc8:	e037883a 	mov	sp,fp
 1015fcc:	dfc00117 	ldw	ra,4(sp)
 1015fd0:	df000017 	ldw	fp,0(sp)
 1015fd4:	dec00204 	addi	sp,sp,8
 1015fd8:	f800283a 	ret

01015fdc <OSTmrSignal>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
INT8U  OSTmrSignal (void)
{
 1015fdc:	f811883a 	mov	r8,ra
 1015fe0:	100c1d00 	call	100c1d0 <_mcount>
 1015fe4:	403f883a 	mov	ra,r8
 1015fe8:	defffd04 	addi	sp,sp,-12
 1015fec:	dfc00215 	stw	ra,8(sp)
 1015ff0:	df000115 	stw	fp,4(sp)
 1015ff4:	df000104 	addi	fp,sp,4
    INT8U  err;


    err = OSSemPost(OSTmrSemSignal);
 1015ff8:	008040f4 	movhi	r2,259
 1015ffc:	1096f704 	addi	r2,r2,23516
 1016000:	11000017 	ldw	r4,0(r2)
 1016004:	1012f140 	call	1012f14 <OSSemPost>
 1016008:	e0bfff05 	stb	r2,-4(fp)
    return (err);
 101600c:	e0bfff03 	ldbu	r2,-4(fp)
}
 1016010:	e037883a 	mov	sp,fp
 1016014:	dfc00117 	ldw	ra,4(sp)
 1016018:	df000017 	ldw	fp,0(sp)
 101601c:	dec00204 	addi	sp,sp,8
 1016020:	f800283a 	ret

01016024 <OSTmr_Alloc>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  OS_TMR  *OSTmr_Alloc (void)
{
 1016024:	f811883a 	mov	r8,ra
 1016028:	100c1d00 	call	100c1d0 <_mcount>
 101602c:	403f883a 	mov	ra,r8
 1016030:	defffd04 	addi	sp,sp,-12
 1016034:	df000215 	stw	fp,8(sp)
 1016038:	df000204 	addi	fp,sp,8
    OS_TMR *ptmr;


    if (OSTmrFreeList == (OS_TMR *)0) {
 101603c:	008040f4 	movhi	r2,259
 1016040:	1096f504 	addi	r2,r2,23508
 1016044:	10800017 	ldw	r2,0(r2)
 1016048:	1004c03a 	cmpne	r2,r2,zero
 101604c:	1000021e 	bne	r2,zero,1016058 <OSTmr_Alloc+0x34>
        return ((OS_TMR *)0);
 1016050:	e03fff15 	stw	zero,-4(fp)
 1016054:	00002006 	br	10160d8 <OSTmr_Alloc+0xb4>
    }
    ptmr            = (OS_TMR *)OSTmrFreeList;
 1016058:	008040f4 	movhi	r2,259
 101605c:	1096f504 	addi	r2,r2,23508
 1016060:	10800017 	ldw	r2,0(r2)
 1016064:	e0bffe15 	stw	r2,-8(fp)
    OSTmrFreeList   = (OS_TMR *)ptmr->OSTmrNext;
 1016068:	e0bffe17 	ldw	r2,-8(fp)
 101606c:	10800317 	ldw	r2,12(r2)
 1016070:	1007883a 	mov	r3,r2
 1016074:	008040f4 	movhi	r2,259
 1016078:	1096f504 	addi	r2,r2,23508
 101607c:	10c00015 	stw	r3,0(r2)
    ptmr->OSTmrNext = (OS_TCB *)0;
 1016080:	e0bffe17 	ldw	r2,-8(fp)
 1016084:	10000315 	stw	zero,12(r2)
    ptmr->OSTmrPrev = (OS_TCB *)0;
 1016088:	e0bffe17 	ldw	r2,-8(fp)
 101608c:	10000415 	stw	zero,16(r2)
    OSTmrUsed++;
 1016090:	008040f4 	movhi	r2,259
 1016094:	1096fa04 	addi	r2,r2,23528
 1016098:	1080000b 	ldhu	r2,0(r2)
 101609c:	10800044 	addi	r2,r2,1
 10160a0:	1007883a 	mov	r3,r2
 10160a4:	008040f4 	movhi	r2,259
 10160a8:	1096fa04 	addi	r2,r2,23528
 10160ac:	10c0000d 	sth	r3,0(r2)
    OSTmrFree--;
 10160b0:	008040f4 	movhi	r2,259
 10160b4:	1096fe04 	addi	r2,r2,23544
 10160b8:	1080000b 	ldhu	r2,0(r2)
 10160bc:	10bfffc4 	addi	r2,r2,-1
 10160c0:	1007883a 	mov	r3,r2
 10160c4:	008040f4 	movhi	r2,259
 10160c8:	1096fe04 	addi	r2,r2,23544
 10160cc:	10c0000d 	sth	r3,0(r2)
    return (ptmr);
 10160d0:	e0bffe17 	ldw	r2,-8(fp)
 10160d4:	e0bfff15 	stw	r2,-4(fp)
 10160d8:	e0bfff17 	ldw	r2,-4(fp)
}
 10160dc:	e037883a 	mov	sp,fp
 10160e0:	df000017 	ldw	fp,0(sp)
 10160e4:	dec00104 	addi	sp,sp,4
 10160e8:	f800283a 	ret

010160ec <OSTmr_Free>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Free (OS_TMR *ptmr)
{
 10160ec:	f811883a 	mov	r8,ra
 10160f0:	100c1d00 	call	100c1d0 <_mcount>
 10160f4:	403f883a 	mov	ra,r8
 10160f8:	defffe04 	addi	sp,sp,-8
 10160fc:	df000115 	stw	fp,4(sp)
 1016100:	df000104 	addi	fp,sp,4
 1016104:	e13fff15 	stw	r4,-4(fp)
    ptmr->OSTmrState       = OS_TMR_STATE_UNUSED;      /* Clear timer object fields                                   */
 1016108:	e0bfff17 	ldw	r2,-4(fp)
 101610c:	10000c45 	stb	zero,49(r2)
    ptmr->OSTmrOpt         = OS_TMR_OPT_NONE;
 1016110:	e0bfff17 	ldw	r2,-4(fp)
 1016114:	10000c05 	stb	zero,48(r2)
    ptmr->OSTmrPeriod      = 0;
 1016118:	e0bfff17 	ldw	r2,-4(fp)
 101611c:	10000715 	stw	zero,28(r2)
    ptmr->OSTmrMatch       = 0;
 1016120:	e0bfff17 	ldw	r2,-4(fp)
 1016124:	10000515 	stw	zero,20(r2)
    ptmr->OSTmrCallback    = (OS_TMR_CALLBACK)0;
 1016128:	e0bfff17 	ldw	r2,-4(fp)
 101612c:	10000115 	stw	zero,4(r2)
    ptmr->OSTmrCallbackArg = (void *)0;
 1016130:	e0bfff17 	ldw	r2,-4(fp)
 1016134:	10000215 	stw	zero,8(r2)
#if OS_TMR_CFG_NAME_SIZE > 1
    ptmr->OSTmrName[0]     = '?';                      /* Unknown name                                                */
 1016138:	e0ffff17 	ldw	r3,-4(fp)
 101613c:	00800fc4 	movi	r2,63
 1016140:	18800805 	stb	r2,32(r3)
    ptmr->OSTmrName[1]     = OS_ASCII_NUL;
 1016144:	e0bfff17 	ldw	r2,-4(fp)
 1016148:	10000845 	stb	zero,33(r2)
#endif

    ptmr->OSTmrPrev        = (OS_TCB *)0;              /* Chain timer to free list                                    */
 101614c:	e0bfff17 	ldw	r2,-4(fp)
 1016150:	10000415 	stw	zero,16(r2)
    ptmr->OSTmrNext        = OSTmrFreeList;
 1016154:	008040f4 	movhi	r2,259
 1016158:	1096f504 	addi	r2,r2,23508
 101615c:	10c00017 	ldw	r3,0(r2)
 1016160:	e0bfff17 	ldw	r2,-4(fp)
 1016164:	10c00315 	stw	r3,12(r2)
    OSTmrFreeList          = ptmr;
 1016168:	00c040f4 	movhi	r3,259
 101616c:	18d6f504 	addi	r3,r3,23508
 1016170:	e0bfff17 	ldw	r2,-4(fp)
 1016174:	18800015 	stw	r2,0(r3)

    OSTmrUsed--;                                       /* Update timer object statistics                              */
 1016178:	008040f4 	movhi	r2,259
 101617c:	1096fa04 	addi	r2,r2,23528
 1016180:	1080000b 	ldhu	r2,0(r2)
 1016184:	10bfffc4 	addi	r2,r2,-1
 1016188:	1007883a 	mov	r3,r2
 101618c:	008040f4 	movhi	r2,259
 1016190:	1096fa04 	addi	r2,r2,23528
 1016194:	10c0000d 	sth	r3,0(r2)
    OSTmrFree++;
 1016198:	008040f4 	movhi	r2,259
 101619c:	1096fe04 	addi	r2,r2,23544
 10161a0:	1080000b 	ldhu	r2,0(r2)
 10161a4:	10800044 	addi	r2,r2,1
 10161a8:	1007883a 	mov	r3,r2
 10161ac:	008040f4 	movhi	r2,259
 10161b0:	1096fe04 	addi	r2,r2,23544
 10161b4:	10c0000d 	sth	r3,0(r2)
}
 10161b8:	e037883a 	mov	sp,fp
 10161bc:	df000017 	ldw	fp,0(sp)
 10161c0:	dec00104 	addi	sp,sp,4
 10161c4:	f800283a 	ret

010161c8 <OSTmr_Init>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
void  OSTmr_Init (void)
{
 10161c8:	f811883a 	mov	r8,ra
 10161cc:	100c1d00 	call	100c1d0 <_mcount>
 10161d0:	403f883a 	mov	ra,r8
 10161d4:	defffb04 	addi	sp,sp,-20
 10161d8:	dfc00415 	stw	ra,16(sp)
 10161dc:	df000315 	stw	fp,12(sp)
 10161e0:	df000304 	addi	fp,sp,12
    INT16U   i;
    OS_TMR  *ptmr1;
    OS_TMR  *ptmr2;


    OS_MemClr((INT8U *)&OSTmrTbl[0],      sizeof(OSTmrTbl));            /* Clear all the TMRs                         */
 10161e4:	01004134 	movhi	r4,260
 10161e8:	21100a04 	addi	r4,r4,16424
 10161ec:	0140d004 	movi	r5,832
 10161f0:	100e6640 	call	100e664 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTmrWheelTbl[0], sizeof(OSTmrWheelTbl));       /* Clear the timer wheel                      */
 10161f4:	01004134 	movhi	r4,260
 10161f8:	210f2a04 	addi	r4,r4,15528
 10161fc:	01400404 	movi	r5,16
 1016200:	100e6640 	call	100e664 <OS_MemClr>

    ptmr1 = &OSTmrTbl[0];
 1016204:	00804134 	movhi	r2,260
 1016208:	10900a04 	addi	r2,r2,16424
 101620c:	e0bffe15 	stw	r2,-8(fp)
    ptmr2 = &OSTmrTbl[1];
 1016210:	00804134 	movhi	r2,260
 1016214:	10901704 	addi	r2,r2,16476
 1016218:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_TMR_CFG_MAX - 1); i++) {                        /* Init. list of free TMRs                    */
 101621c:	e03fff0d 	sth	zero,-4(fp)
 1016220:	00001606 	br	101627c <OSTmr_Init+0xb4>
        ptmr1->OSTmrType    = OS_TMR_TYPE;
 1016224:	e0fffe17 	ldw	r3,-8(fp)
 1016228:	00801904 	movi	r2,100
 101622c:	18800005 	stb	r2,0(r3)
        ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                      /* Indicate that timer is inactive            */
 1016230:	e0bffe17 	ldw	r2,-8(fp)
 1016234:	10000c45 	stb	zero,49(r2)
        ptmr1->OSTmrNext    = (void *)ptmr2;                            /* Link to next timer                         */
 1016238:	e0fffe17 	ldw	r3,-8(fp)
 101623c:	e0bffd17 	ldw	r2,-12(fp)
 1016240:	18800315 	stw	r2,12(r3)
#if OS_TMR_CFG_NAME_SIZE > 1
        ptmr1->OSTmrName[0] = '?';                                      /* Unknown name                               */
 1016244:	e0fffe17 	ldw	r3,-8(fp)
 1016248:	00800fc4 	movi	r2,63
 101624c:	18800805 	stb	r2,32(r3)
        ptmr1->OSTmrName[1] = OS_ASCII_NUL;
 1016250:	e0bffe17 	ldw	r2,-8(fp)
 1016254:	10000845 	stb	zero,33(r2)
#endif
        ptmr1++;
 1016258:	e0bffe17 	ldw	r2,-8(fp)
 101625c:	10800d04 	addi	r2,r2,52
 1016260:	e0bffe15 	stw	r2,-8(fp)
        ptmr2++;
 1016264:	e0bffd17 	ldw	r2,-12(fp)
 1016268:	10800d04 	addi	r2,r2,52
 101626c:	e0bffd15 	stw	r2,-12(fp)
    OS_MemClr((INT8U *)&OSTmrTbl[0],      sizeof(OSTmrTbl));            /* Clear all the TMRs                         */
    OS_MemClr((INT8U *)&OSTmrWheelTbl[0], sizeof(OSTmrWheelTbl));       /* Clear the timer wheel                      */

    ptmr1 = &OSTmrTbl[0];
    ptmr2 = &OSTmrTbl[1];
    for (i = 0; i < (OS_TMR_CFG_MAX - 1); i++) {                        /* Init. list of free TMRs                    */
 1016270:	e0bfff0b 	ldhu	r2,-4(fp)
 1016274:	10800044 	addi	r2,r2,1
 1016278:	e0bfff0d 	sth	r2,-4(fp)
 101627c:	e0bfff0b 	ldhu	r2,-4(fp)
 1016280:	108003f0 	cmpltui	r2,r2,15
 1016284:	103fe71e 	bne	r2,zero,1016224 <OSTmr_Init+0x5c>
        ptmr1->OSTmrName[1] = OS_ASCII_NUL;
#endif
        ptmr1++;
        ptmr2++;
    }
    ptmr1->OSTmrType    = OS_TMR_TYPE;
 1016288:	e0fffe17 	ldw	r3,-8(fp)
 101628c:	00801904 	movi	r2,100
 1016290:	18800005 	stb	r2,0(r3)
    ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                          /* Indicate that timer is inactive            */
 1016294:	e0bffe17 	ldw	r2,-8(fp)
 1016298:	10000c45 	stb	zero,49(r2)
    ptmr1->OSTmrNext    = (void *)0;                                    /* Last OS_TMR                                */
 101629c:	e0bffe17 	ldw	r2,-8(fp)
 10162a0:	10000315 	stw	zero,12(r2)
#if OS_TMR_CFG_NAME_SIZE > 1
    ptmr1->OSTmrName[0] = '?';                                          /* Unknown name                               */
 10162a4:	e0fffe17 	ldw	r3,-8(fp)
 10162a8:	00800fc4 	movi	r2,63
 10162ac:	18800805 	stb	r2,32(r3)
    ptmr1->OSTmrName[1] = OS_ASCII_NUL;
 10162b0:	e0bffe17 	ldw	r2,-8(fp)
 10162b4:	10000845 	stb	zero,33(r2)
#endif
    OSTmrTime           = 0;
 10162b8:	008040f4 	movhi	r2,259
 10162bc:	10970904 	addi	r2,r2,23588
 10162c0:	10000015 	stw	zero,0(r2)
    OSTmrUsed           = 0;
 10162c4:	008040f4 	movhi	r2,259
 10162c8:	1096fa04 	addi	r2,r2,23528
 10162cc:	1000000d 	sth	zero,0(r2)
    OSTmrFree           = OS_TMR_CFG_MAX;
 10162d0:	00c040f4 	movhi	r3,259
 10162d4:	18d6fe04 	addi	r3,r3,23544
 10162d8:	00800404 	movi	r2,16
 10162dc:	1880000d 	sth	r2,0(r3)
    OSTmrFreeList       = &OSTmrTbl[0];
 10162e0:	00c040f4 	movhi	r3,259
 10162e4:	18d6f504 	addi	r3,r3,23508
 10162e8:	00804134 	movhi	r2,260
 10162ec:	10900a04 	addi	r2,r2,16424
 10162f0:	18800015 	stw	r2,0(r3)
    OSTmrSem            = OSSemCreate(1);
 10162f4:	01000044 	movi	r4,1
 10162f8:	10127380 	call	1012738 <OSSemCreate>
 10162fc:	1007883a 	mov	r3,r2
 1016300:	008040f4 	movhi	r2,259
 1016304:	10970b04 	addi	r2,r2,23596
 1016308:	10c00015 	stw	r3,0(r2)
    OSTmrSemSignal      = OSSemCreate(0);
 101630c:	0009883a 	mov	r4,zero
 1016310:	10127380 	call	1012738 <OSSemCreate>
 1016314:	1007883a 	mov	r3,r2
 1016318:	008040f4 	movhi	r2,259
 101631c:	1096f704 	addi	r2,r2,23516
 1016320:	10c00015 	stw	r3,0(r2)

#if OS_EVENT_NAME_SIZE > 18
    OSEventNameSet(OSTmrSem,       (INT8U *)"uC/OS-II TmrLock",   &err);/* Assign names to semaphores                 */
 1016324:	008040f4 	movhi	r2,259
 1016328:	10970b04 	addi	r2,r2,23596
 101632c:	11000017 	ldw	r4,0(r2)
 1016330:	014040b4 	movhi	r5,258
 1016334:	29684b04 	addi	r5,r5,-24276
 1016338:	e1bfff84 	addi	r6,fp,-2
 101633c:	100ccf00 	call	100ccf0 <OSEventNameSet>
    OSEventNameSet(OSTmrSem,       (INT8U *)"OS-TmrLock",         &err);
#endif
#endif

#if OS_EVENT_NAME_SIZE > 18
    OSEventNameSet(OSTmrSemSignal, (INT8U *)"uC/OS-II TmrSignal", &err);
 1016340:	008040f4 	movhi	r2,259
 1016344:	1096f704 	addi	r2,r2,23516
 1016348:	11000017 	ldw	r4,0(r2)
 101634c:	014040b4 	movhi	r5,258
 1016350:	29685004 	addi	r5,r5,-24256
 1016354:	e1bfff84 	addi	r6,fp,-2
 1016358:	100ccf00 	call	100ccf0 <OSEventNameSet>
#if OS_EVENT_NAME_SIZE > 10
    OSEventNameSet(OSTmrSemSignal, (INT8U *)"OS-TmrSig",          &err);
#endif
#endif

    OSTmr_InitTask();
 101635c:	10163740 	call	1016374 <OSTmr_InitTask>
}
 1016360:	e037883a 	mov	sp,fp
 1016364:	dfc00117 	ldw	ra,4(sp)
 1016368:	df000017 	ldw	fp,0(sp)
 101636c:	dec00204 	addi	sp,sp,8
 1016370:	f800283a 	ret

01016374 <OSTmr_InitTask>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_InitTask (void)
{
 1016374:	f811883a 	mov	r8,ra
 1016378:	100c1d00 	call	100c1d0 <_mcount>
 101637c:	403f883a 	mov	ra,r8
 1016380:	defff804 	addi	sp,sp,-32
 1016384:	dfc00715 	stw	ra,28(sp)
 1016388:	df000615 	stw	fp,24(sp)
 101638c:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OSTmr_Task,
 1016390:	01804134 	movhi	r6,260
 1016394:	31985d04 	addi	r6,r6,24948
 1016398:	00bfff54 	movui	r2,65533
 101639c:	d8800015 	stw	r2,0(sp)
 10163a0:	00804134 	movhi	r2,260
 10163a4:	10965e04 	addi	r2,r2,22904
 10163a8:	d8800115 	stw	r2,4(sp)
 10163ac:	00808004 	movi	r2,512
 10163b0:	d8800215 	stw	r2,8(sp)
 10163b4:	d8000315 	stw	zero,12(sp)
 10163b8:	008000c4 	movi	r2,3
 10163bc:	d8800415 	stw	r2,16(sp)
 10163c0:	01004074 	movhi	r4,257
 10163c4:	2119bf04 	addi	r4,r4,26364
 10163c8:	000b883a 	mov	r5,zero
 10163cc:	000f883a 	mov	r7,zero
 10163d0:	10139f40 	call	10139f4 <OSTaskCreateExt>
                       OS_TASK_TMR_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 12
    OSTaskNameSet(OS_TASK_TMR_PRIO, (INT8U *)"uC/OS-II Tmr", &err);
 10163d4:	014040b4 	movhi	r5,258
 10163d8:	29685504 	addi	r5,r5,-24236
 10163dc:	0009883a 	mov	r4,zero
 10163e0:	e1bfff04 	addi	r6,fp,-4
 10163e4:	10143580 	call	1014358 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 6
    OSTaskNameSet(OS_TASK_TMR_PRIO, (INT8U *)"OS-Tmr", &err);
#endif
#endif
}
 10163e8:	e037883a 	mov	sp,fp
 10163ec:	dfc00117 	ldw	ra,4(sp)
 10163f0:	df000017 	ldw	fp,0(sp)
 10163f4:	dec00204 	addi	sp,sp,8
 10163f8:	f800283a 	ret

010163fc <OSTmr_Link>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Link (OS_TMR *ptmr, INT8U type)
{
 10163fc:	f811883a 	mov	r8,ra
 1016400:	100c1d00 	call	100c1d0 <_mcount>
 1016404:	403f883a 	mov	ra,r8
 1016408:	defffa04 	addi	sp,sp,-24
 101640c:	df000515 	stw	fp,20(sp)
 1016410:	df000504 	addi	fp,sp,20
 1016414:	e13ffe15 	stw	r4,-8(fp)
 1016418:	e17fff05 	stb	r5,-4(fp)
    OS_TMR       *ptmr1;
    OS_TMR_WHEEL *pspoke;
    INT16U        spoke;


    ptmr->OSTmrState = OS_TMR_STATE_RUNNING;
 101641c:	e0fffe17 	ldw	r3,-8(fp)
 1016420:	008000c4 	movi	r2,3
 1016424:	18800c45 	stb	r2,49(r3)
    if (type == OS_TMR_LINK_PERIODIC) {                            /* Determine when timer will expire                */
 1016428:	e0bfff03 	ldbu	r2,-4(fp)
 101642c:	10800058 	cmpnei	r2,r2,1
 1016430:	1000091e 	bne	r2,zero,1016458 <OSTmr_Link+0x5c>
        ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
 1016434:	e0bffe17 	ldw	r2,-8(fp)
 1016438:	10c00717 	ldw	r3,28(r2)
 101643c:	008040f4 	movhi	r2,259
 1016440:	10970904 	addi	r2,r2,23588
 1016444:	10800017 	ldw	r2,0(r2)
 1016448:	1887883a 	add	r3,r3,r2
 101644c:	e0bffe17 	ldw	r2,-8(fp)
 1016450:	10c00515 	stw	r3,20(r2)
 1016454:	00001506 	br	10164ac <OSTmr_Link+0xb0>
    } else {
        if (ptmr->OSTmrDly == 0) {
 1016458:	e0bffe17 	ldw	r2,-8(fp)
 101645c:	10800617 	ldw	r2,24(r2)
 1016460:	1004c03a 	cmpne	r2,r2,zero
 1016464:	1000091e 	bne	r2,zero,101648c <OSTmr_Link+0x90>
            ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
 1016468:	e0bffe17 	ldw	r2,-8(fp)
 101646c:	10c00717 	ldw	r3,28(r2)
 1016470:	008040f4 	movhi	r2,259
 1016474:	10970904 	addi	r2,r2,23588
 1016478:	10800017 	ldw	r2,0(r2)
 101647c:	1887883a 	add	r3,r3,r2
 1016480:	e0bffe17 	ldw	r2,-8(fp)
 1016484:	10c00515 	stw	r3,20(r2)
 1016488:	00000806 	br	10164ac <OSTmr_Link+0xb0>
        } else {
            ptmr->OSTmrMatch = ptmr->OSTmrDly    + OSTmrTime;
 101648c:	e0bffe17 	ldw	r2,-8(fp)
 1016490:	10c00617 	ldw	r3,24(r2)
 1016494:	008040f4 	movhi	r2,259
 1016498:	10970904 	addi	r2,r2,23588
 101649c:	10800017 	ldw	r2,0(r2)
 10164a0:	1887883a 	add	r3,r3,r2
 10164a4:	e0bffe17 	ldw	r2,-8(fp)
 10164a8:	10c00515 	stw	r3,20(r2)
        }
    }
    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
 10164ac:	e0bffe17 	ldw	r2,-8(fp)
 10164b0:	10800517 	ldw	r2,20(r2)
 10164b4:	1080004c 	andi	r2,r2,1
 10164b8:	e0bffb0d 	sth	r2,-20(fp)
    pspoke = &OSTmrWheelTbl[spoke];
 10164bc:	e0bffb0b 	ldhu	r2,-20(fp)
 10164c0:	100490fa 	slli	r2,r2,3
 10164c4:	1007883a 	mov	r3,r2
 10164c8:	00804134 	movhi	r2,260
 10164cc:	108f2a04 	addi	r2,r2,15528
 10164d0:	1885883a 	add	r2,r3,r2
 10164d4:	e0bffc15 	stw	r2,-16(fp)

    if (pspoke->OSTmrFirst == (OS_TMR *)0) {                       /* Link into timer wheel                           */
 10164d8:	e0bffc17 	ldw	r2,-16(fp)
 10164dc:	10800017 	ldw	r2,0(r2)
 10164e0:	1004c03a 	cmpne	r2,r2,zero
 10164e4:	1000091e 	bne	r2,zero,101650c <OSTmr_Link+0x110>
        pspoke->OSTmrFirst   = ptmr;
 10164e8:	e0fffc17 	ldw	r3,-16(fp)
 10164ec:	e0bffe17 	ldw	r2,-8(fp)
 10164f0:	18800015 	stw	r2,0(r3)
        ptmr->OSTmrNext      = (OS_TMR *)0;
 10164f4:	e0bffe17 	ldw	r2,-8(fp)
 10164f8:	10000315 	stw	zero,12(r2)
        pspoke->OSTmrEntries = 1;
 10164fc:	e0fffc17 	ldw	r3,-16(fp)
 1016500:	00800044 	movi	r2,1
 1016504:	1880010d 	sth	r2,4(r3)
 1016508:	00001206 	br	1016554 <OSTmr_Link+0x158>
    } else {
        ptmr1                = pspoke->OSTmrFirst;                 /* Point to first timer in the spoke               */
 101650c:	e0bffc17 	ldw	r2,-16(fp)
 1016510:	10800017 	ldw	r2,0(r2)
 1016514:	e0bffd15 	stw	r2,-12(fp)
        pspoke->OSTmrFirst   = ptmr;
 1016518:	e0fffc17 	ldw	r3,-16(fp)
 101651c:	e0bffe17 	ldw	r2,-8(fp)
 1016520:	18800015 	stw	r2,0(r3)
        ptmr->OSTmrNext      = (void *)ptmr1;
 1016524:	e0fffe17 	ldw	r3,-8(fp)
 1016528:	e0bffd17 	ldw	r2,-12(fp)
 101652c:	18800315 	stw	r2,12(r3)
        ptmr1->OSTmrPrev     = (void *)ptmr;
 1016530:	e0fffd17 	ldw	r3,-12(fp)
 1016534:	e0bffe17 	ldw	r2,-8(fp)
 1016538:	18800415 	stw	r2,16(r3)
        pspoke->OSTmrEntries++;
 101653c:	e0bffc17 	ldw	r2,-16(fp)
 1016540:	1080010b 	ldhu	r2,4(r2)
 1016544:	10800044 	addi	r2,r2,1
 1016548:	1007883a 	mov	r3,r2
 101654c:	e0bffc17 	ldw	r2,-16(fp)
 1016550:	10c0010d 	sth	r3,4(r2)
    }
    ptmr->OSTmrPrev = (void *)0;                                   /* Timer always inserted as first node in list     */
 1016554:	e0bffe17 	ldw	r2,-8(fp)
 1016558:	10000415 	stw	zero,16(r2)
}
 101655c:	e037883a 	mov	sp,fp
 1016560:	df000017 	ldw	fp,0(sp)
 1016564:	dec00104 	addi	sp,sp,4
 1016568:	f800283a 	ret

0101656c <OSTmr_Unlink>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Unlink (OS_TMR *ptmr)
{
 101656c:	f811883a 	mov	r8,ra
 1016570:	100c1d00 	call	100c1d0 <_mcount>
 1016574:	403f883a 	mov	ra,r8
 1016578:	defffa04 	addi	sp,sp,-24
 101657c:	df000515 	stw	fp,20(sp)
 1016580:	df000504 	addi	fp,sp,20
 1016584:	e13fff15 	stw	r4,-4(fp)
    OS_TMR        *ptmr2;
    OS_TMR_WHEEL  *pspoke;
    INT16U         spoke;


    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
 1016588:	e0bfff17 	ldw	r2,-4(fp)
 101658c:	10800517 	ldw	r2,20(r2)
 1016590:	1080004c 	andi	r2,r2,1
 1016594:	e0bffb0d 	sth	r2,-20(fp)
    pspoke = &OSTmrWheelTbl[spoke];
 1016598:	e0bffb0b 	ldhu	r2,-20(fp)
 101659c:	100490fa 	slli	r2,r2,3
 10165a0:	1007883a 	mov	r3,r2
 10165a4:	00804134 	movhi	r2,260
 10165a8:	108f2a04 	addi	r2,r2,15528
 10165ac:	1885883a 	add	r2,r3,r2
 10165b0:	e0bffc15 	stw	r2,-16(fp)

    if (pspoke->OSTmrFirst == ptmr) {                       /* See if timer to remove is at the beginning of list     */
 10165b4:	e0bffc17 	ldw	r2,-16(fp)
 10165b8:	10c00017 	ldw	r3,0(r2)
 10165bc:	e0bfff17 	ldw	r2,-4(fp)
 10165c0:	18800c1e 	bne	r3,r2,10165f4 <OSTmr_Unlink+0x88>
        ptmr1              = (OS_TMR *)ptmr->OSTmrNext;
 10165c4:	e0bfff17 	ldw	r2,-4(fp)
 10165c8:	10800317 	ldw	r2,12(r2)
 10165cc:	e0bffe15 	stw	r2,-8(fp)
        pspoke->OSTmrFirst = (OS_TMR *)ptmr1;
 10165d0:	e0fffc17 	ldw	r3,-16(fp)
 10165d4:	e0bffe17 	ldw	r2,-8(fp)
 10165d8:	18800015 	stw	r2,0(r3)
        if (ptmr1 != (OS_TMR *)0) {
 10165dc:	e0bffe17 	ldw	r2,-8(fp)
 10165e0:	1005003a 	cmpeq	r2,r2,zero
 10165e4:	1000121e 	bne	r2,zero,1016630 <OSTmr_Unlink+0xc4>
            ptmr1->OSTmrPrev = (void *)0;
 10165e8:	e0bffe17 	ldw	r2,-8(fp)
 10165ec:	10000415 	stw	zero,16(r2)
 10165f0:	00000f06 	br	1016630 <OSTmr_Unlink+0xc4>
        }
    } else {
        ptmr1            = (OS_TMR *)ptmr->OSTmrPrev;       /* Remove timer from somewhere in the list                */
 10165f4:	e0bfff17 	ldw	r2,-4(fp)
 10165f8:	10800417 	ldw	r2,16(r2)
 10165fc:	e0bffe15 	stw	r2,-8(fp)
        ptmr2            = (OS_TMR *)ptmr->OSTmrNext;
 1016600:	e0bfff17 	ldw	r2,-4(fp)
 1016604:	10800317 	ldw	r2,12(r2)
 1016608:	e0bffd15 	stw	r2,-12(fp)
        ptmr1->OSTmrNext = ptmr2;
 101660c:	e0fffe17 	ldw	r3,-8(fp)
 1016610:	e0bffd17 	ldw	r2,-12(fp)
 1016614:	18800315 	stw	r2,12(r3)
        if (ptmr2 != (OS_TMR *)0) {
 1016618:	e0bffd17 	ldw	r2,-12(fp)
 101661c:	1005003a 	cmpeq	r2,r2,zero
 1016620:	1000031e 	bne	r2,zero,1016630 <OSTmr_Unlink+0xc4>
            ptmr2->OSTmrPrev = (void *)ptmr1;
 1016624:	e0fffd17 	ldw	r3,-12(fp)
 1016628:	e0bffe17 	ldw	r2,-8(fp)
 101662c:	18800415 	stw	r2,16(r3)
        }
    }
    ptmr->OSTmrState = OS_TMR_STATE_STOPPED;
 1016630:	e0ffff17 	ldw	r3,-4(fp)
 1016634:	00800044 	movi	r2,1
 1016638:	18800c45 	stb	r2,49(r3)
    ptmr->OSTmrNext  = (void *)0;
 101663c:	e0bfff17 	ldw	r2,-4(fp)
 1016640:	10000315 	stw	zero,12(r2)
    ptmr->OSTmrPrev  = (void *)0;
 1016644:	e0bfff17 	ldw	r2,-4(fp)
 1016648:	10000415 	stw	zero,16(r2)
    pspoke->OSTmrEntries--;
 101664c:	e0bffc17 	ldw	r2,-16(fp)
 1016650:	1080010b 	ldhu	r2,4(r2)
 1016654:	10bfffc4 	addi	r2,r2,-1
 1016658:	1007883a 	mov	r3,r2
 101665c:	e0bffc17 	ldw	r2,-16(fp)
 1016660:	10c0010d 	sth	r3,4(r2)
}
 1016664:	e037883a 	mov	sp,fp
 1016668:	df000017 	ldw	fp,0(sp)
 101666c:	dec00104 	addi	sp,sp,4
 1016670:	f800283a 	ret

01016674 <OSTmr_Lock>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Lock (void)
{
 1016674:	f811883a 	mov	r8,ra
 1016678:	100c1d00 	call	100c1d0 <_mcount>
 101667c:	403f883a 	mov	ra,r8
 1016680:	defffd04 	addi	sp,sp,-12
 1016684:	dfc00215 	stw	ra,8(sp)
 1016688:	df000115 	stw	fp,4(sp)
 101668c:	df000104 	addi	fp,sp,4
    INT8U  err;


    OSSemPend(OSTmrSem, 0, &err);
 1016690:	008040f4 	movhi	r2,259
 1016694:	10970b04 	addi	r2,r2,23596
 1016698:	11000017 	ldw	r4,0(r2)
 101669c:	000b883a 	mov	r5,zero
 10166a0:	e1bfff04 	addi	r6,fp,-4
 10166a4:	1012b040 	call	1012b04 <OSSemPend>
    (void)err;
}
 10166a8:	e037883a 	mov	sp,fp
 10166ac:	dfc00117 	ldw	ra,4(sp)
 10166b0:	df000017 	ldw	fp,0(sp)
 10166b4:	dec00204 	addi	sp,sp,8
 10166b8:	f800283a 	ret

010166bc <OSTmr_Unlock>:



#if OS_TMR_EN > 0
static  void  OSTmr_Unlock (void)
{
 10166bc:	f811883a 	mov	r8,ra
 10166c0:	100c1d00 	call	100c1d0 <_mcount>
 10166c4:	403f883a 	mov	ra,r8
 10166c8:	defffe04 	addi	sp,sp,-8
 10166cc:	dfc00115 	stw	ra,4(sp)
 10166d0:	df000015 	stw	fp,0(sp)
 10166d4:	d839883a 	mov	fp,sp
    (void)OSSemPost(OSTmrSem);
 10166d8:	008040f4 	movhi	r2,259
 10166dc:	10970b04 	addi	r2,r2,23596
 10166e0:	11000017 	ldw	r4,0(r2)
 10166e4:	1012f140 	call	1012f14 <OSSemPost>
}
 10166e8:	e037883a 	mov	sp,fp
 10166ec:	dfc00117 	ldw	ra,4(sp)
 10166f0:	df000017 	ldw	fp,0(sp)
 10166f4:	dec00204 	addi	sp,sp,8
 10166f8:	f800283a 	ret

010166fc <OSTmr_Task>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Task (void *p_arg)
{
 10166fc:	f811883a 	mov	r8,ra
 1016700:	100c1d00 	call	100c1d0 <_mcount>
 1016704:	403f883a 	mov	ra,r8
 1016708:	defff704 	addi	sp,sp,-36
 101670c:	dfc00815 	stw	ra,32(sp)
 1016710:	df000715 	stw	fp,28(sp)
 1016714:	df000704 	addi	fp,sp,28
 1016718:	e13fff15 	stw	r4,-4(fp)
    INT16U           spoke;


    (void)p_arg;                                                 /* Not using 'p_arg', prevent compiler warning       */
    for (;;) {
        OSSemPend(OSTmrSemSignal, 0, &err);                      /* Wait for signal indicating time to update timers  */
 101671c:	008040f4 	movhi	r2,259
 1016720:	1096f704 	addi	r2,r2,23516
 1016724:	11000017 	ldw	r4,0(r2)
 1016728:	e1bffe04 	addi	r6,fp,-8
 101672c:	000b883a 	mov	r5,zero
 1016730:	1012b040 	call	1012b04 <OSSemPend>
        OSTmr_Lock();
 1016734:	10166740 	call	1016674 <OSTmr_Lock>
        OSTmrTime++;                                             /* Increment the current time                        */
 1016738:	008040f4 	movhi	r2,259
 101673c:	10970904 	addi	r2,r2,23588
 1016740:	10800017 	ldw	r2,0(r2)
 1016744:	10c00044 	addi	r3,r2,1
 1016748:	008040f4 	movhi	r2,259
 101674c:	10970904 	addi	r2,r2,23588
 1016750:	10c00015 	stw	r3,0(r2)
        spoke  = (INT16U)(OSTmrTime % OS_TMR_CFG_WHEEL_SIZE);    /* Position on current timer wheel entry             */
 1016754:	008040f4 	movhi	r2,259
 1016758:	10970904 	addi	r2,r2,23588
 101675c:	10800017 	ldw	r2,0(r2)
 1016760:	1080004c 	andi	r2,r2,1
 1016764:	e0bff90d 	sth	r2,-28(fp)
        pspoke = &OSTmrWheelTbl[spoke];
 1016768:	e0bff90b 	ldhu	r2,-28(fp)
 101676c:	100490fa 	slli	r2,r2,3
 1016770:	1007883a 	mov	r3,r2
 1016774:	00804134 	movhi	r2,260
 1016778:	108f2a04 	addi	r2,r2,15528
 101677c:	1885883a 	add	r2,r3,r2
 1016780:	e0bffa15 	stw	r2,-24(fp)
        ptmr   = pspoke->OSTmrFirst;
 1016784:	e0bffa17 	ldw	r2,-24(fp)
 1016788:	10800017 	ldw	r2,0(r2)
 101678c:	e0bffd15 	stw	r2,-12(fp)
        while (ptmr != (OS_TMR *)0) {
 1016790:	00002406 	br	1016824 <OSTmr_Task+0x128>
            ptmr_next = (OS_TMR *)ptmr->OSTmrNext;               /* Point to next timer to update because current ... */
 1016794:	e0bffd17 	ldw	r2,-12(fp)
 1016798:	10800317 	ldw	r2,12(r2)
 101679c:	e0bffc15 	stw	r2,-16(fp)
                                                                 /* ... timer could get unlinked from the wheel.      */
            if (OSTmrTime == ptmr->OSTmrMatch) {                 /* Process each timer that expires                   */
 10167a0:	e0bffd17 	ldw	r2,-12(fp)
 10167a4:	10c00517 	ldw	r3,20(r2)
 10167a8:	008040f4 	movhi	r2,259
 10167ac:	10970904 	addi	r2,r2,23588
 10167b0:	10800017 	ldw	r2,0(r2)
 10167b4:	1880191e 	bne	r3,r2,101681c <OSTmr_Task+0x120>
                pfnct = ptmr->OSTmrCallback;                     /* Execute callback function if available            */
 10167b8:	e0bffd17 	ldw	r2,-12(fp)
 10167bc:	10800117 	ldw	r2,4(r2)
 10167c0:	e0bffb15 	stw	r2,-20(fp)
                if (pfnct != (OS_TMR_CALLBACK)0) {
 10167c4:	e0bffb17 	ldw	r2,-20(fp)
 10167c8:	1005003a 	cmpeq	r2,r2,zero
 10167cc:	1000051e 	bne	r2,zero,10167e4 <OSTmr_Task+0xe8>
                    (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);
 10167d0:	e0bffd17 	ldw	r2,-12(fp)
 10167d4:	11400217 	ldw	r5,8(r2)
 10167d8:	e0bffb17 	ldw	r2,-20(fp)
 10167dc:	e13ffd17 	ldw	r4,-12(fp)
 10167e0:	103ee83a 	callr	r2
                }
                OSTmr_Unlink(ptmr);                              /* Remove from current wheel spoke                   */
 10167e4:	e13ffd17 	ldw	r4,-12(fp)
 10167e8:	101656c0 	call	101656c <OSTmr_Unlink>
                if (ptmr->OSTmrOpt == OS_TMR_OPT_PERIODIC) {
 10167ec:	e0bffd17 	ldw	r2,-12(fp)
 10167f0:	10800c03 	ldbu	r2,48(r2)
 10167f4:	10803fcc 	andi	r2,r2,255
 10167f8:	10800098 	cmpnei	r2,r2,2
 10167fc:	1000041e 	bne	r2,zero,1016810 <OSTmr_Task+0x114>
                    OSTmr_Link(ptmr, OS_TMR_LINK_PERIODIC);      /* Recalculate new position of timer in wheel        */
 1016800:	e13ffd17 	ldw	r4,-12(fp)
 1016804:	01400044 	movi	r5,1
 1016808:	10163fc0 	call	10163fc <OSTmr_Link>
 101680c:	00000306 	br	101681c <OSTmr_Task+0x120>
                } else {
                    ptmr->OSTmrState = OS_TMR_STATE_COMPLETED;   /* Indicate that the timer has completed             */
 1016810:	e0fffd17 	ldw	r3,-12(fp)
 1016814:	00800084 	movi	r2,2
 1016818:	18800c45 	stb	r2,49(r3)
                }
            }
            ptmr = ptmr_next;
 101681c:	e0bffc17 	ldw	r2,-16(fp)
 1016820:	e0bffd15 	stw	r2,-12(fp)
        OSTmr_Lock();
        OSTmrTime++;                                             /* Increment the current time                        */
        spoke  = (INT16U)(OSTmrTime % OS_TMR_CFG_WHEEL_SIZE);    /* Position on current timer wheel entry             */
        pspoke = &OSTmrWheelTbl[spoke];
        ptmr   = pspoke->OSTmrFirst;
        while (ptmr != (OS_TMR *)0) {
 1016824:	e0bffd17 	ldw	r2,-12(fp)
 1016828:	1004c03a 	cmpne	r2,r2,zero
 101682c:	103fd91e 	bne	r2,zero,1016794 <OSTmr_Task+0x98>
                    ptmr->OSTmrState = OS_TMR_STATE_COMPLETED;   /* Indicate that the timer has completed             */
                }
            }
            ptmr = ptmr_next;
        }
        OSTmr_Unlock();
 1016830:	10166bc0 	call	10166bc <OSTmr_Unlock>
    }
 1016834:	003fb906 	br	101671c <OSTmr_Task+0x20>

01016838 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 1016838:	f811883a 	mov	r8,ra
 101683c:	100c1d00 	call	100c1d0 <_mcount>
 1016840:	403f883a 	mov	ra,r8
 1016844:	defffd04 	addi	sp,sp,-12
 1016848:	dfc00215 	stw	ra,8(sp)
 101684c:	df000115 	stw	fp,4(sp)
 1016850:	df000104 	addi	fp,sp,4
 1016854:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU_0, cpu_0);
 1016858:	1018e140 	call	1018e14 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 101685c:	00800044 	movi	r2,1
 1016860:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 1016864:	e037883a 	mov	sp,fp
 1016868:	dfc00117 	ldw	ra,4(sp)
 101686c:	df000017 	ldw	fp,0(sp)
 1016870:	dec00204 	addi	sp,sp,8
 1016874:	f800283a 	ret

01016878 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 1016878:	f811883a 	mov	r8,ra
 101687c:	100c1d00 	call	100c1d0 <_mcount>
 1016880:	403f883a 	mov	ra,r8
 1016884:	defffe04 	addi	sp,sp,-8
 1016888:	dfc00115 	stw	ra,4(sp)
 101688c:	df000015 	stw	fp,0(sp)
 1016890:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0_A, timer_0_A);
 1016894:	01000434 	movhi	r4,16
 1016898:	21144804 	addi	r4,r4,20768
 101689c:	000b883a 	mov	r5,zero
 10168a0:	01800084 	movi	r6,2
 10168a4:	01c0fa04 	movi	r7,1000
 10168a8:	1017ec00 	call	1017ec0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_0_B, timer_0_B);
    ALTERA_AVALON_FIFO_INIT ( FIFO_0, fifo_0);
    ALTERA_AVALON_FIFO_INIT ( FIFO_1, fifo_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 10168ac:	010040b4 	movhi	r4,258
 10168b0:	211b4304 	addi	r4,r4,27916
 10168b4:	000b883a 	mov	r5,zero
 10168b8:	01800144 	movi	r6,5
 10168bc:	1016c380 	call	1016c38 <altera_avalon_jtag_uart_init>
 10168c0:	010040b4 	movhi	r4,258
 10168c4:	211b3904 	addi	r4,r4,27876
 10168c8:	1016a7c0 	call	1016a7c <alt_dev_reg>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_0, mutex_0);
 10168cc:	010040b4 	movhi	r4,258
 10168d0:	211f5404 	addi	r4,r4,32080
 10168d4:	10169500 	call	1016950 <alt_avalon_mutex_reg>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_1, mutex_1);
 10168d8:	010040b4 	movhi	r4,258
 10168dc:	211f5904 	addi	r4,r4,32100
 10168e0:	10169500 	call	1016950 <alt_avalon_mutex_reg>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_2, mutex_2);
 10168e4:	010040b4 	movhi	r4,258
 10168e8:	211f5e04 	addi	r4,r4,32120
 10168ec:	10169500 	call	1016950 <alt_avalon_mutex_reg>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_3, mutex_3);
 10168f0:	010040b4 	movhi	r4,258
 10168f4:	211f6304 	addi	r4,r4,32140
 10168f8:	10169500 	call	1016950 <alt_avalon_mutex_reg>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_4, mutex_4);
 10168fc:	010040b4 	movhi	r4,258
 1016900:	211f6804 	addi	r4,r4,32160
 1016904:	10169500 	call	1016950 <alt_avalon_mutex_reg>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER_0, performance_counter_0);
 1016908:	00c00434 	movhi	r3,16
 101690c:	18d40004 	addi	r3,r3,20480
 1016910:	00800044 	movi	r2,1
 1016914:	18800035 	stwio	r2,0(r3)
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( BUTTONS, Buttons);
 1016918:	010040b4 	movhi	r4,258
 101691c:	211f6d04 	addi	r4,r4,32180
 1016920:	1016a7c0 	call	1016a7c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
 1016924:	010040b4 	movhi	r4,258
 1016928:	211f7804 	addi	r4,r4,32224
 101692c:	1016a7c0 	call	1016a7c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
 1016930:	010040b4 	movhi	r4,258
 1016934:	211f8304 	addi	r4,r4,32268
 1016938:	1016a7c0 	call	1016a7c <alt_dev_reg>
}
 101693c:	e037883a 	mov	sp,fp
 1016940:	dfc00117 	ldw	ra,4(sp)
 1016944:	df000017 	ldw	fp,0(sp)
 1016948:	dec00204 	addi	sp,sp,8
 101694c:	f800283a 	ret

01016950 <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
 1016950:	f811883a 	mov	r8,ra
 1016954:	100c1d00 	call	100c1d0 <_mcount>
 1016958:	403f883a 	mov	ra,r8
 101695c:	defff904 	addi	sp,sp,-28
 1016960:	dfc00615 	stw	ra,24(sp)
 1016964:	df000515 	stw	fp,20(sp)
 1016968:	df000504 	addi	fp,sp,20
 101696c:	e13ffe15 	stw	r4,-8(fp)
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
 1016970:	e0bffe17 	ldw	r2,-8(fp)
 1016974:	10800404 	addi	r2,r2,16
 1016978:	e0bffb15 	stw	r2,-20(fp)
 101697c:	00800044 	movi	r2,1
 1016980:	e0bffc0d 	sth	r2,-16(fp)
 1016984:	e13ffc0b 	ldhu	r4,-16(fp)
 1016988:	10127380 	call	1012738 <OSSemCreate>
 101698c:	1007883a 	mov	r3,r2
 1016990:	e0bffb17 	ldw	r2,-20(fp)
 1016994:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
 1016998:	e0bffb17 	ldw	r2,-20(fp)
 101699c:	10800017 	ldw	r2,0(r2)
 10169a0:	1005003a 	cmpeq	r2,r2,zero
 10169a4:	1000021e 	bne	r2,zero,10169b0 <alt_avalon_mutex_reg+0x60>
 10169a8:	e03fff15 	stw	zero,-4(fp)
 10169ac:	00000206 	br	10169b8 <alt_avalon_mutex_reg+0x68>
 10169b0:	00bfffc4 	movi	r2,-1
 10169b4:	e0bfff15 	stw	r2,-4(fp)
 10169b8:	e0bfff17 	ldw	r2,-4(fp)
 10169bc:	e0bffd15 	stw	r2,-12(fp)
  if (!ret_code)
 10169c0:	e0bffd17 	ldw	r2,-12(fp)
 10169c4:	1004c03a 	cmpne	r2,r2,zero
 10169c8:	1000061e 	bne	r2,zero,10169e4 <alt_avalon_mutex_reg+0x94>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
 10169cc:	e13ffe17 	ldw	r4,-8(fp)
 10169d0:	014040b4 	movhi	r5,258
 10169d4:	295fc604 	addi	r5,r5,32536
 10169d8:	101821c0 	call	101821c <alt_dev_llist_insert>
 10169dc:	e0bffd15 	stw	r2,-12(fp)
 10169e0:	00000506 	br	10169f8 <alt_avalon_mutex_reg+0xa8>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
 10169e4:	1016a100 	call	1016a10 <alt_get_errno>
 10169e8:	00c00304 	movi	r3,12
 10169ec:	10c00015 	stw	r3,0(r2)
    ret_code = -ENOMEM;
 10169f0:	00bffd04 	movi	r2,-12
 10169f4:	e0bffd15 	stw	r2,-12(fp)
  }

  return ret_code;
 10169f8:	e0bffd17 	ldw	r2,-12(fp)
}
 10169fc:	e037883a 	mov	sp,fp
 1016a00:	dfc00117 	ldw	ra,4(sp)
 1016a04:	df000017 	ldw	fp,0(sp)
 1016a08:	dec00204 	addi	sp,sp,8
 1016a0c:	f800283a 	ret

01016a10 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1016a10:	f811883a 	mov	r8,ra
 1016a14:	100c1d00 	call	100c1d0 <_mcount>
 1016a18:	403f883a 	mov	ra,r8
 1016a1c:	defffd04 	addi	sp,sp,-12
 1016a20:	dfc00215 	stw	ra,8(sp)
 1016a24:	df000115 	stw	fp,4(sp)
 1016a28:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1016a2c:	008040b4 	movhi	r2,258
 1016a30:	109fa304 	addi	r2,r2,32396
 1016a34:	10800017 	ldw	r2,0(r2)
 1016a38:	1005003a 	cmpeq	r2,r2,zero
 1016a3c:	1000061e 	bne	r2,zero,1016a58 <alt_get_errno+0x48>
 1016a40:	008040b4 	movhi	r2,258
 1016a44:	109fa304 	addi	r2,r2,32396
 1016a48:	10800017 	ldw	r2,0(r2)
 1016a4c:	103ee83a 	callr	r2
 1016a50:	e0bfff15 	stw	r2,-4(fp)
 1016a54:	00000306 	br	1016a64 <alt_get_errno+0x54>
 1016a58:	008040f4 	movhi	r2,259
 1016a5c:	1096ea04 	addi	r2,r2,23464
 1016a60:	e0bfff15 	stw	r2,-4(fp)
 1016a64:	e0bfff17 	ldw	r2,-4(fp)
}
 1016a68:	e037883a 	mov	sp,fp
 1016a6c:	dfc00117 	ldw	ra,4(sp)
 1016a70:	df000017 	ldw	fp,0(sp)
 1016a74:	dec00204 	addi	sp,sp,8
 1016a78:	f800283a 	ret

01016a7c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 1016a7c:	f811883a 	mov	r8,ra
 1016a80:	100c1d00 	call	100c1d0 <_mcount>
 1016a84:	403f883a 	mov	ra,r8
 1016a88:	defffd04 	addi	sp,sp,-12
 1016a8c:	dfc00215 	stw	ra,8(sp)
 1016a90:	df000115 	stw	fp,4(sp)
 1016a94:	df000104 	addi	fp,sp,4
 1016a98:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 1016a9c:	e13fff17 	ldw	r4,-4(fp)
 1016aa0:	014040b4 	movhi	r5,258
 1016aa4:	295fa004 	addi	r5,r5,32384
 1016aa8:	101821c0 	call	101821c <alt_dev_llist_insert>
}
 1016aac:	e037883a 	mov	sp,fp
 1016ab0:	dfc00117 	ldw	ra,4(sp)
 1016ab4:	df000017 	ldw	fp,0(sp)
 1016ab8:	dec00204 	addi	sp,sp,8
 1016abc:	f800283a 	ret

01016ac0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 1016ac0:	f811883a 	mov	r8,ra
 1016ac4:	100c1d00 	call	100c1d0 <_mcount>
 1016ac8:	403f883a 	mov	ra,r8
 1016acc:	defffa04 	addi	sp,sp,-24
 1016ad0:	dfc00515 	stw	ra,20(sp)
 1016ad4:	df000415 	stw	fp,16(sp)
 1016ad8:	df000404 	addi	fp,sp,16
 1016adc:	e13ffd15 	stw	r4,-12(fp)
 1016ae0:	e17ffe15 	stw	r5,-8(fp)
 1016ae4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1016ae8:	e0bffd17 	ldw	r2,-12(fp)
 1016aec:	10800017 	ldw	r2,0(r2)
 1016af0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 1016af4:	e0bffc17 	ldw	r2,-16(fp)
 1016af8:	11000a04 	addi	r4,r2,40
 1016afc:	e0bffd17 	ldw	r2,-12(fp)
 1016b00:	11c00217 	ldw	r7,8(r2)
 1016b04:	e17ffe17 	ldw	r5,-8(fp)
 1016b08:	e1bfff17 	ldw	r6,-4(fp)
 1016b0c:	10172e80 	call	10172e8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 1016b10:	e037883a 	mov	sp,fp
 1016b14:	dfc00117 	ldw	ra,4(sp)
 1016b18:	df000017 	ldw	fp,0(sp)
 1016b1c:	dec00204 	addi	sp,sp,8
 1016b20:	f800283a 	ret

01016b24 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 1016b24:	f811883a 	mov	r8,ra
 1016b28:	100c1d00 	call	100c1d0 <_mcount>
 1016b2c:	403f883a 	mov	ra,r8
 1016b30:	defffa04 	addi	sp,sp,-24
 1016b34:	dfc00515 	stw	ra,20(sp)
 1016b38:	df000415 	stw	fp,16(sp)
 1016b3c:	df000404 	addi	fp,sp,16
 1016b40:	e13ffd15 	stw	r4,-12(fp)
 1016b44:	e17ffe15 	stw	r5,-8(fp)
 1016b48:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1016b4c:	e0bffd17 	ldw	r2,-12(fp)
 1016b50:	10800017 	ldw	r2,0(r2)
 1016b54:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 1016b58:	e0bffc17 	ldw	r2,-16(fp)
 1016b5c:	11000a04 	addi	r4,r2,40
 1016b60:	e0bffd17 	ldw	r2,-12(fp)
 1016b64:	11c00217 	ldw	r7,8(r2)
 1016b68:	e17ffe17 	ldw	r5,-8(fp)
 1016b6c:	e1bfff17 	ldw	r6,-4(fp)
 1016b70:	10175b40 	call	10175b4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 1016b74:	e037883a 	mov	sp,fp
 1016b78:	dfc00117 	ldw	ra,4(sp)
 1016b7c:	df000017 	ldw	fp,0(sp)
 1016b80:	dec00204 	addi	sp,sp,8
 1016b84:	f800283a 	ret

01016b88 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 1016b88:	f811883a 	mov	r8,ra
 1016b8c:	100c1d00 	call	100c1d0 <_mcount>
 1016b90:	403f883a 	mov	ra,r8
 1016b94:	defffc04 	addi	sp,sp,-16
 1016b98:	dfc00315 	stw	ra,12(sp)
 1016b9c:	df000215 	stw	fp,8(sp)
 1016ba0:	df000204 	addi	fp,sp,8
 1016ba4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1016ba8:	e0bfff17 	ldw	r2,-4(fp)
 1016bac:	10800017 	ldw	r2,0(r2)
 1016bb0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 1016bb4:	e0bffe17 	ldw	r2,-8(fp)
 1016bb8:	11000a04 	addi	r4,r2,40
 1016bbc:	e0bfff17 	ldw	r2,-4(fp)
 1016bc0:	11400217 	ldw	r5,8(r2)
 1016bc4:	10171680 	call	1017168 <altera_avalon_jtag_uart_close>
}
 1016bc8:	e037883a 	mov	sp,fp
 1016bcc:	dfc00117 	ldw	ra,4(sp)
 1016bd0:	df000017 	ldw	fp,0(sp)
 1016bd4:	dec00204 	addi	sp,sp,8
 1016bd8:	f800283a 	ret

01016bdc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 1016bdc:	f811883a 	mov	r8,ra
 1016be0:	100c1d00 	call	100c1d0 <_mcount>
 1016be4:	403f883a 	mov	ra,r8
 1016be8:	defffa04 	addi	sp,sp,-24
 1016bec:	dfc00515 	stw	ra,20(sp)
 1016bf0:	df000415 	stw	fp,16(sp)
 1016bf4:	df000404 	addi	fp,sp,16
 1016bf8:	e13ffd15 	stw	r4,-12(fp)
 1016bfc:	e17ffe15 	stw	r5,-8(fp)
 1016c00:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 1016c04:	e0bffd17 	ldw	r2,-12(fp)
 1016c08:	10800017 	ldw	r2,0(r2)
 1016c0c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 1016c10:	e0bffc17 	ldw	r2,-16(fp)
 1016c14:	11000a04 	addi	r4,r2,40
 1016c18:	e17ffe17 	ldw	r5,-8(fp)
 1016c1c:	e1bfff17 	ldw	r6,-4(fp)
 1016c20:	10171e80 	call	10171e8 <altera_avalon_jtag_uart_ioctl>
}
 1016c24:	e037883a 	mov	sp,fp
 1016c28:	dfc00117 	ldw	ra,4(sp)
 1016c2c:	df000017 	ldw	fp,0(sp)
 1016c30:	dec00204 	addi	sp,sp,8
 1016c34:	f800283a 	ret

01016c38 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 1016c38:	f811883a 	mov	r8,ra
 1016c3c:	100c1d00 	call	100c1d0 <_mcount>
 1016c40:	403f883a 	mov	ra,r8
 1016c44:	defff504 	addi	sp,sp,-44
 1016c48:	dfc00a15 	stw	ra,40(sp)
 1016c4c:	df000915 	stw	fp,36(sp)
 1016c50:	df000904 	addi	fp,sp,36
 1016c54:	e13ffd15 	stw	r4,-12(fp)
 1016c58:	e17ffe15 	stw	r5,-8(fp)
 1016c5c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
 1016c60:	e0bffd17 	ldw	r2,-12(fp)
 1016c64:	10800c04 	addi	r2,r2,48
 1016c68:	e0bffb15 	stw	r2,-20(fp)
 1016c6c:	e03ffc0d 	sth	zero,-16(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
 1016c70:	e13ffc0b 	ldhu	r4,-16(fp)
 1016c74:	e17ffc84 	addi	r5,fp,-14
 1016c78:	100f3bc0 	call	100f3bc <OSFlagCreate>
 1016c7c:	1007883a 	mov	r3,r2
 1016c80:	e0bffb17 	ldw	r2,-20(fp)
 1016c84:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
 1016c88:	e0bffd17 	ldw	r2,-12(fp)
 1016c8c:	10800a04 	addi	r2,r2,40
 1016c90:	e0bff915 	stw	r2,-28(fp)
 1016c94:	00800044 	movi	r2,1
 1016c98:	e0bffa0d 	sth	r2,-24(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
 1016c9c:	e13ffa0b 	ldhu	r4,-24(fp)
 1016ca0:	10127380 	call	1012738 <OSSemCreate>
 1016ca4:	1007883a 	mov	r3,r2
 1016ca8:	e0bff917 	ldw	r2,-28(fp)
 1016cac:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
 1016cb0:	e0bffd17 	ldw	r2,-12(fp)
 1016cb4:	10800b04 	addi	r2,r2,44
 1016cb8:	e0bff715 	stw	r2,-36(fp)
 1016cbc:	00800044 	movi	r2,1
 1016cc0:	e0bff80d 	sth	r2,-32(fp)
 1016cc4:	e13ff80b 	ldhu	r4,-32(fp)
 1016cc8:	10127380 	call	1012738 <OSSemCreate>
 1016ccc:	1007883a 	mov	r3,r2
 1016cd0:	e0bff717 	ldw	r2,-36(fp)
 1016cd4:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1016cd8:	e0fffd17 	ldw	r3,-12(fp)
 1016cdc:	00800044 	movi	r2,1
 1016ce0:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 1016ce4:	e0bffd17 	ldw	r2,-12(fp)
 1016ce8:	10800017 	ldw	r2,0(r2)
 1016cec:	11000104 	addi	r4,r2,4
 1016cf0:	e0bffd17 	ldw	r2,-12(fp)
 1016cf4:	10800817 	ldw	r2,32(r2)
 1016cf8:	1007883a 	mov	r3,r2
 1016cfc:	2005883a 	mov	r2,r4
 1016d00:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
 1016d04:	e13fff17 	ldw	r4,-4(fp)
 1016d08:	e17ffd17 	ldw	r5,-12(fp)
 1016d0c:	01804074 	movhi	r6,257
 1016d10:	319b5d04 	addi	r6,r6,28020
 1016d14:	10189400 	call	1018940 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 1016d18:	e0bffd17 	ldw	r2,-12(fp)
 1016d1c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 1016d20:	e0bffd17 	ldw	r2,-12(fp)
 1016d24:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 1016d28:	008040f4 	movhi	r2,259
 1016d2c:	1096ef04 	addi	r2,r2,23484
 1016d30:	10800017 	ldw	r2,0(r2)
 1016d34:	100b883a 	mov	r5,r2
 1016d38:	01804074 	movhi	r6,257
 1016d3c:	319c1204 	addi	r6,r6,28744
 1016d40:	e1fffd17 	ldw	r7,-12(fp)
 1016d44:	100b8f00 	call	100b8f0 <alt_alarm_start>
 1016d48:	1004403a 	cmpge	r2,r2,zero
 1016d4c:	1000041e 	bne	r2,zero,1016d60 <altera_avalon_jtag_uart_init+0x128>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 1016d50:	e0fffd17 	ldw	r3,-12(fp)
 1016d54:	00a00034 	movhi	r2,32768
 1016d58:	10bfffc4 	addi	r2,r2,-1
 1016d5c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 1016d60:	e037883a 	mov	sp,fp
 1016d64:	dfc00117 	ldw	ra,4(sp)
 1016d68:	df000017 	ldw	fp,0(sp)
 1016d6c:	dec00204 	addi	sp,sp,8
 1016d70:	f800283a 	ret

01016d74 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 1016d74:	f811883a 	mov	r8,ra
 1016d78:	100c1d00 	call	100c1d0 <_mcount>
 1016d7c:	403f883a 	mov	ra,r8
 1016d80:	defff104 	addi	sp,sp,-60
 1016d84:	dfc00e15 	stw	ra,56(sp)
 1016d88:	df000d15 	stw	fp,52(sp)
 1016d8c:	df000d04 	addi	fp,sp,52
 1016d90:	e13ffe15 	stw	r4,-8(fp)
 1016d94:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 1016d98:	e0bffe17 	ldw	r2,-8(fp)
 1016d9c:	e0bffc15 	stw	r2,-16(fp)
  unsigned int base = sp->base;
 1016da0:	e0bffc17 	ldw	r2,-16(fp)
 1016da4:	10800017 	ldw	r2,0(r2)
 1016da8:	e0bffb15 	stw	r2,-20(fp)
 1016dac:	00000006 	br	1016db0 <altera_avalon_jtag_uart_irq+0x3c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1016db0:	e0bffb17 	ldw	r2,-20(fp)
 1016db4:	10800104 	addi	r2,r2,4
 1016db8:	10800037 	ldwio	r2,0(r2)
 1016dbc:	e0bffa15 	stw	r2,-24(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 1016dc0:	e0bffa17 	ldw	r2,-24(fp)
 1016dc4:	1080c00c 	andi	r2,r2,768
 1016dc8:	1005003a 	cmpeq	r2,r2,zero
 1016dcc:	1000991e 	bne	r2,zero,1017034 <altera_avalon_jtag_uart_irq+0x2c0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 1016dd0:	e0bffa17 	ldw	r2,-24(fp)
 1016dd4:	1080400c 	andi	r2,r2,256
 1016dd8:	1005003a 	cmpeq	r2,r2,zero
 1016ddc:	1000481e 	bne	r2,zero,1016f00 <altera_avalon_jtag_uart_irq+0x18c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 1016de0:	00800074 	movhi	r2,1
 1016de4:	e0bff915 	stw	r2,-28(fp)
 1016de8:	00000006 	br	1016dec <altera_avalon_jtag_uart_irq+0x78>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1016dec:	e0bffc17 	ldw	r2,-16(fp)
 1016df0:	10800d17 	ldw	r2,52(r2)
 1016df4:	10800044 	addi	r2,r2,1
 1016df8:	1081ffcc 	andi	r2,r2,2047
 1016dfc:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
 1016e00:	e0bffc17 	ldw	r2,-16(fp)
 1016e04:	10c00e17 	ldw	r3,56(r2)
 1016e08:	e0bff817 	ldw	r2,-32(fp)
 1016e0c:	18802826 	beq	r3,r2,1016eb0 <altera_avalon_jtag_uart_irq+0x13c>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 1016e10:	e0bffb17 	ldw	r2,-20(fp)
 1016e14:	10800037 	ldwio	r2,0(r2)
 1016e18:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 1016e1c:	e0bff917 	ldw	r2,-28(fp)
 1016e20:	10a0000c 	andi	r2,r2,32768
 1016e24:	1005003a 	cmpeq	r2,r2,zero
 1016e28:	1000211e 	bne	r2,zero,1016eb0 <altera_avalon_jtag_uart_irq+0x13c>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 1016e2c:	e0bffc17 	ldw	r2,-16(fp)
 1016e30:	10c00d17 	ldw	r3,52(r2)
 1016e34:	e0bff917 	ldw	r2,-28(fp)
 1016e38:	1009883a 	mov	r4,r2
 1016e3c:	e0bffc17 	ldw	r2,-16(fp)
 1016e40:	1885883a 	add	r2,r3,r2
 1016e44:	10801104 	addi	r2,r2,68
 1016e48:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1016e4c:	e0bffc17 	ldw	r2,-16(fp)
 1016e50:	10800d17 	ldw	r2,52(r2)
 1016e54:	10800044 	addi	r2,r2,1
 1016e58:	10c1ffcc 	andi	r3,r2,2047
 1016e5c:	e0bffc17 	ldw	r2,-16(fp)
 1016e60:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
 1016e64:	e0bffc17 	ldw	r2,-16(fp)
 1016e68:	10800c17 	ldw	r2,48(r2)
 1016e6c:	e0bff515 	stw	r2,-44(fp)
 1016e70:	00800044 	movi	r2,1
 1016e74:	e0bff60d 	sth	r2,-40(fp)
 1016e78:	00800044 	movi	r2,1
 1016e7c:	e0bff685 	stb	r2,-38(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 1016e80:	008040f4 	movhi	r2,259
 1016e84:	1096f804 	addi	r2,r2,23520
 1016e88:	10800003 	ldbu	r2,0(r2)
 1016e8c:	10803fcc 	andi	r2,r2,255
 1016e90:	1005003a 	cmpeq	r2,r2,zero
 1016e94:	103fd51e 	bne	r2,zero,1016dec <altera_avalon_jtag_uart_irq+0x78>
  {
    OSFlagPost (group, flags, opt, &err);
 1016e98:	e17ff60b 	ldhu	r5,-40(fp)
 1016e9c:	e1bff683 	ldbu	r6,-38(fp)
 1016ea0:	e1fffd04 	addi	r7,fp,-12
 1016ea4:	e13ff517 	ldw	r4,-44(fp)
 1016ea8:	101012c0 	call	101012c <OSFlagPost>
    return err;
 1016eac:	003fcf06 	br	1016dec <altera_avalon_jtag_uart_irq+0x78>
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 1016eb0:	e0bff917 	ldw	r2,-28(fp)
 1016eb4:	10bfffec 	andhi	r2,r2,65535
 1016eb8:	1005003a 	cmpeq	r2,r2,zero
 1016ebc:	1000101e 	bne	r2,zero,1016f00 <altera_avalon_jtag_uart_irq+0x18c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1016ec0:	e0bffc17 	ldw	r2,-16(fp)
 1016ec4:	10c00817 	ldw	r3,32(r2)
 1016ec8:	00bfff84 	movi	r2,-2
 1016ecc:	1886703a 	and	r3,r3,r2
 1016ed0:	e0bffc17 	ldw	r2,-16(fp)
 1016ed4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 1016ed8:	e0bffb17 	ldw	r2,-20(fp)
 1016edc:	11000104 	addi	r4,r2,4
 1016ee0:	e0bffc17 	ldw	r2,-16(fp)
 1016ee4:	10800817 	ldw	r2,32(r2)
 1016ee8:	1007883a 	mov	r3,r2
 1016eec:	2005883a 	mov	r2,r4
 1016ef0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1016ef4:	e0bffb17 	ldw	r2,-20(fp)
 1016ef8:	10800104 	addi	r2,r2,4
 1016efc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 1016f00:	e0bffa17 	ldw	r2,-24(fp)
 1016f04:	1080800c 	andi	r2,r2,512
 1016f08:	1005003a 	cmpeq	r2,r2,zero
 1016f0c:	103fa81e 	bne	r2,zero,1016db0 <altera_avalon_jtag_uart_irq+0x3c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 1016f10:	e0bffa17 	ldw	r2,-24(fp)
 1016f14:	10bfffec 	andhi	r2,r2,65535
 1016f18:	1004d43a 	srli	r2,r2,16
 1016f1c:	e0bff715 	stw	r2,-36(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 1016f20:	00002706 	br	1016fc0 <altera_avalon_jtag_uart_irq+0x24c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 1016f24:	e13ffb17 	ldw	r4,-20(fp)
 1016f28:	e0bffc17 	ldw	r2,-16(fp)
 1016f2c:	10c01017 	ldw	r3,64(r2)
 1016f30:	e0bffc17 	ldw	r2,-16(fp)
 1016f34:	1885883a 	add	r2,r3,r2
 1016f38:	10821104 	addi	r2,r2,2116
 1016f3c:	10800003 	ldbu	r2,0(r2)
 1016f40:	10c03fcc 	andi	r3,r2,255
 1016f44:	18c0201c 	xori	r3,r3,128
 1016f48:	18ffe004 	addi	r3,r3,-128
 1016f4c:	2005883a 	mov	r2,r4
 1016f50:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1016f54:	e0bffc17 	ldw	r2,-16(fp)
 1016f58:	10801017 	ldw	r2,64(r2)
 1016f5c:	10800044 	addi	r2,r2,1
 1016f60:	10c1ffcc 	andi	r3,r2,2047
 1016f64:	e0bffc17 	ldw	r2,-16(fp)
 1016f68:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
 1016f6c:	e0bffc17 	ldw	r2,-16(fp)
 1016f70:	10800c17 	ldw	r2,48(r2)
 1016f74:	e0bff315 	stw	r2,-52(fp)
 1016f78:	00800084 	movi	r2,2
 1016f7c:	e0bff40d 	sth	r2,-48(fp)
 1016f80:	00800044 	movi	r2,1
 1016f84:	e0bff485 	stb	r2,-46(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 1016f88:	008040f4 	movhi	r2,259
 1016f8c:	1096f804 	addi	r2,r2,23520
 1016f90:	10800003 	ldbu	r2,0(r2)
 1016f94:	10803fcc 	andi	r2,r2,255
 1016f98:	1005003a 	cmpeq	r2,r2,zero
 1016f9c:	1000051e 	bne	r2,zero,1016fb4 <altera_avalon_jtag_uart_irq+0x240>
  {
    OSFlagPost (group, flags, opt, &err);
 1016fa0:	e17ff40b 	ldhu	r5,-48(fp)
 1016fa4:	e1bff483 	ldbu	r6,-46(fp)
 1016fa8:	e1fffd44 	addi	r7,fp,-11
 1016fac:	e13ff317 	ldw	r4,-52(fp)
 1016fb0:	101012c0 	call	101012c <OSFlagPost>

        space--;
 1016fb4:	e0bff717 	ldw	r2,-36(fp)
 1016fb8:	10bfffc4 	addi	r2,r2,-1
 1016fbc:	e0bff715 	stw	r2,-36(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 1016fc0:	e0bff717 	ldw	r2,-36(fp)
 1016fc4:	1005003a 	cmpeq	r2,r2,zero
 1016fc8:	1000051e 	bne	r2,zero,1016fe0 <altera_avalon_jtag_uart_irq+0x26c>
 1016fcc:	e0bffc17 	ldw	r2,-16(fp)
 1016fd0:	10c01017 	ldw	r3,64(r2)
 1016fd4:	e0bffc17 	ldw	r2,-16(fp)
 1016fd8:	10800f17 	ldw	r2,60(r2)
 1016fdc:	18bfd11e 	bne	r3,r2,1016f24 <altera_avalon_jtag_uart_irq+0x1b0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 1016fe0:	e0bff717 	ldw	r2,-36(fp)
 1016fe4:	1005003a 	cmpeq	r2,r2,zero
 1016fe8:	103f711e 	bne	r2,zero,1016db0 <altera_avalon_jtag_uart_irq+0x3c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 1016fec:	e0bffc17 	ldw	r2,-16(fp)
 1016ff0:	10c00817 	ldw	r3,32(r2)
 1016ff4:	00bfff44 	movi	r2,-3
 1016ff8:	1886703a 	and	r3,r3,r2
 1016ffc:	e0bffc17 	ldw	r2,-16(fp)
 1017000:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1017004:	e0bffc17 	ldw	r2,-16(fp)
 1017008:	10800017 	ldw	r2,0(r2)
 101700c:	11000104 	addi	r4,r2,4
 1017010:	e0bffc17 	ldw	r2,-16(fp)
 1017014:	10800817 	ldw	r2,32(r2)
 1017018:	1007883a 	mov	r3,r2
 101701c:	2005883a 	mov	r2,r4
 1017020:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1017024:	e0bffb17 	ldw	r2,-20(fp)
 1017028:	10800104 	addi	r2,r2,4
 101702c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 1017030:	003f5f06 	br	1016db0 <altera_avalon_jtag_uart_irq+0x3c>
}
 1017034:	e037883a 	mov	sp,fp
 1017038:	dfc00117 	ldw	ra,4(sp)
 101703c:	df000017 	ldw	fp,0(sp)
 1017040:	dec00204 	addi	sp,sp,8
 1017044:	f800283a 	ret

01017048 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 1017048:	f811883a 	mov	r8,ra
 101704c:	100c1d00 	call	100c1d0 <_mcount>
 1017050:	403f883a 	mov	ra,r8
 1017054:	defff804 	addi	sp,sp,-32
 1017058:	dfc00715 	stw	ra,28(sp)
 101705c:	df000615 	stw	fp,24(sp)
 1017060:	df000604 	addi	fp,sp,24
 1017064:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 1017068:	e0bfff17 	ldw	r2,-4(fp)
 101706c:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 1017070:	e0bffd17 	ldw	r2,-12(fp)
 1017074:	10800017 	ldw	r2,0(r2)
 1017078:	10800104 	addi	r2,r2,4
 101707c:	10800037 	ldwio	r2,0(r2)
 1017080:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 1017084:	e0bffc17 	ldw	r2,-16(fp)
 1017088:	1081000c 	andi	r2,r2,1024
 101708c:	1005003a 	cmpeq	r2,r2,zero
 1017090:	10000c1e 	bne	r2,zero,10170c4 <altera_avalon_jtag_uart_timeout+0x7c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 1017094:	e0bffd17 	ldw	r2,-12(fp)
 1017098:	10800017 	ldw	r2,0(r2)
 101709c:	11000104 	addi	r4,r2,4
 10170a0:	e0bffd17 	ldw	r2,-12(fp)
 10170a4:	10800817 	ldw	r2,32(r2)
 10170a8:	10810014 	ori	r2,r2,1024
 10170ac:	1007883a 	mov	r3,r2
 10170b0:	2005883a 	mov	r2,r4
 10170b4:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 10170b8:	e0bffd17 	ldw	r2,-12(fp)
 10170bc:	10000915 	stw	zero,36(r2)
 10170c0:	00002106 	br	1017148 <altera_avalon_jtag_uart_timeout+0x100>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 10170c4:	e0bffd17 	ldw	r2,-12(fp)
 10170c8:	10c00917 	ldw	r3,36(r2)
 10170cc:	00a00034 	movhi	r2,32768
 10170d0:	10bfff04 	addi	r2,r2,-4
 10170d4:	10c01c36 	bltu	r2,r3,1017148 <altera_avalon_jtag_uart_timeout+0x100>
    sp->host_inactive++;
 10170d8:	e0bffd17 	ldw	r2,-12(fp)
 10170dc:	10800917 	ldw	r2,36(r2)
 10170e0:	10c00044 	addi	r3,r2,1
 10170e4:	e0bffd17 	ldw	r2,-12(fp)
 10170e8:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
 10170ec:	e0bffd17 	ldw	r2,-12(fp)
 10170f0:	10c00917 	ldw	r3,36(r2)
 10170f4:	e0bffd17 	ldw	r2,-12(fp)
 10170f8:	10800117 	ldw	r2,4(r2)
 10170fc:	18801236 	bltu	r3,r2,1017148 <altera_avalon_jtag_uart_timeout+0x100>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
 1017100:	e0bffd17 	ldw	r2,-12(fp)
 1017104:	10800c17 	ldw	r2,48(r2)
 1017108:	e0bffa15 	stw	r2,-24(fp)
 101710c:	00800104 	movi	r2,4
 1017110:	e0bffb0d 	sth	r2,-20(fp)
 1017114:	00800044 	movi	r2,1
 1017118:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 101711c:	008040f4 	movhi	r2,259
 1017120:	1096f804 	addi	r2,r2,23520
 1017124:	10800003 	ldbu	r2,0(r2)
 1017128:	10803fcc 	andi	r2,r2,255
 101712c:	1005003a 	cmpeq	r2,r2,zero
 1017130:	1000051e 	bne	r2,zero,1017148 <altera_avalon_jtag_uart_timeout+0x100>
  {
    OSFlagPost (group, flags, opt, &err);
 1017134:	e17ffb0b 	ldhu	r5,-20(fp)
 1017138:	e1bffb83 	ldbu	r6,-18(fp)
 101713c:	e1fffe04 	addi	r7,fp,-8
 1017140:	e13ffa17 	ldw	r4,-24(fp)
 1017144:	101012c0 	call	101012c <OSFlagPost>
 1017148:	008040f4 	movhi	r2,259
 101714c:	1096ef04 	addi	r2,r2,23484
 1017150:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
 1017154:	e037883a 	mov	sp,fp
 1017158:	dfc00117 	ldw	ra,4(sp)
 101715c:	df000017 	ldw	fp,0(sp)
 1017160:	dec00204 	addi	sp,sp,8
 1017164:	f800283a 	ret

01017168 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 1017168:	f811883a 	mov	r8,ra
 101716c:	100c1d00 	call	100c1d0 <_mcount>
 1017170:	403f883a 	mov	ra,r8
 1017174:	defffc04 	addi	sp,sp,-16
 1017178:	df000315 	stw	fp,12(sp)
 101717c:	df000304 	addi	fp,sp,12
 1017180:	e13ffd15 	stw	r4,-12(fp)
 1017184:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 1017188:	00000706 	br	10171a8 <altera_avalon_jtag_uart_close+0x40>
    if (flags & O_NONBLOCK) {
 101718c:	e0bffe17 	ldw	r2,-8(fp)
 1017190:	1090000c 	andi	r2,r2,16384
 1017194:	1005003a 	cmpeq	r2,r2,zero
 1017198:	1000031e 	bne	r2,zero,10171a8 <altera_avalon_jtag_uart_close+0x40>
      return -EWOULDBLOCK; 
 101719c:	00bffd44 	movi	r2,-11
 10171a0:	e0bfff15 	stw	r2,-4(fp)
 10171a4:	00000b06 	br	10171d4 <altera_avalon_jtag_uart_close+0x6c>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 10171a8:	e0bffd17 	ldw	r2,-12(fp)
 10171ac:	10c01017 	ldw	r3,64(r2)
 10171b0:	e0bffd17 	ldw	r2,-12(fp)
 10171b4:	10800f17 	ldw	r2,60(r2)
 10171b8:	18800526 	beq	r3,r2,10171d0 <altera_avalon_jtag_uart_close+0x68>
 10171bc:	e0bffd17 	ldw	r2,-12(fp)
 10171c0:	10c00917 	ldw	r3,36(r2)
 10171c4:	e0bffd17 	ldw	r2,-12(fp)
 10171c8:	10800117 	ldw	r2,4(r2)
 10171cc:	18bfef36 	bltu	r3,r2,101718c <altera_avalon_jtag_uart_close+0x24>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 10171d0:	e03fff15 	stw	zero,-4(fp)
 10171d4:	e0bfff17 	ldw	r2,-4(fp)
}
 10171d8:	e037883a 	mov	sp,fp
 10171dc:	df000017 	ldw	fp,0(sp)
 10171e0:	dec00104 	addi	sp,sp,4
 10171e4:	f800283a 	ret

010171e8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 10171e8:	f811883a 	mov	r8,ra
 10171ec:	100c1d00 	call	100c1d0 <_mcount>
 10171f0:	403f883a 	mov	ra,r8
 10171f4:	defff804 	addi	sp,sp,-32
 10171f8:	df000715 	stw	fp,28(sp)
 10171fc:	df000704 	addi	fp,sp,28
 1017200:	e13ffb15 	stw	r4,-20(fp)
 1017204:	e17ffc15 	stw	r5,-16(fp)
 1017208:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 101720c:	00bff9c4 	movi	r2,-25
 1017210:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 1017214:	e0bffc17 	ldw	r2,-16(fp)
 1017218:	e0bfff15 	stw	r2,-4(fp)
 101721c:	e0ffff17 	ldw	r3,-4(fp)
 1017220:	189a8060 	cmpeqi	r2,r3,27137
 1017224:	1000041e 	bne	r2,zero,1017238 <altera_avalon_jtag_uart_ioctl+0x50>
 1017228:	e0ffff17 	ldw	r3,-4(fp)
 101722c:	189a80a0 	cmpeqi	r2,r3,27138
 1017230:	10001b1e 	bne	r2,zero,10172a0 <altera_avalon_jtag_uart_ioctl+0xb8>
 1017234:	00002706 	br	10172d4 <altera_avalon_jtag_uart_ioctl+0xec>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 1017238:	e0bffb17 	ldw	r2,-20(fp)
 101723c:	10c00117 	ldw	r3,4(r2)
 1017240:	00a00034 	movhi	r2,32768
 1017244:	10bfffc4 	addi	r2,r2,-1
 1017248:	18802226 	beq	r3,r2,10172d4 <altera_avalon_jtag_uart_ioctl+0xec>
    {
      int timeout = *((int *)arg);
 101724c:	e0bffd17 	ldw	r2,-12(fp)
 1017250:	10800017 	ldw	r2,0(r2)
 1017254:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 1017258:	e0bff917 	ldw	r2,-28(fp)
 101725c:	10800090 	cmplti	r2,r2,2
 1017260:	1000071e 	bne	r2,zero,1017280 <altera_avalon_jtag_uart_ioctl+0x98>
 1017264:	e0fff917 	ldw	r3,-28(fp)
 1017268:	00a00034 	movhi	r2,32768
 101726c:	10bfffc4 	addi	r2,r2,-1
 1017270:	18800326 	beq	r3,r2,1017280 <altera_avalon_jtag_uart_ioctl+0x98>
 1017274:	e0bff917 	ldw	r2,-28(fp)
 1017278:	e0bffe15 	stw	r2,-8(fp)
 101727c:	00000306 	br	101728c <altera_avalon_jtag_uart_ioctl+0xa4>
 1017280:	00e00034 	movhi	r3,32768
 1017284:	18ffff84 	addi	r3,r3,-2
 1017288:	e0fffe15 	stw	r3,-8(fp)
 101728c:	e0bffb17 	ldw	r2,-20(fp)
 1017290:	e0fffe17 	ldw	r3,-8(fp)
 1017294:	10c00115 	stw	r3,4(r2)
      rc = 0;
 1017298:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 101729c:	00000d06 	br	10172d4 <altera_avalon_jtag_uart_ioctl+0xec>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 10172a0:	e0bffb17 	ldw	r2,-20(fp)
 10172a4:	10c00117 	ldw	r3,4(r2)
 10172a8:	00a00034 	movhi	r2,32768
 10172ac:	10bfffc4 	addi	r2,r2,-1
 10172b0:	18800826 	beq	r3,r2,10172d4 <altera_avalon_jtag_uart_ioctl+0xec>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 10172b4:	e13ffd17 	ldw	r4,-12(fp)
 10172b8:	e0bffb17 	ldw	r2,-20(fp)
 10172bc:	10c00917 	ldw	r3,36(r2)
 10172c0:	e0bffb17 	ldw	r2,-20(fp)
 10172c4:	10800117 	ldw	r2,4(r2)
 10172c8:	1885803a 	cmpltu	r2,r3,r2
 10172cc:	20800015 	stw	r2,0(r4)
      rc = 0;
 10172d0:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 10172d4:	e0bffa17 	ldw	r2,-24(fp)
}
 10172d8:	e037883a 	mov	sp,fp
 10172dc:	df000017 	ldw	fp,0(sp)
 10172e0:	dec00104 	addi	sp,sp,4
 10172e4:	f800283a 	ret

010172e8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 10172e8:	f811883a 	mov	r8,ra
 10172ec:	100c1d00 	call	100c1d0 <_mcount>
 10172f0:	403f883a 	mov	ra,r8
 10172f4:	deffeb04 	addi	sp,sp,-84
 10172f8:	dfc01415 	stw	ra,80(sp)
 10172fc:	df001315 	stw	fp,76(sp)
 1017300:	df001304 	addi	fp,sp,76
 1017304:	e13ffb15 	stw	r4,-20(fp)
 1017308:	e17ffc15 	stw	r5,-16(fp)
 101730c:	e1bffd15 	stw	r6,-12(fp)
 1017310:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 1017314:	e0bffc17 	ldw	r2,-16(fp)
 1017318:	e0bff915 	stw	r2,-28(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
 101731c:	e0bffb17 	ldw	r2,-20(fp)
 1017320:	10800a17 	ldw	r2,40(r2)
 1017324:	e0bff315 	stw	r2,-52(fp)
 1017328:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
 101732c:	e17ff40b 	ldhu	r5,-48(fp)
 1017330:	e1bffa44 	addi	r6,fp,-23
 1017334:	e13ff317 	ldw	r4,-52(fp)
 1017338:	1012b040 	call	1012b04 <OSSemPend>

  while (space > 0)
 101733c:	00006406 	br	10174d0 <altera_avalon_jtag_uart_read+0x1e8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 1017340:	e0bffb17 	ldw	r2,-20(fp)
 1017344:	10800d17 	ldw	r2,52(r2)
 1017348:	e0bff615 	stw	r2,-40(fp)
      out = sp->rx_out;
 101734c:	e0bffb17 	ldw	r2,-20(fp)
 1017350:	10800e17 	ldw	r2,56(r2)
 1017354:	e0bff515 	stw	r2,-44(fp)

      if (in >= out)
 1017358:	e0fff617 	ldw	r3,-40(fp)
 101735c:	e0bff517 	ldw	r2,-44(fp)
 1017360:	18800536 	bltu	r3,r2,1017378 <altera_avalon_jtag_uart_read+0x90>
        n = in - out;
 1017364:	e0bff617 	ldw	r2,-40(fp)
 1017368:	e0fff517 	ldw	r3,-44(fp)
 101736c:	10c5c83a 	sub	r2,r2,r3
 1017370:	e0bff715 	stw	r2,-36(fp)
 1017374:	00000406 	br	1017388 <altera_avalon_jtag_uart_read+0xa0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 1017378:	00820004 	movi	r2,2048
 101737c:	e0fff517 	ldw	r3,-44(fp)
 1017380:	10c5c83a 	sub	r2,r2,r3
 1017384:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
 1017388:	e0bff717 	ldw	r2,-36(fp)
 101738c:	1005003a 	cmpeq	r2,r2,zero
 1017390:	10001f1e 	bne	r2,zero,1017410 <altera_avalon_jtag_uart_read+0x128>
        break; /* No more data available */

      if (n > space)
 1017394:	e0fffd17 	ldw	r3,-12(fp)
 1017398:	e0bff717 	ldw	r2,-36(fp)
 101739c:	1880022e 	bgeu	r3,r2,10173a8 <altera_avalon_jtag_uart_read+0xc0>
        n = space;
 10173a0:	e0bffd17 	ldw	r2,-12(fp)
 10173a4:	e0bff715 	stw	r2,-36(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 10173a8:	e0bffb17 	ldw	r2,-20(fp)
 10173ac:	10c01104 	addi	r3,r2,68
 10173b0:	e0bff517 	ldw	r2,-44(fp)
 10173b4:	1887883a 	add	r3,r3,r2
 10173b8:	e0bff917 	ldw	r2,-28(fp)
 10173bc:	1009883a 	mov	r4,r2
 10173c0:	180b883a 	mov	r5,r3
 10173c4:	e1bff717 	ldw	r6,-36(fp)
 10173c8:	1007d400 	call	1007d40 <memcpy>
      ptr   += n;
 10173cc:	e0fff717 	ldw	r3,-36(fp)
 10173d0:	e0bff917 	ldw	r2,-28(fp)
 10173d4:	10c5883a 	add	r2,r2,r3
 10173d8:	e0bff915 	stw	r2,-28(fp)
      space -= n;
 10173dc:	e0fffd17 	ldw	r3,-12(fp)
 10173e0:	e0bff717 	ldw	r2,-36(fp)
 10173e4:	1885c83a 	sub	r2,r3,r2
 10173e8:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 10173ec:	e0fff517 	ldw	r3,-44(fp)
 10173f0:	e0bff717 	ldw	r2,-36(fp)
 10173f4:	1885883a 	add	r2,r3,r2
 10173f8:	10c1ffcc 	andi	r3,r2,2047
 10173fc:	e0bffb17 	ldw	r2,-20(fp)
 1017400:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
 1017404:	e0bffd17 	ldw	r2,-12(fp)
 1017408:	10800048 	cmpgei	r2,r2,1
 101740c:	103fcc1e 	bne	r2,zero,1017340 <altera_avalon_jtag_uart_read+0x58>

    /* If we read any data then return it */
    if (ptr != buffer)
 1017410:	e0fff917 	ldw	r3,-28(fp)
 1017414:	e0bffc17 	ldw	r2,-16(fp)
 1017418:	1880301e 	bne	r3,r2,10174dc <altera_avalon_jtag_uart_read+0x1f4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 101741c:	e0bffe17 	ldw	r2,-8(fp)
 1017420:	1090000c 	andi	r2,r2,16384
 1017424:	1004c03a 	cmpne	r2,r2,zero
 1017428:	10002c1e 	bne	r2,zero,10174dc <altera_avalon_jtag_uart_read+0x1f4>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
 101742c:	008040f4 	movhi	r2,259
 1017430:	1096f804 	addi	r2,r2,23520
 1017434:	10800003 	ldbu	r2,0(r2)
 1017438:	10803fcc 	andi	r2,r2,255
 101743c:	10800058 	cmpnei	r2,r2,1
 1017440:	1000161e 	bne	r2,zero,101749c <altera_avalon_jtag_uart_read+0x1b4>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
 1017444:	e0bffb17 	ldw	r2,-20(fp)
 1017448:	10800c17 	ldw	r2,48(r2)
 101744c:	e0bff015 	stw	r2,-64(fp)
 1017450:	00800144 	movi	r2,5
 1017454:	e0bff10d 	sth	r2,-60(fp)
 1017458:	00bfe0c4 	movi	r2,-125
 101745c:	e0bff185 	stb	r2,-58(fp)
 1017460:	e03ff20d 	sth	zero,-56(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 1017464:	008040f4 	movhi	r2,259
 1017468:	1096f804 	addi	r2,r2,23520
 101746c:	10800003 	ldbu	r2,0(r2)
 1017470:	10803fcc 	andi	r2,r2,255
 1017474:	1005003a 	cmpeq	r2,r2,zero
 1017478:	1000111e 	bne	r2,zero,10174c0 <altera_avalon_jtag_uart_read+0x1d8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 101747c:	e17ff10b 	ldhu	r5,-60(fp)
 1017480:	e1bff183 	ldbu	r6,-58(fp)
 1017484:	e1fff20b 	ldhu	r7,-56(fp)
 1017488:	e0bffa04 	addi	r2,fp,-24
 101748c:	d8800015 	stw	r2,0(sp)
 1017490:	e13ff017 	ldw	r4,-64(fp)
 1017494:	100fa680 	call	100fa68 <OSFlagPend>
    return err;
 1017498:	00000906 	br	10174c0 <altera_avalon_jtag_uart_read+0x1d8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 101749c:	e0bffb17 	ldw	r2,-20(fp)
 10174a0:	10c00d17 	ldw	r3,52(r2)
 10174a4:	e0bff617 	ldw	r2,-40(fp)
 10174a8:	1880051e 	bne	r3,r2,10174c0 <altera_avalon_jtag_uart_read+0x1d8>
 10174ac:	e0bffb17 	ldw	r2,-20(fp)
 10174b0:	10c00917 	ldw	r3,36(r2)
 10174b4:	e0bffb17 	ldw	r2,-20(fp)
 10174b8:	10800117 	ldw	r2,4(r2)
 10174bc:	18bff736 	bltu	r3,r2,101749c <altera_avalon_jtag_uart_read+0x1b4>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 10174c0:	e0bffb17 	ldw	r2,-20(fp)
 10174c4:	10c00d17 	ldw	r3,52(r2)
 10174c8:	e0bff617 	ldw	r2,-40(fp)
 10174cc:	18800326 	beq	r3,r2,10174dc <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 10174d0:	e0bffd17 	ldw	r2,-12(fp)
 10174d4:	10800048 	cmpgei	r2,r2,1
 10174d8:	103f991e 	bne	r2,zero,1017340 <altera_avalon_jtag_uart_read+0x58>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
 10174dc:	e0bffb17 	ldw	r2,-20(fp)
 10174e0:	11000a17 	ldw	r4,40(r2)
 10174e4:	1012f140 	call	1012f14 <OSSemPost>

  if (ptr != buffer)
 10174e8:	e0fff917 	ldw	r3,-28(fp)
 10174ec:	e0bffc17 	ldw	r2,-16(fp)
 10174f0:	18801926 	beq	r3,r2,1017558 <altera_avalon_jtag_uart_read+0x270>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10174f4:	0005303a 	rdctl	r2,status
 10174f8:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10174fc:	e0ffef17 	ldw	r3,-68(fp)
 1017500:	00bfff84 	movi	r2,-2
 1017504:	1884703a 	and	r2,r3,r2
 1017508:	1001703a 	wrctl	status,r2
  
  return context;
 101750c:	e0bfef17 	ldw	r2,-68(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 1017510:	e0bff815 	stw	r2,-32(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1017514:	e0bffb17 	ldw	r2,-20(fp)
 1017518:	10800817 	ldw	r2,32(r2)
 101751c:	10c00054 	ori	r3,r2,1
 1017520:	e0bffb17 	ldw	r2,-20(fp)
 1017524:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1017528:	e0bffb17 	ldw	r2,-20(fp)
 101752c:	10800017 	ldw	r2,0(r2)
 1017530:	11000104 	addi	r4,r2,4
 1017534:	e0bffb17 	ldw	r2,-20(fp)
 1017538:	10800817 	ldw	r2,32(r2)
 101753c:	1007883a 	mov	r3,r2
 1017540:	2005883a 	mov	r2,r4
 1017544:	10c00035 	stwio	r3,0(r2)
 1017548:	e0bff817 	ldw	r2,-32(fp)
 101754c:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1017550:	e0bfee17 	ldw	r2,-72(fp)
 1017554:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 1017558:	e0fff917 	ldw	r3,-28(fp)
 101755c:	e0bffc17 	ldw	r2,-16(fp)
 1017560:	18800526 	beq	r3,r2,1017578 <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
 1017564:	e0fff917 	ldw	r3,-28(fp)
 1017568:	e0bffc17 	ldw	r2,-16(fp)
 101756c:	1887c83a 	sub	r3,r3,r2
 1017570:	e0ffff15 	stw	r3,-4(fp)
 1017574:	00000906 	br	101759c <altera_avalon_jtag_uart_read+0x2b4>
  else if (flags & O_NONBLOCK)
 1017578:	e0bffe17 	ldw	r2,-8(fp)
 101757c:	1090000c 	andi	r2,r2,16384
 1017580:	1005003a 	cmpeq	r2,r2,zero
 1017584:	1000031e 	bne	r2,zero,1017594 <altera_avalon_jtag_uart_read+0x2ac>
    return -EWOULDBLOCK;
 1017588:	00bffd44 	movi	r2,-11
 101758c:	e0bfff15 	stw	r2,-4(fp)
 1017590:	00000206 	br	101759c <altera_avalon_jtag_uart_read+0x2b4>
  else
    return -EIO;
 1017594:	00bffec4 	movi	r2,-5
 1017598:	e0bfff15 	stw	r2,-4(fp)
 101759c:	e0bfff17 	ldw	r2,-4(fp)
}
 10175a0:	e037883a 	mov	sp,fp
 10175a4:	dfc00117 	ldw	ra,4(sp)
 10175a8:	df000017 	ldw	fp,0(sp)
 10175ac:	dec00204 	addi	sp,sp,8
 10175b0:	f800283a 	ret

010175b4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 10175b4:	f811883a 	mov	r8,ra
 10175b8:	100c1d00 	call	100c1d0 <_mcount>
 10175bc:	403f883a 	mov	ra,r8
 10175c0:	deffeb04 	addi	sp,sp,-84
 10175c4:	dfc01415 	stw	ra,80(sp)
 10175c8:	df001315 	stw	fp,76(sp)
 10175cc:	df001304 	addi	fp,sp,76
 10175d0:	e13ffb15 	stw	r4,-20(fp)
 10175d4:	e17ffc15 	stw	r5,-16(fp)
 10175d8:	e1bffd15 	stw	r6,-12(fp)
 10175dc:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 10175e0:	e03ff815 	stw	zero,-32(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 10175e4:	e0bffc17 	ldw	r2,-16(fp)
 10175e8:	e0bff515 	stw	r2,-44(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
 10175ec:	e0bffb17 	ldw	r2,-20(fp)
 10175f0:	10800b17 	ldw	r2,44(r2)
 10175f4:	e0bff315 	stw	r2,-52(fp)
 10175f8:	e03ff40d 	sth	zero,-48(fp)
 10175fc:	e17ff40b 	ldhu	r5,-48(fp)
 1017600:	e1bffa04 	addi	r6,fp,-24
 1017604:	e13ff317 	ldw	r4,-52(fp)
 1017608:	1012b040 	call	1012b04 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 101760c:	00003a06 	br	10176f8 <altera_avalon_jtag_uart_write+0x144>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 1017610:	e0bffb17 	ldw	r2,-20(fp)
 1017614:	10800f17 	ldw	r2,60(r2)
 1017618:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 101761c:	e0bffb17 	ldw	r2,-20(fp)
 1017620:	10801017 	ldw	r2,64(r2)
 1017624:	e0bff815 	stw	r2,-32(fp)

      if (in < out)
 1017628:	e0fff917 	ldw	r3,-28(fp)
 101762c:	e0bff817 	ldw	r2,-32(fp)
 1017630:	1880062e 	bgeu	r3,r2,101764c <altera_avalon_jtag_uart_write+0x98>
        n = out - 1 - in;
 1017634:	e0fff817 	ldw	r3,-32(fp)
 1017638:	e0bff917 	ldw	r2,-28(fp)
 101763c:	1885c83a 	sub	r2,r3,r2
 1017640:	10bfffc4 	addi	r2,r2,-1
 1017644:	e0bff715 	stw	r2,-36(fp)
 1017648:	00000c06 	br	101767c <altera_avalon_jtag_uart_write+0xc8>
      else if (out > 0)
 101764c:	e0bff817 	ldw	r2,-32(fp)
 1017650:	1005003a 	cmpeq	r2,r2,zero
 1017654:	1000051e 	bne	r2,zero,101766c <altera_avalon_jtag_uart_write+0xb8>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 1017658:	00820004 	movi	r2,2048
 101765c:	e0fff917 	ldw	r3,-28(fp)
 1017660:	10c5c83a 	sub	r2,r2,r3
 1017664:	e0bff715 	stw	r2,-36(fp)
 1017668:	00000406 	br	101767c <altera_avalon_jtag_uart_write+0xc8>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 101766c:	0081ffc4 	movi	r2,2047
 1017670:	e0fff917 	ldw	r3,-28(fp)
 1017674:	10c5c83a 	sub	r2,r2,r3
 1017678:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
 101767c:	e0bff717 	ldw	r2,-36(fp)
 1017680:	1005003a 	cmpeq	r2,r2,zero
 1017684:	10001f1e 	bne	r2,zero,1017704 <altera_avalon_jtag_uart_write+0x150>
        break;

      if (n > count)
 1017688:	e0fffd17 	ldw	r3,-12(fp)
 101768c:	e0bff717 	ldw	r2,-36(fp)
 1017690:	1880022e 	bgeu	r3,r2,101769c <altera_avalon_jtag_uart_write+0xe8>
        n = count;
 1017694:	e0bffd17 	ldw	r2,-12(fp)
 1017698:	e0bff715 	stw	r2,-36(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 101769c:	e0bffb17 	ldw	r2,-20(fp)
 10176a0:	10c21104 	addi	r3,r2,2116
 10176a4:	e0bff917 	ldw	r2,-28(fp)
 10176a8:	1885883a 	add	r2,r3,r2
 10176ac:	e0fffc17 	ldw	r3,-16(fp)
 10176b0:	1009883a 	mov	r4,r2
 10176b4:	180b883a 	mov	r5,r3
 10176b8:	e1bff717 	ldw	r6,-36(fp)
 10176bc:	1007d400 	call	1007d40 <memcpy>
      ptr   += n;
 10176c0:	e0fff717 	ldw	r3,-36(fp)
 10176c4:	e0bffc17 	ldw	r2,-16(fp)
 10176c8:	10c5883a 	add	r2,r2,r3
 10176cc:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 10176d0:	e0fffd17 	ldw	r3,-12(fp)
 10176d4:	e0bff717 	ldw	r2,-36(fp)
 10176d8:	1885c83a 	sub	r2,r3,r2
 10176dc:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 10176e0:	e0fff917 	ldw	r3,-28(fp)
 10176e4:	e0bff717 	ldw	r2,-36(fp)
 10176e8:	1885883a 	add	r2,r3,r2
 10176ec:	10c1ffcc 	andi	r3,r2,2047
 10176f0:	e0bffb17 	ldw	r2,-20(fp)
 10176f4:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 10176f8:	e0bffd17 	ldw	r2,-12(fp)
 10176fc:	10800048 	cmpgei	r2,r2,1
 1017700:	103fc31e 	bne	r2,zero,1017610 <altera_avalon_jtag_uart_write+0x5c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1017704:	0005303a 	rdctl	r2,status
 1017708:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101770c:	e0fff217 	ldw	r3,-56(fp)
 1017710:	00bfff84 	movi	r2,-2
 1017714:	1884703a 	and	r2,r3,r2
 1017718:	1001703a 	wrctl	status,r2
  
  return context;
 101771c:	e0bff217 	ldw	r2,-56(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 1017720:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 1017724:	e0bffb17 	ldw	r2,-20(fp)
 1017728:	10800817 	ldw	r2,32(r2)
 101772c:	10c00094 	ori	r3,r2,2
 1017730:	e0bffb17 	ldw	r2,-20(fp)
 1017734:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1017738:	e0bffb17 	ldw	r2,-20(fp)
 101773c:	10800017 	ldw	r2,0(r2)
 1017740:	11000104 	addi	r4,r2,4
 1017744:	e0bffb17 	ldw	r2,-20(fp)
 1017748:	10800817 	ldw	r2,32(r2)
 101774c:	1007883a 	mov	r3,r2
 1017750:	2005883a 	mov	r2,r4
 1017754:	10c00035 	stwio	r3,0(r2)
 1017758:	e0bff617 	ldw	r2,-40(fp)
 101775c:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1017760:	e0bff117 	ldw	r2,-60(fp)
 1017764:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 1017768:	e0bffd17 	ldw	r2,-12(fp)
 101776c:	10800050 	cmplti	r2,r2,1
 1017770:	10002d1e 	bne	r2,zero,1017828 <altera_avalon_jtag_uart_write+0x274>
    {
      if (flags & O_NONBLOCK)
 1017774:	e0bffe17 	ldw	r2,-8(fp)
 1017778:	1090000c 	andi	r2,r2,16384
 101777c:	1004c03a 	cmpne	r2,r2,zero
 1017780:	10002c1e 	bne	r2,zero,1017834 <altera_avalon_jtag_uart_write+0x280>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
 1017784:	008040f4 	movhi	r2,259
 1017788:	1096f804 	addi	r2,r2,23520
 101778c:	10800003 	ldbu	r2,0(r2)
 1017790:	10803fcc 	andi	r2,r2,255
 1017794:	10800058 	cmpnei	r2,r2,1
 1017798:	1000161e 	bne	r2,zero,10177f4 <altera_avalon_jtag_uart_write+0x240>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
 101779c:	e0bffb17 	ldw	r2,-20(fp)
 10177a0:	10800c17 	ldw	r2,48(r2)
 10177a4:	e0bfee15 	stw	r2,-72(fp)
 10177a8:	00800184 	movi	r2,6
 10177ac:	e0bfef0d 	sth	r2,-68(fp)
 10177b0:	00bfe0c4 	movi	r2,-125
 10177b4:	e0bfef85 	stb	r2,-66(fp)
 10177b8:	e03ff00d 	sth	zero,-64(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 10177bc:	008040f4 	movhi	r2,259
 10177c0:	1096f804 	addi	r2,r2,23520
 10177c4:	10800003 	ldbu	r2,0(r2)
 10177c8:	10803fcc 	andi	r2,r2,255
 10177cc:	1005003a 	cmpeq	r2,r2,zero
 10177d0:	1000111e 	bne	r2,zero,1017818 <altera_avalon_jtag_uart_write+0x264>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 10177d4:	e17fef0b 	ldhu	r5,-68(fp)
 10177d8:	e1bfef83 	ldbu	r6,-66(fp)
 10177dc:	e1fff00b 	ldhu	r7,-64(fp)
 10177e0:	e0bffa44 	addi	r2,fp,-23
 10177e4:	d8800015 	stw	r2,0(sp)
 10177e8:	e13fee17 	ldw	r4,-72(fp)
 10177ec:	100fa680 	call	100fa68 <OSFlagPend>
    return err;
 10177f0:	00000906 	br	1017818 <altera_avalon_jtag_uart_write+0x264>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 10177f4:	e0bffb17 	ldw	r2,-20(fp)
 10177f8:	10c01017 	ldw	r3,64(r2)
 10177fc:	e0bff817 	ldw	r2,-32(fp)
 1017800:	1880051e 	bne	r3,r2,1017818 <altera_avalon_jtag_uart_write+0x264>
 1017804:	e0bffb17 	ldw	r2,-20(fp)
 1017808:	10c00917 	ldw	r3,36(r2)
 101780c:	e0bffb17 	ldw	r2,-20(fp)
 1017810:	10800117 	ldw	r2,4(r2)
 1017814:	18bff736 	bltu	r3,r2,10177f4 <altera_avalon_jtag_uart_write+0x240>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 1017818:	e0bffb17 	ldw	r2,-20(fp)
 101781c:	10c01017 	ldw	r3,64(r2)
 1017820:	e0bff817 	ldw	r2,-32(fp)
 1017824:	18800326 	beq	r3,r2,1017834 <altera_avalon_jtag_uart_write+0x280>
         break;
    }
  }
  while (count > 0);
 1017828:	e0bffd17 	ldw	r2,-12(fp)
 101782c:	10800048 	cmpgei	r2,r2,1
 1017830:	103fb11e 	bne	r2,zero,10176f8 <altera_avalon_jtag_uart_write+0x144>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
 1017834:	e0bffb17 	ldw	r2,-20(fp)
 1017838:	11000b17 	ldw	r4,44(r2)
 101783c:	1012f140 	call	1012f14 <OSSemPost>

  if (ptr != start)
 1017840:	e0fffc17 	ldw	r3,-16(fp)
 1017844:	e0bff517 	ldw	r2,-44(fp)
 1017848:	18800526 	beq	r3,r2,1017860 <altera_avalon_jtag_uart_write+0x2ac>
    return ptr - start;
 101784c:	e0fffc17 	ldw	r3,-16(fp)
 1017850:	e0bff517 	ldw	r2,-44(fp)
 1017854:	1887c83a 	sub	r3,r3,r2
 1017858:	e0ffff15 	stw	r3,-4(fp)
 101785c:	00000906 	br	1017884 <altera_avalon_jtag_uart_write+0x2d0>
  else if (flags & O_NONBLOCK)
 1017860:	e0bffe17 	ldw	r2,-8(fp)
 1017864:	1090000c 	andi	r2,r2,16384
 1017868:	1005003a 	cmpeq	r2,r2,zero
 101786c:	1000031e 	bne	r2,zero,101787c <altera_avalon_jtag_uart_write+0x2c8>
    return -EWOULDBLOCK;
 1017870:	00bffd44 	movi	r2,-11
 1017874:	e0bfff15 	stw	r2,-4(fp)
 1017878:	00000206 	br	1017884 <altera_avalon_jtag_uart_write+0x2d0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 101787c:	00bffec4 	movi	r2,-5
 1017880:	e0bfff15 	stw	r2,-4(fp)
 1017884:	e0bfff17 	ldw	r2,-4(fp)
}
 1017888:	e037883a 	mov	sp,fp
 101788c:	dfc00117 	ldw	ra,4(sp)
 1017890:	df000017 	ldw	fp,0(sp)
 1017894:	dec00204 	addi	sp,sp,8
 1017898:	f800283a 	ret

0101789c <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 101789c:	f811883a 	mov	r8,ra
 10178a0:	100c1d00 	call	100c1d0 <_mcount>
 10178a4:	403f883a 	mov	ra,r8
 10178a8:	defff904 	addi	sp,sp,-28
 10178ac:	df000615 	stw	fp,24(sp)
 10178b0:	df000604 	addi	fp,sp,24
 10178b4:	e13ffe15 	stw	r4,-8(fp)
 10178b8:	e17fff15 	stw	r5,-4(fp)
  alt_u32 id, data, check;
  int ret_code = -1;
 10178bc:	00bfffc4 	movi	r2,-1
 10178c0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_READ_CPUID(id);
 10178c4:	0005317a 	rdctl	r2,cpuid
 10178c8:	e0bffd15 	stw	r2,-12(fp)

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
 10178cc:	e0bffd17 	ldw	r2,-12(fp)
 10178d0:	1006943a 	slli	r3,r2,16
 10178d4:	e0bfff17 	ldw	r2,-4(fp)
 10178d8:	1884b03a 	or	r2,r3,r2
 10178dc:	e0bffc15 	stw	r2,-16(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
 10178e0:	e0bffe17 	ldw	r2,-8(fp)
 10178e4:	10800317 	ldw	r2,12(r2)
 10178e8:	e0fffc17 	ldw	r3,-16(fp)
 10178ec:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 10178f0:	e0bffe17 	ldw	r2,-8(fp)
 10178f4:	10800317 	ldw	r2,12(r2)
 10178f8:	10800037 	ldwio	r2,0(r2)
 10178fc:	e0bffb15 	stw	r2,-20(fp)

  if ( check == data)
 1017900:	e0fffb17 	ldw	r3,-20(fp)
 1017904:	e0bffc17 	ldw	r2,-16(fp)
 1017908:	1880011e 	bne	r3,r2,1017910 <alt_mutex_trylock+0x74>
  {
    ret_code = 0;
 101790c:	e03ffa15 	stw	zero,-24(fp)
  }

  return ret_code;
 1017910:	e0bffa17 	ldw	r2,-24(fp)
}
 1017914:	e037883a 	mov	sp,fp
 1017918:	df000017 	ldw	fp,0(sp)
 101791c:	dec00104 	addi	sp,sp,4
 1017920:	f800283a 	ret

01017924 <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
 1017924:	f811883a 	mov	r8,ra
 1017928:	100c1d00 	call	100c1d0 <_mcount>
 101792c:	403f883a 	mov	ra,r8
 1017930:	defffc04 	addi	sp,sp,-16
 1017934:	dfc00315 	stw	ra,12(sp)
 1017938:	df000215 	stw	fp,8(sp)
 101793c:	df000204 	addi	fp,sp,8
 1017940:	e13fff15 	stw	r4,-4(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
 1017944:	e13fff17 	ldw	r4,-4(fp)
 1017948:	d1602f04 	addi	r5,gp,-32580
 101794c:	10184280 	call	1018428 <alt_find_dev>
 1017950:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
 1017954:	e0bffe17 	ldw	r2,-8(fp)
 1017958:	1004c03a 	cmpne	r2,r2,zero
 101795c:	1000041e 	bne	r2,zero,1017970 <altera_avalon_mutex_open+0x4c>
  {
    ALT_ERRNO = ENODEV;
 1017960:	10179880 	call	1017988 <alt_get_errno>
 1017964:	1007883a 	mov	r3,r2
 1017968:	008004c4 	movi	r2,19
 101796c:	18800015 	stw	r2,0(r3)
  }

  return dev;
 1017970:	e0bffe17 	ldw	r2,-8(fp)
}
 1017974:	e037883a 	mov	sp,fp
 1017978:	dfc00117 	ldw	ra,4(sp)
 101797c:	df000017 	ldw	fp,0(sp)
 1017980:	dec00204 	addi	sp,sp,8
 1017984:	f800283a 	ret

01017988 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1017988:	f811883a 	mov	r8,ra
 101798c:	100c1d00 	call	100c1d0 <_mcount>
 1017990:	403f883a 	mov	ra,r8
 1017994:	defffd04 	addi	sp,sp,-12
 1017998:	dfc00215 	stw	ra,8(sp)
 101799c:	df000115 	stw	fp,4(sp)
 10179a0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 10179a4:	008040b4 	movhi	r2,258
 10179a8:	109fa304 	addi	r2,r2,32396
 10179ac:	10800017 	ldw	r2,0(r2)
 10179b0:	1005003a 	cmpeq	r2,r2,zero
 10179b4:	1000061e 	bne	r2,zero,10179d0 <alt_get_errno+0x48>
 10179b8:	008040b4 	movhi	r2,258
 10179bc:	109fa304 	addi	r2,r2,32396
 10179c0:	10800017 	ldw	r2,0(r2)
 10179c4:	103ee83a 	callr	r2
 10179c8:	e0bfff15 	stw	r2,-4(fp)
 10179cc:	00000306 	br	10179dc <alt_get_errno+0x54>
 10179d0:	008040f4 	movhi	r2,259
 10179d4:	1096ea04 	addi	r2,r2,23464
 10179d8:	e0bfff15 	stw	r2,-4(fp)
 10179dc:	e0bfff17 	ldw	r2,-4(fp)
}
 10179e0:	e037883a 	mov	sp,fp
 10179e4:	dfc00117 	ldw	ra,4(sp)
 10179e8:	df000017 	ldw	fp,0(sp)
 10179ec:	dec00204 	addi	sp,sp,8
 10179f0:	f800283a 	ret

010179f4 <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
 10179f4:	f811883a 	mov	r8,ra
 10179f8:	100c1d00 	call	100c1d0 <_mcount>
 10179fc:	403f883a 	mov	ra,r8
 1017a00:	defffe04 	addi	sp,sp,-8
 1017a04:	df000115 	stw	fp,4(sp)
 1017a08:	df000104 	addi	fp,sp,4
 1017a0c:	e13fff15 	stw	r4,-4(fp)
  return;
}
 1017a10:	e037883a 	mov	sp,fp
 1017a14:	df000017 	ldw	fp,0(sp)
 1017a18:	dec00104 	addi	sp,sp,4
 1017a1c:	f800283a 	ret

01017a20 <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
 1017a20:	f811883a 	mov	r8,ra
 1017a24:	100c1d00 	call	100c1d0 <_mcount>
 1017a28:	403f883a 	mov	ra,r8
 1017a2c:	defffa04 	addi	sp,sp,-24
 1017a30:	dfc00515 	stw	ra,20(sp)
 1017a34:	df000415 	stw	fp,16(sp)
 1017a38:	df000404 	addi	fp,sp,16
 1017a3c:	e13ffe15 	stw	r4,-8(fp)
 1017a40:	e17fff15 	stw	r5,-4(fp)
  /*
   * When running in a multi threaded environment, obtain the "lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);
 1017a44:	e0bffe17 	ldw	r2,-8(fp)
 1017a48:	10800417 	ldw	r2,16(r2)
 1017a4c:	e0bffc15 	stw	r2,-16(fp)
 1017a50:	e03ffd0d 	sth	zero,-12(fp)
 1017a54:	e17ffd0b 	ldhu	r5,-12(fp)
 1017a58:	e1bffd84 	addi	r6,fp,-10
 1017a5c:	e13ffc17 	ldw	r4,-16(fp)
 1017a60:	1012b040 	call	1012b04 <OSSemPend>

  while ( alt_mutex_trylock( dev, value ) != 0);
 1017a64:	e13ffe17 	ldw	r4,-8(fp)
 1017a68:	e17fff17 	ldw	r5,-4(fp)
 1017a6c:	101789c0 	call	101789c <alt_mutex_trylock>
 1017a70:	1004c03a 	cmpne	r2,r2,zero
 1017a74:	103ffb1e 	bne	r2,zero,1017a64 <altera_avalon_mutex_lock+0x44>
}
 1017a78:	e037883a 	mov	sp,fp
 1017a7c:	dfc00117 	ldw	ra,4(sp)
 1017a80:	df000017 	ldw	fp,0(sp)
 1017a84:	dec00204 	addi	sp,sp,8
 1017a88:	f800283a 	ret

01017a8c <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 1017a8c:	f811883a 	mov	r8,ra
 1017a90:	100c1d00 	call	100c1d0 <_mcount>
 1017a94:	403f883a 	mov	ra,r8
 1017a98:	defff804 	addi	sp,sp,-32
 1017a9c:	dfc00715 	stw	ra,28(sp)
 1017aa0:	df000615 	stw	fp,24(sp)
 1017aa4:	df000604 	addi	fp,sp,24
 1017aa8:	e13ffe15 	stw	r4,-8(fp)
 1017aac:	e17fff15 	stw	r5,-4(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);
 1017ab0:	e0bffe17 	ldw	r2,-8(fp)
 1017ab4:	10800417 	ldw	r2,16(r2)
 1017ab8:	e0bffa15 	stw	r2,-24(fp)
 1017abc:	e03ffb0d 	sth	zero,-20(fp)
 1017ac0:	e17ffb0b 	ldhu	r5,-20(fp)
 1017ac4:	e1bffd04 	addi	r6,fp,-12
 1017ac8:	e13ffa17 	ldw	r4,-24(fp)
 1017acc:	1012b040 	call	1012b04 <OSSemPend>

  ret_code = alt_mutex_trylock( dev, value);
 1017ad0:	e13ffe17 	ldw	r4,-8(fp)
 1017ad4:	e17fff17 	ldw	r5,-4(fp)
 1017ad8:	101789c0 	call	101789c <alt_mutex_trylock>
 1017adc:	e0bffc15 	stw	r2,-16(fp)

  /*
  * If the try failed then release the thread Mutex  
  */
  if (ret_code)
 1017ae0:	e0bffc17 	ldw	r2,-16(fp)
 1017ae4:	1005003a 	cmpeq	r2,r2,zero
 1017ae8:	1000031e 	bne	r2,zero,1017af8 <altera_avalon_mutex_trylock+0x6c>
  {
    ALT_SEM_POST (dev->lock);
 1017aec:	e0bffe17 	ldw	r2,-8(fp)
 1017af0:	11000417 	ldw	r4,16(r2)
 1017af4:	1012f140 	call	1012f14 <OSSemPost>
  }

  return ret_code;
 1017af8:	e0bffc17 	ldw	r2,-16(fp)
}
 1017afc:	e037883a 	mov	sp,fp
 1017b00:	dfc00117 	ldw	ra,4(sp)
 1017b04:	df000017 	ldw	fp,0(sp)
 1017b08:	dec00204 	addi	sp,sp,8
 1017b0c:	f800283a 	ret

01017b10 <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
 1017b10:	f811883a 	mov	r8,ra
 1017b14:	100c1d00 	call	100c1d0 <_mcount>
 1017b18:	403f883a 	mov	ra,r8
 1017b1c:	defffc04 	addi	sp,sp,-16
 1017b20:	dfc00315 	stw	ra,12(sp)
 1017b24:	df000215 	stw	fp,8(sp)
 1017b28:	df000204 	addi	fp,sp,8
 1017b2c:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id;
  NIOS2_READ_CPUID(id);
 1017b30:	0005317a 	rdctl	r2,cpuid
 1017b34:	e0bffe15 	stw	r2,-8(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
 1017b38:	e0bfff17 	ldw	r2,-4(fp)
 1017b3c:	10800317 	ldw	r2,12(r2)
 1017b40:	10800104 	addi	r2,r2,4
 1017b44:	1007883a 	mov	r3,r2
 1017b48:	00800044 	movi	r2,1
 1017b4c:	18800035 	stwio	r2,0(r3)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
 1017b50:	e0bfff17 	ldw	r2,-4(fp)
 1017b54:	11000317 	ldw	r4,12(r2)
 1017b58:	e0bffe17 	ldw	r2,-8(fp)
 1017b5c:	1004943a 	slli	r2,r2,16
 1017b60:	1007883a 	mov	r3,r2
 1017b64:	2005883a 	mov	r2,r4
 1017b68:	10c00035 	stwio	r3,0(r2)
                                  id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST);

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
 1017b6c:	e0bfff17 	ldw	r2,-4(fp)
 1017b70:	11000417 	ldw	r4,16(r2)
 1017b74:	1012f140 	call	1012f14 <OSSemPost>
}
 1017b78:	e037883a 	mov	sp,fp
 1017b7c:	dfc00117 	ldw	ra,4(sp)
 1017b80:	df000017 	ldw	fp,0(sp)
 1017b84:	dec00204 	addi	sp,sp,8
 1017b88:	f800283a 	ret

01017b8c <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
 1017b8c:	f811883a 	mov	r8,ra
 1017b90:	100c1d00 	call	100c1d0 <_mcount>
 1017b94:	403f883a 	mov	ra,r8
 1017b98:	defff904 	addi	sp,sp,-28
 1017b9c:	df000615 	stw	fp,24(sp)
 1017ba0:	df000604 	addi	fp,sp,24
 1017ba4:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id, data, owner, value;
  int ret_code = 0;
 1017ba8:	e03ffa15 	stw	zero,-24(fp)

  NIOS2_READ_CPUID(id);
 1017bac:	0005317a 	rdctl	r2,cpuid
 1017bb0:	e0bffe15 	stw	r2,-8(fp)

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 1017bb4:	e0bfff17 	ldw	r2,-4(fp)
 1017bb8:	10800317 	ldw	r2,12(r2)
 1017bbc:	10800037 	ldwio	r2,0(r2)
 1017bc0:	e0bffd15 	stw	r2,-12(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
 1017bc4:	e0bffd17 	ldw	r2,-12(fp)
 1017bc8:	10bfffec 	andhi	r2,r2,65535
 1017bcc:	1004d43a 	srli	r2,r2,16
 1017bd0:	e0bffc15 	stw	r2,-16(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
 1017bd4:	e0fffc17 	ldw	r3,-16(fp)
 1017bd8:	e0bffe17 	ldw	r2,-8(fp)
 1017bdc:	1880081e 	bne	r3,r2,1017c00 <altera_avalon_mutex_is_mine+0x74>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
 1017be0:	e0bffd17 	ldw	r2,-12(fp)
 1017be4:	10bfffcc 	andi	r2,r2,65535
 1017be8:	e0bffb15 	stw	r2,-20(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
 1017bec:	e0bffb17 	ldw	r2,-20(fp)
 1017bf0:	1005003a 	cmpeq	r2,r2,zero
 1017bf4:	1000021e 	bne	r2,zero,1017c00 <altera_avalon_mutex_is_mine+0x74>
    {
      ret_code = 1;
 1017bf8:	00800044 	movi	r2,1
 1017bfc:	e0bffa15 	stw	r2,-24(fp)
    }
  }

  return ret_code;
 1017c00:	e0bffa17 	ldw	r2,-24(fp)
}
 1017c04:	e037883a 	mov	sp,fp
 1017c08:	df000017 	ldw	fp,0(sp)
 1017c0c:	dec00104 	addi	sp,sp,4
 1017c10:	f800283a 	ret

01017c14 <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
 1017c14:	f811883a 	mov	r8,ra
 1017c18:	100c1d00 	call	100c1d0 <_mcount>
 1017c1c:	403f883a 	mov	ra,r8
 1017c20:	defffc04 	addi	sp,sp,-16
 1017c24:	df000315 	stw	fp,12(sp)
 1017c28:	df000304 	addi	fp,sp,12
 1017c2c:	e13fff15 	stw	r4,-4(fp)
  alt_u32 data;
  int ret_code = 0;
 1017c30:	e03ffd15 	stw	zero,-12(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
 1017c34:	e0bfff17 	ldw	r2,-4(fp)
 1017c38:	10800317 	ldw	r2,12(r2)
 1017c3c:	10800104 	addi	r2,r2,4
 1017c40:	10800037 	ldwio	r2,0(r2)
 1017c44:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
 1017c48:	e0bffe17 	ldw	r2,-8(fp)
 1017c4c:	1080004c 	andi	r2,r2,1
 1017c50:	10803fcc 	andi	r2,r2,255
 1017c54:	1005003a 	cmpeq	r2,r2,zero
 1017c58:	1000021e 	bne	r2,zero,1017c64 <altera_avalon_mutex_first_lock+0x50>
  {
    ret_code = 1;
 1017c5c:	00800044 	movi	r2,1
 1017c60:	e0bffd15 	stw	r2,-12(fp)
  }

  return ret_code;
 1017c64:	e0bffd17 	ldw	r2,-12(fp)
}
 1017c68:	e037883a 	mov	sp,fp
 1017c6c:	df000017 	ldw	fp,0(sp)
 1017c70:	dec00104 	addi	sp,sp,4
 1017c74:	f800283a 	ret

01017c78 <perf_get_section_time>:

#include "altera_avalon_performance_counter.h"
#include "system.h"

alt_u64 perf_get_section_time (void* hw_base_address, int which_section)
{
 1017c78:	f811883a 	mov	r8,ra
 1017c7c:	100c1d00 	call	100c1d0 <_mcount>
 1017c80:	403f883a 	mov	ra,r8
 1017c84:	defff904 	addi	sp,sp,-28
 1017c88:	df000615 	stw	fp,24(sp)
 1017c8c:	df000604 	addi	fp,sp,24
 1017c90:	e13ffe15 	stw	r4,-8(fp)
 1017c94:	e17fff15 	stw	r5,-4(fp)
  alt_u32 lo;
  alt_u32 hi;
  alt_u64 result = 0;
 1017c98:	e03ffa15 	stw	zero,-24(fp)
 1017c9c:	e03ffb15 	stw	zero,-20(fp)

  PERF_STOP_MEASURING(hw_base_address);
 1017ca0:	e0bffe17 	ldw	r2,-8(fp)
 1017ca4:	10000035 	stwio	zero,0(r2)
  lo = IORD(hw_base_address, ( which_section*4   ));
 1017ca8:	e0bfff17 	ldw	r2,-4(fp)
 1017cac:	1004913a 	slli	r2,r2,4
 1017cb0:	1007883a 	mov	r3,r2
 1017cb4:	e0bffe17 	ldw	r2,-8(fp)
 1017cb8:	1885883a 	add	r2,r3,r2
 1017cbc:	10800037 	ldwio	r2,0(r2)
 1017cc0:	e0bffd15 	stw	r2,-12(fp)
  hi = IORD(hw_base_address, ((which_section*4)+1));
 1017cc4:	e0bfff17 	ldw	r2,-4(fp)
 1017cc8:	1004913a 	slli	r2,r2,4
 1017ccc:	1007883a 	mov	r3,r2
 1017cd0:	e0bffe17 	ldw	r2,-8(fp)
 1017cd4:	1885883a 	add	r2,r3,r2
 1017cd8:	10800104 	addi	r2,r2,4
 1017cdc:	10800037 	ldwio	r2,0(r2)
 1017ce0:	e0bffc15 	stw	r2,-16(fp)

  result = ((alt_u64)(((alt_u64) hi) << ((alt_u64)32))) | 
 1017ce4:	e0bffc17 	ldw	r2,-16(fp)
 1017ce8:	0007883a 	mov	r3,zero
 1017cec:	100a983a 	sll	r5,r2,zero
 1017cf0:	0009883a 	mov	r4,zero
 1017cf4:	e0bffd17 	ldw	r2,-12(fp)
 1017cf8:	0007883a 	mov	r3,zero
 1017cfc:	208cb03a 	or	r6,r4,r2
 1017d00:	e1bffa15 	stw	r6,-24(fp)
 1017d04:	28c4b03a 	or	r2,r5,r3
 1017d08:	e0bffb15 	stw	r2,-20(fp)
           ((alt_u64)(((alt_u64) lo)                 ))  ;
  return result;
 1017d0c:	e17ffa17 	ldw	r5,-24(fp)
 1017d10:	e1bffb17 	ldw	r6,-20(fp)
 1017d14:	2807883a 	mov	r3,r5
 1017d18:	3009883a 	mov	r4,r6
}
 1017d1c:	1805883a 	mov	r2,r3
 1017d20:	2007883a 	mov	r3,r4
 1017d24:	e037883a 	mov	sp,fp
 1017d28:	df000017 	ldw	fp,0(sp)
 1017d2c:	dec00104 	addi	sp,sp,4
 1017d30:	f800283a 	ret

01017d34 <perf_get_total_time>:

alt_u64 perf_get_total_time   (void* hw_base_address)
{
 1017d34:	f811883a 	mov	r8,ra
 1017d38:	100c1d00 	call	100c1d0 <_mcount>
 1017d3c:	403f883a 	mov	ra,r8
 1017d40:	defffd04 	addi	sp,sp,-12
 1017d44:	dfc00215 	stw	ra,8(sp)
 1017d48:	df000115 	stw	fp,4(sp)
 1017d4c:	df000104 	addi	fp,sp,4
 1017d50:	e13fff15 	stw	r4,-4(fp)
  return perf_get_section_time (hw_base_address, 0);
 1017d54:	e13fff17 	ldw	r4,-4(fp)
 1017d58:	000b883a 	mov	r5,zero
 1017d5c:	1017c780 	call	1017c78 <perf_get_section_time>
 1017d60:	1009883a 	mov	r4,r2
 1017d64:	180b883a 	mov	r5,r3
 1017d68:	200d883a 	mov	r6,r4
 1017d6c:	280f883a 	mov	r7,r5
 1017d70:	3007883a 	mov	r3,r6
 1017d74:	3809883a 	mov	r4,r7
}
 1017d78:	1805883a 	mov	r2,r3
 1017d7c:	2007883a 	mov	r3,r4
 1017d80:	e037883a 	mov	sp,fp
 1017d84:	dfc00117 	ldw	ra,4(sp)
 1017d88:	df000017 	ldw	fp,0(sp)
 1017d8c:	dec00204 	addi	sp,sp,8
 1017d90:	f800283a 	ret

01017d94 <perf_get_num_starts>:

alt_u32 perf_get_num_starts   (void* hw_base_address, int which_section)
{
 1017d94:	f811883a 	mov	r8,ra
 1017d98:	100c1d00 	call	100c1d0 <_mcount>
 1017d9c:	403f883a 	mov	ra,r8
 1017da0:	defffd04 	addi	sp,sp,-12
 1017da4:	df000215 	stw	fp,8(sp)
 1017da8:	df000204 	addi	fp,sp,8
 1017dac:	e13ffe15 	stw	r4,-8(fp)
 1017db0:	e17fff15 	stw	r5,-4(fp)
  return IORD(hw_base_address, ((which_section*4)+2));
 1017db4:	e0bfff17 	ldw	r2,-4(fp)
 1017db8:	1004913a 	slli	r2,r2,4
 1017dbc:	1007883a 	mov	r3,r2
 1017dc0:	e0bffe17 	ldw	r2,-8(fp)
 1017dc4:	1885883a 	add	r2,r3,r2
 1017dc8:	10800204 	addi	r2,r2,8
 1017dcc:	10800037 	ldwio	r2,0(r2)
}
 1017dd0:	e037883a 	mov	sp,fp
 1017dd4:	df000017 	ldw	fp,0(sp)
 1017dd8:	dec00104 	addi	sp,sp,4
 1017ddc:	f800283a 	ret

01017de0 <alt_get_performance_counter_base>:
 * in Nios II IDE just like is done for the system clock timer and
 * timestamp timer.
 */
void* 
alt_get_performance_counter_base()
{
 1017de0:	f811883a 	mov	r8,ra
 1017de4:	100c1d00 	call	100c1d0 <_mcount>
 1017de8:	403f883a 	mov	ra,r8
 1017dec:	deffff04 	addi	sp,sp,-4
 1017df0:	df000015 	stw	fp,0(sp)
 1017df4:	d839883a 	mov	fp,sp
#ifdef PERFORMANCE_COUNTER_0_BASE
    return (void*)PERFORMANCE_COUNTER_0_BASE;
 1017df8:	00800434 	movhi	r2,16
 1017dfc:	10940004 	addi	r2,r2,20480
#else
    return (void*)0;
#endif
}
 1017e00:	e037883a 	mov	sp,fp
 1017e04:	df000017 	ldw	fp,0(sp)
 1017e08:	dec00104 	addi	sp,sp,4
 1017e0c:	f800283a 	ret

01017e10 <alt_get_cpu_freq>:
 * If the performance counter peripheral is in a different time domain,
 * this won't necessarily be the same frequency of the CPU.
 */
alt_u32 
alt_get_cpu_freq()
{
 1017e10:	f811883a 	mov	r8,ra
 1017e14:	100c1d00 	call	100c1d0 <_mcount>
 1017e18:	403f883a 	mov	ra,r8
 1017e1c:	deffff04 	addi	sp,sp,-4
 1017e20:	df000015 	stw	fp,0(sp)
 1017e24:	d839883a 	mov	fp,sp
    return ALT_CPU_FREQ;
 1017e28:	0080bef4 	movhi	r2,763
 1017e2c:	10bc2004 	addi	r2,r2,-3968
}
 1017e30:	e037883a 	mov	sp,fp
 1017e34:	df000017 	ldw	fp,0(sp)
 1017e38:	dec00104 	addi	sp,sp,4
 1017e3c:	f800283a 	ret

01017e40 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 1017e40:	f811883a 	mov	r8,ra
 1017e44:	100c1d00 	call	100c1d0 <_mcount>
 1017e48:	403f883a 	mov	ra,r8
 1017e4c:	defff904 	addi	sp,sp,-28
 1017e50:	dfc00615 	stw	ra,24(sp)
 1017e54:	df000515 	stw	fp,20(sp)
 1017e58:	df000504 	addi	fp,sp,20
 1017e5c:	e13ffe15 	stw	r4,-8(fp)
 1017e60:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 1017e64:	e0bffe17 	ldw	r2,-8(fp)
 1017e68:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 1017e6c:	e0bffe17 	ldw	r2,-8(fp)
 1017e70:	10800104 	addi	r2,r2,4
 1017e74:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1017e78:	0005303a 	rdctl	r2,status
 1017e7c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1017e80:	e0fffc17 	ldw	r3,-16(fp)
 1017e84:	00bfff84 	movi	r2,-2
 1017e88:	1884703a 	and	r2,r3,r2
 1017e8c:	1001703a 	wrctl	status,r2
  
  return context;
 1017e90:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 1017e94:	e0bffd15 	stw	r2,-12(fp)
  alt_tick ();
 1017e98:	100c5ec0 	call	100c5ec <alt_tick>
 1017e9c:	e0bffd17 	ldw	r2,-12(fp)
 1017ea0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1017ea4:	e0bffb17 	ldw	r2,-20(fp)
 1017ea8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 1017eac:	e037883a 	mov	sp,fp
 1017eb0:	dfc00117 	ldw	ra,4(sp)
 1017eb4:	df000017 	ldw	fp,0(sp)
 1017eb8:	dec00204 	addi	sp,sp,8
 1017ebc:	f800283a 	ret

01017ec0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 1017ec0:	f811883a 	mov	r8,ra
 1017ec4:	100c1d00 	call	100c1d0 <_mcount>
 1017ec8:	403f883a 	mov	ra,r8
 1017ecc:	defff904 	addi	sp,sp,-28
 1017ed0:	dfc00615 	stw	ra,24(sp)
 1017ed4:	df000515 	stw	fp,20(sp)
 1017ed8:	df000504 	addi	fp,sp,20
 1017edc:	e13ffc15 	stw	r4,-16(fp)
 1017ee0:	e17ffd15 	stw	r5,-12(fp)
 1017ee4:	e1bffe15 	stw	r6,-8(fp)
 1017ee8:	e1ffff15 	stw	r7,-4(fp)
 1017eec:	e0bfff17 	ldw	r2,-4(fp)
 1017ef0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 1017ef4:	008040f4 	movhi	r2,259
 1017ef8:	1096ef04 	addi	r2,r2,23484
 1017efc:	10800017 	ldw	r2,0(r2)
 1017f00:	1004c03a 	cmpne	r2,r2,zero
 1017f04:	1000041e 	bne	r2,zero,1017f18 <alt_avalon_timer_sc_init+0x58>
  {
    _alt_tick_rate = nticks;
 1017f08:	00c040f4 	movhi	r3,259
 1017f0c:	18d6ef04 	addi	r3,r3,23484
 1017f10:	e0bffb17 	ldw	r2,-20(fp)
 1017f14:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 1017f18:	e0bffc17 	ldw	r2,-16(fp)
 1017f1c:	10800104 	addi	r2,r2,4
 1017f20:	1007883a 	mov	r3,r2
 1017f24:	008001c4 	movi	r2,7
 1017f28:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
 1017f2c:	e13ffe17 	ldw	r4,-8(fp)
 1017f30:	e17ffc17 	ldw	r5,-16(fp)
 1017f34:	01804074 	movhi	r6,257
 1017f38:	319f9004 	addi	r6,r6,32320
 1017f3c:	10189400 	call	1018940 <alt_irq_register>
#endif  
}
 1017f40:	e037883a 	mov	sp,fp
 1017f44:	dfc00117 	ldw	ra,4(sp)
 1017f48:	df000017 	ldw	fp,0(sp)
 1017f4c:	dec00204 	addi	sp,sp,8
 1017f50:	f800283a 	ret

01017f54 <perf_print_formatted_report>:

#ifndef SMALL_C_LIB 
int perf_print_formatted_report (void* perf_base, 
                                 alt_u32 clock_freq_hertz,
                                 int num_sections, ...)
{
 1017f54:	f811883a 	mov	r8,ra
 1017f58:	100c1d00 	call	100c1d0 <_mcount>
 1017f5c:	403f883a 	mov	ra,r8
 1017f60:	deffe504 	addi	sp,sp,-108
 1017f64:	dfc01915 	stw	ra,100(sp)
 1017f68:	df001815 	stw	fp,96(sp)
 1017f6c:	dcc01715 	stw	r19,92(sp)
 1017f70:	dc801615 	stw	r18,88(sp)
 1017f74:	dc401515 	stw	r17,84(sp)
 1017f78:	dc001415 	stw	r16,80(sp)
 1017f7c:	df001404 	addi	fp,sp,80
 1017f80:	e13ffd15 	stw	r4,-12(fp)
 1017f84:	e17ffe15 	stw	r5,-8(fp)
 1017f88:	e1c00615 	stw	r7,24(fp)
 1017f8c:	e1bfff15 	stw	r6,-4(fp)
  va_list name_args;
  double total_sec;
  alt_u64 total_clocks;
  alt_u64 section_clocks;
  char* section_name;
  int section_num = 1;
 1017f90:	00800044 	movi	r2,1
 1017f94:	e0bff415 	stw	r2,-48(fp)

  const char* separator = 
    "+---------------+-----+-----------+---------------+-----------+\n";
 1017f98:	008040b4 	movhi	r2,258
 1017f9c:	10a87e04 	addi	r2,r2,-24072
 1017fa0:	e0bff315 	stw	r2,-52(fp)
  const char* column_header = 
    "| Section       |  %  | Time (sec)|  Time (clocks)|Occurrences|\n";
 1017fa4:	008040b4 	movhi	r2,258
 1017fa8:	10a88f04 	addi	r2,r2,-24004
 1017fac:	e0bff215 	stw	r2,-56(fp)

  PERF_STOP_MEASURING (perf_base);
 1017fb0:	e0bffd17 	ldw	r2,-12(fp)
 1017fb4:	10000035 	stwio	zero,0(r2)

  va_start (name_args, num_sections);
 1017fb8:	e0800604 	addi	r2,fp,24
 1017fbc:	e0bffc15 	stw	r2,-16(fp)

  total_clocks = perf_get_total_time (perf_base);
 1017fc0:	e13ffd17 	ldw	r4,-12(fp)
 1017fc4:	1017d340 	call	1017d34 <perf_get_total_time>
 1017fc8:	1009883a 	mov	r4,r2
 1017fcc:	180b883a 	mov	r5,r3
 1017fd0:	e13ff815 	stw	r4,-32(fp)
 1017fd4:	e17ff915 	stw	r5,-28(fp)
  total_sec    = ((double)total_clocks) / clock_freq_hertz;
 1017fd8:	e13ff817 	ldw	r4,-32(fp)
 1017fdc:	e17ff917 	ldw	r5,-28(fp)
 1017fe0:	1019ad00 	call	1019ad0 <__floatundidf>
 1017fe4:	1021883a 	mov	r16,r2
 1017fe8:	1823883a 	mov	r17,r3
 1017fec:	e13ffe17 	ldw	r4,-8(fp)
 1017ff0:	1001eb80 	call	1001eb8 <__floatunsidf>
 1017ff4:	100f883a 	mov	r7,r2
 1017ff8:	1811883a 	mov	r8,r3
 1017ffc:	8009883a 	mov	r4,r16
 1018000:	880b883a 	mov	r5,r17
 1018004:	380d883a 	mov	r6,r7
 1018008:	400f883a 	mov	r7,r8
 101800c:	1001c540 	call	1001c54 <__divdf3>
 1018010:	1009883a 	mov	r4,r2
 1018014:	180b883a 	mov	r5,r3
 1018018:	e13ffa15 	stw	r4,-24(fp)
 101801c:	e17ffb15 	stw	r5,-20(fp)

  // Print the total at the top:
  printf ("--Performance Counter Report--\nTotal Time: %3G seconds  (%lld clock-cycles)\n%s%s%s",
 1018020:	e0bff317 	ldw	r2,-52(fp)
 1018024:	d8800115 	stw	r2,4(sp)
 1018028:	e0bff217 	ldw	r2,-56(fp)
 101802c:	d8800215 	stw	r2,8(sp)
 1018030:	e0bff317 	ldw	r2,-52(fp)
 1018034:	d8800315 	stw	r2,12(sp)
 1018038:	e0bff917 	ldw	r2,-28(fp)
 101803c:	d8800015 	stw	r2,0(sp)
 1018040:	e1fff817 	ldw	r7,-32(fp)
 1018044:	010040b4 	movhi	r4,258
 1018048:	2128a004 	addi	r4,r4,-23936
 101804c:	e17ffa17 	ldw	r5,-24(fp)
 1018050:	e1bffb17 	ldw	r6,-20(fp)
 1018054:	10027140 	call	1002714 <printf>
          total_sec, total_clocks, separator, column_header, separator);

  section_name = va_arg(name_args, char*);
 1018058:	e0fffc17 	ldw	r3,-16(fp)
 101805c:	18800104 	addi	r2,r3,4
 1018060:	e0bffc15 	stw	r2,-16(fp)
 1018064:	1805883a 	mov	r2,r3
 1018068:	10800017 	ldw	r2,0(r2)
 101806c:	e0bff515 	stw	r2,-44(fp)

  for (section_num = 1; section_num <= num_sections; section_num++)
 1018070:	00800044 	movi	r2,1
 1018074:	e0bff415 	stw	r2,-48(fp)
 1018078:	00005106 	br	10181c0 <perf_print_formatted_report+0x26c>
    {
      section_clocks = perf_get_section_time (perf_base, section_num);
 101807c:	e13ffd17 	ldw	r4,-12(fp)
 1018080:	e17ff417 	ldw	r5,-48(fp)
 1018084:	1017c780 	call	1017c78 <perf_get_section_time>
 1018088:	1009883a 	mov	r4,r2
 101808c:	180b883a 	mov	r5,r3
 1018090:	e13ff615 	stw	r4,-40(fp)
 1018094:	e17ff715 	stw	r5,-36(fp)

      printf ("|%-15s|%5.3g|%11.5f|%15lld|%11u|\n%s",
 1018098:	e13ff617 	ldw	r4,-40(fp)
 101809c:	e17ff717 	ldw	r5,-36(fp)
 10180a0:	1019ad00 	call	1019ad0 <__floatundidf>
 10180a4:	100b883a 	mov	r5,r2
 10180a8:	180d883a 	mov	r6,r3
 10180ac:	2809883a 	mov	r4,r5
 10180b0:	300b883a 	mov	r5,r6
 10180b4:	000d883a 	mov	r6,zero
 10180b8:	01d01674 	movhi	r7,16473
 10180bc:	100ae480 	call	100ae48 <__muldf3>
 10180c0:	1009883a 	mov	r4,r2
 10180c4:	180b883a 	mov	r5,r3
 10180c8:	2021883a 	mov	r16,r4
 10180cc:	2823883a 	mov	r17,r5
 10180d0:	e13ff817 	ldw	r4,-32(fp)
 10180d4:	e17ff917 	ldw	r5,-28(fp)
 10180d8:	1019ad00 	call	1019ad0 <__floatundidf>
 10180dc:	100f883a 	mov	r7,r2
 10180e0:	1811883a 	mov	r8,r3
 10180e4:	8009883a 	mov	r4,r16
 10180e8:	880b883a 	mov	r5,r17
 10180ec:	380d883a 	mov	r6,r7
 10180f0:	400f883a 	mov	r7,r8
 10180f4:	1001c540 	call	1001c54 <__divdf3>
 10180f8:	1009883a 	mov	r4,r2
 10180fc:	180b883a 	mov	r5,r3
 1018100:	2025883a 	mov	r18,r4
 1018104:	2827883a 	mov	r19,r5
 1018108:	e13ff617 	ldw	r4,-40(fp)
 101810c:	e17ff717 	ldw	r5,-36(fp)
 1018110:	1019ad00 	call	1019ad0 <__floatundidf>
 1018114:	1021883a 	mov	r16,r2
 1018118:	1823883a 	mov	r17,r3
 101811c:	e13ffe17 	ldw	r4,-8(fp)
 1018120:	1001eb80 	call	1001eb8 <__floatunsidf>
 1018124:	100f883a 	mov	r7,r2
 1018128:	1811883a 	mov	r8,r3
 101812c:	8009883a 	mov	r4,r16
 1018130:	880b883a 	mov	r5,r17
 1018134:	380d883a 	mov	r6,r7
 1018138:	400f883a 	mov	r7,r8
 101813c:	1001c540 	call	1001c54 <__divdf3>
 1018140:	1009883a 	mov	r4,r2
 1018144:	180b883a 	mov	r5,r3
 1018148:	2021883a 	mov	r16,r4
 101814c:	2823883a 	mov	r17,r5
 1018150:	e13ffd17 	ldw	r4,-12(fp)
 1018154:	e17ff417 	ldw	r5,-48(fp)
 1018158:	1017d940 	call	1017d94 <perf_get_num_starts>
 101815c:	1007883a 	mov	r3,r2
 1018160:	dc000015 	stw	r16,0(sp)
 1018164:	dc400115 	stw	r17,4(sp)
 1018168:	e0bff617 	ldw	r2,-40(fp)
 101816c:	d8800215 	stw	r2,8(sp)
 1018170:	e0bff717 	ldw	r2,-36(fp)
 1018174:	d8800315 	stw	r2,12(sp)
 1018178:	d8c00415 	stw	r3,16(sp)
 101817c:	e0bff317 	ldw	r2,-52(fp)
 1018180:	d8800515 	stw	r2,20(sp)
 1018184:	010040b4 	movhi	r4,258
 1018188:	2128b504 	addi	r4,r4,-23852
 101818c:	e17ff517 	ldw	r5,-44(fp)
 1018190:	900d883a 	mov	r6,r18
 1018194:	980f883a 	mov	r7,r19
 1018198:	10027140 	call	1002714 <printf>
              section_clocks,
              (unsigned int) perf_get_num_starts (perf_base, section_num),
              separator
              );

      section_name = va_arg(name_args, char*);
 101819c:	e0fffc17 	ldw	r3,-16(fp)
 10181a0:	18800104 	addi	r2,r3,4
 10181a4:	e0bffc15 	stw	r2,-16(fp)
 10181a8:	1805883a 	mov	r2,r3
 10181ac:	10800017 	ldw	r2,0(r2)
 10181b0:	e0bff515 	stw	r2,-44(fp)
  printf ("--Performance Counter Report--\nTotal Time: %3G seconds  (%lld clock-cycles)\n%s%s%s",
          total_sec, total_clocks, separator, column_header, separator);

  section_name = va_arg(name_args, char*);

  for (section_num = 1; section_num <= num_sections; section_num++)
 10181b4:	e0bff417 	ldw	r2,-48(fp)
 10181b8:	10800044 	addi	r2,r2,1
 10181bc:	e0bff415 	stw	r2,-48(fp)
 10181c0:	e0fff417 	ldw	r3,-48(fp)
 10181c4:	e0bfff17 	ldw	r2,-4(fp)
 10181c8:	10ffac0e 	bge	r2,r3,101807c <perf_print_formatted_report+0x128>
      section_name = va_arg(name_args, char*);
    }

  va_end (name_args);

  return 0;
 10181cc:	0005883a 	mov	r2,zero
}
 10181d0:	e037883a 	mov	sp,fp
 10181d4:	dfc00517 	ldw	ra,20(sp)
 10181d8:	df000417 	ldw	fp,16(sp)
 10181dc:	dcc00317 	ldw	r19,12(sp)
 10181e0:	dc800217 	ldw	r18,8(sp)
 10181e4:	dc400117 	ldw	r17,4(sp)
 10181e8:	dc000017 	ldw	r16,0(sp)
 10181ec:	dec00704 	addi	sp,sp,28
 10181f0:	f800283a 	ret

010181f4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 10181f4:	f811883a 	mov	r8,ra
 10181f8:	100c1d00 	call	100c1d0 <_mcount>
 10181fc:	403f883a 	mov	ra,r8
 1018200:	deffff04 	addi	sp,sp,-4
 1018204:	df000015 	stw	fp,0(sp)
 1018208:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 101820c:	e037883a 	mov	sp,fp
 1018210:	df000017 	ldw	fp,0(sp)
 1018214:	dec00104 	addi	sp,sp,4
 1018218:	f800283a 	ret

0101821c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 101821c:	f811883a 	mov	r8,ra
 1018220:	100c1d00 	call	100c1d0 <_mcount>
 1018224:	403f883a 	mov	ra,r8
 1018228:	defff904 	addi	sp,sp,-28
 101822c:	dfc00615 	stw	ra,24(sp)
 1018230:	df000515 	stw	fp,20(sp)
 1018234:	df000504 	addi	fp,sp,20
 1018238:	e13ffd15 	stw	r4,-12(fp)
 101823c:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 1018240:	e0bffd17 	ldw	r2,-12(fp)
 1018244:	1005003a 	cmpeq	r2,r2,zero
 1018248:	1000041e 	bne	r2,zero,101825c <alt_dev_llist_insert+0x40>
 101824c:	e0bffd17 	ldw	r2,-12(fp)
 1018250:	10800217 	ldw	r2,8(r2)
 1018254:	1004c03a 	cmpne	r2,r2,zero
 1018258:	1000071e 	bne	r2,zero,1018278 <alt_dev_llist_insert+0x5c>
  {
    ALT_ERRNO = EINVAL;
 101825c:	10182dc0 	call	10182dc <alt_get_errno>
 1018260:	1007883a 	mov	r3,r2
 1018264:	00800584 	movi	r2,22
 1018268:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 101826c:	00bffa84 	movi	r2,-22
 1018270:	e0bfff15 	stw	r2,-4(fp)
 1018274:	00001306 	br	10182c4 <alt_dev_llist_insert+0xa8>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 1018278:	e0fffd17 	ldw	r3,-12(fp)
 101827c:	e0bffe17 	ldw	r2,-8(fp)
 1018280:	e0bffb15 	stw	r2,-20(fp)
 1018284:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 1018288:	e0fffc17 	ldw	r3,-16(fp)
 101828c:	e0bffb17 	ldw	r2,-20(fp)
 1018290:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 1018294:	e0bffb17 	ldw	r2,-20(fp)
 1018298:	10c00017 	ldw	r3,0(r2)
 101829c:	e0bffc17 	ldw	r2,-16(fp)
 10182a0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 10182a4:	e0bffb17 	ldw	r2,-20(fp)
 10182a8:	10c00017 	ldw	r3,0(r2)
 10182ac:	e0bffc17 	ldw	r2,-16(fp)
 10182b0:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 10182b4:	e0fffb17 	ldw	r3,-20(fp)
 10182b8:	e0bffc17 	ldw	r2,-16(fp)
 10182bc:	18800015 	stw	r2,0(r3)

  return 0;  
 10182c0:	e03fff15 	stw	zero,-4(fp)
 10182c4:	e0bfff17 	ldw	r2,-4(fp)
}
 10182c8:	e037883a 	mov	sp,fp
 10182cc:	dfc00117 	ldw	ra,4(sp)
 10182d0:	df000017 	ldw	fp,0(sp)
 10182d4:	dec00204 	addi	sp,sp,8
 10182d8:	f800283a 	ret

010182dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10182dc:	f811883a 	mov	r8,ra
 10182e0:	100c1d00 	call	100c1d0 <_mcount>
 10182e4:	403f883a 	mov	ra,r8
 10182e8:	defffd04 	addi	sp,sp,-12
 10182ec:	dfc00215 	stw	ra,8(sp)
 10182f0:	df000115 	stw	fp,4(sp)
 10182f4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 10182f8:	008040b4 	movhi	r2,258
 10182fc:	109fa304 	addi	r2,r2,32396
 1018300:	10800017 	ldw	r2,0(r2)
 1018304:	1005003a 	cmpeq	r2,r2,zero
 1018308:	1000061e 	bne	r2,zero,1018324 <alt_get_errno+0x48>
 101830c:	008040b4 	movhi	r2,258
 1018310:	109fa304 	addi	r2,r2,32396
 1018314:	10800017 	ldw	r2,0(r2)
 1018318:	103ee83a 	callr	r2
 101831c:	e0bfff15 	stw	r2,-4(fp)
 1018320:	00000306 	br	1018330 <alt_get_errno+0x54>
 1018324:	008040f4 	movhi	r2,259
 1018328:	1096ea04 	addi	r2,r2,23464
 101832c:	e0bfff15 	stw	r2,-4(fp)
 1018330:	e0bfff17 	ldw	r2,-4(fp)
}
 1018334:	e037883a 	mov	sp,fp
 1018338:	dfc00117 	ldw	ra,4(sp)
 101833c:	df000017 	ldw	fp,0(sp)
 1018340:	dec00204 	addi	sp,sp,8
 1018344:	f800283a 	ret

01018348 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 1018348:	f811883a 	mov	r8,ra
 101834c:	100c1d00 	call	100c1d0 <_mcount>
 1018350:	403f883a 	mov	ra,r8
 1018354:	defffd04 	addi	sp,sp,-12
 1018358:	dfc00215 	stw	ra,8(sp)
 101835c:	df000115 	stw	fp,4(sp)
 1018360:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 1018364:	00bfff04 	movi	r2,-4
 1018368:	00c040b4 	movhi	r3,258
 101836c:	18e70b04 	addi	r3,r3,-25556
 1018370:	1885883a 	add	r2,r3,r2
 1018374:	e0bfff15 	stw	r2,-4(fp)
 1018378:	00000606 	br	1018394 <_do_ctors+0x4c>
        (*ctor) (); 
 101837c:	e0bfff17 	ldw	r2,-4(fp)
 1018380:	10800017 	ldw	r2,0(r2)
 1018384:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 1018388:	e0bfff17 	ldw	r2,-4(fp)
 101838c:	10bfff04 	addi	r2,r2,-4
 1018390:	e0bfff15 	stw	r2,-4(fp)
 1018394:	e0ffff17 	ldw	r3,-4(fp)
 1018398:	008040b4 	movhi	r2,258
 101839c:	10a70a04 	addi	r2,r2,-25560
 10183a0:	18bff62e 	bgeu	r3,r2,101837c <_do_ctors+0x34>
        (*ctor) (); 
}
 10183a4:	e037883a 	mov	sp,fp
 10183a8:	dfc00117 	ldw	ra,4(sp)
 10183ac:	df000017 	ldw	fp,0(sp)
 10183b0:	dec00204 	addi	sp,sp,8
 10183b4:	f800283a 	ret

010183b8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 10183b8:	f811883a 	mov	r8,ra
 10183bc:	100c1d00 	call	100c1d0 <_mcount>
 10183c0:	403f883a 	mov	ra,r8
 10183c4:	defffd04 	addi	sp,sp,-12
 10183c8:	dfc00215 	stw	ra,8(sp)
 10183cc:	df000115 	stw	fp,4(sp)
 10183d0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 10183d4:	00bfff04 	movi	r2,-4
 10183d8:	00c040b4 	movhi	r3,258
 10183dc:	18e70b04 	addi	r3,r3,-25556
 10183e0:	1885883a 	add	r2,r3,r2
 10183e4:	e0bfff15 	stw	r2,-4(fp)
 10183e8:	00000606 	br	1018404 <_do_dtors+0x4c>
        (*dtor) (); 
 10183ec:	e0bfff17 	ldw	r2,-4(fp)
 10183f0:	10800017 	ldw	r2,0(r2)
 10183f4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 10183f8:	e0bfff17 	ldw	r2,-4(fp)
 10183fc:	10bfff04 	addi	r2,r2,-4
 1018400:	e0bfff15 	stw	r2,-4(fp)
 1018404:	e0ffff17 	ldw	r3,-4(fp)
 1018408:	008040b4 	movhi	r2,258
 101840c:	10a70b04 	addi	r2,r2,-25556
 1018410:	18bff62e 	bgeu	r3,r2,10183ec <_do_dtors+0x34>
        (*dtor) (); 
}
 1018414:	e037883a 	mov	sp,fp
 1018418:	dfc00117 	ldw	ra,4(sp)
 101841c:	df000017 	ldw	fp,0(sp)
 1018420:	dec00204 	addi	sp,sp,8
 1018424:	f800283a 	ret

01018428 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 1018428:	f811883a 	mov	r8,ra
 101842c:	100c1d00 	call	100c1d0 <_mcount>
 1018430:	403f883a 	mov	ra,r8
 1018434:	defff904 	addi	sp,sp,-28
 1018438:	dfc00615 	stw	ra,24(sp)
 101843c:	df000515 	stw	fp,20(sp)
 1018440:	df000504 	addi	fp,sp,20
 1018444:	e13ffd15 	stw	r4,-12(fp)
 1018448:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 101844c:	e0bffe17 	ldw	r2,-8(fp)
 1018450:	10800017 	ldw	r2,0(r2)
 1018454:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 1018458:	e13ffd17 	ldw	r4,-12(fp)
 101845c:	10028ac0 	call	10028ac <strlen>
 1018460:	10800044 	addi	r2,r2,1
 1018464:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1018468:	00000d06 	br	10184a0 <alt_find_dev+0x78>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 101846c:	e0bffc17 	ldw	r2,-16(fp)
 1018470:	11000217 	ldw	r4,8(r2)
 1018474:	e1bffb17 	ldw	r6,-20(fp)
 1018478:	e17ffd17 	ldw	r5,-12(fp)
 101847c:	10196940 	call	1019694 <memcmp>
 1018480:	1004c03a 	cmpne	r2,r2,zero
 1018484:	1000031e 	bne	r2,zero,1018494 <alt_find_dev+0x6c>
    {
      /* match found */

      return next;
 1018488:	e0bffc17 	ldw	r2,-16(fp)
 101848c:	e0bfff15 	stw	r2,-4(fp)
 1018490:	00000706 	br	10184b0 <alt_find_dev+0x88>
    }
    next = (alt_dev*) next->llist.next;
 1018494:	e0bffc17 	ldw	r2,-16(fp)
 1018498:	10800017 	ldw	r2,0(r2)
 101849c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 10184a0:	e0fffe17 	ldw	r3,-8(fp)
 10184a4:	e0bffc17 	ldw	r2,-16(fp)
 10184a8:	10fff01e 	bne	r2,r3,101846c <alt_find_dev+0x44>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 10184ac:	e03fff15 	stw	zero,-4(fp)
 10184b0:	e0bfff17 	ldw	r2,-4(fp)
}
 10184b4:	e037883a 	mov	sp,fp
 10184b8:	dfc00117 	ldw	ra,4(sp)
 10184bc:	df000017 	ldw	fp,0(sp)
 10184c0:	dec00204 	addi	sp,sp,8
 10184c4:	f800283a 	ret

010184c8 <__mcount_record>:
 *
 * The fast case, where we have already allocated a function arc, has been
 * handled by the assmebler code.
 */
void __mcount_record(void * self_pc, void * from_pc, struct mcount_fn_entry * fn_entry, struct mcount_fn_entry * * fn_head)
{
 10184c8:	defff604 	addi	sp,sp,-40
 10184cc:	dfc00915 	stw	ra,36(sp)
 10184d0:	df000815 	stw	fp,32(sp)
 10184d4:	df000804 	addi	fp,sp,32
 10184d8:	e13ffc15 	stw	r4,-16(fp)
 10184dc:	e17ffd15 	stw	r5,-12(fp)
 10184e0:	e1bffe15 	stw	r6,-8(fp)
 10184e4:	e1ffff15 	stw	r7,-4(fp)
  struct mcount_fn_arc * arc_entry;

  /* Keep trying to start up the PC sampler until it is running.
   * (It can't start until the timer is going).
   */
  if (pcsample_need_init)
 10184e8:	d0a03117 	ldw	r2,-32572(gp)
 10184ec:	1005003a 	cmpeq	r2,r2,zero
 10184f0:	1000031e 	bne	r2,zero,1018500 <__mcount_record+0x38>
  {
    pcsample_need_init = 0;
 10184f4:	d0203115 	stw	zero,-32572(gp)
    pcsample_need_init = nios2_pcsample_init();
 10184f8:	10186480 	call	1018648 <nios2_pcsample_init>
 10184fc:	d0a03115 	stw	r2,-32572(gp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1018500:	0005303a 	rdctl	r2,status
 1018504:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1018508:	e0fff917 	ldw	r3,-28(fp)
 101850c:	00bfff84 	movi	r2,-2
 1018510:	1884703a 	and	r2,r3,r2
 1018514:	1001703a 	wrctl	status,r2
  
  return context;
 1018518:	e0bff917 	ldw	r2,-28(fp)
   * It's safe for the code above to be stepping through the chain and be
   * interrupted by this code modifying it - there is an edge case which will
   * leave two copies of the same arc on the list (both with count=1), but
   * this is dealt with on the host.
   */
  context = alt_irq_disable_all();
 101851c:	e0bffb15 	stw	r2,-20(fp)

  if (fn_entry == NULL)
 1018520:	e0bffe17 	ldw	r2,-8(fp)
 1018524:	1004c03a 	cmpne	r2,r2,zero
 1018528:	10000f1e 	bne	r2,zero,1018568 <__mcount_record+0xa0>
  {
    /* Add it to the list of functions we must output later. */
    fn_entry = (struct mcount_fn_entry *)mcount_allocate(sizeof(struct mcount_fn_entry));
 101852c:	01000304 	movi	r4,12
 1018530:	10185cc0 	call	10185cc <mcount_allocate>
 1018534:	e0bffe15 	stw	r2,-8(fp)

    fn_entry->self_pc = self_pc;
 1018538:	e0fffe17 	ldw	r3,-8(fp)
 101853c:	e0bffc17 	ldw	r2,-16(fp)
 1018540:	18800115 	stw	r2,4(r3)
    fn_entry->arc_head = NULL;
 1018544:	e0bffe17 	ldw	r2,-8(fp)
 1018548:	10000215 	stw	zero,8(r2)

    fn_entry->next = *fn_head;
 101854c:	e0bfff17 	ldw	r2,-4(fp)
 1018550:	10c00017 	ldw	r3,0(r2)
 1018554:	e0bffe17 	ldw	r2,-8(fp)
 1018558:	10c00015 	stw	r3,0(r2)
    *fn_head = fn_entry;
 101855c:	e0ffff17 	ldw	r3,-4(fp)
 1018560:	e0bffe17 	ldw	r2,-8(fp)
 1018564:	18800015 	stw	r2,0(r3)
  }

  /* We will need a new list entry - if there was a list entry before
   * then the assembler code would have handled it. */
  arc_entry = (struct mcount_fn_arc *)mcount_allocate(sizeof(struct mcount_fn_arc));
 1018568:	01000304 	movi	r4,12
 101856c:	10185cc0 	call	10185cc <mcount_allocate>
 1018570:	e0bffa15 	stw	r2,-24(fp)

  arc_entry->from_pc = from_pc;
 1018574:	e0fffa17 	ldw	r3,-24(fp)
 1018578:	e0bffd17 	ldw	r2,-12(fp)
 101857c:	18800115 	stw	r2,4(r3)
  arc_entry->count = 1;
 1018580:	e0fffa17 	ldw	r3,-24(fp)
 1018584:	00800044 	movi	r2,1
 1018588:	18800215 	stw	r2,8(r3)

  arc_entry->next = fn_entry->arc_head;
 101858c:	e0bffe17 	ldw	r2,-8(fp)
 1018590:	10c00217 	ldw	r3,8(r2)
 1018594:	e0bffa17 	ldw	r2,-24(fp)
 1018598:	10c00015 	stw	r3,0(r2)
  fn_entry->arc_head = arc_entry;
 101859c:	e0fffe17 	ldw	r3,-8(fp)
 10185a0:	e0bffa17 	ldw	r2,-24(fp)
 10185a4:	18800215 	stw	r2,8(r3)
 10185a8:	e0bffb17 	ldw	r2,-20(fp)
 10185ac:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10185b0:	e0bff817 	ldw	r2,-32(fp)
 10185b4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(context);
}
 10185b8:	e037883a 	mov	sp,fp
 10185bc:	dfc00117 	ldw	ra,4(sp)
 10185c0:	df000017 	ldw	fp,0(sp)
 10185c4:	dec00204 	addi	sp,sp,8
 10185c8:	f800283a 	ret

010185cc <mcount_allocate>:
 * because that's interrupt safe (and because we never free anything).
 *
 * For speed, we allocate a block of data at once.
 */
static __inline__ void * mcount_allocate(unsigned int size)
{
 10185cc:	defffc04 	addi	sp,sp,-16
 10185d0:	dfc00315 	stw	ra,12(sp)
 10185d4:	df000215 	stw	fp,8(sp)
 10185d8:	df000204 	addi	fp,sp,8
 10185dc:	e13fff15 	stw	r4,-4(fp)
  void * data;

  if (size > mcount_slab_size)
 10185e0:	d0977a17 	ldw	r2,24040(gp)
 10185e4:	1007883a 	mov	r3,r2
 10185e8:	e0bfff17 	ldw	r2,-4(fp)
 10185ec:	1880052e 	bgeu	r3,r2,1018604 <mcount_allocate+0x38>
  {
    mcount_slab_ptr = sbrk(MCOUNT_SLAB_INCREMENT);
 10185f0:	0100ff04 	movi	r4,1020
 10185f4:	100c48c0 	call	100c48c <sbrk>
 10185f8:	d0977915 	stw	r2,24036(gp)
    mcount_slab_size = MCOUNT_SLAB_INCREMENT;
 10185fc:	0080ff04 	movi	r2,1020
 1018600:	d0977a15 	stw	r2,24040(gp)
  }

  data = mcount_slab_ptr;
 1018604:	d0977917 	ldw	r2,24036(gp)
 1018608:	e0bffe15 	stw	r2,-8(fp)
  mcount_slab_ptr += size;
 101860c:	d0d77917 	ldw	r3,24036(gp)
 1018610:	e0bfff17 	ldw	r2,-4(fp)
 1018614:	1885883a 	add	r2,r3,r2
 1018618:	d0977915 	stw	r2,24036(gp)
  mcount_slab_size -= size;
 101861c:	d0977a17 	ldw	r2,24040(gp)
 1018620:	1007883a 	mov	r3,r2
 1018624:	e0bfff17 	ldw	r2,-4(fp)
 1018628:	1885c83a 	sub	r2,r3,r2
 101862c:	d0977a15 	stw	r2,24040(gp)

  return data;
 1018630:	e0bffe17 	ldw	r2,-8(fp)
}
 1018634:	e037883a 	mov	sp,fp
 1018638:	dfc00117 	ldw	ra,4(sp)
 101863c:	df000017 	ldw	fp,0(sp)
 1018640:	dec00204 	addi	sp,sp,8
 1018644:	f800283a 	ret

01018648 <nios2_pcsample_init>:
 * It is called the first time mcount is called, and on subsequent calls to
 * mcount until it returns zero. It initializes the pc histogram and turns on
 * timer driven pc sampling.
 */
static int nios2_pcsample_init(void)
{
 1018648:	defffb04 	addi	sp,sp,-20
 101864c:	dfc00415 	stw	ra,16(sp)
 1018650:	df000315 	stw	fp,12(sp)
 1018654:	df000304 	addi	fp,sp,12
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 1018658:	008040f4 	movhi	r2,259
 101865c:	1096ef04 	addi	r2,r2,23484
 1018660:	10800017 	ldw	r2,0(r2)
  unsigned int pcsamples_size; 

  /* We sample the PC every tick */
  unsigned int prof_rate = alt_ticks_per_second();
 1018664:	e0bffd15 	stw	r2,-12(fp)
  if (prof_rate == 0)
 1018668:	e0bffd17 	ldw	r2,-12(fp)
 101866c:	1004c03a 	cmpne	r2,r2,zero
 1018670:	1000031e 	bne	r2,zero,1018680 <nios2_pcsample_init+0x38>
    return 1;
 1018674:	00800044 	movi	r2,1
 1018678:	e0bfff15 	stw	r2,-4(fp)
 101867c:	00002506 	br	1018714 <nios2_pcsample_init+0xcc>

  /* allocate the histogram buffer s_pcsamples */
  pcsamples_size = (s_high_pc - s_low_pc)/PCSAMPLE_BYTES_PER_BUCKET;
 1018680:	d0e03317 	ldw	r3,-32564(gp)
 1018684:	d0a03217 	ldw	r2,-32568(gp)
 1018688:	1885c83a 	sub	r2,r3,r2
 101868c:	1004d17a 	srli	r2,r2,5
 1018690:	e0bffe15 	stw	r2,-8(fp)
  s_pcsamples    = (unsigned short*)sbrk(pcsamples_size * sizeof(unsigned short));
 1018694:	e0bffe17 	ldw	r2,-8(fp)
 1018698:	1085883a 	add	r2,r2,r2
 101869c:	1009883a 	mov	r4,r2
 10186a0:	100c48c0 	call	100c48c <sbrk>
 10186a4:	d0977815 	stw	r2,24032(gp)

  if (s_pcsamples != 0)
 10186a8:	d0977817 	ldw	r2,24032(gp)
 10186ac:	1005003a 	cmpeq	r2,r2,zero
 10186b0:	1000171e 	bne	r2,zero,1018710 <nios2_pcsample_init+0xc8>
  {
    /* initialize the buffer to zero */
    memset(s_pcsamples, 0, pcsamples_size * sizeof(unsigned short));
 10186b4:	d0d77817 	ldw	r3,24032(gp)
 10186b8:	e0bffe17 	ldw	r2,-8(fp)
 10186bc:	1085883a 	add	r2,r2,r2
 10186c0:	1809883a 	mov	r4,r3
 10186c4:	100d883a 	mov	r6,r2
 10186c8:	000b883a 	mov	r5,zero
 10186cc:	1007ed80 	call	1007ed8 <memset>

    alt_gmon_data[GMON_DATA_PROFILE_DATA] = (int)s_pcsamples;
 10186d0:	d0977817 	ldw	r2,24032(gp)
 10186d4:	1007883a 	mov	r3,r2
 10186d8:	008040b4 	movhi	r2,258
 10186dc:	109f8e04 	addi	r2,r2,32312
 10186e0:	10c00215 	stw	r3,8(r2)
    alt_gmon_data[GMON_DATA_PROFILE_RATE] = prof_rate;
 10186e4:	00c040b4 	movhi	r3,258
 10186e8:	18df8e04 	addi	r3,r3,32312
 10186ec:	e0bffd17 	ldw	r2,-12(fp)
 10186f0:	18800615 	stw	r2,24(r3)

    /* Sample every tick (it's cheap) */
    alt_alarm_start(&s_nios2_pcsample_alarm, 1, nios2_pcsample, 0);
 10186f4:	010040f4 	movhi	r4,259
 10186f8:	21172404 	addi	r4,r4,23696
 10186fc:	01400044 	movi	r5,1
 1018700:	018040b4 	movhi	r6,258
 1018704:	31a1cb04 	addi	r6,r6,-30932
 1018708:	000f883a 	mov	r7,zero
 101870c:	100b8f00 	call	100b8f0 <alt_alarm_start>
  }

  return 0;
 1018710:	e03fff15 	stw	zero,-4(fp)
 1018714:	e0bfff17 	ldw	r2,-4(fp)
}
 1018718:	e037883a 	mov	sp,fp
 101871c:	dfc00117 	ldw	ra,4(sp)
 1018720:	df000017 	ldw	fp,0(sp)
 1018724:	dec00204 	addi	sp,sp,8
 1018728:	f800283a 	ret

0101872c <nios2_pcsample>:

/*
 * Sample the PC value and store it in the histogram
 */
static alt_u32 nios2_pcsample(void* context)
{
 101872c:	defffc04 	addi	sp,sp,-16
 1018730:	df000315 	stw	fp,12(sp)
 1018734:	df000304 	addi	fp,sp,12
 1018738:	e13fff15 	stw	r4,-4(fp)

  /* read the exception return address - this will be
   * inaccurate if there are nested interrupts but we
   * assume that this is rare and the inaccuracy will
   * not be great */
  NIOS2_READ_EA(pc);
 101873c:	e805883a 	mov	r2,ea
 1018740:	e0bffe15 	stw	r2,-8(fp)

  /*
   * If we're within the profilable range then increment the relevant
   * bucket in the histogram
   */
  if (pc >= s_low_pc && pc < s_high_pc && s_pcsamples != 0)
 1018744:	d0e03217 	ldw	r3,-32568(gp)
 1018748:	e0bffe17 	ldw	r2,-8(fp)
 101874c:	10c01336 	bltu	r2,r3,101879c <nios2_pcsample+0x70>
 1018750:	d0e03317 	ldw	r3,-32564(gp)
 1018754:	e0bffe17 	ldw	r2,-8(fp)
 1018758:	10c0102e 	bgeu	r2,r3,101879c <nios2_pcsample+0x70>
 101875c:	d0977817 	ldw	r2,24032(gp)
 1018760:	1005003a 	cmpeq	r2,r2,zero
 1018764:	10000d1e 	bne	r2,zero,101879c <nios2_pcsample+0x70>
  {
    bucket = (pc - s_low_pc)/PCSAMPLE_BYTES_PER_BUCKET;
 1018768:	d0e03217 	ldw	r3,-32568(gp)
 101876c:	e0bffe17 	ldw	r2,-8(fp)
 1018770:	10c5c83a 	sub	r2,r2,r3
 1018774:	1004d17a 	srli	r2,r2,5
 1018778:	e0bffd15 	stw	r2,-12(fp)
    s_pcsamples[bucket]++;
 101877c:	e0bffd17 	ldw	r2,-12(fp)
 1018780:	1085883a 	add	r2,r2,r2
 1018784:	1007883a 	mov	r3,r2
 1018788:	d0977817 	ldw	r2,24032(gp)
 101878c:	1887883a 	add	r3,r3,r2
 1018790:	1880000b 	ldhu	r2,0(r3)
 1018794:	10800044 	addi	r2,r2,1
 1018798:	1880000d 	sth	r2,0(r3)
  }

  /* Sample every tick */
  return 1;
 101879c:	00800044 	movi	r2,1
}
 10187a0:	e037883a 	mov	sp,fp
 10187a4:	df000017 	ldw	fp,0(sp)
 10187a8:	dec00104 	addi	sp,sp,4
 10187ac:	f800283a 	ret

010187b0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 10187b0:	f811883a 	mov	r8,ra
 10187b4:	100c1d00 	call	100c1d0 <_mcount>
 10187b8:	403f883a 	mov	ra,r8
 10187bc:	deffff04 	addi	sp,sp,-4
 10187c0:	df000015 	stw	fp,0(sp)
 10187c4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 10187c8:	e037883a 	mov	sp,fp
 10187cc:	df000017 	ldw	fp,0(sp)
 10187d0:	dec00104 	addi	sp,sp,4
 10187d4:	f800283a 	ret

010187d8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 10187d8:	f811883a 	mov	r8,ra
 10187dc:	100c1d00 	call	100c1d0 <_mcount>
 10187e0:	403f883a 	mov	ra,r8
 10187e4:	defff804 	addi	sp,sp,-32
 10187e8:	dfc00715 	stw	ra,28(sp)
 10187ec:	df000615 	stw	fp,24(sp)
 10187f0:	dc000515 	stw	r16,20(sp)
 10187f4:	df000504 	addi	fp,sp,20
 10187f8:	e13ffc15 	stw	r4,-16(fp)
 10187fc:	e17ffd15 	stw	r5,-12(fp)
 1018800:	e1bffe15 	stw	r6,-8(fp)
 1018804:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 1018808:	e13ffd17 	ldw	r4,-12(fp)
 101880c:	e17ffe17 	ldw	r5,-8(fp)
 1018810:	e1bfff17 	ldw	r6,-4(fp)
 1018814:	1018c100 	call	1018c10 <open>
 1018818:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 101881c:	e0bffb17 	ldw	r2,-20(fp)
 1018820:	1004803a 	cmplt	r2,r2,zero
 1018824:	10001f1e 	bne	r2,zero,10188a4 <alt_open_fd+0xcc>
  {
    fd->dev      = alt_fd_list[old].dev;
 1018828:	e13ffb17 	ldw	r4,-20(fp)
 101882c:	040040b4 	movhi	r16,258
 1018830:	841ad904 	addi	r16,r16,27492
 1018834:	01400304 	movi	r5,12
 1018838:	10021e00 	call	10021e0 <__mulsi3>
 101883c:	1405883a 	add	r2,r2,r16
 1018840:	10c00017 	ldw	r3,0(r2)
 1018844:	e0bffc17 	ldw	r2,-16(fp)
 1018848:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 101884c:	e13ffb17 	ldw	r4,-20(fp)
 1018850:	040040b4 	movhi	r16,258
 1018854:	841ad904 	addi	r16,r16,27492
 1018858:	01400304 	movi	r5,12
 101885c:	10021e00 	call	10021e0 <__mulsi3>
 1018860:	1405883a 	add	r2,r2,r16
 1018864:	10800104 	addi	r2,r2,4
 1018868:	10c00017 	ldw	r3,0(r2)
 101886c:	e0bffc17 	ldw	r2,-16(fp)
 1018870:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 1018874:	e13ffb17 	ldw	r4,-20(fp)
 1018878:	040040b4 	movhi	r16,258
 101887c:	841ad904 	addi	r16,r16,27492
 1018880:	01400304 	movi	r5,12
 1018884:	10021e00 	call	10021e0 <__mulsi3>
 1018888:	1405883a 	add	r2,r2,r16
 101888c:	10800204 	addi	r2,r2,8
 1018890:	10c00017 	ldw	r3,0(r2)
 1018894:	e0bffc17 	ldw	r2,-16(fp)
 1018898:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 101889c:	e13ffb17 	ldw	r4,-20(fp)
 10188a0:	100c4080 	call	100c408 <alt_release_fd>
  }
} 
 10188a4:	e037883a 	mov	sp,fp
 10188a8:	dfc00217 	ldw	ra,8(sp)
 10188ac:	df000117 	ldw	fp,4(sp)
 10188b0:	dc000017 	ldw	r16,0(sp)
 10188b4:	dec00304 	addi	sp,sp,12
 10188b8:	f800283a 	ret

010188bc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 10188bc:	f811883a 	mov	r8,ra
 10188c0:	100c1d00 	call	100c1d0 <_mcount>
 10188c4:	403f883a 	mov	ra,r8
 10188c8:	defffb04 	addi	sp,sp,-20
 10188cc:	dfc00415 	stw	ra,16(sp)
 10188d0:	df000315 	stw	fp,12(sp)
 10188d4:	df000304 	addi	fp,sp,12
 10188d8:	e13ffd15 	stw	r4,-12(fp)
 10188dc:	e17ffe15 	stw	r5,-8(fp)
 10188e0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 10188e4:	010040b4 	movhi	r4,258
 10188e8:	211adc04 	addi	r4,r4,27504
 10188ec:	e17ffd17 	ldw	r5,-12(fp)
 10188f0:	01800044 	movi	r6,1
 10188f4:	01c07fc4 	movi	r7,511
 10188f8:	10187d80 	call	10187d8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 10188fc:	010040b4 	movhi	r4,258
 1018900:	211ad904 	addi	r4,r4,27492
 1018904:	e17ffe17 	ldw	r5,-8(fp)
 1018908:	000d883a 	mov	r6,zero
 101890c:	01c07fc4 	movi	r7,511
 1018910:	10187d80 	call	10187d8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 1018914:	010040b4 	movhi	r4,258
 1018918:	211adf04 	addi	r4,r4,27516
 101891c:	e17fff17 	ldw	r5,-4(fp)
 1018920:	01800044 	movi	r6,1
 1018924:	01c07fc4 	movi	r7,511
 1018928:	10187d80 	call	10187d8 <alt_open_fd>
}  
 101892c:	e037883a 	mov	sp,fp
 1018930:	dfc00117 	ldw	ra,4(sp)
 1018934:	df000017 	ldw	fp,0(sp)
 1018938:	dec00204 	addi	sp,sp,8
 101893c:	f800283a 	ret

01018940 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 1018940:	f811883a 	mov	r8,ra
 1018944:	100c1d00 	call	100c1d0 <_mcount>
 1018948:	403f883a 	mov	ra,r8
 101894c:	deffef04 	addi	sp,sp,-68
 1018950:	df001015 	stw	fp,64(sp)
 1018954:	df001004 	addi	fp,sp,64
 1018958:	e13ffc15 	stw	r4,-16(fp)
 101895c:	e17ffd15 	stw	r5,-12(fp)
 1018960:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
 1018964:	00bffa84 	movi	r2,-22
 1018968:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 101896c:	e0bffc17 	ldw	r2,-16(fp)
 1018970:	10800828 	cmpgeui	r2,r2,32
 1018974:	1000601e 	bne	r2,zero,1018af8 <alt_irq_register+0x1b8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1018978:	0005303a 	rdctl	r2,status
 101897c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1018980:	e0fff917 	ldw	r3,-28(fp)
 1018984:	00bfff84 	movi	r2,-2
 1018988:	1884703a 	and	r2,r3,r2
 101898c:	1001703a 	wrctl	status,r2
  
  return context;
 1018990:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 1018994:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
 1018998:	e0bffc17 	ldw	r2,-16(fp)
 101899c:	00c04134 	movhi	r3,260
 10189a0:	18dec704 	addi	r3,r3,31516
 10189a4:	100490fa 	slli	r2,r2,3
 10189a8:	10c7883a 	add	r3,r2,r3
 10189ac:	e0bffe17 	ldw	r2,-8(fp)
 10189b0:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
 10189b4:	e0bffc17 	ldw	r2,-16(fp)
 10189b8:	00c04134 	movhi	r3,260
 10189bc:	18dec704 	addi	r3,r3,31516
 10189c0:	100490fa 	slli	r2,r2,3
 10189c4:	10c5883a 	add	r2,r2,r3
 10189c8:	10c00104 	addi	r3,r2,4
 10189cc:	e0bffd17 	ldw	r2,-12(fp)
 10189d0:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 10189d4:	e0bffe17 	ldw	r2,-8(fp)
 10189d8:	1005003a 	cmpeq	r2,r2,zero
 10189dc:	1000201e 	bne	r2,zero,1018a60 <alt_irq_register+0x120>
 10189e0:	e0bffc17 	ldw	r2,-16(fp)
 10189e4:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10189e8:	0005303a 	rdctl	r2,status
 10189ec:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10189f0:	e0fff617 	ldw	r3,-40(fp)
 10189f4:	00bfff84 	movi	r2,-2
 10189f8:	1884703a 	and	r2,r3,r2
 10189fc:	1001703a 	wrctl	status,r2
  
  return context;
 1018a00:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1018a04:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 1018a08:	e0fff717 	ldw	r3,-36(fp)
 1018a0c:	00800044 	movi	r2,1
 1018a10:	10c4983a 	sll	r2,r2,r3
 1018a14:	1007883a 	mov	r3,r2
 1018a18:	008040f4 	movhi	r2,259
 1018a1c:	10971204 	addi	r2,r2,23624
 1018a20:	10800017 	ldw	r2,0(r2)
 1018a24:	1886b03a 	or	r3,r3,r2
 1018a28:	008040f4 	movhi	r2,259
 1018a2c:	10971204 	addi	r2,r2,23624
 1018a30:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1018a34:	008040f4 	movhi	r2,259
 1018a38:	10971204 	addi	r2,r2,23624
 1018a3c:	10800017 	ldw	r2,0(r2)
 1018a40:	100170fa 	wrctl	ienable,r2
 1018a44:	e0bff817 	ldw	r2,-32(fp)
 1018a48:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1018a4c:	e0bff517 	ldw	r2,-44(fp)
 1018a50:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1018a54:	0005883a 	mov	r2,zero
 1018a58:	e0bfff15 	stw	r2,-4(fp)
 1018a5c:	00002006 	br	1018ae0 <alt_irq_register+0x1a0>
 1018a60:	e0bffc17 	ldw	r2,-16(fp)
 1018a64:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1018a68:	0005303a 	rdctl	r2,status
 1018a6c:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1018a70:	e0fff217 	ldw	r3,-56(fp)
 1018a74:	00bfff84 	movi	r2,-2
 1018a78:	1884703a 	and	r2,r3,r2
 1018a7c:	1001703a 	wrctl	status,r2
  
  return context;
 1018a80:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1018a84:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
 1018a88:	e0fff317 	ldw	r3,-52(fp)
 1018a8c:	00800044 	movi	r2,1
 1018a90:	10c4983a 	sll	r2,r2,r3
 1018a94:	0084303a 	nor	r2,zero,r2
 1018a98:	1007883a 	mov	r3,r2
 1018a9c:	008040f4 	movhi	r2,259
 1018aa0:	10971204 	addi	r2,r2,23624
 1018aa4:	10800017 	ldw	r2,0(r2)
 1018aa8:	1886703a 	and	r3,r3,r2
 1018aac:	008040f4 	movhi	r2,259
 1018ab0:	10971204 	addi	r2,r2,23624
 1018ab4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1018ab8:	008040f4 	movhi	r2,259
 1018abc:	10971204 	addi	r2,r2,23624
 1018ac0:	10800017 	ldw	r2,0(r2)
 1018ac4:	100170fa 	wrctl	ienable,r2
 1018ac8:	e0bff417 	ldw	r2,-48(fp)
 1018acc:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1018ad0:	e0bff117 	ldw	r2,-60(fp)
 1018ad4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1018ad8:	0005883a 	mov	r2,zero
 1018adc:	e0bfff15 	stw	r2,-4(fp)
 1018ae0:	e0bfff17 	ldw	r2,-4(fp)
 1018ae4:	e0bffb15 	stw	r2,-20(fp)
 1018ae8:	e0bffa17 	ldw	r2,-24(fp)
 1018aec:	e0bff015 	stw	r2,-64(fp)
 1018af0:	e0bff017 	ldw	r2,-64(fp)
 1018af4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 1018af8:	e0bffb17 	ldw	r2,-20(fp)
}
 1018afc:	e037883a 	mov	sp,fp
 1018b00:	df000017 	ldw	fp,0(sp)
 1018b04:	dec00104 	addi	sp,sp,4
 1018b08:	f800283a 	ret

01018b0c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 1018b0c:	f811883a 	mov	r8,ra
 1018b10:	100c1d00 	call	100c1d0 <_mcount>
 1018b14:	403f883a 	mov	ra,r8
 1018b18:	defffa04 	addi	sp,sp,-24
 1018b1c:	dfc00515 	stw	ra,20(sp)
 1018b20:	df000415 	stw	fp,16(sp)
 1018b24:	dc000315 	stw	r16,12(sp)
 1018b28:	df000304 	addi	fp,sp,12
 1018b2c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 1018b30:	e0bffe17 	ldw	r2,-8(fp)
 1018b34:	10800217 	ldw	r2,8(r2)
 1018b38:	10d00034 	orhi	r3,r2,16384
 1018b3c:	e0bffe17 	ldw	r2,-8(fp)
 1018b40:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 1018b44:	e03ffd15 	stw	zero,-12(fp)
 1018b48:	00002306 	br	1018bd8 <alt_file_locked+0xcc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 1018b4c:	e13ffd17 	ldw	r4,-12(fp)
 1018b50:	040040b4 	movhi	r16,258
 1018b54:	841ad904 	addi	r16,r16,27492
 1018b58:	01400304 	movi	r5,12
 1018b5c:	10021e00 	call	10021e0 <__mulsi3>
 1018b60:	1405883a 	add	r2,r2,r16
 1018b64:	10c00017 	ldw	r3,0(r2)
 1018b68:	e0bffe17 	ldw	r2,-8(fp)
 1018b6c:	10800017 	ldw	r2,0(r2)
 1018b70:	1880161e 	bne	r3,r2,1018bcc <alt_file_locked+0xc0>
 1018b74:	e13ffd17 	ldw	r4,-12(fp)
 1018b78:	040040b4 	movhi	r16,258
 1018b7c:	841ad904 	addi	r16,r16,27492
 1018b80:	01400304 	movi	r5,12
 1018b84:	10021e00 	call	10021e0 <__mulsi3>
 1018b88:	1405883a 	add	r2,r2,r16
 1018b8c:	10800204 	addi	r2,r2,8
 1018b90:	10800017 	ldw	r2,0(r2)
 1018b94:	1004403a 	cmpge	r2,r2,zero
 1018b98:	10000c1e 	bne	r2,zero,1018bcc <alt_file_locked+0xc0>
 1018b9c:	e13ffd17 	ldw	r4,-12(fp)
 1018ba0:	01400304 	movi	r5,12
 1018ba4:	10021e00 	call	10021e0 <__mulsi3>
 1018ba8:	1007883a 	mov	r3,r2
 1018bac:	008040b4 	movhi	r2,258
 1018bb0:	109ad904 	addi	r2,r2,27492
 1018bb4:	1887883a 	add	r3,r3,r2
 1018bb8:	e0bffe17 	ldw	r2,-8(fp)
 1018bbc:	18800326 	beq	r3,r2,1018bcc <alt_file_locked+0xc0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 1018bc0:	00bffcc4 	movi	r2,-13
 1018bc4:	e0bfff15 	stw	r2,-4(fp)
 1018bc8:	00000a06 	br	1018bf4 <alt_file_locked+0xe8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 1018bcc:	e0bffd17 	ldw	r2,-12(fp)
 1018bd0:	10800044 	addi	r2,r2,1
 1018bd4:	e0bffd15 	stw	r2,-12(fp)
 1018bd8:	008040b4 	movhi	r2,258
 1018bdc:	109fa204 	addi	r2,r2,32392
 1018be0:	10800017 	ldw	r2,0(r2)
 1018be4:	1007883a 	mov	r3,r2
 1018be8:	e0bffd17 	ldw	r2,-12(fp)
 1018bec:	18bfd72e 	bgeu	r3,r2,1018b4c <alt_file_locked+0x40>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 1018bf0:	e03fff15 	stw	zero,-4(fp)
 1018bf4:	e0bfff17 	ldw	r2,-4(fp)
}
 1018bf8:	e037883a 	mov	sp,fp
 1018bfc:	dfc00217 	ldw	ra,8(sp)
 1018c00:	df000117 	ldw	fp,4(sp)
 1018c04:	dc000017 	ldw	r16,0(sp)
 1018c08:	dec00304 	addi	sp,sp,12
 1018c0c:	f800283a 	ret

01018c10 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 1018c10:	f811883a 	mov	r8,ra
 1018c14:	100c1d00 	call	100c1d0 <_mcount>
 1018c18:	403f883a 	mov	ra,r8
 1018c1c:	defff404 	addi	sp,sp,-48
 1018c20:	dfc00b15 	stw	ra,44(sp)
 1018c24:	df000a15 	stw	fp,40(sp)
 1018c28:	df000a04 	addi	fp,sp,40
 1018c2c:	e13ffb15 	stw	r4,-20(fp)
 1018c30:	e17ffc15 	stw	r5,-16(fp)
 1018c34:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 1018c38:	00bfffc4 	movi	r2,-1
 1018c3c:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 1018c40:	00bffb44 	movi	r2,-19
 1018c44:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 1018c48:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 1018c4c:	e13ffb17 	ldw	r4,-20(fp)
 1018c50:	014040b4 	movhi	r5,258
 1018c54:	295fa004 	addi	r5,r5,32384
 1018c58:	10184280 	call	1018428 <alt_find_dev>
 1018c5c:	e0bffa15 	stw	r2,-24(fp)
 1018c60:	e0bffa17 	ldw	r2,-24(fp)
 1018c64:	1004c03a 	cmpne	r2,r2,zero
 1018c68:	1000051e 	bne	r2,zero,1018c80 <open+0x70>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 1018c6c:	e13ffb17 	ldw	r4,-20(fp)
 1018c70:	10193f40 	call	10193f4 <alt_find_file>
 1018c74:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 1018c78:	00800044 	movi	r2,1
 1018c7c:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 1018c80:	e0bffa17 	ldw	r2,-24(fp)
 1018c84:	1005003a 	cmpeq	r2,r2,zero
 1018c88:	1000311e 	bne	r2,zero,1018d50 <open+0x140>
  {
    if ((index = alt_get_fd (dev)) < 0)
 1018c8c:	e13ffa17 	ldw	r4,-24(fp)
 1018c90:	10195200 	call	1019520 <alt_get_fd>
 1018c94:	e0bff815 	stw	r2,-32(fp)
 1018c98:	e0bff817 	ldw	r2,-32(fp)
 1018c9c:	1004403a 	cmpge	r2,r2,zero
 1018ca0:	1000031e 	bne	r2,zero,1018cb0 <open+0xa0>
    {
      status = index;
 1018ca4:	e0bff817 	ldw	r2,-32(fp)
 1018ca8:	e0bff715 	stw	r2,-36(fp)
 1018cac:	00002a06 	br	1018d58 <open+0x148>
    }
    else
    {
      fd = &alt_fd_list[index];
 1018cb0:	e13ff817 	ldw	r4,-32(fp)
 1018cb4:	01400304 	movi	r5,12
 1018cb8:	10021e00 	call	10021e0 <__mulsi3>
 1018cbc:	1007883a 	mov	r3,r2
 1018cc0:	008040b4 	movhi	r2,258
 1018cc4:	109ad904 	addi	r2,r2,27492
 1018cc8:	1885883a 	add	r2,r3,r2
 1018ccc:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 1018cd0:	e0fffc17 	ldw	r3,-16(fp)
 1018cd4:	00900034 	movhi	r2,16384
 1018cd8:	10bfffc4 	addi	r2,r2,-1
 1018cdc:	1886703a 	and	r3,r3,r2
 1018ce0:	e0bff917 	ldw	r2,-28(fp)
 1018ce4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 1018ce8:	e0bff617 	ldw	r2,-40(fp)
 1018cec:	1004c03a 	cmpne	r2,r2,zero
 1018cf0:	1000061e 	bne	r2,zero,1018d0c <open+0xfc>
 1018cf4:	e13ff917 	ldw	r4,-28(fp)
 1018cf8:	1018b0c0 	call	1018b0c <alt_file_locked>
 1018cfc:	e0bff715 	stw	r2,-36(fp)
 1018d00:	e0bff717 	ldw	r2,-36(fp)
 1018d04:	1004803a 	cmplt	r2,r2,zero
 1018d08:	1000131e 	bne	r2,zero,1018d58 <open+0x148>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 1018d0c:	e0bffa17 	ldw	r2,-24(fp)
 1018d10:	10800317 	ldw	r2,12(r2)
 1018d14:	1005003a 	cmpeq	r2,r2,zero
 1018d18:	1000091e 	bne	r2,zero,1018d40 <open+0x130>
 1018d1c:	e0bffa17 	ldw	r2,-24(fp)
 1018d20:	10800317 	ldw	r2,12(r2)
 1018d24:	e13ff917 	ldw	r4,-28(fp)
 1018d28:	e17ffb17 	ldw	r5,-20(fp)
 1018d2c:	e1bffc17 	ldw	r6,-16(fp)
 1018d30:	e1fffd17 	ldw	r7,-12(fp)
 1018d34:	103ee83a 	callr	r2
 1018d38:	e0bfff15 	stw	r2,-4(fp)
 1018d3c:	00000106 	br	1018d44 <open+0x134>
 1018d40:	e03fff15 	stw	zero,-4(fp)
 1018d44:	e0bfff17 	ldw	r2,-4(fp)
 1018d48:	e0bff715 	stw	r2,-36(fp)
 1018d4c:	00000206 	br	1018d58 <open+0x148>
      }
    }
  }
  else
  {
    status = -ENODEV;
 1018d50:	00bffb44 	movi	r2,-19
 1018d54:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 1018d58:	e0bff717 	ldw	r2,-36(fp)
 1018d5c:	1004403a 	cmpge	r2,r2,zero
 1018d60:	1000091e 	bne	r2,zero,1018d88 <open+0x178>
  {
    alt_release_fd (index);  
 1018d64:	e13ff817 	ldw	r4,-32(fp)
 1018d68:	100c4080 	call	100c408 <alt_release_fd>
    ALT_ERRNO = -status;
 1018d6c:	1018da80 	call	1018da8 <alt_get_errno>
 1018d70:	e0fff717 	ldw	r3,-36(fp)
 1018d74:	00c7c83a 	sub	r3,zero,r3
 1018d78:	10c00015 	stw	r3,0(r2)
    return -1;
 1018d7c:	00bfffc4 	movi	r2,-1
 1018d80:	e0bffe15 	stw	r2,-8(fp)
 1018d84:	00000206 	br	1018d90 <open+0x180>
  }
  
  /* return the reference upon success */

  return index;
 1018d88:	e0bff817 	ldw	r2,-32(fp)
 1018d8c:	e0bffe15 	stw	r2,-8(fp)
 1018d90:	e0bffe17 	ldw	r2,-8(fp)
}
 1018d94:	e037883a 	mov	sp,fp
 1018d98:	dfc00117 	ldw	ra,4(sp)
 1018d9c:	df000017 	ldw	fp,0(sp)
 1018da0:	dec00204 	addi	sp,sp,8
 1018da4:	f800283a 	ret

01018da8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1018da8:	f811883a 	mov	r8,ra
 1018dac:	100c1d00 	call	100c1d0 <_mcount>
 1018db0:	403f883a 	mov	ra,r8
 1018db4:	defffd04 	addi	sp,sp,-12
 1018db8:	dfc00215 	stw	ra,8(sp)
 1018dbc:	df000115 	stw	fp,4(sp)
 1018dc0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1018dc4:	008040b4 	movhi	r2,258
 1018dc8:	109fa304 	addi	r2,r2,32396
 1018dcc:	10800017 	ldw	r2,0(r2)
 1018dd0:	1005003a 	cmpeq	r2,r2,zero
 1018dd4:	1000061e 	bne	r2,zero,1018df0 <alt_get_errno+0x48>
 1018dd8:	008040b4 	movhi	r2,258
 1018ddc:	109fa304 	addi	r2,r2,32396
 1018de0:	10800017 	ldw	r2,0(r2)
 1018de4:	103ee83a 	callr	r2
 1018de8:	e0bfff15 	stw	r2,-4(fp)
 1018dec:	00000306 	br	1018dfc <alt_get_errno+0x54>
 1018df0:	008040f4 	movhi	r2,259
 1018df4:	1096ea04 	addi	r2,r2,23464
 1018df8:	e0bfff15 	stw	r2,-4(fp)
 1018dfc:	e0bfff17 	ldw	r2,-4(fp)
}
 1018e00:	e037883a 	mov	sp,fp
 1018e04:	dfc00117 	ldw	ra,4(sp)
 1018e08:	df000017 	ldw	fp,0(sp)
 1018e0c:	dec00204 	addi	sp,sp,8
 1018e10:	f800283a 	ret

01018e14 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 1018e14:	f811883a 	mov	r8,ra
 1018e18:	100c1d00 	call	100c1d0 <_mcount>
 1018e1c:	403f883a 	mov	ra,r8
 1018e20:	deffff04 	addi	sp,sp,-4
 1018e24:	df000015 	stw	fp,0(sp)
 1018e28:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 1018e2c:	000170fa 	wrctl	ienable,zero
}
 1018e30:	e037883a 	mov	sp,fp
 1018e34:	df000017 	ldw	fp,0(sp)
 1018e38:	dec00104 	addi	sp,sp,4
 1018e3c:	f800283a 	ret

01018e40 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
 1018e40:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
 1018e44:	d0e00117 	ldw	r3,-32764(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
 1018e48:	d1177117 	ldw	r4,24004(gp)

      stw ra,  0(sp)
 1018e4c:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
 1018e50:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
 1018e54:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
 1018e58:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
 1018e5c:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
 1018e60:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
 1018e64:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
 1018e68:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
 1018e6c:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
 1018e70:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
 1018e74:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
 1018e78:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 1018e7c:	10192840 	call	1019284 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
 1018e80:	d1176c17 	ldw	r4,23984(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
 1018e84:	d1576387 	ldb	r5,23950(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
 1018e88:	d1177115 	stw	r4,24004(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
 1018e8c:	d15763c5 	stb	r5,23951(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
 1018e90:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
 1018e94:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
 1018e98:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
 1018e9c:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
 1018ea0:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
 1018ea4:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
 1018ea8:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
 1018eac:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
 1018eb0:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
 1018eb4:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
 1018eb8:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
 1018ebc:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
 1018ec0:	d0e00115 	stw	r3,-32764(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
 1018ec4:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
 1018ec8:	f800283a 	ret

01018ecc <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
 1018ecc:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
 1018ed0:	047fff84 	movi	r17,-2
      and   r18, r18, r17
 1018ed4:	9464703a 	and	r18,r18,r17
      wrctl status, r18
 1018ed8:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 1018edc:	10192840 	call	1019284 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
 1018ee0:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
 1018ee4:	d4976105 	stb	r18,23940(gp)

      /*
       * start execution of the new task.
       */

      br 9b
 1018ee8:	003fe506 	br	1018e80 <OSCtxSw+0x40>

01018eec <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
 1018eec:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
 1018ef0:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
 1018ef4:	10800054 	ori	r2,r2,1
      wrctl status, r2
 1018ef8:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
 1018efc:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
 1018f00:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
 1018f04:	dec00204 	addi	sp,sp,8

      callr r2
 1018f08:	103ee83a 	callr	r2

      nop
 1018f0c:	0001883a 	nop

01018f10 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
 1018f10:	f811883a 	mov	r8,ra
 1018f14:	100c1d00 	call	100c1d0 <_mcount>
 1018f18:	403f883a 	mov	ra,r8
 1018f1c:	defff704 	addi	sp,sp,-36
 1018f20:	dfc00815 	stw	ra,32(sp)
 1018f24:	df000715 	stw	fp,28(sp)
 1018f28:	df000704 	addi	fp,sp,28
 1018f2c:	e13ffc15 	stw	r4,-16(fp)
 1018f30:	e17ffd15 	stw	r5,-12(fp)
 1018f34:	e1bffe15 	stw	r6,-8(fp)
 1018f38:	e1ffff0d 	sth	r7,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
 1018f3c:	e0bffe17 	ldw	r2,-8(fp)
 1018f40:	1007883a 	mov	r3,r2
 1018f44:	00bfff04 	movi	r2,-4
 1018f48:	1884703a 	and	r2,r3,r2
 1018f4c:	10bf0004 	addi	r2,r2,-1024
 1018f50:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
 1018f54:	e0bff917 	ldw	r2,-28(fp)
 1018f58:	10000015 	stw	zero,0(r2)
 1018f5c:	e0bff917 	ldw	r2,-28(fp)
 1018f60:	10c0bb04 	addi	r3,r2,748
 1018f64:	e0bff917 	ldw	r2,-28(fp)
 1018f68:	10c00115 	stw	r3,4(r2)
 1018f6c:	e0bff917 	ldw	r2,-28(fp)
 1018f70:	1080bb04 	addi	r2,r2,748
 1018f74:	10c01704 	addi	r3,r2,92
 1018f78:	e0bff917 	ldw	r2,-28(fp)
 1018f7c:	10c00215 	stw	r3,8(r2)
 1018f80:	e0bff917 	ldw	r2,-28(fp)
 1018f84:	1080bb04 	addi	r2,r2,748
 1018f88:	10c02e04 	addi	r3,r2,184
 1018f8c:	e0bff917 	ldw	r2,-28(fp)
 1018f90:	10c00315 	stw	r3,12(r2)
 1018f94:	e0bff917 	ldw	r2,-28(fp)
 1018f98:	10000415 	stw	zero,16(r2)
 1018f9c:	e0bff917 	ldw	r2,-28(fp)
 1018fa0:	10800504 	addi	r2,r2,20
 1018fa4:	1009883a 	mov	r4,r2
 1018fa8:	01800644 	movi	r6,25
 1018fac:	000b883a 	mov	r5,zero
 1018fb0:	1007ed80 	call	1007ed8 <memset>
 1018fb4:	e0bff917 	ldw	r2,-28(fp)
 1018fb8:	10000c15 	stw	zero,48(r2)
 1018fbc:	e0fff917 	ldw	r3,-28(fp)
 1018fc0:	008040b4 	movhi	r2,258
 1018fc4:	10a8be04 	addi	r2,r2,-23816
 1018fc8:	18800d15 	stw	r2,52(r3)
 1018fcc:	e0bff917 	ldw	r2,-28(fp)
 1018fd0:	10000e15 	stw	zero,56(r2)
 1018fd4:	e0bff917 	ldw	r2,-28(fp)
 1018fd8:	10000f15 	stw	zero,60(r2)
 1018fdc:	e0bff917 	ldw	r2,-28(fp)
 1018fe0:	10001015 	stw	zero,64(r2)
 1018fe4:	e0bff917 	ldw	r2,-28(fp)
 1018fe8:	10001115 	stw	zero,68(r2)
 1018fec:	e0bff917 	ldw	r2,-28(fp)
 1018ff0:	10001215 	stw	zero,72(r2)
 1018ff4:	e0bff917 	ldw	r2,-28(fp)
 1018ff8:	10001315 	stw	zero,76(r2)
 1018ffc:	e0bff917 	ldw	r2,-28(fp)
 1019000:	10001415 	stw	zero,80(r2)
 1019004:	e0bff917 	ldw	r2,-28(fp)
 1019008:	10001515 	stw	zero,84(r2)
 101900c:	e0bff917 	ldw	r2,-28(fp)
 1019010:	10001615 	stw	zero,88(r2)
 1019014:	e0bff917 	ldw	r2,-28(fp)
 1019018:	10001715 	stw	zero,92(r2)
 101901c:	e0bff917 	ldw	r2,-28(fp)
 1019020:	10001805 	stb	zero,96(r2)
 1019024:	e0bff917 	ldw	r2,-28(fp)
 1019028:	10801f04 	addi	r2,r2,124
 101902c:	10000015 	stw	zero,0(r2)
 1019030:	10000115 	stw	zero,4(r2)
 1019034:	10000215 	stw	zero,8(r2)
 1019038:	10000315 	stw	zero,12(r2)
 101903c:	10000415 	stw	zero,16(r2)
 1019040:	10000515 	stw	zero,20(r2)
 1019044:	10000615 	stw	zero,24(r2)
 1019048:	10000715 	stw	zero,28(r2)
 101904c:	10000815 	stw	zero,32(r2)
 1019050:	e0bff917 	ldw	r2,-28(fp)
 1019054:	10002815 	stw	zero,160(r2)
 1019058:	e0fff917 	ldw	r3,-28(fp)
 101905c:	00800044 	movi	r2,1
 1019060:	18802915 	stw	r2,164(r3)
 1019064:	18002a15 	stw	zero,168(r3)
 1019068:	e0fff917 	ldw	r3,-28(fp)
 101906c:	008cc384 	movi	r2,13070
 1019070:	18802b0d 	sth	r2,172(r3)
 1019074:	e0fff917 	ldw	r3,-28(fp)
 1019078:	00aaf344 	movi	r2,-21555
 101907c:	18802b8d 	sth	r2,174(r3)
 1019080:	e0fff917 	ldw	r3,-28(fp)
 1019084:	00848d04 	movi	r2,4660
 1019088:	18802c0d 	sth	r2,176(r3)
 101908c:	e0fff917 	ldw	r3,-28(fp)
 1019090:	00b99b44 	movi	r2,-6547
 1019094:	18802c8d 	sth	r2,178(r3)
 1019098:	e0fff917 	ldw	r3,-28(fp)
 101909c:	00b7bb04 	movi	r2,-8468
 10190a0:	18802d0d 	sth	r2,180(r3)
 10190a4:	e0fff917 	ldw	r3,-28(fp)
 10190a8:	00800144 	movi	r2,5
 10190ac:	18802d8d 	sth	r2,182(r3)
 10190b0:	e0fff917 	ldw	r3,-28(fp)
 10190b4:	008002c4 	movi	r2,11
 10190b8:	18802e0d 	sth	r2,184(r3)
 10190bc:	e0bff917 	ldw	r2,-28(fp)
 10190c0:	10002f15 	stw	zero,188(r2)
 10190c4:	e0bff917 	ldw	r2,-28(fp)
 10190c8:	10003015 	stw	zero,192(r2)
 10190cc:	e0bff917 	ldw	r2,-28(fp)
 10190d0:	10003115 	stw	zero,196(r2)
 10190d4:	e0bff917 	ldw	r2,-28(fp)
 10190d8:	10003215 	stw	zero,200(r2)
 10190dc:	e0bff917 	ldw	r2,-28(fp)
 10190e0:	10003315 	stw	zero,204(r2)
 10190e4:	e0bff917 	ldw	r2,-28(fp)
 10190e8:	10003415 	stw	zero,208(r2)
 10190ec:	e0bff917 	ldw	r2,-28(fp)
 10190f0:	10003e15 	stw	zero,248(r2)
 10190f4:	e0bff917 	ldw	r2,-28(fp)
 10190f8:	10003f15 	stw	zero,252(r2)
 10190fc:	e0bff917 	ldw	r2,-28(fp)
 1019100:	10004015 	stw	zero,256(r2)
 1019104:	e0bff917 	ldw	r2,-28(fp)
 1019108:	10004115 	stw	zero,260(r2)
 101910c:	e0bff917 	ldw	r2,-28(fp)
 1019110:	10004215 	stw	zero,264(r2)
 1019114:	e0bff917 	ldw	r2,-28(fp)
 1019118:	10004315 	stw	zero,268(r2)
 101911c:	e0bff917 	ldw	r2,-28(fp)
 1019120:	10004415 	stw	zero,272(r2)
 1019124:	e0bff917 	ldw	r2,-28(fp)
 1019128:	10004515 	stw	zero,276(r2)
 101912c:	e0bff917 	ldw	r2,-28(fp)
 1019130:	10004615 	stw	zero,280(r2)
 1019134:	e0bff917 	ldw	r2,-28(fp)
 1019138:	10004715 	stw	zero,284(r2)
 101913c:	e0bff917 	ldw	r2,-28(fp)
 1019140:	10003505 	stb	zero,212(r2)
 1019144:	e0bff917 	ldw	r2,-28(fp)
 1019148:	10003705 	stb	zero,220(r2)
 101914c:	e0bff917 	ldw	r2,-28(fp)
 1019150:	10003d15 	stw	zero,244(r2)
 1019154:	e0bff917 	ldw	r2,-28(fp)
 1019158:	10005215 	stw	zero,328(r2)
 101915c:	e0bff917 	ldw	r2,-28(fp)
 1019160:	10005315 	stw	zero,332(r2)
 1019164:	e0bff917 	ldw	r2,-28(fp)
 1019168:	10005415 	stw	zero,336(r2)
 101916c:	e0bff917 	ldw	r2,-28(fp)
 1019170:	10005515 	stw	zero,340(r2)
 1019174:	e0bff917 	ldw	r2,-28(fp)
 1019178:	1000b515 	stw	zero,724(r2)
 101917c:	e0bff917 	ldw	r2,-28(fp)
 1019180:	10007515 	stw	zero,468(r2)
 1019184:	e0bff917 	ldw	r2,-28(fp)
 1019188:	1000b715 	stw	zero,732(r2)
 101918c:	e0bff917 	ldw	r2,-28(fp)
 1019190:	1000b815 	stw	zero,736(r2)
 1019194:	e0bff917 	ldw	r2,-28(fp)
 1019198:	1000b915 	stw	zero,740(r2)
 101919c:	e0bff917 	ldw	r2,-28(fp)
 10191a0:	1000ba15 	stw	zero,744(r2)
 10191a4:	e0bff917 	ldw	r2,-28(fp)
 10191a8:	1080bb04 	addi	r2,r2,748
 10191ac:	1009883a 	mov	r4,r2
 10191b0:	01804504 	movi	r6,276
 10191b4:	000b883a 	mov	r5,zero
 10191b8:	1007ed80 	call	1007ed8 <memset>
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
 10191bc:	e0bff917 	ldw	r2,-28(fp)
 10191c0:	e0bffb15 	stw	r2,-20(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
 10191c4:	e0bffb17 	ldw	r2,-20(fp)
 10191c8:	10bff304 	addi	r2,r2,-52
 10191cc:	e0bffa15 	stw	r2,-24(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
 10191d0:	e0bffa17 	ldw	r2,-24(fp)
 10191d4:	10c00c04 	addi	r3,r2,48
 10191d8:	e0bffc17 	ldw	r2,-16(fp)
 10191dc:	18800015 	stw	r2,0(r3)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
 10191e0:	e0bffa17 	ldw	r2,-24(fp)
 10191e4:	10c00b04 	addi	r3,r2,44
 10191e8:	e0bffd17 	ldw	r2,-12(fp)
 10191ec:	18800015 	stw	r2,0(r3)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
 10191f0:	e0bffa17 	ldw	r2,-24(fp)
 10191f4:	10c00a04 	addi	r3,r2,40
 10191f8:	e0bff917 	ldw	r2,-28(fp)
 10191fc:	18800015 	stw	r2,0(r3)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
 1019200:	008040b4 	movhi	r2,258
 1019204:	10a3bb04 	addi	r2,r2,-28948
 1019208:	10c00104 	addi	r3,r2,4
 101920c:	e0bffa17 	ldw	r2,-24(fp)
 1019210:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
 1019214:	e0bffa17 	ldw	r2,-24(fp)
}
 1019218:	e037883a 	mov	sp,fp
 101921c:	dfc00117 	ldw	ra,4(sp)
 1019220:	df000017 	ldw	fp,0(sp)
 1019224:	dec00204 	addi	sp,sp,8
 1019228:	f800283a 	ret

0101922c <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
 101922c:	f811883a 	mov	r8,ra
 1019230:	100c1d00 	call	100c1d0 <_mcount>
 1019234:	403f883a 	mov	ra,r8
 1019238:	defffe04 	addi	sp,sp,-8
 101923c:	df000115 	stw	fp,4(sp)
 1019240:	df000104 	addi	fp,sp,4
 1019244:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
 1019248:	e037883a 	mov	sp,fp
 101924c:	df000017 	ldw	fp,0(sp)
 1019250:	dec00104 	addi	sp,sp,4
 1019254:	f800283a 	ret

01019258 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
 1019258:	f811883a 	mov	r8,ra
 101925c:	100c1d00 	call	100c1d0 <_mcount>
 1019260:	403f883a 	mov	ra,r8
 1019264:	defffe04 	addi	sp,sp,-8
 1019268:	df000115 	stw	fp,4(sp)
 101926c:	df000104 	addi	fp,sp,4
 1019270:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
 1019274:	e037883a 	mov	sp,fp
 1019278:	df000017 	ldw	fp,0(sp)
 101927c:	dec00104 	addi	sp,sp,4
 1019280:	f800283a 	ret

01019284 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
 1019284:	f811883a 	mov	r8,ra
 1019288:	100c1d00 	call	100c1d0 <_mcount>
 101928c:	403f883a 	mov	ra,r8
 1019290:	deffff04 	addi	sp,sp,-4
 1019294:	df000015 	stw	fp,0(sp)
 1019298:	d839883a 	mov	fp,sp
}
 101929c:	e037883a 	mov	sp,fp
 10192a0:	df000017 	ldw	fp,0(sp)
 10192a4:	dec00104 	addi	sp,sp,4
 10192a8:	f800283a 	ret

010192ac <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
 10192ac:	f811883a 	mov	r8,ra
 10192b0:	100c1d00 	call	100c1d0 <_mcount>
 10192b4:	403f883a 	mov	ra,r8
 10192b8:	deffff04 	addi	sp,sp,-4
 10192bc:	df000015 	stw	fp,0(sp)
 10192c0:	d839883a 	mov	fp,sp
}
 10192c4:	e037883a 	mov	sp,fp
 10192c8:	df000017 	ldw	fp,0(sp)
 10192cc:	dec00104 	addi	sp,sp,4
 10192d0:	f800283a 	ret

010192d4 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
 10192d4:	f811883a 	mov	r8,ra
 10192d8:	100c1d00 	call	100c1d0 <_mcount>
 10192dc:	403f883a 	mov	ra,r8
 10192e0:	defffe04 	addi	sp,sp,-8
 10192e4:	dfc00115 	stw	ra,4(sp)
 10192e8:	df000015 	stw	fp,0(sp)
 10192ec:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr++;
 10192f0:	d0977c0b 	ldhu	r2,24048(gp)
 10192f4:	10800044 	addi	r2,r2,1
 10192f8:	d0977c0d 	sth	r2,24048(gp)
    if (OSTmrCtr >= (OS_TICKS_PER_SEC / OS_TMR_CFG_TICKS_PER_SEC)) {
 10192fc:	d0977c0b 	ldhu	r2,24048(gp)
 1019300:	113fffcc 	andi	r4,r2,65535
 1019304:	100b4fc0 	call	100b4fc <__floatsidf>
 1019308:	100b883a 	mov	r5,r2
 101930c:	180d883a 	mov	r6,r3
 1019310:	2809883a 	mov	r4,r5
 1019314:	300b883a 	mov	r5,r6
 1019318:	000d883a 	mov	r6,zero
 101931c:	01d01674 	movhi	r7,16473
 1019320:	100b3d40 	call	100b3d4 <__gedf2>
 1019324:	1004403a 	cmpge	r2,r2,zero
 1019328:	1000011e 	bne	r2,zero,1019330 <OSTimeTickHook+0x5c>
 101932c:	00000206 	br	1019338 <OSTimeTickHook+0x64>
        OSTmrCtr = 0;
 1019330:	d0177c0d 	sth	zero,24048(gp)
        OSTmrSignal();
 1019334:	1015fdc0 	call	1015fdc <OSTmrSignal>
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
 1019338:	e037883a 	mov	sp,fp
 101933c:	dfc00117 	ldw	ra,4(sp)
 1019340:	df000017 	ldw	fp,0(sp)
 1019344:	dec00204 	addi	sp,sp,8
 1019348:	f800283a 	ret

0101934c <OSInitHookBegin>:

void OSInitHookBegin(void)
{
 101934c:	f811883a 	mov	r8,ra
 1019350:	100c1d00 	call	100c1d0 <_mcount>
 1019354:	403f883a 	mov	ra,r8
 1019358:	deffff04 	addi	sp,sp,-4
 101935c:	df000015 	stw	fp,0(sp)
 1019360:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
 1019364:	d0177c0d 	sth	zero,24048(gp)
#endif
}
 1019368:	e037883a 	mov	sp,fp
 101936c:	df000017 	ldw	fp,0(sp)
 1019370:	dec00104 	addi	sp,sp,4
 1019374:	f800283a 	ret

01019378 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
 1019378:	f811883a 	mov	r8,ra
 101937c:	100c1d00 	call	100c1d0 <_mcount>
 1019380:	403f883a 	mov	ra,r8
 1019384:	deffff04 	addi	sp,sp,-4
 1019388:	df000015 	stw	fp,0(sp)
 101938c:	d839883a 	mov	fp,sp
}
 1019390:	e037883a 	mov	sp,fp
 1019394:	df000017 	ldw	fp,0(sp)
 1019398:	dec00104 	addi	sp,sp,4
 101939c:	f800283a 	ret

010193a0 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
 10193a0:	f811883a 	mov	r8,ra
 10193a4:	100c1d00 	call	100c1d0 <_mcount>
 10193a8:	403f883a 	mov	ra,r8
 10193ac:	deffff04 	addi	sp,sp,-4
 10193b0:	df000015 	stw	fp,0(sp)
 10193b4:	d839883a 	mov	fp,sp
}
 10193b8:	e037883a 	mov	sp,fp
 10193bc:	df000017 	ldw	fp,0(sp)
 10193c0:	dec00104 	addi	sp,sp,4
 10193c4:	f800283a 	ret

010193c8 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
 10193c8:	f811883a 	mov	r8,ra
 10193cc:	100c1d00 	call	100c1d0 <_mcount>
 10193d0:	403f883a 	mov	ra,r8
 10193d4:	defffe04 	addi	sp,sp,-8
 10193d8:	df000115 	stw	fp,4(sp)
 10193dc:	df000104 	addi	fp,sp,4
 10193e0:	e13fff15 	stw	r4,-4(fp)
}
 10193e4:	e037883a 	mov	sp,fp
 10193e8:	df000017 	ldw	fp,0(sp)
 10193ec:	dec00104 	addi	sp,sp,4
 10193f0:	f800283a 	ret

010193f4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 10193f4:	f811883a 	mov	r8,ra
 10193f8:	100c1d00 	call	100c1d0 <_mcount>
 10193fc:	403f883a 	mov	ra,r8
 1019400:	defffa04 	addi	sp,sp,-24
 1019404:	dfc00515 	stw	ra,20(sp)
 1019408:	df000415 	stw	fp,16(sp)
 101940c:	df000404 	addi	fp,sp,16
 1019410:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 1019414:	008040b4 	movhi	r2,258
 1019418:	109f9e04 	addi	r2,r2,32376
 101941c:	10800017 	ldw	r2,0(r2)
 1019420:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1019424:	00003306 	br	10194f4 <alt_find_file+0x100>
  {
    len = strlen(next->name);
 1019428:	e0bffd17 	ldw	r2,-12(fp)
 101942c:	11000217 	ldw	r4,8(r2)
 1019430:	10028ac0 	call	10028ac <strlen>
 1019434:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 1019438:	e0bffd17 	ldw	r2,-12(fp)
 101943c:	10c00217 	ldw	r3,8(r2)
 1019440:	e0bffc17 	ldw	r2,-16(fp)
 1019444:	1885883a 	add	r2,r3,r2
 1019448:	10bfffc4 	addi	r2,r2,-1
 101944c:	10800003 	ldbu	r2,0(r2)
 1019450:	10803fcc 	andi	r2,r2,255
 1019454:	1080201c 	xori	r2,r2,128
 1019458:	10bfe004 	addi	r2,r2,-128
 101945c:	10800bd8 	cmpnei	r2,r2,47
 1019460:	1000031e 	bne	r2,zero,1019470 <alt_find_file+0x7c>
    {
      len -= 1;
 1019464:	e0bffc17 	ldw	r2,-16(fp)
 1019468:	10bfffc4 	addi	r2,r2,-1
 101946c:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 1019470:	e0bffc17 	ldw	r2,-16(fp)
 1019474:	1007883a 	mov	r3,r2
 1019478:	e0bffe17 	ldw	r2,-8(fp)
 101947c:	1885883a 	add	r2,r3,r2
 1019480:	10800003 	ldbu	r2,0(r2)
 1019484:	10803fcc 	andi	r2,r2,255
 1019488:	1080201c 	xori	r2,r2,128
 101948c:	10bfe004 	addi	r2,r2,-128
 1019490:	10800be0 	cmpeqi	r2,r2,47
 1019494:	10000a1e 	bne	r2,zero,10194c0 <alt_find_file+0xcc>
 1019498:	e0bffc17 	ldw	r2,-16(fp)
 101949c:	1007883a 	mov	r3,r2
 10194a0:	e0bffe17 	ldw	r2,-8(fp)
 10194a4:	1885883a 	add	r2,r3,r2
 10194a8:	10800003 	ldbu	r2,0(r2)
 10194ac:	10803fcc 	andi	r2,r2,255
 10194b0:	1080201c 	xori	r2,r2,128
 10194b4:	10bfe004 	addi	r2,r2,-128
 10194b8:	1004c03a 	cmpne	r2,r2,zero
 10194bc:	10000a1e 	bne	r2,zero,10194e8 <alt_find_file+0xf4>
 10194c0:	e0bffd17 	ldw	r2,-12(fp)
 10194c4:	11000217 	ldw	r4,8(r2)
 10194c8:	e1bffc17 	ldw	r6,-16(fp)
 10194cc:	e17ffe17 	ldw	r5,-8(fp)
 10194d0:	10196940 	call	1019694 <memcmp>
 10194d4:	1004c03a 	cmpne	r2,r2,zero
 10194d8:	1000031e 	bne	r2,zero,10194e8 <alt_find_file+0xf4>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 10194dc:	e0bffd17 	ldw	r2,-12(fp)
 10194e0:	e0bfff15 	stw	r2,-4(fp)
 10194e4:	00000806 	br	1019508 <alt_find_file+0x114>
    }
    next = (alt_dev*) next->llist.next;
 10194e8:	e0bffd17 	ldw	r2,-12(fp)
 10194ec:	10800017 	ldw	r2,0(r2)
 10194f0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 10194f4:	00c040b4 	movhi	r3,258
 10194f8:	18df9e04 	addi	r3,r3,32376
 10194fc:	e0bffd17 	ldw	r2,-12(fp)
 1019500:	10ffc91e 	bne	r2,r3,1019428 <alt_find_file+0x34>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 1019504:	e03fff15 	stw	zero,-4(fp)
 1019508:	e0bfff17 	ldw	r2,-4(fp)
}
 101950c:	e037883a 	mov	sp,fp
 1019510:	dfc00117 	ldw	ra,4(sp)
 1019514:	df000017 	ldw	fp,0(sp)
 1019518:	dec00204 	addi	sp,sp,8
 101951c:	f800283a 	ret

01019520 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 1019520:	f811883a 	mov	r8,ra
 1019524:	100c1d00 	call	100c1d0 <_mcount>
 1019528:	403f883a 	mov	ra,r8
 101952c:	defff704 	addi	sp,sp,-36
 1019530:	dfc00815 	stw	ra,32(sp)
 1019534:	df000715 	stw	fp,28(sp)
 1019538:	dc000615 	stw	r16,24(sp)
 101953c:	df000604 	addi	fp,sp,24
 1019540:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 1019544:	00bffa04 	movi	r2,-24
 1019548:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
 101954c:	008040f4 	movhi	r2,259
 1019550:	1096eb04 	addi	r2,r2,23468
 1019554:	10800017 	ldw	r2,0(r2)
 1019558:	e0bffa15 	stw	r2,-24(fp)
 101955c:	e03ffb0d 	sth	zero,-20(fp)
 1019560:	e17ffb0b 	ldhu	r5,-20(fp)
 1019564:	e1bffe04 	addi	r6,fp,-8
 1019568:	e13ffa17 	ldw	r4,-24(fp)
 101956c:	1012b040 	call	1012b04 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1019570:	e03ffd15 	stw	zero,-12(fp)
 1019574:	00002006 	br	10195f8 <alt_get_fd+0xd8>
  {
    if (!alt_fd_list[i].dev)
 1019578:	e13ffd17 	ldw	r4,-12(fp)
 101957c:	040040b4 	movhi	r16,258
 1019580:	841ad904 	addi	r16,r16,27492
 1019584:	01400304 	movi	r5,12
 1019588:	10021e00 	call	10021e0 <__mulsi3>
 101958c:	1405883a 	add	r2,r2,r16
 1019590:	10800017 	ldw	r2,0(r2)
 1019594:	1004c03a 	cmpne	r2,r2,zero
 1019598:	1000141e 	bne	r2,zero,10195ec <alt_get_fd+0xcc>
    {
      alt_fd_list[i].dev = dev;
 101959c:	e13ffd17 	ldw	r4,-12(fp)
 10195a0:	040040b4 	movhi	r16,258
 10195a4:	841ad904 	addi	r16,r16,27492
 10195a8:	01400304 	movi	r5,12
 10195ac:	10021e00 	call	10021e0 <__mulsi3>
 10195b0:	1407883a 	add	r3,r2,r16
 10195b4:	e0bfff17 	ldw	r2,-4(fp)
 10195b8:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 10195bc:	008040b4 	movhi	r2,258
 10195c0:	109fa204 	addi	r2,r2,32392
 10195c4:	10c00017 	ldw	r3,0(r2)
 10195c8:	e0bffd17 	ldw	r2,-12(fp)
 10195cc:	1880040e 	bge	r3,r2,10195e0 <alt_get_fd+0xc0>
      {
        alt_max_fd = i;
 10195d0:	00c040b4 	movhi	r3,258
 10195d4:	18dfa204 	addi	r3,r3,32392
 10195d8:	e0bffd17 	ldw	r2,-12(fp)
 10195dc:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 10195e0:	e0bffd17 	ldw	r2,-12(fp)
 10195e4:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
 10195e8:	00000606 	br	1019604 <alt_get_fd+0xe4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 10195ec:	e0bffd17 	ldw	r2,-12(fp)
 10195f0:	10800044 	addi	r2,r2,1
 10195f4:	e0bffd15 	stw	r2,-12(fp)
 10195f8:	e0bffd17 	ldw	r2,-12(fp)
 10195fc:	10800810 	cmplti	r2,r2,32
 1019600:	103fdd1e 	bne	r2,zero,1019578 <alt_get_fd+0x58>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
 1019604:	008040f4 	movhi	r2,259
 1019608:	1096eb04 	addi	r2,r2,23468
 101960c:	11000017 	ldw	r4,0(r2)
 1019610:	1012f140 	call	1012f14 <OSSemPost>

  return rc;
 1019614:	e0bffc17 	ldw	r2,-16(fp)
}
 1019618:	e037883a 	mov	sp,fp
 101961c:	dfc00217 	ldw	ra,8(sp)
 1019620:	df000117 	ldw	fp,4(sp)
 1019624:	dc000017 	ldw	r16,0(sp)
 1019628:	dec00304 	addi	sp,sp,12
 101962c:	f800283a 	ret

01019630 <atexit>:
 1019630:	f811883a 	mov	r8,ra
 1019634:	100c1d00 	call	100c1d0 <_mcount>
 1019638:	403f883a 	mov	ra,r8
 101963c:	000d883a 	mov	r6,zero
 1019640:	200b883a 	mov	r5,r4
 1019644:	000f883a 	mov	r7,zero
 1019648:	0009883a 	mov	r4,zero
 101964c:	10197141 	jmpi	1019714 <__register_exitproc>

01019650 <exit>:
 1019650:	f811883a 	mov	r8,ra
 1019654:	100c1d00 	call	100c1d0 <_mcount>
 1019658:	403f883a 	mov	ra,r8
 101965c:	defffe04 	addi	sp,sp,-8
 1019660:	dfc00115 	stw	ra,4(sp)
 1019664:	dc000015 	stw	r16,0(sp)
 1019668:	000b883a 	mov	r5,zero
 101966c:	2021883a 	mov	r16,r4
 1019670:	10198640 	call	1019864 <__call_exitprocs>
 1019674:	008040b4 	movhi	r2,258
 1019678:	109f9904 	addi	r2,r2,32356
 101967c:	11000017 	ldw	r4,0(r2)
 1019680:	20800f17 	ldw	r2,60(r4)
 1019684:	10000126 	beq	r2,zero,101968c <exit+0x3c>
 1019688:	103ee83a 	callr	r2
 101968c:	8009883a 	mov	r4,r16
 1019690:	1019bf00 	call	1019bf0 <_exit>

01019694 <memcmp>:
 1019694:	f811883a 	mov	r8,ra
 1019698:	100c1d00 	call	100c1d0 <_mcount>
 101969c:	403f883a 	mov	ra,r8
 10196a0:	00c000c4 	movi	r3,3
 10196a4:	1980032e 	bgeu	r3,r6,10196b4 <memcmp+0x20>
 10196a8:	2144b03a 	or	r2,r4,r5
 10196ac:	10c4703a 	and	r2,r2,r3
 10196b0:	10000f26 	beq	r2,zero,10196f0 <memcmp+0x5c>
 10196b4:	31ffffc4 	addi	r7,r6,-1
 10196b8:	3000061e 	bne	r6,zero,10196d4 <memcmp+0x40>
 10196bc:	00000a06 	br	10196e8 <memcmp+0x54>
 10196c0:	39ffffc4 	addi	r7,r7,-1
 10196c4:	00bfffc4 	movi	r2,-1
 10196c8:	21000044 	addi	r4,r4,1
 10196cc:	29400044 	addi	r5,r5,1
 10196d0:	38800526 	beq	r7,r2,10196e8 <memcmp+0x54>
 10196d4:	20c00003 	ldbu	r3,0(r4)
 10196d8:	28800003 	ldbu	r2,0(r5)
 10196dc:	18bff826 	beq	r3,r2,10196c0 <memcmp+0x2c>
 10196e0:	1885c83a 	sub	r2,r3,r2
 10196e4:	f800283a 	ret
 10196e8:	0005883a 	mov	r2,zero
 10196ec:	f800283a 	ret
 10196f0:	180f883a 	mov	r7,r3
 10196f4:	20c00017 	ldw	r3,0(r4)
 10196f8:	28800017 	ldw	r2,0(r5)
 10196fc:	18bfed1e 	bne	r3,r2,10196b4 <memcmp+0x20>
 1019700:	31bfff04 	addi	r6,r6,-4
 1019704:	21000104 	addi	r4,r4,4
 1019708:	29400104 	addi	r5,r5,4
 101970c:	39bff936 	bltu	r7,r6,10196f4 <memcmp+0x60>
 1019710:	003fe806 	br	10196b4 <memcmp+0x20>

01019714 <__register_exitproc>:
 1019714:	f811883a 	mov	r8,ra
 1019718:	100c1d00 	call	100c1d0 <_mcount>
 101971c:	403f883a 	mov	ra,r8
 1019720:	defffa04 	addi	sp,sp,-24
 1019724:	dfc00515 	stw	ra,20(sp)
 1019728:	dd000415 	stw	r20,16(sp)
 101972c:	dcc00315 	stw	r19,12(sp)
 1019730:	dc800215 	stw	r18,8(sp)
 1019734:	dc400115 	stw	r17,4(sp)
 1019738:	dc000015 	stw	r16,0(sp)
 101973c:	008040b4 	movhi	r2,258
 1019740:	109f9904 	addi	r2,r2,32356
 1019744:	14000017 	ldw	r16,0(r2)
 1019748:	2829883a 	mov	r20,r5
 101974c:	2023883a 	mov	r17,r4
 1019750:	81405217 	ldw	r5,328(r16)
 1019754:	3027883a 	mov	r19,r6
 1019758:	3825883a 	mov	r18,r7
 101975c:	28002526 	beq	r5,zero,10197f4 <__register_exitproc+0xe0>
 1019760:	29000117 	ldw	r4,4(r5)
 1019764:	008007c4 	movi	r2,31
 1019768:	11002716 	blt	r2,r4,1019808 <__register_exitproc+0xf4>
 101976c:	8800101e 	bne	r17,zero,10197b0 <__register_exitproc+0x9c>
 1019770:	2105883a 	add	r2,r4,r4
 1019774:	1085883a 	add	r2,r2,r2
 1019778:	20c00044 	addi	r3,r4,1
 101977c:	1145883a 	add	r2,r2,r5
 1019780:	0009883a 	mov	r4,zero
 1019784:	15000215 	stw	r20,8(r2)
 1019788:	28c00115 	stw	r3,4(r5)
 101978c:	2005883a 	mov	r2,r4
 1019790:	dfc00517 	ldw	ra,20(sp)
 1019794:	dd000417 	ldw	r20,16(sp)
 1019798:	dcc00317 	ldw	r19,12(sp)
 101979c:	dc800217 	ldw	r18,8(sp)
 10197a0:	dc400117 	ldw	r17,4(sp)
 10197a4:	dc000017 	ldw	r16,0(sp)
 10197a8:	dec00604 	addi	sp,sp,24
 10197ac:	f800283a 	ret
 10197b0:	29802204 	addi	r6,r5,136
 10197b4:	00800044 	movi	r2,1
 10197b8:	110e983a 	sll	r7,r2,r4
 10197bc:	30c04017 	ldw	r3,256(r6)
 10197c0:	2105883a 	add	r2,r4,r4
 10197c4:	1085883a 	add	r2,r2,r2
 10197c8:	1185883a 	add	r2,r2,r6
 10197cc:	19c6b03a 	or	r3,r3,r7
 10197d0:	14802015 	stw	r18,128(r2)
 10197d4:	14c00015 	stw	r19,0(r2)
 10197d8:	00800084 	movi	r2,2
 10197dc:	30c04015 	stw	r3,256(r6)
 10197e0:	88bfe31e 	bne	r17,r2,1019770 <__register_exitproc+0x5c>
 10197e4:	30804117 	ldw	r2,260(r6)
 10197e8:	11c4b03a 	or	r2,r2,r7
 10197ec:	30804115 	stw	r2,260(r6)
 10197f0:	003fdf06 	br	1019770 <__register_exitproc+0x5c>
 10197f4:	00804134 	movhi	r2,260
 10197f8:	109f0704 	addi	r2,r2,31772
 10197fc:	100b883a 	mov	r5,r2
 1019800:	80805215 	stw	r2,328(r16)
 1019804:	003fd606 	br	1019760 <__register_exitproc+0x4c>
 1019808:	00800034 	movhi	r2,0
 101980c:	10800004 	addi	r2,r2,0
 1019810:	1000021e 	bne	r2,zero,101981c <__register_exitproc+0x108>
 1019814:	013fffc4 	movi	r4,-1
 1019818:	003fdc06 	br	101978c <__register_exitproc+0x78>
 101981c:	01006404 	movi	r4,400
 1019820:	103ee83a 	callr	r2
 1019824:	1007883a 	mov	r3,r2
 1019828:	103ffa26 	beq	r2,zero,1019814 <__register_exitproc+0x100>
 101982c:	80805217 	ldw	r2,328(r16)
 1019830:	180b883a 	mov	r5,r3
 1019834:	18000115 	stw	zero,4(r3)
 1019838:	18800015 	stw	r2,0(r3)
 101983c:	80c05215 	stw	r3,328(r16)
 1019840:	18006215 	stw	zero,392(r3)
 1019844:	18006315 	stw	zero,396(r3)
 1019848:	0009883a 	mov	r4,zero
 101984c:	883fc826 	beq	r17,zero,1019770 <__register_exitproc+0x5c>
 1019850:	003fd706 	br	10197b0 <__register_exitproc+0x9c>

01019854 <register_fini>:
 1019854:	f811883a 	mov	r8,ra
 1019858:	100c1d00 	call	100c1d0 <_mcount>
 101985c:	403f883a 	mov	ra,r8
 1019860:	f800283a 	ret

01019864 <__call_exitprocs>:
 1019864:	f811883a 	mov	r8,ra
 1019868:	100c1d00 	call	100c1d0 <_mcount>
 101986c:	403f883a 	mov	ra,r8
 1019870:	defff304 	addi	sp,sp,-52
 1019874:	dfc00c15 	stw	ra,48(sp)
 1019878:	df000b15 	stw	fp,44(sp)
 101987c:	ddc00a15 	stw	r23,40(sp)
 1019880:	dd800915 	stw	r22,36(sp)
 1019884:	dd400815 	stw	r21,32(sp)
 1019888:	dd000715 	stw	r20,28(sp)
 101988c:	dcc00615 	stw	r19,24(sp)
 1019890:	dc800515 	stw	r18,20(sp)
 1019894:	dc400415 	stw	r17,16(sp)
 1019898:	dc000315 	stw	r16,12(sp)
 101989c:	008040b4 	movhi	r2,258
 10198a0:	109f9904 	addi	r2,r2,32356
 10198a4:	10800017 	ldw	r2,0(r2)
 10198a8:	282b883a 	mov	r21,r5
 10198ac:	2039883a 	mov	fp,r4
 10198b0:	d8800115 	stw	r2,4(sp)
 10198b4:	00800034 	movhi	r2,0
 10198b8:	10800004 	addi	r2,r2,0
 10198bc:	1005003a 	cmpeq	r2,r2,zero
 10198c0:	d8800215 	stw	r2,8(sp)
 10198c4:	d8800117 	ldw	r2,4(sp)
 10198c8:	2829003a 	cmpeq	r20,r5,zero
 10198cc:	10805204 	addi	r2,r2,328
 10198d0:	d8800015 	stw	r2,0(sp)
 10198d4:	d8800117 	ldw	r2,4(sp)
 10198d8:	14405217 	ldw	r17,328(r2)
 10198dc:	88001026 	beq	r17,zero,1019920 <__call_exitprocs+0xbc>
 10198e0:	ddc00017 	ldw	r23,0(sp)
 10198e4:	88800117 	ldw	r2,4(r17)
 10198e8:	8c802204 	addi	r18,r17,136
 10198ec:	143fffc4 	addi	r16,r2,-1
 10198f0:	80000916 	blt	r16,zero,1019918 <__call_exitprocs+0xb4>
 10198f4:	05bfffc4 	movi	r22,-1
 10198f8:	a000151e 	bne	r20,zero,1019950 <__call_exitprocs+0xec>
 10198fc:	8409883a 	add	r4,r16,r16
 1019900:	2105883a 	add	r2,r4,r4
 1019904:	1485883a 	add	r2,r2,r18
 1019908:	10c02017 	ldw	r3,128(r2)
 101990c:	a8c01126 	beq	r21,r3,1019954 <__call_exitprocs+0xf0>
 1019910:	843fffc4 	addi	r16,r16,-1
 1019914:	85bff81e 	bne	r16,r22,10198f8 <__call_exitprocs+0x94>
 1019918:	d8800217 	ldw	r2,8(sp)
 101991c:	10003126 	beq	r2,zero,10199e4 <__call_exitprocs+0x180>
 1019920:	dfc00c17 	ldw	ra,48(sp)
 1019924:	df000b17 	ldw	fp,44(sp)
 1019928:	ddc00a17 	ldw	r23,40(sp)
 101992c:	dd800917 	ldw	r22,36(sp)
 1019930:	dd400817 	ldw	r21,32(sp)
 1019934:	dd000717 	ldw	r20,28(sp)
 1019938:	dcc00617 	ldw	r19,24(sp)
 101993c:	dc800517 	ldw	r18,20(sp)
 1019940:	dc400417 	ldw	r17,16(sp)
 1019944:	dc000317 	ldw	r16,12(sp)
 1019948:	dec00d04 	addi	sp,sp,52
 101994c:	f800283a 	ret
 1019950:	8409883a 	add	r4,r16,r16
 1019954:	88c00117 	ldw	r3,4(r17)
 1019958:	2105883a 	add	r2,r4,r4
 101995c:	1445883a 	add	r2,r2,r17
 1019960:	18ffffc4 	addi	r3,r3,-1
 1019964:	11800217 	ldw	r6,8(r2)
 1019968:	1c001526 	beq	r3,r16,10199c0 <__call_exitprocs+0x15c>
 101996c:	10000215 	stw	zero,8(r2)
 1019970:	303fe726 	beq	r6,zero,1019910 <__call_exitprocs+0xac>
 1019974:	00c00044 	movi	r3,1
 1019978:	1c06983a 	sll	r3,r3,r16
 101997c:	90804017 	ldw	r2,256(r18)
 1019980:	8cc00117 	ldw	r19,4(r17)
 1019984:	1884703a 	and	r2,r3,r2
 1019988:	10001426 	beq	r2,zero,10199dc <__call_exitprocs+0x178>
 101998c:	90804117 	ldw	r2,260(r18)
 1019990:	1884703a 	and	r2,r3,r2
 1019994:	10000c1e 	bne	r2,zero,10199c8 <__call_exitprocs+0x164>
 1019998:	2105883a 	add	r2,r4,r4
 101999c:	1485883a 	add	r2,r2,r18
 10199a0:	11400017 	ldw	r5,0(r2)
 10199a4:	e009883a 	mov	r4,fp
 10199a8:	303ee83a 	callr	r6
 10199ac:	88800117 	ldw	r2,4(r17)
 10199b0:	98bfc81e 	bne	r19,r2,10198d4 <__call_exitprocs+0x70>
 10199b4:	b8800017 	ldw	r2,0(r23)
 10199b8:	147fd526 	beq	r2,r17,1019910 <__call_exitprocs+0xac>
 10199bc:	003fc506 	br	10198d4 <__call_exitprocs+0x70>
 10199c0:	8c000115 	stw	r16,4(r17)
 10199c4:	003fea06 	br	1019970 <__call_exitprocs+0x10c>
 10199c8:	2105883a 	add	r2,r4,r4
 10199cc:	1485883a 	add	r2,r2,r18
 10199d0:	11000017 	ldw	r4,0(r2)
 10199d4:	303ee83a 	callr	r6
 10199d8:	003ff406 	br	10199ac <__call_exitprocs+0x148>
 10199dc:	303ee83a 	callr	r6
 10199e0:	003ff206 	br	10199ac <__call_exitprocs+0x148>
 10199e4:	88800117 	ldw	r2,4(r17)
 10199e8:	1000081e 	bne	r2,zero,1019a0c <__call_exitprocs+0x1a8>
 10199ec:	89000017 	ldw	r4,0(r17)
 10199f0:	20000726 	beq	r4,zero,1019a10 <__call_exitprocs+0x1ac>
 10199f4:	b9000015 	stw	r4,0(r23)
 10199f8:	8809883a 	mov	r4,r17
 10199fc:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 1019a00:	bc400017 	ldw	r17,0(r23)
 1019a04:	883fb71e 	bne	r17,zero,10198e4 <__call_exitprocs+0x80>
 1019a08:	003fc506 	br	1019920 <__call_exitprocs+0xbc>
 1019a0c:	89000017 	ldw	r4,0(r17)
 1019a10:	882f883a 	mov	r23,r17
 1019a14:	2023883a 	mov	r17,r4
 1019a18:	883fb21e 	bne	r17,zero,10198e4 <__call_exitprocs+0x80>
 1019a1c:	003fc006 	br	1019920 <__call_exitprocs+0xbc>

01019a20 <__fixunsdfsi>:
 1019a20:	f811883a 	mov	r8,ra
 1019a24:	100c1d00 	call	100c1d0 <_mcount>
 1019a28:	403f883a 	mov	ra,r8
 1019a2c:	defffb04 	addi	sp,sp,-20
 1019a30:	dfc00415 	stw	ra,16(sp)
 1019a34:	dcc00315 	stw	r19,12(sp)
 1019a38:	dc800215 	stw	r18,8(sp)
 1019a3c:	dc400115 	stw	r17,4(sp)
 1019a40:	dc000015 	stw	r16,0(sp)
 1019a44:	04507834 	movhi	r17,16864
 1019a48:	0021883a 	mov	r16,zero
 1019a4c:	800d883a 	mov	r6,r16
 1019a50:	880f883a 	mov	r7,r17
 1019a54:	2025883a 	mov	r18,r4
 1019a58:	2827883a 	mov	r19,r5
 1019a5c:	100b3d40 	call	100b3d4 <__gedf2>
 1019a60:	000d883a 	mov	r6,zero
 1019a64:	880f883a 	mov	r7,r17
 1019a68:	980b883a 	mov	r5,r19
 1019a6c:	9009883a 	mov	r4,r18
 1019a70:	10000d16 	blt	r2,zero,1019aa8 <__fixunsdfsi+0x88>
 1019a74:	100ad3c0 	call	100ad3c <__subdf3>
 1019a78:	180b883a 	mov	r5,r3
 1019a7c:	1009883a 	mov	r4,r2
 1019a80:	100b6000 	call	100b600 <__fixdfsi>
 1019a84:	00e00034 	movhi	r3,32768
 1019a88:	10c5883a 	add	r2,r2,r3
 1019a8c:	dfc00417 	ldw	ra,16(sp)
 1019a90:	dcc00317 	ldw	r19,12(sp)
 1019a94:	dc800217 	ldw	r18,8(sp)
 1019a98:	dc400117 	ldw	r17,4(sp)
 1019a9c:	dc000017 	ldw	r16,0(sp)
 1019aa0:	dec00504 	addi	sp,sp,20
 1019aa4:	f800283a 	ret
 1019aa8:	980b883a 	mov	r5,r19
 1019aac:	9009883a 	mov	r4,r18
 1019ab0:	100b6000 	call	100b600 <__fixdfsi>
 1019ab4:	dfc00417 	ldw	ra,16(sp)
 1019ab8:	dcc00317 	ldw	r19,12(sp)
 1019abc:	dc800217 	ldw	r18,8(sp)
 1019ac0:	dc400117 	ldw	r17,4(sp)
 1019ac4:	dc000017 	ldw	r16,0(sp)
 1019ac8:	dec00504 	addi	sp,sp,20
 1019acc:	f800283a 	ret

01019ad0 <__floatundidf>:
 1019ad0:	f811883a 	mov	r8,ra
 1019ad4:	100c1d00 	call	100c1d0 <_mcount>
 1019ad8:	403f883a 	mov	ra,r8
 1019adc:	defffb04 	addi	sp,sp,-20
 1019ae0:	dfc00415 	stw	ra,16(sp)
 1019ae4:	dcc00315 	stw	r19,12(sp)
 1019ae8:	dc800215 	stw	r18,8(sp)
 1019aec:	dc400115 	stw	r17,4(sp)
 1019af0:	dc000015 	stw	r16,0(sp)
 1019af4:	2025883a 	mov	r18,r4
 1019af8:	2809883a 	mov	r4,r5
 1019afc:	1001eb80 	call	1001eb8 <__floatunsidf>
 1019b00:	100d883a 	mov	r6,r2
 1019b04:	180f883a 	mov	r7,r3
 1019b08:	0005883a 	mov	r2,zero
 1019b0c:	00d07c34 	movhi	r3,16880
 1019b10:	380b883a 	mov	r5,r7
 1019b14:	3009883a 	mov	r4,r6
 1019b18:	180f883a 	mov	r7,r3
 1019b1c:	100d883a 	mov	r6,r2
 1019b20:	100ae480 	call	100ae48 <__muldf3>
 1019b24:	9009883a 	mov	r4,r18
 1019b28:	1021883a 	mov	r16,r2
 1019b2c:	1823883a 	mov	r17,r3
 1019b30:	1001eb80 	call	1001eb8 <__floatunsidf>
 1019b34:	880b883a 	mov	r5,r17
 1019b38:	8009883a 	mov	r4,r16
 1019b3c:	180f883a 	mov	r7,r3
 1019b40:	100d883a 	mov	r6,r2
 1019b44:	100adc80 	call	100adc8 <__adddf3>
 1019b48:	dfc00417 	ldw	ra,16(sp)
 1019b4c:	dcc00317 	ldw	r19,12(sp)
 1019b50:	dc800217 	ldw	r18,8(sp)
 1019b54:	dc400117 	ldw	r17,4(sp)
 1019b58:	dc000017 	ldw	r16,0(sp)
 1019b5c:	dec00504 	addi	sp,sp,20
 1019b60:	f800283a 	ret

01019b64 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 1019b64:	f811883a 	mov	r8,ra
 1019b68:	100c1d00 	call	100c1d0 <_mcount>
 1019b6c:	403f883a 	mov	ra,r8
 1019b70:	defffb04 	addi	sp,sp,-20
 1019b74:	df000415 	stw	fp,16(sp)
 1019b78:	df000404 	addi	fp,sp,16
 1019b7c:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 1019b80:	e0bfff17 	ldw	r2,-4(fp)
 1019b84:	e0bffe15 	stw	r2,-8(fp)

#if defined(NIOS2_HAS_DEBUG_STUB) && (defined(ALT_BREAK_ON_EXIT) || defined(ALT_PROVIDE_GMON))

  int r3 = (1 << 2);
 1019b88:	00800104 	movi	r2,4
 1019b8c:	e0bffd15 	stw	r2,-12(fp)

#ifdef ALT_PROVIDE_GMON
  extern unsigned int alt_gmon_data[];
  int r4 = (int)alt_gmon_data;
 1019b90:	008040b4 	movhi	r2,258
 1019b94:	109f8e04 	addi	r2,r2,32312
 1019b98:	e0bffc15 	stw	r2,-16(fp)
  r3 |= (1 << 4);
 1019b9c:	e0bffd17 	ldw	r2,-12(fp)
 1019ba0:	10800414 	ori	r2,r2,16
 1019ba4:	e0bffd15 	stw	r2,-12(fp)
#define ALT_GMON_DATA ,"D04"(r4)
#else
#define ALT_GMON_DATA
#endif /* ALT_PROVIDE_GMON */

  if (r2) {
 1019ba8:	e0bffe17 	ldw	r2,-8(fp)
 1019bac:	1005003a 	cmpeq	r2,r2,zero
 1019bb0:	1000021e 	bne	r2,zero,1019bbc <alt_sim_halt+0x58>
    ALT_SIM_FAIL();
 1019bb4:	002af070 	cmpltui	zero,zero,43969
 1019bb8:	00000106 	br	1019bc0 <alt_sim_halt+0x5c>
  } else {
    ALT_SIM_PASS();
 1019bbc:	002af0b0 	cmpltui	zero,zero,43970
  }

  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */
 1019bc0:	00800234 	movhi	r2,8
 1019bc4:	10a84804 	addi	r2,r2,-24288
 1019bc8:	10bfffc4 	addi	r2,r2,-1
 1019bcc:	00bffe16 	blt	zero,r2,1019bc8 <alt_sim_halt+0x64>

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );
 1019bd0:	e0bffe17 	ldw	r2,-8(fp)
 1019bd4:	e0fffd17 	ldw	r3,-12(fp)
 1019bd8:	e13ffc17 	ldw	r4,-16(fp)
 1019bdc:	003da0ba 	break	2
    ALT_SIM_FAIL();
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
 1019be0:	e037883a 	mov	sp,fp
 1019be4:	df000017 	ldw	fp,0(sp)
 1019be8:	dec00104 	addi	sp,sp,4
 1019bec:	f800283a 	ret

01019bf0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 1019bf0:	f811883a 	mov	r8,ra
 1019bf4:	100c1d00 	call	100c1d0 <_mcount>
 1019bf8:	403f883a 	mov	ra,r8
 1019bfc:	defffd04 	addi	sp,sp,-12
 1019c00:	dfc00215 	stw	ra,8(sp)
 1019c04:	df000115 	stw	fp,4(sp)
 1019c08:	df000104 	addi	fp,sp,4
 1019c0c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 1019c10:	008040f4 	movhi	r2,259
 1019c14:	1096f804 	addi	r2,r2,23520
 1019c18:	10000005 	stb	zero,0(r2)

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 1019c1c:	e13fff17 	ldw	r4,-4(fp)
 1019c20:	1019b640 	call	1019b64 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 1019c24:	003fff06 	br	1019c24 <_exit+0x34>
 1019c28:	01019854 	movui	r4,1633
